function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = e || self).json2mesh = {})
}(this, (function(e) {
    "use strict";
    var t, i, r, n, o, s, a, l, u, c, h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    }
    , p = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }, d = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }(), f = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + typeof t);
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }, m = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" != typeof t && "function" != typeof t ? e : t
    }, g = function() {
        function e() {
            p(this, e)
        }
        return d(e, null, [{
            key: "compatibilityProcessWorld",
            value: function(e) {
                this.compatibilityProcessPlan(e.outdoors);
                for (var t = e.buildings, i = 0; i < t.length; i++)
                    for (var r = t[i].floorplans, n = 0; n < r.length; n++) {
                        var o = r[n];
                        this.compatibilityProcessPlan(o)
                    }
            }
        }, {
            key: "compatibilityProcessPlan",
            value: function(e) {
                for (var t = 0; t < e.combineStraightManualWallObjects.length; t++) {
                    var i = e.combineStraightManualWallObjects[t];
                    e.combineStraightManualWalls.push(i.delayObject)
                }
                for (var r = 0; r < e.combineCeilingObjects.length; r++) {
                    var n = e.combineCeilingObjects[r];
                    e.combineCeilings.push(n.delayObject)
                }
                for (var o = 0; o < e.combineFloorObjects.length; o++) {
                    var s = e.combineFloorObjects[o];
                    e.combineFloors.push(s.delayObject)
                }
                for (var a = 0; a < e.combineRoofObjects.length; a++) {
                    var l = e.combineRoofObjects[a];
                    e.combineRoofs.push(l.delayObject)
                }
                for (var u = 0; u < e.combineModelWallObjects.length; u++) {
                    var c = e.combineModelWallObjects[u];
                    e.combineModelWalls.push(c.delayObject)
                }
                for (var h = 0; h < e.combineDoorOrWindowObjects.length; h++) {
                    var p = e.combineDoorOrWindowObjects[h];
                    e.combineDoorOrWins.push(p.delayObject)
                }
                for (var d = 0; d < e.combinePlacementObjects.length; d++) {
                    var f = e.combinePlacementObjects[d];
                    e.combinePlacements.push(f.delayObject)
                }
            }
        }, {
            key: "combineObjectBuildCallback",
            value: function(e) {
                var t = null;
                -1 !== e.constructor.name.indexOf("Ceiling") ? t = e.parent.combineCeilings : -1 !== e.constructor.name.indexOf("DoorOrWindow") ? t = e.parent.combineDoorOrWins : -1 !== e.constructor.name.indexOf("Floor") ? t = e.parent.combineFloors : -1 !== e.constructor.name.indexOf("ModelWall") ? t = e.parent.combineModelWalls : -1 !== e.constructor.name.indexOf("Placement") ? t = e.parent.combinePlacements : -1 !== e.constructor.name.indexOf("Roof") ? t = e.parent.combineRoofs : -1 !== e.constructor.name.indexOf("Straight") && (t = e.parent.combineStraightManualWalls),
                t.push(e.mesh)
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : h(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }]),
        e
    }(), v = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }, y = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }(), b = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }, _ = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }, x = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }, E = new (function() {
        function e(t) {
            v(this, e),
            this.config = null,
            this.objectManager = null
        }
        return y(e, [{
            key: "createObject",
            value: function(e) {
                var t = new (this.config.getClass(e.creatorType))(e)
                  , i = t.create();
                return t.parseChildren(),
                i
            }
        }]),
        e
    }()), w = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: (i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        r = new Array(36),
        n = 0,
        function() {
            for (var e = 0; e < 36; e++)
                8 === e || 13 === e || 18 === e || 23 === e ? r[e] = "-" : 14 === e ? r[e] = "4" : (n <= 2 && (n = 33554432 + 16777216 * Math.random() | 0),
                t = 15 & n,
                n >>= 4,
                r[e] = i[19 === e ? 3 & t | 8 : t]);
            return r.join("")
        }
        ),
        clamp: function(e, t, i) {
            return Math.max(t, Math.min(i, e))
        },
        euclideanModulo: function(e, t) {
            return (e % t + t) % t
        },
        mapLinear: function(e, t, i, r, n) {
            return r + (e - t) * (n - r) / (i - t)
        },
        lerp: function(e, t, i) {
            return (1 - i) * e + i * t
        },
        smoothstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * (3 - 2 * e)
        },
        smootherstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * e * (e * (6 * e - 15) + 10)
        },
        randInt: function(e, t) {
            return e + Math.floor(Math.random() * (t - e + 1))
        },
        randFloat: function(e, t) {
            return e + Math.random() * (t - e)
        },
        randFloatSpread: function(e) {
            return e * (.5 - Math.random())
        },
        degToRad: function(e) {
            return e * w.DEG2RAD
        },
        radToDeg: function(e) {
            return e * w.RAD2DEG
        },
        isPowerOfTwo: function(e) {
            return 0 == (e & e - 1) && 0 !== e
        },
        nearestPowerOfTwo: function(e) {
            return Math.pow(2, Math.round(Math.log(e) / Math.LN2))
        },
        nextPowerOfTwo: function(e) {
            return e--,
            e |= e >> 1,
            e |= e >> 2,
            e |= e >> 4,
            e |= e >> 8,
            e |= e >> 16,
            ++e
        }
    }, T = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }, M = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }(), C = function() {
        function e(t, i, r, n) {
            T(this, e),
            this._x = t || 0,
            this._y = i || 0,
            this._z = r || 0,
            this._w = void 0 !== n ? n : 1
        }
        return M(e, [{
            key: "slerp",
            value: function(e, t, i, r) {
                return i.copy(e).slerp(t, r)
            }
        }, {
            key: "slerpFlat",
            value: function(e, t, i, r, n, o, s) {
                var a = i[r + 0]
                  , l = i[r + 1]
                  , u = i[r + 2]
                  , c = i[r + 3]
                  , h = n[o + 0]
                  , p = n[o + 1]
                  , d = n[o + 2]
                  , f = n[o + 3];
                if (c !== f || a !== h || l !== p || u !== d) {
                    var m = 1 - s
                      , g = a * h + l * p + u * d + c * f
                      , v = g >= 0 ? 1 : -1
                      , y = 1 - g * g;
                    if (y > Number.EPSILON) {
                        var b = Math.sqrt(y)
                          , _ = Math.atan2(b, g * v);
                        m = Math.sin(m * _) / b,
                        s = Math.sin(s * _) / b
                    }
                    var x = s * v;
                    if (a = a * m + h * x,
                    l = l * m + p * x,
                    u = u * m + d * x,
                    c = c * m + f * x,
                    m === 1 - s) {
                        var E = 1 / Math.sqrt(a * a + l * l + u * u + c * c);
                        a *= E,
                        l *= E,
                        u *= E,
                        c *= E
                    }
                }
                e[t] = a,
                e[t + 1] = l,
                e[t + 2] = u,
                e[t + 3] = c
            }
        }, {
            key: "set",
            value: function(e, t, i, r) {
                return this._x = e,
                this._y = t,
                this._z = i,
                this._w = r,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this._x,this._y,this._z,this._w)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this._x = e.x,
                this._y = e.y,
                this._z = e.z,
                this._w = e.w,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromEuler",
            value: function(e, t) {
                if (!e || !e.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e.order
                  , s = Math.cos
                  , a = Math.sin
                  , l = s(i / 2)
                  , u = s(r / 2)
                  , c = s(n / 2)
                  , h = a(i / 2)
                  , p = a(r / 2)
                  , d = a(n / 2);
                return "XYZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "YXZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "ZXY" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "ZYX" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "YZX" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c - h * p * d) : "XZY" === o && (this._x = h * u * c - l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c + h * p * d),
                !1 !== t && this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromAxisAngle",
            value: function(e, t) {
                var i = t / 2
                  , r = Math.sin(i);
                return this._x = e.x * r,
                this._y = e.y * r,
                this._z = e.z * r,
                this._w = Math.cos(i),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromRotationMatrix",
            value: function(e) {
                var t, i = e.elements, r = i[0], n = i[4], o = i[8], s = i[1], a = i[5], l = i[9], u = i[2], c = i[6], h = i[10], p = r + a + h;
                return p > 0 ? (t = .5 / Math.sqrt(p + 1),
                this._w = .25 / t,
                this._x = (c - l) * t,
                this._y = (o - u) * t,
                this._z = (s - n) * t) : r > a && r > h ? (t = 2 * Math.sqrt(1 + r - a - h),
                this._w = (c - l) / t,
                this._x = .25 * t,
                this._y = (n + s) / t,
                this._z = (o + u) / t) : a > h ? (t = 2 * Math.sqrt(1 + a - r - h),
                this._w = (o - u) / t,
                this._x = (n + s) / t,
                this._y = .25 * t,
                this._z = (l + c) / t) : (t = 2 * Math.sqrt(1 + h - r - a),
                this._w = (s - n) / t,
                this._x = (o + u) / t,
                this._y = (l + c) / t,
                this._z = .25 * t),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromUnitVectors",
            value: function(e, t) {
                var i, r = new S;
                return void 0 === r && (r = new S),
                (i = e.dot(t) + 1) < 1e-6 ? (i = 0,
                Math.abs(e.x) > Math.abs(e.z) ? r.set(-e.y, e.x, 0) : r.set(0, -e.z, e.y)) : r.crossVectors(e, t),
                this._x = r.x,
                this._y = r.y,
                this._z = r.z,
                this._w = i,
                this.normalize()
            }
        }, {
            key: "inverse",
            value: function() {
                return this.conjugate().normalize()
            }
        }, {
            key: "conjugate",
            value: function() {
                return this._x *= -1,
                this._y *= -1,
                this._z *= -1,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }
        }, {
            key: "normalize",
            value: function() {
                var e = this.length();
                return 0 === e ? (this._x = 0,
                this._y = 0,
                this._z = 0,
                this._w = 1) : (e = 1 / e,
                this._x = this._x * e,
                this._y = this._y * e,
                this._z = this._z * e,
                this._w = this._w * e),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e)
            }
        }, {
            key: "premultiply",
            value: function(e) {
                return this.multiplyQuaternions(e, this)
            }
        }, {
            key: "multiplyQuaternions",
            value: function(e, t) {
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e._w
                  , s = t._x
                  , a = t._y
                  , l = t._z
                  , u = t._w;
                return this._x = i * u + o * s + r * l - n * a,
                this._y = r * u + o * a + n * s - i * l,
                this._z = n * u + o * l + i * a - r * s,
                this._w = o * u - i * s - r * a - n * l,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "slerp",
            value: function(e, t) {
                if (0 === t)
                    return this;
                if (1 === t)
                    return this.copy(e);
                var i = this._x
                  , r = this._y
                  , n = this._z
                  , o = this._w
                  , s = o * e._w + i * e._x + r * e._y + n * e._z;
                if (s < 0 ? (this._w = -e._w,
                this._x = -e._x,
                this._y = -e._y,
                this._z = -e._z,
                s = -s) : this.copy(e),
                s >= 1)
                    return this._w = o,
                    this._x = i,
                    this._y = r,
                    this._z = n,
                    this;
                var a = Math.sqrt(1 - s * s);
                if (Math.abs(a) < .001)
                    return this._w = .5 * (o + this._w),
                    this._x = .5 * (i + this._x),
                    this._y = .5 * (r + this._y),
                    this._z = .5 * (n + this._z),
                    this;
                var l = Math.atan2(a, s)
                  , u = Math.sin((1 - t) * l) / a
                  , c = Math.sin(t * l) / a;
                return this._w = o * u + this._w * c,
                this._x = i * u + this._x * c,
                this._y = r * u + this._y * c,
                this._z = n * u + this._z * c,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this._x = e[t],
                this._y = e[t + 1],
                this._z = e[t + 2],
                this._w = e[t + 3],
                this.onChangeCallback(),
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this._x,
                e[t + 1] = this._y,
                e[t + 2] = this._z,
                e[t + 3] = this._w,
                e
            }
        }, {
            key: "onChange",
            value: function(e) {
                return this.onChangeCallback = e,
                this
            }
        }, {
            key: "onChangeCallback",
            value: function() {}
        }, {
            key: "x",
            get: function() {
                return this._x
            },
            set: function(e) {
                this._x = e,
                this.onChangeCallback()
            }
        }, {
            key: "y",
            get: function() {
                return this._y
            },
            set: function(e) {
                this._y = e,
                this.onChangeCallback()
            }
        }, {
            key: "z",
            get: function() {
                return this._z
            },
            set: function(e) {
                this._z = e,
                this.onChangeCallback()
            }
        }, {
            key: "w",
            get: function() {
                return this._w
            },
            set: function(e) {
                this._w = e,
                this.onChangeCallback()
            }
        }]),
        e
    }(), S = function() {
        function e(t, i, r) {
            T(this, e),
            this.x = t || 0,
            this.y = i || 0,
            this.z = r || 0,
            this.isVector3 = !0
        }
        return M(e, [{
            key: "set",
            value: function(e, t, i) {
                return this.x = e,
                this.y = t,
                this.z = i,
                this
            }
        }, {
            key: "setScalar",
            value: function(e) {
                return this.x = e,
                this.y = e,
                this.z = e,
                this
            }
        }, {
            key: "setX",
            value: function(e) {
                return this.x = e,
                this
            }
        }, {
            key: "setY",
            value: function(e) {
                return this.y = e,
                this
            }
        }, {
            key: "setZ",
            value: function(e) {
                return this.z = e,
                this
            }
        }, {
            key: "setComponent",
            value: function(e, t) {
                switch (e) {
                case 0:
                    this.x = t;
                    break;
                case 1:
                    this.y = t;
                    break;
                case 2:
                    this.z = t;
                    break;
                default:
                    throw new Error("index is out of range: " + e)
                }
                return this
            }
        }, {
            key: "getComponent",
            value: function(e) {
                switch (e) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + e)
                }
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this.x,this.y,this.z)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.x = e.x,
                this.y = e.y,
                this.z = e.z,
                this
            }
        }, {
            key: "add",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(e, t)) : (this.x += e.x,
                this.y += e.y,
                this.z += e.z,
                this)
            }
        }, {
            key: "addScalar",
            value: function(e) {
                return this.x += e,
                this.y += e,
                this.z += e,
                this
            }
        }, {
            key: "addVectors",
            value: function(e, t) {
                return this.x = e.x + t.x,
                this.y = e.y + t.y,
                this.z = e.z + t.z,
                this
            }
        }, {
            key: "addScaledVector",
            value: function(e, t) {
                return this.x += e.x * t,
                this.y += e.y * t,
                this.z += e.z * t,
                this
            }
        }, {
            key: "sub",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(e, t)) : (this.x -= e.x,
                this.y -= e.y,
                this.z -= e.z,
                this)
            }
        }, {
            key: "subScalar",
            value: function(e) {
                return this.x -= e,
                this.y -= e,
                this.z -= e,
                this
            }
        }, {
            key: "subVectors",
            value: function(e, t) {
                return this.x = e.x - t.x,
                this.y = e.y - t.y,
                this.z = e.z - t.z,
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                this.multiplyVectors(e, t)) : (this.x *= e.x,
                this.y *= e.y,
                this.z *= e.z,
                this)
            }
        }, {
            key: "multiplyScalar",
            value: function(e) {
                return this.x *= e,
                this.y *= e,
                this.z *= e,
                this
            }
        }, {
            key: "multiplyVectors",
            value: function(e, t) {
                return this.x = e.x * t.x,
                this.y = e.y * t.y,
                this.z = e.z * t.z,
                this
            }
        }, {
            key: "applyEuler",
            value: function() {
                var e = new C;
                return function(t) {
                    return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                    this.applyQuaternion(e.setFromEuler(t))
                }()
            }
        }, {
            key: "applyAxisAngle",
            value: function() {
                var e = new C;
                return function(t, i) {
                    return this.applyQuaternion(e.setFromAxisAngle(t, i))
                }()
            }
        }, {
            key: "applyMatrix3",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[3] * i + n[6] * r,
                this.y = n[1] * t + n[4] * i + n[7] * r,
                this.z = n[2] * t + n[5] * i + n[8] * r,
                this
            }
        }, {
            key: "applyQuaternion",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.x
                  , o = e.y
                  , s = e.z
                  , a = e.w
                  , l = a * t + o * r - s * i
                  , u = a * i + s * t - n * r
                  , c = a * r + n * i - o * t
                  , h = -n * t - o * i - s * r;
                return this.x = l * a + h * -n + u * -s - c * -o,
                this.y = u * a + h * -o + c * -n - l * -s,
                this.z = c * a + h * -s + l * -o - u * -n,
                this
            }
        }, {
            key: "transformDirection",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[4] * i + n[8] * r,
                this.y = n[1] * t + n[5] * i + n[9] * r,
                this.z = n[2] * t + n[6] * i + n[10] * r,
                this.normalize()
            }
        }, {
            key: "divide",
            value: function(e) {
                return this.x /= e.x,
                this.y /= e.y,
                this.z /= e.z,
                this
            }
        }, {
            key: "divideScalar",
            value: function(e) {
                return this.multiplyScalar(1 / e)
            }
        }, {
            key: "min",
            value: function(e) {
                return this.x = Math.min(this.x, e.x),
                this.y = Math.min(this.y, e.y),
                this.z = Math.min(this.z, e.z),
                this
            }
        }, {
            key: "max",
            value: function(e) {
                return this.x = Math.max(this.x, e.x),
                this.y = Math.max(this.y, e.y),
                this.z = Math.max(this.z, e.z),
                this
            }
        }, {
            key: "clamp",
            value: function(e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)),
                this.y = Math.max(e.y, Math.min(t.y, this.y)),
                this.z = Math.max(e.z, Math.min(t.z, this.z)),
                this
            }
        }, {
            key: "clampScalar",
            value: function() {
                var t = new e
                  , i = new e;
                return function(e, r) {
                    return t.set(e, e, e),
                    i.set(r, r, r),
                    this.clamp(t, i)
                }()
            }
        }, {
            key: "clampLength",
            value: function(e, t) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)))
            }
        }, {
            key: "floor",
            value: function() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this
            }
        }, {
            key: "ceil",
            value: function() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this
            }
        }, {
            key: "round",
            value: function() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this
            }
        }, {
            key: "roundToZero",
            value: function() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this
            }
        }, {
            key: "negate",
            value: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this.x * e.x + this.y * e.y + this.z * e.z
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }
        }, {
            key: "lengthManhattan",
            value: function() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }
        }, {
            key: "normalize",
            value: function() {
                return this.divideScalar(this.length() || 1)
            }
        }, {
            key: "setLength",
            value: function(e) {
                return this.normalize().multiplyScalar(e)
            }
        }, {
            key: "lerp",
            value: function(e, t) {
                return this.x += (e.x - this.x) * t,
                this.y += (e.y - this.y) * t,
                this.z += (e.z - this.z) * t,
                this
            }
        }, {
            key: "lerpVectors",
            value: function(e, t, i) {
                return this.subVectors(t, e).multiplyScalar(i).add(e)
            }
        }, {
            key: "cross",
            value: function(e, t) {
                if (void 0 !== t)
                    return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                    this.crossVectors(e, t);
                var i = this.x
                  , r = this.y
                  , n = this.z;
                return this.x = r * e.z - n * e.y,
                this.y = n * e.x - i * e.z,
                this.z = i * e.y - r * e.x,
                this
            }
        }, {
            key: "crossVectors",
            value: function(e, t) {
                var i = e.x
                  , r = e.y
                  , n = e.z
                  , o = t.x
                  , s = t.y
                  , a = t.z;
                return this.x = r * a - n * s,
                this.y = n * o - i * a,
                this.z = i * s - r * o,
                this
            }
        }, {
            key: "projectOnVector",
            value: function(e) {
                var t = e.dot(this) / e.lengthSq();
                return this.copy(e).multiplyScalar(t)
            }
        }, {
            key: "projectOnPlane",
            value: function() {
                var t = new e;
                return function(e) {
                    return t.copy(this).projectOnVector(e),
                    this.sub(t)
                }
            }
        }, {
            key: "reflect",
            value: function() {
                var t = new e;
                return function(e) {
                    return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
                }()
            }
        }, {
            key: "angleTo",
            value: function(e) {
                var t = this.dot(e) / Math.sqrt(this.lengthSq() * e.lengthSq());
                return Math.acos(w.clamp(t, -1, 1))
            }
        }, {
            key: "distanceTo",
            value: function(e) {
                return Math.sqrt(this.distanceToSquared(e))
            }
        }, {
            key: "distanceToSquared",
            value: function(e) {
                var t = this.x - e.x
                  , i = this.y - e.y
                  , r = this.z - e.z;
                return t * t + i * i + r * r
            }
        }, {
            key: "distanceToManhattan",
            value: function(e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z)
            }
        }, {
            key: "setFromSpherical",
            value: function(e) {
                var t = Math.sin(e.phi) * e.radius;
                return this.x = t * Math.sin(e.theta),
                this.y = Math.cos(e.phi) * e.radius,
                this.z = t * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromCylindrical",
            value: function(e) {
                return this.x = e.radius * Math.sin(e.theta),
                this.y = e.y,
                this.z = e.radius * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromMatrixPosition",
            value: function(e) {
                var t = e.elements;
                return this.x = t[12],
                this.y = t[13],
                this.z = t[14],
                this
            }
        }, {
            key: "setFromMatrixScale",
            value: function(e) {
                var t = this.setFromMatrixColumn(e, 0).length()
                  , i = this.setFromMatrixColumn(e, 1).length()
                  , r = this.setFromMatrixColumn(e, 2).length();
                return this.x = t,
                this.y = i,
                this.z = r,
                this
            }
        }, {
            key: "setFromMatrixColumn",
            value: function(e, t) {
                return this.fromArray(e.elements, 4 * t)
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.x === this.x && e.y === this.y && e.z === this.z
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this.x = e[t],
                this.y = e[t + 1],
                this.z = e[t + 2],
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this.x,
                e[t + 1] = this.y,
                e[t + 2] = this.z,
                e
            }
        }, {
            key: "fromBufferAttribute",
            value: function(e, t, i) {
                return void 0 !== i && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                this.x = e.getX(t),
                this.y = e.getY(t),
                this.z = e.getZ(t),
                this
            }
        }]),
        e
    }();
    !function() {
        function e(t, i) {
            T(this, e),
            this.isBox3 = !0,
            this.min = void 0 !== t ? t : new S(1 / 0,1 / 0,1 / 0),
            this.max = void 0 !== i ? i : new S(-1 / 0,-1 / 0,-1 / 0)
        }
        M(e, [{
            key: "set",
            value: function(e, t) {
                return this.min.copy(e),
                this.max.copy(t),
                this
            }
        }, {
            key: "setFromArray",
            value: function(e) {
                for (var t = 1 / 0, i = 1 / 0, r = 1 / 0, n = -1 / 0, o = -1 / 0, s = -1 / 0, a = 0, l = e.length; a < l; a += 3) {
                    var u = e[a]
                      , c = e[a + 1]
                      , h = e[a + 2];
                    u < t && (t = u),
                    c < i && (i = c),
                    h < r && (r = h),
                    u > n && (n = u),
                    c > o && (o = c),
                    h > s && (s = h)
                }
                return this.min.set(t, i, r),
                this.max.set(n, o, s),
                this
            }
        }, {
            key: "setFromBufferAttribute",
            value: function(e) {
                for (var t = 1 / 0, i = 1 / 0, r = 1 / 0, n = -1 / 0, o = -1 / 0, s = -1 / 0, a = 0, l = e.count; a < l; a++) {
                    var u = e.getX(a)
                      , c = e.getY(a)
                      , h = e.getZ(a);
                    u < t && (t = u),
                    c < i && (i = c),
                    h < r && (r = h),
                    u > n && (n = u),
                    c > o && (o = c),
                    h > s && (s = h)
                }
                return this.min.set(t, i, r),
                this.max.set(n, o, s),
                this
            }
        }, {
            key: "setFromPoints",
            value: function(e) {
                this.makeEmpty();
                for (var t = 0, i = e.length; t < i; t++)
                    this.expandByPoint(e[t]);
                return this
            }
        }, {
            key: "setFromCenterAndSize",
            value: function(e, t) {
                var i = (new S).copy(t).multiplyScalar(.5);
                return this.min.copy(e).sub(i),
                this.max.copy(e).add(i),
                this
            }
        }, {
            key: "setFromObject",
            value: function(e) {
                return this.makeEmpty(),
                this.expandByObject(e)
            }
        }, {
            key: "clone",
            value: function() {
                return (new this.constructor).copy(this)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.min.copy(e.min),
                this.max.copy(e.max),
                this
            }
        }, {
            key: "makeEmpty",
            value: function() {
                return this.min.x = this.min.y = this.min.z = 1 / 0,
                this.max.x = this.max.y = this.max.z = -1 / 0,
                this
            }
        }, {
            key: "isEmpty",
            value: function() {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            }
        }, {
            key: "getCenter",
            value: function(e) {
                var t = e || new S;
                return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
            }
        }, {
            key: "getSize",
            value: function(e) {
                var t = e || new S;
                return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
            }
        }, {
            key: "expandByPoint",
            value: function(e) {
                return this.min.min(e),
                this.max.max(e),
                this
            }
        }, {
            key: "expandByVector",
            value: function(e) {
                return this.min.sub(e),
                this.max.add(e),
                this
            }
        }, {
            key: "expandByScalar",
            value: function(e) {
                return this.min.addScalar(-e),
                this.max.addScalar(e),
                this
            }
        }, {
            key: "expandByObject",
            value: function(e) {
                var t = new S
                  , i = this;
                return e.updateMatrixWorld(!0),
                e.traverse((function(e) {
                    var r, n, o = e.geometry;
                    if (void 0 !== o)
                        if (o.isGeometry) {
                            var s = o.vertices;
                            for (r = 0,
                            n = s.length; r < n; r++)
                                t.copy(s[r]),
                                t.applyMatrix4(e.matrixWorld),
                                i.expandByPoint(t)
                        } else if (o.isBufferGeometry) {
                            var a = o.attributes.position;
                            if (void 0 !== a)
                                for (r = 0,
                                n = a.count; r < n; r++)
                                    t.fromBufferAttribute(a, r).applyMatrix4(e.matrixWorld),
                                    i.expandByPoint(t)
                        }
                }
                )),
                this
            }
        }, {
            key: "containsPoint",
            value: function(e) {
                return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z)
            }
        }, {
            key: "containsBox",
            value: function(e) {
                return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z
            }
        }, {
            key: "getParameter",
            value: function(e, t) {
                return (t || new S).set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z))
            }
        }, {
            key: "intersectsBox",
            value: function(e) {
                return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z)
            }
        }, {
            key: "intersectsPlane",
            value: function(e) {
                var t, i;
                return e.normal.x > 0 ? (t = e.normal.x * this.min.x,
                i = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x,
                i = e.normal.x * this.min.x),
                e.normal.y > 0 ? (t += e.normal.y * this.min.y,
                i += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y,
                i += e.normal.y * this.min.y),
                e.normal.z > 0 ? (t += e.normal.z * this.min.z,
                i += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z,
                i += e.normal.z * this.min.z),
                t <= e.constant && i >= e.constant
            }
        }, {
            key: "clampPoint",
            value: function(e, t) {
                return (t || new S).copy(e).clamp(this.min, this.max)
            }
        }, {
            key: "distanceToPoint",
            value: function(e) {
                return (new S).copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }, {
            key: "intersect",
            value: function(e) {
                return this.min.max(e.min),
                this.max.min(e.max),
                this.isEmpty() && this.makeEmpty(),
                this
            }
        }, {
            key: "union",
            value: function(e) {
                return this.min.min(e.min),
                this.max.max(e.max),
                this
            }
        }, {
            key: "applyMatrix4",
            value: function(e) {
                var t = [new S, new S, new S, new S, new S, new S, new S, new S];
                return this.isEmpty() || (t[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
                t[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
                t[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
                t[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
                t[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
                t[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
                t[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
                t[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
                this.setFromPoints(t)),
                this
            }
        }, {
            key: "translate",
            value: function(e) {
                return this.min.add(e),
                this.max.add(e),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.min.equals(this.min) && e.max.equals(this.max)
            }
        }])
    }();
    function j() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
        arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
    }
    Object.assign(j.prototype, {
        isMatrix4: !0,
        set: function(e, t, i, r, n, o, s, a, l, u, c, h, p, d, f, m) {
            var g = this.elements;
            return g[0] = e,
            g[4] = t,
            g[8] = i,
            g[12] = r,
            g[1] = n,
            g[5] = o,
            g[9] = s,
            g[13] = a,
            g[2] = l,
            g[6] = u,
            g[10] = c,
            g[14] = h,
            g[3] = p,
            g[7] = d,
            g[11] = f,
            g[15] = m,
            this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        clone: function() {
            return (new j).fromArray(this.elements)
        },
        copy: function(e) {
            var t = this.elements
              , i = e.elements;
            return t[0] = i[0],
            t[1] = i[1],
            t[2] = i[2],
            t[3] = i[3],
            t[4] = i[4],
            t[5] = i[5],
            t[6] = i[6],
            t[7] = i[7],
            t[8] = i[8],
            t[9] = i[9],
            t[10] = i[10],
            t[11] = i[11],
            t[12] = i[12],
            t[13] = i[13],
            t[14] = i[14],
            t[15] = i[15],
            this
        },
        copyPosition: function(e) {
            var t = this.elements
              , i = e.elements;
            return t[12] = i[12],
            t[13] = i[13],
            t[14] = i[14],
            this
        },
        extractBasis: function(e, t, i) {
            return e.setFromMatrixColumn(this, 0),
            t.setFromMatrixColumn(this, 1),
            i.setFromMatrixColumn(this, 2),
            this
        },
        makeBasis: function(e, t, i) {
            return this.set(e.x, t.x, i.x, 0, e.y, t.y, i.y, 0, e.z, t.z, i.z, 0, 0, 0, 0, 1),
            this
        },
        extractRotation: (c = new S,
        function(e) {
            var t = this.elements
              , i = e.elements
              , r = 1 / c.setFromMatrixColumn(e, 0).length()
              , n = 1 / c.setFromMatrixColumn(e, 1).length()
              , o = 1 / c.setFromMatrixColumn(e, 2).length();
            return t[0] = i[0] * r,
            t[1] = i[1] * r,
            t[2] = i[2] * r,
            t[4] = i[4] * n,
            t[5] = i[5] * n,
            t[6] = i[6] * n,
            t[8] = i[8] * o,
            t[9] = i[9] * o,
            t[10] = i[10] * o,
            this
        }
        ),
        makeRotationFromEuler: function(e) {
            e && e.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var t = this.elements
              , i = e.x
              , r = e.y
              , n = e.z
              , o = Math.cos(i)
              , s = Math.sin(i)
              , a = Math.cos(r)
              , l = Math.sin(r)
              , u = Math.cos(n)
              , c = Math.sin(n);
            if ("XYZ" === e.order) {
                var h = o * u
                  , p = o * c
                  , d = s * u
                  , f = s * c;
                t[0] = a * u,
                t[4] = -a * c,
                t[8] = l,
                t[1] = p + d * l,
                t[5] = h - f * l,
                t[9] = -s * a,
                t[2] = f - h * l,
                t[6] = d + p * l,
                t[10] = o * a
            } else if ("YXZ" === e.order) {
                var m = a * u
                  , g = a * c
                  , v = l * u
                  , y = l * c;
                t[0] = m + y * s,
                t[4] = v * s - g,
                t[8] = o * l,
                t[1] = o * c,
                t[5] = o * u,
                t[9] = -s,
                t[2] = g * s - v,
                t[6] = y + m * s,
                t[10] = o * a
            } else if ("ZXY" === e.order) {
                m = a * u,
                g = a * c,
                v = l * u,
                y = l * c;
                t[0] = m - y * s,
                t[4] = -o * c,
                t[8] = v + g * s,
                t[1] = g + v * s,
                t[5] = o * u,
                t[9] = y - m * s,
                t[2] = -o * l,
                t[6] = s,
                t[10] = o * a
            } else if ("ZYX" === e.order) {
                h = o * u,
                p = o * c,
                d = s * u,
                f = s * c;
                t[0] = a * u,
                t[4] = d * l - p,
                t[8] = h * l + f,
                t[1] = a * c,
                t[5] = f * l + h,
                t[9] = p * l - d,
                t[2] = -l,
                t[6] = s * a,
                t[10] = o * a
            } else if ("YZX" === e.order) {
                var b = o * a
                  , _ = o * l
                  , x = s * a
                  , E = s * l;
                t[0] = a * u,
                t[4] = E - b * c,
                t[8] = x * c + _,
                t[1] = c,
                t[5] = o * u,
                t[9] = -s * u,
                t[2] = -l * u,
                t[6] = _ * c + x,
                t[10] = b - E * c
            } else if ("XZY" === e.order) {
                b = o * a,
                _ = o * l,
                x = s * a,
                E = s * l;
                t[0] = a * u,
                t[4] = -c,
                t[8] = l * u,
                t[1] = b * c + E,
                t[5] = o * u,
                t[9] = _ * c - x,
                t[2] = x * c - _,
                t[6] = s * u,
                t[10] = E * c + b
            }
            return t[3] = 0,
            t[7] = 0,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        },
        makeRotationFromQuaternion: function(e) {
            var t = this.elements
              , i = e._x
              , r = e._y
              , n = e._z
              , o = e._w
              , s = i + i
              , a = r + r
              , l = n + n
              , u = i * s
              , c = i * a
              , h = i * l
              , p = r * a
              , d = r * l
              , f = n * l
              , m = o * s
              , g = o * a
              , v = o * l;
            return t[0] = 1 - (p + f),
            t[4] = c - v,
            t[8] = h + g,
            t[1] = c + v,
            t[5] = 1 - (u + f),
            t[9] = d - m,
            t[2] = h - g,
            t[6] = d + m,
            t[10] = 1 - (u + p),
            t[3] = 0,
            t[7] = 0,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        },
        lookAt: (a = new S,
        l = new S,
        u = new S,
        function(e, t, i) {
            var r = this.elements;
            return u.subVectors(e, t),
            0 === u.lengthSq() && (u.z = 1),
            u.normalize(),
            a.crossVectors(i, u),
            0 === a.lengthSq() && (1 === Math.abs(i.z) ? u.x += 1e-4 : u.z += 1e-4,
            u.normalize(),
            a.crossVectors(i, u)),
            a.normalize(),
            l.crossVectors(u, a),
            r[0] = a.x,
            r[4] = l.x,
            r[8] = u.x,
            r[1] = a.y,
            r[5] = l.y,
            r[9] = u.y,
            r[2] = a.z,
            r[6] = l.z,
            r[10] = u.z,
            this
        }
        ),
        multiply: function(e, t) {
            return void 0 !== t ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
            this.multiplyMatrices(e, t)) : this.multiplyMatrices(this, e)
        },
        premultiply: function(e) {
            return this.multiplyMatrices(e, this)
        },
        multiplyMatrices: function(e, t) {
            var i = e.elements
              , r = t.elements
              , n = this.elements
              , o = i[0]
              , s = i[4]
              , a = i[8]
              , l = i[12]
              , u = i[1]
              , c = i[5]
              , h = i[9]
              , p = i[13]
              , d = i[2]
              , f = i[6]
              , m = i[10]
              , g = i[14]
              , v = i[3]
              , y = i[7]
              , b = i[11]
              , _ = i[15]
              , x = r[0]
              , E = r[4]
              , w = r[8]
              , T = r[12]
              , M = r[1]
              , C = r[5]
              , S = r[9]
              , j = r[13]
              , P = r[2]
              , R = r[6]
              , D = r[10]
              , A = r[14]
              , k = r[3]
              , O = r[7]
              , B = r[11]
              , F = r[15];
            return n[0] = o * x + s * M + a * P + l * k,
            n[4] = o * E + s * C + a * R + l * O,
            n[8] = o * w + s * S + a * D + l * B,
            n[12] = o * T + s * j + a * A + l * F,
            n[1] = u * x + c * M + h * P + p * k,
            n[5] = u * E + c * C + h * R + p * O,
            n[9] = u * w + c * S + h * D + p * B,
            n[13] = u * T + c * j + h * A + p * F,
            n[2] = d * x + f * M + m * P + g * k,
            n[6] = d * E + f * C + m * R + g * O,
            n[10] = d * w + f * S + m * D + g * B,
            n[14] = d * T + f * j + m * A + g * F,
            n[3] = v * x + y * M + b * P + _ * k,
            n[7] = v * E + y * C + b * R + _ * O,
            n[11] = v * w + y * S + b * D + _ * B,
            n[15] = v * T + y * j + b * A + _ * F,
            this
        },
        multiplyScalar: function(e) {
            var t = this.elements;
            return t[0] *= e,
            t[4] *= e,
            t[8] *= e,
            t[12] *= e,
            t[1] *= e,
            t[5] *= e,
            t[9] *= e,
            t[13] *= e,
            t[2] *= e,
            t[6] *= e,
            t[10] *= e,
            t[14] *= e,
            t[3] *= e,
            t[7] *= e,
            t[11] *= e,
            t[15] *= e,
            this
        },
        applyToBufferAttribute: function() {
            var e = new S;
            return function(t) {
                for (var i = 0, r = t.count; i < r; i++)
                    e.x = t.getX(i),
                    e.y = t.getY(i),
                    e.z = t.getZ(i),
                    e.applyMatrix4(this),
                    t.setXYZ(i, e.x, e.y, e.z);
                return t
            }
        }(),
        determinant: function() {
            var e = this.elements
              , t = e[0]
              , i = e[4]
              , r = e[8]
              , n = e[12]
              , o = e[1]
              , s = e[5]
              , a = e[9]
              , l = e[13]
              , u = e[2]
              , c = e[6]
              , h = e[10]
              , p = e[14];
            return e[3] * (+n * a * c - r * l * c - n * s * h + i * l * h + r * s * p - i * a * p) + e[7] * (+t * a * p - t * l * h + n * o * h - r * o * p + r * l * u - n * a * u) + e[11] * (+t * l * c - t * s * p - n * o * c + i * o * p + n * s * u - i * l * u) + e[15] * (-r * s * u - t * a * c + t * s * h + r * o * c - i * o * h + i * a * u)
        },
        transpose: function() {
            var e, t = this.elements;
            return e = t[1],
            t[1] = t[4],
            t[4] = e,
            e = t[2],
            t[2] = t[8],
            t[8] = e,
            e = t[6],
            t[6] = t[9],
            t[9] = e,
            e = t[3],
            t[3] = t[12],
            t[12] = e,
            e = t[7],
            t[7] = t[13],
            t[13] = e,
            e = t[11],
            t[11] = t[14],
            t[14] = e,
            this
        },
        setPosition: function(e) {
            var t = this.elements;
            return t[12] = e.x,
            t[13] = e.y,
            t[14] = e.z,
            this
        },
        getInverse: function(e, t) {
            var i = this.elements
              , r = e.elements
              , n = r[0]
              , o = r[1]
              , s = r[2]
              , a = r[3]
              , l = r[4]
              , u = r[5]
              , c = r[6]
              , h = r[7]
              , p = r[8]
              , d = r[9]
              , f = r[10]
              , m = r[11]
              , g = r[12]
              , v = r[13]
              , y = r[14]
              , b = r[15]
              , _ = d * y * h - v * f * h + v * c * m - u * y * m - d * c * b + u * f * b
              , x = g * f * h - p * y * h - g * c * m + l * y * m + p * c * b - l * f * b
              , E = p * v * h - g * d * h + g * u * m - l * v * m - p * u * b + l * d * b
              , w = g * d * c - p * v * c - g * u * f + l * v * f + p * u * y - l * d * y
              , T = n * _ + o * x + s * E + a * w;
            if (0 === T) {
                var M = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === t)
                    throw new Error(M);
                return console.warn(M),
                this.identity()
            }
            var C = 1 / T;
            return i[0] = _ * C,
            i[1] = (v * f * a - d * y * a - v * s * m + o * y * m + d * s * b - o * f * b) * C,
            i[2] = (u * y * a - v * c * a + v * s * h - o * y * h - u * s * b + o * c * b) * C,
            i[3] = (d * c * a - u * f * a - d * s * h + o * f * h + u * s * m - o * c * m) * C,
            i[4] = x * C,
            i[5] = (p * y * a - g * f * a + g * s * m - n * y * m - p * s * b + n * f * b) * C,
            i[6] = (g * c * a - l * y * a - g * s * h + n * y * h + l * s * b - n * c * b) * C,
            i[7] = (l * f * a - p * c * a + p * s * h - n * f * h - l * s * m + n * c * m) * C,
            i[8] = E * C,
            i[9] = (g * d * a - p * v * a - g * o * m + n * v * m + p * o * b - n * d * b) * C,
            i[10] = (l * v * a - g * u * a + g * o * h - n * v * h - l * o * b + n * u * b) * C,
            i[11] = (p * u * a - l * d * a - p * o * h + n * d * h + l * o * m - n * u * m) * C,
            i[12] = w * C,
            i[13] = (p * v * s - g * d * s + g * o * f - n * v * f - p * o * y + n * d * y) * C,
            i[14] = (g * u * s - l * v * s - g * o * c + n * v * c + l * o * y - n * u * y) * C,
            i[15] = (l * d * s - p * u * s + p * o * c - n * d * c - l * o * f + n * u * f) * C,
            this
        },
        scale: function(e) {
            var t = this.elements
              , i = e.x
              , r = e.y
              , n = e.z;
            return t[0] *= i,
            t[4] *= r,
            t[8] *= n,
            t[1] *= i,
            t[5] *= r,
            t[9] *= n,
            t[2] *= i,
            t[6] *= r,
            t[10] *= n,
            t[3] *= i,
            t[7] *= r,
            t[11] *= n,
            this
        },
        getMaxScaleOnAxis: function() {
            var e = this.elements
              , t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2]
              , i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6]
              , r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
            return Math.sqrt(Math.max(t, i, r))
        },
        makeTranslation: function(e, t, i) {
            return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, i, 0, 0, 0, 1),
            this
        },
        makeRotationX: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(1, 0, 0, 0, 0, t, -i, 0, 0, i, t, 0, 0, 0, 0, 1),
            this
        },
        makeRotationY: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(t, 0, i, 0, 0, 1, 0, 0, -i, 0, t, 0, 0, 0, 0, 1),
            this
        },
        makeRotationZ: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(t, -i, 0, 0, i, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        makeRotationAxis: function(e, t) {
            var i = Math.cos(t)
              , r = Math.sin(t)
              , n = 1 - i
              , o = e.x
              , s = e.y
              , a = e.z
              , l = n * o
              , u = n * s;
            return this.set(l * o + i, l * s - r * a, l * a + r * s, 0, l * s + r * a, u * s + i, u * a - r * o, 0, l * a - r * s, u * a + r * o, n * a * a + i, 0, 0, 0, 0, 1),
            this
        },
        makeScale: function(e, t, i) {
            return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, i, 0, 0, 0, 0, 1),
            this
        },
        makeShear: function(e, t, i) {
            return this.set(1, t, i, 0, e, 1, i, 0, e, t, 1, 0, 0, 0, 0, 1),
            this
        },
        compose: function(e, t, i) {
            return this.makeRotationFromQuaternion(t),
            this.scale(i),
            this.setPosition(e),
            this
        },
        decompose: (o = new S,
        s = new j,
        function(e, t, i) {
            var r = this.elements
              , n = o.set(r[0], r[1], r[2]).length()
              , a = o.set(r[4], r[5], r[6]).length()
              , l = o.set(r[8], r[9], r[10]).length();
            this.determinant() < 0 && (n = -n),
            e.x = r[12],
            e.y = r[13],
            e.z = r[14],
            s.copy(this);
            var u = 1 / n
              , c = 1 / a
              , h = 1 / l;
            return s.elements[0] *= u,
            s.elements[1] *= u,
            s.elements[2] *= u,
            s.elements[4] *= c,
            s.elements[5] *= c,
            s.elements[6] *= c,
            s.elements[8] *= h,
            s.elements[9] *= h,
            s.elements[10] *= h,
            t.setFromRotationMatrix(s),
            i.x = n,
            i.y = a,
            i.z = l,
            this
        }
        ),
        makePerspective: function(e, t, i, r, n, o) {
            void 0 === o && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
            var s = this.elements
              , a = 2 * n / (t - e)
              , l = 2 * n / (i - r)
              , u = (t + e) / (t - e)
              , c = (i + r) / (i - r)
              , h = -(o + n) / (o - n)
              , p = -2 * o * n / (o - n);
            return s[0] = a,
            s[4] = 0,
            s[8] = u,
            s[12] = 0,
            s[1] = 0,
            s[5] = l,
            s[9] = c,
            s[13] = 0,
            s[2] = 0,
            s[6] = 0,
            s[10] = h,
            s[14] = p,
            s[3] = 0,
            s[7] = 0,
            s[11] = -1,
            s[15] = 0,
            this
        },
        makeOrthographic: function(e, t, i, r, n, o) {
            var s = this.elements
              , a = 1 / (t - e)
              , l = 1 / (i - r)
              , u = 1 / (o - n)
              , c = (t + e) * a
              , h = (i + r) * l
              , p = (o + n) * u;
            return s[0] = 2 * a,
            s[4] = 0,
            s[8] = 0,
            s[12] = -c,
            s[1] = 0,
            s[5] = 2 * l,
            s[9] = 0,
            s[13] = -h,
            s[2] = 0,
            s[6] = 0,
            s[10] = -2 * u,
            s[14] = -p,
            s[3] = 0,
            s[7] = 0,
            s[11] = 0,
            s[15] = 1,
            this
        },
        equals: function(e) {
            for (var t = this.elements, i = e.elements, r = 0; r < 16; r++)
                if (t[r] !== i[r])
                    return !1;
            return !0
        },
        fromArray: function(e, t) {
            void 0 === t && (t = 0);
            for (var i = 0; i < 16; i++)
                this.elements[i] = e[i + t];
            return this
        },
        toArray: function(e, t) {
            void 0 === e && (e = []),
            void 0 === t && (t = 0);
            var i = this.elements;
            return e[t] = i[0],
            e[t + 1] = i[1],
            e[t + 2] = i[2],
            e[t + 3] = i[3],
            e[t + 4] = i[4],
            e[t + 5] = i[5],
            e[t + 6] = i[6],
            e[t + 7] = i[7],
            e[t + 8] = i[8],
            e[t + 9] = i[9],
            e[t + 10] = i[10],
            e[t + 11] = i[11],
            e[t + 12] = i[12],
            e[t + 13] = i[13],
            e[t + 14] = i[14],
            e[t + 15] = i[15],
            e
        }
    });
    
    var P = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , R = function() {
        function e() {
            v(this, e)
        }
        return y(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = P.chars, i = P.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }, {
            key: "convertToVector3",
            value: function(e) {
                return e.isVector3 ? e : new S(e[0],e[1],e[2])
            }
        }, {
            key: "convertToQuaternion",
            value: function(e) {
                return new C(e[0],e[1],e[2],e[3])
            }
        }]),
        e
    }()
      , D = function() {
        function e(t) {
            v(this, e),
            this.id = null,
            this.name = null,
            this.userID = null,
            this.properties = null,
            this.jsonData = t.jsonData,
            this.objectParent = null,
            t.parent && (this.objectParent = t.parent),
            this.createType = null,
            this.resourceManager = t.resourceManager
        }
        return y(e, [{
            key: "create",
            value: function() {
                var e = this._getCreateParams();
                return this.object = E.objectManager.create(e),
                this.jsonData.id && (this.object.id = this.jsonData.id),
                this.jsonData.userid && (this.object.userID = this.jsonData.userid),
                this.jsonData.name && (this.object.name = this.jsonData.name),
                this.object.jsonData = this.jsonData,
                e.parent && (this.object.parent = e.parent),
                R.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                this.jsonData.properties && (this.object.properties = this.jsonData.properties,
                this.object.lowerCaseProperties = this.convertPropertiesToLowerCase(this.jsonData.properties)),
                this.object
            }
        }, {
            key: "convertPropertiesToLowerCase",
            value: function(e) {
                var t = {};
                for (var i in e)
                    t[i.toLowerCase()] = e[i].toLowerCase();
                return t
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                E.createObject(e)
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        e
    }()
      , A = {
        scale: 1,
        defaultFloorTextureResource: null,
        defaultCeilingTextureResource: null,
        defaultRoofTextureResource: null
    }
      , k = 0
      , O = 1
      , B = 2
      , F = 4
      , L = 5
      , I = 8
      , N = 9
      , H = 10
      , U = 22
      , z = 23
      , V = 24
      , W = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return this.jsonData.unit && (A.scale = .01 * this.jsonData.unit),
                b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this)
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData
                  , t = (this._parseJsonDataChild({
                    jsonData: e,
                    creatorType: O
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: H
                }));
                this.object.outdoors = t
            }
        }]),
        t
    }(D)
      , G = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return _(t, e),
        y(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                this._parseJsonDataChild({
                    jsonData: e,
                    creatorType: B
                })
            }
        }]),
        t
    }(D)
      , q = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.walls && this._parseWalls(e.walls),
                e.rooms && this._parseJsonDataChildren({
                    jsonData: e.rooms,
                    creatorType: N
                }),
                e.doors && this._parseJsonDataChildren({
                    jsonData: e.doors,
                    creatorType: I
                }),
                this.object.calRoomsUV2()
            }
        }, {
            key: "_parseWalls",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t];
                    0 === i.type ? this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: L
                    }) : this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: F
                    })
                }
            }
        }]),
        t
    }(D)
      , X = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "WallCorner",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this);
                var e = this.jsonData[0] * A.scale
                  , i = this.jsonData[1] * A.scale;
                return this.object.position = [e, 0, i],
                this.object
            }
        }]),
        t
    }(D)
      , J = function(e) {
        function t(e) {
            return v(this, t),
            x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return _(t, e),
        y(t, [{
            key: "_parseCorners",
            value: function() {
                var e = this.jsonData
                  , t = (this.objectParent,
                e.start[0] * A.scale)
                  , i = e.start[1] * A.scale
                  , r = null
                  , n = null;
                r = this._existsCorner(t, 0, i) ? this._getCorner(t, 0, i) : this._createCorner(t, 0, i, e.start),
                t = e.end[0] * A.scale,
                i = e.end[1] * A.scale,
                n = this._existsCorner(t, 0, i) ? this._getCorner(t, 0, i) : this._createCorner(t, 0, i, e.end),
                this.object.startCorner = r,
                this.object.endCorner = n
            }
        }, {
            key: "_existsCorner",
            value: function(e, t, i) {
                var r = this.objectParent.typeToChildren.WallCorner;
                if (r)
                    for (var n = 0, o = r.length; n < o; n++) {
                        var s = r[n].position;
                        if (s[0] === e && s[1] === t && s[2] === i)
                            return !0
                    }
                return !1
            }
        }, {
            key: "_getCorner",
            value: function(e, t, i) {
                for (var r = this.objectParent.typeToChildren.WallCorner, n = 0, o = r.length; n < o; n++) {
                    var s = r[n].position;
                    if (s[0] === e && s[1] === t && s[2] === i)
                        return r[n]
                }
                return null
            }
        }, {
            key: "_createCorner",
            value: function(e, t, i, r) {
                var n = new X({
                    jsonData: r
                }).create();
                return n.parent = this.objectParent,
                n.jsonData = r,
                n
            }
        }]),
        t
    }(D)
      , Y = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ModelWall",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._parseCorners(),
                R.checkValueEmpty(this.jsonData.model) || (this.object.resource = this.resourceManager.models[this.jsonData.model]),
                R.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                R.checkValueEmpty(this.jsonData.height) ? this.object.height = this.object.resource.modelSize.y : this.object.height = this.jsonData.height,
                R.checkValueEmpty(this.jsonData.weight) || (this.object.thick = this.jsonData.weight),
                this.object
            }
        }]),
        t
    }(J)
      , Q = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "StraightManualWall",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._parseCorners(),
                this._parseResources(),
                this.jsonData.uvmultiple && (this.object.uvMultiple = this.jsonData.uvmultiple),
                R.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                R.checkValueEmpty(this.jsonData.weight) || (this.object.thick = this.jsonData.weight),
                this.object
            }
        }, {
            key: "_parseResources",
            value: function() {
                R.checkValueEmpty(this.jsonData.lefttexture) || (this.object.leftResource = this.resourceManager.textures[this.jsonData.lefttexture]),
                R.checkValueEmpty(this.jsonData.righttexture) || (this.object.rightResource = this.resourceManager.textures[this.jsonData.righttexture]),
                R.checkValueEmpty(this.jsonData.edgetexture) || (this.object.edgeResource = this.resourceManager.textures[this.jsonData.edgetexture])
            }
        }]),
        t
    }(J)
      , Z = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.attachWall = e.attachWall,
            i.createType = "DoorOrWindow",
            i.pointInLineDeviation = .001,
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this);
                var e = A.scale
                  , i = this.jsonData
                  , r = i.height * e
                  , n = i.width * e
                  , o = [i.pos[0] * e, 0, i.pos[1] * e];
                this.attachWall = this._getPointOnWhichWall(this.objectParent, o),
                null === this.attachWall && console.warn("can not find door on which wall!");
                var s = this.object;
                return i.suspendpercent && (s.suspendPercent = i.suspendpercent),
                s.resource = this.resourceManager.create({
                    id: s.id + "res",
                    type: "EmptyModelResource"
                }),
                s.resource.size = [n, r, .15],
                s.position = o,
                this.object.attachWall = this.attachWall,
                this.attachWall.doorOrWindows.push(this.object),
                this.object
            }
        }, {
            key: "_getPointOnWhichWall",
            value: function(e, t) {
                var i = []
                  , r = e.typeToChildren.StraightManualWall
                  , n = e.typeToChildren.ModelWall;
                r && (i = i.concat(r)),
                n && (i = i.concat(n));
                for (var o = 0; o < i.length; o++) {
                    var s = i[o];
                    if (this._isPointOnLineAndBetweenPoints(R.convertToVector3(s.startCorner.position), R.convertToVector3(s.endCorner.position), R.convertToVector3(t)))
                        return s
                }
                return null
            }
        }, {
            key: "_isPointOnLine",
            value: function(e, t, i) {
                var r = new S;
                return r.crossVectors(e.clone().sub(i), t.clone().sub(i)),
                r.length() < this.pointInLineDeviation
            }
        }, {
            key: "_isPointOnLineAndBetweenPoints",
            value: function(e, t, i) {
                if (!this._isPointOnLine(e, t, i))
                    return !1;
                var r = t.x - e.x
                  , n = t.z - e.z;
                return Math.abs(r) >= Math.abs(n) ? r > 0 ? e.x <= i.x && i.x <= t.x : t.x <= i.x && i.x <= e.x : n > 0 ? e.z <= i.z && i.z <= t.z : t.z <= i.z && i.z <= e.z
            }
        }]),
        t
    }(D);
    function K(e, t) {
        if (!(this instanceof K))
            return new K(e,t);
        if (this.data = e || [],
        this.length = this.data.length,
        this.compare = t || $,
        this.length > 0)
            for (var i = (this.length >> 1) - 1; i >= 0; i--)
                this._down(i)
    }
    function $(e, t) {
        return e < t ? -1 : e > t ? 1 : 0
    }
    function ee(e, t, i) {
        var r, n, o, s;
        t = t || 1;
        for (var a = 0; a < e[0].length; a++) {
            var l = e[0][a];
            (!a || l[0] < r) && (r = l[0]),
            (!a || l[1] < n) && (n = l[1]),
            (!a || l[0] > o) && (o = l[0]),
            (!a || l[1] > s) && (s = l[1])
        }
        var u = o - r
          , c = s - n
          , h = Math.min(u, c)
          , p = h / 2
          , d = new K(null,te);
        if (0 === h)
            return [r, n];
        for (var f = r; f < o; f += h)
            for (var m = n; m < s; m += h)
                d.push(new ie(f + p,m + p,p,e));
        var g = function(e) {
            for (var t = 0, i = 0, r = 0, n = e[0], o = 0, s = n.length, a = s - 1; o < s; a = o++) {
                var l = n[o]
                  , u = n[a]
                  , c = l[0] * u[1] - u[0] * l[1];
                i += (l[0] + u[0]) * c,
                r += (l[1] + u[1]) * c,
                t += 3 * c
            }
            return 0 === t ? new ie(n[0][0],n[0][1],0,e) : new ie(i / t,r / t,0,e)
        }(e)
          , v = new ie(r + u / 2,n + c / 2,0,e);
        v.d > g.d && (g = v);
        for (var y = d.length; d.length; ) {
            var b = d.pop();
            b.d > g.d && (g = b,
            i && console.log("found best %d after %d probes", Math.round(1e4 * b.d) / 1e4, y)),
            b.max - g.d <= t || (p = b.h / 2,
            d.push(new ie(b.x - p,b.y - p,p,e)),
            d.push(new ie(b.x + p,b.y - p,p,e)),
            d.push(new ie(b.x - p,b.y + p,p,e)),
            d.push(new ie(b.x + p,b.y + p,p,e)),
            y += 4)
        }
        return i && (console.log("num probes: " + y),
        console.log("best distance: " + g.d)),
        [g.x, g.y]
    }
    function te(e, t) {
        return t.max - e.max
    }
    function ie(e, t, i, r) {
        this.x = e,
        this.y = t,
        this.h = i,
        this.d = function(e, t, i) {
            for (var r = !1, n = 1 / 0, o = 0; o < i.length; o++)
                for (var s = i[o], a = 0, l = s.length, u = l - 1; a < l; u = a++) {
                    var c = s[a]
                      , h = s[u];
                    c[1] > t != h[1] > t && e < (h[0] - c[0]) * (t - c[1]) / (h[1] - c[1]) + c[0] && (r = !r),
                    n = Math.min(n, re(e, t, c, h))
                }
            return (r ? 1 : -1) * Math.sqrt(n)
        }(e, t, r),
        this.max = this.d + this.h * Math.SQRT2
    }
    function re(e, t, i, r) {
        var n = i[0]
          , o = i[1]
          , s = r[0] - n
          , a = r[1] - o;
        if (0 !== s || 0 !== a) {
            var l = ((e - n) * s + (t - o) * a) / (s * s + a * a);
            l > 1 ? (n = r[0],
            o = r[1]) : l > 0 && (n += s * l,
            o += a * l)
        }
        return (s = e - n) * s + (a = t - o) * a
    }
    K.prototype = {
        push: function(e) {
            this.data.push(e),
            this.length++,
            this._up(this.length - 1)
        },
        pop: function() {
            if (0 !== this.length) {
                var e = this.data[0];
                return this.length--,
                this.length > 0 && (this.data[0] = this.data[this.length],
                this._down(0)),
                this.data.pop(),
                e
            }
        },
        peek: function() {
            return this.data[0]
        },
        _up: function(e) {
            for (var t = this.data, i = this.compare, r = t[e]; e > 0; ) {
                var n = e - 1 >> 1
                  , o = t[n];
                if (i(r, o) >= 0)
                    break;
                t[e] = o,
                e = n
            }
            t[e] = r
        },
        _down: function(e) {
            for (var t = this.data, i = this.compare, r = this.length >> 1, n = t[e]; e < r; ) {
                var o = 1 + (e << 1)
                  , s = o + 1
                  , a = t[o];
                if (s < this.length && i(t[s], a) < 0 && (o = s,
                a = t[s]),
                i(a, n) >= 0)
                    break;
                t[e] = a,
                e = o
            }
            t[e] = n
        }
    };
    var ne = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                if (b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._createChildren(),
                this._parsePoints(),
                0 !== this.object.points.length)
                    return this._parseHolesPoints(),
                    this._parseRoomResources(),
                    this._parseRoomHeight(),
                    this._parseRoomBlockSize(),
                    this._parseRoomVisible(),
                    this._parseRoomBlockAngle(),
                    this.object.position = this._calRoomPosition(this.object),
                    this._subRoomHolesPointsByPosition(this.object, this.object.position),
                    this._subRoomPointsByPosition(this.object, this.object.position),
                    this.object;
                console.error("room points is null")
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: U
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: z
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: V
                }))
            }
        }, {
            key: "_parsePoints",
            value: function() {
                if (this.jsonData.points) {
                    for (var e = [], t = 0; t < this.jsonData.points.length; t++) {
                        var i = this.jsonData.points[t]
                          , r = [A.scale * i[0], 0, A.scale * i[1]];
                        e.push(r)
                    }
                    this.object.points = e
                }
            }
        }, {
            key: "_parseHolesPoints",
            value: function() {
                if (this.jsonData.holes) {
                    for (var e = [], t = 0; t < this.jsonData.holes.length; t++) {
                        for (var i = this.jsonData.holes[t], r = [], n = 0; n < i.length; n++) {
                            var o = i[n]
                              , s = [A.scale * o[0], 0, A.scale * o[1]];
                            r.push(s)
                        }
                        e.push(r)
                    }
                    this.object.holes = e
                }
            }
        }, {
            key: "_parseRoomResources",
            value: function() {
                this.object.floor.resource = A.defaultFloorTextureResource,
                this.object.ceiling.resource = A.defaultCeilingTextureResource,
                this.object.roof.resource = A.defaultRoofTextureResource,
                null !== this.jsonData.floortexture && void 0 !== this.jsonData.floortexture && (this.object.floorResource = this.resourceManager.textures[this.jsonData.floortexture],
                this.object.floor.resource = this.object.floorResource),
                null !== this.jsonData.ceilingtexture && void 0 !== this.jsonData.ceilingtexture && (this.object.ceilingResource = this.resourceManager.textures[this.jsonData.ceilingtexture],
                this.object.ceiling.resource = this.object.ceilingResource),
                null !== this.jsonData.rooftexture && void 0 !== this.jsonData.rooftexture && (this.object.roofResource = this.resourceManager.textures[this.jsonData.rooftexture],
                this.object.roof.resource = this.object.roofResource)
            }
        }, {
            key: "_parseRoomHeight",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                void 0 !== e.ceilingheight ? t.ceiling.height = e.ceilingheight : (t.ceiling.DefaultHeight = this.objectParent.height - .1,
                t.ceiling.height = t.ceiling.DefaultHeight),
                void 0 !== e.roofheight ? t.roof.height = e.roofheight : (t.roof.defaultHeight = this.objectParent.height,
                t.roof.height = t.roof.defaultHeight),
                void 0 !== e.floorheight && (t.floor.height = e.floorheight)
            }
        }, {
            key: "_parseRoomVisible",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                void 0 !== e.isshowfloor && (t.floor.visible = e.isshowfloor),
                void 0 !== e.isshowceiling && (t.ceiling.visible = e.isshowceiling),
                void 0 !== e.isshowroof && (t.roof.visible = e.isshowroof)
            }
        }, {
            key: "_parseRoomBlockSize",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                if (e.floorblocksize) {
                    var i = e.floorblocksize;
                    t.floor.blockSize = [i[0], i[1]]
                }
                if (e.ceilingblocksize) {
                    var r = e.ceilingblocksize;
                    t.ceiling.blockSize = [r[0], r[1]]
                }
                if (e.roofblocksize) {
                    var n = e.roofblocksize;
                    t.roof.blockSize = [n[0], n[1]]
                }
            }
        }, {
            key: "_parseRoomBlockAngle",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                R.checkValueEmpty(e.floorblockangle) || (t.floor.blockAngle = e.floorblockangle),
                R.checkValueEmpty(e.ceilingblockangle) || (t.ceiling.blockAngle = e.ceilingblockangle),
                R.checkValueEmpty(e.roofblockangle) || (t.roof.blockAngle = e.roofblockangle)
            }
        }, {
            key: "_calRoomPosition",
            value: function(e) {
                for (var t = e.points, i = e.holes, r = [], n = [], o = 0; o < t.length; o++) {
                    var s = t[o];
                    r.push([s[0], s[2]])
                }
                if (i.length > 2 && !this._isSamePoints(i))
                    for (o = 0; o < i.length; o++) {
                        for (var a = i[o], l = [], u = 0; u < a.length; u++) {
                            s = a[u];
                            l.push([s[0], s[2]])
                        }
                        n.push(l)
                    }
                var c = this._getLabelPosition(r, n);
                return c || [0, 0, 0]
            }
        }, {
            key: "_isSamePoints",
            value: function(e) {
                for (var t = e[0], i = 1; i < e.length; i++) {
                    var r = e[i];
                    if (t[0] !== r[0] || t[1] !== r[1] || t[2] !== r[2])
                        return !1
                }
                return !0
            }
        }, {
            key: "_subRoomPointsByPosition",
            value: function(e, t) {
                for (var i = e.points, r = 0; r < i.length; r++) {
                    var n = i[r];
                    n[0] -= t[0],
                    n[1] -= t[1],
                    n[2] -= t[2]
                }
                e.points = i
            }
        }, {
            key: "_subRoomHolesPointsByPosition",
            value: function(e, t) {
                for (var i = e.holes, r = 0; r < i.length; r++)
                    for (var n = i[r], o = 0; o < n.length; o++) {
                        var s = n[o];
                        s[0] -= t[0],
                        s[1] -= t[1],
                        s[2] -= t[2]
                    }
                e.holes = i
            }
        }, {
            key: "_getLabelPosition",
            value: function(e, t) {
                if (!e || !e.length)
                    return null;
                var i = [];
                i.push(e);
                var r = ee(i);
                return [r[0], 0, r[1]]
            }
        }]),
        t
    }(D)
      , oe = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return _(t, e),
        t
    }(q)
      , se = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Floor",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(D)
      , ae = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Roof",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(D)
      , le = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Ceiling",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(D)
      , ue = function() {
        function e(t) {
            v(this, e),
            this._map = {
                0: W,
                1: G,
                2: q,
                3: X,
                4: Y,
                5: Q,
                8: Z,
                9: ne,
                10: oe,
                22: se,
                23: le,
                24: ae
            }
        }
        return y(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , ce = new (function() {
        function e() {
            v(this, e),
            this.objects = [],
            this._objectTypeConfig = null
        }
        return y(e, [{
            key: "create",
            value: function(e) {
                var t = e.type;
                return new (0,
                this.objectTypeConfig[t])
            }
        }, {
            key: "objectTypeConfig",
            set: function(e) {
                this._objectTypeConfig = e
            },
            get: function() {
                return this._objectTypeConfig
            }
        }]),
        e
    }())
      , he = function() {
        function e(t) {
            v(this, e),
            this.manager = t,
            this.baseModelUrl = this.manager.baseModelUrl,
            this.baseTextureUrl = this.manager.baseTextureUrl
        }
        return y(e, [{
            key: "createResource",
            value: function(e) {
                var t = this.manager.create({
                    type: e
                });
                return t.manager = this.manager,
                t
            }
        }, {
            key: "loadTextures",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    t = r.localurl ? this._loadLocalCustomTextureResource(r) : this._loadTextureResource(r),
                    this.manager.textures.push(t)
                }
            }
        }, {
            key: "_loadLocalCustomTextureResource",
            value: function(e) {
                var t = this.createResource("LocalCustomTextureResource");
                return t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadTextureResource",
            value: function(e) {
                var t = this.createResource("TextureResource");
                return this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadBaseTextureResourceData",
            value: function(e, t) {
                t.id = e.id,
                t.ext = e.ext,
                e.url && (t.url = e.url),
                t.baseUrl = this.baseTextureUrl,
                e.isDefault && (t.isDefault = e.isDefault)
            }
        }, {
            key: "loadModels",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    if ((t = r.model ? this.createResource("CustomResource") : r.localurl ? this.createResource("CustomModelResource") : this.createResource("ModelResource")).baseUrl = this.baseModelUrl,
                    r.localurl) {
                        if (t.localUrl = r.localurl,
                        t.id = r.id,
                        t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                        r.title && (t.modelName = r.title),
                        t.modelID = r.id,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.color) {
                            var n = r.color;
                            t.color = [n[0], n[1], n[2]],
                            4 === n.length && (t.opacity = n[3])
                        }
                    } else if (r.id) {
                        if (t.id = r.id,
                        t.modelID = r.id,
                        t.version = r.version,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.model && (t.modelID = r.model),
                        r.title && (t.modelName = r.title),
                        r.color) {
                            n = r.color;
                            t.color = [n[0], n[1], n[2]],
                            4 === n.length && (t.opacity = n[3])
                        }
                        if (r.size) {
                            var o = r.size;
                            t.size = [o[0], o[1], o[2]]
                        }
                        r.hasanimation && (t.hasAnim = r.hasanimation),
                        r.url && (t.url = r.url)
                    }
                    for (var s = 0; s < this.manager.ableToSupportFootAndHeadModelWalls.length; s++) {
                        var a = this.manager.ableToSupportFootAndHeadModelWalls[s];
                        if (t.id === a) {
                            t.isSupportHeadAndFootModelWall = !0;
                            break
                        }
                    }
                    this.manager.models.push(t)
                }
            }
        }, {
            key: "loadCustomModelResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t),
                e.localurl && (t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]))
            }
        }, {
            key: "loadCustomResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t)
            }
        }, {
            key: "loadBaseResourceData",
            value: function(e, t) {
                if (t.id = e.id,
                t.modelID = e.id,
                t.version = e.version,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]),
                e.rendermode && (t.renderMode = e.rendermode),
                e.model && (t.modelID = e.model),
                e.title && (t.modelName = e.title),
                e.color) {
                    var i = e.color;
                    t.color = [i[0], i[1], i[2]],
                    4 === i.length && (t.opacity = i[3])
                }
                if (e.size) {
                    var r = e.size;
                    t.modelSize = [r[0], r[1], r[2]]
                }
                e.hasanimation && (t.hasAnim = e.hasanimation)
            }
        }]),
        e
    }()
      , pe = function() {
        function e(t) {
            v(this, e),
            this.sceneJson = null,
            this.scale = 1,
            this.curFloorPlan = null,
            this.enableCombine = !0,
            this.world = null,
            this.resourceManager = null,
            this.defaultSetting = null,
            this.defaultResource = null,
            this.creatorTypeConfig = new ue,
            t && t.resourceLibraryUrl && (this.resourceLibraryUrl = t.resourceLibraryUrl)
        }
        return y(e, [{
            key: "setObjectTypeConfig",
            value: function(e) {
                ce.objectTypeConfig = e
            }
        }, {
            key: "setResourceManager",
            value: function(e) {
                this.resourceManager = e
            }
        }, {
            key: "setDefaultSetting",
            value: function(e) {
                this.defaultSetting = e
            }
        }, {
            key: "setDefaultResource",
            value: function(e) {
                this.defaultResource = e
            }
        }, {
            key: "setObjectManager",
            value: function(e) {
                E.objectManager = e
            }
        }, {
            key: "initDefaultResources",
            value: function() {
                this.createEmptyModelResource(),
                this.createEmptyTextureResource(),
                this.resourceLibraryUrl && (this.resourceManager.baseTextureUrl = this.resourceLibraryUrl + "/texture/",
                this.resourceManager.baseModelUrl = this.resourceLibraryUrl + "/model/"),
                this.defaultFloorTextureResource = this.createResource("TextureResource"),
                this.defaultFloorTextureResource.id = "IQR8PZE2SGEV2H07WX3EJK22CA6ZS0YG",
                this.defaultFloorTextureResource.ext = "jpg",
                this.defaultFloorTextureResource.baseUrl = this.resourceManager.baseTextureUrl,
                this.defaultCeilingTextureResource = this.createResource("TextureResource"),
                this.defaultCeilingTextureResource.id = "UPEUIZIK19VMBPP9TLZJ3J3ILWK8V5ZB",
                this.defaultCeilingTextureResource.ext = "jpg",
                this.defaultCeilingTextureResource.baseUrl = this.resourceManager.baseTextureUrl,
                this.defaultRoofTextureResource = this.createResource("TextureResource"),
                this.defaultRoofTextureResource.id = "3OZVGE55PV0MY48FPRG5BELXKHV26NU5",
                this.defaultRoofTextureResource.ext = "jpg",
                this.defaultRoofTextureResource.baseUrl = this.resourceManager.baseTextureUrl,
                this.defaultDoorResource = this.resourceManager.emptyModelResource,
                A.defaultFloorTextureResource = this.defaultFloorTextureResource,
                A.defaultCeilingTextureResource = this.defaultCeilingTextureResource,
                A.defaultRoofTextureResource = this.defaultRoofTextureResource,
                A.defaultDoorResource = this.defaultDoorResource
            }
        }, {
            key: "createEmptyTextureResource",
            value: function() {
                var e = this.createResource("TextureResource");
                e.isBuilded = !0,
                e.texture = new THREE.Texture,
                e.isEmpty = !0,
                e.buildPromise = Promise.resolve(),
                this.resourceManager.emptyTextureResource = e
            }
        }, {
            key: "createEmptyModelResource",
            value: function() {
                var e = this.createResource("ModelResource");
                e.isBuilded = !0,
                e.model = new THREE.Object3D,
                e.isEmpty = !0,
                e.buildPromise = Promise.resolve(),
                this.resourceManager.emptyModelResource = e
            }
        }, {
            key: "loadLightMaps",
            value: function(e) {
                var t = null
                  , i = "18091219l1g1hnjt"
                  , r = "png";
                this.defaultSetting.userDefaultWallLightMap = !0,
                e && e.straightmanualwall && e.straightmanualwall.lightingtexture && (i = e.straightmanualwall.lightingtexture.id,
                r = e.straightmanualwall.lightingtexture.ext,
                this.defaultSetting.userDefaultWallLightMap = !1),
                this.defaultSetting.enableManaulWallLightMap && ((t = this.createResource("TextureResource")).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = i,
                t.ext = r,
                this.defaultResource.wallLightMapResource = t),
                this.defaultSetting.enableFloorLightMap && ((t = this.createResource("TextureResource")).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = "18091216vjlgtwbh",
                t.ext = "jpg",
                this.defaultResource.floorLightMapResource = t)
            }
        }, {
            key: "createResource",
            value: function(e) {
                var t = this.resourceManager.create({
                    type: e
                });
                return t.manager = this.resourceManager,
                t
            }
        }, {
            key: "parseObjects",
            value: function(e) {
                return e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl && (this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl),
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }, {
            key: "getParentRelativeUrl",
            value: function(e) {
                for (var t = e.split("/"), i = "", r = 0; r < t.length - 1; r++) {
                    i += t[r] + "/"
                }
                return i
            }
        }, {
            key: "loadSceneJson",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    if (e.sceneJson)
                        t(e.sceneJson);
                    else if (e.sceneURL) {
                        (new THREE.FileLoader).load(e.sceneURL, (function(i) {
                            e.sceneJson = JSON.parse(i),
                            t()
                        }
                        ), (function() {}
                        ), (function(t) {
                            i("can not load " + e.sceneURL)
                        }
                        ))
                    } else
                        i("load scene json error")
                }
                ))
            }
        }, {
            key: "getResourceLoader",
            value: function() {
                return new he(this.resourceManager)
            }
        }, {
            key: "parseSceneJson",
            value: function() {
                var e = this.getResourceLoader();
                this.loadLightMaps(this.sceneJson.materialsetting),
                this.initDefaultResources(),
                e.loadTextures(this.sceneJson.textures),
                e.loadModels(this.sceneJson.models),
                this.parseWorld(this.sceneJson)
            }
        }, {
            key: "parseWorld",
            value: function(e) {
                E.config = this.creatorTypeConfig,
                this.world = E.createObject({
                    jsonData: e,
                    resourceManager: this.resourceManager,
                    creatorType: k
                })
            }
        }]),
        e
    }()
      , de = new (function() {
        function e(t) {
            v(this, e),
            this.config = null
        }
        return y(e, [{
            key: "createObject",
            value: function(e) {
                var t = new (this.config.getClass(e.creatorType))(e)
                  , i = t.create();
                return t.parseChildren(),
                i
            }
        }]),
        e
    }())
      , fe = function() {
        function e(t) {
            v(this, e),
            this.id = null,
            this.name = null,
            this.userID = null,
            this.properties = null,
            this.jsonData = t.jsonData,
            this.objectParent = null,
            t.parent && (this.objectParent = t.parent),
            this.createType = null,
            this.resourceManager = t.resourceManager
        }
        return y(e, [{
            key: "create",
            value: function() {
                var e = this._getCreateParams();
                return this.object = de.objectManager.create(e),
                this.jsonData.id && (this.object.id = this.jsonData.id),
                this.jsonData.userid && (this.object.userID = this.jsonData.userid),
                this.jsonData.name && (this.object.name = this.jsonData.name),
                this.object.jsonData = this.jsonData,
                e.parent && (this.object.parent = e.parent),
                R.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                de.createObject(e)
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        e
    }()
      , me = {
        scale: 1,
        defaultFloorTextureResource: null,
        defaultCeilingTextureResource: null,
        defaultRoofTextureResource: null
    }
      , ge = 0
      , ve = 1
      , ye = 2
      , be = 5
      , _e = 8
      , xe = 9
      , Ee = 10
      , we = 22
      , Te = 23
      , Me = 24
      , Ce = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return this.jsonData.unit && (me.scale = .01 * this.jsonData.unit),
                b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this)
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData
                  , t = (this._parseJsonDataChild({
                    jsonData: e,
                    creatorType: ve
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Ee
                }));
                this.object.outdoors = t
            }
        }]),
        t
    }(fe)
      , Se = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return _(t, e),
        y(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                this._parseJsonDataChild({
                    jsonData: e,
                    creatorType: ye
                })
            }
        }]),
        t
    }(fe)
      , je = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.walls && this._parseWalls(e.walls),
                e.rooms && this._parseJsonDataChildren({
                    jsonData: e.rooms,
                    creatorType: xe
                }),
                e.doors && this._parseJsonDataChildren({
                    jsonData: e.doors,
                    creatorType: _e
                }),
                this.object.calRoomsUV2()
            }
        }, {
            key: "_parseWalls",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t];
                    this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: be
                    })
                }
            }
        }]),
        t
    }(fe)
      , Pe = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "WallCorner",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this);
                var e = this.jsonData[0] * me.scale
                  , i = this.jsonData[1] * me.scale;
                return this.object.position = [e, 0, i],
                this.object
            }
        }]),
        t
    }(fe)
      , Re = function(e) {
        function t(e) {
            return v(this, t),
            x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return _(t, e),
        y(t, [{
            key: "_parseCorners",
            value: function() {
                var e = this.jsonData
                  , t = (this.objectParent,
                e.start[0] * me.scale)
                  , i = e.start[1] * me.scale
                  , r = null
                  , n = null;
                r = this._existsCorner(t, 0, i) ? this._getCorner(t, 0, i) : this._createCorner(t, 0, i, e.start),
                t = e.end[0] * me.scale,
                i = e.end[1] * me.scale,
                n = this._existsCorner(t, 0, i) ? this._getCorner(t, 0, i) : this._createCorner(t, 0, i, e.end),
                this.object.startCorner = r,
                this.object.endCorner = n
            }
        }, {
            key: "_existsCorner",
            value: function(e, t, i) {
                var r = this.objectParent.typeToChildren.WallCorner;
                if (r)
                    for (var n = 0, o = r.length; n < o; n++) {
                        var s = r[n].position;
                        if (s[0] === e && s[1] === t && s[2] === i)
                            return !0
                    }
                return !1
            }
        }, {
            key: "_getCorner",
            value: function(e, t, i) {
                for (var r = this.objectParent.typeToChildren.WallCorner, n = 0, o = r.length; n < o; n++) {
                    var s = r[n].position;
                    if (s[0] === e && s[1] === t && s[2] === i)
                        return r[n]
                }
                return null
            }
        }, {
            key: "_createCorner",
            value: function(e, t, i, r) {
                var n = new Pe({
                    jsonData: r
                }).create();
                return n.parent = this.objectParent,
                n.jsonData = r,
                n
            }
        }]),
        t
    }(fe)
      , De = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ModelWall",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._parseCorners(),
                R.checkValueEmpty(this.jsonData.model) || (this.object.resource = this.resourceManager.models[this.jsonData.model]),
                R.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                R.checkValueEmpty(this.jsonData.height) ? this.object.height = this.object.resource.modelSize.y : this.object.height = this.jsonData.height,
                R.checkValueEmpty(this.jsonData.weight) || (this.object.thick = this.jsonData.weight),
                this.object
            }
        }]),
        t
    }(Re)
      , Ae = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "StraightManualWall",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._parseCorners(),
                this._parseResources(),
                this.jsonData.uvmultiple && (this.object.uvMultiple = this.jsonData.uvmultiple),
                R.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                R.checkValueEmpty(this.jsonData.weight) || (this.object.thick = this.jsonData.weight),
                this.object
            }
        }, {
            key: "_parseResources",
            value: function() {
                this.object.leftResource = this.resourceManager.defaultWallTextureResource,
                this.object.rightResource = this.resourceManager.defaultWallTextureResource,
                this.object.edgeResource = this.resourceManager.defaultWallEdgeResource,
                this.object.lightMapResource = this.resourceManager.wallLightMapResource
            }
        }]),
        t
    }(Re)
      , ke = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.attachWall = e.attachWall,
            i.createType = "DoorOrWindow",
            i.pointInLineDeviation = .001,
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this);
                var e = me.scale
                  , i = this.jsonData
                  , r = i.height * e
                  , n = i.width * e
                  , o = [i.pos[0] * e, 0, i.pos[1] * e];
                this.attachWall = this._getPointOnWhichWall(this.objectParent, o),
                null === this.attachWall && console.warn("can not find door on which wall!");
                var s = this.object;
                return i.suspendpercent && (s.suspendPercent = i.suspendpercent),
                s.resource = this.resourceManager.create({
                    id: s.id + "res",
                    type: "EmptyModelResource"
                }),
                s.resource.size = [n, r, .15],
                s.position = o,
                this.object.attachWall = this.attachWall,
                this.attachWall.doorOrWindows.push(this.object),
                this.object
            }
        }, {
            key: "_getPointOnWhichWall",
            value: function(e, t) {
                var i = []
                  , r = e.typeToChildren.StraightManualWall
                  , n = e.typeToChildren.ModelWall;
                r && (i = i.concat(r)),
                n && (i = i.concat(n));
                for (var o = 0; o < i.length; o++) {
                    var s = i[o];
                    if (this._isPointOnLineAndBetweenPoints(R.convertToVector3(s.startCorner.position), R.convertToVector3(s.endCorner.position), R.convertToVector3(t)))
                        return s
                }
                return null
            }
        }, {
            key: "_isPointOnLine",
            value: function(e, t, i) {
                var r = new S;
                return r.crossVectors(e.clone().sub(i), t.clone().sub(i)),
                r.length() < this.pointInLineDeviation
            }
        }, {
            key: "_isPointOnLineAndBetweenPoints",
            value: function(e, t, i) {
                if (!this._isPointOnLine(e, t, i))
                    return !1;
                var r = t.x - e.x
                  , n = t.z - e.z;
                return Math.abs(r) >= Math.abs(n) ? r > 0 ? e.x <= i.x && i.x <= t.x : t.x <= i.x && i.x <= e.x : n > 0 ? e.z <= i.z && i.z <= t.z : t.z <= i.z && i.z <= e.z
            }
        }]),
        t
    }(fe)
      , Oe = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                if (b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._createChildren(),
                this._parsePoints(),
                0 !== this.object.points.length)
                    return this._parseHolesPoints(),
                    this._parseRoomResources(),
                    this._parseRoomHeight(),
                    this._parseRoomBlockSize(),
                    this._parseRoomVisible(),
                    this._parseRoomBlockAngle(),
                    this.object;
                console.error("room points is null")
            }
        }, {
            key: "_parsePoints",
            value: function() {
                if (this.jsonData.points) {
                    for (var e = [], t = 0; t < this.jsonData.points.length; t++) {
                        var i = this.jsonData.points[t]
                          , r = [me.scale * i[0], 0, me.scale * i[1]];
                        e.push(r)
                    }
                    this.object.points = e
                }
            }
        }, {
            key: "_parseHolesPoints",
            value: function() {
                if (this.jsonData.holes) {
                    for (var e = [], t = 0; t < this.jsonData.holes.length; t++) {
                        for (var i = this.jsonData.holes[t], r = [], n = 0; n < i.length; n++) {
                            var o = i[n]
                              , s = [me.scale * o[0], 0, me.scale * o[1]];
                            r.push(s)
                        }
                        e.push(r)
                    }
                    this.object.holes = e
                }
            }
        }, {
            key: "_parseRoomResources",
            value: function() {
                this.object.floor.resource = me.defaultFloorTextureResource,
                this.object.ceiling.resource = me.defaultCeilingTextureResource,
                this.object.roof.resource = me.defaultRoofTextureResource,
                null !== this.jsonData.floortexture && void 0 !== this.jsonData.floortexture && (this.object.floorResource = this.resourceManager.textures[this.jsonData.floortexture],
                this.object.floor.resource = this.object.floorResource),
                null !== this.jsonData.ceilingtexture && void 0 !== this.jsonData.ceilingtexture && (this.object.ceilingResource = this.resourceManager.textures[this.jsonData.ceilingtexture],
                this.object.ceiling.resource = this.object.ceilingResource),
                null !== this.jsonData.rooftexture && void 0 !== this.jsonData.rooftexture && (this.object.roofResource = this.resourceManager.textures[this.jsonData.rooftexture],
                this.object.roof.resource = this.object.roofResource)
            }
        }, {
            key: "_parseRoomHeight",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                void 0 !== e.ceilingheight ? t.ceiling.height = e.ceilingheight : (t.ceiling.DefaultHeight = this.objectParent.height - .1,
                t.ceiling.height = t.ceiling.DefaultHeight),
                void 0 !== e.roofheight ? t.roof.height = e.roofheight : (t.roof.defaultHeight = this.objectParent.height,
                t.roof.height = t.roof.defaultHeight),
                void 0 !== e.floorheight && (t.floor.height = e.floorheight)
            }
        }, {
            key: "_parseRoomVisible",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                void 0 !== e.isshowfloor && (t.floor.isShow = e.isshowfloor),
                void 0 !== e.isshowceiling && (t.ceiling.isShow = e.isshowceiling),
                void 0 !== e.isshowroof && (t.roof.isShow = e.isshowroof)
            }
        }, {
            key: "_parseRoomBlockSize",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                if (e.floorblocksize) {
                    var i = e.floorblocksize;
                    t.floor.blockSize = [i[0], i[1]]
                }
                if (e.ceilingblocksize) {
                    var r = e.ceilingblocksize;
                    t.ceiling.blockSize = [r[0], r[1]]
                }
                if (e.roofblocksize) {
                    var n = e.roofblocksize;
                    t.roof.blockSize = [n[0], n[1]]
                }
            }
        }, {
            key: "_parseRoomBlockAngle",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                R.checkValueEmpty(e.floorblockangle) || (t.floor.blockAngle = e.floorblockangle),
                R.checkValueEmpty(e.ceilingblockangle) || (t.ceiling.blockAngle = e.ceilingblockangle),
                R.checkValueEmpty(e.roofblockangle) || (t.roof.blockAngle = e.roofblockangle)
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: we
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Te
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Me
                }))
            }
        }]),
        t
    }(fe)
      , Be = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return _(t, e),
        t
    }(je)
      , Fe = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Floor",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(fe)
      , Le = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Roof",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(fe)
      , Ie = function(e) {
        function t(e) {
            v(this, t);
            var i = x(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Ceiling",
            i
        }
        return _(t, e),
        y(t, [{
            key: "create",
            value: function() {
                return b(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(fe)
      , Ne = function() {
        function e(t) {
            v(this, e),
            this._map = {
                0: Ce,
                1: Se,
                2: je,
                3: Pe,
                4: De,
                5: Ae,
                8: ke,
                9: Oe,
                10: Be,
                22: Fe,
                23: Ie,
                24: Le
            }
        }
        return y(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , He = new (function() {
        function e() {
            v(this, e),
            this.objects = [],
            this._objectTypeConfig = null
        }
        return y(e, [{
            key: "create",
            value: function(e) {
                var t = e.type;
                return new (0,
                this.objectTypeConfig[t])
            }
        }, {
            key: "objectTypeConfig",
            set: function(e) {
                this._objectTypeConfig = e
            },
            get: function() {
                return this._objectTypeConfig
            }
        }]),
        e
    }())
      , Ue = function() {
        function e(t) {
            v(this, e),
            this.manager = t,
            this.baseModelUrl = this.manager.baseModelUrl,
            this.baseTextureUrl = this.manager.baseTextureUrl
        }
        return y(e, [{
            key: "createResource",
            value: function(e) {
                var t = this.manager.create({
                    type: e
                });
                return t.manager = this.manager,
                t.baseUrl = this.manager.baseTextureUrl,
                t
            }
        }, {
            key: "initDefaultResources",
            value: function() {
                var e = this.createResource("TextureResource");
                e.id = "EB9ECFA1101C4A0ABB770ED3A9865441",
                e.ext = "jpg",
                e.baseUrl = this.manager.baseTextureUrl,
                this.manager.defaultWallEdgeResource = e,
                this.manager.textures.push(e),
                (e = this.createResource("TextureResource")).id = "81FDB96B43D441C5B3C650BFA2B76CD4",
                e.ext = "jpg",
                e.isDefault = !0,
                this.manager.defaultWallTextureResource = e,
                this.manager.textures.push(e),
                (e = this.createResource("TextureResource")).id = "IQR8PZE2SGEV2H07WX3EJK22CA6ZS0YG",
                e.ext = "jpg",
                this.manager.defaultFloorTextureResource = e,
                this.manager.textures.push(e),
                (e = this.createResource("TextureResource")).id = "UPEUIZIK19VMBPP9TLZJ3J3ILWK8V5ZB",
                e.ext = "jpg",
                this.manager.defaultCeilingTextureResource = e,
                this.manager.textures.push(e),
                (e = this.createResource("TextureResource")).id = "3OZVGE55PV0MY48FPRG5BELXKHV26NU5",
                e.ext = "jpg",
                this.manager.defaultRoofTextureResource = e,
                this.manager.textures.push(e)
            }
        }]),
        e
    }()
      , ze = function() {
        function e(t) {
            v(this, e),
            this.sceneJson = null,
            this.scale = 1,
            this.curFloorPlan = null,
            this.enableCombine = !0,
            this.world = null,
            this.resourceManager = null,
            this.defaultSetting = null,
            this.defaultResource = null,
            this.creatorTypeConfig = new Ne,
            t && t.resourceLibraryUrl && (this.resourceLibraryUrl = t.resourceLibraryUrl)
        }
        return y(e, [{
            key: "setObjectTypeConfig",
            value: function(e) {
                He.objectTypeConfig = e
            }
        }, {
            key: "setObjectManager",
            value: function(e) {
                de.objectManager = e
            }
        }, {
            key: "setResourceManager",
            value: function(e) {
                this.resourceManager = e
            }
        }, {
            key: "setDefaultSetting",
            value: function(e) {
                this.defaultSetting = e
            }
        }, {
            key: "setDefaultResource",
            value: function(e) {
                this.defaultResource = e
            }
        }, {
            key: "initDefaultResources",
            value: function() {
                this.resourceLibraryUrl && (this.resourceManager.baseTextureUrl = this.resourceLibraryUrl + "/texture/",
                this.resourceManager.baseModelUrl = this.resourceLibraryUrl + "/model/"),
                this.defaultFloorTextureResource = this.createResource("TextureResource"),
                this.defaultFloorTextureResource.id = "IQR8PZE2SGEV2H07WX3EJK22CA6ZS0YG",
                this.defaultFloorTextureResource.ext = "jpg",
                this.defaultFloorTextureResource.baseUrl = this.resourceManager.baseTextureUrl,
                this.defaultCeilingTextureResource = this.createResource("TextureResource"),
                this.defaultCeilingTextureResource.id = "UPEUIZIK19VMBPP9TLZJ3J3ILWK8V5ZB",
                this.defaultCeilingTextureResource.ext = "jpg",
                this.defaultCeilingTextureResource.baseUrl = this.resourceManager.baseTextureUrl,
                this.defaultRoofTextureResource = this.createResource("TextureResource"),
                this.defaultRoofTextureResource.id = "3OZVGE55PV0MY48FPRG5BELXKHV26NU5",
                this.defaultRoofTextureResource.ext = "jpg",
                this.defaultRoofTextureResource.baseUrl = this.resourceManager.baseTextureUrl,
                this.defaultDoorResource = this.resourceManager.emptyModelResource,
                me.defaultFloorTextureResource = this.defaultFloorTextureResource,
                me.defaultCeilingTextureResource = this.defaultCeilingTextureResource,
                me.defaultRoofTextureResource = this.defaultRoofTextureResource,
                me.defaultDoorResource = this.defaultDoorResource
            }
        }, {
            key: "loadLightMaps",
            value: function(e) {
                var t = null
                  , i = "18091219l1g1hnjt"
                  , r = "png";
                this.defaultSetting.userDefaultWallLightMap = !0,
                e && e.straightmanualwall && e.straightmanualwall.lightingtexture && (i = e.straightmanualwall.lightingtexture.id,
                r = e.straightmanualwall.lightingtexture.ext,
                this.defaultSetting.userDefaultWallLightMap = !1),
                this.defaultSetting.enableManaulWallLightMap && ((t = this.createResource("TextureResource")).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = i,
                t.ext = r,
                this.resourceManager.wallLightMapResource = t),
                this.defaultSetting.enableFloorLightMap && ((t = this.createResource("TextureResource")).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = "18091216vjlgtwbh",
                t.ext = "jpg",
                this.resourceManager.floorLightMapResource = t)
            }
        }, {
            key: "createResource",
            value: function(e) {
                var t = this.resourceManager.create({
                    type: e
                });
                return t.manager = this.resourceManager,
                t
            }
        }, {
            key: "parseObjects",
            value: function(e) {
                return e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl && (this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl),
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }, {
            key: "getParentRelativeUrl",
            value: function(e) {
                for (var t = e.split("/"), i = "", r = 0; r < t.length - 1; r++) {
                    i += t[r] + "/"
                }
                return i
            }
        }, {
            key: "loadSceneJson",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    if (e.sceneJson)
                        t(e.sceneJson);
                    else if (e.sceneURL) {
                        (new THREE.FileLoader).load(e.sceneURL, (function(i) {
                            e.sceneJson = JSON.parse(i),
                            t()
                        }
                        ), (function() {}
                        ), (function(t) {
                            i("can not load " + e.sceneURL)
                        }
                        ))
                    } else
                        i("load scene json error")
                }
                ))
            }
        }, {
            key: "getResourceMaanagerLoader",
            value: function() {
                return new Ue(this.resourceManager)
            }
        }, {
            key: "parseSceneJson",
            value: function() {
                var e = this.getResourceMaanagerLoader();
                this.loadLightMaps(this.sceneJson.materialsetting),
                e.initDefaultResources(),
                this.initDefaultResources(),
                this.parseWorld(this.sceneJson)
            }
        }, {
            key: "parseWorld",
            value: function(e) {
                de.config = this.creatorTypeConfig,
                this.world = de.createObject({
                    jsonData: e,
                    resourceManager: this.resourceManager,
                    creatorType: ge
                })
            }
        }]),
        e
    }()
      , Ve = new (function() {
        function e(t) {
            v(this, e),
            this._map = {
                0: new ze,
                2: new pe
            },
            this._versions = [0]
        }
        return y(e, [{
            key: "getLoaderManager",
            value: function(e) {
                return null != e ? this._map[e] : this._map[this._versions.length - 1]
            }
        }]),
        e
    }())
      , We = function() {
        function e(t) {
            v(this, e),
            this.resourceManager = t.resourceManager,
            this.defaultSetting = t.defaultSetting,
            this.defaultResource = t.defaultResource,
            this.objectManager = t.objectManager,
            t.version && (this.version = t.version)
        }
        return y(e, [{
            key: "load",
            value: function(e) {
                var t = Ve.getLoaderManager(this._getVersion(e));
                return t.setDefaultSetting(this.defaultSetting),
                t.setDefaultResource(this.defaultResource),
                t.setResourceManager(this.resourceManager),
                t.setObjectManager(this.objectManager),
                t.parseObjects(e)
            }
        }, {
            key: "_getVersion",
            value: function(e) {
                return null !== e.version && void 0 !== e.version ? e.version : null !== e.json.version && void 0 !== e.json.version ? e.json.version : void 0
            }
        }]),
        e
    }();
    var Ge = function(e, t) {
        return e(t = {
            exports: {}
        }, t.exports),
        t.exports
    }((function(e) {
        !function(t) {
            var i = Object.prototype
              , r = i.hasOwnProperty
              , n = "function" == typeof Symbol ? Symbol : {}
              , o = n.iterator || "@@iterator"
              , s = n.asyncIterator || "@@asyncIterator"
              , a = n.toStringTag || "@@toStringTag"
              , l = t.regeneratorRuntime;
            if (l)
                e.exports = l;
            else {
                (l = t.regeneratorRuntime = e.exports).wrap = m;
                var u = {}
                  , c = {};
                c[o] = function() {
                    return this
                }
                ;
                var p = Object.getPrototypeOf
                  , d = p && p(p(C([])));
                d && d !== i && r.call(d, o) && (c = d);
                var f = b.prototype = v.prototype = Object.create(c);
                y.prototype = f.constructor = b,
                b.constructor = y,
                b[a] = y.displayName = "GeneratorFunction",
                l.isGeneratorFunction = function(e) {
                    var t = "function" == typeof e && e.constructor;
                    return !!t && (t === y || "GeneratorFunction" === (t.displayName || t.name))
                }
                ,
                l.mark = function(e) {
                    return Object.setPrototypeOf ? Object.setPrototypeOf(e, b) : (e.__proto__ = b,
                    a in e || (e[a] = "GeneratorFunction")),
                    e.prototype = Object.create(f),
                    e
                }
                ,
                l.awrap = function(e) {
                    return {
                        __await: e
                    }
                }
                ,
                _(x.prototype),
                x.prototype[s] = function() {
                    return this
                }
                ,
                l.AsyncIterator = x,
                l.async = function(e, t, i, r) {
                    var n = new x(m(e, t, i, r));
                    return l.isGeneratorFunction(t) ? n : n.next().then((function(e) {
                        return e.done ? e.value : n.next()
                    }
                    ))
                }
                ,
                _(f),
                f[a] = "Generator",
                f[o] = function() {
                    return this
                }
                ,
                f.toString = function() {
                    return "[object Generator]"
                }
                ,
                l.keys = function(e) {
                    var t = [];
                    for (var i in e)
                        t.push(i);
                    return t.reverse(),
                    function i() {
                        for (; t.length; ) {
                            var r = t.pop();
                            if (r in e)
                                return i.value = r,
                                i.done = !1,
                                i
                        }
                        return i.done = !0,
                        i
                    }
                }
                ,
                l.values = C,
                M.prototype = {
                    constructor: M,
                    reset: function(e) {
                        if (this.prev = 0,
                        this.next = 0,
                        this.sent = this._sent = undefined,
                        this.done = !1,
                        this.delegate = null,
                        this.method = "next",
                        this.arg = undefined,
                        this.tryEntries.forEach(T),
                        !e)
                            for (var t in this)
                                "t" === t.charAt(0) && r.call(this, t) && !isNaN(+t.slice(1)) && (this[t] = undefined)
                    },
                    stop: function() {
                        this.done = !0;
                        var e = this.tryEntries[0].completion;
                        if ("throw" === e.type)
                            throw e.arg;
                        return this.rval
                    },
                    dispatchException: function(e) {
                        if (this.done)
                            throw e;
                        var t = this;
                        function i(i, r) {
                            return s.type = "throw",
                            s.arg = e,
                            t.next = i,
                            r && (t.method = "next",
                            t.arg = undefined),
                            !!r
                        }
                        for (var n = this.tryEntries.length - 1; n >= 0; --n) {
                            var o = this.tryEntries[n]
                              , s = o.completion;
                            if ("root" === o.tryLoc)
                                return i("end");
                            if (o.tryLoc <= this.prev) {
                                var a = r.call(o, "catchLoc")
                                  , l = r.call(o, "finallyLoc");
                                if (a && l) {
                                    if (this.prev < o.catchLoc)
                                        return i(o.catchLoc, !0);
                                    if (this.prev < o.finallyLoc)
                                        return i(o.finallyLoc)
                                } else if (a) {
                                    if (this.prev < o.catchLoc)
                                        return i(o.catchLoc, !0)
                                } else {
                                    if (!l)
                                        throw new Error("try statement without catch or finally");
                                    if (this.prev < o.finallyLoc)
                                        return i(o.finallyLoc)
                                }
                            }
                        }
                    },
                    abrupt: function(e, t) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var n = this.tryEntries[i];
                            if (n.tryLoc <= this.prev && r.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
                                var o = n;
                                break
                            }
                        }
                        o && ("break" === e || "continue" === e) && o.tryLoc <= t && t <= o.finallyLoc && (o = null);
                        var s = o ? o.completion : {};
                        return s.type = e,
                        s.arg = t,
                        o ? (this.method = "next",
                        this.next = o.finallyLoc,
                        u) : this.complete(s)
                    },
                    complete: function(e, t) {
                        if ("throw" === e.type)
                            throw e.arg;
                        return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg,
                        this.method = "return",
                        this.next = "end") : "normal" === e.type && t && (this.next = t),
                        u
                    },
                    finish: function(e) {
                        for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                            var i = this.tryEntries[t];
                            if (i.finallyLoc === e)
                                return this.complete(i.completion, i.afterLoc),
                                T(i),
                                u
                        }
                    },
                    catch: function(e) {
                        for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                            var i = this.tryEntries[t];
                            if (i.tryLoc === e) {
                                var r = i.completion;
                                if ("throw" === r.type) {
                                    var n = r.arg;
                                    T(i)
                                }
                                return n
                            }
                        }
                        throw new Error("illegal catch attempt")
                    },
                    delegateYield: function(e, t, i) {
                        return this.delegate = {
                            iterator: C(e),
                            resultName: t,
                            nextLoc: i
                        },
                        "next" === this.method && (this.arg = undefined),
                        u
                    }
                }
            }
            function m(e, t, i, r) {
                var n = t && t.prototype instanceof v ? t : v
                  , o = Object.create(n.prototype)
                  , s = new M(r || []);
                return o._invoke = function(e, t, i) {
                    var r = "suspendedStart";
                    return function(n, o) {
                        if ("executing" === r)
                            throw new Error("Generator is already running");
                        if ("completed" === r) {
                            if ("throw" === n)
                                throw o;
                            return S()
                        }
                        for (i.method = n,
                        i.arg = o; ; ) {
                            var s = i.delegate;
                            if (s) {
                                var a = E(s, i);
                                if (a) {
                                    if (a === u)
                                        continue;
                                    return a
                                }
                            }
                            if ("next" === i.method)
                                i.sent = i._sent = i.arg;
                            else if ("throw" === i.method) {
                                if ("suspendedStart" === r)
                                    throw r = "completed",
                                    i.arg;
                                i.dispatchException(i.arg)
                            } else
                                "return" === i.method && i.abrupt("return", i.arg);
                            r = "executing";
                            var l = g(e, t, i);
                            if ("normal" === l.type) {
                                if (r = i.done ? "completed" : "suspendedYield",
                                l.arg === u)
                                    continue;
                                return {
                                    value: l.arg,
                                    done: i.done
                                }
                            }
                            "throw" === l.type && (r = "completed",
                            i.method = "throw",
                            i.arg = l.arg)
                        }
                    }
                }(e, i, s),
                o
            }
            function g(e, t, i) {
                try {
                    return {
                        type: "normal",
                        arg: e.call(t, i)
                    }
                } catch (e) {
                    return {
                        type: "throw",
                        arg: e
                    }
                }
            }
            function v() {}
            function y() {}
            function b() {}
            function _(e) {
                ["next", "throw", "return"].forEach((function(t) {
                    e[t] = function(e) {
                        return this._invoke(t, e)
                    }
                }
                ))
            }
            function x(e) {
                var t;
                this._invoke = function(i, n) {
                    function o() {
                        return new Promise((function(t, o) {
                            !function t(i, n, o, s) {
                                var a = g(e[i], e, n);
                                if ("throw" !== a.type) {
                                    var l = a.arg
                                      , u = l.value;
                                    return u && "object" === (void 0 === u ? "undefined" : h(u)) && r.call(u, "__await") ? Promise.resolve(u.__await).then((function(e) {
                                        t("next", e, o, s)
                                    }
                                    ), (function(e) {
                                        t("throw", e, o, s)
                                    }
                                    )) : Promise.resolve(u).then((function(e) {
                                        l.value = e,
                                        o(l)
                                    }
                                    ), s)
                                }
                                s(a.arg)
                            }(i, n, t, o)
                        }
                        ))
                    }
                    return t = t ? t.then(o, o) : o()
                }
            }
            function E(e, t) {
                var i = e.iterator[t.method];
                if (undefined === i) {
                    if (t.delegate = null,
                    "throw" === t.method) {
                        if (e.iterator.return && (t.method = "return",
                        t.arg = undefined,
                        E(e, t),
                        "throw" === t.method))
                            return u;
                        t.method = "throw",
                        t.arg = new TypeError("The iterator does not provide a 'throw' method")
                    }
                    return u
                }
                var r = g(i, e.iterator, t.arg);
                if ("throw" === r.type)
                    return t.method = "throw",
                    t.arg = r.arg,
                    t.delegate = null,
                    u;
                var n = r.arg;
                return n ? n.done ? (t[e.resultName] = n.value,
                t.next = e.nextLoc,
                "return" !== t.method && (t.method = "next",
                t.arg = undefined),
                t.delegate = null,
                u) : n : (t.method = "throw",
                t.arg = new TypeError("iterator result is not an object"),
                t.delegate = null,
                u)
            }
            function w(e) {
                var t = {
                    tryLoc: e[0]
                };
                1 in e && (t.catchLoc = e[1]),
                2 in e && (t.finallyLoc = e[2],
                t.afterLoc = e[3]),
                this.tryEntries.push(t)
            }
            function T(e) {
                var t = e.completion || {};
                t.type = "normal",
                delete t.arg,
                e.completion = t
            }
            function M(e) {
                this.tryEntries = [{
                    tryLoc: "root"
                }],
                e.forEach(w, this),
                this.reset(!0)
            }
            function C(e) {
                if (e) {
                    var t = e[o];
                    if (t)
                        return t.call(e);
                    if ("function" == typeof e.next)
                        return e;
                    if (!isNaN(e.length)) {
                        var i = -1
                          , n = function t() {
                            for (; ++i < e.length; )
                                if (r.call(e, i))
                                    return t.value = e[i],
                                    t.done = !1,
                                    t;
                            return t.value = undefined,
                            t.done = !0,
                            t
                        };
                        return n.next = n
                    }
                }
                return {
                    next: S
                }
            }
            function S() {
                return {
                    value: undefined,
                    done: !0
                }
            }
        }(function() {
            return this
        }() || Function("return this")())
    }
    ))
      , qe = function() {
        return this
    }() || Function("return this")()
      , Xe = qe.regeneratorRuntime && Object.getOwnPropertyNames(qe).indexOf("regeneratorRuntime") >= 0
      , Je = Xe && qe.regeneratorRuntime;
    qe.regeneratorRuntime = void 0;
    var Ye = Ge;
    if (Xe)
        qe.regeneratorRuntime = Je;
    else
        try {
            delete qe.regeneratorRuntime
        } catch (e) {
            qe.regeneratorRuntime = void 0
        }
    var Qe = Ye
      , Ze = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }();
    var Ke = function() {
        function e(t) {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this._initParams(),
            this.resource = t,
            this.objects = [],
            this.isBuilded = !1,
            this._awaitToNextBuildTime = .01,
            this._maxBuildTime = 1e3
        }
        return Ze(e, [{
            key: "_initParams",
            value: function() {
                this.resource = null,
                this.objects = null,
                this.isBuilded = null
            }
        }, {
            key: "add",
            value: function(e) {
                this.objects.push(e)
            }
        }, {
            key: "build",
            value: function() {
                for (var e = 0; e < this.objects.length; e++) {
                    var t = this.objects[e];
                    t.isContainer ? t.buildSelf() : t.build()
                }
                this.isBuilded = !0
            }
        }, {
            key: "containByClassType",
            value: function(e) {
                for (var t = 0; t < this.objects.length; t++) {
                    if (this.objects[t].type === e)
                        return !0
                }
                return !1
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , $e = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }();
    var et = function() {
        function e(t) {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this.manager = t,
            this._initParams(),
            this.resources = [],
            this.isBuilded = !1
        }
        return $e(e, [{
            key: "_initParams",
            value: function() {
                this.resources = null,
                this.isBuilded = null,
                this._allBuildedCallback = null
            }
        }, {
            key: "add",
            value: function(e) {
                this.resources.push(e)
            }
        }, {
            key: "build",
            value: function(e) {
                this._allBuildedCallback = e;
                for (var t = 0; t < this.resources.length; t++) {
                    var i = this.resources[t];
                    i.registerBuildCallbackListener(this._checkAllResourceBuilded, {
                        unit: this
                    }),
                    i.build()
                }
            }
        }, {
            key: "_checkAllResourceBuilded",
            value: function(e, t) {
                var i = t.unit;
                if (!i.isBuilded) {
                    for (var r = i.resources, n = 0; n < r.length; n++) {
                        if (!r[n].isBuilded)
                            return
                    }
                    i.isBuilded = !0,
                    i._allBuildedCallback && i._allBuildedCallback()
                }
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }, {
            key: "isFull",
            get: function() {
                return this.resources.length > this.manager.maxResourcesUnitDownloadNumber
            }
        }]),
        e
    }()
      , tt = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }();
    var it = function() {
        function e(t) {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this._initParams(),
            this.buildUnits = []
        }
        return tt(e, [{
            key: "_initParams",
            value: function() {
                this.buildUnits = null,
                this.currentAddingBuildUnit = null
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e) {
                this.currentAddingBuildUnit && !this.currentAddingBuildUnit.isFull || (this.currentAddingBuildUnit = new et,
                this.buildUnits.push(this.currentAddingBuildUnit)),
                this.currentAddingBuildUnit.add(e)
            }
        }, {
            key: "startToDownloadRequestResources",
            value: function(e) {
                var t = this;
                if (0 !== t.requestDownloadResources.length && (this.downloadResProgess = (this.curDonwloadResIndex - this.currentDownloadResMap.size) / t.requestDownloadResources.length,
                e && e(this.downloadResProgess)),
                this.isStartedDonwloadResouces) {
                    if (this.curDonwloadResIndex === this.requestDownloadResources.length - 1 && 0 === this.currentDownloadResMap.size)
                        return this.downloadResProgess = 1,
                        void (e && e(this.downloadResProgess))
                } else {
                    t.requestDownloadResources;
                    this.isStartedDonwloadResouces = !0,
                    this.curDonwloadResIndex = 0,
                    this.currentDownloadResMap = new Map
                }
                if (0 === this.requestDownloadResources.length)
                    return this.downloadResProgess = 1,
                    void (e && e(this.downloadResProgess));
                if (!(this.curDonwloadResIndex > this.requestDownloadResources.length - 1) && 0 !== this.downloadResMaxCount - this.currentDownloadResMap.size) {
                    var i = this.requestDownloadResources[this.curDonwloadResIndex];
                    new Promise((function(e, t) {
                        i.registerBuildCallbackListener((function() {
                            e(i)
                        }
                        )),
                        i.build()
                    }
                    )).then((function(i) {
                        t.currentDownloadResMap.delete(i.id),
                        t.startToDownloadRequestResources(e)
                    }
                    )),
                    this.currentDownloadResMap.set(i.id, i),
                    this.curDonwloadResIndex++,
                    this.startToDownloadRequestResources(e)
                }
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , rt = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }();
    var nt = new (function() {
        function e(t) {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this.id = "empty",
            this.isBuilded = !1,
            this.buildCompleteCallbacks = [],
            this.buildCompleteCallbackParams = []
        }
        return rt(e, [{
            key: "build",
            value: function(e) {
                e && e(this),
                this.isBuilded = !0,
                this.notifyBuildCompleteListeners()
            }
        }, {
            key: "registerBuildCallbackListener",
            value: function(e, t) {
                this.buildCompleteCallbacks.push(e),
                this.buildCompleteCallbackParams.push(t)
            }
        }, {
            key: "notifyBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.buildCompleteCallbacks.length; e++) {
                    (0,
                    this.buildCompleteCallbacks[e])(this, this.buildCompleteCallbackParams[e])
                }
                this._alreadyCallback = !0
            }
        }]),
        e
    }())
      , ot = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }();
    var st = function() {
        function e() {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this._initParams(),
            this.resourceBuildManager = new it,
            this.objectsBuildUnitMap = new Map,
            this.objectsBuildUnits = [],
            this.modelsResourcesBuildUnits = [],
            this.textureResourcesBuildUnits = [],
            this._emptyResource = nt,
            this.currentBuildingResourcesUnit = null,
            this.maxResourcesUnitDownloadNumber = 200,
            this.awaitToNextBuildTime = 12e3
        }
        var t, i;
        return ot(e, [{
            key: "_initParams",
            value: function() {
                this.resourceBuildManager = null,
                this.world = null,
                this.objectsBuildUnitMap = null,
                this.objectsBuildUnits = null,
                this.readyResourceUnits = null,
                this.unreadyResourceUnits = null,
                this._stopUpdateBuild = null,
                this._buildingUnits = null,
                this.buildingProgressCallback = null,
                this._awaitToNextBuildTime = 0,
                this._resourceBuildUnitAwaitToNextBuildTime = null,
                this._resourceBuildUnitMaxBuildTime = null,
                this._emptyResource = null
            }
        }, {
            key: "build",
            value: function(e) {
                this.buildingProgressCallback = e,
                this.initRequestBuildUnits(),
                this._buildingUnits = [].concat(this.readyResourceUnits).concat(this.unreadyResourceUnits);
                for (var t = 0; t < this._buildingUnits.length; t++) {
                    var i = this._buildingUnits[t].resource;
                    null !== i && this.addResourceDownloadRequest(i)
                }
                this._stopUpdateBuild = !1,
                this._updateBuildUnit()
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e) {
                "TextureResource" === e.type ? ((0 === this.textureResourcesBuildUnits.length || this.textureResourcesBuildUnits[this.textureResourcesBuildUnits.length - 1].isFull) && this.textureResourcesBuildUnits.push(new et(this)),
                this.textureResourcesBuildUnits[this.textureResourcesBuildUnits.length - 1].add(e)) : ((0 === this.modelsResourcesBuildUnits.length || this.modelsResourcesBuildUnits[this.modelsResourcesBuildUnits.length - 1].isFull) && this.modelsResourcesBuildUnits.push(new et(this)),
                this.modelsResourcesBuildUnits[this.modelsResourcesBuildUnits.length - 1].add(e))
            }
        }, {
            key: "initRequestBuildUnits",
            value: function() {
                this.sortobjectsBuildUnits(),
                this.readyResourceUnits = [],
                this.unreadyResourceUnits = [];
                for (var e = 0; e < this.objectsBuildUnits.length; e++) {
                    var t = this.objectsBuildUnits[e]
                      , i = t.resource;
                    i && i.ready ? this.readyResourceUnits.push(t) : i && this.unreadyResourceUnits.push(t)
                }
            }
        }, {
            key: "sortobjectsBuildUnits",
            value: function() {
                for (var e = [], t = [], i = [], r = [], n = [], o = [], s = [], a = [], l = 0; l < this.objectsBuildUnits.length; l++) {
                    var u = this.objectsBuildUnits[l];
                    u.containByClassType("CombineStraightManualWall") ? e.push(u) : u.containByClassType("CombineRoof") ? o.push(u) : u.containByClassType("CombineModelWall") ? i.push(u) : u.containByClassType("CombinePlacementWall") ? r.push(u) : u.containByClassType("CombineFloor") ? s.push(u) : u.containByClassType("CombineCeiling") ? n.push(u) : u.containByClassType("CombineDoorOrWindow") ? a.push(u) : t.push(u)
                }
                this.objectsBuildUnits = [].concat(e).concat(o).concat(s).concat(n).concat(a).concat(i).concat(r).concat(t)
            }
        }, {
            key: "_updateBuildUnit",
            value: function() {
                if (0 !== this.textureResourcesBuildUnits.length || 0 !== this.modelsResourcesBuildUnits.length) {
                    var e = this;
                    this.currentBuildingResourcesUnit || (0 !== this.textureResourcesBuildUnits.length ? this.currentBuildingResourcesUnit = this.textureResourcesBuildUnits.shift() : 0 !== this.modelsResourcesBuildUnits.length && (this.currentBuildingResourcesUnit = this.modelsResourcesBuildUnits.shift())),
                    this.currentBuildingResourcesUnit.build((function() {
                        e._buildResourcesUnitToObjectsUnit()
                    }
                    ))
                } else
                    this._stopUpdateBuild || this.checkBuildComplete()
            }
        }, {
            key: "_buildResourcesUnitToObjectsUnit",
            value: (t = Qe.mark((function e() {
                var t, i, r, n;
                return Qe.wrap((function(e) {
                    for (; ; )
                        switch (e.prev = e.next) {
                        case 0:
                            i = (t = this).currentBuildingResourcesUnit.resources,
                            r = new Date;
                        case 3:
                            if (0 !== i.length) {
                                e.next = 10;
                                break
                            }
                            return t.currentBuildingResourcesUnit = null,
                            t._updateBuildUnit(),
                            e.abrupt("return");
                        case 10:
                            if (n = i.shift(),
                            t.objectsBuildUnitMap.get(n).build(),
                            !(new Date - r > this.awaitToNextBuildTime)) {
                                e.next = 16;
                                break
                            }
                            return e.next = 16,
                            this.awaitToNextBuild();
                        case 16:
                            this.checkBuildComplete();
                        case 17:
                            e.next = 3;
                            break;
                        case 19:
                        case "end":
                            return e.stop()
                        }
                }
                ), e, this)
            }
            )),
            i = function() {
                var e = t.apply(this, arguments);
                return new Promise((function(t, i) {
                    return function r(n, o) {
                        try {
                            var s = e[n](o)
                              , a = s.value
                        } catch (e) {
                            return void i(e)
                        }
                        if (!s.done)
                            return Promise.resolve(a).then((function(e) {
                                r("next", e)
                            }
                            ), (function(e) {
                                r("throw", e)
                            }
                            ));
                        t(a)
                    }("next")
                }
                ))
            }
            ,
            function() {
                return i.apply(this, arguments)
            }
            )
        }, {
            key: "checkBuildComplete",
            value: function() {
                for (var e = [], t = !0, i = 0; i < this.objectsBuildUnits.length; i++) {
                    var r = this.objectsBuildUnits[i];
                    r.isBuilded ? e.push(r) : t = !1
                }
                var n = null;
                0 === this.objectsBuildUnits.length ? (t = !0,
                n = 1) : n = e.length / this.objectsBuildUnits.length,
                t && this._clearUpdateBuildUnit(),
                this.buildingProgressCallback && this.buildingProgressCallback(n)
            }
        }, {
            key: "_clearUpdateBuildUnit",
            value: function() {
                if (this.objectsBuildUnits)
                    for (var e = 0; e < this.objectsBuildUnits.length; e++) {
                        this.objectsBuildUnits[e].clear()
                    }
                if (this.unreadyResourceUnits)
                    for (var t = 0; t < this.unreadyResourceUnits.length; t++) {
                        this.unreadyResourceUnits[t].clear()
                    }
                if (this.readyResourceUnits)
                    for (var i = 0; i < this.readyResourceUnits.length; i++) {
                        this.readyResourceUnits[i].clear()
                    }
                this.objectsBuildUnits = [],
                this.unreadyResourceUnits = [],
                this.readyResourceUnits = [],
                this.objectsBuildUnitMap.clear(),
                this._stopUpdateBuild = !0
            }
        }, {
            key: "awaitToNextBuild",
            value: function() {
                var e = this;
                return new Promise((function(t) {
                    setTimeout((function() {
                        t("resolved")
                    }
                    ), e._awaitToNextBuildTime)
                }
                ))
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                var t = this.world.findObjectByID(e);
                null != t && this.addObject(t)
            }
        }, {
            key: "disposeObject",
            value: function(e) {
                var t = this.world.findObjectByID(e);
                t && t.clearBuildMesh()
            }
        }, {
            key: "addObject",
            value: function(e) {
                this.addChildren(e);
                var t = e.resources;
                if (t.length > 0)
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        this.addSingleResourceObject(e, r)
                    }
                else
                    this.addSingleResourceObject(e, this._emptyResource)
            }
        }, {
            key: "addChildren",
            value: function(e) {
                for (var t = e.children, i = 0; i < t.length; i++) {
                    var r = t[i];
                    this.addObject(r)
                }
            }
        }, {
            key: "addSingleResourceObject",
            value: function(e, t) {
                if (t || null != (t = e.resource)) {
                    if (!this.objectsBuildUnitMap.has(t)) {
                        var i = new Ke(t);
                        this.objectsBuildUnits.push(i),
                        this.objectsBuildUnitMap.set(t, i)
                    }
                    this.objectsBuildUnitMap.get(t).add(e)
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.resourceBuildManager.clear(),
                this._clearUpdateBuildUnit(),
                this._initParams()
            }
        }]),
        e
    }()
      , at = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            var e, t = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""), i = new Array(36), r = 0;
            return function() {
                for (var n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }(),
        clamp: function(e, t, i) {
            return Math.max(t, Math.min(i, e))
        },
        euclideanModulo: function(e, t) {
            return (e % t + t) % t
        },
        mapLinear: function(e, t, i, r, n) {
            return r + (e - t) * (n - r) / (i - t)
        },
        lerp: function(e, t, i) {
            return (1 - i) * e + i * t
        },
        smoothstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * (3 - 2 * e)
        },
        smootherstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * e * (e * (6 * e - 15) + 10)
        },
        randInt: function(e, t) {
            return e + Math.floor(Math.random() * (t - e + 1))
        },
        randFloat: function(e, t) {
            return e + Math.random() * (t - e)
        },
        randFloatSpread: function(e) {
            return e * (.5 - Math.random())
        },
        degToRad: function(e) {
            return e * at.DEG2RAD
        },
        radToDeg: function(e) {
            return e * at.RAD2DEG
        },
        isPowerOfTwo: function(e) {
            return 0 == (e & e - 1) && 0 !== e
        },
        nearestPowerOfTwo: function(e) {
            return Math.pow(2, Math.round(Math.log(e) / Math.LN2))
        },
        nextPowerOfTwo: function(e) {
            return e--,
            e |= e >> 1,
            e |= e >> 2,
            e |= e >> 4,
            e |= e >> 8,
            e |= e >> 16,
            ++e
        }
    }
      , lt = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , ut = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , ct = function() {
        function e(t, i, r, n) {
            lt(this, e),
            this._x = t || 0,
            this._y = i || 0,
            this._z = r || 0,
            this._w = void 0 !== n ? n : 1
        }
        return ut(e, [{
            key: "slerp",
            value: function(e, t, i, r) {
                return i.copy(e).slerp(t, r)
            }
        }, {
            key: "slerpFlat",
            value: function(e, t, i, r, n, o, s) {
                var a = i[r + 0]
                  , l = i[r + 1]
                  , u = i[r + 2]
                  , c = i[r + 3]
                  , h = n[o + 0]
                  , p = n[o + 1]
                  , d = n[o + 2]
                  , f = n[o + 3];
                if (c !== f || a !== h || l !== p || u !== d) {
                    var m = 1 - s
                      , g = a * h + l * p + u * d + c * f
                      , v = g >= 0 ? 1 : -1
                      , y = 1 - g * g;
                    if (y > Number.EPSILON) {
                        var b = Math.sqrt(y)
                          , _ = Math.atan2(b, g * v);
                        m = Math.sin(m * _) / b,
                        s = Math.sin(s * _) / b
                    }
                    var x = s * v;
                    if (a = a * m + h * x,
                    l = l * m + p * x,
                    u = u * m + d * x,
                    c = c * m + f * x,
                    m === 1 - s) {
                        var E = 1 / Math.sqrt(a * a + l * l + u * u + c * c);
                        a *= E,
                        l *= E,
                        u *= E,
                        c *= E
                    }
                }
                e[t] = a,
                e[t + 1] = l,
                e[t + 2] = u,
                e[t + 3] = c
            }
        }, {
            key: "set",
            value: function(e, t, i, r) {
                return this._x = e,
                this._y = t,
                this._z = i,
                this._w = r,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this._x,this._y,this._z,this._w)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this._x = e.x,
                this._y = e.y,
                this._z = e.z,
                this._w = e.w,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromEuler",
            value: function(e, t) {
                if (!e || !e.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e.order
                  , s = Math.cos
                  , a = Math.sin
                  , l = s(i / 2)
                  , u = s(r / 2)
                  , c = s(n / 2)
                  , h = a(i / 2)
                  , p = a(r / 2)
                  , d = a(n / 2);
                return "XYZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "YXZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "ZXY" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "ZYX" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "YZX" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c - h * p * d) : "XZY" === o && (this._x = h * u * c - l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c + h * p * d),
                !1 !== t && this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromAxisAngle",
            value: function(e, t) {
                var i = t / 2
                  , r = Math.sin(i);
                return this._x = e.x * r,
                this._y = e.y * r,
                this._z = e.z * r,
                this._w = Math.cos(i),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromRotationMatrix",
            value: function(e) {
                var t, i = e.elements, r = i[0], n = i[4], o = i[8], s = i[1], a = i[5], l = i[9], u = i[2], c = i[6], h = i[10], p = r + a + h;
                return p > 0 ? (t = .5 / Math.sqrt(p + 1),
                this._w = .25 / t,
                this._x = (c - l) * t,
                this._y = (o - u) * t,
                this._z = (s - n) * t) : r > a && r > h ? (t = 2 * Math.sqrt(1 + r - a - h),
                this._w = (c - l) / t,
                this._x = .25 * t,
                this._y = (n + s) / t,
                this._z = (o + u) / t) : a > h ? (t = 2 * Math.sqrt(1 + a - r - h),
                this._w = (o - u) / t,
                this._x = (n + s) / t,
                this._y = .25 * t,
                this._z = (l + c) / t) : (t = 2 * Math.sqrt(1 + h - r - a),
                this._w = (s - n) / t,
                this._x = (o + u) / t,
                this._y = (l + c) / t,
                this._z = .25 * t),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromUnitVectors",
            value: function(e, t) {
                var i, r = new ht;
                return void 0 === r && (r = new ht),
                (i = e.dot(t) + 1) < 1e-6 ? (i = 0,
                Math.abs(e.x) > Math.abs(e.z) ? r.set(-e.y, e.x, 0) : r.set(0, -e.z, e.y)) : r.crossVectors(e, t),
                this._x = r.x,
                this._y = r.y,
                this._z = r.z,
                this._w = i,
                this.normalize()
            }
        }, {
            key: "inverse",
            value: function() {
                return this.conjugate().normalize()
            }
        }, {
            key: "conjugate",
            value: function() {
                return this._x *= -1,
                this._y *= -1,
                this._z *= -1,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }
        }, {
            key: "normalize",
            value: function() {
                var e = this.length();
                return 0 === e ? (this._x = 0,
                this._y = 0,
                this._z = 0,
                this._w = 1) : (e = 1 / e,
                this._x = this._x * e,
                this._y = this._y * e,
                this._z = this._z * e,
                this._w = this._w * e),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e)
            }
        }, {
            key: "premultiply",
            value: function(e) {
                return this.multiplyQuaternions(e, this)
            }
        }, {
            key: "multiplyQuaternions",
            value: function(e, t) {
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e._w
                  , s = t._x
                  , a = t._y
                  , l = t._z
                  , u = t._w;
                return this._x = i * u + o * s + r * l - n * a,
                this._y = r * u + o * a + n * s - i * l,
                this._z = n * u + o * l + i * a - r * s,
                this._w = o * u - i * s - r * a - n * l,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "slerp",
            value: function(e, t) {
                if (0 === t)
                    return this;
                if (1 === t)
                    return this.copy(e);
                var i = this._x
                  , r = this._y
                  , n = this._z
                  , o = this._w
                  , s = o * e._w + i * e._x + r * e._y + n * e._z;
                if (s < 0 ? (this._w = -e._w,
                this._x = -e._x,
                this._y = -e._y,
                this._z = -e._z,
                s = -s) : this.copy(e),
                s >= 1)
                    return this._w = o,
                    this._x = i,
                    this._y = r,
                    this._z = n,
                    this;
                var a = Math.sqrt(1 - s * s);
                if (Math.abs(a) < .001)
                    return this._w = .5 * (o + this._w),
                    this._x = .5 * (i + this._x),
                    this._y = .5 * (r + this._y),
                    this._z = .5 * (n + this._z),
                    this;
                var l = Math.atan2(a, s)
                  , u = Math.sin((1 - t) * l) / a
                  , c = Math.sin(t * l) / a;
                return this._w = o * u + this._w * c,
                this._x = i * u + this._x * c,
                this._y = r * u + this._y * c,
                this._z = n * u + this._z * c,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this._x = e[t],
                this._y = e[t + 1],
                this._z = e[t + 2],
                this._w = e[t + 3],
                this.onChangeCallback(),
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this._x,
                e[t + 1] = this._y,
                e[t + 2] = this._z,
                e[t + 3] = this._w,
                e
            }
        }, {
            key: "onChange",
            value: function(e) {
                return this.onChangeCallback = e,
                this
            }
        }, {
            key: "onChangeCallback",
            value: function() {}
        }, {
            key: "x",
            get: function() {
                return this._x
            },
            set: function(e) {
                this._x = e,
                this.onChangeCallback()
            }
        }, {
            key: "y",
            get: function() {
                return this._y
            },
            set: function(e) {
                this._y = e,
                this.onChangeCallback()
            }
        }, {
            key: "z",
            get: function() {
                return this._z
            },
            set: function(e) {
                this._z = e,
                this.onChangeCallback()
            }
        }, {
            key: "w",
            get: function() {
                return this._w
            },
            set: function(e) {
                this._w = e,
                this.onChangeCallback()
            }
        }]),
        e
    }()
      , ht = function() {
        function e(t, i, r) {
            lt(this, e),
            this.x = t || 0,
            this.y = i || 0,
            this.z = r || 0,
            this.isVector3 = !0
        }
        return ut(e, [{
            key: "set",
            value: function(e, t, i) {
                return this.x = e,
                this.y = t,
                this.z = i,
                this
            }
        }, {
            key: "setScalar",
            value: function(e) {
                return this.x = e,
                this.y = e,
                this.z = e,
                this
            }
        }, {
            key: "setX",
            value: function(e) {
                return this.x = e,
                this
            }
        }, {
            key: "setY",
            value: function(e) {
                return this.y = e,
                this
            }
        }, {
            key: "setZ",
            value: function(e) {
                return this.z = e,
                this
            }
        }, {
            key: "setComponent",
            value: function(e, t) {
                switch (e) {
                case 0:
                    this.x = t;
                    break;
                case 1:
                    this.y = t;
                    break;
                case 2:
                    this.z = t;
                    break;
                default:
                    throw new Error("index is out of range: " + e)
                }
                return this
            }
        }, {
            key: "getComponent",
            value: function(e) {
                switch (e) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + e)
                }
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this.x,this.y,this.z)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.x = e.x,
                this.y = e.y,
                this.z = e.z,
                this
            }
        }, {
            key: "add",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(e, t)) : (this.x += e.x,
                this.y += e.y,
                this.z += e.z,
                this)
            }
        }, {
            key: "addScalar",
            value: function(e) {
                return this.x += e,
                this.y += e,
                this.z += e,
                this
            }
        }, {
            key: "addVectors",
            value: function(e, t) {
                return this.x = e.x + t.x,
                this.y = e.y + t.y,
                this.z = e.z + t.z,
                this
            }
        }, {
            key: "addScaledVector",
            value: function(e, t) {
                return this.x += e.x * t,
                this.y += e.y * t,
                this.z += e.z * t,
                this
            }
        }, {
            key: "sub",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(e, t)) : (this.x -= e.x,
                this.y -= e.y,
                this.z -= e.z,
                this)
            }
        }, {
            key: "subScalar",
            value: function(e) {
                return this.x -= e,
                this.y -= e,
                this.z -= e,
                this
            }
        }, {
            key: "subVectors",
            value: function(e, t) {
                return this.x = e.x - t.x,
                this.y = e.y - t.y,
                this.z = e.z - t.z,
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                this.multiplyVectors(e, t)) : (this.x *= e.x,
                this.y *= e.y,
                this.z *= e.z,
                this)
            }
        }, {
            key: "multiplyScalar",
            value: function(e) {
                return this.x *= e,
                this.y *= e,
                this.z *= e,
                this
            }
        }, {
            key: "multiplyVectors",
            value: function(e, t) {
                return this.x = e.x * t.x,
                this.y = e.y * t.y,
                this.z = e.z * t.z,
                this
            }
        }, {
            key: "applyEuler",
            value: function() {
                var e = new ct;
                return function(t) {
                    return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                    this.applyQuaternion(e.setFromEuler(t))
                }()
            }
        }, {
            key: "applyAxisAngle",
            value: function() {
                var e = new ct;
                return function(t, i) {
                    return this.applyQuaternion(e.setFromAxisAngle(t, i))
                }()
            }
        }, {
            key: "applyMatrix3",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[3] * i + n[6] * r,
                this.y = n[1] * t + n[4] * i + n[7] * r,
                this.z = n[2] * t + n[5] * i + n[8] * r,
                this
            }
        }, {
            key: "applyQuaternion",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.x
                  , o = e.y
                  , s = e.z
                  , a = e.w
                  , l = a * t + o * r - s * i
                  , u = a * i + s * t - n * r
                  , c = a * r + n * i - o * t
                  , h = -n * t - o * i - s * r;
                return this.x = l * a + h * -n + u * -s - c * -o,
                this.y = u * a + h * -o + c * -n - l * -s,
                this.z = c * a + h * -s + l * -o - u * -n,
                this
            }
        }, {
            key: "transformDirection",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[4] * i + n[8] * r,
                this.y = n[1] * t + n[5] * i + n[9] * r,
                this.z = n[2] * t + n[6] * i + n[10] * r,
                this.normalize()
            }
        }, {
            key: "divide",
            value: function(e) {
                return this.x /= e.x,
                this.y /= e.y,
                this.z /= e.z,
                this
            }
        }, {
            key: "divideScalar",
            value: function(e) {
                return this.multiplyScalar(1 / e)
            }
        }, {
            key: "min",
            value: function(e) {
                return this.x = Math.min(this.x, e.x),
                this.y = Math.min(this.y, e.y),
                this.z = Math.min(this.z, e.z),
                this
            }
        }, {
            key: "max",
            value: function(e) {
                return this.x = Math.max(this.x, e.x),
                this.y = Math.max(this.y, e.y),
                this.z = Math.max(this.z, e.z),
                this
            }
        }, {
            key: "clamp",
            value: function(e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)),
                this.y = Math.max(e.y, Math.min(t.y, this.y)),
                this.z = Math.max(e.z, Math.min(t.z, this.z)),
                this
            }
        }, {
            key: "clampScalar",
            value: function() {
                var t = new e
                  , i = new e;
                return function(e, r) {
                    return t.set(e, e, e),
                    i.set(r, r, r),
                    this.clamp(t, i)
                }()
            }
        }, {
            key: "clampLength",
            value: function(e, t) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)))
            }
        }, {
            key: "floor",
            value: function() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this
            }
        }, {
            key: "ceil",
            value: function() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this
            }
        }, {
            key: "round",
            value: function() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this
            }
        }, {
            key: "roundToZero",
            value: function() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this
            }
        }, {
            key: "negate",
            value: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this.x * e.x + this.y * e.y + this.z * e.z
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }
        }, {
            key: "lengthManhattan",
            value: function() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }
        }, {
            key: "normalize",
            value: function() {
                return this.divideScalar(this.length() || 1)
            }
        }, {
            key: "setLength",
            value: function(e) {
                return this.normalize().multiplyScalar(e)
            }
        }, {
            key: "lerp",
            value: function(e, t) {
                return this.x += (e.x - this.x) * t,
                this.y += (e.y - this.y) * t,
                this.z += (e.z - this.z) * t,
                this
            }
        }, {
            key: "lerpVectors",
            value: function(e, t, i) {
                return this.subVectors(t, e).multiplyScalar(i).add(e)
            }
        }, {
            key: "cross",
            value: function(e, t) {
                if (void 0 !== t)
                    return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                    this.crossVectors(e, t);
                var i = this.x
                  , r = this.y
                  , n = this.z;
                return this.x = r * e.z - n * e.y,
                this.y = n * e.x - i * e.z,
                this.z = i * e.y - r * e.x,
                this
            }
        }, {
            key: "crossVectors",
            value: function(e, t) {
                var i = e.x
                  , r = e.y
                  , n = e.z
                  , o = t.x
                  , s = t.y
                  , a = t.z;
                return this.x = r * a - n * s,
                this.y = n * o - i * a,
                this.z = i * s - r * o,
                this
            }
        }, {
            key: "projectOnVector",
            value: function(e) {
                var t = e.dot(this) / e.lengthSq();
                return this.copy(e).multiplyScalar(t)
            }
        }, {
            key: "projectOnPlane",
            value: function() {
                var t = new e;
                return function(e) {
                    return t.copy(this).projectOnVector(e),
                    this.sub(t)
                }
            }
        }, {
            key: "reflect",
            value: function() {
                var t = new e;
                return function(e) {
                    return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
                }()
            }
        }, {
            key: "angleTo",
            value: function(e) {
                var t = this.dot(e) / Math.sqrt(this.lengthSq() * e.lengthSq());
                return Math.acos(at.clamp(t, -1, 1))
            }
        }, {
            key: "distanceTo",
            value: function(e) {
                return Math.sqrt(this.distanceToSquared(e))
            }
        }, {
            key: "distanceToSquared",
            value: function(e) {
                var t = this.x - e.x
                  , i = this.y - e.y
                  , r = this.z - e.z;
                return t * t + i * i + r * r
            }
        }, {
            key: "distanceToManhattan",
            value: function(e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z)
            }
        }, {
            key: "setFromSpherical",
            value: function(e) {
                var t = Math.sin(e.phi) * e.radius;
                return this.x = t * Math.sin(e.theta),
                this.y = Math.cos(e.phi) * e.radius,
                this.z = t * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromCylindrical",
            value: function(e) {
                return this.x = e.radius * Math.sin(e.theta),
                this.y = e.y,
                this.z = e.radius * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromMatrixPosition",
            value: function(e) {
                var t = e.elements;
                return this.x = t[12],
                this.y = t[13],
                this.z = t[14],
                this
            }
        }, {
            key: "setFromMatrixScale",
            value: function(e) {
                var t = this.setFromMatrixColumn(e, 0).length()
                  , i = this.setFromMatrixColumn(e, 1).length()
                  , r = this.setFromMatrixColumn(e, 2).length();
                return this.x = t,
                this.y = i,
                this.z = r,
                this
            }
        }, {
            key: "setFromMatrixColumn",
            value: function(e, t) {
                return this.fromArray(e.elements, 4 * t)
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.x === this.x && e.y === this.y && e.z === this.z
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this.x = e[t],
                this.y = e[t + 1],
                this.z = e[t + 2],
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this.x,
                e[t + 1] = this.y,
                e[t + 2] = this.z,
                e
            }
        }, {
            key: "fromBufferAttribute",
            value: function(e, t, i) {
                return void 0 !== i && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                this.x = e.getX(t),
                this.y = e.getY(t),
                this.z = e.getZ(t),
                this
            }
        }]),
        e
    }()
      , pt = function() {
        function e(t, i) {
            lt(this, e),
            this.isBox3 = !0,
            this.min = void 0 !== t ? t : new ht(1 / 0,1 / 0,1 / 0),
            this.max = void 0 !== i ? i : new ht(-1 / 0,-1 / 0,-1 / 0)
        }
        return ut(e, [{
            key: "set",
            value: function(e, t) {
                return this.min.copy(e),
                this.max.copy(t),
                this
            }
        }, {
            key: "setFromArray",
            value: function(e) {
                for (var t = 1 / 0, i = 1 / 0, r = 1 / 0, n = -1 / 0, o = -1 / 0, s = -1 / 0, a = 0, l = e.length; a < l; a += 3) {
                    var u = e[a]
                      , c = e[a + 1]
                      , h = e[a + 2];
                    u < t && (t = u),
                    c < i && (i = c),
                    h < r && (r = h),
                    u > n && (n = u),
                    c > o && (o = c),
                    h > s && (s = h)
                }
                return this.min.set(t, i, r),
                this.max.set(n, o, s),
                this
            }
        }, {
            key: "setFromBufferAttribute",
            value: function(e) {
                for (var t = 1 / 0, i = 1 / 0, r = 1 / 0, n = -1 / 0, o = -1 / 0, s = -1 / 0, a = 0, l = e.count; a < l; a++) {
                    var u = e.getX(a)
                      , c = e.getY(a)
                      , h = e.getZ(a);
                    u < t && (t = u),
                    c < i && (i = c),
                    h < r && (r = h),
                    u > n && (n = u),
                    c > o && (o = c),
                    h > s && (s = h)
                }
                return this.min.set(t, i, r),
                this.max.set(n, o, s),
                this
            }
        }, {
            key: "setFromPoints",
            value: function(e) {
                this.makeEmpty();
                for (var t = 0, i = e.length; t < i; t++)
                    this.expandByPoint(e[t]);
                return this
            }
        }, {
            key: "setFromCenterAndSize",
            value: function(e, t) {
                var i = (new ht).copy(t).multiplyScalar(.5);
                return this.min.copy(e).sub(i),
                this.max.copy(e).add(i),
                this
            }
        }, {
            key: "setFromObject",
            value: function(e) {
                return this.makeEmpty(),
                this.expandByObject(e)
            }
        }, {
            key: "clone",
            value: function() {
                return (new this.constructor).copy(this)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.min.copy(e.min),
                this.max.copy(e.max),
                this
            }
        }, {
            key: "makeEmpty",
            value: function() {
                return this.min.x = this.min.y = this.min.z = 1 / 0,
                this.max.x = this.max.y = this.max.z = -1 / 0,
                this
            }
        }, {
            key: "isEmpty",
            value: function() {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            }
        }, {
            key: "getCenter",
            value: function(e) {
                var t = e || new ht;
                return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
            }
        }, {
            key: "getSize",
            value: function(e) {
                var t = e || new ht;
                return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
            }
        }, {
            key: "expandByPoint",
            value: function(e) {
                return this.min.min(e),
                this.max.max(e),
                this
            }
        }, {
            key: "expandByVector",
            value: function(e) {
                return this.min.sub(e),
                this.max.add(e),
                this
            }
        }, {
            key: "expandByScalar",
            value: function(e) {
                return this.min.addScalar(-e),
                this.max.addScalar(e),
                this
            }
        }, {
            key: "expandByObject",
            value: function(e) {
                var t = new ht
                  , i = this;
                return e.updateMatrixWorld(!0),
                e.traverse((function(e) {
                    var r, n, o = e.geometry;
                    if (void 0 !== o)
                        if (o.isGeometry) {
                            var s = o.vertices;
                            for (r = 0,
                            n = s.length; r < n; r++)
                                t.copy(s[r]),
                                t.applyMatrix4(e.matrixWorld),
                                i.expandByPoint(t)
                        } else if (o.isBufferGeometry) {
                            var a = o.attributes.position;
                            if (void 0 !== a)
                                for (r = 0,
                                n = a.count; r < n; r++)
                                    t.fromBufferAttribute(a, r).applyMatrix4(e.matrixWorld),
                                    i.expandByPoint(t)
                        }
                }
                )),
                this
            }
        }, {
            key: "containsPoint",
            value: function(e) {
                return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z)
            }
        }, {
            key: "containsBox",
            value: function(e) {
                return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z
            }
        }, {
            key: "getParameter",
            value: function(e, t) {
                return (t || new ht).set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z))
            }
        }, {
            key: "intersectsBox",
            value: function(e) {
                return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z)
            }
        }, {
            key: "intersectsPlane",
            value: function(e) {
                var t, i;
                return e.normal.x > 0 ? (t = e.normal.x * this.min.x,
                i = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x,
                i = e.normal.x * this.min.x),
                e.normal.y > 0 ? (t += e.normal.y * this.min.y,
                i += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y,
                i += e.normal.y * this.min.y),
                e.normal.z > 0 ? (t += e.normal.z * this.min.z,
                i += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z,
                i += e.normal.z * this.min.z),
                t <= e.constant && i >= e.constant
            }
        }, {
            key: "clampPoint",
            value: function(e, t) {
                return (t || new ht).copy(e).clamp(this.min, this.max)
            }
        }, {
            key: "distanceToPoint",
            value: function(e) {
                return (new ht).copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }, {
            key: "intersect",
            value: function(e) {
                return this.min.max(e.min),
                this.max.min(e.max),
                this.isEmpty() && this.makeEmpty(),
                this
            }
        }, {
            key: "union",
            value: function(e) {
                return this.min.min(e.min),
                this.max.max(e.max),
                this
            }
        }, {
            key: "applyMatrix4",
            value: function(e) {
                var t = [new ht, new ht, new ht, new ht, new ht, new ht, new ht, new ht];
                return this.isEmpty() || (t[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
                t[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
                t[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
                t[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
                t[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
                t[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
                t[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
                t[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
                this.setFromPoints(t)),
                this
            }
        }, {
            key: "translate",
            value: function(e) {
                return this.min.add(e),
                this.max.add(e),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.min.equals(this.min) && e.max.equals(this.max)
            }
        }]),
        e
    }();
    function dt() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
        arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
    }
    Object.assign(dt.prototype, {
        isMatrix4: !0,
        set: function(e, t, i, r, n, o, s, a, l, u, c, h, p, d, f, m) {
            var g = this.elements;
            return g[0] = e,
            g[4] = t,
            g[8] = i,
            g[12] = r,
            g[1] = n,
            g[5] = o,
            g[9] = s,
            g[13] = a,
            g[2] = l,
            g[6] = u,
            g[10] = c,
            g[14] = h,
            g[3] = p,
            g[7] = d,
            g[11] = f,
            g[15] = m,
            this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        clone: function() {
            return (new dt).fromArray(this.elements)
        },
        copy: function(e) {
            var t = this.elements
              , i = e.elements;
            return t[0] = i[0],
            t[1] = i[1],
            t[2] = i[2],
            t[3] = i[3],
            t[4] = i[4],
            t[5] = i[5],
            t[6] = i[6],
            t[7] = i[7],
            t[8] = i[8],
            t[9] = i[9],
            t[10] = i[10],
            t[11] = i[11],
            t[12] = i[12],
            t[13] = i[13],
            t[14] = i[14],
            t[15] = i[15],
            this
        },
        copyPosition: function(e) {
            var t = this.elements
              , i = e.elements;
            return t[12] = i[12],
            t[13] = i[13],
            t[14] = i[14],
            this
        },
        extractBasis: function(e, t, i) {
            return e.setFromMatrixColumn(this, 0),
            t.setFromMatrixColumn(this, 1),
            i.setFromMatrixColumn(this, 2),
            this
        },
        makeBasis: function(e, t, i) {
            return this.set(e.x, t.x, i.x, 0, e.y, t.y, i.y, 0, e.z, t.z, i.z, 0, 0, 0, 0, 1),
            this
        },
        extractRotation: function() {
            var e = new ht;
            return function(t) {
                var i = this.elements
                  , r = t.elements
                  , n = 1 / e.setFromMatrixColumn(t, 0).length()
                  , o = 1 / e.setFromMatrixColumn(t, 1).length()
                  , s = 1 / e.setFromMatrixColumn(t, 2).length();
                return i[0] = r[0] * n,
                i[1] = r[1] * n,
                i[2] = r[2] * n,
                i[4] = r[4] * o,
                i[5] = r[5] * o,
                i[6] = r[6] * o,
                i[8] = r[8] * s,
                i[9] = r[9] * s,
                i[10] = r[10] * s,
                this
            }
        }(),
        makeRotationFromEuler: function(e) {
            e && e.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var t = this.elements
              , i = e.x
              , r = e.y
              , n = e.z
              , o = Math.cos(i)
              , s = Math.sin(i)
              , a = Math.cos(r)
              , l = Math.sin(r)
              , u = Math.cos(n)
              , c = Math.sin(n);
            if ("XYZ" === e.order) {
                var h = o * u
                  , p = o * c
                  , d = s * u
                  , f = s * c;
                t[0] = a * u,
                t[4] = -a * c,
                t[8] = l,
                t[1] = p + d * l,
                t[5] = h - f * l,
                t[9] = -s * a,
                t[2] = f - h * l,
                t[6] = d + p * l,
                t[10] = o * a
            } else if ("YXZ" === e.order) {
                var m = a * u
                  , g = a * c
                  , v = l * u
                  , y = l * c;
                t[0] = m + y * s,
                t[4] = v * s - g,
                t[8] = o * l,
                t[1] = o * c,
                t[5] = o * u,
                t[9] = -s,
                t[2] = g * s - v,
                t[6] = y + m * s,
                t[10] = o * a
            } else if ("ZXY" === e.order) {
                m = a * u,
                g = a * c,
                v = l * u,
                y = l * c;
                t[0] = m - y * s,
                t[4] = -o * c,
                t[8] = v + g * s,
                t[1] = g + v * s,
                t[5] = o * u,
                t[9] = y - m * s,
                t[2] = -o * l,
                t[6] = s,
                t[10] = o * a
            } else if ("ZYX" === e.order) {
                h = o * u,
                p = o * c,
                d = s * u,
                f = s * c;
                t[0] = a * u,
                t[4] = d * l - p,
                t[8] = h * l + f,
                t[1] = a * c,
                t[5] = f * l + h,
                t[9] = p * l - d,
                t[2] = -l,
                t[6] = s * a,
                t[10] = o * a
            } else if ("YZX" === e.order) {
                var b = o * a
                  , _ = o * l
                  , x = s * a
                  , E = s * l;
                t[0] = a * u,
                t[4] = E - b * c,
                t[8] = x * c + _,
                t[1] = c,
                t[5] = o * u,
                t[9] = -s * u,
                t[2] = -l * u,
                t[6] = _ * c + x,
                t[10] = b - E * c
            } else if ("XZY" === e.order) {
                b = o * a,
                _ = o * l,
                x = s * a,
                E = s * l;
                t[0] = a * u,
                t[4] = -c,
                t[8] = l * u,
                t[1] = b * c + E,
                t[5] = o * u,
                t[9] = _ * c - x,
                t[2] = x * c - _,
                t[6] = s * u,
                t[10] = E * c + b
            }
            return t[3] = 0,
            t[7] = 0,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        },
        makeRotationFromQuaternion: function(e) {
            var t = this.elements
              , i = e._x
              , r = e._y
              , n = e._z
              , o = e._w
              , s = i + i
              , a = r + r
              , l = n + n
              , u = i * s
              , c = i * a
              , h = i * l
              , p = r * a
              , d = r * l
              , f = n * l
              , m = o * s
              , g = o * a
              , v = o * l;
            return t[0] = 1 - (p + f),
            t[4] = c - v,
            t[8] = h + g,
            t[1] = c + v,
            t[5] = 1 - (u + f),
            t[9] = d - m,
            t[2] = h - g,
            t[6] = d + m,
            t[10] = 1 - (u + p),
            t[3] = 0,
            t[7] = 0,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        },
        lookAt: function() {
            var e = new ht
              , t = new ht
              , i = new ht;
            return function(r, n, o) {
                var s = this.elements;
                return i.subVectors(r, n),
                0 === i.lengthSq() && (i.z = 1),
                i.normalize(),
                e.crossVectors(o, i),
                0 === e.lengthSq() && (1 === Math.abs(o.z) ? i.x += 1e-4 : i.z += 1e-4,
                i.normalize(),
                e.crossVectors(o, i)),
                e.normalize(),
                t.crossVectors(i, e),
                s[0] = e.x,
                s[4] = t.x,
                s[8] = i.x,
                s[1] = e.y,
                s[5] = t.y,
                s[9] = i.y,
                s[2] = e.z,
                s[6] = t.z,
                s[10] = i.z,
                this
            }
        }(),
        multiply: function(e, t) {
            return void 0 !== t ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
            this.multiplyMatrices(e, t)) : this.multiplyMatrices(this, e)
        },
        premultiply: function(e) {
            return this.multiplyMatrices(e, this)
        },
        multiplyMatrices: function(e, t) {
            var i = e.elements
              , r = t.elements
              , n = this.elements
              , o = i[0]
              , s = i[4]
              , a = i[8]
              , l = i[12]
              , u = i[1]
              , c = i[5]
              , h = i[9]
              , p = i[13]
              , d = i[2]
              , f = i[6]
              , m = i[10]
              , g = i[14]
              , v = i[3]
              , y = i[7]
              , b = i[11]
              , _ = i[15]
              , x = r[0]
              , E = r[4]
              , w = r[8]
              , T = r[12]
              , M = r[1]
              , C = r[5]
              , S = r[9]
              , j = r[13]
              , P = r[2]
              , R = r[6]
              , D = r[10]
              , A = r[14]
              , k = r[3]
              , O = r[7]
              , B = r[11]
              , F = r[15];
            return n[0] = o * x + s * M + a * P + l * k,
            n[4] = o * E + s * C + a * R + l * O,
            n[8] = o * w + s * S + a * D + l * B,
            n[12] = o * T + s * j + a * A + l * F,
            n[1] = u * x + c * M + h * P + p * k,
            n[5] = u * E + c * C + h * R + p * O,
            n[9] = u * w + c * S + h * D + p * B,
            n[13] = u * T + c * j + h * A + p * F,
            n[2] = d * x + f * M + m * P + g * k,
            n[6] = d * E + f * C + m * R + g * O,
            n[10] = d * w + f * S + m * D + g * B,
            n[14] = d * T + f * j + m * A + g * F,
            n[3] = v * x + y * M + b * P + _ * k,
            n[7] = v * E + y * C + b * R + _ * O,
            n[11] = v * w + y * S + b * D + _ * B,
            n[15] = v * T + y * j + b * A + _ * F,
            this
        },
        multiplyScalar: function(e) {
            var t = this.elements;
            return t[0] *= e,
            t[4] *= e,
            t[8] *= e,
            t[12] *= e,
            t[1] *= e,
            t[5] *= e,
            t[9] *= e,
            t[13] *= e,
            t[2] *= e,
            t[6] *= e,
            t[10] *= e,
            t[14] *= e,
            t[3] *= e,
            t[7] *= e,
            t[11] *= e,
            t[15] *= e,
            this
        },
        applyToBufferAttribute: function() {
            var e = new ht;
            return function(t) {
                for (var i = 0, r = t.count; i < r; i++)
                    e.x = t.getX(i),
                    e.y = t.getY(i),
                    e.z = t.getZ(i),
                    e.applyMatrix4(this),
                    t.setXYZ(i, e.x, e.y, e.z);
                return t
            }
        }(),
        determinant: function() {
            var e = this.elements
              , t = e[0]
              , i = e[4]
              , r = e[8]
              , n = e[12]
              , o = e[1]
              , s = e[5]
              , a = e[9]
              , l = e[13]
              , u = e[2]
              , c = e[6]
              , h = e[10]
              , p = e[14];
            return e[3] * (+n * a * c - r * l * c - n * s * h + i * l * h + r * s * p - i * a * p) + e[7] * (+t * a * p - t * l * h + n * o * h - r * o * p + r * l * u - n * a * u) + e[11] * (+t * l * c - t * s * p - n * o * c + i * o * p + n * s * u - i * l * u) + e[15] * (-r * s * u - t * a * c + t * s * h + r * o * c - i * o * h + i * a * u)
        },
        transpose: function() {
            var e, t = this.elements;
            return e = t[1],
            t[1] = t[4],
            t[4] = e,
            e = t[2],
            t[2] = t[8],
            t[8] = e,
            e = t[6],
            t[6] = t[9],
            t[9] = e,
            e = t[3],
            t[3] = t[12],
            t[12] = e,
            e = t[7],
            t[7] = t[13],
            t[13] = e,
            e = t[11],
            t[11] = t[14],
            t[14] = e,
            this
        },
        setPosition: function(e) {
            var t = this.elements;
            return t[12] = e.x,
            t[13] = e.y,
            t[14] = e.z,
            this
        },
        getInverse: function(e, t) {
            var i = this.elements
              , r = e.elements
              , n = r[0]
              , o = r[1]
              , s = r[2]
              , a = r[3]
              , l = r[4]
              , u = r[5]
              , c = r[6]
              , h = r[7]
              , p = r[8]
              , d = r[9]
              , f = r[10]
              , m = r[11]
              , g = r[12]
              , v = r[13]
              , y = r[14]
              , b = r[15]
              , _ = d * y * h - v * f * h + v * c * m - u * y * m - d * c * b + u * f * b
              , x = g * f * h - p * y * h - g * c * m + l * y * m + p * c * b - l * f * b
              , E = p * v * h - g * d * h + g * u * m - l * v * m - p * u * b + l * d * b
              , w = g * d * c - p * v * c - g * u * f + l * v * f + p * u * y - l * d * y
              , T = n * _ + o * x + s * E + a * w;
            if (0 === T) {
                var M = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === t)
                    throw new Error(M);
                return console.warn(M),
                this.identity()
            }
            var C = 1 / T;
            return i[0] = _ * C,
            i[1] = (v * f * a - d * y * a - v * s * m + o * y * m + d * s * b - o * f * b) * C,
            i[2] = (u * y * a - v * c * a + v * s * h - o * y * h - u * s * b + o * c * b) * C,
            i[3] = (d * c * a - u * f * a - d * s * h + o * f * h + u * s * m - o * c * m) * C,
            i[4] = x * C,
            i[5] = (p * y * a - g * f * a + g * s * m - n * y * m - p * s * b + n * f * b) * C,
            i[6] = (g * c * a - l * y * a - g * s * h + n * y * h + l * s * b - n * c * b) * C,
            i[7] = (l * f * a - p * c * a + p * s * h - n * f * h - l * s * m + n * c * m) * C,
            i[8] = E * C,
            i[9] = (g * d * a - p * v * a - g * o * m + n * v * m + p * o * b - n * d * b) * C,
            i[10] = (l * v * a - g * u * a + g * o * h - n * v * h - l * o * b + n * u * b) * C,
            i[11] = (p * u * a - l * d * a - p * o * h + n * d * h + l * o * m - n * u * m) * C,
            i[12] = w * C,
            i[13] = (p * v * s - g * d * s + g * o * f - n * v * f - p * o * y + n * d * y) * C,
            i[14] = (g * u * s - l * v * s - g * o * c + n * v * c + l * o * y - n * u * y) * C,
            i[15] = (l * d * s - p * u * s + p * o * c - n * d * c - l * o * f + n * u * f) * C,
            this
        },
        scale: function(e) {
            var t = this.elements
              , i = e.x
              , r = e.y
              , n = e.z;
            return t[0] *= i,
            t[4] *= r,
            t[8] *= n,
            t[1] *= i,
            t[5] *= r,
            t[9] *= n,
            t[2] *= i,
            t[6] *= r,
            t[10] *= n,
            t[3] *= i,
            t[7] *= r,
            t[11] *= n,
            this
        },
        getMaxScaleOnAxis: function() {
            var e = this.elements
              , t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2]
              , i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6]
              , r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
            return Math.sqrt(Math.max(t, i, r))
        },
        makeTranslation: function(e, t, i) {
            return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, i, 0, 0, 0, 1),
            this
        },
        makeRotationX: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(1, 0, 0, 0, 0, t, -i, 0, 0, i, t, 0, 0, 0, 0, 1),
            this
        },
        makeRotationY: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(t, 0, i, 0, 0, 1, 0, 0, -i, 0, t, 0, 0, 0, 0, 1),
            this
        },
        makeRotationZ: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(t, -i, 0, 0, i, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        makeRotationAxis: function(e, t) {
            var i = Math.cos(t)
              , r = Math.sin(t)
              , n = 1 - i
              , o = e.x
              , s = e.y
              , a = e.z
              , l = n * o
              , u = n * s;
            return this.set(l * o + i, l * s - r * a, l * a + r * s, 0, l * s + r * a, u * s + i, u * a - r * o, 0, l * a - r * s, u * a + r * o, n * a * a + i, 0, 0, 0, 0, 1),
            this
        },
        makeScale: function(e, t, i) {
            return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, i, 0, 0, 0, 0, 1),
            this
        },
        makeShear: function(e, t, i) {
            return this.set(1, t, i, 0, e, 1, i, 0, e, t, 1, 0, 0, 0, 0, 1),
            this
        },
        compose: function(e, t, i) {
            return this.makeRotationFromQuaternion(t),
            this.scale(i),
            this.setPosition(e),
            this
        },
        decompose: function() {
            var e = new ht
              , t = new dt;
            return function(i, r, n) {
                var o = this.elements
                  , s = e.set(o[0], o[1], o[2]).length()
                  , a = e.set(o[4], o[5], o[6]).length()
                  , l = e.set(o[8], o[9], o[10]).length();
                this.determinant() < 0 && (s = -s),
                i.x = o[12],
                i.y = o[13],
                i.z = o[14],
                t.copy(this);
                var u = 1 / s
                  , c = 1 / a
                  , h = 1 / l;
                return t.elements[0] *= u,
                t.elements[1] *= u,
                t.elements[2] *= u,
                t.elements[4] *= c,
                t.elements[5] *= c,
                t.elements[6] *= c,
                t.elements[8] *= h,
                t.elements[9] *= h,
                t.elements[10] *= h,
                r.setFromRotationMatrix(t),
                n.x = s,
                n.y = a,
                n.z = l,
                this
            }
        }(),
        makePerspective: function(e, t, i, r, n, o) {
            void 0 === o && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
            var s = this.elements
              , a = 2 * n / (t - e)
              , l = 2 * n / (i - r)
              , u = (t + e) / (t - e)
              , c = (i + r) / (i - r)
              , h = -(o + n) / (o - n)
              , p = -2 * o * n / (o - n);
            return s[0] = a,
            s[4] = 0,
            s[8] = u,
            s[12] = 0,
            s[1] = 0,
            s[5] = l,
            s[9] = c,
            s[13] = 0,
            s[2] = 0,
            s[6] = 0,
            s[10] = h,
            s[14] = p,
            s[3] = 0,
            s[7] = 0,
            s[11] = -1,
            s[15] = 0,
            this
        },
        makeOrthographic: function(e, t, i, r, n, o) {
            var s = this.elements
              , a = 1 / (t - e)
              , l = 1 / (i - r)
              , u = 1 / (o - n)
              , c = (t + e) * a
              , h = (i + r) * l
              , p = (o + n) * u;
            return s[0] = 2 * a,
            s[4] = 0,
            s[8] = 0,
            s[12] = -c,
            s[1] = 0,
            s[5] = 2 * l,
            s[9] = 0,
            s[13] = -h,
            s[2] = 0,
            s[6] = 0,
            s[10] = -2 * u,
            s[14] = -p,
            s[3] = 0,
            s[7] = 0,
            s[11] = 0,
            s[15] = 1,
            this
        },
        equals: function(e) {
            for (var t = this.elements, i = e.elements, r = 0; r < 16; r++)
                if (t[r] !== i[r])
                    return !1;
            return !0
        },
        fromArray: function(e, t) {
            void 0 === t && (t = 0);
            for (var i = 0; i < 16; i++)
                this.elements[i] = e[i + t];
            return this
        },
        toArray: function(e, t) {
            void 0 === e && (e = []),
            void 0 === t && (t = 0);
            var i = this.elements;
            return e[t] = i[0],
            e[t + 1] = i[1],
            e[t + 2] = i[2],
            e[t + 3] = i[3],
            e[t + 4] = i[4],
            e[t + 5] = i[5],
            e[t + 6] = i[6],
            e[t + 7] = i[7],
            e[t + 8] = i[8],
            e[t + 9] = i[9],
            e[t + 10] = i[10],
            e[t + 11] = i[11],
            e[t + 12] = i[12],
            e[t + 13] = i[13],
            e[t + 14] = i[14],
            e[t + 15] = i[15],
            e
        }
    });
    !function() {
        function e(t, i) {
            lt(this, e),
            this.x = t || 0,
            this.y = i || 0,
            this.isVector2 = !0
        }
        ut(e, [{
            key: "set",
            value: function(e, t) {
                return this.x = e,
                this.y = t,
                this
            }
        }, {
            key: "setScalar",
            value: function(e) {
                return this.x = e,
                this.y = e,
                this
            }
        }, {
            key: "setX",
            value: function(e) {
                return this.x = e,
                this
            }
        }, {
            key: "setY",
            value: function(e) {
                return this.y = e,
                this
            }
        }, {
            key: "setComponent",
            value: function(e, t) {
                switch (e) {
                case 0:
                    this.x = t;
                    break;
                case 1:
                    this.y = t;
                    break;
                default:
                    throw new Error("index is out of range: " + e)
                }
                return this
            }
        }, {
            key: "getComponent",
            value: function(e) {
                switch (e) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw new Error("index is out of range: " + e)
                }
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this.x,this.y)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.x = e.x,
                this.y = e.y,
                this
            }
        }, {
            key: "add",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(e, t)) : (this.x += e.x,
                this.y += e.y,
                this)
            }
        }, {
            key: "addScalar",
            value: function(e) {
                return this.x += e,
                this.y += e,
                this
            }
        }, {
            key: "addVectors",
            value: function(e, t) {
                return this.x = e.x + t.x,
                this.y = e.y + t.y,
                this
            }
        }, {
            key: "addScaledVector",
            value: function(e, t) {
                return this.x += e.x * t,
                this.y += e.y * t,
                this
            }
        }, {
            key: "sub",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(e, t)) : (this.x -= e.x,
                this.y -= e.y,
                this)
            }
        }, {
            key: "subScalar",
            value: function(e) {
                return this.x -= e,
                this.y -= e,
                this
            }
        }, {
            key: "subVectors",
            value: function(e, t) {
                return this.x = e.x - t.x,
                this.y = e.y - t.y,
                this
            }
        }, {
            key: "multiply",
            value: function(e) {
                return this.x *= e.x,
                this.y *= e.y,
                this
            }
        }, {
            key: "multiplyScalar",
            value: function(e) {
                return this.x *= e,
                this.y *= e,
                this
            }
        }, {
            key: "divide",
            value: function(e) {
                return this.x /= e.x,
                this.y /= e.y,
                this
            }
        }, {
            key: "divideScalar",
            value: function(e) {
                return this.multiplyScalar(1 / e)
            }
        }, {
            key: "min",
            value: function(e) {
                return this.x = Math.min(this.x, e.x),
                this.y = Math.min(this.y, e.y),
                this
            }
        }, {
            key: "max",
            value: function(e) {
                return this.x = Math.max(this.x, e.x),
                this.y = Math.max(this.y, e.y),
                this
            }
        }, {
            key: "clamp",
            value: function(e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)),
                this.y = Math.max(e.y, Math.min(t.y, this.y)),
                this
            }
        }, {
            key: "clampScalar",
            value: function() {
                var t = new e
                  , i = new e;
                return function(e, r) {
                    return t.set(e, e),
                    i.set(r, r),
                    this.clamp(t, i)
                }()
            }
        }, {
            key: "clampLength",
            value: function(e, t) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)))
            }
        }, {
            key: "floor",
            value: function() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this
            }
        }, {
            key: "ceil",
            value: function() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this
            }
        }, {
            key: "round",
            value: function() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this
            }
        }, {
            key: "roundToZero",
            value: function() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this
            }
        }, {
            key: "negate",
            value: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this.x * e.x + this.y * e.y
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this.x * this.x + this.y * this.y
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            }
        }, {
            key: "lengthManhattan",
            value: function() {
                return Math.abs(this.x) + Math.abs(this.y)
            }
        }, {
            key: "normalize",
            value: function() {
                return this.divideScalar(this.length() || 1)
            }
        }, {
            key: "angle",
            value: function() {
                var e = Math.atan2(this.y, this.x);
                return e < 0 && (e += 2 * Math.PI),
                e
            }
        }, {
            key: "distanceTo",
            value: function(e) {
                return Math.sqrt(this.distanceToSquared(e))
            }
        }, {
            key: "distanceToSquared",
            value: function(e) {
                var t = this.x - e.x
                  , i = this.y - e.y;
                return t * t + i * i
            }
        }, {
            key: "distanceToManhattan",
            value: function(e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y)
            }
        }, {
            key: "setLength",
            value: function(e) {
                return this.normalize().multiplyScalar(e)
            }
        }, {
            key: "lerp",
            value: function(e, t) {
                return this.x += (e.x - this.x) * t,
                this.y += (e.y - this.y) * t,
                this
            }
        }, {
            key: "lerpVectors",
            value: function(e, t, i) {
                return this.subVectors(t, e).multiplyScalar(i).add(e)
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.x === this.x && e.y === this.y
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this.x = e[t],
                this.y = e[t + 1],
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this.x,
                e[t + 1] = this.y,
                e
            }
        }, {
            key: "fromBufferAttribute",
            value: function(e, t, i) {
                return void 0 !== i && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),
                this.x = e.getX(t),
                this.y = e.getY(t),
                this
            }
        }, {
            key: "rotateAround",
            value: function(e, t) {
                var i = Math.cos(t)
                  , r = Math.sin(t)
                  , n = this.x - e.x
                  , o = this.y - e.y;
                return this.x = n * i - o * r + e.x,
                this.y = n * r + o * i + e.y,
                this
            }
        }, {
            key: "width",
            get: function() {
                return this.x
            },
            set: function(e) {
                this.x = e
            }
        }, {
            key: "height",
            get: function() {
                return this.y
            },
            set: function(e) {
                this.y = e
            }
        }])
    }();
    var ft = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , mt = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , gt = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , vt = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , yt = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , bt = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , _t = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , xt = function() {
        function e() {
            mt(this, e)
        }
        return gt(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = _t.chars, i = _t.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : ft(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }, {
            key: "calTwoPositionLength",
            value: function(t, i) {
                var r = e.subPosition(t, i);
                return r = r[0] * r[0] + r[1] * r[1] + r[2] * r[2],
                Math.sqrt(r)
            }
        }, {
            key: "subPosition",
            value: function(e, t) {
                return [e[0] - t[0], e[1] - t[1], e[2] - t[2]]
            }
        }, {
            key: "normalizeDirection",
            value: function(t) {
                var i = e.calTwoPositionLength([0, 0, 0], t);
                if (1 === i)
                    return t;
                var r = t;
                return 0 === i ? (r[0] = 0,
                r[1] = 0,
                r[2] = 0,
                r) : (i = 1 / i,
                r[0] *= i,
                r[1] *= i,
                r[2] *= i,
                r)
            }
        }]),
        e
    }()
      , Et = function() {
        function e() {
            mt(this, e),
            this.type = "BaseObject",
            this._initParams(),
            this.calculaterData = {},
            this.objectsMap = null
        }
        return gt(e, [{
            key: "_initParams",
            value: function() {
                this.id = xt.uuid(),
                this.name = null,
                this.userID = null,
                this.properties = null,
                this.resource = null,
                this._resources = null,
                this.position = [0, 0, 0],
                this.rotation = [0, 0, 0, 1],
                this.scale = [1, 1, 1],
                this._parent = null,
                this.children = [],
                this.typeToChildren = {},
                this.lowerCaseProperties = null,
                this.visible = !0,
                this.mesh = null,
                this.calculater = null,
                this.meshBuilder = null,
                this.buildCompleteCallbacks = [],
                this.buildCompleteCallbackParams = [],
                this.selfBuildCompleteCallbacks = [],
                this.selfBuildCompleteCallbackParams = [],
                this._isCalculated = !1,
                this._isMeshBuilded = !1,
                this._isChildrenBuilded = !1,
                this._isSelfBuilded = !1,
                this._isBuiled = !1,
                this._size = null,
                this._box3 = null,
                this._selfSize = null,
                this._center = null,
                this._isBuiled = !1,
                this._isRequestResource = !1,
                this._isNotifyListeners = !1,
                this.objectsMap = null
            }
        }, {
            key: "_getCalculateSizeObjects",
            value: function() {
                return this.children
            }
        }, {
            key: "_addChild",
            value: function(e) {
                this.children.push(e),
                this.typeToChildren[e.type] || (this.typeToChildren[e.type] = []),
                this.typeToChildren[e.type].push(e),
                e.registerBuildCallbackListener(this._childBuildCallback, {
                    obj: this
                })
            }
        }, {
            key: "_childBuildCallback",
            value: function(e, t) {
                var i = t.obj;
                i.children.every((function(e) {
                    return e.isBuilded
                }
                )) && (i._isChildrenBuilded = !0),
                i.isChildrenBuilded && i.isSelfBuilded && (i._isBuiled = !0),
                i.isBuilded && i.notifyBuildCompleteListeners()
            }
        }, {
            key: "_getChildrenByType",
            value: function(e) {
                return this.typeToChildren[e] ? this.typeToChildren[e] : []
            }
        }, {
            key: "_removeChild",
            value: function(e) {
                var t = this.children.indexOf(e);
                t > -1 && this.children.splice(t, 1),
                (t = this.typeToChildren[e.type].indexOf(e)) > -1 && this.typeToChildren[e.type].splice(t, 1),
                e.removeBuildCallbackListener(this._childBuildCallback)
            }
        }, {
            key: "build",
            value: function(e) {
                e && this.registerBuildCallbackListener(e),
                this.isBuilded || (this.isResourcesBuilded ? (this.buildSelf(),
                this.buildChildren(),
                this.isChildrenBuilded && this.notifyBuildCompleteListeners()) : this._initResources())
            }
        }, {
            key: "calculate",
            value: function() {
                this.calculater && this.calculater.build(this)
            }
        }, {
            key: "createMesh",
            value: function() {
                if (this.meshBuilder)
                    return this.meshBuilder.build(this)
            }
        }, {
            key: "_initResources",
            value: function() {
                if (!this._isRequestResource) {
                    for (var e = 0; e < this.resources.length; e++) {
                        var t = this.resources[e];
                        t.isBuilded || (t.registerBuildCallbackListener(this._resourceBuildedCallback, {
                            object: this
                        }),
                        t.build())
                    }
                    this._isRequestResource = !0
                }
            }
        }, {
            key: "_resourceBuildedCallback",
            value: function(e, t) {
                var i = t.object;
                e.isBuilded && i.build()
            }
        }, {
            key: "buildSelf",
            value: function() {
                this._buildSelf(),
                this.isSelfBuilded && this.notifySelfBuildCompleteListeners()
            }
        }, {
            key: "_buildSelf",
            value: function() {
                this.isSelfBuilded || (this._isCalculated || (this.calculate(),
                this._isCalculated = !0),
                this._isMeshBuilded || (this.createMesh(),
                this._isMeshBuilded = !0),
                this._isSelfBuilded = !0,
                this.isChildrenBuilded && (this._isBuiled = !0),
                this.isBuilded && this.notifyBuildCompleteListeners())
            }
        }, {
            key: "buildChildren",
            value: function() {
                this._buildChildren()
            }
        }, {
            key: "_buildChildren",
            value: function() {
                if (!this.isChildrenBuilded)
                    for (var e = 0; e < this.children.length; e++) {
                        this.children[e].build()
                    }
            }
        }, {
            key: "registerBuildCallbackListener",
            value: function(e, t) {
                this.buildCompleteCallbacks.push(e),
                this.buildCompleteCallbackParams.push(t)
            }
        }, {
            key: "registerSelfBuildCallbackListener",
            value: function(e, t) {
                this.selfBuildCompleteCallbacks.push(e),
                this.selfBuildCompleteCallbackParams.push(t)
            }
        }, {
            key: "removeBuildCallbackListener",
            value: function() {}
        }, {
            key: "notifyBuildCompleteListeners",
            value: function() {
                if (!this._isNotifyListeners) {
                    for (var e = 0; e < this.buildCompleteCallbacks.length; e++) {
                        (0,
                        this.buildCompleteCallbacks[e])(this, this.buildCompleteCallbackParams[e])
                    }
                    this._isNotifyListeners = !0
                }
            }
        }, {
            key: "notifySelfBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.selfBuildCompleteCallbacks.length; e++) {
                    (0,
                    this.selfBuildCompleteCallbacks[e])(this, this.selfBuildCompleteCallbackParams[e])
                }
            }
        }, {
            key: "findObjectByID",
            value: function(e) {
                return this.objectsMap || (this.objectsMap = {},
                this.collectObjectsToMap(this)),
                null != e && "" !== e ? this.objectsMap[e] : null
            }
        }, {
            key: "collectObjectsToMap",
            value: function(e) {
                this.objectsMap[e.id] = e;
                for (var t = 0; t < e.children.length; t++) {
                    var i = e.children[t];
                    this.collectObjectsToMap(i)
                }
            }
        }, {
            key: "findObjectByUserID",
            value: function(e) {
                if (!e)
                    return null;
                if (this.userID === e)
                    return this;
                if (this.children)
                    for (var t = 0; t < this.children.length; t++) {
                        var i = this.children[t];
                        if (i.userID === e)
                            return i;
                        var r = i.findObjectByUserID(e);
                        if (r)
                            return r
                    }
                return null
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.children.length; e++) {
                    this.children[e].clear()
                }
                this.clearBuildMesh(),
                this.calculater = null,
                this.meshBuilder = null,
                this._initParams(),
                this.id = null
            }
        }, {
            key: "clearBuildMesh",
            value: function() {
                this.meshBuilder && this.meshBuilder.clear(this.mesh),
                this._isMeshBuilded = !1,
                this._isSelfBuilded = !1,
                this.mesh = null,
                this._isBuiled = !1,
                this._isNotifyListeners = !1
            }
        }, {
            key: "deepClone",
            value: function(e) {
                var t = Array.isArray(e) ? [] : {};
                if (e && "object" === (void 0 === e ? "undefined" : ft(e)))
                    for (var i in e)
                        e.hasOwnProperty(i) && (t[i] = e && "object" === ft(e[i]) ? this.deepClone(e[i]) : e[i]);
                return t
            }
        }, {
            key: "selfSize",
            set: function(e) {
                this._selfSize = e
            },
            get: function() {
                return null === this._selfSize ? [0, 0, 0] : this._selfSize
            }
        }, {
            key: "center",
            get: function() {
                if (null === this._center) {
                    if (!this.size || !this._box3)
                        return [0, 0, 0];
                    this._center = this._box3.getCenter().toArray()
                }
                return this._center
            }
        }, {
            key: "size",
            set: function(e) {
                this._size = e,
                0 === this.children.length && (this.selfSize = e)
            },
            get: function() {
                if (null === this._size)
                    if (this.children.length > 0) {
                        if (this._box3 = new pt,
                        0 !== this.selfSize[0] && 0 !== this.selfSize[1] && 0 !== this.selfSize[2]) {
                            var e = new ht(this.position[0],this.position[1],this.position[2]);
                            e.y += this.selfSize[1] / 2,
                            this._box3.setFromCenterAndSize(e, new ht(this.selfSize[0],this.selfSize[1],this.selfSize[2]))
                        }
                        for (var t = this._getCalculateSizeObjects(), i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.size && r._box3 && this._box3.union(r._box3)
                        }
                        this._size = this._box3.getSize().toArray()
                    } else
                        this._size = this.selfSize;
                return this._size
            }
        }, {
            key: "parent",
            get: function() {
                return this._parent
            },
            set: function(e) {
                this._parent !== e && (null !== this._parent && this._parent._removeChild(this),
                null != e && (this._parent = e,
                this._parent && this._parent._addChild(this)))
            }
        }, {
            key: "isContainer",
            get: function() {
                return this.children.length > 0
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.resource && this._resources.push(this.resource)),
                this._resources
            }
        }, {
            key: "isBuilded",
            get: function() {
                return this._isBuiled
            }
        }, {
            key: "isSelfBuilded",
            get: function() {
                return this._isSelfBuilded
            }
        }, {
            key: "isChildrenBuilded",
            get: function() {
                return !this.isContainer || (!(this.children.length > 0) || this._isChildrenBuilded)
            }
        }, {
            key: "isResourcesBuilded",
            get: function() {
                for (var e = 0; e < this.resources.length; e++) {
                    if (!this.resources[e].isBuilded)
                        return !1
                }
                return !0
            }
        }]),
        e
    }()
      , wt = {
        StraightManualWall: "StraightManualWall",
        ModelWall: "ModelWall",
        WallCorner: "WallCorner",
        FloorPlan: "FloorPlan",
        Facade: "Facade",
        Building: "Building",
        Outdoors: "Outdoors",
        Room: "Room",
        CombineStraightManualWall: "CombineStraightManualWall",
        Floor: "Floor",
        Ceiling: "Ceiling",
        Roof: "Roof",
        CombineDoorOrWindow: "CombineDoorOrWindow",
        CombinePlacement: "CombinePlacement",
        CombinePlacementWall: "CombinePlacementWall",
        Placement: "Placement",
        PlacementGroup: "PlacementGroup",
        CombineFloor: "CombineFloor",
        CombineCeiling: "CombineCeiling",
        CombineRoof: "CombineRoof",
        CombineModelWall: "CombineModelWall",
        CombinePlacementGroup: "CombinePlacementGroup",
        PlacementWall: "PlacementWall",
        PlacementGround: "PlacementGround",
        VideoProbe: "VideoProbe",
        CurveLine: "CurveLine",
        LeakWaterLine: "LeakWaterLine",
        ArrowLine: "ArrowLine",
        ArrowDataLine: "ArrowDataLine",
        RouteLine: "RouteLine",
        Text3D: "Text3D",
        GeneralPolygonLine: "GeneralPolygonLine",
        GeneralRouteLine: "GeneralRouteLine"
    }
      , Tt = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return i.dataJson = e,
            i.type = "Room",
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.dataJson = null,
                this.holePaths = [],
                this._points = [],
                this._holes = [],
                this._uv2 = [],
                this.offset = null,
                this.parentPosition = null,
                this._floor = null,
                this._roof = null,
                this._ceiling = null,
                this.floorResource = null,
                this.ceilingResource = null,
                this.roofResource = null,
                this.isOnlyFloor = !1
            }
        }, {
            key: "clear",
            value: function() {
                this.floor && this.floor.clear(),
                this.roof && this.roof.clear(),
                this.ceiling && this.ceiling.clear(),
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }, {
            key: "floor",
            get: function() {
                return null === this._floor && this.typeToChildren[wt.Floor] && (this._floor = this.typeToChildren[wt.Floor][0]),
                this._floor
            }
        }, {
            key: "ceiling",
            get: function() {
                return null === this._ceiling && this.typeToChildren[wt.Ceiling] && (this._ceiling = this.typeToChildren[wt.Ceiling][0]),
                this._ceiling
            }
        }, {
            key: "roof",
            get: function() {
                return null === this._roof && this.typeToChildren[wt.Roof] && (this._roof = this.typeToChildren[wt.Roof][0]),
                this._roof
            }
        }, {
            key: "size",
            set: function(e) {
                this._size = e
            },
            get: function() {
                return null === this._size && (this._size = [0, 0, 0]),
                this._size
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.resource && this._resources.push(this.resource)),
                this._resources
            }
        }, {
            key: "points",
            set: function(e) {
                this._points = e
            },
            get: function() {
                return this._points
            }
        }, {
            key: "holes",
            set: function(e) {
                this._holes = e
            },
            get: function() {
                return this._holes
            }
        }]),
        t
    }(Et)
      , Mt = function e() {
        mt(this, e)
    };
    Mt.StraightManualWallHeight = 3,
    Mt.StraightManualWallThick = .15,
    Mt.enableDelayLoadMode = !0,
    Mt.enableManaulWallLightMap = !0,
    Mt.enableFloorLightMap = !0,
    Mt.wallLightMapIntensity = 3.8,
    Mt.enableUseHighestVersionResource = !0,
    Mt.enableCombine = !0,
    Mt.ableToSupportFootAndHeadModelWalls = ["C9FB3F9A29C842F79F02CECC4037FEA1"];
    var Ct = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Ceiling",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.blockSize = [.6, .6],
                this.blockAngle = 0,
                this.DefaultHeight = 2.9,
                this.height = this.DefaultHeight
            }
        }, {
            key: "size",
            get: function() {
                return null === this._size && (this._size = [0, 0, 0]),
                this._size
            },
            set: function(e) {
                this._size = e
            }
        }]),
        t
    }(Et)
      , St = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Roof",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.DefaultHeight = 3,
                this.height = this.DefaultHeight,
                this.blockSize = [2, 2],
                this.blockAngle = 0
            }
        }, {
            key: "size",
            set: function(e) {
                this._size = e
            },
            get: function() {
                return null === this._size && (this._size = [0, 0, 0]),
                this._size
            }
        }]),
        t
    }(Et)
      , jt = function e() {
        mt(this, e)
    };
    jt.wallTexture = null,
    jt.wallEdgeTexture = null,
    jt.floorTexture = null,
    jt.ceilingTexture = null,
    jt.roofTexture = null,
    jt.wallLigthMapTexture = null,
    jt.floorLightMapTexture = null,
    jt.wallMaterial = null,
    jt.wallEdgeMaterial = null,
    jt.floorMaterial = null,
    jt.ceilingMaterial = null,
    jt.roofMaterial = null;
    var Pt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Floor",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.blockSize = [.6, .6],
                this.blockAngle = 0,
                this.DefaultHeight = .01,
                this.height = this.DefaultHeight
            }
        }, {
            key: "size",
            set: function(e) {
                this._size = e
            },
            get: function() {
                return null === this._size && (this._size = [0, 0, 0]),
                this._size
            }
        }]),
        t
    }(Et)
      , Rt = function(e) {
        function t() {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this))
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this._startCorner = null,
                this._endCorner = null,
                this.thick = -1,
                this.height = -1,
                this._length = null,
                this._direction = null,
                this.doorOrWindows = [],
                this.suspend = 0,
                this._position = null
            }
        }, {
            key: "getWallOtherCorner",
            value: function(e) {
                return this.startCorner === e ? this.endCorner : this.endCorner === e ? this.startCorner : null
            }
        }, {
            key: "startCorner",
            get: function() {
                return this._startCorner
            },
            set: function(e) {
                this._startCorner = e,
                this._startCorner && this._startCorner.addWall(this)
            }
        }, {
            key: "endCorner",
            get: function() {
                return this._endCorner
            },
            set: function(e) {
                this._endCorner = e,
                this._endCorner && this._endCorner.addWall(this)
            }
        }, {
            key: "position",
            get: function() {
                if (!this._position) {
                    var e = this.startCorner.position
                      , t = this.endCorner.position;
                    this._position = [(t[0] + e[0]) / 2, (t[1] + e[1]) / 2, (t[2] + e[2]) / 2]
                }
                return this._position
            },
            set: function(e) {
                this._position = e
            }
        }, {
            key: "length",
            get: function() {
                return null === this._length && (this._length = xt.calTwoPositionLength(this.startCorner.position, this.endCorner.position)),
                this._length
            }
        }, {
            key: "direction",
            get: function() {
                return null === this._direction && (this._direction = xt.subPosition(this.endCorner.position, this.startCorner.position),
                xt.normalizeDirection(this._direction)),
                this._direction
            }
        }]),
        t
    }(Et)
      , Dt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "ModelWall",
            e
        }
        return yt(t, e),
        t
    }(Rt)
      , At = function(e) {
        function t(e, i, r) {
            mt(this, t);
            var n = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return n.type = "WallCorner",
            n
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.walls = [],
                this.position = null
            }
        }, {
            key: "addWall",
            value: function(e) {
                for (var t = 0, i = this.walls.length; t < i; t++)
                    if (this.walls[t] === e)
                        return void console.error("repeat wall" + e);
                this.walls.push(e)
            }
        }, {
            key: "clearMesh",
            value: function() {
                for (var e = 0; e < this.walls.length; e++) {
                    this.walls[e].clearMesh()
                }
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clearMesh", this).call(this)
            }
        }]),
        t
    }(Et)
      , kt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Building",
            e.structShow = !1,
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "floorplans",
            get: function() {
                return this._getChildrenByType(wt.FloorPlan)
            }
        }, {
            key: "facades",
            get: function() {
                return this._getChildrenByType(wt.Facade)
            }
        }]),
        t
    }(Et)
      , Ot = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "CurveLine",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.points = [],
                this.resource = null,
                this.color = null,
                this.width = null,
                this.enableMaterialAnimation = !1,
                this.materialAnimationSpeed = 1,
                this.textureTiling = [1, 1],
                this.textureOffset = [0, 0]
            }
        }]),
        t
    }(Et)
      , Bt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "ArrowLine",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.arrowResource = null,
                this.arrowWidth = null,
                this.arrowHeight = null,
                this._resources = null
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.resource && this._resources.push(this.resource),
                this.arrowResource && this._resources.push(this.arrowResource)),
                this._resources
            }
        }]),
        t
    }(Ot)
      , Ft = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "ArrowDataLine",
            e
        }
        return yt(t, e),
        t
    }(Bt)
      , Lt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Placement",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.model = null,
                this.customColor = null,
                this.opacity = null,
                this.renderMode = null,
                this.customTextureResource = null,
                this.isPlayAnim = !1,
                this.animClip = null,
                this.belongRoomUserID = null
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.resource && this._resources.push(this.resource),
                this.customTextureResource && this._resources.push(this.customTextureResource)),
                this._resources
            }
        }, {
            key: "size",
            set: function(e) {
                this._size = e
            },
            get: function() {
                if (null === this._size && (this.modelSize = this.resource.size,
                this._size = [this.modelSize[0] * this.scale[0], this.modelSize[1] * this.scale[1], this.modelSize[2] * this.scale[2]]),
                null === this._box3) {
                    this._box3 = new pt;
                    var e = new ht(this.position[0],this.position[1],this.position[2]);
                    e.y += this._size[1] / 2,
                    this._box3.setFromCenterAndSize(e, new ht(this._size[0],this._size[1],this._size[2]))
                }
                return this._size
            }
        }]),
        t
    }(Et)
      , It = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Facade",
            e
        }
        return yt(t, e),
        t
    }(Lt)
      , Nt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "DoorOrWindow",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.suspendPercent = 0,
                this.attachWall = null,
                this.isOpen = !1,
                this.openDirIndex = 0,
                this.isWindow = !1
            }
        }]),
        t
    }(Lt)
      , Ht = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "PlacementGroup",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.groups = [],
                this.placements = [],
                this.belongRoomUserID = null,
                this._resourcesMap = {}
            }
        }, {
            key: "_addChild",
            value: function(e) {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_addChild", this).call(this, e),
                e.type === wt.Placement ? this.placements.push(e) : e.type === wt.PlacementGroup && this.groups.push(e)
            }
        }, {
            key: "selfSize",
            set: function(e) {
                this._selfSize = e
            },
            get: function() {
                return null === this._selfSize && (this._selfSize = [0, 0, 0]),
                this._selfSize
            }
        }, {
            key: "belongRoomUserID",
            set: function(e) {
                this._belongRoomUserID = e;
                for (var t = 0; t < this.placements.length; t++) {
                    this.placements[t].belongRoomUserID = e
                }
                for (var i = 0; i < this.groups.length; i++) {
                    this.groups[i].belongRoomUserID = e
                }
            },
            get: function() {
                return this._belongRoomUserID
            }
        }, {
            key: "resources",
            get: function() {
                if (null === this._resources) {
                    this._resources = [];
                    for (var e = 0; e < this.children.length; e++)
                        for (var t = this.children[e], i = 0; i < t.resources.length; i++) {
                            var r = t.resources[i];
                            this._resourcesMap[r.id] || (this._resources.push(r),
                            this._resourcesMap[r.id] = r)
                        }
                }
                return this._resources
            }
        }]),
        t
    }(Et)
      , Ut = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "FacadeGroup",
            e
        }
        return yt(t, e),
        t
    }(Ht)
      , zt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "FloorPlan",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.height = 3,
                this.alwaysShowInsideObjs = !1
            }
        }, {
            key: "existsCorner",
            value: function(e, t, i) {
                var r = this.typeToChildren[wt.WallCorner];
                if (r)
                    for (var n = 0, o = r.length; n < o; n++) {
                        var s = r[n].position;
                        if (s.x === e && s.y === t && s.z === i)
                            return !0
                    }
                return !1
            }
        }, {
            key: "addCorner",
            value: function(e, t, i) {
                var r = new WallCorner(e,t,i);
                return r.parent = this,
                r
            }
        }, {
            key: "getCorner",
            value: function(e, t, i) {
                for (var r = 0, n = this.corners.length; r < n; r++) {
                    var o = this.corners[r].position;
                    if (o.x === e && o.y === t && o.z === i)
                        return this.corners[r]
                }
                return null
            }
        }, {
            key: "calRoomsUV2",
            value: function() {}
        }, {
            key: "_fillUV2ToRooms",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    var r = e[i]
                      , n = this._calFloorUV2(r, t);
                    this._fillUV2ToFloor(r, n)
                }
            }
        }, {
            key: "_calFloorUV2",
            value: function(e, t) {
                var i = []
                  , r = new THREE.Vector2;
                t.getSize(r);
                for (var n = e.floor.geometry.vertices, o = this._getFloorPosition(e), s = 0; s < n.length; s++) {
                    var a = n[s].clone();
                    a.x += o.x,
                    a.y += o.z;
                    var l = (a.x - t.min.x) / r.x
                      , u = (a.y - t.min.y) / r.y;
                    i.push(new THREE.Vector2(parseFloat(l.toFixed(2)),parseFloat(u.toFixed(2))))
                }
                return i
            }
        }, {
            key: "_fillUV2ToFloor",
            value: function(e, t) {
                for (var i = e.floor.geometry.faces, r = [], n = 0; n < i.length; n++) {
                    var o = i[n]
                      , s = [t[o.a], t[o.b], t[o.c]];
                    r.push(s)
                }
                e.uv2 = r
            }
        }, {
            key: "_calAllFloorBox2",
            value: function(e) {
                for (var t = new THREE.Box2, i = 0; i < e.rooms.length; i++) {
                    var r = e.rooms[i];
                    null === r.floor.geometry && r.floor.calGeometry();
                    for (var n = this._getFloorPosition(r), o = r.floor.geometry.vertices, s = 0; s < o.length; s++) {
                        var a = o[s].clone();
                        a.x += n.x,
                        a.y += n.z,
                        t.expandByPoint(a)
                    }
                }
                return t
            }
        }, {
            key: "_getFloorPosition",
            value: function(e) {
                var t = e.position.clone();
                return t.z = -t.z,
                t
            }
        }, {
            key: "_getCalculateSizeObjects",
            value: function() {
                for (var e = [], t = 0; t < this.children.length; t++) {
                    var i = this.children[t];
                    -1 !== i.type.indexOf("Wall") && e.push(i)
                }
                return e
            }
        }, {
            key: "placements",
            get: function() {
                return this._getChildrenByType(wt.Placement)
            }
        }, {
            key: "corners",
            get: function() {
                return this._getChildrenByType(wt.WallCorner)
            }
        }, {
            key: "walls",
            get: function() {
                return this._getChildrenByType(wt.ModelWall).concat(this._getChildrenByType(wt.StraightManualWall)).concat(this._getChildrenByType(wt.PlacementWall))
            }
        }, {
            key: "rooms",
            get: function() {
                return this._getChildrenByType(wt.Room)
            }
        }, {
            key: "groups",
            get: function() {
                return this._getChildrenByType(wt.PlacementGroup)
            }
        }, {
            key: "placementGrounds",
            get: function() {
                return this._getChildrenByType(wt.PlacementGround)
            }
        }, {
            key: "videoprobes",
            get: function() {
                return this._getChildrenByType(wt.VideoProbe)
            }
        }, {
            key: "selfSize",
            set: function(e) {
                this._selfSize = e
            },
            get: function() {
                return null === this._selfSize && (this._selfSize = [0, 0, 0]),
                this._selfSize
            }
        }]),
        t
    }(Et)
      , Vt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "Outdoors",
            e
        }
        return yt(t, e),
        t
    }(zt)
      , Wt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "PipeLine",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.points = [],
                this.resource = null,
                this.color = [0, 0, 1],
                this.renderMode = null,
                this.opacity = null,
                this.radius = null,
                this.sectionType = null,
                this.enableMaterialAnimation = !1,
                this.materialAnimationSpeed = 1,
                this.textureTiling = [.5, .5],
                this.textureOffset = [0, 0]
            }
        }]),
        t
    }(Et)
      , Gt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "LeakWaterLine",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.radius = .2,
                this.color = [1, 1, 1],
                this.alarmLength = null
            }
        }, {
            key: "clear",
            value: function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this, e),
                this.radius = .2,
                this.color = null,
                this.alarmLength = null
            }
        }]),
        t
    }(Wt)
      , qt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.text = null,
            e.color = null,
            e.fontSize = null,
            e.opacity = null,
            e.mesh = null,
            e.type = "Text3D",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.text = null,
                this.color = null,
                this.fontSize = null,
                this.opacity = null,
                this.mesh = null
            }
        }]),
        t
    }(Et)
      , Xt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "VideoProbe",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.ascept = null,
                this.field = null,
                this.probeLength = null,
                this.pitch = null
            }
        }]),
        t
    }(Lt)
      , Jt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "World",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "clear",
            value: function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this, e),
                this.outdoors = null,
                this.buildings = []
            }
        }, {
            key: "buildings",
            get: function() {
                return this._getChildrenByType(wt.Building)
            }
        }, {
            key: "ourdoors",
            get: function() {
                return this._getChildrenByType(wt.Outdoors)[0]
            }
        }]),
        t
    }(Et)
      , Yt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "GeneralPolygonLine",
            e
        }
        return yt(t, e),
        t
    }(Wt)
      , Qt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "GeneralRouteLine",
            e
        }
        return yt(t, e),
        t
    }(Bt)
      , Zt = new function e() {
        mt(this, e),
        this.isDebug = !1,
        this.isTesting = !1
    }
      , Kt = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "RouteLine",
            e
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.color = [0, 0, 1]
            }
        }, {
            key: "clear",
            value: function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this, e),
                this.color = null
            }
        }]),
        t
    }(Ot)
      , $t = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "PlacementWall",
            i
        }
        return yt(t, e),
        t
    }(Lt)
      , ei = function(e) {
        function t() {
            mt(this, t);
            var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "PlacementGround",
            e
        }
        return yt(t, e),
        t
    }(Lt)
      , ti = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = wt.StraightManualWall,
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.leftResource = null,
                this.rightResource = null,
                this.edgeResource = null,
                this.uvMultiple = [1, 1],
                this.lightUV = null,
                this.topOffset = null,
                this.suspend = 0,
                this.thick = .25,
                this.height = 3
            }
        }, {
            key: "selfSize",
            get: function() {
                if (null === this._selfSize) {
                    this._box3 = new pt;
                    for (var e = [this.startCorner, this.endCorner], t = 0; t < e.length; t++) {
                        var i = e[t].position
                          , r = new ht(i[0],i[1],i[2]);
                        this._box3.expandByPoint(r),
                        (r = r.clone()).y = this.parent.height,
                        this._box3.expandByPoint(r)
                    }
                    this._selfSize = this._box3.getSize().toArray()
                }
                return this._selfSize
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.leftResource && this._resources.push(this.leftResource),
                this.rightResource && this._resources.push(this.rightResource),
                this.edgeResource && this._resources.push(this.edgeResource)),
                this._resources
            }
        }]),
        t
    }(Rt)
      , ii = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.objects = [],
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.objects = []
            }
        }, {
            key: "_buildSelf",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_buildSelf", this).call(this)
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.objects.length; e++) {
                    this.objects[e].clear()
                }
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(Et)
      , ri = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "CombineStraightManualWall",
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.walls = [],
                this.leftWallResourceMap = new Map,
                this.rightWallResourceMap = new Map,
                this.corners = [],
                this._resourceDic = {},
                this._resources = []
            }
        }, {
            key: "addObject",
            value: function(e) {
                this.walls.push(e),
                this.leftWallResourceMap.has(e.leftResource) || this.leftWallResourceMap.set(e.leftResource, []),
                this.rightWallResourceMap.has(e.rightResource) || this.rightWallResourceMap.set(e.rightResource, []),
                this.leftWallResourceMap.get(e.leftResource).push(e),
                this.rightWallResourceMap.get(e.rightResource).push(e),
                this.addCorner(e.startCorner),
                this.addCorner(e.endCorner);
                for (var t = e.resources, i = 0; i < t.length; i++) {
                    var r = t[i];
                    this._resourceDic[r.id] || (this._resources.push(r),
                    this._resourceDic[r.id] = r)
                }
            }
        }, {
            key: "addCorner",
            value: function(e) {
                for (var t = 0; t < this.corners.length; t++) {
                    if (this.corners[t] === e)
                        return
                }
                this.corners.push(e)
            }
        }, {
            key: "_addResource",
            value: function() {}
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.walls.length; e++) {
                    this.walls[e].clear()
                }
                for (var i = 0; i < this.corners.length; i++) {
                    var r = this.corners[i];
                    0 === r.walls.length && r.clear()
                }
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }, {
            key: "selfSize",
            get: function() {
                if (null === this._selfSize) {
                    this._box3 = new pt;
                    for (var e = 0; e < this.corners.length; e++) {
                        var t = this.corners[e].position
                          , i = new ht(t[0],t[1],t[2]);
                        this._box3.expandByPoint(i),
                        (i = i.clone()).y = this.parent.height,
                        this._box3.expandByPoint(i)
                    }
                    this._selfSize = this._box3.getSize().toArray()
                }
                return this._selfSize
            }
        }]),
        t
    }(ii)
      , ni = function() {
        function e() {
            mt(this, e),
            this.positions = [],
            this.scales = [],
            this.quaternions = []
        }
        return gt(e, [{
            key: "clone",
            value: function() {
                var t = new e;
                return t.positions = this.positions.slice(),
                t.scales = this.scales.slice(),
                t.quaternions = this.quaternions.slice(),
                t
            }
        }]),
        e
    }()
      , oi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = wt.CombinePlacement,
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.objects = [],
                this.belongRoomUserID = null,
                this.transformations = []
            }
        }, {
            key: "addObject",
            value: function(e) {
                this.objects.push(e);
                var t = new ni;
                t.positions.push(e.position),
                t.scales.push(e.scale),
                t.quaternions.push(e.rotation),
                this.transformations.push(t)
            }
        }, {
            key: "selfSize",
            set: function(e) {
                this._selfSize = e
            },
            get: function() {
                if (null === this._selfSize) {
                    this._box3 = new pt;
                    for (var e = 0; e < this.objects.length; e++) {
                        var t = this.objects[e];
                        t.size && this._box3.union(t._box3)
                    }
                    this._selfSize = this._box3.getSize().toArray()
                }
                return this._selfSize
            }
        }]),
        t
    }(ii)
      , si = {
        World: Jt,
        Building: kt,
        FloorPlan: zt,
        Room: Tt,
        Floor: Pt,
        Ceiling: Ct,
        Roof: St,
        StraightManualWall: ti,
        ModelWall: Dt,
        WallCorner: At,
        Placement: Lt,
        PlacementGroup: Ht,
        DoorOrWindow: Nt,
        Outdoors: Vt,
        Facade: It,
        FacadeGroup: Ut,
        VideoProbe: Xt,
        CurveLine: Ot,
        LeakWaterLine: Gt,
        ArrowLine: Bt,
        ArrowDataLine: Ft,
        RouteLine: Kt,
        PipeLine: Wt,
        PlacementWall: $t,
        PlacementGround: ei,
        CombineStraightManualWall: ri,
        CombineDoorOrWindow: function(e) {
            function t(e) {
                mt(this, t);
                var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.type = "CombineDoorOrWindow",
                i
            }
            return yt(t, e),
            t
        }(oi),
        CombinePlacement: oi,
        CombineFloor: function(e) {
            function t() {
                mt(this, t);
                var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                return e.type = wt.CombineFloor,
                e
            }
            return yt(t, e),
            gt(t, [{
                key: "_initParams",
                value: function() {
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this._height = .01,
                    this.rotation = [-.7071067811865475, -0, -0, .7071067811865476],
                    this.position[1] = this._height
                }
            }, {
                key: "addObject",
                value: function(e) {
                    this.objects.push(e)
                }
            }, {
                key: "size",
                set: function(e) {
                    this._size = e
                },
                get: function() {
                    return null === this._size && (this._size = [0, 0, 0]),
                    this._size
                }
            }, {
                key: "height",
                set: function(e) {
                    this._height = e,
                    this.position[1] = this._height
                },
                get: function() {
                    return this._height
                }
            }]),
            t
        }(ii),
        CombineCeiling: function(e) {
            function t() {
                mt(this, t);
                var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                return e.type = wt.CombineCeiling,
                e
            }
            return yt(t, e),
            gt(t, [{
                key: "_initParams",
                value: function() {
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this._height = 3,
                    this.rotation = [.7071067811865475, -0, -0, .7071067811865476],
                    this.position[1] = this._height
                }
            }, {
                key: "addObject",
                value: function(e) {
                    this.objects.push(e)
                }
            }, {
                key: "size",
                set: function(e) {
                    this._size = e
                },
                get: function() {
                    return null === this._size && (this._size = [0, 0, 0]),
                    this._size
                }
            }, {
                key: "height",
                set: function(e) {
                    this._height = e,
                    this.position[1] = this._height
                },
                get: function() {
                    return this._height
                }
            }]),
            t
        }(ii),
        CombineRoof: function(e) {
            function t() {
                mt(this, t);
                var e = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                return e.type = wt.CombineRoof,
                e
            }
            return yt(t, e),
            gt(t, [{
                key: "_initParams",
                value: function() {
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this._height = 3,
                    this.rotation = [-.7071067811865475, -0, -0, .7071067811865476],
                    this.position[1] = this._height + .005
                }
            }, {
                key: "addObject",
                value: function(e) {
                    this.objects.push(e)
                }
            }, {
                key: "size",
                set: function(e) {
                    this._size = e
                },
                get: function() {
                    return null === this._size && (this._size = [0, 0, 0]),
                    this._size
                }
            }, {
                key: "height",
                set: function(e) {
                    this._height = e,
                    this.position[1] = this._height + .005
                },
                get: function() {
                    return this._height
                }
            }]),
            t
        }(ii),
        CombineModelWall: function(e) {
            function t(e) {
                mt(this, t);
                var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.type = wt.CombineModelWall,
                i
            }
            return yt(t, e),
            gt(t, [{
                key: "_initParams",
                value: function() {
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.walls = [],
                    this.corners = []
                }
            }, {
                key: "addObject",
                value: function(e) {
                    this.walls.push(e),
                    this.addCorner(e.startCorner),
                    this.addCorner(e.endCorner)
                }
            }, {
                key: "addCorner",
                value: function(e) {
                    this.corners.push(e)
                }
            }, {
                key: "clear",
                value: function() {
                    for (var e = 0; e < this.walls.length; e++) {
                        this.walls[e].clear()
                    }
                    for (var i = 0; i < this.corners.length; i++) {
                        var r = this.corners[i];
                        0 === r.walls.length && r.clear()
                    }
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
                }
            }, {
                key: "selfSize",
                set: function(e) {
                    this._selfSize = e
                },
                get: function() {
                    if (null === this._selfSize) {
                        this._box3 = new pt;
                        for (var e = 0; e < this.corners.length; e++) {
                            var t = this.corners[e].position
                              , i = new ht(t[0],t[1],t[2]);
                            this._box3.expandByPoint(i),
                            (i = i.clone()).y = this.parent.height,
                            this._box3.expandByPoint(i)
                        }
                        this._selfSize = this._box3.getSize().toArray()
                    }
                    return this._selfSize
                }
            }]),
            t
        }(ii),
        CombinePlacementGroup: function(e) {
            function t(e) {
                mt(this, t);
                var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.type = wt.CombinePlacementGroup,
                i
            }
            return yt(t, e),
            gt(t, [{
                key: "_initParams",
                value: function() {
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.belongRoomUserID = null,
                    this.transformations = [],
                    this._resourcesMap = {}
                }
            }, {
                key: "addObject",
                value: function(e) {
                    this.objects.push(e);
                    var t = new ni;
                    t.positions.push(e.position),
                    t.scales.push(e.scale),
                    t.quaternions.push(e.rotation),
                    this.transformations.push(t)
                }
            }, {
                key: "selfSize",
                get: function() {
                    if (null === this._selfSize) {
                        if (!(this.objects.length > 0))
                            return [0, 0, 0];
                        this._box3 = new pt;
                        for (var e = 0; e < this.objects.length; e++) {
                            var t = this.objects[e];
                            t.size && this._box3.union(t._box3)
                        }
                        this._selfSize = this._box3.getSize().toArray()
                    }
                    return this._selfSize
                }
            }, {
                key: "resources",
                get: function() {
                    if (null === this._resources) {
                        this._resources = [];
                        for (var e = 0; e < this.objects.length; e++)
                            for (var t = this.objects[e], i = 0; i < t.resources.length; i++) {
                                var r = t.resources[i];
                                this._resourcesMap[r.id] || (this._resources.push(r),
                                this._resourcesMap[r.id] = r)
                            }
                    }
                    return this._resources
                }
            }]),
            t
        }(ii),
        CombinePlacementWall: function(e) {
            function t(e) {
                mt(this, t);
                var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.type = wt.CombinePlacementWall,
                i
            }
            return yt(t, e),
            gt(t, [{
                key: "_initParams",
                value: function() {
                    vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.belongRoomUserID = null,
                    this.transformations = []
                }
            }, {
                key: "addObject",
                value: function(e) {
                    this.objects.push(e);
                    var t = new ni;
                    t.positions.push(e.position),
                    t.scales.push(e.scale),
                    t.quaternions.push(e.rotation),
                    this.transformations.push(t)
                }
            }, {
                key: "selfSize",
                get: function() {
                    if (null === this._selfSize) {
                        this._box3 = new pt;
                        for (var e = 0; e < this.objects.length; e++) {
                            var t = this.objects[e];
                            t.size && this._box3.union(t._box3)
                        }
                        this._selfSize = this._box3.getSize().toArray()
                    }
                    return this._selfSize
                }
            }]),
            t
        }(ii),
        Text3D: qt,
        GeneralPolygonLine: Yt,
        GeneralRouteLine: Qt
    }
      , ai = function() {
        function e() {
            mt(this, e),
            this.objects = [],
            this.calculaterManager = null,
            this.meshBuilderManager = null,
            this.ClassName = wt
        }
        return gt(e, [{
            key: "create",
            value: function(e) {
                var t = e.type
                  , i = e.parent
                  , r = new (0,
                si[t]);
                return r.parent = i,
                this.calculaterManager && (r.calculater = this.calculaterManager.create({
                    type: t,
                    object: r
                })),
                this.meshBuilderManager && (r.meshBuilder = this.meshBuilderManager.create({
                    type: t,
                    object: r
                })),
                r
            }
        }, {
            key: "registerObjectClass",
            value: function(e, t) {
                si[e] = t
            }
        }, {
            key: "unregisterObjectClass",
            value: function(e) {
                si[e] = null
            }
        }, {
            key: "containObjectClass",
            value: function(e) {
                return !!si[e]
            }
        }, {
            key: "clear",
            value: function() {
                this.objects = null,
                this.calculaterManager = null,
                this.meshBuilderManager = null
            }
        }]),
        e
    }()
      , li = (new ai,
    function() {
        function e(t) {
            mt(this, e),
            this._initParams(),
            this.manager = t.manager,
            this.type = "BaseResource"
        }
        return gt(e, [{
            key: "_initParams",
            value: function() {
                this.id = null,
                this.url = null,
                this.isBuilded = !1,
                this.ext = null,
                this.version = null,
                this.isDefault = !1,
                this.builder = null,
                this.manager = null,
                this.type = null,
                this.buildCompleteCallbacks = [],
                this.buildCompleteCallbackParams = [],
                this.buildPromise = null,
                this._registerBuilders = [],
                this._registerBuilderMaps = {},
                this.useStaticImage = !1,
                this.isResquestToBuild = !1,
                this._alreadyCallback = !1
            }
        }, {
            key: "build",
            value: function(e) {
                var t = this;
                if (this.isBuilded)
                    e && e(this),
                    t.notifyBuildCompleteListeners();
                else {
                    if (this.isResquestToBuild)
                        return;
                    this.isResquestToBuild = !0,
                    this.builder ? this.builder.build((function() {
                        t.isBuilded = !0,
                        e && e(t),
                        t.notifyBuildCompleteListeners()
                    }
                    )) : (t.isBuilded = !0,
                    e && e(t),
                    t.notifyBuildCompleteListeners())
                }
            }
        }, {
            key: "buildRegisterBuilder",
            value: function() {
                for (var e = 0; e < this._registerBuilders.length; e++) {
                    var t = this._registerBuilders[e];
                    t.isBuilded || t.build()
                }
            }
        }, {
            key: "registerBuildCallbackListener",
            value: function(e, t) {
                this.buildCompleteCallbacks.push(e),
                this.buildCompleteCallbackParams.push(t)
            }
        }, {
            key: "notifyBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.buildCompleteCallbacks.length; e++) {
                    (0,
                    this.buildCompleteCallbacks[e])(this, this.buildCompleteCallbackParams[e])
                }
                this._alreadyCallback = !0
            }
        }, {
            key: "containBuilder",
            value: function(e) {
                return !!this._registerBuilderMaps[e]
            }
        }, {
            key: "getBuilder",
            value: function(e) {
                return this._registerBuilderMaps[e] ? this._registerBuilderMaps[e] : null
            }
        }, {
            key: "registerBuilder",
            value: function(e, t) {
                this._registerBuilderMaps[e] ? console.warn("exist builder " + e) : (this._registerBuilderMaps[e] = t,
                this._registerBuilders.push(t),
                this.isBuilded = !1)
            }
        }, {
            key: "unRegisterBuilder",
            value: function(e) {
                if (this._registerBuilderMaps[e]) {
                    var t = this._registerBuilderMaps[e]
                      , i = this._registerBuilders.indexOf(t);
                    this._registerBuilders.splice(i, 1),
                    delete this._registerBuilderMaps[e]
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.isBuilded && this.builder && this.builder.clear();
                for (var e = 0; e < this._registerBuilders.length; e++) {
                    this._registerBuilders[e].clear()
                }
                this._initParams()
            }
        }]),
        e
    }())
      , ui = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.baseUrl = i.manager.baseModelUrl,
            i.type = "ModelResource",
            i.isModel = !0,
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.isSupportHeadAndFootModelWall = !1,
                this.size = [1, 1, 1],
                this.model = null,
                this.animations = null,
                this.baseUrl = null,
                this.texture = null
            }
        }, {
            key: "getModelUrl",
            value: function() {
                if (this.url)
                    return this.url;
                var e = this.getDownloadResourceVersion();
                return this.url ? this.url : this.baseUrl + this.id + "/" + e + "/gltf/"
            }
        }, {
            key: "getDownloadResourceVersion",
            value: function() {
                var e = 0;
                return this.manager.enableUserHighestVersionResource || (e = this.version),
                e
            }
        }]),
        t
    }(li)
      , ci = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.baseUrl = i.manager.baseTextureUrl,
            i.type = "TextureResource",
            i.callback = null,
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.material = null,
                this.wallMaterial = null,
                this.roomMaterial = null,
                this.texture = null,
                this.isDefault = !1,
                this.baseUrl = null,
                this.ext = null
            }
        }, {
            key: "build",
            value: function(e) {
                this.callback && (this.callback = null),
                this.callback = e,
                this.isDefault && !this.manager.isGlobalResourcesBuilded ? (this.manager.registerGlobalResourcesBuildCallbackListener(this._globalResourcesBuildedCallback, {
                    object: this,
                    callback: e
                }),
                this.manager.initGlobalResources()) : vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "build", this).call(this, e)
            }
        }, {
            key: "_globalResourcesBuildedCallback",
            value: function(e, t) {
                var i = t.object
                  , r = t.callback;
                i.build(r)
            }
        }, {
            key: "getTextureUrl",
            value: function() {
                return this.url ? this.url : this.baseUrl + this.id + "." + (null === this.ext ? "jpg" : this.ext)
            }
        }, {
            key: "cloneFlipYToFalse",
            value: function() {
                return !this._flipyFalseTexture && this.texture && (this._flipyFalseTexture = this.texture.clone(),
                this._flipyFalseTexture.flipY = !1,
                this._flipyFalseTexture.needsUpdate = !0),
                this._flipyFalseTexture
            }
        }, {
            key: "userDefaultWallLightMap",
            get: function() {
                return this.manager.userDefaultWallLightMap
            }
        }]),
        t
    }(li)
      , hi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "LocalCustomTextureResource",
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.localBaseUrl = null,
                this.localUrl = null,
                this.texture = null
            }
        }, {
            key: "getTextureUrl",
            value: function() {
                if (this.localUrl)
                    return this.localBaseUrl + this.localUrl;
                console.error("can not find url")
            }
        }]),
        t
    }(li)
      , pi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "CustomResource",
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.customTexture = null,
                this.color = null,
                this.renderMode = null,
                this.modelID = null
            }
        }, {
            key: "getModelUrl",
            value: function() {
                if (this.url)
                    return this.url;
                var e = this.getDownloadResourceVersion();
                return this.baseUrl + this.modelID + "/" + e + "/gltf/"
            }
        }, {
            key: "clear",
            value: function() {
                this.customTexture && this.customTexture.clear(),
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(ui)
      , di = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "CustomModelResource",
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "_initParams",
            value: function() {
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.localBaseUrl = null,
                this.localUrl = null
            }
        }, {
            key: "getModelUrl",
            value: function() {
                if (this.url)
                    return this.url;
                var e = null;
                return this.localUrl && (e = this.localBaseUrl + this.localUrl),
                e
            }
        }]),
        t
    }(pi)
      , fi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "Max2TjsResource",
            i
        }
        return yt(t, e),
        t
    }(di)
      , mi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "EmptyModelResource",
            i
        }
        return yt(t, e),
        t
    }(ui)
      , gi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "EmptyTextureResource",
            i
        }
        return yt(t, e),
        t
    }(ci)
      , vi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "Max2TjsResource",
            i
        }
        return yt(t, e),
        t
    }(di)
      , yi = {
        ModelResource: ui,
        TextureResource: ci,
        LocalCustomTextureResource: hi,
        CustomModelResource: di,
        CustomResource: pi,
        Max2TjsResource: fi,
        Max2TjsResource_RotationDownBottom: function(e) {
            function t(e) {
                mt(this, t);
                var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.type = "Max2TjsResource_RotationDownBottom",
                i
            }
            return yt(t, e),
            t
        }(di),
        EmptyModelResource: mi,
        EmptyTextureResource: gi,
        Max2TjsKeepRootRotationResource: vi
    }
      , bi = {
        TextureResource: "TextureResource",
        ModelResource: "ModelResource",
        CustomModelResource: "CustomModelResource",
        CustomResource: "CustomResource",
        LocalCustomTextureResource: "LocalCustomTextureResource",
        Max2TjsResource: "Max2TjsResource",
        Max2TjsResource_RotationDownBottom: "Max2TjsResource_RotationDownBottom",
        EmptyTextureResource: "EmptyTextureResource",
        EmptyModelResource: "EmptyModelResource"
    }
      , _i = function() {
        function e(t) {
            mt(this, e),
            this._initParams(),
            this.resource = t.resource,
            this.manager = t.manager
        }
        return gt(e, [{
            key: "_initParams",
            value: function() {
                this.resource = null,
                this.manager = null,
                this.promise = null
            }
        }, {
            key: "build",
            value: function(e) {
                this.download((function() {
                    e && e()
                }
                ))
            }
        }, {
            key: "download",
            value: function(e) {}
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }, {
            key: "_dispose",
            value: function(e) {
                if (e.isMesh) {
                    var t = e;
                    if (t) {
                        var i = t.material
                          , r = t.geometry;
                        t.isDestory = !0,
                        i && (this._disposeMaterial(i),
                        t.material = null),
                        r && (r.isDestory = !0,
                        r.dispose(),
                        t.geometry = null)
                    }
                }
                if (e)
                    for (var n = e.children, o = 0; o < n.length; o++) {
                        var s = n[o];
                        this._dispose(s)
                    }
            }
        }, {
            key: "_disposeMaterial",
            value: function(e) {
                if (e instanceof Array)
                    for (var t = 0; t < e.length; t++) {
                        var i = e[t];
                        this._disposeMaterial(i)
                    }
                else
                    e.isDestory = !0,
                    e.map && e.map.dispose(),
                    e.aoMap && e.aoMap.dispose(),
                    e.dispose()
            }
        }]),
        e
    }()
      , xi = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        gt(t, [{
            key: "getDownloadResourceVersion",
            value: function() {
                var e = 0;
                return this.manager.enableUserHighestVersionResource || (e = this.resource.version),
                e
            }
        }, {
            key: "download",
            value: function(e) {
                if (Zt.isTesting) {
                    var t = new THREE.Object3D
                      , i = new THREE.BoxBufferGeometry(1,1,1)
                      , r = new THREE.MeshBasicMaterial({
                        color: 16776960
                    })
                      , n = new THREE.Mesh(i,r);
                    return t.add(n),
                    void this._successCallback({
                        node: t
                    }, e)
                }
                var o = this
                  , s = new thingjs.GLTFLoader
                  , a = this.resource.getModelUrl();
                s.loadFromURL({
                    url: a,
                    useStaticImage: this.resource.useStaticImage,
                    jsonCallback: function(e) {
                        o.resource.indexJson = e
                    },
                    modelCallback: function(t) {
                        o._successCallback(t, e)
                    },
                    errorCallback: function() {
                        o._errorCallback(e)
                    }
                })
            }
        }, {
            key: "_successCallback",
            value: function(e, t) {
                this.resource.animations = e.animations,
                this.resource.downloadModelRoot = e,
                this.resource.model = e.node,
                this.ready = !0,
                t && t(),
                this.debug && console.log(this.id + " download complete")
            }
        }, {
            key: "_errorCallback",
            value: function(e) {
                console.error("download error " + this.resource.getModelUrl()),
                this.ready = !0,
                this.resource.model = new THREE.Object3D,
                this.resource.isEmpty = !0,
                e && e()
            }
        }, {
            key: "clear",
            value: function() {
                this._dispose(this.resource.model),
                this.resource.model = null,
                this.resource.animations = null,
                this.resource.downloadModelRoot = null,
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(_i)
      , Ei = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        gt(t, [{
            key: "download",
            value: function(e) {
                this.initMaterial();
                if ("bundle" === this.resource.ext)
                    return this.ready = !0,
                    void e();
                this._build(e)
            }
        }, {
            key: "_lightMapResourceBuildCallback",
            value: function(e, t) {
                t.builder._build(t.downloadCallback)
            }
        }, {
            key: "initMaterial",
            value: function() {
                this.resource.material = new THREE.MeshStandardMaterial({
                    metalness: .5,
                    roughness: .5
                }),
                this.resource.wallMaterial = new THREE.MeshStandardMaterial({
                    color: 16777215,
                    metalness: .5,
                    roughness: .5
                });
                var e = this.resource.wallMaterial;
                this.resource.isDefault ? this.resource.userDefaultWallLightMap && (e.defines = e.defines || {},
                e.defines.WALL_AO = !0,
                e.metalness = .2,
                e.roughness = .8,
                e.needsUpdate = !0) : (e.metalness = 0,
                e.roughness = 1);
                var t = new THREE.MeshPhongMaterial({
                    color: 16777215,
                    reflectivity: .1
                });
                t.shininess = 0,
                this.resource.roomMaterial = t,
                t.defines = t.defines || {},
                t.defines.FLOOR_AO = !0
            }
        }, {
            key: "_downloadTexture",
            value: function(e, t, i) {
                if (Zt.isTesting)
                    t(new THREE.Texture);
                else {
                    var r = new THREE.TextureLoader;
                    r.enableStaticImage = this.resource.useStaticImage,
                    r.setCrossOrigin("anonymous"),
                    r.load(e, (function(e) {
                        t && t(e)
                    }
                    ), (function(e) {}
                    ), (function(e) {
                        i && i()
                    }
                    ))
                }
            }
        }, {
            key: "_build",
            value: function(e) {
                var t = this;
                t._downloadTexture(t.resource.getTextureUrl(), (function(i) {
                    i.wrapS = THREE.RepeatWrapping,
                    i.wrapT = THREE.RepeatWrapping,
                    t.resource.texture = i,
                    t.resource.material.map = i,
                    t.resource.wallMaterial.map = i,
                    t.resource.roomMaterial.map = i,
                    t.resource.isDefault && t.resource.manager.wallLightMapResource && (t.resource.wallMaterial.aoMap = t.resource.manager.wallLightMapResource.texture),
                    t.ready = !0,
                    t.resource.material.roughness = 1,
                    t.debug && console.log(t.id + " download complete"),
                    e && e()
                }
                ), (function() {
                    t.ready = !0,
                    console.error("download error " + t.resource.getTextureUrl()),
                    e && e()
                }
                ))
            }
        }, {
            key: "clear",
            value: function() {
                this.resource.material && this._disposeMaterial(this.resource.material),
                this.resource.wallMaterial && this._disposeMaterial(this.resource.wallMaterial),
                this.resource.roomMaterial && this._disposeMaterial(this.resource.roomMaterial),
                this.resource.texture && this.resource.texture.dispose(),
                this.resource.texture = null,
                this.resource.material = null,
                this.resource.wallMaterial = null,
                this.resource.roomMaterial = null,
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(_i)
      , wi = function(e) {
        function t(e) {
            mt(this, t);
            var i = bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.callback = null,
            i
        }
        return yt(t, e),
        gt(t, [{
            key: "download",
            value: function(e) {
                var i = this;
                this.callback = e,
                vt(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "download", this).call(this, (function() {
                    i.resource.customTexture ? (i.resource.customTexture.registerBuildCallbackListener((function() {
                        i._afterDownload()
                    }
                    )),
                    i.resource.customTexture.build()) : i._afterDownload()
                }
                ))
            }
        }, {
            key: "_afterDownload",
            value: function() {
                this._initCustomInfo(),
                this.callback && this.callback(this)
            }
        }, {
            key: "_initCustomInfo",
            value: function() {
                null !== this.resource.customTexture && this._changeWithCustomTexture(this.resource.model),
                null !== this.resource.color && this._changeWithCustomColor(this.resource.model),
                null !== this.resource.opacity && this._changeWithOpacity(this.resource.model),
                null !== this.resource.renderMode && this._changeRenderMode(this.resource.model),
                this.resource.ready = !0
            }
        }, {
            key: "_changeRenderMode",
            value: function(e) {
                var t = this;
                e instanceof THREE.Mesh && (Array.isArray(e.material) ? e.material : [e.material]).forEach((function(e) {
                    if (null !== t.resource.renderMode)
                        switch (t.resource.renderMode) {
                        case 1:
                            e.transparent = !1,
                            e.alphaTest = .5;
                            break;
                        case 3:
                        case 2:
                            e.transparent = !0;
                            break;
                        default:
                            console.error("can not find renderMode " + t.renderMode)
                        }
                }
                ));
                for (var i = 0; i < e.children.length; i++) {
                    var r = e.children[i];
                    this._changeRenderMode(r)
                }
            }
        }, {
            key: "_changeWithCustomColor",
            value: function(e) {
                var t = this;
                e instanceof THREE.Mesh && (Array.isArray(e.material) ? e.material : [e.material]).forEach((function(e) {
                    e.color.r = t.resource.color[0],
                    e.color.g = t.resource.color[1],
                    e.color.b = t.resource.color[2]
                }
                ));
                for (var i = 0; i < e.children.length; i++) {
                    var r = e.children[i];
                    this._changeWithCustomColor(r)
                }
            }
        }, {
            key: "_changeWithOpacity",
            value: function(e) {
                var t = this;
                e instanceof THREE.Mesh && (Array.isArray(e.material) ? e.material : [e.material]).forEach((function(e) {
                    null !== t.resource.opacity && void 0 !== t.resource.opacity && (e.opacity = t.resource.opacity,
                    e.transparent = !0)
                }
                ));
                for (var i = 0; i < e.children.length; i++) {
                    var r = e.children[i];
                    this._changeWithOpacity(r)
                }
            }
        }, {
            key: "_changeWithCustomTexture",
            value: function(e) {
                var t = this;
                e instanceof THREE.Mesh && (t.resource.customTexture && t.resource.customTexture.texture && (t.resource.customTexture.texture.flipY = !1),
                (Array.isArray(e.material) ? e.material : [e.material]).forEach((function(e) {
                    e.map = t.resource.customTexture.texture
                }
                )));
                for (var i = 0; i < e.children.length; i++) {
                    var r = e.children[i];
                    this._changeWithCustomTexture(r)
                }
            }
        }]),
        t
    }(xi)
      , Ti = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        t
    }(wi)
      , Mi = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        t
    }(Ei)
      , Ci = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        gt(t, [{
            key: "_successCallback",
            value: function(e, t) {
                this.resource.animations = e.animations,
                this.resource.model = e.node.children[0],
                this.resource.downloadModelRoot = e,
                this._applyRotationToChildren(this.resource.model),
                this.ready = !0,
                t && t(),
                this.debug && console.log(this.id + " download complete")
            }
        }, {
            key: "_applyRotationToChildren",
            value: function(e) {
                for (var t = e.scale, i = 0; i < e.children.length; i++) {
                    var r = e.children[i]
                      , n = r.position.clone()
                      , o = r.scale;
                    n.applyQuaternion(e.quaternion),
                    r.position.copy(n),
                    r.scale.set(t.x * o.x, t.y * o.y, t.z * o.z),
                    r.quaternion.premultiply(e.quaternion)
                }
                if (e.children.length > 0) {
                    e.quaternion.set(0, 0, 0, 1),
                    e.scale.set(1, 1, 1);
                    for (var s = 0; s < e.children.length; s++) {
                        var a = e.children[s];
                        a.isMesh || this._applyRotationToChildren(a)
                    }
                }
            }
        }]),
        t
    }(Ti)
      , Si = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        gt(t, [{
            key: "download",
            value: function(e) {
                var t = new THREE.Object3D;
                this.resource.isEmpty = !0,
                this.resource.model = t,
                this._successCallback(t, e)
            }
        }, {
            key: "_successCallback",
            value: function(e, t) {
                this.ready = !0,
                t && t(),
                this.debug && console.log(this.id + " download complete")
            }
        }]),
        t
    }(xi)
      , ji = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        gt(t, [{
            key: "_downloadTexture",
            value: function(e, t, i) {
                var r = new THREE.Texture;
                t && t(r)
            }
        }]),
        t
    }(Ei)
      , Pi = function(e) {
        function t(e) {
            return mt(this, t),
            bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return yt(t, e),
        gt(t, [{
            key: "_successCallback",
            value: function(e, t) {
                this.resource.animations = e.animations,
                this.resource.model = e.node.children[0],
                this.resource.downloadModelRoot = e,
                this.ready = !0,
                t && t(),
                this.debug && console.log(this.id + " download complete")
            }
        }]),
        t
    }(Ci)
      , Ri = (new THREE.Quaternion,
    new THREE.Quaternion(.70710676908493,0,0,.70710676908493),
    new THREE.Quaternion(-.70710676908493,0,0,.70710676908493),
    (new THREE.Matrix4).set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1))
      , Di = new THREE.Matrix4;
    function Ai(e) {
        for (var t = new THREE.Matrix4, i = 0; i < e.length / 3; i++) {
            var r = 3 * i
              , n = new THREE.Vector3
              , o = new THREE.Quaternion
              , s = new THREE.Vector3(e[r],e[r + 1],e[r + 2]);
            t.compose(n, o, s),
            t.premultiply(Ri).multiply(Di),
            t.decompose(n, o, s),
            s.toArray(e, r)
        }
    }
    function ki(e) {
        for (var t = new THREE.Matrix4, i = 0; i < e.length / 4; i++) {
            var r = 4 * i
              , n = new THREE.Vector3
              , o = new THREE.Quaternion(e[r],e[r + 1],e[r + 2],e[r + 3])
              , s = new THREE.Vector3(1,1,1);
            t.compose(n, o, s),
            t.premultiply(Ri).multiply(Di),
            t.decompose(n, o, s),
            o.toArray(e, r)
        }
    }
    Di.getInverse(Ri);
    var Oi = {
        ModelResource: xi,
        TextureResource: Ei,
        CustomResource: wi,
        CustomModelResource: Ti,
        LocalCustomTextureResource: Mi,
        Max2TjsResource: Ci,
        Max2TjsResource_RotationDownBottom: function(e) {
            function t(e) {
                return mt(this, t),
                bt(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
            }
            return yt(t, e),
            gt(t, [{
                key: "_successCallback",
                value: function(e, t) {
                    this.resource.animations = e.animations,
                    this.resource.model = e.node.children[0],
                    this.resource.downloadModelRoot = e,
                    this._initAnimationDataMap(),
                    this._applyRotation(this.resource.model),
                    this.ready = !0,
                    t && t(),
                    this.debug && console.log(this.id + " download complete")
                }
            }, {
                key: "_applyRotation",
                value: function(e) {
                    var t = this;
                    e.children.forEach((function(e) {
                        var i = new THREE.Matrix4;
                        i.compose(e.position, e.quaternion, e.scale),
                        i.multiply(Di),
                        i.decompose(e.position, e.quaternion, e.scale),
                        function e(i) {
                            t._applyRotationToAnimation(i),
                            i.isMesh && !i.geometry.userData.isRotate && (i.geometry.applyMatrix4(Ri),
                            i.geometry.userData.isRotate = !0);
                            i.children.forEach((function(t) {
                                t.updateMatrix(),
                                t.matrix.premultiply(Ri).multiply(Di),
                                t.matrix.decompose(t.position, t.quaternion, t.scale),
                                e(t)
                            }
                            ))
                        }(e)
                    }
                    ))
                }
            }, {
                key: "_initAnimationDataMap",
                value: function() {
                    var e = this.resource._animationMap = {}
                      , t = this.resource.animations;
                    t && t.forEach((function(t) {
                        t.tracks.forEach((function(t) {
                            var i = t.name.split(".")
                              , r = i[0];
                            t._nodeName = r,
                            t._animationType = i[1];
                            var n = e[r];
                            n || (e[r] = n = []),
                            n.push(t)
                        }
                        ))
                    }
                    ))
                }
            }, {
                key: "_applyRotationToAnimation",
                value: function(e) {
                    var t = this;
                    function i(i) {
                        var r = t.resource._animationMap[e.name];
                        r && r.forEach((function(e) {
                            e._isRotation = !0,
                            i(e._animationType, e.values)
                        }
                        ))
                    }
                    "RootNode" === e.parent.name ? i((function(e, t) {
                        "quaternion" === e ? ki(t) : "scale" === e && Ai(t)
                    }
                    )) : i((function(e, t) {
                        "position" === e ? function(e) {
                            for (var t = 0; t < e.length / 3; t++) {
                                var i = 3 * t + 1
                                  , r = i + 1
                                  , n = e[i]
                                  , o = e[r];
                                e[i] = o,
                                e[r] = -n
                            }
                        }(t) : "quaternion" === e ? ki(t) : "scale" === e && Ai(t)
                    }
                    ))
                }
            }]),
            t
        }(Ti),
        Max2TjsKeepRootRotationResource: Pi,
        EmptyModelResource: Si,
        EmptyTextureResource: ji
    }
      , Bi = new (function() {
        function e(t) {
            mt(this, e),
            this.enableUserHighestVersionResource = !0,
            this.useStaticImage = !1,
            this.userDefaultWallLightMap = !0,
            this.requestDownloadResources = [],
            this.resourceDownloadSuccessCallback = []
        }
        return gt(e, [{
            key: "create",
            value: function(e) {
                var t = e.type
                  , i = Oi[t];
                return e.manager = this,
                new i(e)
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e, t) {
                this.requestDownloadResources.push(e),
                this.resourceDownloadSuccessCallback.push(t)
            }
        }]),
        e
    }())
      , Fi = function() {
        function e() {
            mt(this, e),
            this.textures = [],
            this.models = [],
            this.allResources = [],
            this.builderManager = Bi,
            this.ClassName = bi,
            this.baseTextureUrl = "https://static.3dmomoda.com/textures/",
            this.baseModelUrl = "https://model.3dmomoda.com/models/",
            this.ableToSupportFootAndHeadModelWalls = ["C9FB3F9A29C842F79F02CECC4037FEA1"],
            this.wallLightMapResource = null,
            this.enableUserHighestVersionResource = !0,
            this.globalResourcesBuildCompleteCallbacks = [],
            this.globalResourcesBuildCompleteCallbackParams = [],
            this._isGlobalResourcesBuilded = !1,
            this.userDefaultWallLightMap = !0,
            this._emptyTextureResource = this.create({
                type: "EmptyTextureResource",
                id: "emptyTexture"
            }),
            this._emptyModelResource = this.create({
                type: "EmptyModelResource",
                id: "emptyModel"
            })
        }
        return gt(e, [{
            key: "initGlobalResources",
            value: function() {
                this._isGlobalResourcesBuilded || (this._isGlobalResourcesBuilded = !0,
                this.wallLightMapResource ? this.wallLightMapResource.isBuilded ? (this._isGlobalResourcesBuilded = !0,
                this.notifyGlobalResourcesBuildCompleteListeners()) : (this.wallLightMapResource.registerBuildCallbackListener(this._wallLightResoruceBuildCallback, {
                    manager: this
                }),
                this.wallLightMapResource.isResquestToBuild || this.wallLightMapResource.build()) : this.notifyGlobalResourcesBuildCompleteListeners())
            }
        }, {
            key: "_wallLightResoruceBuildCallback",
            value: function(e, t) {
                var i = t.manager;
                i._isGlobalResourcesBuilded = !0,
                i.notifyGlobalResourcesBuildCompleteListeners()
            }
        }, {
            key: "registerGlobalResourcesBuildCallbackListener",
            value: function(e, t) {
                this.globalResourcesBuildCompleteCallbacks.push(e),
                this.globalResourcesBuildCompleteCallbackParams.push(t)
            }
        }, {
            key: "notifyGlobalResourcesBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.globalResourcesBuildCompleteCallbacks.length; e++) {
                    (0,
                    this.globalResourcesBuildCompleteCallbacks[e])(this, this.globalResourcesBuildCompleteCallbackParams[e])
                }
            }
        }, {
            key: "create",
            value: function(e) {
                var t = e.type
                  , i = new (0,
                yi[t])({
                    manager: this
                });
                return i.id = e.id,
                this.builderManager && (i.builder = this.builderManager.create({
                    type: t,
                    resource: i
                })),
                i
            }
        }, {
            key: "getEmptyModelResource",
            value: function() {
                return this._emptyModelResource
            }
        }, {
            key: "getEmptyTextureResource",
            value: function() {
                return this._emptyTextureResource
            }
        }, {
            key: "disposeModels",
            value: function() {
                for (var e = 0; e < this.models.length; e++) {
                    this.models[e].clear()
                }
            }
        }, {
            key: "disposeTextures",
            value: function() {
                for (var e = 0; e < this.textures.length; e++) {
                    this.textures[e].clear()
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.disposeTextures(),
                this.disposeModels(),
                this.textures = [],
                this.models = []
            }
        }, {
            key: "isGlobalResourcesBuilded",
            get: function() {
                return this._isGlobalResourcesBuilded
            }
        }]),
        e
    }()
      , Li = (new Fi,
    {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            var e, t = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""), i = new Array(36), r = 0;
            return function() {
                for (var n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }(),
        clamp: function(e, t, i) {
            return Math.max(t, Math.min(i, e))
        },
        euclideanModulo: function(e, t) {
            return (e % t + t) % t
        },
        mapLinear: function(e, t, i, r, n) {
            return r + (e - t) * (n - r) / (i - t)
        },
        lerp: function(e, t, i) {
            return (1 - i) * e + i * t
        },
        smoothstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * (3 - 2 * e)
        },
        smootherstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * e * (e * (6 * e - 15) + 10)
        },
        randInt: function(e, t) {
            return e + Math.floor(Math.random() * (t - e + 1))
        },
        randFloat: function(e, t) {
            return e + Math.random() * (t - e)
        },
        randFloatSpread: function(e) {
            return e * (.5 - Math.random())
        },
        degToRad: function(e) {
            return e * Li.DEG2RAD
        },
        radToDeg: function(e) {
            return e * Li.RAD2DEG
        },
        isPowerOfTwo: function(e) {
            return 0 == (e & e - 1) && 0 !== e
        },
        nearestPowerOfTwo: function(e) {
            return Math.pow(2, Math.round(Math.log(e) / Math.LN2))
        },
        nextPowerOfTwo: function(e) {
            return e--,
            e |= e >> 1,
            e |= e >> 2,
            e |= e >> 4,
            e |= e >> 8,
            e |= e >> 16,
            ++e
        }
    })
      , Ii = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , Ni = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Hi = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , Ui = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , zi = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , Vi = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , Wi = function(e, t) {
        if (Array.isArray(e))
            return e;
        if (Symbol.iterator in Object(e))
            return function(e, t) {
                var i = []
                  , r = !0
                  , n = !1
                  , o = void 0;
                try {
                    for (var s, a = e[Symbol.iterator](); !(r = (s = a.next()).done) && (i.push(s.value),
                    !t || i.length !== t); r = !0)
                        ;
                } catch (e) {
                    n = !0,
                    o = e
                } finally {
                    try {
                        !r && a.return && a.return()
                    } finally {
                        if (n)
                            throw o
                    }
                }
                return i
            }(e, t);
        throw new TypeError("Invalid attempt to destructure non-iterable instance")
    }
      , Gi = function() {
        function e(t, i, r, n) {
            Ni(this, e),
            this._x = t || 0,
            this._y = i || 0,
            this._z = r || 0,
            this._w = void 0 !== n ? n : 1
        }
        return Hi(e, [{
            key: "slerp",
            value: function(e, t, i, r) {
                return i.copy(e).slerp(t, r)
            }
        }, {
            key: "slerpFlat",
            value: function(e, t, i, r, n, o, s) {
                var a = i[r + 0]
                  , l = i[r + 1]
                  , u = i[r + 2]
                  , c = i[r + 3]
                  , h = n[o + 0]
                  , p = n[o + 1]
                  , d = n[o + 2]
                  , f = n[o + 3];
                if (c !== f || a !== h || l !== p || u !== d) {
                    var m = 1 - s
                      , g = a * h + l * p + u * d + c * f
                      , v = g >= 0 ? 1 : -1
                      , y = 1 - g * g;
                    if (y > Number.EPSILON) {
                        var b = Math.sqrt(y)
                          , _ = Math.atan2(b, g * v);
                        m = Math.sin(m * _) / b,
                        s = Math.sin(s * _) / b
                    }
                    var x = s * v;
                    if (a = a * m + h * x,
                    l = l * m + p * x,
                    u = u * m + d * x,
                    c = c * m + f * x,
                    m === 1 - s) {
                        var E = 1 / Math.sqrt(a * a + l * l + u * u + c * c);
                        a *= E,
                        l *= E,
                        u *= E,
                        c *= E
                    }
                }
                e[t] = a,
                e[t + 1] = l,
                e[t + 2] = u,
                e[t + 3] = c
            }
        }, {
            key: "set",
            value: function(e, t, i, r) {
                return this._x = e,
                this._y = t,
                this._z = i,
                this._w = r,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this._x,this._y,this._z,this._w)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this._x = e.x,
                this._y = e.y,
                this._z = e.z,
                this._w = e.w,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromEuler",
            value: function(e, t) {
                if (!e || !e.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e.order
                  , s = Math.cos
                  , a = Math.sin
                  , l = s(i / 2)
                  , u = s(r / 2)
                  , c = s(n / 2)
                  , h = a(i / 2)
                  , p = a(r / 2)
                  , d = a(n / 2);
                return "XYZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "YXZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "ZXY" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "ZYX" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "YZX" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c - h * p * d) : "XZY" === o && (this._x = h * u * c - l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c + h * p * d),
                !1 !== t && this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromAxisAngle",
            value: function(e, t) {
                var i = t / 2
                  , r = Math.sin(i);
                return this._x = e.x * r,
                this._y = e.y * r,
                this._z = e.z * r,
                this._w = Math.cos(i),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromRotationMatrix",
            value: function(e) {
                var t, i = e.elements, r = i[0], n = i[4], o = i[8], s = i[1], a = i[5], l = i[9], u = i[2], c = i[6], h = i[10], p = r + a + h;
                return p > 0 ? (t = .5 / Math.sqrt(p + 1),
                this._w = .25 / t,
                this._x = (c - l) * t,
                this._y = (o - u) * t,
                this._z = (s - n) * t) : r > a && r > h ? (t = 2 * Math.sqrt(1 + r - a - h),
                this._w = (c - l) / t,
                this._x = .25 * t,
                this._y = (n + s) / t,
                this._z = (o + u) / t) : a > h ? (t = 2 * Math.sqrt(1 + a - r - h),
                this._w = (o - u) / t,
                this._x = (n + s) / t,
                this._y = .25 * t,
                this._z = (l + c) / t) : (t = 2 * Math.sqrt(1 + h - r - a),
                this._w = (s - n) / t,
                this._x = (o + u) / t,
                this._y = (l + c) / t,
                this._z = .25 * t),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromUnitVectors",
            value: function(e, t) {
                var i, r = new qi;
                return void 0 === r && (r = new qi),
                (i = e.dot(t) + 1) < 1e-6 ? (i = 0,
                Math.abs(e.x) > Math.abs(e.z) ? r.set(-e.y, e.x, 0) : r.set(0, -e.z, e.y)) : r.crossVectors(e, t),
                this._x = r.x,
                this._y = r.y,
                this._z = r.z,
                this._w = i,
                this.normalize()
            }
        }, {
            key: "inverse",
            value: function() {
                return this.conjugate().normalize()
            }
        }, {
            key: "conjugate",
            value: function() {
                return this._x *= -1,
                this._y *= -1,
                this._z *= -1,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }
        }, {
            key: "normalize",
            value: function() {
                var e = this.length();
                return 0 === e ? (this._x = 0,
                this._y = 0,
                this._z = 0,
                this._w = 1) : (e = 1 / e,
                this._x = this._x * e,
                this._y = this._y * e,
                this._z = this._z * e,
                this._w = this._w * e),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e)
            }
        }, {
            key: "premultiply",
            value: function(e) {
                return this.multiplyQuaternions(e, this)
            }
        }, {
            key: "multiplyQuaternions",
            value: function(e, t) {
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e._w
                  , s = t._x
                  , a = t._y
                  , l = t._z
                  , u = t._w;
                return this._x = i * u + o * s + r * l - n * a,
                this._y = r * u + o * a + n * s - i * l,
                this._z = n * u + o * l + i * a - r * s,
                this._w = o * u - i * s - r * a - n * l,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "slerp",
            value: function(e, t) {
                if (0 === t)
                    return this;
                if (1 === t)
                    return this.copy(e);
                var i = this._x
                  , r = this._y
                  , n = this._z
                  , o = this._w
                  , s = o * e._w + i * e._x + r * e._y + n * e._z;
                if (s < 0 ? (this._w = -e._w,
                this._x = -e._x,
                this._y = -e._y,
                this._z = -e._z,
                s = -s) : this.copy(e),
                s >= 1)
                    return this._w = o,
                    this._x = i,
                    this._y = r,
                    this._z = n,
                    this;
                var a = Math.sqrt(1 - s * s);
                if (Math.abs(a) < .001)
                    return this._w = .5 * (o + this._w),
                    this._x = .5 * (i + this._x),
                    this._y = .5 * (r + this._y),
                    this._z = .5 * (n + this._z),
                    this;
                var l = Math.atan2(a, s)
                  , u = Math.sin((1 - t) * l) / a
                  , c = Math.sin(t * l) / a;
                return this._w = o * u + this._w * c,
                this._x = i * u + this._x * c,
                this._y = r * u + this._y * c,
                this._z = n * u + this._z * c,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this._x = e[t],
                this._y = e[t + 1],
                this._z = e[t + 2],
                this._w = e[t + 3],
                this.onChangeCallback(),
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this._x,
                e[t + 1] = this._y,
                e[t + 2] = this._z,
                e[t + 3] = this._w,
                e
            }
        }, {
            key: "onChange",
            value: function(e) {
                return this.onChangeCallback = e,
                this
            }
        }, {
            key: "onChangeCallback",
            value: function() {}
        }, {
            key: "x",
            get: function() {
                return this._x
            },
            set: function(e) {
                this._x = e,
                this.onChangeCallback()
            }
        }, {
            key: "y",
            get: function() {
                return this._y
            },
            set: function(e) {
                this._y = e,
                this.onChangeCallback()
            }
        }, {
            key: "z",
            get: function() {
                return this._z
            },
            set: function(e) {
                this._z = e,
                this.onChangeCallback()
            }
        }, {
            key: "w",
            get: function() {
                return this._w
            },
            set: function(e) {
                this._w = e,
                this.onChangeCallback()
            }
        }]),
        e
    }()
      , qi = function() {
        function e(t, i, r) {
            Ni(this, e),
            this.x = t || 0,
            this.y = i || 0,
            this.z = r || 0,
            this.isVector3 = !0
        }
        return Hi(e, [{
            key: "set",
            value: function(e, t, i) {
                return this.x = e,
                this.y = t,
                this.z = i,
                this
            }
        }, {
            key: "setScalar",
            value: function(e) {
                return this.x = e,
                this.y = e,
                this.z = e,
                this
            }
        }, {
            key: "setX",
            value: function(e) {
                return this.x = e,
                this
            }
        }, {
            key: "setY",
            value: function(e) {
                return this.y = e,
                this
            }
        }, {
            key: "setZ",
            value: function(e) {
                return this.z = e,
                this
            }
        }, {
            key: "setComponent",
            value: function(e, t) {
                switch (e) {
                case 0:
                    this.x = t;
                    break;
                case 1:
                    this.y = t;
                    break;
                case 2:
                    this.z = t;
                    break;
                default:
                    throw new Error("index is out of range: " + e)
                }
                return this
            }
        }, {
            key: "getComponent",
            value: function(e) {
                switch (e) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + e)
                }
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this.x,this.y,this.z)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.x = e.x,
                this.y = e.y,
                this.z = e.z,
                this
            }
        }, {
            key: "add",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(e, t)) : (this.x += e.x,
                this.y += e.y,
                this.z += e.z,
                this)
            }
        }, {
            key: "addScalar",
            value: function(e) {
                return this.x += e,
                this.y += e,
                this.z += e,
                this
            }
        }, {
            key: "addVectors",
            value: function(e, t) {
                return this.x = e.x + t.x,
                this.y = e.y + t.y,
                this.z = e.z + t.z,
                this
            }
        }, {
            key: "addScaledVector",
            value: function(e, t) {
                return this.x += e.x * t,
                this.y += e.y * t,
                this.z += e.z * t,
                this
            }
        }, {
            key: "sub",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(e, t)) : (this.x -= e.x,
                this.y -= e.y,
                this.z -= e.z,
                this)
            }
        }, {
            key: "subScalar",
            value: function(e) {
                return this.x -= e,
                this.y -= e,
                this.z -= e,
                this
            }
        }, {
            key: "subVectors",
            value: function(e, t) {
                return this.x = e.x - t.x,
                this.y = e.y - t.y,
                this.z = e.z - t.z,
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                this.multiplyVectors(e, t)) : (this.x *= e.x,
                this.y *= e.y,
                this.z *= e.z,
                this)
            }
        }, {
            key: "multiplyScalar",
            value: function(e) {
                return this.x *= e,
                this.y *= e,
                this.z *= e,
                this
            }
        }, {
            key: "multiplyVectors",
            value: function(e, t) {
                return this.x = e.x * t.x,
                this.y = e.y * t.y,
                this.z = e.z * t.z,
                this
            }
        }, {
            key: "applyEuler",
            value: function() {
                var e = new Gi;
                return function(t) {
                    return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                    this.applyQuaternion(e.setFromEuler(t))
                }()
            }
        }, {
            key: "applyAxisAngle",
            value: function() {
                var e = new Gi;
                return function(t, i) {
                    return this.applyQuaternion(e.setFromAxisAngle(t, i))
                }()
            }
        }, {
            key: "applyMatrix3",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[3] * i + n[6] * r,
                this.y = n[1] * t + n[4] * i + n[7] * r,
                this.z = n[2] * t + n[5] * i + n[8] * r,
                this
            }
        }, {
            key: "applyQuaternion",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.x
                  , o = e.y
                  , s = e.z
                  , a = e.w
                  , l = a * t + o * r - s * i
                  , u = a * i + s * t - n * r
                  , c = a * r + n * i - o * t
                  , h = -n * t - o * i - s * r;
                return this.x = l * a + h * -n + u * -s - c * -o,
                this.y = u * a + h * -o + c * -n - l * -s,
                this.z = c * a + h * -s + l * -o - u * -n,
                this
            }
        }, {
            key: "transformDirection",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[4] * i + n[8] * r,
                this.y = n[1] * t + n[5] * i + n[9] * r,
                this.z = n[2] * t + n[6] * i + n[10] * r,
                this.normalize()
            }
        }, {
            key: "divide",
            value: function(e) {
                return this.x /= e.x,
                this.y /= e.y,
                this.z /= e.z,
                this
            }
        }, {
            key: "divideScalar",
            value: function(e) {
                return this.multiplyScalar(1 / e)
            }
        }, {
            key: "min",
            value: function(e) {
                return this.x = Math.min(this.x, e.x),
                this.y = Math.min(this.y, e.y),
                this.z = Math.min(this.z, e.z),
                this
            }
        }, {
            key: "max",
            value: function(e) {
                return this.x = Math.max(this.x, e.x),
                this.y = Math.max(this.y, e.y),
                this.z = Math.max(this.z, e.z),
                this
            }
        }, {
            key: "clamp",
            value: function(e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)),
                this.y = Math.max(e.y, Math.min(t.y, this.y)),
                this.z = Math.max(e.z, Math.min(t.z, this.z)),
                this
            }
        }, {
            key: "clampScalar",
            value: function() {
                var t = new e
                  , i = new e;
                return function(e, r) {
                    return t.set(e, e, e),
                    i.set(r, r, r),
                    this.clamp(t, i)
                }()
            }
        }, {
            key: "clampLength",
            value: function(e, t) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)))
            }
        }, {
            key: "floor",
            value: function() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this
            }
        }, {
            key: "ceil",
            value: function() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this
            }
        }, {
            key: "round",
            value: function() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this
            }
        }, {
            key: "roundToZero",
            value: function() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this
            }
        }, {
            key: "negate",
            value: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this.x * e.x + this.y * e.y + this.z * e.z
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }
        }, {
            key: "lengthManhattan",
            value: function() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }
        }, {
            key: "normalize",
            value: function() {
                return this.divideScalar(this.length() || 1)
            }
        }, {
            key: "setLength",
            value: function(e) {
                return this.normalize().multiplyScalar(e)
            }
        }, {
            key: "lerp",
            value: function(e, t) {
                return this.x += (e.x - this.x) * t,
                this.y += (e.y - this.y) * t,
                this.z += (e.z - this.z) * t,
                this
            }
        }, {
            key: "lerpVectors",
            value: function(e, t, i) {
                return this.subVectors(t, e).multiplyScalar(i).add(e)
            }
        }, {
            key: "cross",
            value: function(e, t) {
                if (void 0 !== t)
                    return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                    this.crossVectors(e, t);
                var i = this.x
                  , r = this.y
                  , n = this.z;
                return this.x = r * e.z - n * e.y,
                this.y = n * e.x - i * e.z,
                this.z = i * e.y - r * e.x,
                this
            }
        }, {
            key: "crossVectors",
            value: function(e, t) {
                var i = e.x
                  , r = e.y
                  , n = e.z
                  , o = t.x
                  , s = t.y
                  , a = t.z;
                return this.x = r * a - n * s,
                this.y = n * o - i * a,
                this.z = i * s - r * o,
                this
            }
        }, {
            key: "projectOnVector",
            value: function(e) {
                var t = e.dot(this) / e.lengthSq();
                return this.copy(e).multiplyScalar(t)
            }
        }, {
            key: "projectOnPlane",
            value: function() {
                var t = new e;
                return function(e) {
                    return t.copy(this).projectOnVector(e),
                    this.sub(t)
                }
            }
        }, {
            key: "reflect",
            value: function() {
                var t = new e;
                return function(e) {
                    return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
                }()
            }
        }, {
            key: "angleTo",
            value: function(e) {
                var t = this.dot(e) / Math.sqrt(this.lengthSq() * e.lengthSq());
                return Math.acos(Li.clamp(t, -1, 1))
            }
        }, {
            key: "distanceTo",
            value: function(e) {
                return Math.sqrt(this.distanceToSquared(e))
            }
        }, {
            key: "distanceToSquared",
            value: function(e) {
                var t = this.x - e.x
                  , i = this.y - e.y
                  , r = this.z - e.z;
                return t * t + i * i + r * r
            }
        }, {
            key: "distanceToManhattan",
            value: function(e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z)
            }
        }, {
            key: "setFromSpherical",
            value: function(e) {
                var t = Math.sin(e.phi) * e.radius;
                return this.x = t * Math.sin(e.theta),
                this.y = Math.cos(e.phi) * e.radius,
                this.z = t * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromCylindrical",
            value: function(e) {
                return this.x = e.radius * Math.sin(e.theta),
                this.y = e.y,
                this.z = e.radius * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromMatrixPosition",
            value: function(e) {
                var t = e.elements;
                return this.x = t[12],
                this.y = t[13],
                this.z = t[14],
                this
            }
        }, {
            key: "setFromMatrixScale",
            value: function(e) {
                var t = this.setFromMatrixColumn(e, 0).length()
                  , i = this.setFromMatrixColumn(e, 1).length()
                  , r = this.setFromMatrixColumn(e, 2).length();
                return this.x = t,
                this.y = i,
                this.z = r,
                this
            }
        }, {
            key: "setFromMatrixColumn",
            value: function(e, t) {
                return this.fromArray(e.elements, 4 * t)
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.x === this.x && e.y === this.y && e.z === this.z
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this.x = e[t],
                this.y = e[t + 1],
                this.z = e[t + 2],
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this.x,
                e[t + 1] = this.y,
                e[t + 2] = this.z,
                e
            }
        }, {
            key: "fromBufferAttribute",
            value: function(e, t, i) {
                return void 0 !== i && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                this.x = e.getX(t),
                this.y = e.getY(t),
                this.z = e.getZ(t),
                this
            }
        }]),
        e
    }()
      , Xi = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , Ji = function() {
        function e() {
            Ni(this, e)
        }
        return Hi(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = Xi.chars, i = Xi.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : Ii(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }, {
            key: "convertToVector3",
            value: function(e) {
                return e.isVector3 ? e : new qi(e[0],e[1],e[2])
            }
        }, {
            key: "convertToQuaternion",
            value: function(e) {
                return new Gi(e[0],e[1],e[2],e[3])
            }
        }, {
            key: "applyQuaternionToVector3",
            value: function(e, t) {
                if (0 !== e[0] || 0 !== e[1] || 0 !== e[2] || 1 !== e[3]) {
                    var i = t[0]
                      , r = t[1]
                      , n = t[2]
                      , o = e[0]
                      , s = e[1]
                      , a = e[2]
                      , l = e[3]
                      , u = l * i + s * n - a * r
                      , c = l * r + a * i - o * n
                      , h = l * n + o * r - s * i
                      , p = -o * i - s * r - a * n;
                    t[0] = u * l + p * -o + c * -a - h * -s,
                    t[1] = c * l + p * -s + h * -o - u * -a,
                    t[2] = h * l + p * -a + u * -s - c * -o
                }
            }
        }]),
        e
    }();
    Ji.wallTopFaceIndexes = [0, 2, 1, 0, 3, 2],
    Ji.wallStartFaceIndexes = [1, 4, 0, 1, 5, 4],
    Ji.wallEndFaceIndexes = [3, 7, 2, 2, 7, 6],
    Ji.wallStartCornerFaceIndexes = [1, 8, 0],
    Ji.wallEndCornerFaceIndexes = [3, 9, 2],
    Ji.wallBottomFaceIndexes = [4, 5, 6, 4, 6, 7];
    var Yi, Qi, Zi = function() {
        function e() {
            Ni(this, e),
            this._initParams(),
            this.id = Ji.uuid(),
            this.type = "BaseObject",
            this.calculaterData = {}
        }
        return Hi(e, [{
            key: "_initParams",
            value: function() {
                this.id = null,
                this.name = null,
                this.userID = null,
                this.resource = null,
                this.position = null,
                this.rotation = null,
                this.scale = null,
                this._parent = null,
                this.resource = null,
                this._resources = null
            }
        }, {
            key: "calculate",
            value: function() {
                this.calculater && this.calculater.build(this)
            }
        }, {
            key: "createMesh",
            value: function() {
                if (this.meshBuilder)
                    return this.meshBuilder.build(this)
            }
        }, {
            key: "clear",
            value: function() {
                this.calculater && this.calculater.clear(),
                this._initParams()
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.resource && this._resources.push(this.resource)),
                this._resources
            }
        }]),
        e
    }(), Ki = function(e) {
        function t(e, i, r) {
            Ni(this, t);
            var n = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return n.walls = [],
            n.type = "WallCorner",
            n
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.walls = null
            }
        }, {
            key: "addWall",
            value: function(e) {
                for (var t = 0, i = this.walls.length; t < i; t++)
                    if (this.walls[t] === e)
                        return void console.error("repeat wall" + e);
                this.walls.push(e)
            }
        }]),
        t
    }(Zi), $i = function() {
        function e(t) {
            Ni(this, e),
            this._init(),
            this.subMeshes = [],
            this.extraData = {},
            this.vertices = [],
            this.normals = [],
            this.uvs = [],
            this.uv2s = [],
            this.resource = null,
            this.triangles = []
        }
        return Hi(e, [{
            key: "_init",
            value: function() {
                this.vertices = null,
                this.normals = null,
                this.uvs = null,
                this.uv2s = null,
                this.resource = null,
                this.triangles = null,
                this.subMeshes = [],
                this.extraData = {}
            }
        }, {
            key: "clone",
            value: function() {
                var t = new e;
                for (var i in t.vertices = this.vertices.slice(),
                t.normals = this.normals.slice(),
                t.uvs = this.uvs.slice(),
                t.uv2s = this.uv2s.slice(),
                t.resource = this.resource,
                t.triangles = this.triangles.slice(),
                this.extraData)
                    t.extraData[i] = this.extraData[i].slice();
                for (var r = 0; r < this.subMeshes.length; r++) {
                    var n = this.subMeshes[r].clone();
                    t.subMeshes.push(n)
                }
                return t
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.subMeshes.length; e++) {
                    this.subMeshes[e].clear()
                }
                this._init()
            }
        }]),
        e
    }(), er = function() {
        function e(t) {
            Ni(this, e),
            this._initParams(),
            this.isBuilded = !1,
            this.resourceCombineManager = t.resourceCombineManager,
            this.objectManager = t.objectManager
        }
        return Hi(e, [{
            key: "setObject",
            value: function(e) {
                this.clear(),
                this.object = e
            }
        }, {
            key: "_initParams",
            value: function() {
                this.mesh = new $i,
                this.object = null,
                this.isBuilded = !1,
                this.objectManager = null
            }
        }, {
            key: "build",
            value: function(e) {
                this.setObject(e),
                this._calculate(),
                this.object.calculaterMesh = this.mesh,
                this.mesh = null
            }
        }, {
            key: "_calculate",
            value: function() {}
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }();
    var ir = function(e) {
        function t(e) {
            Ni(this, t);
            var i = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.walls = [],
            i
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                this.walls = [],
                this.position = null
            }
        }, {
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this),
                this.walls = this.object.walls,
                this.position = Ji.convertToVector3(this.object.position);
                var e = this.getSameHeightWalls(this.object);
                for (var i in e)
                    this.calWallsVertices(e[i])
            }
        }, {
            key: "isFirstWallShouldNotCal",
            value: function(e) {
                return !("StraightManualWall" === e.type) || "SubStraightManualWall" === e
            }
        }, {
            key: "isSecondWallShouldNotCal",
            value: function(e) {
                return null != e && (e.resource && e.resource.isModel || "SubStraightManualWall" === e.type)
            }
        }, {
            key: "checkWallsSameHeight",
            value: function(e) {
                for (var t = null, i = 0; i < e.walls.length; i++) {
                    var r = e.walls[i];
                    if ("StraightManualWall" === r.type)
                        if (null === t)
                            t = r.height;
                        else if (t !== r.height)
                            return !1
                }
                return !0
            }
        }, {
            key: "containModelWall",
            value: function(e) {
                for (var t = 0; t < e.walls.length; t++) {
                    if ("ModelWall" === e.walls[t].type)
                        return !0
                }
                return !1
            }
        }, {
            key: "getSameHeightWalls",
            value: function(e) {
                for (var t = {}, i = 0; i < e.walls.length; i++) {
                    var r = e.walls[i];
                    this.isStraightManualWall(r) && (void 0 === t[r.height] && (t[r.height] = []),
                    t[r.height].push(r))
                }
                return t
            }
        }, {
            key: "isStraightManualWall",
            value: function(e) {
                return "StraightManualWall" === e.type
            }
        }, {
            key: "calWallsVertices",
            value: function(e) {
                var t = new qi(0,-1,0);
                if (1 === e.length) {
                    var i = e[0];
                    this.isStraightManualWall(i) && this.setDefaultCornerVertices(i)
                } else {
                    this.sortWalls(e);
                    for (var r = 0; r < e.length; r++) {
                        var n = e[r];
                        if (!this.isFirstWallShouldNotCal(n)) {
                            for (var o = null, s = r; null == o && (s === e.length - 1 ? s = 0 : s += 1,
                            e[s] !== n); )
                                o = e[s],
                                this.isSecondWallShouldNotCal(o) && (o = null);
                            if (o) {
                                var a = Ji.convertToVector3(n.getWallOtherCorner(this.object).position)
                                  , l = new qi;
                                l.subVectors(a, this.position),
                                a = Ji.convertToVector3(o.getWallOtherCorner(this.object).position);
                                var u = new qi;
                                if (u.subVectors(a, this.position),
                                l.normalize(),
                                u.normalize(),
                                0 !== l.length() && 0 !== u.length()) {
                                    var c = n.thick / 2
                                      , h = new qi;
                                    h.crossVectors(t, l),
                                    h.normalize();
                                    var p = h.clone();
                                    p.multiplyScalar(c),
                                    p.add(this.position),
                                    c = o.thick / 2;
                                    var d = u.clone();
                                    d.cross(t),
                                    d.normalize();
                                    var f = d.clone();
                                    if (f.multiplyScalar(c),
                                    f.add(this.position),
                                    this.setCornersVertices(n, p, !0),
                                    this.setCornersVertices(o, f, !1),
                                    l.normalize(),
                                    u.normalize(),
                                    this.calAngle(l, u) > 30) {
                                        var m;
                                        if (Ji.approximatelyNumberEqual(Math.abs(l.dot(u)), 1)) {
                                            var g = l.clone();
                                            g.cross(t),
                                            g.normalize(),
                                            this.setDefaultCornerVertices(n, !0),
                                            this.setDefaultCornerVertices(o, !0);
                                            continue
                                        }
                                        if (0 !== (m = this.getIntersectPosition(p, l, f, u)).x || 0 !== m.y || 0 !== m.z)
                                            m.clone().y = this.position.y + this.getWallHeight(this.object),
                                            this.setCornersVertices(n, m, !0),
                                            this.setCornersVertices(o, m, !1)
                                    } else
                                        this.setCornersVertices(n, p, !0),
                                        this.setCornersVertices(o, f, !1)
                                } else
                                    this.setDefaultCornerVertices(n, !0),
                                    this.setDefaultCornerVertices(o, !1)
                            } else
                                this.setDefaultCornerVertices(n)
                        }
                    }
                }
            }
        }, {
            key: "sortWalls",
            value: function(e) {
                if (e.length > 1)
                    for (var t, i, r = e[0], n = 0, o = e.length - 1; n < o; ) {
                        for (i = n; i < o; ++i)
                            this.angleBetween(r, e[i]) > this.angleBetween(r, e[i + 1]) && (t = e[i],
                            e[i] = e[i + 1],
                            e[i + 1] = t);
                        for (i = --o; i > n; --i)
                            this.angleBetween(r, e[i]) < this.angleBetween(r, e[i - 1]) && (t = e[i],
                            e[i] = e[i - 1],
                            e[i - 1] = t);
                        ++n
                    }
            }
        }, {
            key: "angleBetween",
            value: function(e, t) {
                var i = Ji.convertToVector3(e.getWallOtherCorner(this.object).position).clone();
                i.sub(this.position);
                var r = Ji.convertToVector3(t.getWallOtherCorner(this.object).position).clone();
                return r.sub(this.position),
                this.calAngle(i, r)
            }
        }, {
            key: "calAngle",
            value: function(e, t) {
                e.normalize(),
                t.normalize();
                var i = e.angleTo(t);
                i *= 180 / Math.PI;
                var r = e.clone();
                return r.cross(t),
                r.y > 0 && (i = 360 - i),
                i
            }
        }, {
            key: "getWallHeight",
            value: function(e) {
                for (var t = 99999, i = 0; i < e.walls.length; i++) {
                    var r = e.walls[i];
                    t > r.height && (t = r.height)
                }
                return t
            }
        }, {
            key: "setCornersVertices",
            value: function(e, t, i) {
                var r = new qi(0,0,0)
                  , n = Ji.convertToVector3(e.position);
                r.x = t.x - n.x,
                r.y = t.y - n.y,
                r.z = t.z - n.z,
                this.object.calculaterData[e.id] || (this.object.calculaterData[e.id] = [new qi, new qi]);
                var o = this.object.calculaterData[e.id];
                i ? (o[0].x = r.x,
                o[0].y = r.y,
                o[0].z = r.z) : (o[1].x = r.x,
                o[1].y = r.y,
                o[1].z = r.z)
            }
        }, {
            key: "setDefaultCornerVertices",
            value: function(e, t) {
                var i = new qi(0,-1,0)
                  , r = Ji.convertToVector3(e.getWallOtherCorner(this.object).position).clone();
                r.sub(this.position),
                r.normalize();
                var n = e.thick / 2
                  , o = i.clone();
                o.cross(r),
                o.normalize(),
                o.multiplyScalar(n);
                var s = new qi;
                s.addVectors(this.position, o);
                var a = new qi;
                a.subVectors(this.position, o),
                void 0 === t ? (this.setCornersVertices(e, s, !0),
                this.setCornersVertices(e, a, !1)) : t ? this.setCornersVertices(e, s, !0) : this.setCornersVertices(e, a, !1)
            }
        }, {
            key: "getIntersectPosition",
            value: function(e, t, i, r) {
                if (e.x === i.x && e.y === i.y && e.z === i.z)
                    return e;
                var n = e.y;
                if (1 === t.dot(r))
                    throw "two line in same direction ,can not cal intersected position!";
                var o = new qi
                  , s = new qi;
                o.addVectors(e, t),
                s.addVectors(i, r);
                var a = new tr(e.x,e.z)
                  , l = new tr(o.x,o.z)
                  , u = new tr(i.x,i.z)
                  , c = new tr(s.x,s.z)
                  , h = (l.y - a.y) * (c.x - u.x) - (a.x - l.x) * (u.y - c.y);
                if (0 == h)
                    return new qi;
                var p = ((l.x - a.x) * (c.x - u.x) * (u.y - a.y) + (l.y - a.y) * (c.x - u.x) * a.x - (c.y - u.y) * (l.x - a.x) * u.x) / h
                  , d = -((l.y - a.y) * (c.y - u.y) * (u.x - a.x) + (l.x - a.x) * (c.y - u.y) * a.y - (c.x - u.x) * (l.y - a.y) * u.y) / h;
                return new qi(p,n,d)
            }
        }]),
        t
    }(er)
      , rr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                this.walls = [],
                this.position = null
            }
        }, {
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this),
                this.walls = this.object.walls,
                this.position = Ji.convertToVector3(this.object.position);
                var e = this.getSameHeightWalls(this.object);
                for (var i in e)
                    this.calWallsVertices(e[i])
            }
        }, {
            key: "isFirstWallShouldNotCal",
            value: function(e) {
                return !this.isStraightManualWall(e)
            }
        }, {
            key: "isSecondWallShouldNotCal",
            value: function(e) {
                return !this.isStraightManualWall(e)
            }
        }, {
            key: "checkWallsSameHeight",
            value: function(e) {
                for (var t = null, i = 0; i < e.walls.length; i++) {
                    var r = e.walls[i];
                    if (null === t)
                        t = r.height;
                    else if (t !== r.height)
                        return !1
                }
                return !0
            }
        }, {
            key: "containModelWall",
            value: function(e) {
                for (var t = 0; t < e.walls.length; t++) {
                    if ("ModelWall" === e.walls[t].type)
                        return !0
                }
                return !1
            }
        }, {
            key: "getSameHeightWalls",
            value: function(e) {
                for (var t = {}, i = 0; i < e.walls.length; i++) {
                    var r = e.walls[i];
                    this.isStraightManualWall(r) && (void 0 === t[r.height] && (t[r.height] = []),
                    t[r.height].push(r))
                }
                return t
            }
        }, {
            key: "isStraightManualWall",
            value: function(e) {
                return "SubStraightManualWall" === e.type || "SubDoorOrWindowStraightManualWall" === e.type
            }
        }]),
        t
    }(ir)
      , nr = function(e) {
        function t() {
            Ni(this, t);
            var e = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "SubWallCorner",
            e.calculater = new rr({
                object: e
            }),
            e
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.calculater = null
            }
        }, {
            key: "build",
            value: function() {
                this.calculate()
            }
        }, {
            key: "isFirstWallShouldNotCal",
            value: function(e) {
                return !("SubStraightManualWall" === e)
            }
        }, {
            key: "isSecondWallShouldNotCal",
            value: function(e) {
                return e && !("SubStraightManualWall" === e.type)
            }
        }], [{
            key: "createSubWallCorner",
            value: function(e, i, r) {
                var n = new t;
                return n.id = e,
                n.position = i,
                n.parent = r.parent,
                n
            }
        }]),
        t
    }(Ki)
      , or = {
        SubStraightManualWall: "SubStraightManualWall",
        SubDoorOrWindowStraightManualWall: "SubDoorOrWindowStraightManualWall",
        SubWallCorner: "SubWallCorner",
        SubModelWall: "SubModelWall"
    }
      , sr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "setObject",
            value: function(e) {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "setObject", this).call(this, e),
                this.object = e,
                this.startCorner = this.object.startCorner,
                this.endCorner = this.object.endCorner,
                this.startCornerPosition = Ji.convertToVector3(this.startCorner.position),
                this.endCornerPosition = Ji.convertToVector3(this.endCorner.position),
                this.position = Ji.convertToVector3(this.object.position),
                this.direction = Ji.convertToVector3(this.object.direction),
                this.suspend = this.object.suspend,
                this.doorOrWindows = this.object.doorOrWindows,
                this.object.calculaterData.subWalls = [],
                this.object.calculaterData.subCorners = [],
                this.subWalls = this.object.calculaterData.subWalls,
                this.subCorners = this.object.calculaterData.subCorners
            }
        }, {
            key: "_initParams",
            value: function() {
                this.startCorner = null,
                this.endCorner = null,
                this.startCornerPosition = null,
                this.endCornerPosition = null,
                this.position = null,
                this.direction = null,
                this.suspend = null,
                this.doorOrWindows = null,
                this.subWalls = [],
                this.subCorners = []
            }
        }, {
            key: "sortDoorOrWins",
            value: function() {
                var e = this.startCornerPosition
                  , t = this.endCornerPosition
                  , i = t.x - e.x > 0 ? 1 : -1
                  , r = t.z - e.z > 0 ? 1 : -1
                  , n = !0;
                Math.abs(t.x - e.x) < .001 && (n = !1);
                for (var o = [], s = 0; s < this.doorOrWindows.length; s++) {
                    for (var a = this.doorOrWindows[s], l = 0; l < o.length; l++) {
                        var u = o[l];
                        if ((n ? (u.position[0] - a.position[0]) * i : (u.position[2] - a.position[2]) * r) >= 0) {
                            o.splice(l, 0, a);
                            break
                        }
                        if (l === o.length - 1) {
                            o.push(a);
                            break
                        }
                    }
                    0 === o.length && o.push(a)
                }
                return o
            }
        }, {
            key: "getDoorOrWinStartAndEndPos",
            value: function(e) {
                var t = Ji.convertToVector3(e.size)
                  , i = this.direction
                  , r = Ji.convertToVector3(e.position);
                r.y = 0;
                var n = r.clone()
                  , o = r.clone()
                  , s = t.x / 2;
                return n.subVectors(n, i.clone().multiplyScalar(s)),
                o.addVectors(o, i.clone().multiplyScalar(s)),
                [n, o]
            }
        }, {
            key: "addSubWallCorner",
            value: function(e) {
                for (var t = 0; t < this.subCorners.length; t++) {
                    if (this.subCorners[t] === e)
                        return
                }
                this.subCorners.push(e)
            }
        }, {
            key: "getWallCornerByPos",
            value: function(e) {
                for (var t = null, i = -1, r = this.subCorners, n = 0; n < r.length; n++) {
                    var o = e.distanceTo(r[n].position);
                    o < .01 && (null === t ? (t = r[n],
                    i = o) : o < i && (i = o,
                    t = r[n]))
                }
                return t
            }
        }]),
        t
    }(er)
      , ar = function(e) {
        function t(e) {
            Ni(this, t);
            var i = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.upDirection = new qi(0,1,0),
            i.downDirection = new qi(0,-1,0),
            i.vectorUp = new qi(0,1,0),
            i
        }
        return zi(t, e),
        Hi(t, [{
            key: "setObject",
            value: function(e) {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "setObject", this).call(this, e);
                var i = e.calculaterData;
                i.pathPoints = [],
                i.selfPathPoints = [],
                i.repeatUV = [],
                i.startUVPercent = [0, 0, 0, 0],
                i.endUVPercent = [1, 1, 1, 1],
                i.basePoints = [],
                this.pathPoints = i.pathPoints,
                this.selfPathPoints = i.selfPathPoints,
                this.cornersVertices = [this.object.startCorner.calculaterData[this.object.id][0], this.object.startCorner.calculaterData[this.object.id][1], this.object.endCorner.calculaterData[this.object.id][0], this.object.endCorner.calculaterData[this.object.id][1]],
                i.cornersVertices = this.cornersVertices,
                this.basePoints = i.basePoints;
                for (var r = 0; r < 12; r++)
                    this.basePoints.push(new qi);
                this.repeatUV = i.repeatUV,
                this.startUVPercent = i.startUVPercent,
                this.endUVPercent = i.endUVPercent
            }
        }, {
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.pathPoints = null,
                this.cornersVertices = null,
                this.selfPathPoints = null,
                this.rightSideLength = null,
                this.leftSideLength = null,
                this.repeatUV = null,
                this.basePoints = null,
                this.startUVPercent = null,
                this.endUVPercent = null,
                this.leftMesh = null,
                this.rightMesh = null,
                this.edgeMesh = null,
                this.mesh = null,
                this.rightSideLength = null,
                this.leftSideLength = null,
                this.pathPoints = [],
                this.selfPathPoints = [],
                this.leftMesh = new $i,
                this.rightMesh = new $i,
                this.edgeMesh = new $i,
                this.mesh = new $i,
                this.repeatUV = [],
                this.startUVPercent = [0, 0, 0, 0],
                this.endUVPercent = [1, 1, 1, 1]
            }
        }, {
            key: "_calculate",
            value: function() {
                if (this.object.doorOrWindows.length > 0) {
                    this.baseBuild(),
                    this.calPosInfo(),
                    this.calEachSideLen(),
                    this.calRepeatUV(),
                    this.initSimpleCornersAndWalls();
                    for (var e = 0; e < this.subCorners.length; e++) {
                        this.subCorners[e].build()
                    }
                    for (var t = 0; t < this.subWalls.length; t++) {
                        var i = this.subWalls[t];
                        i.calculate(),
                        this.mesh.subMeshes.push(i.calculater.mesh)
                    }
                } else
                    this.initMeshInfo();
                this.object.calculaterMesh = this.mesh
            }
        }, {
            key: "initMeshInfo",
            value: function() {
                this.baseBuild(),
                this.calPosInfo(),
                this.calEachSideLen(),
                this.calRepeatUV(),
                this.calBasePoints(),
                this.fillMesh()
            }
        }, {
            key: "baseBuild",
            value: function() {
                this.pathPoints.push(this.startCornerPosition),
                this.pathPoints.push(this.endCornerPosition)
            }
        }, {
            key: "calEachSideLen",
            value: function() {
                var e = new qi;
                e.subVectors(this.endCornerPosition, this.startCornerPosition),
                e.normalize();
                var t = this.object.thick / 2
                  , i = new qi;
                i.crossVectors(this.downDirection, e),
                i.normalize();
                var r = i.clone();
                r.negate();
                var n = i.clone();
                n.multiplyScalar(t);
                var o = r.clone();
                o.multiplyScalar(t);
                var s = new qi
                  , a = new qi
                  , l = new qi
                  , u = new qi;
                Ji.equalVectorZero(this.cornersVertices[0]) ? s.addVectors(this.selfPathPoints[0], n) : s.copy(this.cornersVertices[0]),
                Ji.equalVectorZero(this.cornersVertices[3]) ? a.addVectors(this.selfPathPoints[1], n) : a.copy(this.cornersVertices[3]),
                Ji.equalVectorZero(this.cornersVertices[1]) ? l.addVectors(this.selfPathPoints[0], o) : l.copy(this.cornersVertices[1]),
                Ji.equalVectorZero(this.cornersVertices[2]) ? u.addVectors(this.selfPathPoints[1], o) : u.copy(this.cornersVertices[2]),
                this.rightSideLength = new qi,
                this.leftSideLength = new qi,
                this.rightSideLength.subVectors(s, a),
                this.leftSideLength.subVectors(l, u),
                this.rightSideLength = this.rightSideLength.length(),
                this.leftSideLength = this.leftSideLength.length(),
                this.object.calculaterData.rightSideLength = this.rightSideLength,
                this.object.calculaterData.leftSideLength = this.leftSideLength
            }
        }, {
            key: "calRepeatUV",
            value: function() {
                var e = this.object.uvMultiple
                  , t = this.object.height;
                this.repeatUV[0] = e[0] * this.rightSideLength / 3,
                this.repeatUV[1] = e[1] * t / 3,
                this.repeatUV[2] = e[0] * this.leftSideLength / 3,
                this.repeatUV[3] = e[1] * t / 3,
                this.object.calculaterData.repeatUV = this.repeatUV
            }
        }, {
            key: "calPosInfo",
            value: function() {
                var e = new qi;
                this.selfPathPoints.push(e.subVectors(this.startCornerPosition, this.position)),
                e = new qi,
                this.selfPathPoints.push(e.subVectors(this.endCornerPosition, this.position)),
                this.selfPathPoints[0].y = 0,
                this.selfPathPoints[1].y = 0
            }
        }, {
            key: "calBasePoints",
            value: function() {
                var e = this.object.thick
                  , t = this.object.height
                  , i = this.direction;
                if (null === this.basePoints) {
                    this.basePoints = [];
                    for (var r = 0; r < 12; r++)
                        this.basePoints.push(new qi)
                }
                var n = e / 2
                  , o = new qi;
                o.crossVectors(this.downDirection, i),
                o.normalize();
                var s = o.clone();
                s.negate();
                var a = o.multiplyScalar(n);
                Ji.equalVectorZero(this.cornersVertices[0]) ? (this.basePoints[4].x = this.selfPathPoints[0].x + a.x,
                this.basePoints[4].y = 0,
                this.basePoints[4].z = this.selfPathPoints[0].z + a.z) : (this.basePoints[4].x = this.cornersVertices[0].x,
                this.basePoints[4].y = 0,
                this.basePoints[4].z = this.cornersVertices[0].z),
                Ji.equalVectorZero(this.cornersVertices[1]) ? (a = s.multiplyScalar(n),
                this.basePoints[5].x = this.selfPathPoints[0].x + a.x,
                this.basePoints[5].y = 0,
                this.basePoints[5].z = this.selfPathPoints[0].z + a.z) : (this.basePoints[5].x = this.cornersVertices[1].x,
                this.basePoints[5].y = 0,
                this.basePoints[5].z = this.cornersVertices[1].z);
                var l = i.clone();
                o.crossVectors(this.downDirection, l.negate()),
                o.normalize(),
                (s = o.clone()).negate(),
                Ji.equalVectorZero(this.cornersVertices[2]) ? ((a = o.clone()).multiplyScalar(n),
                this.basePoints[6].x = this.selfPathPoints[1].x + a.x,
                this.basePoints[6].y = 0,
                this.basePoints[6].z = this.selfPathPoints[1].z + a.z) : (this.basePoints[6].x = this.cornersVertices[2].x,
                this.basePoints[6].y = 0,
                this.basePoints[6].z = this.cornersVertices[2].z),
                Ji.equalVectorZero(this.cornersVertices[3]) ? ((a = s.clone()).multiplyScalar(n),
                this.basePoints[7].x = this.selfPathPoints[1].x + a.x,
                this.basePoints[7].y = 0,
                this.basePoints[7].z = this.selfPathPoints[1].z + a.z) : (this.basePoints[7].x = this.cornersVertices[3].x,
                this.basePoints[7].y = 0,
                this.basePoints[7].z = this.cornersVertices[3].z),
                this.basePoints[0].x = this.basePoints[4].x,
                this.basePoints[0].y = this.basePoints[4].y + t,
                this.basePoints[0].z = this.basePoints[4].z,
                this.basePoints[1].x = this.basePoints[5].x,
                this.basePoints[1].y = this.basePoints[5].y + t,
                this.basePoints[1].z = this.basePoints[5].z,
                this.basePoints[2].x = this.basePoints[6].x,
                this.basePoints[2].y = this.basePoints[6].y + t,
                this.basePoints[2].z = this.basePoints[6].z,
                this.basePoints[3].x = this.basePoints[7].x,
                this.basePoints[3].y = this.basePoints[7].y + t,
                this.basePoints[3].z = this.basePoints[7].z,
                this.basePoints[8].x = this.selfPathPoints[0].x,
                this.basePoints[8].y = this.selfPathPoints[0].y + t,
                this.basePoints[8].z = this.selfPathPoints[0].z,
                this.basePoints[9].x = this.selfPathPoints[1].x,
                this.basePoints[9].y = this.selfPathPoints[1].y + t,
                this.basePoints[9].z = this.selfPathPoints[1].z
            }
        }, {
            key: "initSimpleCornersAndWalls",
            value: function() {
                this.position;
                var e = this.direction
                  , t = this.object.id;
                (new qi).crossVectors(e, this.vectorUp);
                for (var i = this.sortDoorOrWins(), r = 0; r < i.length; r++) {
                    var n = i[r]
                      , o = this.getDoorOrWinStartAndEndPos(n)
                      , s = (this.getDoorOrWinRectPoints(n),
                    nr.createSubWallCorner(t + "_" + r + "_1", o[0], this.object))
                      , a = nr.createSubWallCorner(t + "_" + r + "_2", o[1], this.object);
                    if (this.addSubWallCorner(s),
                    this.addSubWallCorner(a),
                    0 === r) {
                        var l = this.createSubStraightManualWall(this.object.startCorner, s, r, i, "start");
                        this.object.startCorner.calculaterData[l.id] = [];
                        for (var u = this.object.startCorner.calculaterData[this.object.id], c = 0; c < u.length; c++) {
                            var h = u[c].clone();
                            h.add(Ji.convertToVector3(this.object.position)),
                            h.sub(l.position),
                            this.object.startCorner.calculaterData[l.id].push(h)
                        }
                    } else {
                        var p = i[r - 1]
                          , d = this.getDoorOrWinStartAndEndPos(p)
                          , f = this.getWallCornerByPos(d[1]);
                        this.createSubStraightManualWall(f, s, r, i)
                    }
                    if (r === i.length - 1) {
                        var m = this.createSubStraightManualWall(a, this.object.endCorner, r, i, "end");
                        this.object.endCorner.calculaterData[m.id] = [];
                        for (var g = this.object.endCorner.calculaterData[this.object.id], v = 0; v < g.length; v++) {
                            var y = g[v].clone();
                            y.add(Ji.convertToVector3(this.object.position)),
                            y.sub(m.position),
                            this.object.endCorner.calculaterData[m.id].push(y)
                        }
                    }
                    this.buildHeadAndFootWall(n, s, a)
                }
            }
        }, {
            key: "setSubWallCornerVerrices",
            value: function() {}
        }, {
            key: "buildHeadAndFootWall",
            value: function(e, t, i) {
                this.getDoorOrWinRectPoints(e);
                var r = e.suspendPercent;
                (new qi).crossVectors(this.direction, this.vectorUp);
                var n = Ji.convertToVector3(e.size).y + this.object.height * r;
                if (0 !== e.suspendPercent) {
                    var o = this.createSubDoorOrWindowStraightManualWall(t, i, e, "down")
                      , s = new qi;
                    s.subVectors(i.position, t.position);
                    s.length();
                    o.height = this.object.height * r
                }
                if (n < this.object.height) {
                    var a = this.createSubDoorOrWindowStraightManualWall(t, i, e, "up");
                    a.suspend = n,
                    a.height = this.object.height - n,
                    a.thick = this.object.thick
                }
            }
        }, {
            key: "createSubStraightManualWall",
            value: function(e, t, i, r, n) {
                var o = this.object
                  , s = this.objectManager.create({
                    type: or.SubStraightManualWall
                });
                return s.id = Ji.uuid(),
                s.startCorner = e,
                s.endCorner = t,
                s.leftResource = o.leftResource,
                s.rightResource = o.rightResource,
                s.edgeResource = o.edgeResource,
                s.height = o.height,
                s.thick = o.thick,
                s.parentWall = o,
                s.calculaterData.repeatUV = this.object.calculaterData.repeatUV,
                s.calculaterData.index = i,
                s.calculaterData.doorOrWindows = r,
                s.calculaterData.buildType = n,
                this.subWalls.push(s),
                s
            }
        }, {
            key: "createSubDoorOrWindowStraightManualWall",
            value: function(e, t, i, r) {
                var n = this.object
                  , o = this.objectManager.create({
                    type: or.SubDoorOrWindowStraightManualWall
                });
                return o.id = Ji.uuid(),
                o.startCorner = e,
                o.endCorner = t,
                o.leftResource = n.leftResource,
                o.rightResource = n.rightResource,
                o.edgeResource = n.edgeResource,
                o.height = n.height,
                o.thick = n.thick,
                o.parentWall = n,
                o.calculaterData.repeatUV = this.object.calculaterData.repeatUV,
                o.calculaterData.doorOrWindow = i,
                o.calculaterData.buildType = r,
                this.subWalls.push(o),
                o
            }
        }, {
            key: "setCornerVertices",
            value: function(e, t) {
                e.calculaterData.cornersVertices || (e.calculaterData.cornersVertices = [new qi, new qi, new qi, new qi]);
                var i, r, n = e.calculaterData.cornersVertices;
                t ? ((i = new qi).addVectors(this.object.calculater.cornersVertices[0], this.position),
                i.sub(e.position),
                (r = new qi).addVectors(this.object.calculater.cornersVertices[1], this.position),
                r.sub(e.position),
                n[0] = i,
                n[1] = r) : ((i = new qi).addVectors(this.object.calculater.cornersVertices[2], this.position),
                i.sub(e.position),
                (r = new qi).addVectors(this.object.calculater.cornersVertices[3], this.position),
                r.sub(e.position),
                n[2] = i,
                n[3] = r);
                e.calculater.cornersVertices = n
            }
        }, {
            key: "getDoorOrWinRectPoints",
            value: function(e) {
                var t = this.object.thick / 2
                  , i = new qi;
                i.crossVectors(this.vectorUp, this.direction),
                i.normalize();
                var r = i.clone();
                r.negate(),
                this.vectorUp.clone().multiplyScalar(t);
                var n = Ji.convertToVector3(e.size)
                  , o = this.direction
                  , s = Ji.convertToVector3(e.position)
                  , a = n.x / 2
                  , l = new qi
                  , u = new qi;
                return l.subVectors(s, o.clone().multiplyScalar(a)),
                u.addVectors(s, o.clone().multiplyScalar(a)),
                [l.clone().addVectors(l, i.clone().multiplyScalar(t)), l.clone().addVectors(l, r.clone().multiplyScalar(t)), u.clone().addVectors(u, r.clone().multiplyScalar(t)), u.clone().addVectors(u, i.clone().multiplyScalar(t))]
            }
        }, {
            key: "fillMesh",
            value: function() {
                this.leftMesh = new $i,
                this.rightMesh = new $i,
                this.edgeMesh = new $i,
                this.mesh = new $i,
                this.fillEdgeSideMeshInfo(),
                this.fillLeftMeshInfo(),
                this.fillRightMeshInfo(),
                this.mesh.subMeshes = [this.rightMesh, this.leftMesh, this.edgeMesh]
            }
        }, {
            key: "fillRightMeshInfo",
            value: function() {
                this.rightMesh.resource = this.object.rightResource,
                this.rightMesh.vertices = new Float32Array(12),
                this.rightMesh.normals = new Float32Array(12),
                this.rightMesh.triangles = new Uint16Array(6),
                this.rightMesh.triangles[0] = 0,
                this.rightMesh.triangles[1] = 2,
                this.rightMesh.triangles[2] = 3,
                this.rightMesh.triangles[3] = 0,
                this.rightMesh.triangles[4] = 1,
                this.rightMesh.triangles[5] = 2,
                this.rightMesh.uvs = [],
                this.rightMesh.uv2s = [];
                var e, t, i, r, n = this.basePoints, o = [n[0], n[4], n[7], n[3]], s = new qi;
                s.crossVectors(this.downDirection, this.direction),
                s.normalize(),
                this.object.rightResource.isDefault ? (e = this.startUVPercent[0],
                t = this.startUVPercent[1],
                i = this.endUVPercent[0],
                r = this.endUVPercent[1]) : (e = this.startUVPercent[0] * this.repeatUV[0],
                t = this.startUVPercent[1] * this.repeatUV[1],
                i = this.endUVPercent[0] * this.repeatUV[0],
                r = this.endUVPercent[1] * this.repeatUV[1]),
                this.rightMesh.uvs = new Float32Array(8),
                this.rightMesh.uvs[0] = e,
                this.rightMesh.uvs[1] = r,
                this.rightMesh.uvs[2] = e,
                this.rightMesh.uvs[3] = t,
                this.rightMesh.uvs[4] = i,
                this.rightMesh.uvs[5] = t,
                this.rightMesh.uvs[6] = i,
                this.rightMesh.uvs[7] = r,
                this.object.rightResource.isDefault && (e = this.startUVPercent[0],
                t = this.startUVPercent[1],
                i = this.endUVPercent[0],
                r = this.endUVPercent[1],
                this.rightMesh.uv2s = new Float32Array(8),
                this.rightMesh.uv2s[0] = e,
                this.rightMesh.uv2s[1] = r,
                this.rightMesh.uv2s[2] = e,
                this.rightMesh.uv2s[3] = t,
                this.rightMesh.uv2s[4] = i,
                this.rightMesh.uv2s[5] = t,
                this.rightMesh.uv2s[6] = i,
                this.rightMesh.uv2s[7] = r);
                for (var a = 0; a < o.length; a++) {
                    var l = o[a]
                      , u = 3 * a;
                    this.rightMesh.vertices[u] = l.x,
                    this.rightMesh.vertices[u + 1] = l.y + this.suspend,
                    this.rightMesh.vertices[u + 2] = l.z
                }
                for (var c = 0; c < o.length; c++) {
                    var h = s
                      , p = 3 * c;
                    this.rightMesh.normals[p] = h.x,
                    this.rightMesh.normals[p + 1] = h.y,
                    this.rightMesh.normals[p + 2] = h.z
                }
            }
        }, {
            key: "fillLeftMeshInfo",
            value: function() {
                this.leftMesh.resource = this.object.leftResource,
                this.leftMesh.vertices = new Float32Array(12),
                this.leftMesh.normals = new Float32Array(12),
                this.leftMesh.uvs = [],
                this.leftMesh.triangles = new Uint16Array(6),
                this.leftMesh.triangles[0] = 3,
                this.leftMesh.triangles[1] = 1,
                this.leftMesh.triangles[2] = 0,
                this.leftMesh.triangles[3] = 3,
                this.leftMesh.triangles[4] = 2,
                this.leftMesh.triangles[5] = 1;
                var e, t, i, r, n = this.basePoints, o = [n[1], n[5], n[6], n[2]], s = new qi;
                s.crossVectors(this.direction, this.downDirection),
                s.normalize(),
                this.object.leftResource.isDefault ? (e = this.startUVPercent[2],
                t = this.startUVPercent[3],
                i = this.endUVPercent[2],
                r = this.endUVPercent[3]) : (e = this.startUVPercent[2] * this.repeatUV[2],
                t = this.startUVPercent[3] * this.repeatUV[3],
                i = this.endUVPercent[2] * this.repeatUV[2],
                r = this.endUVPercent[3] * this.repeatUV[3]),
                this.leftMesh.uvs = new Float32Array(8),
                this.leftMesh.uvs[0] = i,
                this.leftMesh.uvs[1] = r,
                this.leftMesh.uvs[2] = i,
                this.leftMesh.uvs[3] = t,
                this.leftMesh.uvs[4] = e,
                this.leftMesh.uvs[5] = t,
                this.leftMesh.uvs[6] = e,
                this.leftMesh.uvs[7] = r,
                this.object.leftResource.isDefault && (e = this.startUVPercent[0],
                t = this.startUVPercent[1],
                i = this.endUVPercent[0],
                r = this.endUVPercent[1],
                this.leftMesh.uv2s = new Float32Array(8),
                this.leftMesh.uv2s[0] = e,
                this.leftMesh.uv2s[1] = r,
                this.leftMesh.uv2s[2] = e,
                this.leftMesh.uv2s[3] = t,
                this.leftMesh.uv2s[4] = i,
                this.leftMesh.uv2s[5] = t,
                this.leftMesh.uv2s[6] = i,
                this.leftMesh.uv2s[7] = r);
                for (var a = 0; a < o.length; a++) {
                    var l = o[a]
                      , u = 3 * a;
                    this.leftMesh.vertices[u] = l.x,
                    this.leftMesh.vertices[u + 1] = l.y + this.suspend,
                    this.leftMesh.vertices[u + 2] = l.z
                }
                for (var c = 0; c < o.length; c++) {
                    var h = s
                      , p = 3 * c;
                    this.leftMesh.normals[p] = h.x,
                    this.leftMesh.normals[p + 1] = h.y,
                    this.leftMesh.normals[p + 2] = h.z
                }
            }
        }, {
            key: "fillEdgeSideMeshInfo",
            value: function() {
                this.edgeMesh.resource = this.object.edgeResource;
                var e = Ji.wallTopFaceIndexes
                  , t = Ji.wallStartFaceIndexes
                  , i = Ji.wallEndFaceIndexes
                  , r = Ji.wallStartCornerFaceIndexes
                  , n = Ji.wallEndCornerFaceIndexes
                  , o = Ji.wallBottomFaceIndexes;
                this.edgeMesh.triangles = new Uint16Array(this.getEdgeTrianglesCount(this.object));
                for (var s = e.length, a = 0; a < e.length; a++)
                    this.edgeMesh.triangles[a] = e[a];
                if (this.shouldAddSideIndexes(this.startCorner)) {
                    for (var l = 0; l < t.length; l++)
                        this.edgeMesh.triangles[s + l] = t[l];
                    s += t.length
                }
                if (this.shouldAddSideIndexes(this.endCorner)) {
                    for (var u = 0; u < i.length; u++)
                        this.edgeMesh.triangles[s + u] = i[u];
                    s += i.length
                }
                if (this.startCorner.walls.length > 2) {
                    for (var c = 0; c < r.length; c++)
                        this.edgeMesh.triangles[s + c] = r[c];
                    s += r.length
                }
                if (this.endCorner.walls.length > 2) {
                    for (var h = 0; h < n.length; h++)
                        this.edgeMesh.triangles[s + h] = n[h];
                    s += n.length
                }
                if (0 !== this.object.suspend)
                    for (var p = 0; p < o.length; p++)
                        this.edgeMesh.triangles[s + p] = o[p];
                this.edgeMesh.vertices = new Float32Array(30),
                this.edgeMesh.normals = new Float32Array(30),
                this.edgeMesh.uvs = new Float32Array(20);
                for (var d = this.basePoints, f = [d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9]], m = 0; m < f.length; m++) {
                    var g = f[m]
                      , v = 3 * m;
                    this.edgeMesh.vertices[v] = g.x,
                    this.edgeMesh.vertices[v + 1] = g.y + this.object.suspend,
                    this.edgeMesh.vertices[v + 2] = g.z
                }
                for (var y = 0; y < f.length; y++) {
                    var b = this.upDirection
                      , _ = 3 * y;
                    this.edgeMesh.normals[_] = b.x,
                    this.edgeMesh.normals[_ + 1] = b.y,
                    this.edgeMesh.normals[_ + 2] = b.z
                }
            }
        }, {
            key: "getEdgeTrianglesCount",
            value: function(e) {
                var t = Ji.wallTopFaceIndexes.length;
                return this.shouldAddSideIndexes(e.startCorner) && (t += Ji.wallStartFaceIndexes.length),
                this.shouldAddSideIndexes(e.endCorner) && (t += Ji.wallEndFaceIndexes.length),
                e.startCorner.walls.length > 2 && (t += Ji.wallStartCornerFaceIndexes.length),
                e.endCorner.walls.length > 2 && (t += Ji.wallEndCornerFaceIndexes.length),
                0 !== this.object.suspend && (t += Ji.wallBottomFaceIndexes.length),
                t
            }
        }, {
            key: "shouldAddSideIndexes",
            value: function(e) {
                for (var t = 0, i = 0; i < e.walls.length; i++) {
                    "StraightManualWall" === e.walls[i].type && t++
                }
                return 1 === t || !(e.calculater.checkWallsSameHeight(e) && !e.calculater.containModelWall(e))
            }
        }, {
            key: "shouldAddEdgeTriangle",
            value: function(e) {
                for (var t = 0, i = 0; i < e.walls.length; i++) {
                    "StraightManualWall" === e.walls[i].type && t++
                }
                return t > 2
            }
        }, {
            key: "clear",
            value: function() {
                this.leftMesh.clear(),
                this.rightMesh.clear(),
                this.edgeMesh.clear(),
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(sr)
      , lr = function(e) {
        function t(e) {
            Ni(this, t);
            var i = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.meshMap = new Map,
            i.resources = [],
            i
        }
        return zi(t, e),
        Hi(t, [{
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this)
            }
        }, {
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.meshMap = new Map,
                this.resources = []
            }
        }, {
            key: "classifyMeshesToDic",
            value: function(e) {
                this.meshMap.clear();
                for (var t = 0; t < e.length; t++) {
                    var i = e[t].calculater.mesh;
                    this.addMeshToMap(i)
                }
            }
        }, {
            key: "addMeshToMap",
            value: function(e) {
                if (e.subMeshes.length > 0)
                    for (var t = 0; t < e.subMeshes.length; t++) {
                        var i = e.subMeshes[t];
                        this.addMeshToMap(i)
                    }
                e.resource && (this.meshMap.has(e.resource) || (this.resources.push(e.resource),
                this.meshMap.set(e.resource, [])),
                this.meshMap.get(e.resource).push(e))
            }
        }, {
            key: "combineMeshes",
            value: function() {
                var e = !0
                  , t = !1
                  , i = void 0;
                try {
                    for (var r, n = this.meshMap[Symbol.iterator](); !(e = (r = n.next()).done); e = !0) {
                        var o = r.value
                          , s = Wi(o, 2)
                          , a = s[0]
                          , l = s[1]
                          , u = this._combineSubMeshes(l);
                        u.resource = a,
                        this.mesh.subMeshes.push(u)
                    }
                } catch (e) {
                    t = !0,
                    i = e
                } finally {
                    try {
                        !e && n.return && n.return()
                    } finally {
                        if (t)
                            throw i
                    }
                }
            }
        }, {
            key: "_combineSubMeshes",
            value: function(e) {
                var t, i = new $i;
                t = this._initCombineMesh(e, i);
                for (var r = 0; r < e.length; r++) {
                    var n = e[r];
                    this._combineIndexes(n, i, t),
                    this._combinePositionsAndNormals(n, i, t),
                    this._combineUVs(n, i, t),
                    this._combineExtraData(n, i, t)
                }
                return i
            }
        }, {
            key: "_initCombineMesh",
            value: function(e, t, i) {
                var r = 0
                  , n = 0
                  , o = 0
                  , s = 0
                  , a = 0
                  , l = {};
                i = {
                    index: 0,
                    vertex: 0,
                    uv: 0,
                    uv2: 0
                };
                for (var u = 0; u < e.length; u++) {
                    var c = e[u];
                    for (var h in r += c.triangles.length,
                    n += c.vertices.length,
                    o += c.uvs.length,
                    s += c.uv2s.length,
                    a += c.normals.length,
                    c.extraData)
                        "groups" !== h && (void 0 === l[h] && (l[h] = 0),
                        l[h] += c.extraData[h].length)
                }
                for (var p in t.vertices = new Float32Array(n),
                t.triangles = new Uint16Array(r),
                t.uvs = new Float32Array(o),
                t.uv2s = new Float32Array(s),
                t.normals = new Float32Array(a),
                l)
                    t.extraData[p] = new Float32Array(l[p]),
                    i[p] = 0;
                return i
            }
        }, {
            key: "_combineIndexes",
            value: function(e, t, i) {
                for (var r = e.triangles, n = 0; n < r.length; n++) {
                    var o = r[n];
                    t.triangles[i.index + n] = i.vertex / 3 + o
                }
                i.index += r.length
            }
        }, {
            key: "_combinePositionsAndNormals",
            value: function(e, t, i) {
                for (var r = e.vertices, n = e.normals, o = 0; o < r.length; o++)
                    t.vertices[i.vertex + o] = r[o],
                    t.normals[i.vertex + o] = n[o];
                i.vertex += r.length
            }
        }, {
            key: "_combineUVs",
            value: function(e, t, i) {
                for (var r = e.uvs, n = e.uv2s, o = 0; o < r.length; o++) {
                    var s = r[o];
                    t.uvs[i.uv + o] = s
                }
                i.uv += r.length;
                for (var a = 0; a < n.length; a++) {
                    var l = n[a];
                    t.uv2s[i.uv2 + a] = l
                }
                i.uv2 += n.length
            }
        }, {
            key: "_combineExtraData",
            value: function(e, t, i) {
                var r = e.extraData;
                for (var n in r)
                    if ("groups" !== n) {
                        for (var o = r[n], s = 0; s < o.length; s++) {
                            var a = o[s];
                            t.extraData[n][i[n] + s] = a
                        }
                        i[n] += o.length
                    }
            }
        }]),
        t
    }(er)
      , ur = function(e) {
        function t(e) {
            Ni(this, t);
            var i = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.mesh = new $i,
            i.sideVerticesCount = 12,
            i.sideTrianglesCount = 6,
            i.sideUvsCount = 8,
            i.edgeVerticesCount = 30,
            i.edgeUVsCount = 20,
            i.resourceEachSideMeshMap = new Map,
            i.upDirection = new qi(0,1,0),
            i.downDirection = new qi(0,-1,0),
            i.vectorUp = new qi(0,1,0),
            i.maxCount = 18e4,
            i
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.mesh = new $i,
                this.resourceEachSideMeshMap = new Map
            }
        }, {
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this);
                for (var e = 0; e < this.object.corners.length; e++) {
                    this.object.corners[e].calculate()
                }
                for (var i = 0; i < this.object.walls.length; i++) {
                    var r = this.object.walls[i];
                    if (r.calculater)
                        if (r.calculater.setObject(r),
                        r.doorOrWindows.length > 0) {
                            r.calculater.baseBuild(),
                            r.calculater.calPosInfo(),
                            r.calculater.calEachSideLen(),
                            r.calculater.calRepeatUV(),
                            r.calculater.initSimpleCornersAndWalls();
                            for (var n = 0; n < r.calculater.subCorners.length; n++) {
                                r.calculater.subCorners[n].calculate()
                            }
                            for (var o = 0; o < r.calculater.subWalls.length; o++) {
                                var s = r.calculater.subWalls[o];
                                s.calculater.setObject(s),
                                s.calculater.baseBuild(),
                                s.calculater.calPosInfo(),
                                s.calculater.calBasePoints(),
                                s.calculater.calUV()
                            }
                        } else
                            r.calculater.baseBuild(),
                            r.calculater.calPosInfo(),
                            r.calculater.calEachSideLen(),
                            r.calculater.calRepeatUV(),
                            r.calculater.calBasePoints()
                }
                this._initMesh();
                for (var a = 0; a < this.object.walls.length; a++) {
                    var l = this.object.walls[a];
                    if (l.doorOrWindows.length > 0)
                        for (var u = 0; u < l.calculaterData.subWalls.length; u++) {
                            var c = l.calculaterData.subWalls[u];
                            this._addToCombineMesh(c)
                        }
                    else
                        this._addToCombineMesh(l)
                }
            }
        }, {
            key: "_processExceedMesh",
            value: function(e) {
                var t = this
                  , i = e.subMeshes.filter((function(e) {
                    return e.vertices.length <= 72
                }
                ))
                  , r = e.subMeshes.filter((function(e) {
                    return e.vertices.length > 72
                }
                )).flatMap((function(e) {
                    return t._splitExceedMeshToMulitMesh(e, 24)
                }
                ))
                  , n = new $i;
                return n.subMeshes = r.concat(i),
                n
            }
        }, {
            key: "_splitExceedMeshToMulitMesh",
            value: function(e, t) {
                return function(e, t) {
                    for (var i = e / t, r = [], n = Math.ceil(i), o = 0; o < n; o++) {
                        var s = o * t;
                        o === n - 1 ? r.push({
                            start: s,
                            end: s + t * (i - o)
                        }) : r.push({
                            start: s,
                            end: s + t
                        })
                    }
                    return r
                }(e.vertices.length / 3, t).map((function(t, i) {
                    var r = new $i;
                    r.vertices = e.vertices.slice(3 * t.start, 3 * t.end),
                    r.normals = e.normals.slice(3 * t.start, 3 * t.end),
                    r.uv2s = e.uv2s.slice(2 * t.start, 2 * t.end),
                    r.uvs = e.uvs.slice(2 * t.start, 2 * t.end),
                    r.resource = e.resource;
                    e.triangles.filter((function(e) {
                        return e - t.start >= 0 && t.end - e > 0
                    }
                    ));
                    return r.triangles = e.triangles.filter((function(e) {
                        return e - t.start >= 0 && t.end - e > 0
                    }
                    )).map((function(e) {
                        return e - t.start
                    }
                    )),
                    r
                }
                ))
            }
        }, {
            key: "_addToCombineMesh",
            value: function(e) {
                var t = this
                  , i = function(e) {
                    return e.cursor.vertex > t.maxCount && e.curMeshIndex++,
                    e.splitMeshes[e.curMeshIndex]
                }
                  , r = function(e) {
                    return e.cursor.vertex > t.maxCount && (e.cursor = {
                        index: 0,
                        vertex: 0,
                        uv: 0,
                        uv2: 0
                    }),
                    e.cursor
                }
                  , n = i(this.resourceEachSideMeshMap.get(e.rightResource).right)
                  , o = r(this.resourceEachSideMeshMap.get(e.rightResource).right)
                  , s = i(this.resourceEachSideMeshMap.get(e.leftResource).left)
                  , a = r(this.resourceEachSideMeshMap.get(e.leftResource).left)
                  , l = i(this.resourceEachSideMeshMap.get(e.edgeResource).edge)
                  , u = r(this.resourceEachSideMeshMap.get(e.edgeResource).edge);
                this.fillRightMeshInfo(n, o, e),
                this.fillLeftMeshInfo(s, a, e),
                this.fillEdgeSideMeshInfo(l, u, e)
            }
        }, {
            key: "_initMesh",
            value: function() {
                this._initLeftMeshes(),
                this._initRightMeshes(),
                this._initEdgeMeshes()
            }
        }, {
            key: "_initLeftMeshes",
            value: function() {
                var e = !0
                  , t = !1
                  , i = void 0;
                try {
                    for (var r, n = this.object.leftWallResourceMap.keys()[Symbol.iterator](); !(e = (r = n.next()).done); e = !0) {
                        for (var o = r.value, s = [], a = this.object.leftWallResourceMap.get(o), l = 0, u = 0, c = 0, h = 0; h < a.length; h++) {
                            var p = a[h]
                              , d = 1;
                            if (p.doorOrWindows.length > 0) {
                                for (var f = 0; f < p.doorOrWindows.length; f++) {
                                    var m = p.doorOrWindows[f];
                                    d = 1,
                                    m.suspendPercent > 0 && (d = 2),
                                    l += this.sideVerticesCount * d,
                                    u += this.sideTrianglesCount * d,
                                    c += this.sideUvsCount * d
                                }
                                d = p.doorOrWindows.length + 1,
                                l += this.sideVerticesCount * d,
                                u += this.sideTrianglesCount * d,
                                c += this.sideUvsCount * d
                            } else
                                l += this.sideVerticesCount,
                                u += this.sideTrianglesCount,
                                c += this.sideUvsCount;
                            if (l > this.maxCount) {
                                var g = new $i;
                                g.resource = o,
                                g.vertices = new Float32Array(l),
                                g.normals = new Float32Array(l),
                                g.triangles = new Uint16Array(u),
                                g.uvs = new Float32Array(c),
                                o.isDefault && (g.uv2s = new Float32Array(c)),
                                s.push(g),
                                l = 0,
                                u = 0,
                                c = 0
                            }
                        }
                        if (l > 0) {
                            var v = new $i;
                            v.resource = o,
                            v.vertices = new Float32Array(l),
                            v.normals = new Float32Array(l),
                            v.triangles = new Uint16Array(u),
                            v.uvs = new Float32Array(c),
                            o.isDefault && (v.uv2s = new Float32Array(c)),
                            s.push(v)
                        }
                        this.mesh.subMeshes = this.mesh.subMeshes.concat(s),
                        this.resourceEachSideMeshMap.has(o) || this.resourceEachSideMeshMap.set(o, {});
                        var y = this.resourceEachSideMeshMap.get(o);
                        y.left || (y.left = {
                            curMeshIndex: 0,
                            splitMeshes: s,
                            cursor: {
                                index: 0,
                                vertex: 0,
                                uv: 0,
                                uv2: 0
                            }
                        })
                    }
                } catch (e) {
                    t = !0,
                    i = e
                } finally {
                    try {
                        !e && n.return && n.return()
                    } finally {
                        if (t)
                            throw i
                    }
                }
            }
        }, {
            key: "_initRightMeshes",
            value: function() {
                var e = !0
                  , t = !1
                  , i = void 0;
                try {
                    for (var r, n = this.object.rightWallResourceMap.keys()[Symbol.iterator](); !(e = (r = n.next()).done); e = !0) {
                        for (var o = r.value, s = [], a = this.object.rightWallResourceMap.get(o), l = 0, u = 0, c = 0, h = 0; h < a.length; h++) {
                            var p = a[h]
                              , d = 1;
                            if (p.doorOrWindows.length > 0) {
                                for (var f = 0; f < p.doorOrWindows.length; f++) {
                                    var m = p.doorOrWindows[f];
                                    d = 1,
                                    m.suspendPercent > 0 && (d = 2),
                                    l += this.sideVerticesCount * d,
                                    u += this.sideTrianglesCount * d,
                                    c += this.sideUvsCount * d
                                }
                                d = p.doorOrWindows.length + 1,
                                l += this.sideVerticesCount * d,
                                u += this.sideTrianglesCount * d,
                                c += this.sideUvsCount * d
                            } else
                                l += this.sideVerticesCount,
                                u += this.sideTrianglesCount,
                                c += this.sideUvsCount;
                            if (l > this.maxCount) {
                                var g = new $i;
                                g.resource = o,
                                g.vertices = new Float32Array(l),
                                g.normals = new Float32Array(l),
                                g.triangles = new Uint16Array(u),
                                g.uvs = new Float32Array(c),
                                o.isDefault && (g.uv2s = new Float32Array(c)),
                                s.push(g),
                                l = 0,
                                u = 0,
                                c = 0
                            }
                        }
                        if (l > 0) {
                            var v = new $i;
                            v.resource = o,
                            v.vertices = new Float32Array(l),
                            v.normals = new Float32Array(l),
                            v.triangles = new Uint16Array(u),
                            v.uvs = new Float32Array(c),
                            o.isDefault && (v.uv2s = new Float32Array(c)),
                            s.push(v)
                        }
                        this.mesh.subMeshes = this.mesh.subMeshes.concat(s),
                        this.resourceEachSideMeshMap.has(o) || this.resourceEachSideMeshMap.set(o, {});
                        var y = this.resourceEachSideMeshMap.get(o);
                        y.right || (y.right = {
                            curMeshIndex: 0,
                            splitMeshes: s,
                            cursor: {
                                index: 0,
                                vertex: 0,
                                uv: 0,
                                uv2: 0
                            }
                        })
                    }
                } catch (e) {
                    t = !0,
                    i = e
                } finally {
                    try {
                        !e && n.return && n.return()
                    } finally {
                        if (t)
                            throw i
                    }
                }
            }
        }, {
            key: "_initEdgeMeshes",
            value: function() {
                for (var e = 0, t = 0, i = 0, r = (Ji.wallTopFaceIndexes.length,
                []), n = this.object.walls[0].edgeResource, o = 0; o < this.object.walls.length; o++) {
                    var s = this.object.walls[o];
                    if (s.doorOrWindows.length > 0)
                        for (var a = 0; a < s.calculaterData.subWalls.length; a++) {
                            var l = s.calculaterData.subWalls[a];
                            t += l.calculater.getEdgeTrianglesCount(l),
                            e += this.edgeVerticesCount,
                            i += this.edgeUVsCount
                        }
                    else
                        t += s.calculater.getEdgeTrianglesCount(s),
                        e += this.edgeVerticesCount,
                        i += this.edgeUVsCount;
                    if (e > this.maxCount) {
                        var u = new $i;
                        u.resource = n,
                        u.vertices = new Float32Array(e),
                        u.normals = new Float32Array(e),
                        u.triangles = new Uint16Array(t),
                        u.uvs = new Uint16Array(i),
                        r.push(u),
                        e = 0,
                        t = 0,
                        i = 0
                    }
                }
                if (e > 0) {
                    var c = new $i;
                    c.resource = n,
                    c.vertices = new Float32Array(e),
                    c.normals = new Float32Array(e),
                    c.triangles = new Uint16Array(t),
                    c.uvs = new Uint16Array(i),
                    r.push(c)
                }
                this.mesh.subMeshes = this.mesh.subMeshes.concat(r),
                this.resourceEachSideMeshMap.has(n) || this.resourceEachSideMeshMap.set(n, {});
                var h = this.resourceEachSideMeshMap.get(n);
                h.edge || (h.edge = {
                    curMeshIndex: 0,
                    splitMeshes: r,
                    cursor: {
                        index: 0,
                        vertex: 0,
                        uv: 0,
                        uv2: 0
                    }
                })
            }
        }, {
            key: "changeToParentCoordinate",
            value: function() {
                for (var e = 0; e < this.object.walls.length; e++) {
                    var t = this.object.walls[e]
                      , i = "StraightManualWall" === t.type ? t.position : t.position.toArray();
                    this.changeMeshCoordinate(t.calculater.mesh, i)
                }
            }
        }, {
            key: "changeMeshCoordinate",
            value: function(e, t) {
                var i = "StraightManualWall" === t.type ? t.position : t.position.toArray();
                if (e.vertices)
                    for (var r = 0; r < e.vertices.length; ) {
                        var n = e.vertices;
                        n[r] += i[0],
                        n[r + 1] += i[1],
                        n[r + 2] += i[2],
                        r += 3
                    }
                for (var o = 0; o < e.subMeshes.length; o++) {
                    var s = e.subMeshes[o];
                    this.changeMeshCoordinate(s, t)
                }
            }
        }, {
            key: "fillRightMeshInfo",
            value: function(e, t, i) {
                var r = t.index
                  , n = t.uv
                  , o = t.uv2
                  , s = t.vertex
                  , a = s / 3
                  , l = i.calculaterData
                  , u = Array.isArray(i.position) ? i.position : i.position.toArray();
                e.triangles[r + 0] = 0 + a,
                e.triangles[r + 1] = 2 + a,
                e.triangles[r + 2] = 3 + a,
                e.triangles[r + 3] = 0 + a,
                e.triangles[r + 4] = 1 + a,
                e.triangles[r + 5] = 2 + a;
                var c, h, p, d, f = l.basePoints, m = [f[0], f[4], f[7], f[3]], g = new qi, v = Ji.convertToVector3(i.direction);
                g.crossVectors(this.downDirection, v),
                g.normalize(),
                i.rightResource.isDefault ? (c = l.startUVPercent[0],
                h = l.startUVPercent[1],
                p = l.endUVPercent[0],
                d = l.endUVPercent[1]) : (c = l.startUVPercent[0] * l.repeatUV[0],
                h = l.startUVPercent[1] * l.repeatUV[1],
                p = l.endUVPercent[0] * l.repeatUV[0],
                d = l.endUVPercent[1] * l.repeatUV[1]),
                e.uvs[n + 0] = c,
                e.uvs[n + 1] = d,
                e.uvs[n + 2] = c,
                e.uvs[n + 3] = h,
                e.uvs[n + 4] = p,
                e.uvs[n + 5] = h,
                e.uvs[n + 6] = p,
                e.uvs[n + 7] = d,
                i.rightResource.isDefault && (c = l.startUVPercent[0],
                h = l.startUVPercent[1],
                p = l.endUVPercent[0],
                d = l.endUVPercent[1],
                e.uv2s[o + 0] = c,
                e.uv2s[o + 1] = d,
                e.uv2s[o + 2] = c,
                e.uv2s[o + 3] = h,
                e.uv2s[o + 4] = p,
                e.uv2s[o + 5] = h,
                e.uv2s[o + 6] = p,
                e.uv2s[o + 7] = d);
                for (var y = 0; y < m.length; y++) {
                    var b = m[y]
                      , _ = 3 * y;
                    e.vertices[s + _] = b.x + u[0],
                    e.vertices[s + _ + 1] = b.y + i.suspend + u[1],
                    e.vertices[s + _ + 2] = b.z + u[2],
                    b = g,
                    e.normals[s + _] = b.x,
                    e.normals[s + _ + 1] = b.y,
                    e.normals[s + _ + 2] = b.z
                }
                t.vertex += this.sideVerticesCount,
                t.index += this.sideTrianglesCount,
                t.uv += this.sideUvsCount,
                i.rightResource.isDefault && (t.uv2 += this.sideUvsCount)
            }
        }, {
            key: "fillLeftMeshInfo",
            value: function(e, t, i) {
                var r = t.index
                  , n = t.uv
                  , o = t.uv2
                  , s = t.vertex
                  , a = s / 3
                  , l = Array.isArray(i.position) ? i.position : i.position.toArray();
                e.triangles[r + 0] = 3 + a,
                e.triangles[r + 1] = 1 + a,
                e.triangles[r + 2] = 0 + a,
                e.triangles[r + 3] = 3 + a,
                e.triangles[r + 4] = 2 + a,
                e.triangles[r + 5] = 1 + a;
                var u, c, h, p, d = i.calculaterData, f = d.basePoints, m = [f[1], f[5], f[6], f[2]], g = new qi, v = Ji.convertToVector3(i.direction);
                g.crossVectors(v, this.downDirection),
                g.normalize(),
                i.leftResource.isDefault ? (u = d.startUVPercent[2],
                c = d.startUVPercent[3],
                h = d.endUVPercent[2],
                p = d.endUVPercent[3]) : (u = d.startUVPercent[2] * d.repeatUV[2],
                c = d.startUVPercent[3] * d.repeatUV[3],
                h = d.endUVPercent[2] * d.repeatUV[2],
                p = d.endUVPercent[3] * d.repeatUV[3]),
                e.uvs[n + 0] = h,
                e.uvs[n + 1] = p,
                e.uvs[n + 2] = h,
                e.uvs[n + 3] = c,
                e.uvs[n + 4] = u,
                e.uvs[n + 5] = c,
                e.uvs[n + 6] = u,
                e.uvs[n + 7] = p,
                i.leftResource.isDefault && (u = d.startUVPercent[0],
                c = d.startUVPercent[1],
                h = d.endUVPercent[0],
                p = d.endUVPercent[1],
                e.uv2s[o + 0] = u,
                e.uv2s[o + 1] = p,
                e.uv2s[o + 2] = u,
                e.uv2s[o + 3] = c,
                e.uv2s[o + 4] = h,
                e.uv2s[o + 5] = c,
                e.uv2s[o + 6] = h,
                e.uv2s[o + 7] = p);
                for (var y = 0; y < m.length; y++) {
                    var b = m[y]
                      , _ = 3 * y;
                    e.vertices[s + _] = b.x + l[0],
                    e.vertices[s + _ + 1] = b.y + i.suspend + l[1],
                    e.vertices[s + _ + 2] = b.z + l[2],
                    b = g,
                    e.normals[s + _] = b.x,
                    e.normals[s + _ + 1] = b.y,
                    e.normals[s + _ + 2] = b.z
                }
                t.vertex += this.sideVerticesCount,
                t.index += this.sideTrianglesCount,
                t.uv += this.sideUvsCount,
                i.leftResource.isDefault && (t.uv2 += this.sideUvsCount)
            }
        }, {
            key: "fillEdgeSideMeshInfo",
            value: function(e, t, i) {
                for (var r = t.index, n = (t.uv,
                t.uv2,
                t.vertex), o = n / 3, s = Array.isArray(i.position) ? i.position : i.position.toArray(), a = Ji.wallTopFaceIndexes, l = Ji.wallStartFaceIndexes, u = Ji.wallEndFaceIndexes, c = Ji.wallStartCornerFaceIndexes, h = Ji.wallEndCornerFaceIndexes, p = Ji.wallBottomFaceIndexes, d = i.calculaterData, f = a.length, m = 0; m < a.length; m++)
                    e.triangles[r + m] = a[m] + o;
                if (i.calculater.shouldAddSideIndexes(i.startCorner)) {
                    for (var g = 0; g < l.length; g++)
                        e.triangles[r + f + g] = l[g] + o;
                    f += l.length
                }
                if (i.calculater.shouldAddSideIndexes(i.endCorner)) {
                    for (var v = 0; v < u.length; v++)
                        e.triangles[r + f + v] = u[v] + o;
                    f += u.length
                }
                if (i.startCorner.walls.length > 2) {
                    for (var y = 0; y < c.length; y++)
                        e.triangles[r + f + y] = c[y] + o;
                    f += c.length
                }
                if (i.endCorner.walls.length > 2) {
                    for (var b = 0; b < h.length; b++)
                        e.triangles[r + f + b] = h[b] + o;
                    f += h.length
                }
                if (0 !== i.suspend)
                    for (var _ = 0; _ < p.length; _++)
                        e.triangles[r + f + _] = p[_] + o;
                for (var x = d.basePoints, E = [x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], w = 0; w < E.length; w++) {
                    var T = E[w]
                      , M = 3 * w;
                    e.vertices[n + M] = T.x + s[0],
                    e.vertices[n + M + 1] = T.y + i.suspend + s[1],
                    e.vertices[n + M + 2] = T.z + s[2]
                }
                for (var C = 0; C < E.length; C++) {
                    var S = this.upDirection
                      , j = 3 * C;
                    e.normals[n + j] = S.x,
                    e.normals[n + j + 1] = S.y,
                    e.normals[n + j + 2] = S.z
                }
                t.vertex += this.edgeVerticesCount,
                t.index += f,
                t.uv += this.edgeUVsCount
            }
        }]),
        t
    }(lr)
      , cr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "build",
            value: function(e) {}
        }]),
        t
    }(er)
      , hr = function(e) {
        function t(e) {
            Ni(this, t);
            var i = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.upVector3 = new qi(0,1,0),
            i.downVector3 = new qi(0,-1,0),
            i.backwardVector3 = new qi(0,0,-1),
            i
        }
        return zi(t, e),
        Hi(t, [{
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this);
                var e = this.object.attachWall
                  , i = new Gi;
                if (e) {
                    var r = Ji.convertToVector3(e.direction)
                      , n = new qi;
                    this.isSingleOpen() || this.hasAnimation || this.hasController ? n.crossVectors(this.upVector3, r) : n.crossVectors(this.downVector3, r),
                    i.setFromUnitVectors(this.backwardVector3, n),
                    this.object.rotation = [i.x, i.y, i.z, i.w],
                    this.object.position[1] = e.height * this.object.suspendPercent
                }
            }
        }, {
            key: "calculateBodyTransformation",
            value: function() {
                var e = this.getBodyTransformation()
                  , t = new (Function.prototype.bind.apply(Gi, [null].concat(function(e) {
                    if (Array.isArray(e)) {
                        for (var t = 0, i = Array(e.length); t < e.length; t++)
                            i[t] = e[t];
                        return i
                    }
                    return Array.from(e)
                }(this.object.rotation))));
                t.multiplyQuaternions(t, e.quaternion),
                this.object.rotation = t.toArray();
                var i = e.scale
                  , r = this.object.scale;
                this.object.scale = [i.x * r[0], i.y * r[1], i.z * r[2]]
            }
        }, {
            key: "isSingleOpen",
            value: function() {
                var e = this.object.resource.model.getObjectByName("Controller");
                return !!e && 1 === e.children.length
            }
        }, {
            key: "getBodyTransformation",
            value: function() {
                var e = this.object.resource.model;
                if (e) {
                    var t = new Gi(0,0,0,1)
                      , i = new qi(1,1,1);
                    if (e.getObjectByName("RootNode"))
                        if (this.isSingleOpen() && this.hasController)
                            switch (this.object.openDirIndex) {
                            case 1:
                                i.set(-1, 1, 1);
                                break;
                            case 2:
                                t.set(0, 1, 0, 0),
                                i.set(-1, 1, 1);
                                break;
                            case 3:
                                t.set(0, 1, 0, 0)
                            }
                        else
                            switch (this.object.openDirIndex) {
                            case 1:
                                t.set(0, 1, 0, 0)
                            }
                    return {
                        quaternion: t,
                        scale: i
                    }
                }
            }
        }, {
            key: "hasAnimation",
            get: function() {
                return !!(this.object.resource && this.object.resource.animations && this.object.resource.animations.length > 0)
            }
        }, {
            key: "hasController",
            get: function() {
                return !!this.object.resource && !!this.object.resource.model.getObjectByName("Controller")
            }
        }]),
        t
    }(er)
      , pr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "setObject",
            value: function(e) {
                this.object = e,
                this.startCorner = this.object.startCorner,
                this.endCorner = this.object.endCorner,
                this.startCornerPosition = Ji.convertToVector3(this.startCorner.position),
                this.endCornerPosition = Ji.convertToVector3(this.endCorner.position),
                this.position = Ji.convertToVector3(this.object.position),
                this.direction = Ji.convertToVector3(this.object.direction),
                this.suspend = this.object.suspend,
                this.doorOrWindows = this.object.doorOrWindows,
                this.object.calculaterData.subWalls = [],
                this.object.calculaterData.subCorners = [],
                this.subWalls = this.object.calculaterData.subWalls,
                this.subCorners = this.object.calculaterData.subCorners;
                var t = e.calculaterData;
                t.pathPoints = [],
                t.selfPathPoints = [],
                t.startUVPercent = [0, 0, 0, 0],
                t.endUVPercent = [1, 1, 1, 1],
                t.basePoints = [],
                this.pathPoints = t.pathPoints,
                this.selfPathPoints = t.selfPathPoints,
                this.cornersVertices = [this.object.startCorner.calculaterData[this.object.id][0], this.object.startCorner.calculaterData[this.object.id][1], this.object.endCorner.calculaterData[this.object.id][0], this.object.endCorner.calculaterData[this.object.id][1]],
                t.cornersVertices = this.cornersVertices,
                this.basePoints = t.basePoints;
                for (var i = 0; i < 12; i++)
                    this.basePoints.push(new qi);
                this.repeatUV = t.repeatUV,
                this.startUVPercent = t.startUVPercent,
                this.endUVPercent = t.endUVPercent
            }
        }, {
            key: "build",
            value: function(e) {
                this.setObject(e),
                this._calculate(),
                this.object.calculaterMesh = this.mesh
            }
        }, {
            key: "_calculate",
            value: function() {
                this.leftMesh = new $i,
                this.rightMesh = new $i,
                this.edgeMesh = new $i,
                this.mesh = new $i,
                this.suspend = this.object.suspend,
                this.initMeshInfo()
            }
        }, {
            key: "initMeshInfo",
            value: function() {
                this.baseBuild(),
                this.calPosInfo(),
                this.calBasePoints(),
                this.calUV(),
                this.fillMesh(),
                this.changeToParentWallLocal(this.mesh)
            }
        }, {
            key: "calUV",
            value: function() {
                this.calPosInfo(),
                this.calEachSideLen();
                var e = this.object.parentWall.calculaterData
                  , t = this.object.calculaterData.buildType
                  , i = this.object.calculaterData.doorOrWindows
                  , r = this.object.calculaterData.index
                  , n = this.object.length
                  , o = Ji.convertToVector3(this.object.parentWall.position);
                if ("start" === t)
                    this.object.calculaterData.endUVPercent[0] = this.rightSideLength / e.rightSideLength,
                    this.object.calculaterData.startUVPercent[2] = (e.leftSideLength - this.leftSideLength) / e.leftSideLength;
                else if ("end" === t) {
                    var s = this.getDoorOrWinRectPoints(i[r])[3].distanceTo(o.clone().addVectors(e.cornersVertices[0], o));
                    this.object.calculaterData.startUVPercent[0] = s / e.rightSideLength,
                    this.object.calculaterData.endUVPercent[2] = this.object.calculaterData.leftSideLength / e.leftSideLength,
                    this.object.calculaterData.repeatUV = this.repeatUV
                } else {
                    var a = i[r - 1]
                      , l = this.getDoorOrWinRectPoints(a)
                      , u = (s = l[3].distanceTo(o.clone().addVectors(e.cornersVertices[0], o)),
                    l[2].distanceTo(o.clone().addVectors(e.cornersVertices[2], o)));
                    this.startUVPercent[0] = s / e.rightSideLength,
                    this.startUVPercent[2] = (u - n) / e.leftSideLength,
                    this.endUVPercent[0] = (s + n) / e.rightSideLength,
                    this.endUVPercent[2] = u / e.leftSideLength
                }
            }
        }, {
            key: "changeToParentWallLocal",
            value: function(e) {
                for (var t = this.object.parentWall.position, i = 0; i < e.vertices.length; )
                    e.vertices[i] += this.object.position.x - t[0],
                    e.vertices[i + 1] += this.object.position.y - t[1],
                    e.vertices[i + 2] += this.object.position.z - t[2],
                    i += 3;
                for (var r = 0; r < e.subMeshes.length; r++) {
                    var n = e.subMeshes[r];
                    this.changeToParentWallLocal(n)
                }
            }
        }, {
            key: "shouldAddSideIndexes",
            value: function(e) {
                return "WallCorner" !== e.type || Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "shouldAddSideIndexes", this).call(this, e)
            }
        }]),
        t
    }(ar)
      , dr = function(e) {
        function t(e, i) {
            Ni(this, t);
            var r = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, i));
            return r.mesh = new $i,
            r.mesh.resource = e,
            r.modelMeshVerticeLength = r.modelMesh.vertices.length / 3,
            r.combineProgressIndexMap = {},
            r.transformations = [],
            r._tempPosition = new Float32Array(3),
            r._tempNormal = new Float32Array(3),
            r.groupsCountArray = null,
            r
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.mesh = null,
                this.modelMeshVerticeLength = null,
                this.combineProgressIndexMap = null,
                this.transformations = null
            }
        }, {
            key: "add",
            value: function(e) {
                this.vertexCount += this.modelMeshVerticeLength,
                this.indexCount += this.modelMesh.triangles.length,
                this.transformations.push(e)
            }
        }, {
            key: "combine",
            value: function() {
                this._initMesh();
                for (var e = 0; e < this.transformations.length; e++) {
                    var t = this.transformations[e];
                    this._combineVertices(t),
                    this._combineNormals(t),
                    this._combineUVs(),
                    this._combineTriangles(t),
                    this._combineExtraData(),
                    this.combineProgressIndexMap.vertices += this.modelMesh.vertices.length,
                    this.combineProgressIndexMap.triangles += this.modelMesh.triangles.length,
                    this.combineProgressIndexMap.uv += this.modelMesh.uvs.length
                }
            }
        }, {
            key: "_initMesh",
            value: function() {
                this.minusScaleCount = 0,
                this.mesh.vertices = new Float32Array(3 * this.vertexCount),
                this.mesh.normals = new Float32Array(3 * this.vertexCount),
                this.mesh.uvs = new Float32Array(2 * this.vertexCount),
                this.modelMesh.uv2s.length > 0 && (this.mesh.uv2s = new Float32Array(2 * this.vertexCount)),
                this.mesh.triangles = new Uint16Array(this.indexCount),
                this.combineProgressIndexMap = {
                    vertices: 0,
                    triangles: 0,
                    uv: 0
                };
                var e = this.modelMesh.extraData;
                for (var t in e)
                    if ("groups" === t && this.modelMesh.extraData[t].length > 0) {
                        var i = this.cloneGroups(this.modelMesh.extraData[t]);
                        this.combineProgressIndexMap.groups = [];
                        for (var r = 0; r < i.length; r++) {
                            i[r].count *= this.transformations.length,
                            i.start *= this.transformations.length,
                            this.combineProgressIndexMap.groups.push({
                                currentIndex: i[r].start
                            })
                        }
                        this.mesh.extraData[t] = i
                    } else {
                        var n = this.modelMesh.extraData[t].length * this.transformations.length;
                        this.mesh.extraData[t] = new Float32Array(n),
                        this.combineProgressIndexMap[t] = 0
                    }
            }
        }, {
            key: "_combineVertices",
            value: function(e) {
                for (var t = this.combineProgressIndexMap.vertices, i = this.modelMesh.vertices, r = e.positions, n = e.scales, o = e.quaternions, s = this._tempPosition, a = 0; a < i.length; a += 3) {
                    s[0] = i[a],
                    s[1] = i[a + 1],
                    s[2] = i[a + 2];
                    for (var l = r.length - 1; l > -1; l--) {
                        var u = r[l]
                          , c = n[l]
                          , h = o[l];
                        1 === c[0] && 1 === c[1] && 1 === c[2] || (s[0] *= c[0],
                        s[1] *= c[1],
                        s[2] *= c[2]),
                        Ji.applyQuaternionToVector3(h, s),
                        0 !== u[0] && (s[0] += u[0]),
                        0 !== u[1] && (s[1] += u[1]),
                        0 !== u[2] && (s[2] += u[2])
                    }
                    this.mesh.vertices[t] = s[0],
                    this.mesh.vertices[t + 1] = s[1],
                    this.mesh.vertices[t + 2] = s[2],
                    t += 3
                }
            }
        }, {
            key: "_combineNormals",
            value: function(e) {
                for (var t = this.combineProgressIndexMap.vertices, i = e.scales, r = this.modelMesh.normals, n = e.quaternions, o = this._tempNormal, s = 0; s < r.length; s += 3) {
                    o[0] = r[s],
                    o[1] = r[s + 1],
                    o[2] = r[s + 2];
                    for (var a = n.length - 1; a > -1; a--) {
                        var l = n[a];
                        this._changeNormalByMinusScale(i[a], o),
                        Ji.applyQuaternionToVector3(l, o)
                    }
                    this.mesh.normals[t] = o[0],
                    this.mesh.normals[t + 1] = o[1],
                    this.mesh.normals[t + 2] = o[2],
                    t += 3
                }
            }
        }, {
            key: "_changeNormalByMinusScale",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    e[i] < 0 && (t[i] = -t[i])
                }
            }
        }, {
            key: "_combineUVs",
            value: function() {
                for (var e = this.modelMesh.uvs, t = this.modelMesh.uv2s, i = this.combineProgressIndexMap.uv, r = 0; r < e.length; r++) {
                    var n = e[r];
                    this.mesh.uvs[i + r] = n
                }
                for (var o = 0; o < t.length; o++) {
                    var s = t[o];
                    this.mesh.uv2s[i + o] = s
                }
            }
        }, {
            key: "_combineTriangles",
            value: function(e) {
                for (var t = e.scales, i = 0, r = 0; r < t.length; r++) {
                    var n = t[r];
                    0 === i && (i = this._calMinusScaleCount(n))
                }
                var o = this.combineProgressIndexMap.vertices / 3
                  , s = this.combineProgressIndexMap.triangles
                  , a = this.modelMesh.triangles;
                if (this.combineProgressIndexMap.groups)
                    for (var l = this.modelMesh.extraData.groups, u = 0; u < l.length; u++) {
                        var c = l[u]
                          , h = c.start
                          , p = c.count
                          , d = this.combineProgressIndexMap.groups[u];
                        if (1 === i || 3 === i)
                            for (var f = 0; f < p; )
                                this.mesh.triangles[d.currentIndex + f + 2] = o + a[h + f],
                                this.mesh.triangles[d.currentIndex + f + 1] = o + a[h + f + 1],
                                this.mesh.triangles[d.currentIndex + f] = o + a[h + f + 2],
                                f += 3;
                        else
                            for (var m = 0; m < p; m++)
                                this.mesh.triangles[d.currentIndex + m] = o + a[h + m];
                        d.currentIndex += p
                    }
                else if (1 === i || 3 === i)
                    for (var g = 0; g < a.length; )
                        this.mesh.triangles[s + g + 2] = o + a[g],
                        this.mesh.triangles[s + g + 1] = o + a[g + 1],
                        this.mesh.triangles[s + g] = o + a[g + 2],
                        g += 3;
                else
                    for (var v = 0; v < a.length; v++) {
                        var y = a[v];
                        this.mesh.triangles[s + v] = o + y
                    }
            }
        }, {
            key: "_calMinusScaleCount",
            value: function(e) {
                for (var t = 0, i = 0; i < e.length; i++) {
                    e[i] < 0 && t++
                }
                return t
            }
        }, {
            key: "_combineExtraData",
            value: function() {
                var e = this.modelMesh.extraData;
                for (var t in e)
                    if (!("groups" === t && e[t].length > 0)) {
                        for (var i = e[t], r = this.combineProgressIndexMap[t], n = 0; n < i.length; n++) {
                            var o = i[n];
                            this.mesh.extraData[t][r + n] = o
                        }
                        this.combineProgressIndexMap[t] += i.length
                    }
            }
        }, {
            key: "cloneGroups",
            value: function(e) {
                for (var t = [], i = 0; i < e.length; i++) {
                    var r = e[i];
                    t.push(Ji.cloneJSObject(r))
                }
                return t
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams(),
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(function() {
        function e(t, i) {
            Ni(this, e),
            this._initParams(),
            this.resource = t,
            this.modelMesh = i,
            this.maxCount = 65534
        }
        return Hi(e, [{
            key: "_initParams",
            value: function() {
                this.vertexCount = 0,
                this.indexCount = 0,
                this.resource = null,
                this.modelMesh = null,
                this.groups = null,
                this.transformations = null,
                this.maxCount = null,
                this.combineMesh = null
            }
        }, {
            key: "isExceed",
            value: function(e) {
                return this.vertexCount + e > this.maxCount
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }())
      , fr = function() {
        function e(t, i) {
            Ni(this, e),
            this._initParams(),
            this.mesh = new $i,
            this.resource = t,
            this.modelMesh = i,
            this.subMeshProcessors = [],
            this.modelMeshVerticeLength = this.modelMesh.vertices.length / 3,
            this.currentSubMeshProcessor = this._createSubMeshProcessor()
        }
        return Hi(e, [{
            key: "_initParams",
            value: function() {
                this.mesh = null,
                this.resource = null,
                this.modelMesh = null,
                this.subMeshProcessors = null,
                this.modelMeshVerticeLength = null,
                this.currentSubMeshProcessor = null
            }
        }, {
            key: "_createSubMeshProcessor",
            value: function() {
                var e = new dr(this.resource,this.modelMesh);
                return this.subMeshProcessors.push(e),
                e
            }
        }, {
            key: "add",
            value: function(e) {
                this.currentSubMeshProcessor.isExceed(this.modelMeshVerticeLength) && (this.currentSubMeshProcessor = this._createSubMeshProcessor()),
                this.currentSubMeshProcessor.add(e)
            }
        }, {
            key: "combine",
            value: function() {
                for (var e = 0; e < this.subMeshProcessors.length; e++) {
                    var t = this.subMeshProcessors[e];
                    t.combine(),
                    this.mesh.subMeshes.push(t.mesh)
                }
                1 === this.subMeshProcessors.length && (this.mesh = this.mesh.subMeshes[0])
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , mr = function(e) {
        function t(e) {
            Ni(this, t);
            var i = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.isResourceVertexExceed = !1,
            i
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.processorMap = new Map,
                this.processors = [],
                this.isResourceVertexExceed = !1
            }
        }, {
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this),
                this._initResources(),
                this.isResourceVertexExceed || (this._fillProcessors(),
                this._createMesh())
            }
        }, {
            key: "_initResources",
            value: function() {
                for (var e = this.object.resources, t = 0; t < e.length; t++) {
                    var i = e[t];
                    if (this.resourceCombineManager.getCombineMesh(i),
                    i.vertexIsExceed)
                        return void (this.isResourceVertexExceed = !0)
                }
                for (var r = 0; r < e.length; r++) {
                    var n = e[r];
                    this._initProcessors(n)
                }
            }
        }, {
            key: "_initProcessors",
            value: function(e) {
                var t = this.resourceCombineManager.getCombineMesh(e);
                this._createProcessorByResourceBuilderMesh(e, t)
            }
        }, {
            key: "_createProcessorByResourceBuilderMesh",
            value: function(e, t) {
                if (this.processorMap[e.id] || (this.processorMap[e.id] = []),
                t.resource) {
                    var i = new fr(t.resource,t);
                    this.processorMap[e.id].push(i),
                    this.processors.push(i)
                }
                for (var r = 0; r < t.subMeshes.length; r++) {
                    var n = t.subMeshes[r];
                    this._createProcessorByResourceBuilderMesh(e, n)
                }
            }
        }, {
            key: "_fillProcessors",
            value: function() {}
        }, {
            key: "_createMesh",
            value: function() {
                for (var e = 0; e < this.processors.length; e++) {
                    var t = this.processors[e];
                    t.combine(),
                    this.mesh.subMeshes.push(t.mesh)
                }
            }
        }, {
            key: "addSingleTransformationToProcessors",
            value: function(e) {
                for (var t = 0; t < this.processors.length; t++) {
                    this.processors[t].add(e)
                }
            }
        }]),
        t
    }(lr)
      , gr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_fillProcessors",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_fillProcessors", this).call(this),
                this.addTransformationToProcessor()
            }
        }, {
            key: "addTransformationToProcessor",
            value: function() {
                for (var e = 0; e < this.object.transformations.length; e++) {
                    var t = this.object.transformations[e];
                    this.addSingleTransformationToProcessors(t)
                }
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.processors.length; e++) {
                    this.processors[e].clear()
                }
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(mr)
      , vr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(er)
      , yr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this)
            }
        }]),
        t
    }(er)
      , br = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(yr)
      , _r = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(yr)
      , xr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_calculate",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_calculate", this).call(this)
            }
        }]),
        t
    }(lr)
      , Er = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(lr)
      , wr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(lr)
      , Tr = function e(t) {
        Ni(this, e)
    }
      , Mr = new (function() {
        function e(t) {
            Ni(this, e),
            this.combineBundleObjectMaps = {},
            this.CombineBuilderClass = Tr
        }
        return Hi(e, [{
            key: "getCombineBundleObject",
            value: function(e) {
                this.combineBundleObjectMaps[e.id]
            }
        }, {
            key: "createCombineBuilder",
            value: function(e) {
                return new this.CombineBuilderClass({
                    resource: e
                })
            }
        }, {
            key: "clear",
            value: function() {
                this.combineBundleObjectMaps = {},
                this.CombineBuilderClass = null
            }
        }]),
        e
    }())
      , Cr = function() {
        function e() {
            Ni(this, e),
            this.positions = [],
            this.scales = [],
            this.quaternions = []
        }
        return Hi(e, [{
            key: "clone",
            value: function() {
                var t = new e;
                return t.positions = this.positions.slice(),
                t.scales = this.scales.slice(),
                t.quaternions = this.quaternions.slice(),
                t
            }
        }]),
        e
    }()
      , Sr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.modelNumber = -1,
                this.models = [],
                this.objPositions = [],
                this.objLocalPositions = [],
                this.objRotations = [],
                this.objScales = [],
                this.transformations = [],
                this.processorMap = new Map,
                this.processors = [],
                this.wallPosition = null
            }
        }, {
            key: "registerCombineBuilder",
            value: function(e) {
                var t = Mr.createCombineBuilder(e);
                e.containBuilder(e.id) || e.registerBuilder(e.id, t)
            }
        }, {
            key: "_calculate",
            value: function() {
                this.mesh = new $i;
                for (var e = this.object.resources, t = 0; t < e.length; t++) {
                    var i = e[t];
                    this._initProcessors(i)
                }
                if (this.object.doorOrWindows.length > 0) {
                    this.initSimpleCornersAndWalls();
                    for (var r = 0; r < this.subWalls.length; r++) {
                        var n = this.subWalls[r];
                        n.calculate(),
                        this.mesh.subMeshes.push(n.calculater.mesh)
                    }
                } else
                    this.calObjInfo();
                this.addTransformationToProcessor();
                for (var o = 0; o < this.processors.length; o++) {
                    var s = this.processors[o];
                    s.combine(),
                    this.mesh.subMeshes.push(s.mesh)
                }
            }
        }, {
            key: "instanceModels",
            value: function() {
                if (null !== this.object.model) {
                    this.models = [];
                    for (var e = this.modelNumber, t = 0; t < e; t++) {
                        var i = this.model.clone()
                          , r = this.objPositions[t]
                          , n = this.objRotations[t]
                          , o = this.objScales[t];
                        i.position.set(r.x, r.y, r.z),
                        i.quaternion.set(n.x, n.y, n.z, n.w),
                        i.scale.set(o.x, o.y, o.z),
                        this.mesh.add(i),
                        this.models.push(i)
                    }
                }
            }
        }, {
            key: "calObjInfo",
            value: function() {
                this.objPositions = [],
                this.objRotations = [],
                this.objScales = [];
                var e = Ji.convertToVector3(this.object.startCorner.position)
                  , t = (Ji.convertToVector3(this.object.endCorner.position),
                Ji.convertToVector3(this.object.direction))
                  , i = Ji.convertToVector3(this.object.position);
                this.wallPosition = i,
                this.modelSize = this.object.resource.size,
                -1 === this.object.height ? this.object.height = this.modelSize[1] : 0 !== this.modelSize[1] ? this.heightRatio = this.object.height / this.modelSize[1] : (console.warn("model size is zero " + this.object.resource.id),
                this.object.height = 3);
                var r = new qi(0,-1,0)
                  , n = this.modelSize[0]
                  , o = (this.modelSize[2],
                this.modelSize[1])
                  , s = this.object.length / n
                  , a = parseInt(s)
                  , l = Math.ceil(s);
                this.modelNumber = l;
                var u = l * n
                  , c = new qi
                  , h = t.clone();
                c.addVectors(e, h.multiplyScalar(u));
                var p = new qi;
                p.crossVectors(t, r),
                p.normalize();
                var d = new Gi;
                0 === p.x && 0 === p.y && 0 === p.z || d.setFromUnitVectors(new qi(0,0,-1), p);
                var f = .5 * n
                  , m = new qi(f,this.object.suspend,0);
                m.applyQuaternion(d),
                d.multiply(new Gi(0,1,0,0));
                for (var g = 0; g < l; g++) {
                    var v = g / l
                      , y = new qi;
                    y.lerpVectors(e, c, v);
                    var b = new qi;
                    b.addVectors(m, y);
                    var _ = new qi(1,this.object.height / o,1);
                    this.objPositions.push(b),
                    this.objRotations.push(d),
                    this.objScales.push(_)
                }
                var x = (s - a) * n
                  , E = x / n;
                if (l > 0 && x > 0) {
                    this.objScales[l - 1] = new qi(E,this.object.height / o,1);
                    var w = new qi(f * (1 - E),0,0);
                    w.applyQuaternion(d),
                    this.objPositions[l - 1].add(w)
                }
                for (var T = 0; T < this.objPositions.length; T++) {
                    var M = this.objPositions[T]
                      , C = this.objScales[T]
                      , S = this.objRotations[T]
                      , j = new Cr;
                    new qi;
                    j.positions.push(M.toArray()),
                    j.quaternions.push(S.toArray()),
                    j.scales.push(C.toArray()),
                    this.transformations.push(j)
                }
            }
        }, {
            key: "initSimpleCornersAndWalls",
            value: function() {
                for (var e = this.sortDoorOrWins(), t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.getDoorOrWinStartAndEndPos(i)
                      , n = nr.createSubWallCorner(this.id + "_" + t + "_1", r[0], this)
                      , o = nr.createSubWallCorner(this.id + "_" + t + "_2", r[1], this);
                    if (this.addSubWallCorner(n),
                    this.addSubWallCorner(o),
                    0 === t) {
                        var s = this.objectManager.create({
                            type: or.SubModelWall
                        });
                        s.resource = this.object.resource,
                        this.subWalls.push(s),
                        s.startCorner = this.object.startCorner,
                        s.endCorner = n,
                        s.startCorner.calculate(),
                        s.endCorner.calculate(),
                        s.parentWall = this.object,
                        s.height = this.object.height
                    } else {
                        var a = e[t - 1]
                          , l = this.getDoorOrWinStartAndEndPos(a)
                          , u = this.getWallCornerByPos(l[1])
                          , c = this.objectManager.create({
                            type: or.SubModelWall
                        });
                        c.resource = this.object.resource,
                        this.subWalls.push(c),
                        c.startCorner = u,
                        c.endCorner = n,
                        c.startCorner.calculate(),
                        c.endCorner.calculate(),
                        c.parentWall = this.object,
                        c.height = this.object.height
                    }
                    if (t === e.length - 1) {
                        var h = this.objectManager.create({
                            type: or.SubModelWall
                        });
                        h.resource = this.object.resource,
                        this.subWalls.push(h),
                        h.startCorner = o,
                        h.endCorner = this.object.endCorner,
                        h.startCorner.calculate(),
                        h.parentWall = this.object,
                        h.height = this.object.height
                    }
                    this.buildHeadAndFootWall(i, n, o)
                }
            }
        }, {
            key: "buildSimpleCornersAndWalls",
            value: function() {
                this.wallGroup = new THREE.Object3D;
                for (var e = 0; e < this.subCorners.length; e++) {
                    this.subCorners[e].build()
                }
                for (e = 0; e < this.subWalls.length; e++) {
                    var t = this.subWalls[e];
                    t.build(),
                    this.wallGroup.add(t.wallGroup)
                }
            }
        }, {
            key: "buildHeadAndFootWall",
            value: function(e, t, i) {
                if (!this.object.resource.isSupportHeadAndFootModelWall)
                    return !1;
                var r = e.suspendPercent;
                if (0 !== r) {
                    var n = this.objectManager.create({
                        type: or.SubModelWall
                    });
                    this.subWalls.push(n),
                    n.resource = this.object.resource,
                    n.parentWall = this.object,
                    n.startCorner = t,
                    n.endCorner = i,
                    n.height = this.object.height * r
                }
                e.size;
                var o = e.size[1] + this.object.height * r;
                if (o < this.object.height) {
                    var s = this.objectManager.create({
                        type: or.SubModelWall
                    });
                    this.subWalls.push(s),
                    s.resource = this.object.resource,
                    s.parentWall = this.object,
                    s.startCorner = t,
                    s.endCorner = i,
                    s.suspend = o,
                    s.height = this.object.height - o
                }
            }
        }, {
            key: "_initProcessors",
            value: function(e) {
                e.buildRegisterBuilder();
                var t = e.getBuilder(e.id).mesh;
                this._createProcessorByResourceBuilderMesh(t)
            }
        }, {
            key: "_createProcessorByResourceBuilderMesh",
            value: function(e) {
                if (e.resource && !this.processorMap.has(e.resource)) {
                    var t = new fr(e.resource,e);
                    this.processorMap.set(e.resource, t),
                    this.processors.push(t)
                }
                for (var i = 0; i < e.subMeshes.length; i++) {
                    var r = e.subMeshes[i];
                    this._createProcessorByResourceBuilderMesh(r)
                }
            }
        }, {
            key: "addTransformationToProcessor",
            value: function() {
                for (var e = 0; e < this.transformations.length; e++)
                    for (var t = this.transformations[e], i = 0; i < this.processors.length; i++) {
                        this.processors[i].add(t)
                    }
            }
        }]),
        t
    }(sr)
      , jr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(Sr)
      , Pr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_fillProcessors",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_fillProcessors", this).call(this);
                for (var e = 0; e < this.object.walls.length; e++) {
                    var i = this.object.walls[e];
                    if (i.calculater)
                        if (i.calculater.setObject(i),
                        i.doorOrWindows.length > 0) {
                            i.calculater.initSimpleCornersAndWalls();
                            for (var r = 0; r < i.calculater.subWalls.length; r++) {
                                var n = i.calculater.subWalls[r];
                                n.calculater.setObject(n),
                                n.calculater.calObjInfo(),
                                this.addTransformationToProcessor(n.calculater.transformations)
                            }
                        } else
                            i.calculater.calObjInfo(),
                            this.addTransformationToProcessor(i.calculater.transformations);
                    else
                        console.log("wall not have calculater")
                }
            }
        }, {
            key: "changeToParentCoordinate",
            value: function() {
                for (var e = 0; e < this.object.walls.length; e++) {
                    var t = this.object.walls[e];
                    this.changeMeshCoordinate(t.calculater.mesh, t.position)
                }
            }
        }, {
            key: "changeMeshCoordinate",
            value: function(e, t) {
                for (var i = 0; i < e.vertices.length; ) {
                    var r = e.vertices;
                    r[i] += t[0],
                    r[i + 1] += t[1],
                    r[i + 2] += t[2],
                    i += 3
                }
                for (var n = 0; n < e.subMeshes.length; n++) {
                    var o = e.subMeshes[n];
                    this.changeMeshCoordinate(o, t)
                }
            }
        }, {
            key: "addTransformationToProcessor",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.addSingleTransformationToProcessors(i)
                }
            }
        }]),
        t
    }(mr)
      , Rr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(er)
      , Dr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.transformationMap = {}
            }
        }, {
            key: "_fillProcessors",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_fillProcessors", this).call(this),
                this._initTransformationMap(),
                this.addTransformationToProcessor()
            }
        }, {
            key: "_initTransformationMap",
            value: function() {
                for (var e = this.object.objects, t = 0; t < e.length; t++) {
                    var i = e[t];
                    this._calSingleObjectTransformation(i)
                }
            }
        }, {
            key: "_calSingleObjectTransformation",
            value: function(e, t) {
                if (t || (t = new Cr),
                t.positions.push(e.position),
                t.scales.push(e.scale),
                t.quaternions.push(e.rotation),
                "PlacementGroup" !== e.type && 0 === e.children.length)
                    this.transformationMap[e.resource.id] || (this.transformationMap[e.resource.id] = []),
                    this.transformationMap[e.resource.id].push(t);
                else
                    for (var i = 0; i < e.children.length; i++) {
                        var r = e.children[i];
                        this._calSingleObjectTransformation(r, t.clone())
                    }
            }
        }, {
            key: "addTransformationToProcessor",
            value: function() {
                for (var e in this.transformationMap)
                    for (var t = this.transformationMap[e], i = this.processorMap[e], r = 0; r < t.length; r++)
                        for (var n = t[r], o = 0; o < i.length; o++) {
                            i[o].add(n)
                        }
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.processors.length; e++) {
                    this.processors[e].clear()
                }
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(mr)
      , Ar = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(cr)
      , kr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(cr)
      , Or = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(cr)
      , Br = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(gr)
      , Fr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_fillProcessors",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_fillProcessors", this).call(this);
                for (var e = 0; e < this.object.objects.length; e++) {
                    var i = this.object.objects[e];
                    i.calculate(),
                    i.calculater.calculateBodyTransformation()
                }
                this.addTransformationToProcessor()
            }
        }, {
            key: "_classifyChangeDirectionOrOpenObject",
            value: function() {
                for (var e = [], t = [], i = 0; i < this.object.objects.length; i++) {
                    var r = this.object.objects[i];
                    r.isOpen || 0 !== r.openDirIndex ? e.push(r) : t.push(r)
                }
                this.object.objects = t,
                this.object.notCombineObjects = e
            }
        }, {
            key: "addTransformationToProcessor",
            value: function() {
                for (var e = 0; e < this.object.objects.length; e++) {
                    var t = this.object.objects[e]
                      , i = new Cr;
                    i.positions.push(t.position),
                    i.scales.push(t.scale),
                    i.quaternions.push(t.rotation),
                    this.addSingleTransformationToProcessors(i)
                }
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.processors.length; e++) {
                    this.processors[e].clear()
                }
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(mr)
      , Lr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(er)
      , Ir = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        Hi(t, [{
            key: "calUV",
            value: function() {
                this.calPosInfo(),
                this.calEachSideLen();
                var e = this.object.parentWall.calculaterData
                  , t = Ji.convertToVector3(this.object.parentWall.position)
                  , i = this.object.length
                  , r = this.getDoorOrWinRectPoints(this.object.calculaterData.doorOrWindow)
                  , n = r[0].distanceTo(t.clone().addVectors(e.cornersVertices[0], t))
                  , o = r[2].distanceTo(t.clone().addVectors(e.cornersVertices[2], t))
                  , s = this.object.calculaterData;
                if ("down" === s.buildType)
                    s.startUVPercent = [n / e.rightSideLength, 0, o / e.leftSideLength, 0],
                    s.endUVPercent[0] = (n + i) / e.rightSideLength,
                    s.endUVPercent[1] = this.object.height / this.object.parentWall.height,
                    s.endUVPercent[2] = (o + i) / e.leftSideLength,
                    s.endUVPercent[3] = this.object.height / this.object.parentWall.height,
                    this.startUVPercent = s.startUVPercent,
                    this.endUVPercent = s.endUVPercent;
                else if ("up" === s.buildType) {
                    var a = this.object.calculaterData.doorOrWindow.suspendPercent
                      , l = Ji.convertToVector3(this.object.calculaterData.doorOrWindow.size).y + this.object.parentWall.height * a;
                    s.startUVPercent = [n / e.rightSideLength, l / this.object.parentWall.height, o / e.leftSideLength, l / this.object.parentWall.height],
                    s.endUVPercent[0] = (n + i) / e.rightSideLength,
                    s.endUVPercent[2] = (o + i) / e.leftSideLength,
                    this.startUVPercent = s.startUVPercent,
                    this.endUVPercent = s.endUVPercent
                }
            }
        }, {
            key: "shouldAddSideIndexes",
            value: function(e) {
                return !1
            }
        }]),
        t
    }(pr)
      , Nr = {
        SubWallCorner: rr,
        SubStraightManualWall: pr,
        SubDoorOrWindowStraightManualWall: Ir,
        DoorOrWindow: hr,
        Placement: cr,
        StraightManualWall: ar,
        WallCorner: ir,
        CombineStraightManualWall: ur,
        CombinePlacement: gr,
        Room: vr,
        Floor: yr,
        Ceiling: br,
        Roof: _r,
        CombineFloor: xr,
        CombineCeiling: Er,
        CombineRoof: wr,
        CombineModelWall: Pr,
        ModelWall: Sr,
        SubModelWall: jr,
        PlacementGroup: Rr,
        CombinePlacementGroup: Dr,
        FacadeGroup: Ar,
        Facade: kr,
        PlacementGround: Rr,
        PlacementWall: Or,
        CombinePlacementWall: Br,
        CombineDoorOrWindow: Fr,
        FloorPlan: Lr,
        Outdoors: Lr
    }
      , Hr = function(e) {
        function t() {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this))
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this._startCorner = null,
                this._endCorner = null,
                this.thick = -1,
                this.height = -1,
                this._length = null,
                this.pathPoints = [],
                this._direction = null,
                this.doorOrWindows = [],
                this.subWalls = [],
                this.subCorners = [],
                this.suspend = 0,
                this.mesh = null,
                this.isShow = !0,
                this.isContainer = !1,
                this._position = null
            }
        }, {
            key: "getWallOtherCorner",
            value: function(e) {
                return this.startCorner === e ? this.endCorner : this.endCorner === e ? this.startCorner : null
            }
        }, {
            key: "sortDoorOrWins",
            value: function() {
                var e = this.startCorner.position
                  , t = this.endCorner.position
                  , i = t.x - e.x > 0 ? 1 : -1
                  , r = t.z - e.z > 0 ? 1 : -1
                  , n = !0;
                Math.abs(t.x - e.x) < .001 && (n = !1);
                for (var o = [], s = 0; s < this.doorOrWindows.length; s++) {
                    for (var a = this.doorOrWindows[s], l = 0; l < o.length; l++) {
                        var u = o[l];
                        if ((n ? (u.position.x - a.position.x) * i : (u.position.z - a.position.z) * r) >= 0) {
                            o.splice(l, 0, a);
                            break
                        }
                        if (l == o.length - 1) {
                            o.push(a);
                            break
                        }
                    }
                    0 === o.length && o.push(a)
                }
                return o
            }
        }, {
            key: "getWallCornerByPos",
            value: function(e) {
                for (var t = null, i = -1, r = this.subCorners, n = 0; n < r.length; n++) {
                    var o = e.distanceTo(r[n].position);
                    o < .01 && (null === t ? (t = r[n],
                    i = o) : o < i && (i = o,
                    t = r[n]))
                }
                return t
            }
        }, {
            key: "getDoorOrWinStartAndEndPos",
            value: function(e) {
                var t = e.size
                  , i = this.direction
                  , r = e.position.clone();
                r.y = 0;
                var n = r.clone()
                  , o = r.clone()
                  , s = t.x / 2;
                return n.subVectors(n, i.clone().multiplyScalar(s)),
                o.addVectors(o, i.clone().multiplyScalar(s)),
                [n, o]
            }
        }, {
            key: "addSubWallCorner",
            value: function(e) {
                for (var t = 0; t < this.subCorners.length; t++) {
                    if (this.subCorners[t] === e)
                        return
                }
                this.subCorners.push(e)
            }
        }, {
            key: "addToParentCollector",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "addToParentCollector", this).call(this),
                this.parent.walls.push(this)
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.subWalls.length; e++) {
                    this.subWalls[e].clear()
                }
                for (var i = 0; i < this.subCorners.length; i++) {
                    this.subCorners[i].clear()
                }
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }, {
            key: "startCorner",
            get: function() {
                return this._startCorner
            },
            set: function(e) {
                this._startCorner = e,
                this._startCorner && this._startCorner.addWall(this)
            }
        }, {
            key: "endCorner",
            get: function() {
                return this._endCorner
            },
            set: function(e) {
                this._endCorner = e,
                this._endCorner && this._endCorner.addWall(this)
            }
        }, {
            key: "length",
            get: function() {
                if (null === this._length) {
                    var e = new qi;
                    e.subVectors(Ji.convertToVector3(this.endCorner.position), Ji.convertToVector3(this.startCorner.position)),
                    this._length = e.length()
                }
                return this._length
            }
        }, {
            key: "direction",
            get: function() {
                return null === this._direction && (this._direction = new qi,
                this._direction.subVectors(Ji.convertToVector3(this.endCorner.position), Ji.convertToVector3(this.startCorner.position)),
                this._direction.normalize()),
                this._direction
            }
        }, {
            key: "size",
            get: function() {
                if (null === this._size) {
                    var e = new qi
                      , t = this.startCorner.position
                      , i = this.endCorner.position;
                    e.x = Math.abs(t.x - i.x),
                    e.z = Math.abs(t.z - i.z),
                    e.y = this.height,
                    0 === e.x && (e.x = this.thick),
                    0 === e.z && (e.z = this.thick),
                    this._size = e
                }
                return this._size
            }
        }, {
            key: "position",
            get: function() {
                if (!this._position) {
                    this.startCorner.position,
                    this.endCorner.position;
                    this._position = new qi,
                    this._position.subVectors(Ji.convertToVector3(this.endCorner.position), Ji.convertToVector3(this.startCorner.position)),
                    this._position = this._position.divideScalar(2)
                }
                return this._position
            },
            set: function(e) {
                this._position = e
            }
        }]),
        t
    }(Zi)
      , Ur = function(e) {
        function t() {
            Ni(this, t);
            var e = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.type = "SubStraightManualWall",
            e
        }
        return zi(t, e),
        Hi(t, [{
            key: "_initParams",
            value: function() {
                Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.parentWall = null
            }
        }, {
            key: "build",
            value: function() {
                this.calculate()
            }
        }, {
            key: "parent",
            get: function() {
                return this.parentWall.parent
            }
        }, {
            key: "position",
            get: function() {
                var e = Ji.convertToVector3(this.startCorner.position)
                  , t = Ji.convertToVector3(this.endCorner.position)
                  , i = new qi;
                return i.addVectors(e, t),
                i.divideScalar(2),
                i
            },
            set: function(e) {}
        }]),
        t
    }(Hr)
      , zr = {
        SubStraightManualWall: Ur,
        SubModelWall: function(e) {
            function t() {
                Ni(this, t);
                var e = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                return e.resource = null,
                e.objPositions = [],
                e.objLocalPositions = [],
                e.objRotations = [],
                e.objScales = [],
                e.heightRatio = 1,
                e.modelNumber = -1,
                e.type = "SubModelWall",
                e
            }
            return zi(t, e),
            Hi(t, [{
                key: "_initParams",
                value: function() {
                    Ui(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.resource = null,
                    this.objPositions = null,
                    this.objLocalPositions = null,
                    this.objRotations = null,
                    this.objScales = null,
                    this.heightRatio = null,
                    this.modelNumber = null
                }
            }, {
                key: "build",
                value: function() {
                    this.calculate()
                }
            }]),
            t
        }(Hr),
        SubDoorOrWindowStraightManualWall: function(e) {
            function t() {
                Ni(this, t);
                var e = Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                return e.type = "SubDoorOrWindowStraightManualWall",
                e
            }
            return zi(t, e),
            t
        }(Ur),
        SubWallCorner: rr
    }
      , Vr = function() {
        function e() {
            Ni(this, e),
            this.objects = [],
            this.calculaterManager = null,
            this.meshBuilderManager = null,
            this.ClassName = or
        }
        return Hi(e, [{
            key: "create",
            value: function(e) {
                var t = e.type
                  , i = (e.parent,
                new (0,
                zr[t]));
                return this.calculaterManager && (i.calculater = this.calculaterManager.create({
                    type: t,
                    object: i
                })),
                i
            }
        }]),
        e
    }()
      , Wr = function(e) {
        function t(e) {
            return Ni(this, t),
            Vi(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zi(t, e),
        t
    }(er)
      , Gr = "function" == typeof Symbol && "symbol" === Ii(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : Ii(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : Ii(e)
    }
      , qr = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Xr = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , Jr = function() {
        function e(t) {
            qr(this, e),
            this._init()
        }
        return Xr(e, [{
            key: "_init",
            value: function() {
                this.vertices = [],
                this.normals = [],
                this.uvs = [],
                this.uv2s = [],
                this.resource = null,
                this.triangles = [],
                this.subMeshes = [],
                this.extraData = {}
            }
        }, {
            key: "clone",
            value: function() {
                var t = new e;
                for (var i in t.vertices = this.vertices.slice(),
                t.normals = this.normals.slice(),
                t.uvs = this.uvs.slice(),
                t.uv2s = this.uv2s.slice(),
                t.resource = this.resource,
                t.triangles = this.triangles.slice(),
                this.extraData)
                    t.extraData[i] = this.extraData[i].slice();
                for (var r = 0; r < this.subMeshes.length; r++) {
                    var n = this.subMeshes[r].clone();
                    t.subMeshes.push(n)
                }
                return t
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.subMeshes.length; e++) {
                    this.subMeshes[e].clear()
                }
                this._init()
            }
        }]),
        e
    }()
      , Yr = function() {
        function e() {
            qr(this, e)
        }
        return Xr(e, null, [{
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : Gr(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "applyQuaternionToVector3",
            value: function(e, t) {
                if (0 !== e[0] || 0 !== e[1] || 0 !== e[2] || 1 !== e[3]) {
                    var i = t[0]
                      , r = t[1]
                      , n = t[2]
                      , o = e[0]
                      , s = e[1]
                      , a = e[2]
                      , l = e[3]
                      , u = l * i + s * n - a * r
                      , c = l * r + a * i - o * n
                      , h = l * n + o * r - s * i
                      , p = -o * i - s * r - a * n;
                    t[0] = u * l + p * -o + c * -a - h * -s,
                    t[1] = c * l + p * -s + h * -o - u * -a,
                    t[2] = h * l + p * -a + u * -s - c * -o
                }
            }
        }]),
        e
    }()
      , Qr = function() {
        function e(t) {
            qr(this, e),
            this._initParams(),
            this.positions = [],
            this.normals = [],
            this.uvs = [],
            this.uv2s = [],
            this.uv3s = [],
            this.indexes = [],
            this.colors = [],
            this.alphaIndexes = [],
            this.material = t,
            this.groupsArray = null,
            this.meshes = [],
            this.transformations = [],
            this.verticesCount = 0,
            this.uvsCount = 0,
            this.indexesCount = 0,
            this.trianglesCount = 0,
            this.colorsCount = 0,
            this.alphaIndexsCount = 0,
            this.uv2sCount = 0,
            this.uv3sCount = 0,
            this.groupsCountArray = null,
            this.combineCursor = {
                vertex: 0,
                index: 0,
                uv: 0,
                color: 0,
                alphaIndex: 0,
                uv2: 0,
                uv3: 0,
                groups: []
            },
            this.maxCount = 196602
        }
        return Xr(e, [{
            key: "_initParams",
            value: function() {
                this.positions = [],
                this.normals = [],
                this.uvs = [],
                this.uv2s = [],
                this.uv3s = [],
                this.indexes = [],
                this.colors = [],
                this.alphaIndexes = [],
                this.material = null,
                this.groups = null,
                this.meshes = [],
                this.transformations = [],
                this.verticesCount = 0,
                this.uvsCount = 0,
                this.indexesCount = 0,
                this.trianglesCount = 0,
                this.colorsCount = 0,
                this.alphaIndexsCount = 0,
                this.uv2sCount = 0,
                this.uv3sCount = 0,
                this.combineCursor = null,
                this.maxCount = null
            }
        }, {
            key: "_initGroups",
            value: function() {
                var e = []
                  , t = this.meshObj.geometry;
                if (t.groups.length > 0) {
                    var i = this.cloneGroups(t.groups);
                    i.forEach((function(e) {
                        e.start += 0
                    }
                    )),
                    e = e.concat(i)
                }
            }
        }, {
            key: "cloneGroups",
            value: function(e) {
                for (var t = [], i = 0; i < e.length; i++) {
                    var r = e[i];
                    t.push(Yr.cloneJSObject(r))
                }
                return t
            }
        }, {
            key: "getCalculaterMesh",
            value: function() {
                this._combine();
                var e = new Jr;
                return e.resource = this.material,
                this.positions.length > 0 && (e.vertices = this.positions),
                this.normals.length && (e.normals = this.normals),
                this.uvs.length && (e.uvs = this.uvs),
                this.uv2s.length && (e.uv2s = this.uv2s),
                this.indexes.length > 0 && (e.triangles = this.indexes),
                this.colors.length && (e.extraData.color = this.colors),
                this.uv3s.length > 0 && (e.extraData.uv3 = this.uv3s),
                this.alphaIndexes.length > 0 && (e.extraData.alphaIndex = this.alphaIndexes),
                this.groups && (e.extraData.groups = this.groups),
                e
            }
        }, {
            key: "_combine",
            value: function() {
                if (this.indexes = new Uint16Array(this.indexesCount),
                this.positions = new Float32Array(this.verticesCount),
                this.normals = new Float32Array(this.verticesCount),
                this.uvs = new Float32Array(this.uvsCount),
                0 !== this.uv2sCount && (this.uv2s = new Float32Array(this.uv2sCount)),
                0 !== this.uv3sCount && (this.uv3s = new Float32Array(this.uv3sCount)),
                0 !== this.colorsCount && (this.colors = new Uint16Array(this.colorsCount)),
                0 !== this.alphaIndexsCount && (this.alphaIndexes = new Uint16Array(this.alphaIndexsCount)),
                this.groupsCountArray)
                    for (var e = 0; e < this.groupsCountArray.length; e++) {
                        var t = this.groupsCountArray[e];
                        this.combineCursor.groups.push({
                            currentIndex: t.start
                        })
                    }
                for (var i = 0; i < this.transformations.length; i++) {
                    var r = this.transformations[i];
                    this._applyTransformation(this.meshes[i], r)
                }
                this.groups = this.groupsCountArray
            }
        }, {
            key: "_applyTransformation",
            value: function(e, t, i) {
                this._combineIndexes(e, i),
                this._combinePositionsAndNormals(e, t),
                this._combineUVs(e),
                this._combineColors(e),
                this._combineAlphaIndexes(e)
            }
        }, {
            key: "_combineIndexes",
            value: function(e) {
                var t = e.geometry.index.array
                  , i = e.geometry.groups;
                if (i.length > 0)
                    for (var r = 0; r < i.length; r++) {
                        for (var n = i[r], o = n.start, s = n.count, a = this.combineCursor.groups[r], l = 0; l < s; l++)
                            this.indexes[a.currentIndex + l] = this.combineCursor.vertex / 3 + t[o + l];
                        this.combineCursor.groups[r].currentIndex += s
                    }
                else {
                    for (var u = 0; u < t.length; u++)
                        this.indexes[this.combineCursor.index + u] = this.combineCursor.vertex / 3 + t[u];
                    this.combineCursor.index += t.length
                }
            }
        }, {
            key: "_combinePositionsAndNormals",
            value: function(e, t) {
                var i = null
                  , r = null
                  , n = e.geometry.getAttribute("position");
                i = n ? n.array : [];
                var o = e.geometry.getAttribute("normal");
                r = o ? o.array : [];
                for (var s = new Float32Array(3), a = new Float32Array(3), l = 0; l < i.length; ) {
                    a[0] = i[l],
                    a[1] = i[l + 1],
                    a[2] = i[l + 2],
                    s[0] = r[l],
                    s[1] = r[l + 1],
                    s[2] = r[l + 2];
                    for (var u = t.positions.length - 1; u > -1; u--) {
                        var c = t.scales[u]
                          , h = t.quaternions[u]
                          , p = t.positions[u];
                        1 !== c.x && (a[0] *= c.x),
                        1 !== c.y && (a[1] *= c.y),
                        1 !== c.z && (a[2] *= c.z),
                        Yr.applyQuaternionToVector3(h.toArray(), a),
                        0 !== p.x && (a[0] += p.x),
                        0 !== p.y && (a[1] += p.y),
                        0 !== p.z && (a[2] += p.z),
                        r && Yr.applyQuaternionToVector3(h.toArray(), s)
                    }
                    this.positions[this.combineCursor.vertex + l] = a[0],
                    this.positions[this.combineCursor.vertex + l + 1] = a[1],
                    this.positions[this.combineCursor.vertex + l + 2] = a[2],
                    this.normals[this.combineCursor.vertex + l] = s[0],
                    this.normals[this.combineCursor.vertex + l + 1] = s[1],
                    this.normals[this.combineCursor.vertex + l + 2] = s[2],
                    l += 3
                }
                this.combineCursor.vertex += i.length
            }
        }, {
            key: "_combineUVs",
            value: function(e) {
                var t = e.geometry.getAttribute("uv")
                  , i = null;
                i = t ? t.array : [];
                for (var r = 0; r < i.length; r++)
                    this.uvs[this.combineCursor.uv + r] = i[r];
                this.combineCursor.uv += i.length;
                var n = e.geometry.getAttribute("uv2");
                if (n) {
                    for (var o = n.array, s = 0; s < o.length; s++)
                        this.uv2s[this.combineCursor.uv2 + s] = o[s];
                    this.combineCursor.uv2 += o.length
                }
                var a = e.geometry.getAttribute("uv3");
                if (a) {
                    for (var l = a.array, u = 0; u < l.length; u++)
                        this.uv3s[this.combineCursor.uv3 + u] = l[u];
                    this.combineCursor.uv3 += l.length
                }
            }
        }, {
            key: "_combineColors",
            value: function(e) {
                var t = e.geometry.getAttribute("color");
                if (t) {
                    for (var i = t.array, r = 0; r < i.length; r++)
                        this.colors[this.combineCursor.color + r] = i[r];
                    this.combineCursor.color += i.length
                }
            }
        }, {
            key: "_combineAlphaIndexes",
            value: function(e) {
                var t = e.geometry.getAttribute("alphaIndex");
                if (t) {
                    for (var i = t.array, r = 0; r < i.length; r++)
                        this.alphaIndexes[this.combineCursor.alphaIndex + r] = i[r];
                    this.combineCursor.alphaIndex += i.length
                }
            }
        }, {
            key: "add",
            value: function(e, t, i) {
                if (this.meshes.push(e),
                this.transformations.push(t),
                e.geometry.groups)
                    if (this.groupsCountArray)
                        for (var r = e.geometry.groups, n = 0; n < r.length; n++) {
                            var o = r[n];
                            this.groupsCountArray[n].count += o.count,
                            n !== r.length - 1 && (this.groupsCountArray[n + 1].start = this.groupsCountArray[n].start + this.groupsCountArray[n].count)
                        }
                    else
                        this.groupsCountArray = this.cloneGroups(e.geometry.groups);
                e.geometry.index && (this.indexesCount += e.geometry.index.array.length),
                e.geometry.getAttribute("position") && (this.verticesCount += e.geometry.getAttribute("position").array.length),
                e.geometry.getAttribute("uv") && (this.uvsCount += e.geometry.getAttribute("uv").array.length);
                var s = e.geometry.getAttribute("color");
                s && (this.colorsCount += s.array.length);
                var a = e.geometry.getAttribute("alphaIndex");
                a && (this.alphaIndexsCount += a.array.length);
                var l = e.geometry.getAttribute("uv2");
                l && (this.uv2sCount += l.array.length);
                var u = e.geometry.getAttribute("uv3");
                u && (this.uv3sCount += u.array.length)
            }
        }, {
            key: "isExceed",
            value: function(e) {
                return this.verticesCount + e > this.maxCount
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , Zr = function() {
        function e(t) {
            qr(this, e),
            this._initParams(),
            this.material = t,
            this.mesh = new Jr,
            this.combineBundleSubMeshes = [],
            this.currentCombineBundleSubMesh = this._createCombineBundleSubMesh(),
            this.vertexCount = 0
        }
        return Xr(e, [{
            key: "_initParams",
            value: function() {
                this.material = null,
                this.groups = null,
                this.mesh = null,
                this.combineBundleSubMeshes = [],
                this.currentCombineBundleSubMesh = null,
                this.vertexCount = 0
            }
        }, {
            key: "_createCombineBundleSubMesh",
            value: function() {
                var e = new Qr(this.material);
                return this.combineBundleSubMeshes.push(e),
                e
            }
        }, {
            key: "add",
            value: function(e, t, i) {
                var r = 0;
                e.geometry.getAttribute("position") && (r = e.geometry.getAttribute("position").array.length),
                this.currentCombineBundleSubMesh.isExceed(r) && (this.currentCombineBundleSubMesh = this._createCombineBundleSubMesh()),
                this.currentCombineBundleSubMesh.add(e, t, i)
            }
        }, {
            key: "getCalculaterMesh",
            value: function() {
                for (var e = 0; e < this.combineBundleSubMeshes.length; e++) {
                    var t = this.combineBundleSubMeshes[e];
                    this.mesh.subMeshes.push(t.getCalculaterMesh())
                }
                return this.mesh
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.combineBundleSubMeshes.length; e++) {
                    this.combineBundleSubMeshes[e].clear()
                }
                this._initParams()
            }
        }]),
        e
    }()
      , Kr = function() {
        function e() {
            qr(this, e),
            this.positions = [],
            this.scales = [],
            this.quaternions = []
        }
        return Xr(e, [{
            key: "clone",
            value: function() {
                var t = new e;
                return t.positions = this.positions.slice(),
                t.scales = this.scales.slice(),
                t.quaternions = this.quaternions.slice(),
                t
            }
        }]),
        e
    }()
      , $r = function() {
        function e(t) {
            qr(this, e),
            this._initParams(),
            this.bundeObj = t,
            this.materialMap = new Map
        }
        return Xr(e, [{
            key: "_initParams",
            value: function() {
                this.bundeObj = null,
                this.materialMap = null,
                this.combineBundleMeshs = [],
                this.vertexCount = 0
            }
        }, {
            key: "isExceed",
            value: function() {
                return this.vertexCount > 6e4
            }
        }, {
            key: "combine",
            value: function() {
                this._combine(this.bundeObj)
            }
        }, {
            key: "_combine",
            value: function(e, t) {
                if (void 0 === t && (t = new Kr),
                t.scales.push(e.scale),
                t.positions.push(e.position),
                t.quaternions.push(e.quaternion),
                e.isMesh) {
                    var i = 0;
                    if (e.geometry.getAttribute("position") && (i = e.geometry.getAttribute("position").array.length),
                    this.vertexCount += i / 3,
                    !this.materialMap.has(e.material)) {
                        var r = new Zr(e.material);
                        this.materialMap.set(r.material, r),
                        this.combineBundleMeshs.push(r)
                    }
                    this.materialMap.get(e.material).add(e, t, e.groups)
                }
                if (0 !== e.children.length)
                    for (var n = 0; n < e.children.length; n++)
                        this._combine(e.children[n], t.clone())
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.combineBundleMeshs.length; e++) {
                    this.combineBundleMeshs[e].clear()
                }
                this._initParams()
            }
        }]),
        e
    }()
      , en = function() {
        function e(t) {
            qr(this, e),
            this.resource = t.resource,
            this.mesh = null,
            this.builderPromise = null,
            this.isBuilded = !1
        }
        return Xr(e, [{
            key: "build",
            value: function() {
                this.isBuilded || (this.combineBundleObj = new $r(this.resource.model),
                this.combineBundleObj.combine(),
                this.combineBundleObj.isExceed() ? this.resource.vertexIsExceed = !0 : (this.resource.vertexIsExceed = !1,
                this.changeToCalculaterMesh()),
                this.isBuilded = !0)
            }
        }, {
            key: "changeToCalculaterMesh",
            value: function() {
                this.mesh = new Jr;
                for (var e = this.combineBundleObj.combineBundleMeshs, t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.mesh.subMeshes.push(i.getCalculaterMesh())
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.combineBundleObj && this.combineBundleObj.clear(),
                this.combineBundleObj = null
            }
        }]),
        e
    }()
      , tn = function() {
        function e() {
            qr(this, e),
            this.map = {}
        }
        return Xr(e, [{
            key: "getCombineMesh",
            value: function(e) {
                if (!this.map[e.id]) {
                    var t = new en({
                        resource: e
                    });
                    t.build(),
                    this.map[e.id] = t.mesh
                }
                return this.map[e.id]
            }
        }, {
            key: "clear",
            value: function() {
                this.map = {}
            }
        }]),
        e
    }()
      , rn = function() {
        function e(t) {
            Ni(this, e),
            this.objectManager = new Vr,
            this.objectManager.calculaterManager = this,
            this.map = {},
            this.resourcCombineManager = new tn
        }
        return Hi(e, [{
            key: "create",
            value: function(e) {
                var t = e.type;
                if (this.map[t])
                    return this.map[t];
                e.objectManager = this.objectManager,
                e.resourceCombineManager = this.resourcCombineManager;
                var i = Nr[t]
                  , r = void 0;
                return r = i ? new i(e) : new Wr(e),
                this.map[t] = r,
                r
            }
        }, {
            key: "clear",
            value: function() {
                for (var e in this.map)
                    this.map[e].clear();
                this.map = null,
                this.resourcCombineManager.clear(),
                this.resourcCombineManager = null
            }
        }]),
        e
    }()
      , nn = new (function() {
        function e(t) {
            Ni(this, e),
            this._versionMap = {
                0: {
                    0: rn
                }
            },
            this._smallVersionLibs = [[0]],
            this._bigVersions = [0]
        }
        return Hi(e, [{
            key: "getCalculaterManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][i.length - 1]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return new this._versionMap[e][r.length - 1]
                }
                var n = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1]))
                    return t > n[n.length - 1] ? new this._versionMap[e][n.length - 1] : new this._versionMap[e][t];
                console.error("ubuilder calculater builder not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , on = new (function() {
        function e(t) {
            Ni(this, e)
        }
        return Hi(e, [{
            key: "create",
            value: function(e, t) {
                return nn.getCalculaterManager(e, t)
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }())
      , sn = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , an = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , ln = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , un = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , cn = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , hn = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , pn = function() {
        function e(t) {
            an(this, e),
            this._initParams(),
            this.object = t.object,
            this.buildPromise = null,
            this.manager = t.manager
        }
        return ln(e, [{
            key: "_initParams",
            value: function() {
                this.object = null,
                this.mesh = null,
                this.buildPromise = null,
                this.manager = null
            }
        }, {
            key: "build",
            value: function(e) {
                this.object = e;
                this.mesh = null,
                this._createMesh(this.object.calculaterMesh);
                var t = this.object.position
                  , i = this.object.scale
                  , r = this.object.rotation;
                this.mesh.position.set(t[0], t[1], t[2]),
                this.mesh.scale.set(i[0], i[1], i[2]),
                this.mesh.quaternion.set(r[0], r[1], r[2], r[3]),
                this.object.mesh = this.mesh,
                this.mesh = null
            }
        }, {
            key: "checkResourcesIsBuilded",
            value: function() {
                for (var e = 0; e < this.object.resources.length; e++) {
                    if (!this.object.resources[e].isBuilded)
                        return !1
                }
                return !0
            }
        }, {
            key: "resourceDownloadCallback",
            value: function(e, t) {}
        }, {
            key: "_createMesh",
            value: function(e) {
                if (this.mesh || (this.mesh = new THREE.Object3D),
                e) {
                    if (e.vertices.length > 0) {
                        var t = e.vertices
                          , i = e.normals
                          , r = e.triangles
                          , n = e.uvs
                          , o = e.uv2s
                          , s = new THREE.BufferGeometry;
                        s.setIndex(new THREE.BufferAttribute(r,1)),
                        s.setAttribute("position", new THREE.BufferAttribute(t,3)),
                        s.setAttribute("normal", new THREE.BufferAttribute(i,3)),
                        s.setAttribute("uv", new THREE.BufferAttribute(n,2)),
                        o.length > 0 && s.setAttribute("uv2", new THREE.BufferAttribute(o,2));
                        var a = e.extraData;
                        a.color && s.setAttribute("color", new THREE.BufferAttribute(a.color,4)),
                        a.alphaIndex && s.setAttribute("alphaIndex", new THREE.BufferAttribute(a.alphaIndex,1)),
                        a.groups && (s.groups = a.groups);
                        var l = this._getMaterial(e)
                          , u = new THREE.Mesh(s,l);
                        this.mesh.add(u)
                    }
                    if (e.subMeshes.length > 0)
                        for (var c = 0; c < e.subMeshes.length; c++) {
                            var h = e.subMeshes[c];
                            this._createMesh(h)
                        }
                }
            }
        }, {
            key: "_getMaterial",
            value: function(e) {
                return e.resource.material
            }
        }, {
            key: "_dispose",
            value: function(e) {
                if (e instanceof THREE.Mesh) {
                    var t = e;
                    if (t) {
                        var i = t.material
                          , r = t.geometry;
                        t.isDestory = !0,
                        i && (this._disposeMaterial(i),
                        t.material = null),
                        r && (r.isDestory = !0,
                        r.dispose(),
                        t.geometry = null)
                    }
                }
                if (e)
                    for (var n = e.children, o = 0; o < n.length; o++) {
                        var s = n[o];
                        this._dispose(s)
                    }
            }
        }, {
            key: "_disposeMaterial",
            value: function(e) {
                if (e instanceof Array)
                    for (var t = 0; t < e.length; t++) {
                        var i = e[t];
                        this._disposeMaterial(i)
                    }
                else
                    e.isDestory = !0,
                    e.dispose()
            }
        }, {
            key: "clear",
            value: function(e) {
                e && (e.parent && e.parent.remove(e),
                this._dispose(e)),
                this._initParams()
            }
        }]),
        e
    }()
      , dn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource.wallMaterial
            }
        }]),
        t
    }(pn)
      , fn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource.wallMaterial
            }
        }]),
        t
    }(pn)
      , mn = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , gn = function() {
        function e() {
            an(this, e)
        }
        return ln(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = mn.chars, i = mn.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : sn(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }, {
            key: "calTwoPositionLength",
            value: function(t, i) {
                var r = e.subPosition(t, i);
                return r = r[0] * r[0] + r[1] * r[1] + r[2] * r[2],
                Math.sqrt(r)
            }
        }, {
            key: "subPosition",
            value: function(e, t) {
                return [e[0] - t[0], e[1] - t[1], e[2] - t[2]]
            }
        }, {
            key: "normalizeDirection",
            value: function(t) {
                var i = e.calTwoPositionLength([0, 0, 0], t);
                if (1 === i)
                    return t;
                var r = t;
                return 0 === i ? (r[0] = 0,
                r[1] = 0,
                r[2] = 0,
                r) : (i = 1 / i,
                r[0] *= i,
                r[1] *= i,
                r[2] *= i,
                r)
            }
        }, {
            key: "getFloorUV2s",
            value: function(e, t, i) {
                e.parent.parent.allRoomsBox2 || e.parent.parent.meshBuilder.calAllRoomsBox2(e.parent.parent);
                var r = e.parent.parent.allRoomsBox2
                  , n = e.parent.position
                  , o = new THREE.Vector2;
                r.getSize(o);
                for (var s = t.vertices, a = [], l = 0; l < s.length; l++) {
                    var u, c, h = s[l];
                    i ? (u = (h.x + n[0] - r.min.x) / o.x,
                    c = (-h.y + n[2] - r.min.y) / o.y) : (u = (h.x - r.min.x) / o.x,
                    c = (-h.y - r.min.y) / o.y),
                    a.push(new THREE.Vector2(parseFloat(u.toFixed(2)),1 - parseFloat(c.toFixed(2))))
                }
                return a
            }
        }, {
            key: "getShapePath",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                  , i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]
                  , r = e.parent
                  , n = [0, 0, 0];
                t && (n = r.position);
                for (var o = r.points, s = [], a = 0; a < o.length; a++) {
                    var l = o[a];
                    i ? s.push(new THREE.Vector2(l[0] + n[0],-(l[2] + n[2]))) : s.push(new THREE.Vector2(l[0] + n[0],l[2] + n[2]))
                }
                return s
            }
        }, {
            key: "getHolesPath",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                  , i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]
                  , r = e.parent
                  , n = r.holes
                  , o = [0, 0, 0];
                t && (o = r.position);
                for (var s = [], a = 0; a < n.length; a++) {
                    for (var l = n[a], u = l.length, c = [], h = 0; h < u; h++) {
                        var p = l[h];
                        i ? c.push(new THREE.Vector2(p[0] + o[0],-(p[2] + o[2]))) : c.push(new THREE.Vector2(p[0] + o[0],p[2] + o[2]))
                    }
                    s.push(c)
                }
                return s
            }
        }]),
        e
    }()
      , vn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_createMesh",
            value: function() {
                this.instanceModel(),
                this.object.mesh = this.mesh
            }
        }, {
            key: "instanceModel",
            value: function() {
                this.mesh = gn.clone(this.object.resource.model),
                this.hasSkin = this.mesh.hasSkin,
                this.mesh.name = "placement",
                this.mesh.visible = this.object.visible,
                this.mesh.name = "plc" + this.object.id,
                null !== this.object.renderMode && this.changeRenderMode(this.mesh),
                this.object.customTextureResource && this.changeWithCustomTexture(this.mesh),
                this.object.customColor && this.changeWithCustomColor(this.mesh)
            }
        }, {
            key: "changeRenderMode",
            value: function(e) {
                if (e instanceof THREE.Mesh && (e.material.color = this.object.customColor,
                null !== this.object.renderMode))
                    switch (this.object.renderMode) {
                    case 1:
                        e.material.transparent = !1,
                        e.material.alphaTest = .5;
                        break;
                    case 3:
                    case 2:
                        e.material.transparent = !0;
                        break;
                    default:
                        console.error("can not find renderMode " + this.object.renderMode)
                    }
                for (var t = 0; t < e.children.length; t++) {
                    var i = e.children[t];
                    this.changeRenderMode(i)
                }
            }
        }, {
            key: "changeWithCustomColor",
            value: function(e) {
                e instanceof THREE.Mesh && (e.material.color = this.object.customColor,
                null !== this.object.opacity && (e.material.opacity = this.object.opacity,
                e.material.transparent = !0));
                for (var t = 0; t < e.children.length; t++) {
                    var i = e.children[t];
                    this.changeWithCustomColor(i)
                }
            }
        }, {
            key: "changeWithCustomTexture",
            value: function(e) {
                e instanceof THREE.Mesh && (e.material.map = this.object.customTextureResource.texture);
                for (var t = 0; t < e.children.length; t++) {
                    var i = e.children[t];
                    this.changeWithCustomTexture(i)
                }
            }
        }]),
        t
    }(pn)
      , yn = 0
      , bn = 1
      , _n = 2
      , xn = 3
      , En = 0
      , wn = 1
      , Tn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_createMesh",
            value: function(e) {
                this.instanceModel(),
                this.changeOpenDirection()
            }
        }, {
            key: "getOpenController",
            value: function() {
                return this.mesh ? this.mesh.getObjectByName("Controller") : null
            }
        }, {
            key: "isSingleOpen",
            value: function() {
                var e = this.getOpenController();
                return !!e && 1 === e.children.length
            }
        }, {
            key: "changeOpenDirection",
            value: function() {
                (new THREE.Quaternion).setFromAxisAngle(new THREE.Vector3(0,1,0), Math.PI);
                var e = this.getOpenController()
                  , t = this.mesh.getObjectByName("RootNode");
                if (t)
                    if (this.isSingleOpen() && e)
                        switch (this.object.openDirIndex) {
                        case yn:
                            break;
                        case bn:
                            e.scale.set(-1, 1, 1);
                            break;
                        case _n:
                            t.rotateY(Math.PI),
                            e.scale.set(-1, 1, 1);
                            break;
                        case xn:
                            t.rotateY(Math.PI)
                        }
                    else if (this.hasAnimation || e)
                        switch (this.object.openDirIndex) {
                        case En:
                            break;
                        case wn:
                            t.rotateY(Math.PI)
                        }
                    else
                        switch (this.object.openDirIndex) {
                        case En:
                            break;
                        case wn:
                            t.rotateY(Math.PI)
                        }
            }
        }, {
            key: "initModelSize",
            value: function() {
                this.object.modelSize = this.object.resource.modelSize,
                this.object.resource.model && (this.object.size = [this.modelSize.x * this.scale.x, this.modelSize.y * this.scale.y, this.modelSize.z * this.scale.z])
            }
        }, {
            key: "hasAnimation",
            get: function() {
                return !!(this.object.resource.animations && this.object.resource.animations.length > 0)
            }
        }]),
        t
    }(vn)
      , Mn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource
            }
        }, {
            key: "_createMesh",
            value: function(e) {
                if (this.object.resource.vertexIsExceed) {
                    this.mesh = new THREE.Object3D;
                    for (var i = this.object.objects, r = 0; r < i.length; r++) {
                        var n = i[r];
                        n.meshBuilder.build(n),
                        this.mesh.add(n.mesh)
                    }
                } else
                    un(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this, e)
            }
        }]),
        t
    }(pn)
      , Cn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_createMesh",
            value: function(e) {
                var t = this.object.objects
                  , i = this.object.resource.roomMaterial.clone();
                i.side = THREE.DoubleSide;
                for (var r = new THREE.Geometry, n = 0; n < t.length; n++) {
                    var o = t[n]
                      , s = this._calGeometry(o);
                    this.setUV2s(o, s),
                    r.merge(s)
                }
                var a = new THREE.Mesh(r,i);
                a.name = "combine",
                this.combineMesh = a,
                this.combineMesh.name = "floor",
                this.mesh = this.combineMesh
            }
        }, {
            key: "_calGeometry",
            value: function(e) {
                e.parent;
                for (var t, i = this._getPointsPath(e), r = this._getHolesPath(e), n = new THREE.Vector3, o = 0; o < i.length; o++) {
                    var s = i[o];
                    n.x += s.x,
                    n.z += s.y
                }
                if (n.x /= i.length,
                n.z /= i.length,
                t = 0 === i.length ? new THREE.Shape : new THREE.Shape(i),
                r && r.length)
                    for (o = 0; o < r.length; o++) {
                        var a = r[o];
                        a.length && t.holes.push(new THREE.Path(a))
                    }
                var l = new THREE.ShapeGeometry(t);
                for (o = 0; o < l.faceVertexUvs.length; o++)
                    for (var u = l.faceVertexUvs[o], c = 0; c < u.length; c++)
                        for (var h = u[c], p = 0; p < h.length; p++) {
                            var d = h[p]
                              , f = void 0
                              , m = void 0;
                            f = d.x - n.x,
                            m = d.y - n.z,
                            e.blockSize && (f /= e.blockSize[0],
                            m /= e.blockSize[1]),
                            d.set(f, m)
                        }
                return l.uvsNeedUpdate = !0,
                this.rotateUV(e, l),
                l
            }
        }, {
            key: "rotateUV",
            value: function(e, t) {
                for (var i = e.blockAngle * Math.PI / 180, r = new THREE.Vector2(.5,.5), n = t.faceVertexUvs[0], o = 0; o < n.length; o++)
                    for (var s = n[o], a = 0; a < s.length; a++) {
                        var l = s[a];
                        l.sub(r),
                        (l = new THREE.Vector2(l.x * Math.cos(i) - l.y * Math.sin(i),l.x * Math.sin(i) + l.y * Math.cos(i))).add(r),
                        s[a] = l
                    }
            }
        }, {
            key: "_getPointsPath",
            value: function(e) {
                return gn.getShapePath(e, !0)
            }
        }, {
            key: "_getHolesPath",
            value: function(e) {
                return gn.getHolesPath(e, !0)
            }
        }, {
            key: "setUV2s",
            value: function(e, t) {
                for (var i = gn.getFloorUV2s(e, t, !1), r = t.faces, n = [], o = 0; o < r.length; o++) {
                    var s = r[o]
                      , a = [i[s.a], i[s.b], i[s.c]];
                    n.push(a)
                }
                t.faceVertexUvs[1] = n
            }
        }]),
        t
    }(pn)
      , Sn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_createMesh",
            value: function(e) {
                for (var t = this.object.objects, i = this.object.resource.roomMaterial, r = new THREE.Geometry, n = 0; n < t.length; n++) {
                    var o = t[n]
                      , s = this._calGeometry(o);
                    r.merge(s)
                }
                var a = new THREE.Mesh(r,i);
                a.name = "combine",
                this.combineMesh = a,
                this.combineMesh.name = "floor",
                this.mesh = this.combineMesh
            }
        }, {
            key: "_getPointsPath",
            value: function(e) {
                return gn.getShapePath(e, !0, !1)
            }
        }, {
            key: "_getHolesPath",
            value: function(e) {
                return gn.getHolesPath(e, !0, !1)
            }
        }]),
        t
    }(Cn)
      , jn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_createMesh",
            value: function(e) {
                for (var t = this.object.objects, i = this.object.resource.roomMaterial, r = new THREE.Geometry, n = 0; n < t.length; n++) {
                    var o = t[n]
                      , s = this._calGeometry(o);
                    r.merge(s)
                }
                var a = new THREE.Mesh(r,i);
                a.name = "combine",
                this.combineMesh = a,
                this.combineMesh.name = "floor",
                this.mesh = this.combineMesh
            }
        }]),
        t
    }(Cn)
      , Pn = function(e) {
        function t(e) {
            an(this, t);
            var i = hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.shapePath = [],
            i.reverseZShapPath = [],
            i.holePaths = [],
            i.reverseZHolePaths = [],
            i
        }
        return cn(t, e),
        ln(t, [{
            key: "_initParams",
            value: function() {
                un(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.shapePath = null,
                this.reverseZShapPath = null,
                this.holePaths = null,
                this.reverseZHolePaths = null
            }
        }, {
            key: "_getMaterial",
            value: function(e) {
                return e.resource.roomMaterial
            }
        }, {
            key: "_createMesh",
            value: function(e) {
                var t = this.object.parent;
                this._calGeometry();
                var i = this.geometry
                  , r = null;
                null === this.object.height && (this.object.height = this.object.DefaultHeight),
                (r = this.object.resource.roomMaterial).side = THREE.DoubleSide,
                r.defines = r.defines || {},
                r.defines.FLOOR_AO = !0,
                this.mesh = new THREE.Mesh(i,r),
                this.mesh.name = "floor",
                this.mesh.position.y = this.object.height,
                this.mesh.rotateX(-Math.PI / 2),
                this.mesh.visible = this.object.visible,
                this.mesh.roomID = t.id,
                this.object.rotation = this.mesh.quaternion.toArray(),
                this.object.position = this.mesh.position.toArray(),
                this.object.scale = this.mesh.scale.toArray()
            }
        }, {
            key: "_calGeometry",
            value: function() {
                this.object.parent;
                for (var e, t = this._getPointsPath(this.object), i = this._getHolesPath(this.object), r = new THREE.Vector3, n = 0; n < t.length; n++) {
                    var o = t[n];
                    r.x += o.x,
                    r.z += o.y
                }
                if (r.x /= t.length,
                r.z /= t.length,
                e = 0 === t.length ? new THREE.Shape : new THREE.Shape(t),
                i.length > 0)
                    for (n = 0; n < i.length; n++) {
                        var s = i[n];
                        e.holes.push(new THREE.Path(s))
                    }
                var a = new THREE.ShapeGeometry(e);
                for (n = 0; n < a.faceVertexUvs.length; n++)
                    for (var l = a.faceVertexUvs[n], u = 0; u < l.length; u++)
                        for (var c = l[u], h = 0; h < c.length; h++) {
                            var p = c[h]
                              , d = void 0
                              , f = void 0;
                            d = p.x - r.x,
                            f = p.y - r.z,
                            this.object.blockSize && (d /= this.object.blockSize[0],
                            f /= this.object.blockSize[1]),
                            p.set(d, f)
                        }
                a.uvsNeedUpdate = !0,
                this.rotateUV(a),
                this.geometry = a,
                this.object.parent.parent && this.setUV2s(a)
            }
        }, {
            key: "setUV2s",
            value: function(e) {
                for (var t = gn.getFloorUV2s(this.object, e, !0), i = e.faces, r = [], n = 0; n < i.length; n++) {
                    var o = i[n]
                      , s = [t[o.a], t[o.b], t[o.c]];
                    r.push(s)
                }
                e.faceVertexUvs[1] = r
            }
        }, {
            key: "rotateUV",
            value: function(e) {
                for (var t = this.object.blockAngle * Math.PI / 180, i = new THREE.Vector2(.5,.5), r = e.faceVertexUvs[0], n = 0; n < r.length; n++)
                    for (var o = r[n], s = 0; s < o.length; s++) {
                        var a = o[s];
                        a.sub(i),
                        (a = new THREE.Vector2(a.x * Math.cos(t) - a.y * Math.sin(t),a.x * Math.sin(t) + a.y * Math.cos(t))).add(i),
                        o[s] = a
                    }
            }
        }, {
            key: "_getPointsPath",
            value: function(e) {
                return gn.getShapePath(e, !1)
            }
        }, {
            key: "_getHolesPath",
            value: function(e) {
                return gn.getHolesPath(e, !1)
            }
        }]),
        t
    }(pn)
      , Rn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource.roomMaterial
            }
        }, {
            key: "_createMesh",
            value: function(e) {
                var t = this.object.parent;
                this._calGeometry();
                var i = this.object.resource.roomMaterial;
                if (this.mesh = new THREE.Mesh(this.geometry,i),
                this.mesh.name = "ceiling",
                this.mesh.rotateX(Math.PI / 2),
                null === this.object.height) {
                    var r = 2.9;
                    t.parent && (r = t.parent.height),
                    this.object.height = r
                }
                this.mesh.position.y = this.object.height,
                this.mesh.visible = this.object.visible,
                this.object.rotation = this.mesh.quaternion.toArray(),
                this.object.position = this.mesh.position.toArray(),
                this.object.scale = this.mesh.scale.toArray()
            }
        }, {
            key: "_getPointsPath",
            value: function(e) {
                return gn.getShapePath(e, !1, !1)
            }
        }, {
            key: "_getHolesPath",
            value: function(e) {
                return gn.getHolesPath(e, !1, !1)
            }
        }]),
        t
    }(Pn)
      , Dn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource.roomMaterial
            }
        }, {
            key: "_createMesh",
            value: function(e) {
                var t = this.object.parent;
                this._calGeometry();
                var i;
                if (i = this.object.resource.roomMaterial,
                this.mesh = new THREE.Mesh(this.geometry,i),
                null === this.object.height) {
                    var r = 3;
                    t.parent && (r = t.parent.height),
                    this.object.height = r
                }
                this.mesh.position.y = this.object.height + .001,
                this.mesh.name = "roof",
                this.mesh.rotateX(-Math.PI / 2),
                this.mesh.visible = this.object.visible,
                this.mesh.name = "roof" + t.id,
                this.object.rotation = this.mesh.quaternion.toArray(),
                this.object.position = this.mesh.position.toArray(),
                this.object.scale = this.mesh.scale.toArray()
            }
        }]),
        t
    }(Pn)
      , An = function(e) {
        function t(e) {
            an(this, t);
            var i = hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.shapePath = [],
            i.reverseZShapPath = [],
            i.holePaths = [],
            i.reverseZHolePaths = [],
            i.isCalculaterPoints = !1,
            i
        }
        return cn(t, e),
        ln(t, [{
            key: "_initParams",
            value: function() {
                un(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.shapePath = null,
                this.reverseZShapPath = null,
                this.holePaths = null,
                this.reverseZHolePaths = null,
                this.isCalculaterPoints = null
            }
        }, {
            key: "calculaterPoints",
            value: function() {
                this._initShapePathPoints(),
                this._initShapeHolePoints(),
                this.isCalculaterPoints = !0
            }
        }, {
            key: "_initShapePathPoints",
            value: function() {
                var e = this.object.points;
                this.shapePath.length = 0,
                this.reverseZShapPath.length = 0;
                for (var t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.shapePath.push(new THREE.Vector2(i[0],i[2])),
                    this.reverseZShapPath.push(new THREE.Vector2(i[0],-i[2]))
                }
                this.object.floor.meshBuilder.shapePath = this.reverseZShapPath,
                this.object.ceiling && (this.object.ceiling.meshBuilder.shapePath = this.shapePath),
                this.object.roof && (this.object.roof.meshBuilder.shapePath = this.reverseZShapPath)
            }
        }, {
            key: "_initShapeHolePoints",
            value: function() {
                var e = this.object.holes;
                this.holePaths.length = 0,
                this.reverseZHolePaths.length = 0;
                for (var t = 0; t < e.length; t++) {
                    for (var i = e[t], r = i.length, n = [], o = [], s = 0; s < r; s++) {
                        var a = i[s];
                        n.push(new THREE.Vector2(a[0],a[2])),
                        o.push(new THREE.Vector2(a[0],-a[2]))
                    }
                    this.holePaths.push(n),
                    this.reverseZHolePaths.push(o)
                }
                this.object.floor.meshBuilder.holePaths = this.reverseZHolePaths,
                this.object.ceiling && (this.object.ceiling.meshBuilder.holePaths = this.holePaths),
                this.object.roof && (this.object.roof.meshBuilder.holePaths = this.reverseZHolePaths)
            }
        }]),
        t
    }(pn)
      , kn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        t
    }(pn)
      , On = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource
            }
        }]),
        t
    }(pn)
      , Bn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        t
    }(pn)
      , Fn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource
            }
        }, {
            key: "_createMesh",
            value: function(e) {
                if (this._isVertexExceed()) {
                    this.mesh = new THREE.Object3D;
                    for (var i = this.object.objects, r = 0; r < i.length; r++) {
                        var n = i[r];
                        n.build(),
                        this.mesh.add(this._getObjMesh(n))
                    }
                } else
                    un(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this, e)
            }
        }, {
            key: "_getObjMesh",
            value: function(e) {
                for (var t = e.children, i = 0; i < t.length; i++) {
                    var r = t[i];
                    e.mesh.add(this._getObjMesh(r))
                }
                return e.mesh
            }
        }, {
            key: "_isVertexExceed",
            value: function() {
                for (var e = 0; e < this.object.resources.length; e++) {
                    if (this.object.resources[e].vertexIsExceed)
                        return !0
                }
                return !1
            }
        }]),
        t
    }(pn)
      , Ln = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        t
    }(vn)
      , In = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        t
    }(Bn)
      , Nn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        t
    }(vn)
      , Hn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        t
    }(vn)
      , Un = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource
            }
        }]),
        t
    }(pn)
      , zn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_getMaterial",
            value: function(e) {
                return e.resource
            }
        }]),
        t
    }(pn);
    var Vn = function(e, t) {
        return e(t = {
            exports: {}
        }, t.exports),
        t.exports
    }((function(e, t) {
        function i(e, t) {
            return t.angle - e.angle
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var r = 0;
        function n(e, t) {
            this.id = r++,
            this.x = e,
            this.y = t,
            this.hedgelist = []
        }
        Object.assign(n.prototype, {
            sortincident: function() {
                this.hedgelist.sort(i)
            },
            dispose: function() {
                this.hedgelist.length = 0
            }
        });
        var o = 0;
        function s(e, t) {
            var i, r, n;
            this.id = o++,
            this.origin = t,
            this.twin = null,
            this.face = null,
            this.nexthedge = null,
            this.angle = (i = t.x - e.x,
            r = t.y - e.y,
            n = Math.sqrt(i * i + r * r),
            r > 0 ? Math.acos(i / n) : 2 * Math.PI - Math.acos(i / n)),
            this.prevhedge = null,
            this.length = Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2))
        }
        function a() {
            this.minX = 1 / 0,
            this.minY = 1 / 0,
            this.maxX = -1 / 0,
            this.maxY = -1 / 0
        }
        function l(e, t) {
            var i, r, n, o, s = 0, a = e.length;
            for (n = e[0],
            i = 1; i <= a; i++)
                o = e[i % a],
                t.x > Math.min(n.x, o.x) && t.x <= Math.max(n.x, o.x) && t.y <= Math.max(n.y, o.y) && n.x != o.x && (r = (t.x - n.x) * (o.y - n.y) / (o.x - n.x) + n.y,
                (n.y == o.y || t.y <= r) && s++),
                n = o;
            return s % 2 != 0
        }
        Object.assign(s.prototype, {
            dispose: function() {
                this.origin = null,
                this.twin = null,
                this.face = null,
                this.nexthedge = null,
                this.prevhedge = null
            }
        }),
        Object.defineProperties(a.prototype, {
            width: {
                get: function() {
                    return this.maxX - this.minX
                }
            },
            height: {
                get: function() {
                    return this.maxY - this.minY
                }
            }
        }),
        Object.assign(a.prototype, {
            reset: function() {
                this.minX = 1 / 0,
                this.minY = 1 / 0,
                this.maxX = -1 / 0,
                this.maxY = -1 / 0
            },
            expand: function(e) {
                this.minX = Math.min(e.x, this.minX),
                this.minY = Math.min(e.y, this.minY),
                this.maxX = Math.max(e.x, this.maxX),
                this.maxY = Math.max(e.y, this.maxY)
            },
            expands: function(e) {
                for (var t = 0, i = e.length; t < i; t++)
                    this.expand(e[t])
            },
            intersects: function(e) {
                return !(e.maxX < this.minX || e.minX > this.maxX || e.maxY < this.minY || e.minY > this.maxY)
            },
            containsPoint: function(e) {
                return e.x <= this.maxX && e.x >= this.minX && e.y <= this.maxY && e.y >= this.minY
            },
            containsPoints: function(e) {
                for (var t = 0, i = e.length; t < i; t++)
                    if (!this.containsPoint(e[t]))
                        return !1;
                return !0
            },
            size: function() {
                return {
                    width: this.maxX - this.minX,
                    height: this.maxY - this.minY
                }
            }
        });
        var u = 0;
        function c(e) {
            this.id = u++,
            this.wedge = null,
            this._area = 0,
            this._areaDirty = !0,
            this._vertexlist = [],
            this._vertexlistDirty = !0,
            this._dcel = e,
            this._holes = [],
            this._holesDirty = !0,
            this._aabb = null,
            this._aabbDirty = !0
        }
        function h(e, t) {
            this.vertices = [],
            this.hedges = [],
            this.faces = [],
            e && t && this.setDatas(e, t)
        }
        Object.defineProperties(c.prototype, {
            area: {
                get: function() {
                    if (this._areaDirty) {
                        for (var e = this.wedge, t = 0; e.nexthedge !== this.wedge; ) {
                            var i = e.origin
                              , r = e.nexthedge.origin;
                            t += i.x * r.y - r.x * i.y,
                            e = e.nexthedge
                        }
                        i = e.origin,
                        r = this.wedge.origin,
                        t = (t + i.x * r.y - r.x * i.y) / 2,
                        this._area = t,
                        this._areaDirty = !1
                    }
                    return this._area
                }
            },
            areaExceptHoles: {
                get: function() {
                    for (var e = this.holes, t = this.area, i = 0, r = e.length; i < r; i++)
                        t += e[i].area;
                    return t
                }
            },
            internal: {
                get: function() {
                    return this.area > 0
                }
            },
            external: {
                get: function() {
                    return this.area <= 0
                }
            },
            vertexlist: {
                get: function() {
                    if (this._vertexlistDirty) {
                        var e = this.wedge
                          , t = this._vertexlist;
                        for (t.length = 0,
                        t.push(e.origin); e.nexthedge !== this.wedge; )
                            e = e.nexthedge,
                            t.push(e.origin);
                        this._vertexlistDirty = !1
                    }
                    return this._vertexlist
                }
            },
            holes: {
                get: function() {
                    if (this._holesDirty && (this._holesDirty = !1,
                    this._holes.length = 0,
                    this.internal))
                        for (var e = this._dcel.faces, t = 0, i = e.length; t < i; t++)
                            this.tryAddHole(e[t]);
                    return this._holes
                }
            },
            aabb: {
                get: function() {
                    return this._aabb || (this._aabb = new a),
                    this._aabbDirty && (this._aabb.reset(),
                    this._aabb.expands(this.vertexlist),
                    this._aabbDirty = !1),
                    this._aabb
                }
            }
        }),
        Object.assign(c.prototype, {
            tryAddHole: function(e) {
                this._holesDirty || e.external && this.area > Math.abs(e.area) && this.aabb.containsPoints(e.vertexlist) && function(e, t) {
                    for (var i = 0, r = t.length; i < r; i++)
                        if (!l(e, t[i]))
                            return !1;
                    return !0
                }(this.vertexlist, e.vertexlist) && this._holes.push(e)
            },
            equals: function(e) {
                var t = this.vertexlist
                  , i = e.vertexlist;
                if (t.length !== i.length)
                    return !1;
                for (var r = t.length, n = 0; n < r; n++)
                    for (var o = 0; o < r && t[o] === i[(n + o) % r]; o++)
                        if (o === r - 1)
                            return !0;
                return !1
            },
            dirty: function() {
                this._areaDirty = !0,
                this._vertexlistDirty = !0,
                this._holesDirty = !0,
                this._aabbDirty = !0
            },
            dispose: function() {
                this.wedge = null,
                this._vertexlist.length = 0,
                this._holes.length = 0,
                this._aabb = null,
                this._dcel = null
            }
        }),
        Object.assign(h.prototype, {
            setDatas: function(e, t) {
                for (var i = this.vertices, r = this.hedges, o = this.faces, a = 0, l = e.length; a < l; a++) {
                    var u = e[a]
                      , h = new n(u[0],u[1]);
                    i.push(h)
                }
                for (a = 0,
                l = t.length; a < l; a++) {
                    var p = t[a]
                      , d = new s(i[p[0]],i[p[1]])
                      , f = new s(i[p[1]],i[p[0]]);
                    d.twin = f,
                    f.twin = d,
                    i[p[1]].hedgelist.push(d),
                    i[p[0]].hedgelist.push(f),
                    r.push(f),
                    r.push(d)
                }
                for (var m = 0, g = i.length; m < g; m++) {
                    if ((h = i[m]).sortincident(),
                    0 != (l = h.hedgelist.length))
                        if (l < 2)
                            h.hedgelist[0].prevhedge = h.hedgelist[0].twin,
                            h.hedgelist[0].twin.nexthedge = h.hedgelist[0];
                        else {
                            for (a = 0; a < l - 1; a++)
                                h.hedgelist[a].twin.nexthedge = h.hedgelist[a + 1],
                                h.hedgelist[a + 1].prevhedge = h.hedgelist[a].twin;
                            h.hedgelist[l - 1].twin.nexthedge = h.hedgelist[0],
                            h.hedgelist[0].prevhedge = h.hedgelist[l - 1].twin
                        }
                }
                for (var v = r.slice(0), y = r.length; y > 0; ) {
                    var b = v.pop();
                    if (y -= 1,
                    null == b.face) {
                        var _ = new c(this);
                        for (_.wedge = b,
                        _.wedge.face = _; b.nexthedge !== _.wedge; )
                            (b = b.nexthedge).face = _;
                        o.push(_)
                    }
                }
            },
            internalFaces: function() {
                for (var e = [], t = this.faces, i = 0, r = t.length; i < r; i++) {
                    var n = t[i];
                    n.internal && e.push(n)
                }
                return e
            },
            externalFaces: function() {
                for (var e = [], t = this.faces, i = 0, r = t.length; i < r; i++) {
                    var n = t[i];
                    n.external && e.push(n)
                }
                return e
            },
            dispose: function() {
                for (var e = this.vertices, t = this.hedges, i = this.faces, r = 0, n = e.length; r < n; r++)
                    e[r].dispose();
                for (r = 0,
                n = t.length; r < n; r++)
                    t[r].dispose();
                for (r = 0,
                n = i.length; r < n; r++)
                    i[r].dispose();
                e.length = 0,
                t.length = 0,
                i.length = 0
            },
            findVertex: function(e, t) {
                for (var i, r = this.vertices, n = 0, o = r.length; n < o; n++)
                    if ((i = r[n]).x === e && i.y === t)
                        return i;
                return null
            },
            findHedge: function(e, t, i, r) {
                for (var n, o, s = this.hedges, a = 0, l = s.length; a < l; a++)
                    if (o = (n = s[a]).twin,
                    n.origin.x === e && n.origin.y === t && o.origin.x === i && o.origin.y === r)
                        return n;
                return null
            },
            addEdge: function(e, t, i, r) {
                var o = this.vertices
                  , a = this.hedges
                  , l = this.faces
                  , u = !1
                  , h = !1
                  , p = !1
                  , d = this.findVertex(e, t);
                d || (d = new n(e,t),
                o.push(d),
                u = !0);
                var f = this.findVertex(i, r);
                f || (f = new n(i,r),
                o.push(f),
                h = !0);
                var m = new s(f,d);
                a.push(m),
                d.hedgelist.push(m),
                d.sortincident();
                var g = new s(d,f);
                if (a.push(g),
                f.hedgelist.push(g),
                f.sortincident(),
                m.twin = g,
                g.twin = m,
                u)
                    m.prevhedge = g,
                    g.nexthedge = m;
                else {
                    if (0 === (x = d.hedgelist.indexOf(m)))
                        var v = d.hedgelist[d.hedgelist.length - 1]
                          , y = d.hedgelist[(x + 1) % d.hedgelist.length];
                    else
                        v = d.hedgelist[x - 1],
                        y = d.hedgelist[(x + 1) % d.hedgelist.length];
                    m.prevhedge = v.twin,
                    v.twin.nexthedge = m,
                    g.nexthedge = y,
                    y.prevhedge = g
                }
                if (h)
                    g.prevhedge = m,
                    m.nexthedge = g;
                else {
                    if (0 === (x = f.hedgelist.indexOf(g)))
                        v = f.hedgelist[f.hedgelist.length - 1],
                        y = f.hedgelist[(x + 1) % f.hedgelist.length];
                    else
                        v = f.hedgelist[x - 1],
                        y = f.hedgelist[(x + 1) % f.hedgelist.length];
                    g.prevhedge = v.twin,
                    v.twin.nexthedge = g,
                    m.nexthedge = y,
                    y.prevhedge = m
                }
                var b = m.nexthedge
                  , _ = g.nexthedge;
                b.face && ((x = l.indexOf(b.face)) > -1 && l.splice(x, 1),
                b.face.dispose(),
                b.face.area <= 0 && (p = !0));
                var x = l.indexOf(_.face);
                _.face && ((x = l.indexOf(_.face)) > -1 && l.splice(x, 1),
                _.face.dispose(),
                _.face.area <= 0 && (p = !0));
                var E = new c(this);
                E.wedge = b;
                var w = new c(this);
                if (w.wedge = _,
                E.equals(w) && (w.dispose(),
                w = null),
                E) {
                    for ((T = E.wedge).face = E; T.nexthedge !== E.wedge; )
                        (T = T.nexthedge).face = E;
                    E.area <= 0 && (p = !0),
                    l.push(E)
                }
                if (w) {
                    var T;
                    for ((T = w.wedge).face = w; T.nexthedge !== w.wedge; )
                        (T = T.nexthedge).face = w;
                    w.area <= 0 && (p = !0),
                    l.push(w)
                }
                if (p)
                    for (var M = 0, C = l.length; M < C; M++)
                        l[M]._holesDirty = !0
            },
            removeEdge: function(e, t, i, r) {
                var n = this.vertices
                  , o = this.hedges
                  , s = this.faces
                  , a = this.findHedge(e, t, i, r);
                a || console.warn("removeEdge: found no hedge to split!", e, t, i, r);
                var l = a.twin
                  , u = a.nexthedge
                  , h = l.nexthedge
                  , p = !0
                  , d = !0
                  , f = !1
                  , m = o.indexOf(a);
                o.splice(m, 1);
                m = o.indexOf(l);
                o.splice(m, 1),
                (m = s.indexOf(a.face)) > -1 && s.splice(m, 1),
                a.face.dispose(),
                a.face.area <= 0 && (f = !0),
                (m = s.indexOf(l.face)) > -1 && s.splice(m, 1),
                l.face.dispose(),
                l.face.area <= 0 && (f = !0);
                m = a.origin.hedgelist.indexOf(a);
                if (a.origin.hedgelist.splice(m, 1),
                a.origin.hedgelist.length > 0) {
                    if (0 === m)
                        var g = a.origin.hedgelist[a.origin.hedgelist.length - 1]
                          , v = a.origin.hedgelist[m];
                    else
                        g = a.origin.hedgelist[m - 1],
                        v = a.origin.hedgelist[m % a.origin.hedgelist.length];
                    v.prevhedge = g.twin,
                    g.twin.nexthedge = v
                } else {
                    var y = n.indexOf(a.origin);
                    n.splice(y, 1),
                    a.origin.dispose(),
                    d = !1
                }
                m = l.origin.hedgelist.indexOf(l);
                if (l.origin.hedgelist.splice(m, 1),
                l.origin.hedgelist.length > 0) {
                    if (0 === m)
                        g = l.origin.hedgelist[l.origin.hedgelist.length - 1],
                        v = l.origin.hedgelist[m];
                    else
                        g = l.origin.hedgelist[m - 1],
                        v = l.origin.hedgelist[m % l.origin.hedgelist.length];
                    v.prevhedge = g.twin,
                    g.twin.nexthedge = v
                } else {
                    y = n.indexOf(l.origin);
                    n.splice(y, 1),
                    l.origin.dispose(),
                    p = !1
                }
                a.dispose(),
                l.dispose();
                var b = p ? new c(this) : null;
                b && (b.wedge = u);
                var _ = d ? new c(this) : null;
                if (_ && (_.wedge = h),
                b && _ && b.equals(_) && (_.dispose(),
                _ = null),
                b) {
                    for ((x = b.wedge).face = b; x.nexthedge !== b.wedge; )
                        (x = x.nexthedge).face = b;
                    b.area <= 0 && (f = !0),
                    s.push(b)
                }
                if (_) {
                    var x;
                    for ((x = _.wedge).face = _; x.nexthedge !== _.wedge; )
                        (x = x.nexthedge).face = _;
                    _.area <= 0 && (f = !0),
                    s.push(_)
                }
                if (f)
                    for (var E = 0, w = s.length; E < w; E++)
                        s[E]._holesDirty = !0
            },
            splitEdge: function(e, t, i, r, o, a) {
                var l = this.vertices
                  , u = this.hedges
                  , c = this.findHedge(e, t, i, r);
                c || console.warn("splitEdge: found no hedge to split!", e, t, i, r);
                var h = c.twin
                  , p = new n(o,a);
                l.push(p);
                var d = new s(p,c.origin)
                  , f = new s(h.origin,p);
                u.push(d),
                u.push(f);
                var m = new s(p,h.origin)
                  , g = new s(c.origin,p);
                u.push(m),
                u.push(g),
                c.face.wedge === c && (c.face.wedge = d),
                c.face._vertexlistDirty = !0,
                d.face = c.face,
                f.face = c.face,
                h.face.wedge === h && (h.face.wedge = m),
                h.face._vertexlistDirty = !0,
                m.face = h.face,
                g.face = h.face,
                d.nexthedge = f,
                f.prevhedge = d,
                m.nexthedge = g,
                g.prevhedge = m,
                d.prevhedge = c.prevhedge !== h ? c.prevhedge : g,
                d.prevhedge.nexthedge = d,
                f.nexthedge = c.nexthedge !== h ? c.nexthedge : m,
                f.nexthedge.prevhedge = f,
                m.prevhedge = h.prevhedge !== c ? h.prevhedge : f,
                m.prevhedge.nexthedge = m,
                g.nexthedge = h.nexthedge !== c ? h.nexthedge : d,
                g.nexthedge.prevhedge = g,
                d.twin = g,
                f.twin = m,
                m.twin = f,
                g.twin = d,
                p.hedgelist.push(f, g);
                var v = c.origin.hedgelist.indexOf(c);
                c.origin.hedgelist.splice(v, 1, d);
                v = h.origin.hedgelist.indexOf(h);
                h.origin.hedgelist.splice(v, 1, m),
                c.dispose(),
                h.dispose();
                v = u.indexOf(c);
                u.splice(v, 1);
                v = u.indexOf(h);
                u.splice(v, 1)
            }
        }),
        t.DCEL = h
    }
    ));
    !function(e) {
        e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") && e.default
    }(Vn);
    var Wn = Vn.DCEL
      , Gn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_initParams",
            value: function() {
                un(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this._allRoomsBox2 = null
            }
        }, {
            key: "calAllRoomsBox2",
            value: function(e) {
                e.allRoomsBox2 || (e.allRoomsBox2 = this._calAllRoomsBox2(e))
            }
        }, {
            key: "_calAllRoomsBox2",
            value: function(e) {
                var t = new THREE.Box2
                  , i = e.typeToChildren.Room;
                if (i)
                    for (var r = 0; r < i.length; r++) {
                        var n = i[r];
                        this._addRoomToCalAllRoomsBox2(t, n)
                    }
                var o = e.typeToChildren.CombineFloor;
                if (o)
                    for (var s = 0; s < o.length; s++)
                        for (var a = o[s], l = 0; l < a.objects.length; l++) {
                            var u = a.objects[l];
                            this._addRoomToCalAllRoomsBox2(t, u.parent)
                        }
                return t
            }
        }, {
            key: "_addRoomToCalAllRoomsBox2",
            value: function(e, t) {
                for (var i = this._getFloorPosition(t), r = t.points, n = 0; n < r.length; n++) {
                    var o = new THREE.Vector2(r[n][0],r[n][2]);
                    o.x += i[0],
                    o.y += i[2],
                    e.expandByPoint(o)
                }
            }
        }, {
            key: "_getFloorPosition",
            value: function(e) {
                return e.position.slice()
            }
        }, {
            key: "build",
            value: function(e) {
                un(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "build", this).call(this, e)
            }
        }, {
            key: "_calOutsideDcel",
            value: function() {
                var e = this;
                if (this.object.typeToChildren.WallCorner) {
                    var t = this.object.jsonData.corners.map((function(e) {
                        return [e[0], e[2]]
                    }
                    ))
                      , i = this.object.jsonData.walls.map((function(e) {
                        return e.corners
                    }
                    ))
                      , r = new Wn(t,i).externalFaces();
                    console.log(r),
                    r.forEach((function(t) {
                        var i = e._getShapePath(t.vertexlist, !1, !1)
                          , r = new THREE.Shape(i)
                          , n = new THREE.ExtrudeGeometry(r,{
                            steps: 2,
                            depth: 1,
                            bevelEnabled: !0,
                            bevelThickness: 1,
                            bevelSize: 1,
                            bevelOffset: 0,
                            bevelSegments: 1
                        })
                          , o = new THREE.MeshBasicMaterial({
                            color: 65280
                        });
                        o.side = THREE.DoubleSide;
                        var s = new THREE.Mesh(n,o);
                        s.rotateX(-Math.PI / 2),
                        e.object.mesh.add(s)
                    }
                    ))
                }
            }
        }, {
            key: "_getShapePath",
            value: function(e) {
                for (var t = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], i = [0, 0, 0], r = [], n = 0; n < e.length; n++) {
                    var o = e[n];
                    t ? r.push(new THREE.Vector2(o.x + i[0],-(o.y + i[2]))) : r.push(new THREE.Vector2(o.x + i[0],o.y + i[2]))
                }
                return r
            }
        }]),
        t
    }(pn)
      , qn = {
        DoorOrWindow: Tn,
        Placement: vn,
        StraightManualWall: dn,
        CombineStraightManualWall: fn,
        CombinePlacement: Mn,
        CombineCeiling: Sn,
        CombineRoof: jn,
        CombineFloor: Cn,
        CombineModelWall: On,
        FloorPlan: Gn,
        Outdoors: Gn,
        Ceiling: Rn,
        Floor: Pn,
        Roof: Dn,
        Room: An,
        ModelWall: kn,
        PlacementGroup: Bn,
        CombinePlacementGroup: Fn,
        Facade: Ln,
        FacadeGroup: In,
        PlacementWall: Nn,
        PlacementGround: Hn,
        CombinePlacementWall: Un,
        CombineDoorOrWindow: zn,
        VideoProbe: vn
    }
      , Xn = function(e) {
        function t(e) {
            return an(this, t),
            hn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return cn(t, e),
        ln(t, [{
            key: "_createMesh",
            value: function(e) {
                this.mesh = new THREE.Object3D;
                var t = this.object.position
                  , i = this.object.scale
                  , r = this.object.rotation;
                this.mesh.position.set(t[0], t[1], t[2]),
                this.mesh.scale.set(i[0], i[1], i[2]),
                this.mesh.quaternion.set(r[0], r[1], r[2], r[3]),
                this.object.mesh = this.mesh
            }
        }]),
        t
    }(pn)
      , Jn = function() {
        function e(t) {
            an(this, e),
            this.meshBuilderMap = {}
        }
        return ln(e, [{
            key: "create",
            value: function(e) {
                var t = e.type;
                if (this.meshBuilderMap[t])
                    return this.meshBuilderMap[t];
                var i = qn[t];
                e.manager = this;
                var r = void 0;
                return r = i ? new i(e) : new Xn(e),
                this.meshBuilderMap[t] = r,
                r
            }
        }, {
            key: "clear",
            value: function() {
                for (var e in this.meshBuilderMap)
                    this.meshBuilderMap[e].clear();
                this.meshBuilderMap = null
            }
        }]),
        e
    }()
      , Yn = new (function() {
        function e(t) {
            an(this, e),
            this._versionMap = {
                0: {
                    0: Jn
                }
            },
            this._smallVersionLibs = [[0]],
            this._bigVersions = [0]
        }
        return ln(e, [{
            key: "getManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][i.length - 1]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return new this._versionMap[e][r.length - 1]
                }
                var n = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1]))
                    return t > n[n.length - 1] ? new this._versionMap[e][n.length - 1] : new this._versionMap[e][t];
                console.error("ubuilder meshBuilder  not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , Qn = new (function() {
        function e(t) {
            an(this, e)
        }
        return ln(e, [{
            key: "create",
            value: function(e, t) {
                return Yn.getManager(e, t)
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }())
      , Zn = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , Kn = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , $n = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , eo = function() {
        function e(t) {
            Kn(this, e),
            this._init()
        }
        return $n(e, [{
            key: "_init",
            value: function() {
                this.vertices = [],
                this.normals = [],
                this.uvs = [],
                this.uv2s = [],
                this.resource = null,
                this.triangles = [],
                this.subMeshes = [],
                this.extraData = {}
            }
        }, {
            key: "clone",
            value: function() {
                var t = new e;
                for (var i in t.vertices = this.vertices.slice(),
                t.normals = this.normals.slice(),
                t.uvs = this.uvs.slice(),
                t.uv2s = this.uv2s.slice(),
                t.resource = this.resource,
                t.triangles = this.triangles.slice(),
                this.extraData)
                    t.extraData[i] = this.extraData[i].slice();
                for (var r = 0; r < this.subMeshes.length; r++) {
                    var n = this.subMeshes[r].clone();
                    t.subMeshes.push(n)
                }
                return t
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.subMeshes.length; e++) {
                    this.subMeshes[e].clear()
                }
                this._init()
            }
        }]),
        e
    }()
      , to = function() {
        function e() {
            Kn(this, e)
        }
        return $n(e, null, [{
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : Zn(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "applyQuaternionToVector3",
            value: function(e, t) {
                if (0 !== e[0] || 0 !== e[1] || 0 !== e[2] || 1 !== e[3]) {
                    var i = t[0]
                      , r = t[1]
                      , n = t[2]
                      , o = e[0]
                      , s = e[1]
                      , a = e[2]
                      , l = e[3]
                      , u = l * i + s * n - a * r
                      , c = l * r + a * i - o * n
                      , h = l * n + o * r - s * i
                      , p = -o * i - s * r - a * n;
                    t[0] = u * l + p * -o + c * -a - h * -s,
                    t[1] = c * l + p * -s + h * -o - u * -a,
                    t[2] = h * l + p * -a + u * -s - c * -o
                }
            }
        }]),
        e
    }()
      , io = function() {
        function e(t) {
            Kn(this, e),
            this._initParams(),
            this.positions = [],
            this.normals = [],
            this.uvs = [],
            this.uv2s = [],
            this.uv3s = [],
            this.indexes = [],
            this.colors = [],
            this.alphaIndexes = [],
            this.material = t,
            this.groupsArray = null,
            this.meshes = [],
            this.transformations = [],
            this.verticesCount = 0,
            this.uvsCount = 0,
            this.indexesCount = 0,
            this.trianglesCount = 0,
            this.colorsCount = 0,
            this.alphaIndexsCount = 0,
            this.uv2sCount = 0,
            this.uv3sCount = 0,
            this.groupsCountArray = null,
            this.combineCursor = {
                vertex: 0,
                index: 0,
                uv: 0,
                color: 0,
                alphaIndex: 0,
                uv2: 0,
                uv3: 0,
                groups: []
            },
            this.maxCount = 196602
        }
        return $n(e, [{
            key: "_initParams",
            value: function() {
                this.positions = [],
                this.normals = [],
                this.uvs = [],
                this.uv2s = [],
                this.uv3s = [],
                this.indexes = [],
                this.colors = [],
                this.alphaIndexes = [],
                this.material = null,
                this.groups = null,
                this.meshes = [],
                this.transformations = [],
                this.verticesCount = 0,
                this.uvsCount = 0,
                this.indexesCount = 0,
                this.trianglesCount = 0,
                this.colorsCount = 0,
                this.alphaIndexsCount = 0,
                this.uv2sCount = 0,
                this.uv3sCount = 0,
                this.combineCursor = null,
                this.maxCount = null
            }
        }, {
            key: "_initGroups",
            value: function() {
                var e = []
                  , t = this.meshObj.geometry;
                if (t.groups.length > 0) {
                    var i = this.cloneGroups(t.groups);
                    i.forEach((function(e) {
                        e.start += 0
                    }
                    )),
                    e = e.concat(i)
                }
            }
        }, {
            key: "cloneGroups",
            value: function(e) {
                for (var t = [], i = 0; i < e.length; i++) {
                    var r = e[i];
                    t.push(to.cloneJSObject(r))
                }
                return t
            }
        }, {
            key: "getCalculaterMesh",
            value: function() {
                this._combine();
                var e = new eo;
                return e.resource = this.material,
                this.positions.length > 0 && (e.vertices = this.positions),
                this.normals.length && (e.normals = this.normals),
                this.uvs.length && (e.uvs = this.uvs),
                this.uv2s.length && (e.uv2s = this.uv2s),
                this.indexes.length > 0 && (e.triangles = this.indexes),
                this.colors.length && (e.extraData.color = this.colors),
                this.uv3s.length > 0 && (e.extraData.uv3 = this.uv3s),
                this.alphaIndexes.length > 0 && (e.extraData.alphaIndex = this.alphaIndexes),
                this.groups && (e.extraData.groups = this.groups),
                e
            }
        }, {
            key: "_combine",
            value: function() {
                if (this.indexes = new Uint16Array(this.indexesCount),
                this.positions = new Float32Array(this.verticesCount),
                this.normals = new Float32Array(this.verticesCount),
                this.uvs = new Float32Array(this.uvsCount),
                0 !== this.uv2sCount && (this.uv2s = new Float32Array(this.uv2sCount)),
                0 !== this.uv3sCount && (this.uv3s = new Float32Array(this.uv3sCount)),
                0 !== this.colorsCount && (this.colors = new Uint16Array(this.colorsCount)),
                0 !== this.alphaIndexsCount && (this.alphaIndexes = new Uint16Array(this.alphaIndexsCount)),
                this.groupsCountArray)
                    for (var e = 0; e < this.groupsCountArray.length; e++) {
                        var t = this.groupsCountArray[e];
                        this.combineCursor.groups.push({
                            currentIndex: t.start
                        })
                    }
                for (var i = 0; i < this.transformations.length; i++) {
                    var r = this.transformations[i];
                    this._applyTransformation(this.meshes[i], r)
                }
                this.groups = this.groupsCountArray
            }
        }, {
            key: "_applyTransformation",
            value: function(e, t, i) {
                this._combineIndexes(e, i),
                this._combinePositionsAndNormals(e, t),
                this._combineUVs(e),
                this._combineColors(e),
                this._combineAlphaIndexes(e)
            }
        }, {
            key: "_combineIndexes",
            value: function(e) {
                var t = e.geometry.index.array
                  , i = e.geometry.groups;
                if (i.length > 0)
                    for (var r = 0; r < i.length; r++) {
                        for (var n = i[r], o = n.start, s = n.count, a = this.combineCursor.groups[r], l = 0; l < s; l++)
                            this.indexes[a.currentIndex + l] = this.combineCursor.vertex / 3 + t[o + l];
                        this.combineCursor.groups[r].currentIndex += s
                    }
                else {
                    for (var u = 0; u < t.length; u++)
                        this.indexes[this.combineCursor.index + u] = this.combineCursor.vertex / 3 + t[u];
                    this.combineCursor.index += t.length
                }
            }
        }, {
            key: "_combinePositionsAndNormals",
            value: function(e, t) {
                var i = null
                  , r = null
                  , n = e.geometry.getAttribute("position");
                i = n ? n.array : [];
                var o = e.geometry.getAttribute("normal");
                r = o ? o.array : [];
                for (var s = new Float32Array(3), a = new Float32Array(3), l = 0; l < i.length; ) {
                    a[0] = i[l],
                    a[1] = i[l + 1],
                    a[2] = i[l + 2],
                    s[0] = r[l],
                    s[1] = r[l + 1],
                    s[2] = r[l + 2];
                    for (var u = t.positions.length - 1; u > -1; u--) {
                        var c = t.scales[u]
                          , h = t.quaternions[u]
                          , p = t.positions[u];
                        1 !== c.x && (a[0] *= c.x),
                        1 !== c.y && (a[1] *= c.y),
                        1 !== c.z && (a[2] *= c.z),
                        to.applyQuaternionToVector3(h.toArray(), a),
                        0 !== p.x && (a[0] += p.x),
                        0 !== p.y && (a[1] += p.y),
                        0 !== p.z && (a[2] += p.z),
                        r && to.applyQuaternionToVector3(h.toArray(), s)
                    }
                    this.positions[this.combineCursor.vertex + l] = a[0],
                    this.positions[this.combineCursor.vertex + l + 1] = a[1],
                    this.positions[this.combineCursor.vertex + l + 2] = a[2],
                    this.normals[this.combineCursor.vertex + l] = s[0],
                    this.normals[this.combineCursor.vertex + l + 1] = s[1],
                    this.normals[this.combineCursor.vertex + l + 2] = s[2],
                    l += 3
                }
                this.combineCursor.vertex += i.length
            }
        }, {
            key: "_combineUVs",
            value: function(e) {
                var t = e.geometry.getAttribute("uv")
                  , i = null;
                i = t ? t.array : [];
                for (var r = 0; r < i.length; r++)
                    this.uvs[this.combineCursor.uv + r] = i[r];
                this.combineCursor.uv += i.length;
                var n = e.geometry.getAttribute("uv2");
                if (n) {
                    for (var o = n.array, s = 0; s < o.length; s++)
                        this.uv2s[this.combineCursor.uv2 + s] = o[s];
                    this.combineCursor.uv2 += o.length
                }
                var a = e.geometry.getAttribute("uv3");
                if (a) {
                    for (var l = a.array, u = 0; u < l.length; u++)
                        this.uv3s[this.combineCursor.uv3 + u] = l[u];
                    this.combineCursor.uv3 += l.length
                }
            }
        }, {
            key: "_combineColors",
            value: function(e) {
                var t = e.geometry.getAttribute("color");
                if (t) {
                    for (var i = t.array, r = 0; r < i.length; r++)
                        this.colors[this.combineCursor.color + r] = i[r];
                    this.combineCursor.color += i.length
                }
            }
        }, {
            key: "_combineAlphaIndexes",
            value: function(e) {
                var t = e.geometry.getAttribute("alphaIndex");
                if (t) {
                    for (var i = t.array, r = 0; r < i.length; r++)
                        this.alphaIndexes[this.combineCursor.alphaIndex + r] = i[r];
                    this.combineCursor.alphaIndex += i.length
                }
            }
        }, {
            key: "add",
            value: function(e, t, i) {
                if (this.meshes.push(e),
                this.transformations.push(t),
                e.geometry.groups)
                    if (this.groupsCountArray)
                        for (var r = e.geometry.groups, n = 0; n < r.length; n++) {
                            var o = r[n];
                            this.groupsCountArray[n].count += o.count,
                            n !== r.length - 1 && (this.groupsCountArray[n + 1].start = this.groupsCountArray[n].start + this.groupsCountArray[n].count)
                        }
                    else
                        this.groupsCountArray = this.cloneGroups(e.geometry.groups);
                e.geometry.index && (this.indexesCount += e.geometry.index.array.length),
                e.geometry.getAttribute("position") && (this.verticesCount += e.geometry.getAttribute("position").array.length),
                e.geometry.getAttribute("uv") && (this.uvsCount += e.geometry.getAttribute("uv").array.length);
                var s = e.geometry.getAttribute("color");
                s && (this.colorsCount += s.array.length);
                var a = e.geometry.getAttribute("alphaIndex");
                a && (this.alphaIndexsCount += a.array.length);
                var l = e.geometry.getAttribute("uv2");
                l && (this.uv2sCount += l.array.length);
                var u = e.geometry.getAttribute("uv3");
                u && (this.uv3sCount += u.array.length)
            }
        }, {
            key: "isExceed",
            value: function(e) {
                return this.verticesCount + e > this.maxCount
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , ro = function() {
        function e(t) {
            Kn(this, e),
            this._initParams(),
            this.material = t,
            this.mesh = new eo,
            this.combineBundleSubMeshes = [],
            this.currentCombineBundleSubMesh = this._createCombineBundleSubMesh(),
            this.vertexCount = 0
        }
        return $n(e, [{
            key: "_initParams",
            value: function() {
                this.material = null,
                this.groups = null,
                this.mesh = null,
                this.combineBundleSubMeshes = [],
                this.currentCombineBundleSubMesh = null,
                this.vertexCount = 0
            }
        }, {
            key: "_createCombineBundleSubMesh",
            value: function() {
                var e = new io(this.material);
                return this.combineBundleSubMeshes.push(e),
                e
            }
        }, {
            key: "add",
            value: function(e, t, i) {
                var r = 0;
                e.geometry.getAttribute("position") && (r = e.geometry.getAttribute("position").array.length),
                this.currentCombineBundleSubMesh.isExceed(r) && (this.currentCombineBundleSubMesh = this._createCombineBundleSubMesh()),
                this.currentCombineBundleSubMesh.add(e, t, i)
            }
        }, {
            key: "getCalculaterMesh",
            value: function() {
                for (var e = 0; e < this.combineBundleSubMeshes.length; e++) {
                    var t = this.combineBundleSubMeshes[e];
                    this.mesh.subMeshes.push(t.getCalculaterMesh())
                }
                return this.mesh
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.combineBundleSubMeshes.length; e++) {
                    this.combineBundleSubMeshes[e].clear()
                }
                this._initParams()
            }
        }]),
        e
    }()
      , no = function() {
        function e() {
            Kn(this, e),
            this.positions = [],
            this.scales = [],
            this.quaternions = []
        }
        return $n(e, [{
            key: "clone",
            value: function() {
                var t = new e;
                return t.positions = this.positions.slice(),
                t.scales = this.scales.slice(),
                t.quaternions = this.quaternions.slice(),
                t
            }
        }]),
        e
    }()
      , oo = function() {
        function e(t) {
            Kn(this, e),
            this._initParams(),
            this.bundeObj = t,
            this.materialMap = new Map
        }
        return $n(e, [{
            key: "_initParams",
            value: function() {
                this.bundeObj = null,
                this.materialMap = null,
                this.combineBundleMeshs = [],
                this.vertexCount = 0
            }
        }, {
            key: "isExceed",
            value: function() {
                return this.vertexCount > 6e4
            }
        }, {
            key: "combine",
            value: function() {
                this._combine(this.bundeObj)
            }
        }, {
            key: "_combine",
            value: function(e, t) {
                if (void 0 === t && (t = new no),
                t.scales.push(e.scale),
                t.positions.push(e.position),
                t.quaternions.push(e.quaternion),
                e.isMesh) {
                    var i = 0;
                    if (e.geometry.getAttribute("position") && (i = e.geometry.getAttribute("position").array.length),
                    this.vertexCount += i / 3,
                    !this.materialMap.has(e.material)) {
                        var r = new ro(e.material);
                        this.materialMap.set(r.material, r),
                        this.combineBundleMeshs.push(r)
                    }
                    this.materialMap.get(e.material).add(e, t, e.groups)
                }
                if (0 !== e.children.length)
                    for (var n = 0; n < e.children.length; n++)
                        this._combine(e.children[n], t.clone())
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.combineBundleMeshs.length; e++) {
                    this.combineBundleMeshs[e].clear()
                }
                this._initParams()
            }
        }]),
        e
    }()
      , so = function() {
        function e(t) {
            Kn(this, e),
            this.resource = t.resource,
            this.mesh = null,
            this.builderPromise = null,
            this.isBuilded = !1
        }
        return $n(e, [{
            key: "build",
            value: function() {
                this.isBuilded || (this.combineBundleObj = new oo(this.resource.model),
                this.combineBundleObj.combine(),
                this.combineBundleObj.isExceed() ? this.resource.vertexIsExceed = !0 : (this.resource.vertexIsExceed = !1,
                this.changeToCalculaterMesh()),
                this.isBuilded = !0)
            }
        }, {
            key: "changeToCalculaterMesh",
            value: function() {
                this.mesh = new eo;
                for (var e = this.combineBundleObj.combineBundleMeshs, t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.mesh.subMeshes.push(i.getCalculaterMesh())
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.combineBundleObj && this.combineBundleObj.clear(),
                this.combineBundleObj = null
            }
        }]),
        e
    }()
      , ao = (function() {
        function e() {
            Kn(this, e),
            this.map = {}
        }
        $n(e, [{
            key: "getCombineMesh",
            value: function(e) {
                if (!this.map[e.id]) {
                    var t = new so({
                        resource: e
                    });
                    t.build(),
                    this.map[e.id] = t.mesh
                }
                return this.map[e.id]
            }
        }, {
            key: "clear",
            value: function() {
                this.map = {}
            }
        }])
    }(),
    function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
    )
      , lo = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , uo = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , co = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , ho = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , po = function() {
        function e(t) {
            ao(this, e),
            this._initParams(),
            this.object = t.object,
            this.manager = t.manager
        }
        return lo(e, [{
            key: "_initParams",
            value: function() {
                this.object = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children, t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.manager.parserConfig[i.type];
                    if (r)
                        new r({
                            object: i,
                            manager: this.manager
                        }).parse()
                }
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , fo = function(e) {
        function t(e) {
            return ao(this, t),
            ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return co(t, e),
        t
    }(po)
      , mo = function(e) {
        function t(e) {
            return ao(this, t),
            ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return co(t, e),
        t
    }(po)
      , go = function() {
        function e(t) {
            ao(this, e),
            this._initParams(),
            this.manager = t.manager,
            this.parent = null
        }
        return lo(e, [{
            key: "_initParams",
            value: function() {
                this.parent = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {}
        }, {
            key: "isObjectShouldCombine",
            value: function(e) {
                return !!this.isNullOrUndefined(e.properties) && (!!this.isNullOrUndefined(e.userID) && (!!this.isNullOrUndefined(e.name) && !!e.visible))
            }
        }, {
            key: "isNullOrUndefined",
            value: function(e) {
                return null == e
            }
        }]),
        e
    }()
      , vo = function(e) {
        function t(e) {
            ao(this, t);
            var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combineWall = null,
            i
        }
        return co(t, e),
        lo(t, [{
            key: "_initParams",
            value: function() {
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combineWall = null
            }
        }, {
            key: "parse",
            value: function(e) {
                "StraightManualWall" === e.type && (e.visible && (null === this.combineWall && (this.combineWall = this.crerateCombineStraightManualWall()),
                this.combineWall.addObject(e)),
                e.parent = null)
            }
        }, {
            key: "crerateCombineStraightManualWall",
            value: function() {
                var e = this.manager.objectManager.create({
                    type: "CombineStraightManualWall"
                });
                return e.parent = this.parent,
                e
            }
        }, {
            key: "initWallCorners",
            value: function() {
                for (var e = this.parent.typeToChildren.WallCorner, t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.combineWall.addCorner(i)
                }
            }
        }]),
        t
    }(go)
      , yo = function(e) {
        function t(e) {
            ao(this, t);
            var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combineObjectMaps = {},
            i._combineObjectClass = i.manager.objectManager.ClassName.CombinePlacement,
            i
        }
        return co(t, e),
        lo(t, [{
            key: "_initParams",
            value: function() {
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combineObjectMaps = null,
                this._CombineObjectClass = null
            }
        }, {
            key: "parse",
            value: function(e) {
                e.type === this.manager.objectManager.ClassName.Placement && this.isObjectShouldCombine(e) && (this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                this.combineObjectMaps[e.resource.id].addObject(e),
                e.parent = null)
            }
        }, {
            key: "createCombineObject",
            value: function(e) {
                var t = this.manager.objectManager.create({
                    type: this._combineObjectClass
                });
                return t.resource = e,
                t.parent = this.parent,
                t
            }
        }]),
        t
    }(go)
      , bo = {
        StraightManualWall: vo,
        WallCorner: go,
        DoorOrWindow: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i._combineObjectClass = i.manager.objectManager.ClassName.CombineDoorOrWindow,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this._combineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    "DoorOrWindow" === e.type && this.isObjectShouldCombine(e) && (this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                    this.combineObjectMaps[e.resource.id].addObject(e),
                    e.parent = null)
                }
            }]),
            t
        }(yo),
        Placement: yo,
        Room: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineFloorMaps = {},
                i.combineCeilingMaps = {},
                i.combineRoofMaps = {},
                i.combineObjectMaps = {
                    Floor: i.combineFloorMaps,
                    Ceiling: i.combineCeilingMaps,
                    Roof: i.combineRoofMaps
                },
                i.typeToCombineObjectType = {
                    Floor: "CombineFloor",
                    Ceiling: "CombineCeiling",
                    Roof: "CombineRoof"
                },
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineFloorMaps = null,
                    this.combineCeilingMaps = null,
                    this.combineRoofMaps = null,
                    this.combineObjectMaps = null,
                    this.typeToCombineObjectType = null
                }
            }, {
                key: "createCombineObject",
                value: function(e, t, i) {
                    var r = this.manager.objectManager.create({
                        type: this.typeToCombineObjectType[e]
                    });
                    return r.parent = this.parent,
                    r.resource = t,
                    r.height = i,
                    r
                }
            }, {
                key: "parse",
                value: function(e) {
                    this.isObjectShouldCombine(e) && (e.ceiling && e.ceiling.visible && this._addCombineObject(e.ceiling),
                    e.roof && e.roof.visible && this._addCombineObject(e.roof),
                    e.floor.visible && this._addCombineObject(e.floor),
                    e.parent = null)
                }
            }, {
                key: "_addCombineObject",
                value: function(e) {
                    var t = e.type
                      , i = e.height
                      , r = e.resource
                      , n = this.combineObjectMaps[t];
                    n[r.id] ? n[r.id].has(i) || n[r.id].set(i, this.createCombineObject(t, r, i)) : (n[r.id] = new Map,
                    n[r.id].set(i, this.createCombineObject(t, r, i))),
                    n[r.id].get(i).addObject(e)
                }
            }]),
            t
        }(go),
        ModelWall: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineObjectMaps = {},
                i._CombineObjectClass = i.manager.objectManager.ClassName.CombineModelWall,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    e.visible && (this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                    this.combineObjectMaps[e.resource.id].addObject(e)),
                    e.parent = null
                }
            }, {
                key: "createCombineObject",
                value: function(e) {
                    var t = this.manager.objectManager.create({
                        type: this._CombineObjectClass
                    });
                    return t.resource = e,
                    t.parent = this.parent,
                    t
                }
            }]),
            t
        }(go),
        PlacementGroup: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i._combineObjectClass = i.manager.objectManager.ClassName.CombinePlacementGroup,
                i.combinePlacementGroup = null,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    e.type === this.manager.objectManager.ClassName.PlacementGroup && this.isObjectShouldCombine(e) && (null === this.combinePlacementGroup && (this.combinePlacementGroup = this.createCombineObject()),
                    this.combinePlacementGroup.addObject(e),
                    e.parent = null)
                }
            }, {
                key: "createCombineObject",
                value: function() {
                    var e = this.manager.objectManager.create({
                        type: this._combineObjectClass
                    });
                    return e.parent = this.parent,
                    e
                }
            }]),
            t
        }(go),
        PlacementWall: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineObjectMaps = {},
                i._combineObjectClass = i.manager.objectManager.ClassName.CombinePlacementWall,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                    this.combineObjectMaps[e.resource.id].addObject(e),
                    e.parent = null
                }
            }, {
                key: "createCombineObject",
                value: function(e) {
                    var t = this.manager.objectManager.create({
                        type: this._combineObjectClass
                    });
                    return t.resource = e,
                    t.parent = this.parent,
                    t
                }
            }]),
            t
        }(go)
    }
      , _o = function(e) {
        function t(e) {
            ao(this, t);
            var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combiners = {},
            i
        }
        return co(t, e),
        lo(t, [{
            key: "_initParams",
            value: function() {
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combiners = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children.slice(), t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.initCombiner(i)
                }
                this.removeCorners()
            }
        }, {
            key: "initCombiner",
            value: function(e) {
                if (!this.combiners[e.type]) {
                    var t = bo[e.type];
                    if (t) {
                        var i = new t({
                            manager: this.manager
                        });
                        i.parent = this.object,
                        this.combiners[e.type] = i
                    }
                }
                this.combiners[e.type] && this.combiners[e.type].parse(e)
            }
        }, {
            key: "removeCorners",
            value: function() {
                var e = this.object.typeToChildren.WallCorner;
                if (e) {
                    e = e.slice();
                    for (var t = 0; t < e.length; t++) {
                        e[t].parent = null
                    }
                }
            }
        }, {
            key: "clear",
            value: function() {
                for (var e in this.combiners)
                    this.combiners[e].clear();
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(po)
      , xo = {
        World: fo,
        Building: mo,
        FloorPlan: _o,
        Outdoors: function(e) {
            function t(e) {
                return ao(this, t),
                ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
            }
            return co(t, e),
            t
        }(_o)
    }
      , Eo = function() {
        function e() {
            ao(this, e),
            this.objectManager = null,
            this.parserConfig = xo,
            this.rootParser = null
        }
        return lo(e, [{
            key: "parse",
            value: function(e) {
                new (0,
                this.parserConfig[e.type])({
                    object: e,
                    manager: this
                }).parse()
            }
        }, {
            key: "clear",
            value: function() {
                this.rootParser && this.rootParser.clear(),
                this.rootParser = null,
                this.objectManager = null,
                this.parserConfig = null
            }
        }]),
        e
    }()
      , wo = function() {
        function e(t) {
            ao(this, e),
            this._initParams(),
            this.object = t.object,
            this.manager = t.manager
        }
        return lo(e, [{
            key: "_initParams",
            value: function() {
                this.object = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children, t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.manager.parserConfig[i.type];
                    if (r)
                        new r({
                            object: i,
                            manager: this.manager
                        }).parse()
                }
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , To = function(e) {
        function t(e) {
            return ao(this, t),
            ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return co(t, e),
        t
    }(wo)
      , Mo = function(e) {
        function t(e) {
            return ao(this, t),
            ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return co(t, e),
        t
    }(wo)
      , Co = function() {
        function e(t) {
            ao(this, e),
            this._initParams(),
            this.manager = t.manager,
            this.parent = null,
            this.styleTagKey = "_styleTag_"
        }
        return lo(e, [{
            key: "_initParams",
            value: function() {
                this.parent = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {}
        }, {
            key: "isObjectOnlyContainStyleTagProp",
            value: function(e) {
                return !this.isNullOrUndefined(e.properties) && (this.isNullOrUndefined(e.properties[this.styleTagKey]) || 1 !== Object.keys(e.properties).length ? void 0 : !!this.isNullOrUndefined(e.userID) && !!this.isNullOrUndefined(e.name))
            }
        }, {
            key: "isObjectShouldCombine",
            value: function(e) {
                return !!this.isNullOrUndefined(e.properties) && (!!this.isNullOrUndefined(e.userID) && (!!this.isNullOrUndefined(e.name) && !!e.visible))
            }
        }, {
            key: "isNullOrUndefined",
            value: function(e) {
                return null == e
            }
        }]),
        e
    }()
      , So = function(e) {
        function t(e) {
            ao(this, t);
            var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combineWall = null,
            i
        }
        return co(t, e),
        lo(t, [{
            key: "_initParams",
            value: function() {
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combineWall = null
            }
        }, {
            key: "parse",
            value: function(e) {
                "StraightManualWall" === e.type && (e.visible && (null === this.combineWall && (this.combineWall = this.crerateCombineStraightManualWall()),
                this.combineWall.addObject(e)),
                e.parent = null)
            }
        }, {
            key: "crerateCombineStraightManualWall",
            value: function() {
                var e = this.manager.objectManager.create({
                    type: "CombineStraightManualWall"
                });
                return e.parent = this.parent,
                e
            }
        }, {
            key: "initWallCorners",
            value: function() {
                for (var e = this.parent.typeToChildren.WallCorner, t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.combineWall.addCorner(i)
                }
            }
        }]),
        t
    }(Co)
      , jo = function(e) {
        function t(e) {
            ao(this, t);
            var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combineObjectMaps = {},
            i.onlyContainStyleTagCombineObjectMap = {},
            i._combineObjectClass = i.manager.objectManager.ClassName.CombinePlacement,
            i
        }
        return co(t, e),
        lo(t, [{
            key: "_initParams",
            value: function() {
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combineObjectMaps = null,
                this._CombineObjectClass = null
            }
        }, {
            key: "parse",
            value: function(e) {
                if (e.type === this.manager.objectManager.ClassName.Placement)
                    if (this.isObjectShouldCombine(e))
                        this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                        this.combineObjectMaps[e.resource.id].addObject(e),
                        e.parent = null;
                    else if (this.isObjectOnlyContainStyleTagProp(e)) {
                        if (this.onlyContainStyleTagCombineObjectMap[e.resource.id] || (this.onlyContainStyleTagCombineObjectMap[e.resource.id] = {}),
                        !this.onlyContainStyleTagCombineObjectMap[e.resource.id][e.properties[this.styleTagKey]]) {
                            var t = this.createCombineObject(e.resource);
                            t.properties = {},
                            t.properties[this.styleTagKey] = e.properties[this.styleTagKey],
                            this.onlyContainStyleTagCombineObjectMap[e.resource.id][e.properties[this.styleTagKey]] = t
                        }
                        this.onlyContainStyleTagCombineObjectMap[e.resource.id][e.properties[this.styleTagKey]].addObject(e),
                        e.parent = null
                    }
            }
        }, {
            key: "createCombineObject",
            value: function(e) {
                var t = this.manager.objectManager.create({
                    type: this._combineObjectClass
                });
                return t.resource = e,
                t.parent = this.parent,
                t
            }
        }]),
        t
    }(Co)
      , Po = {
        StraightManualWall: So,
        WallCorner: Co,
        DoorOrWindow: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i._combineObjectClass = i.manager.objectManager.ClassName.CombineDoorOrWindow,
                i.onlyContainStyleTagCombineObjectMap = {},
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this._combineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    if ("DoorOrWindow" === e.type)
                        if (this.isObjectShouldCombine(e))
                            this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                            this.combineObjectMaps[e.resource.id].addObject(e),
                            e.parent = null;
                        else if (this.isObjectOnlyContainStyleTagProp(e)) {
                            if (this.onlyContainStyleTagCombineObjectMap[e.resource.id] || (this.onlyContainStyleTagCombineObjectMap[e.resource.id] = {}),
                            !this.onlyContainStyleTagCombineObjectMap[e.resource.id][e.properties[this.styleTagKey]]) {
                                var t = this.createCombineObject(e.resource);
                                t.properties = {},
                                t.properties[this.styleTagKey] = e.properties[this.styleTagKey],
                                this.onlyContainStyleTagCombineObjectMap[e.resource.id][e.properties[this.styleTagKey]] = t
                            }
                            this.onlyContainStyleTagCombineObjectMap[e.resource.id][e.properties[this.styleTagKey]].addObject(e),
                            e.parent = null
                        }
                }
            }]),
            t
        }(jo),
        Placement: jo,
        Room: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineFloorMaps = {},
                i.combineCeilingMaps = {},
                i.combineRoofMaps = {},
                i.combineObjectMaps = {
                    Floor: i.combineFloorMaps,
                    Ceiling: i.combineCeilingMaps,
                    Roof: i.combineRoofMaps
                },
                i.typeToCombineObjectType = {
                    Floor: "CombineFloor",
                    Ceiling: "CombineCeiling",
                    Roof: "CombineRoof"
                },
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineFloorMaps = null,
                    this.combineCeilingMaps = null,
                    this.combineRoofMaps = null,
                    this.combineObjectMaps = null,
                    this.typeToCombineObjectType = null
                }
            }, {
                key: "createCombineObject",
                value: function(e, t, i) {
                    var r = this.manager.objectManager.create({
                        type: this.typeToCombineObjectType[e]
                    });
                    return r.parent = this.parent,
                    r.resource = t,
                    r.height = i,
                    r
                }
            }, {
                key: "parse",
                value: function(e) {
                    this.isObjectShouldCombine(e) && (e.ceiling && e.ceiling.visible && this._addCombineObject(e.ceiling),
                    e.roof && e.roof.visible && this._addCombineObject(e.roof),
                    e.floor.visible && this._addCombineObject(e.floor),
                    e.parent = null)
                }
            }, {
                key: "_addCombineObject",
                value: function(e) {
                    var t = e.type
                      , i = e.height
                      , r = e.resource
                      , n = this.combineObjectMaps[t];
                    n[r.id] ? n[r.id].has(i) || n[r.id].set(i, this.createCombineObject(t, r, i)) : (n[r.id] = new Map,
                    n[r.id].set(i, this.createCombineObject(t, r, i))),
                    n[r.id].get(i).addObject(e)
                }
            }]),
            t
        }(Co),
        ModelWall: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineObjectMaps = {},
                i._CombineObjectClass = i.manager.objectManager.ClassName.CombineModelWall,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    e.visible && (this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                    this.combineObjectMaps[e.resource.id].addObject(e)),
                    e.parent = null
                }
            }, {
                key: "createCombineObject",
                value: function(e) {
                    var t = this.manager.objectManager.create({
                        type: this._CombineObjectClass
                    });
                    return t.resource = e,
                    t.parent = this.parent,
                    t
                }
            }]),
            t
        }(Co),
        PlacementGroup: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i._combineObjectClass = i.manager.objectManager.ClassName.CombinePlacementGroup,
                i.combinePlacementGroup = null,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    e.type === this.manager.objectManager.ClassName.PlacementGroup && this.isObjectShouldCombine(e) && (null === this.combinePlacementGroup && (this.combinePlacementGroup = this.createCombineObject()),
                    this.combinePlacementGroup.addObject(e),
                    e.parent = null)
                }
            }, {
                key: "createCombineObject",
                value: function() {
                    var e = this.manager.objectManager.create({
                        type: this._combineObjectClass
                    });
                    return e.parent = this.parent,
                    e
                }
            }]),
            t
        }(Co),
        PlacementWall: function(e) {
            function t(e) {
                ao(this, t);
                var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineObjectMaps = {},
                i._combineObjectClass = i.manager.objectManager.ClassName.CombinePlacementWall,
                i
            }
            return co(t, e),
            lo(t, [{
                key: "_initParams",
                value: function() {
                    uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource)),
                    this.combineObjectMaps[e.resource.id].addObject(e),
                    e.parent = null
                }
            }, {
                key: "createCombineObject",
                value: function(e) {
                    var t = this.manager.objectManager.create({
                        type: this._combineObjectClass
                    });
                    return t.resource = e,
                    t.parent = this.parent,
                    t
                }
            }]),
            t
        }(Co)
    }
      , Ro = function(e) {
        function t(e) {
            ao(this, t);
            var i = ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combiners = {},
            i
        }
        return co(t, e),
        lo(t, [{
            key: "_initParams",
            value: function() {
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combiners = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children.slice(), t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.initCombiner(i)
                }
                this.removeCorners()
            }
        }, {
            key: "initCombiner",
            value: function(e) {
                if (!this.combiners[e.type]) {
                    var t = Po[e.type];
                    if (t) {
                        var i = new t({
                            manager: this.manager
                        });
                        i.parent = this.object,
                        this.combiners[e.type] = i
                    }
                }
                this.combiners[e.type] && this.combiners[e.type].parse(e)
            }
        }, {
            key: "removeCorners",
            value: function() {
                var e = this.object.typeToChildren.WallCorner;
                if (e) {
                    e = e.slice();
                    for (var t = 0; t < e.length; t++) {
                        e[t].parent = null
                    }
                }
            }
        }, {
            key: "clear",
            value: function() {
                for (var e in this.combiners)
                    this.combiners[e].clear();
                uo(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(wo)
      , Do = {
        World: To,
        Building: Mo,
        FloorPlan: Ro,
        Outdoors: function(e) {
            function t(e) {
                return ao(this, t),
                ho(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
            }
            return co(t, e),
            t
        }(Ro)
    }
      , Ao = function() {
        function e() {
            ao(this, e),
            this.objectManager = null,
            this.parserConfig = Do,
            this.rootParser = null
        }
        return lo(e, [{
            key: "parse",
            value: function(e) {
                new (0,
                this.parserConfig[e.type])({
                    object: e,
                    manager: this
                }).parse()
            }
        }, {
            key: "clear",
            value: function() {
                this.rootParser && this.rootParser.clear(),
                this.rootParser = null,
                this.objectManager = null,
                this.parserConfig = null
            }
        }]),
        e
    }()
      , ko = new (function() {
        function e(t) {
            ao(this, e),
            this._versionMap = {
                0: {
                    0: Eo,
                    3: Ao
                },
                1: {
                    0: Eo,
                    3: Ao
                }
            },
            this._smallVersionLibs = [[0, 3], [0, 3]],
            this._bigVersions = [0, 1]
        }
        return lo(e, [{
            key: "getCombinerManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1]
                      , r = i[i.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][r]
                }
                if (null == t) {
                    var n = this._smallVersionLibs[e]
                      , o = n[n.length - 1];
                    return new this._versionMap[e][o]
                }
                var s = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1])) {
                    var a = s[s.length - 1];
                    return t > a || !this._versionMap[e][t] ? new this._versionMap[e][a] : new this._versionMap[e][t]
                }
                console.error("ubuildercombiner not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , Oo = function() {
        function e(t) {
            ao(this, e),
            this.objectManager = t.objectManager
        }
        return lo(e, [{
            key: "parse",
            value: function(e) {
                var t = ko.getCombinerManager(e.bigVersion, e.smallVersion);
                return t.objectManager = this.objectManager,
                t.parse(e)
            }
        }, {
            key: "getCombineManager",
            value: function(e, t) {
                var i = ko.getCombinerManager(e, t);
                return i.objectManager = this.objectManager,
                i
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }()
      , Bo = function() {
        function e(t) {
            p(this, e),
            this.sceneJson = null,
            this.world = null;
            var i = new ai
              , r = new Fi;
            i.meshBuilderManager = Qn.create(),
            i.calculaterManager = on.create(),
            r.modelCombineBuilder = so,
            this.loader = new We({
                objectManager: i,
                resourceManager: r,
                defaultSetting: Mt,
                defaultResource: jt
            }),
            this.dynamicBuildManager = new st(this),
            this.combineManager = new Oo({
                objectManager: i
            }),
            this.resourceManager = r,
            this.enableRequestWorld = !0
        }
        return d(e, [{
            key: "startToDownloadRequestResources",
            value: function(e) {
                this.resourceManager.startToDownloadRequestResources(e)
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e) {
                this.resourceManager.addResourceDownloadRequest(e)
            }
        }, {
            key: "disposeModels",
            value: function() {
                this.resourceManager.disposeModels()
            }
        }, {
            key: "disposeTextures",
            value: function() {
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "delayLoad",
            value: function(e) {
                var t = this;
                return new Promise((function(i, r) {
                    t.loadSceneJson(e).then((function() {
                        t.world = t.loader.load({
                            json: t.sceneJson,
                            version: 0
                        }),
                        t.combineParser.parseWorld(t.world),
                        g.compatibilityProcessWorld(t.world),
                        t.dynamicBuildManager.world = t.world,
                        t.dynamicBuildManager.requestToBuild(t.world.id),
                        t.dynamicBuildManager.build((function(e) {
                            1 === e && i(t.world)
                        }
                        ))
                    }
                    ))
                }
                ))
            }
        }, {
            key: "loadResources",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    e.resourceManager.downloadResourcesWithQueue((function() {
                        t(e.world)
                    }
                    ))
                }
                ))
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                this.dynamicBuildManager.requestToBuild(e)
            }
        }, {
            key: "startToBuild",
            value: function(e) {
                return this.dynamicBuildManager.build(e)
            }
        }, {
            key: "load",
            value: function(e) {
                var t = this;
                return new Promise((function(i, r) {
                    t.loadSceneJson(e).then((function() {
                        t.world = t.loader.load({
                            json: t.sceneJson,
                            version: 2
                        }),
                        t.combineManager.parse(t.world),
                        t.dynamicBuildManager.world = t.world,
                        t.enableRequestWorld && t.requestToBuild(t.world.id),
                        i(t.world)
                    }
                    ))
                }
                ))
            }
        }, {
            key: "loadSceneJson",
            value: function(e) {
                var t = this;
                return new Promise((function(i, r) {
                    if (e.jsonData)
                        t.sceneJson = e.jsonData,
                        i(t.sceneJson);
                    else if (e.url) {
                        (new THREE.FileLoader).load(e.url, (function(e) {
                            t.sceneJson = JSON.parse(e),
                            i()
                        }
                        ), (function() {}
                        ), (function(e) {
                            r("can not load " + t.sceneURL)
                        }
                        ))
                    } else
                        r("load scene json error")
                }
                ))
            }
        }, {
            key: "downloadResourceProgress",
            get: function() {
                return this.resourceManager.downloadResProgess
            }
        }]),
        e
    }()
      , Fo = function() {
        function e(t) {
            p(this, e),
            this.sceneJson = null,
            this.world = null;
            var i = new ai
              , r = new Fi;
            i.meshBuilderManager = Qn.create(),
            i.calculaterManager = on.create(),
            r.modelCombineBuilder = so,
            this.dynamicBuildManager = new st(this),
            this.loader = new We({
                objectManager: i,
                resourceManager: r,
                defaultSetting: Mt,
                defaultResource: jt
            }),
            this.combineManager = new Oo({
                objectManager: i
            }),
            this.resourceManager = r,
            this.enableRequestWorld = !0
        }
        return d(e, [{
            key: "startToDownloadRequestResources",
            value: function(e) {
                this.resourceManager.startToDownloadRequestResources(e)
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e) {
                this.resourceManager.addResourceDownloadRequest(e)
            }
        }, {
            key: "disposeModels",
            value: function() {
                this.resourceManager.disposeModels()
            }
        }, {
            key: "disposeTextures",
            value: function() {
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "loadSceneJson",
            value: function(e) {
                var t = this;
                return new Promise((function(i, r) {
                    if (e.json)
                        t.sceneJson = e.json,
                        i(t.sceneJson);
                    else if (e.url) {
                        (new THREE.FileLoader).load(e.url, (function(e) {
                            t.sceneJson = JSON.parse(e),
                            i()
                        }
                        ), (function() {}
                        ), (function(e) {
                            r("can not load " + t.sceneURL)
                        }
                        ))
                    } else
                        r("load scene json error")
                }
                ))
            }
        }, {
            key: "loadResources",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    e.dynamicBuildManager.build((function(i) {
                        1 === i && t(e.world)
                    }
                    ))
                }
                ))
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                this.dynamicBuildManager.requestToBuild(e)
            }
        }, {
            key: "startToBuild",
            value: function(e) {
                return this.dynamicBuildManager.build(e)
            }
        }, {
            key: "load",
            value: function(e) {
                var t = this;
                return new Promise((function(i, r) {
                    t.loadSceneJson(e).then((function() {
                        t.world = t.loader.load({
                            json: t.sceneJson,
                            version: 2
                        }),
                        t.combineManager.parse(t.world),
                        t.dynamicBuildManager.world = t.world,
                        t.enableRequestWorld && t.requestToBuild(t.world.id),
                        i(t.world)
                    }
                    ))
                }
                ))
            }
        }, {
            key: "downloadResourceProgress",
            get: function() {
                return this.resourceManager.downloadResProgess
            }
        }]),
        e
    }()
      , Lo = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Io = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , No = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , Ho = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , Uo = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , zo = function() {
        function e(t) {
            Lo(this, e),
            this.object = t.object,
            this.buildCompleteCallbacks = [],
            this.buildCompleteCallbackParams = [],
            this.mesh = null,
            this._boxMesh = null
        }
        return Io(e, [{
            key: "build",
            value: function() {
                this._createMesh()
            }
        }, {
            key: "_createMesh",
            value: function() {
                if (this.object.resource) {
                    var e = this.object.resource;
                    e.isTestModel ? this.object.mesh = e.model.clone() : this.object.nodeName ? this.createMeshByNode() : this.createMeshByModelClone()
                } else
                    null === this.object.mesh && (this.object.mesh = new THREE.Object3D)
            }
        }, {
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                if (e) {
                    if (e = e.clone(),
                    this._setTransformation(this.object, e),
                    this.object.children.length > 0)
                        for (var t = e.children.length - 1; t > -1; t--) {
                            var i = e.children[t];
                            e.remove(i)
                        }
                    this.object.mesh = e
                } else
                    console.warn("can not find node " + this.object.nodeName),
                    this.object.mesh = new THREE.Object3D
            }
        }, {
            key: "_setTransformation",
            value: function(e, t) {
                var i = t.position.toArray()
                  , r = t.scale.toArray()
                  , n = t.quaternion.toArray();
                if (!this._isArrayEqual(e.position, i))
                    if (0 === e.position[0] && 0 === e.position[1] && 0 === e.position[2])
                        this.object.position = i;
                    else {
                        var o = this.object.position;
                        t.position.set(o[0], o[1], o[2])
                    }
                if (!this._isArrayEqual(e.scale, r))
                    if (1 === e.scale[0] && 1 === e.scale[1] && 1 === e.scale[2])
                        this.object.scale = r;
                    else {
                        var s = this.object.scale;
                        t.scale.set(s[0], s[1], s[2])
                    }
                this._isArrayEqual(e.rotation, n) || (0 === e.rotation[0] && 0 === e.rotation[1] && 0 === e.rotation[2] && 1 === e.rotation[3] ? this.object.rotation = n : t.quaternion.set(n[0], n[1], n[2], n[3]))
            }
        }, {
            key: "_isArrayEqual",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    var r = e[i]
                      , n = t[i];
                    if (void 0 === n)
                        return !1;
                    if (r !== n)
                        return !1
                }
                return !0
            }
        }, {
            key: "createMeshByModelClone",
            value: function() {
                var e = this.object.resource.model.clone()
                  , t = this.object.position
                  , i = this.object.scale
                  , r = this.object.rotation;
                e.position.set(t[0], t[1], t[2]),
                e.quaternion.set(r[0], r[1], r[2], r[3]),
                e.scale.set(i[0], i[1], i[2]),
                this.object.mesh = e,
                this.object.mesh.name = this.object.type + this.object.id
            }
        }, {
            key: "createBoxMesh",
            value: function() {
                if (null === this._boxMesh) {
                    var e = new THREE.BoxBufferGeometry(1,1,1)
                      , t = new THREE.MeshBasicMaterial
                      , i = new THREE.Mesh(e,t)
                      , r = this.object.size;
                    i.scale.set(this.object.size[0], this.object.size[1], this.object.size[2]),
                    i.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]),
                    i.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                    i.position.y = (this.object.position[1] + r[1]) / 2,
                    this._boxMesh = i
                }
                return this._boxMesh
            }
        }, {
            key: "notifyBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.buildCompleteCallbacks.length; e++) {
                    (0,
                    this.buildCompleteCallbacks[e])(this, this.buildCompleteCallbackParams[e])
                }
            }
        }, {
            key: "checkResourceReady",
            value: function() {
                if (this.object.resources) {
                    for (var e = 0; e < this.object.resources.length; e++) {
                        if (!this.object.resources[e].ready)
                            return !1
                    }
                    return !0
                }
                return !this.object.resource || !!this.object.resource.ready
            }
        }, {
            key: "initResource",
            value: function() {
                if (this.object.resources)
                    for (var e = 0; e < this.object.resources.length; e++) {
                        var t = this.object.resources[e];
                        this.requestResource(t)
                    }
                else
                    this.requestResource(this.object.resource)
            }
        }, {
            key: "requestResource",
            value: function(e) {
                e.ready || (e.isStartDownload || e.requestToDownload(),
                e.registerListener(this))
            }
        }, {
            key: "registerBuildCallbackListener",
            value: function(e, t) {
                this.buildCompleteCallbacks.push(e),
                this.buildCompleteCallbackParams.push(t)
            }
        }, {
            key: "resourceCallback",
            value: function(e) {
                this.build()
            }
        }, {
            key: "_dispose",
            value: function(e) {
                if (e instanceof THREE.Mesh) {
                    var t = e;
                    if (t) {
                        var i = t.material
                          , r = t.geometry;
                        t.isDestory = !0,
                        i && (this._disposeMaterial(i),
                        t.material = null),
                        r && (r.isDestory = !0,
                        r.dispose(),
                        t.geometry = null)
                    }
                }
                if (e)
                    for (var n = e.children, o = 0; o < n.length; o++) {
                        var s = n[o];
                        this._dispose(s)
                    }
            }
        }, {
            key: "_disposeMaterial",
            value: function(e) {
                if (e instanceof Array)
                    for (var t = 0; t < e.length; t++) {
                        var i = e[t];
                        this._disposeMaterial(i)
                    }
                else
                    e.isDestory = !0,
                    e.dispose()
            }
        }, {
            key: "clear",
            value: function(e) {
                e && (e.parent && e.parent.remove(e),
                this._dispose(e)),
                this.buildCompleteCallbacks = [],
                this.buildCompleteCallbackParams = [],
                this.mesh = null,
                this._boxMesh = null
            }
        }]),
        e
    }()
      , Vo = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.isRegisterObjectBuildCallback = !1,
            i
        }
        return Ho(t, e),
        Io(t, [{
            key: "_createMesh",
            value: function() {
                No(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this)
            }
        }, {
            key: "buildCallback",
            value: function(e, t) {
                var i = t.builder;
                i.applyRotationToChildren(),
                i.object.mesh.quaternion.set(0, 0, 0, 1);
                for (var r = 0; r < e.children.length; r++) {
                    e.children[r].meshBuilder.applyRotationToChildren()
                }
            }
        }]),
        t
    }(zo)
      , Wo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , Go = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , qo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "calAllRoomsBox2",
            value: function(e) {
                e.allRoomsBox2 || (e.allRoomsBox2 = this._calAllRoomsBox2(e))
            }
        }, {
            key: "_calAllRoomsBox2",
            value: function(e) {
                var t = new THREE.Box2
                  , i = e.typeToChildren.Room;
                if (i)
                    for (var r = 0; r < i.length; r++) {
                        var n = i[r];
                        this._addRoomToCalAllRoomsBox2(t, n)
                    }
                var o = e.typeToChildren.CombineFloor;
                if (o)
                    for (var s = 0; s < o.length; s++)
                        for (var a = o[s], l = 0; l < a.objects.length; l++) {
                            var u = a.objects[l];
                            this._addRoomToCalAllRoomsBox2(t, u.parent)
                        }
                return t
            }
        }, {
            key: "_addRoomToCalAllRoomsBox2",
            value: function(e, t) {
                for (var i = this._getFloorPosition(t), r = t.points, n = 0; n < r.length; n++) {
                    var o = new THREE.Vector2(r[n][0],r[n][2]);
                    o.x += i[0],
                    o.y += i[2],
                    e.expandByPoint(o)
                }
            }
        }, {
            key: "_getFloorPosition",
            value: function(e) {
                return e.position.slice()
            }
        }]),
        t
    }(zo)
      , Xo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(qo)
      , Jo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                e ? (e = e.clone(),
                this.object.position = e.position.toArray(),
                this.object.scale = e.scale.toArray(),
                this.object.rotation = e.quaternion.toArray(),
                this.object.mesh = e) : (console.warn("can not find node " + this.object.nodeName),
                this.object.mesh = new THREE.Object3D)
            }
        }, {
            key: "_createMesh",
            value: function() {
                No(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this);
                var e = new THREE.Object3D;
                e.name = "floorMax",
                e.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                e.scale.set(this.object.scale[0], this.object.scale[1], this.object.scale[2]),
                e.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]);
                var i = this.object.mesh;
                i.position.set(0, 0, 0),
                i.scale.set(1, 1, 1),
                i.quaternion.set(0, 0, 0, 1),
                e.add(i);
                var r = i.position.clone();
                r.applyQuaternion(e.quaternion),
                i.position.copy(r),
                i.quaternion.premultiply(e.quaternion),
                this.object.rotation = [0, 0, 0, 1],
                e.quaternion.set(0, 0, 0, 1),
                this.object.mesh = e,
                this.object.floor && (this.object.floor.mesh = i),
                this.object.roof && (this.object.roof.mesh = new THREE.Object3D),
                this.object.ceiling && (this.object.ceiling.mesh = new THREE.Object3D)
            }
        }]),
        t
    }(zo)
      , Yo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , Qo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , Zo = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , Ko = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , $o = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(zo)
      , es = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "_createMesh",
            value: function() {
                this.object.mesh = new THREE.Object3D
            }
        }]),
        t
    }(zo)
      , ts = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "_createMesh",
            value: function() {
                this.object.mesh = new THREE.Object3D
            }
        }]),
        t
    }(zo)
      , is = function() {
        function e(t) {
            Lo(this, e),
            this._map = {
                Empty: ts,
                Building: Vo,
                World: Wo,
                FloorPlan: qo,
                Outdoors: Xo,
                Room: Jo,
                Floor: Go,
                Placement: Yo,
                Facade: Ko,
                DoorOrWindow: $o,
                CombinePlacement: Qo,
                CombinePlacementByBatch: es,
                CombineModelWall: Zo
            }
        }
        return Io(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }, {
            key: "setClass",
            value: function(e, t) {
                this._map[e] = t
            }
        }]),
        e
    }()
      , rs = function() {
        function e(t) {
            Lo(this, e),
            this.builderTypeConfig = new is
        }
        return Io(e, [{
            key: "create",
            value: function(e) {
                var t = e.type
                  , i = this.builderTypeConfig.getClass(t);
                return i ? new i(e) : null
            }
        }, {
            key: "registerMeshBuilder",
            value: function(e, t) {
                this.builderTypeConfig.setClass(e, t)
            }
        }, {
            key: "containMeshBuilderClass",
            value: function(e) {
                return !!this.builderTypeConfig[e]
            }
        }, {
            key: "getMeshBuilderClass",
            value: function(e) {
                return this.builderTypeConfig.getClass(e)
            }
        }, {
            key: "getEmptyMeshBuilderClass",
            value: function() {
                return this.builderTypeConfig.getClass("Empty")
            }
        }]),
        e
    }()
      , ns = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                e ? (e = e.clone(),
                this.object.position = e.position.toArray(),
                this.object.scale = e.scale.toArray(),
                this.object.rotation = e.quaternion.toArray(),
                this.object.mesh = e) : (console.warn("can not find node " + this.object.nodeName),
                this.object.mesh = new THREE.Object3D)
            }
        }, {
            key: "_createMesh",
            value: function() {
                No(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this);
                var e = new THREE.Object3D;
                e.name = "floorMax",
                e.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                e.scale.set(this.object.scale[0], this.object.scale[1], this.object.scale[2]),
                e.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]);
                var i = this.object.mesh;
                i.position.set(0, 0, 0),
                i.scale.set(1, 1, 1),
                i.quaternion.set(0, 0, 0, 1),
                e.add(i);
                var r = i.position.clone();
                if (r.applyQuaternion(e.quaternion),
                i.position.copy(r),
                i.quaternion.premultiply(e.quaternion),
                this.object.rotation = [0, 0, 0, 1],
                e.quaternion.set(0, 0, 0, 1),
                this.object.mesh = e,
                this.object.floor.mesh = i,
                this.object.nodeName) {
                    var n = this.object.parent;
                    if ("Outdoors" !== n.type) {
                        var o = n.height;
                        this.object.roof.mesh = i.clone(),
                        this.object.ceiling.mesh = i.clone(),
                        this.object.roof.mesh.position.set(0, o, 0),
                        this.object.ceiling.mesh.position.set(0, o - .01, 0),
                        this._changeMaterialSide(this.object.roof.mesh, 0),
                        this._changeMaterialSide(this.object.ceiling.mesh, 1)
                    }
                } else
                    this.object.roof.mesh = new THREE.Object3D,
                    this.object.ceiling.mesh = new THREE.Object3D
            }
        }, {
            key: "_changeMaterialSide",
            value: function(e, t) {
                if (e.isMesh)
                    if (e.material instanceof Array) {
                        var i = e.material.map((function(e) {
                            return e.clone()
                        }
                        ));
                        i.forEach((function(e) {
                            return e.side = t
                        }
                        )),
                        e.material = i
                    } else
                        e.material = e.material.clone(),
                        e.material.side = t;
                for (var r = e.children, n = 0; n < r.length; n++) {
                    var o = r[n];
                    this._changeMaterialSide(o, t)
                }
            }
        }, {
            key: "_setRoomPoints",
            value: function(e) {
                if (e.isMesh) {
                    for (var t = [], i = e.geometry.attributes.position.array, r = 0; r < i.length; r += 3)
                        t.push(new THREE.Vector3(i[r],i[r + 1],i[r + 2]));
                    this.object.points = t
                }
                for (var n = 0; n < e.children.length; n++) {
                    var o = e.children[n];
                    this._setRoomPoints(o)
                }
            }
        }]),
        t
    }(zo)
      , os = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map.Room = ns,
            i
        }
        return Ho(t, e),
        Io(t, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        t
    }(is)
      , ss = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return i.builderTypeConfig = new os,
            i
        }
        return Ho(t, e),
        t
    }(rs)
      , as = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "_createMesh",
            value: function() {
                if (this.object.resource) {
                    var e = this.object.resource;
                    e.isTestModel ? this.object.mesh = e.model.clone() : this.object.nodeName && this.createMeshByNode()
                } else
                    null === this.object.mesh && (this.object.mesh = new THREE.Object3D)
            }
        }]),
        t
    }(zo)
      , ls = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map.CombinePlacement = as,
            i
        }
        return Ho(t, e),
        t
    }(os)
      , us = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return i.builderTypeConfig = new ls,
            i
        }
        return Ho(t, e),
        t
    }(ss)
      , cs = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "_createMesh",
            value: function() {
                if (this.object.resource) {
                    var e = this.object.resource;
                    e.isTestModel ? this.object.mesh = e.model.clone() : this.object.nodeName && this.createMeshByNode()
                } else
                    null === this.object.mesh && (this.object.mesh = new THREE.Object3D)
            }
        }]),
        t
    }(zo)
      , hs = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(cs)
      , ps = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        t
    }(cs)
      , ds = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map.CombineFloor = cs,
            i._map.CombineRoof = ps,
            i._map.CombineCeiling = hs,
            i
        }
        return Ho(t, e),
        t
    }(ls)
      , fs = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return i.builderTypeConfig = new ds,
            i
        }
        return Ho(t, e),
        t
    }(us)
      , ms = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                e ? (e = e.clone(),
                this.object.position = e.position.toArray(),
                this.object.scale = e.scale.toArray(),
                this.object.rotation = e.quaternion.toArray(),
                this.object.mesh = e) : (console.warn("can not find node " + this.object.nodeName),
                this.object.mesh = new THREE.Object3D)
            }
        }, {
            key: "_createMesh",
            value: function() {
                No(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this);
                var e = new THREE.Object3D;
                e.name = "floorMax",
                e.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                e.scale.set(this.object.scale[0], this.object.scale[1], this.object.scale[2]),
                e.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]);
                var i = this.object.mesh;
                i.position.set(0, 0, 0),
                i.scale.set(1, 1, 1),
                i.quaternion.set(0, 0, 0, 1),
                e.add(i);
                var r = i.position.clone();
                r.applyQuaternion(e.quaternion),
                i.position.copy(r),
                i.quaternion.premultiply(e.quaternion),
                this.object.rotation = [0, 0, 0, 1],
                e.quaternion.set(0, 0, 0, 1),
                this.object.mesh = e,
                this.object.floor.mesh = i,
                "Outdoors" !== this.object.parent.type && (this.object.roof.mesh = new THREE.Object3D,
                this.object.ceiling.mesh = new THREE.Object3D)
            }
        }, {
            key: "_changeMaterialSide",
            value: function(e, t) {
                if (e.isMesh)
                    if (e.material instanceof Array) {
                        var i = e.material.map((function(e) {
                            return e.clone()
                        }
                        ));
                        i.forEach((function(e) {
                            return e.side = t
                        }
                        )),
                        e.material = i
                    } else
                        e.material = e.material.clone(),
                        e.material.side = t;
                for (var r = e.children, n = 0; n < r.length; n++) {
                    var o = r[n];
                    this._changeMaterialSide(o, t)
                }
            }
        }, {
            key: "_setRoomPoints",
            value: function(e) {
                if (e.isMesh) {
                    for (var t = [], i = e.geometry.attributes.position.array, r = 0; r < i.length; r += 3)
                        t.push(new THREE.Vector3(i[r],i[r + 1],i[r + 2]));
                    this.object.points = t
                }
                for (var n = 0; n < e.children.length; n++) {
                    var o = e.children[n];
                    this._setRoomPoints(o)
                }
            }
        }]),
        t
    }(zo)
      , gs = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map.Room = ms,
            i
        }
        return Ho(t, e),
        t
    }(ds)
      , vs = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return i.builderTypeConfig = new gs,
            i
        }
        return Ho(t, e),
        t
    }(fs)
      , ys = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "_setTransformation",
            value: function(e, i) {
                if ("Max2TjsResource_RotationDownBottom" !== e.resource.type)
                    No(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_setTransformation", this).call(this, e, i);
                else {
                    var r = i.position.toArray()
                      , n = i.scale.toArray()
                      , o = i.quaternion.toArray();
                    this.object.position = r,
                    this.object.scale = n,
                    this.object.rotation = o
                }
            }
        }]),
        t
    }(Ko)
      , bs = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                if (e) {
                    e = e.clone(),
                    this._setTransformation(this.object, e);
                    var t = {};
                    if (this.object.children.forEach((function(e) {
                        e.nodeName && (t[e.nodeName] = e)
                    }
                    )),
                    this.object.children.length > 0)
                        for (var i = e.children.length - 1; i > -1; i--) {
                            var r = e.children[i];
                            t[r.name] && e.remove(r)
                        }
                    this.object.mesh = e
                } else
                    console.warn("can not find node " + this.object.nodeName),
                    this.object.mesh = new THREE.Object3D
            }
        }, {
            key: "createMeshByModelClone",
            value: function() {
                var e = this.object.resource
                  , t = this._cloneNode(e.model)
                  , i = this.object.position
                  , r = this.object.scale
                  , n = this.object.rotation;
                t.position.set(i[0], i[1], i[2]),
                t.quaternion.set(n[0], n[1], n[2], n[3]),
                t.scale.set(r[0], r[1], r[2]),
                this.object.mesh = t,
                this.object.mesh.name = this.object.type + this.object.id
            }
        }, {
            key: "_setTransformation",
            value: function(e, i) {
                if ("Max2TjsResource_RotationDownBottom" !== e.resource.type)
                    No(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_setTransformation", this).call(this, e, i);
                else {
                    var r = i.position.toArray()
                      , n = i.scale.toArray()
                      , o = i.quaternion.toArray();
                    this.object.position = r,
                    this.object.scale = n,
                    this.object.rotation = o
                }
            }
        }, {
            key: "_cloneNode",
            value: function(e) {
                var t = e.clone()
                  , i = [];
                return t.traverse((function(e) {
                    e.isSkinnedMesh && i.push(e)
                }
                )),
                [{
                    node: e,
                    meshes: e.getSkinnedMeshes()
                }].forEach((function(r) {
                    for (var n = r.meshes, o = 0; o < n.length; o++) {
                        var s = n[o]
                          , a = n[o].skeleton
                          , l = t.getBones(e, n[o].skeleton)
                          , u = i[o]
                          , c = new THREE.Skeleton(l,a.boneInverses);
                        u.bind(c, s.bindMatrix)
                    }
                    i.splice(0, n.length)
                }
                )),
                t
            }
        }]),
        t
    }(Yo)
      , _s = function(e) {
        function t(e) {
            return Lo(this, t),
            Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ho(t, e),
        Io(t, [{
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                if (e) {
                    var t = e.clone(!1)
                      , i = this.object.children
                      , r = [];
                    i.forEach((function(e) {
                        e.nodeName && r.push(e.name)
                    }
                    )),
                    r.length > 0 ? e.children.forEach((function(e) {
                        -1 === r.indexOf(e.name) && t.add(e.clone())
                    }
                    )) : e.children.forEach((function(e) {
                        t.add(e.clone())
                    }
                    )),
                    this.object.position = e.position.toArray(),
                    this.object.scale = e.scale.toArray(),
                    this.object.rotation = e.quaternion.toArray(),
                    this.object.mesh = t
                } else
                    console.warn("can not find node " + this.object.nodeName),
                    this.object.mesh = new THREE.Object3D
            }
        }]),
        t
    }(ms)
      , xs = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map.Facade = ys,
            i._map.Placement = bs,
            i._map.Room = _s,
            i
        }
        return Ho(t, e),
        t
    }(gs)
      , Es = function(e) {
        function t(e) {
            Lo(this, t);
            var i = Uo(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return i.builderTypeConfig = new xs,
            i
        }
        return Ho(t, e),
        t
    }(vs)
      , ws = new (function() {
        function e(t) {
            Lo(this, e),
            this._versionMap = {
                0: {
                    0: rs,
                    1: ss,
                    2: us,
                    3: fs,
                    4: vs,
                    5: vs,
                    6: Es
                }
            },
            this._smallVersionLibs = [[0, 1, 2, 3, 4, 5, 6]],
            this._bigVersions = [0]
        }
        return Io(e, [{
            key: "getManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][i.length - 1]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return new this._versionMap[e][r.length - 1]
                }
                var n = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1]))
                    return t > n[n.length - 1] ? new this._versionMap[e][n.length - 1] : new this._versionMap[e][t];
                console.error("maxmeshbuilder not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , Ts = new (function() {
        function e(t) {
            Lo(this, e)
        }
        return Io(e, [{
            key: "createManager",
            value: function(e, t) {
                return ws.getManager(e, t)
            }
        }]),
        e
    }())
      , Ms = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , Cs = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Ss = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , js = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , Ps = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , Rs = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , Ds = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , As = function() {
        function e() {
            Cs(this, e)
        }
        return Ss(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = Ds.chars, i = Ds.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : Ms(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }]),
        e
    }()
      , ks = function() {
        function e(t) {
            Cs(this, e),
            this.creatorManager = t.creatorManager,
            this.id = null,
            this.name = null,
            this.userID = null,
            this.properties = null,
            this.jsonData = t.jsonData,
            this.objectParent = null,
            t.parent && (this.objectParent = t.parent),
            this.createType = null,
            this.resourceManager = t.resourceManager,
            this.objectManager = t.objectManager
        }
        return Ss(e, [{
            key: "create",
            value: function() {
                var e = this._getCreateParams();
                if (this.object = this.creatorManager.objectManager.create(e),
                this.jsonData.id && (this.object.id = this.jsonData.id),
                this.jsonData.userid && (this.object.userID = this.jsonData.userid),
                this.jsonData.name && (this.object.name = this.jsonData.name),
                this.object.loadMode = 0,
                this.jsonData.node ? (this.object.nodeName = this.jsonData.node,
                this.object.loadMode = 2) : void 0 !== this.jsonData.model && null !== this.jsonData.model && (this.object.loadMode = 1),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object.resource || (this.object.resource = this.resourceManager.emptyModelResource),
                this.object.jsonData = this.jsonData,
                e.parent && (this.object.parent = e.parent),
                this.jsonData.position) {
                    var t = this.jsonData.position;
                    this.object.position = t
                }
                if (this.jsonData.scale) {
                    var i = this.jsonData.scale;
                    0 === i[0] && (i[0] = .01),
                    0 === i[1] && (i[1] = .01),
                    0 === i[2] && (i[2] = .01),
                    this.object.scale = i
                }
                if (this.jsonData.rotation) {
                    var r = this.jsonData.rotation;
                    this.object.rotation = r
                }
                if (this.jsonData.properties && (this.object.properties = this.jsonData.properties,
                this.object.lowerCaseProperties = this.convertPropertiesToLowerCase(this.jsonData.properties)),
                As.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                this.jsonData.caminfo) {
                    var n = this.jsonData.caminfo.eye
                      , o = this.jsonData.caminfo.target;
                    n[2] = -n[2],
                    o[2] = -o[2],
                    this.object.camInfo = {
                        eye: n,
                        target: o
                    }
                }
                if (this.jsonData.size) {
                    var s = this.jsonData.size;
                    this.object.size = s
                } else
                    this.object.size = [1, 1, 1];
                return this.object
            }
        }, {
            key: "convertPropertiesToLowerCase",
            value: function(e) {
                var t = {};
                for (var i in e)
                    t[i.toLowerCase()] = e[i].toLowerCase();
                return t
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                this.creatorManager.createObject(e)
            }
        }]),
        e
    }()
      , Os = 0
      , Bs = 1
      , Fs = 2
      , Ls = 3
      , Is = 6
      , Ns = 7
      , Hs = 8
      , Us = 9
      , zs = 10
      , Vs = 11
      , Ws = 12
      , Gs = 13
      , qs = 14
      , Xs = 15
      , Js = 16
      , Ys = 17
      , Qs = 18
      , Zs = 19
      , Ks = 21
      , $s = 22
      , ea = 23
      , ta = 24
      , ia = 25
      , ra = 26
      , na = 27
      , oa = 28
      , sa = 29
      , aa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                if (e.buildings && this._parseJsonDataChildren({
                    jsonData: e.buildings,
                    creatorType: Bs
                }),
                e.outdoors) {
                    var t = this._parseJsonDataChild({
                        jsonData: e.outdoors,
                        creatorType: zs
                    });
                    this.object.outdoors = t
                }
            }
        }]),
        t
    }(ks)
      , la = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                As.checkValueEmpty(this.jsonData.structshow) || (this.object.structShow = this.jsonData.structshow),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.facades && this._parseJsonDataChildren({
                    jsonData: e.facades,
                    creatorType: Vs
                }),
                e.facadegroups && this._parseJsonDataChildren({
                    jsonData: e.facadegroups,
                    creatorType: Ws
                }),
                e.plans && this._parseJsonDataChildren({
                    jsonData: e.plans,
                    creatorType: Fs
                })
            }
        }]),
        t
    }(ks)
      , ua = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                As.checkValueEmpty(this.jsonData.alwaysshowinsideobjs) || (this.object.alwaysShowInsideObjs = this.jsonData.alwaysshowinsideobjs),
                As.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.corners && this._parseCorners(e.corners),
                e.walls && this._parseWalls(e.walls),
                e.placements && this._parseJsonDataChildren({
                    jsonData: e.placements,
                    creatorType: Is
                }),
                e.combineplacements && this._parseJsonDataChildren({
                    jsonData: e.combineplacements,
                    creatorType: $s
                }),
                e.rooms && this._parseJsonDataChildren({
                    jsonData: e.rooms,
                    creatorType: Us
                }),
                e.groups && this._parseJsonDataChildren({
                    jsonData: e.groups,
                    creatorType: Ns
                }),
                e.curvelines && this._parseJsonDataChildren({
                    jsonData: e.curvelines,
                    creatorType: Gs
                }),
                e.routelines && this._parseJsonDataChildren({
                    jsonData: e.routelines,
                    creatorType: Qs
                }),
                e.leakwaterlines && this._parseJsonDataChildren({
                    jsonData: e.leakwaterlines,
                    creatorType: qs
                }),
                e.arrowlines && this._parseJsonDataChildren({
                    jsonData: e.arrowlines,
                    creatorType: Xs
                }),
                e.arrowdatalines && this._parseJsonDataChildren({
                    jsonData: e.arrowdatalines,
                    creatorType: Js
                }),
                e.pipelines && this._parseJsonDataChildren({
                    jsonData: e.pipelines,
                    creatorType: Ys
                }),
                e.videoprobes && this._parseJsonDataChildren({
                    jsonData: e.videoprobes,
                    creatorType: Zs
                }),
                e.grounds && this._parseJsonDataChildren({
                    jsonData: e.grounds,
                    creatorType: Ks
                }),
                e.doororwindows && this._parseDoorOrWindows(e.doororwindows)
            }
        }, {
            key: "_parseCorners",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = i[0]
                      , n = i[1]
                      , o = -i[2];
                    this.object.existsCorner(r, n, o) ? console.error("repeat corner") : this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Ls
                    })
                }
            }
        }, {
            key: "_parseWalls",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t];
                    this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: ea
                    })
                }
            }
        }, {
            key: "_parseDoorOrWindows",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    var r = e[i];
                    this._parseJsonDataChild({
                        jsonData: r,
                        attachWall: t,
                        creatorType: Hs
                    })
                }
            }
        }]),
        t
    }(ks)
      , ca = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ModelWall",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                As.checkValueEmpty(this.jsonData.model) || (this.object.resource = this.resourceManager.models[this.jsonData.model]),
                this.object
            }
        }]),
        t
    }(ks)
      , ha = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "StraightManualWall",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }]),
        t
    }(ks)
      , pa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Placement",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                if (js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                As.checkValueEmpty(this.jsonData.texture) || (this.object.customTextureResource = this.resourceManager.textures[this.jsonData.texture]),
                this.jsonData.color) {
                    var e = this.jsonData.color;
                    this.object.customColor = e,
                    4 === e.length && (this.object.opacity = e[3])
                }
                return As.checkValueEmpty(this.jsonData.rendermode) || (this.object.renderMode = this.jsonData.rendermode),
                this.jsonData.animinfo && (this.object.isPlayAnim = this.jsonData.animinfo.isplay,
                this.object.animClip = this.jsonData.animinfo.clip),
                As.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(ks)
      , da = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementGroup",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.jsonData.placements && this._parseJsonDataChildren({
                    jsonData: this.jsonData.placements,
                    creatorType: Is
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Ns
                }),
                this.jsonData.videoprobes && this._parseJsonDataChildren({
                    jsonData: this.jsonData.videoprobes,
                    creatorType: Zs
                }),
                As.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(ks)
      , fa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "DoorOrWindow",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                if (js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                As.checkValueEmpty(this.jsonData.suspendpercent) || (this.object.suspendPercent = this.jsonData.suspendpercent),
                As.checkValueEmpty(this.jsonData.isopen) || (this.object.isOpen = this.jsonData.isopen),
                As.checkValueEmpty(this.jsonData.diridx) || (this.object.openDirIndex = this.jsonData.diridx),
                !As.checkValueEmpty(this.jsonData.iswindow)) {
                    var e = this.jsonData.iswindow;
                    "string" == typeof e && (e = "false" !== e.toLocaleString()),
                    this.object.isWindow = e
                }
                return this.object
            }
        }]),
        t
    }(ks)
      , ma = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._createChildren(),
                this.object
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: ta
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: ia
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: ra
                }))
            }
        }]),
        t
    }(ks)
      , ga = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return Ps(t, e),
        t
    }(ua)
      , va = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Facade",
            i
        }
        return Ps(t, e),
        t
    }(pa)
      , ya = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FacadeGroup",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.jsonData.facades && this._parseJsonDataChildren({
                    jsonData: this.jsonData.facades,
                    creatorType: Vs
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Ws
                }),
                this.object
            }
        }]),
        t
    }(ks)
      , ba = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombinePlacement",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(ks)
      , _a = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineModelWall",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(ks)
      , xa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Floor",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(ks)
      , Ea = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Ceiling",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(ks)
      , wa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Roof",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(ks)
      , Ta = function() {
        function e(t) {
            Cs(this, e),
            this._map = {
                0: aa,
                1: la,
                2: ua,
                4: ca,
                5: ha,
                6: pa,
                7: da,
                8: fa,
                9: ma,
                10: ga,
                11: va,
                12: ya,
                22: ba,
                23: _a,
                24: xa,
                25: Ea,
                26: wa
            }
        }
        return Ss(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , Ma = function() {
        function e(t) {
            Cs(this, e),
            this.config = new Ta,
            this.objectManager = null
        }
        return Ss(e, [{
            key: "createObject",
            value: function(e) {
                var t = this.config.getClass(e.creatorType);
                e.objectManager = this.objectManager,
                e.creatorManager = this;
                var i = new t(e)
                  , r = i.create()
                  , n = !0;
                return void 0 !== e.enableCreateChildren && null !== e.enableCreateChildren && (n = e.enableCreateChildren),
                n && i.parseChildren(),
                r
            }
        }]),
        e
    }()
      , Ca = function() {
        function e(t) {
            Cs(this, e),
            this.manager = t,
            this.baseModelUrl = this.manager.baseModelUrl,
            this.baseTextureUrl = this.manager.baseTextureUrl
        }
        return Ss(e, [{
            key: "createResource",
            value: function(e) {
                var t = this.manager.create({
                    type: e
                });
                return t.manager = this.manager,
                t
            }
        }, {
            key: "loadTextures",
            value: function(e) {}
        }, {
            key: "_loadLocalCustomTextureResource",
            value: function(e) {
                var t = this.createResource("LocalCustomTextureResource");
                return t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadTextureResource",
            value: function(e) {
                var t = this.createResource("Resource");
                return this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadBaseTextureResourceData",
            value: function(e, t) {
                t.id = e.id,
                t.ext = e.ext,
                e.url && (t.url = e.url),
                t.baseUrl = this.baseTextureUrl,
                e.isDefault && (t.isDefault = e.isDefault)
            }
        }, {
            key: "loadModels",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    if ((t = this.createResource("Max2TjsResource")).baseUrl = this.baseModelUrl,
                    r.localurl) {
                        if (t.localUrl = r.localurl,
                        t.id = r.id,
                        t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                        r.title && (t.modelName = r.title),
                        t.modelID = r.id,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.color) {
                            var n = r.color;
                            t.color = new THREE.Color(n[0],n[1],n[2]),
                            4 === n.length && (t.opacity = n[3])
                        }
                    } else if (r.id) {
                        if (t.id = r.id,
                        t.modelID = r.id,
                        t.version = r.version,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.model && (t.modelID = r.model),
                        r.title && (t.modelName = r.title),
                        r.color) {
                            n = r.color;
                            t.color = new THREE.Color(n[0],n[1],n[2]),
                            4 === n.length && (t.opacity = n[3])
                        }
                        if (r.size) {
                            var o = r.size;
                            t.modelSize = new THREE.Vector3(o[0],o[1],o[2])
                        }
                        r.hasanimation && (t.hasAnim = r.hasanimation),
                        r.url && (t.url = r.url)
                    }
                    for (var s = 0; s < this.manager.ableToSupportFootAndHeadModelWalls.length; s++) {
                        var a = this.manager.ableToSupportFootAndHeadModelWalls[s];
                        if (t.id === a) {
                            t.isSupportHeadAndFootModelWall = !0;
                            break
                        }
                    }
                    this.manager.models.push(t)
                }
            }
        }, {
            key: "loadCustomModelResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t),
                e.localurl && (t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]))
            }
        }, {
            key: "loadCustomResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t)
            }
        }, {
            key: "loadBaseResourceData",
            value: function(e, t) {
                if (t.id = e.id,
                t.modelID = e.id,
                t.version = e.version,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]),
                e.rendermode && (t.renderMode = e.rendermode),
                e.model && (t.modelID = e.model),
                e.title && (t.modelName = e.title),
                e.color) {
                    var i = e.color;
                    t.color = new THREE.Color(i[0],i[1],i[2]),
                    4 === i.length && (t.opacity = i[3])
                }
                if (e.size) {
                    var r = e.size;
                    t.modelSize = new THREE.Vector3(r[0],r[1],r[2])
                }
                e.hasanimation && (t.hasAnim = e.hasanimation)
            }
        }]),
        e
    }()
      , Sa = function() {
        function e() {
            Cs(this, e),
            this.sceneJson = null,
            this.scale = 1,
            this.curFloorPlan = null,
            this.enableCombine = !0,
            this.world = null,
            this.resourceManager = null,
            this.defaultSetting = null,
            this.defaultResource = null,
            this.creatorManager = new Ma
        }
        return Ss(e, [{
            key: "setObjectTypeConfig",
            value: function(e) {
                objectManager.objectTypeConfig = e
            }
        }, {
            key: "setObjectManager",
            value: function(e) {
                this.creatorManager.objectManager = e
            }
        }, {
            key: "setResourceManager",
            value: function(e) {
                this.resourceManager = e
            }
        }, {
            key: "setDefaultSetting",
            value: function(e) {
                this.defaultSetting = e
            }
        }, {
            key: "setDefaultResource",
            value: function(e) {
                this.defaultResource = e
            }
        }, {
            key: "parseObjects",
            value: function(e) {
                return e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl && (this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl),
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }, {
            key: "getParentRelativeUrl",
            value: function(e) {
                for (var t = e.split("/"), i = "", r = 0; r < t.length - 1; r++) {
                    i += t[r] + "/"
                }
                return i
            }
        }, {
            key: "loadSceneJson",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    if (e.sceneJson)
                        t(e.sceneJson);
                    else if (e.sceneURL) {
                        (new THREE.FileLoader).load(e.sceneURL, (function(i) {
                            e.sceneJson = JSON.parse(i),
                            t()
                        }
                        ), (function() {}
                        ), (function(t) {
                            i("can not load " + e.sceneURL)
                        }
                        ))
                    } else
                        i("load scene json error")
                }
                ))
            }
        }, {
            key: "getResourceLoader",
            value: function() {
                var e = new Ca(this.resourceManager);
                return e.resourceManager = this.resourceManager,
                e
            }
        }, {
            key: "parseSceneJson",
            value: function() {
                this.parseResources(this.sceneJson, this.resourceManager),
                this.parseWorld(this.sceneJson)
            }
        }, {
            key: "parseResources",
            value: function(e, t) {
                var i = new Ca(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models)
            }
        }, {
            key: "parseWorld",
            value: function(e) {
                this.world = this.creatorManager.createObject({
                    jsonData: e,
                    resourceManager: this.resourceManager,
                    creatorType: Os
                })
            }
        }, {
            key: "getCreatorManager",
            value: function() {
                return this.creatorManager
            }
        }]),
        e
    }()
      , ja = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                As.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                this.object
            }
        }]),
        t
    }(ua)
      , Pa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map[Fs] = ja,
            i
        }
        return Ps(t, e),
        t
    }(Ta)
      , Ra = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.config = new Pa,
            i
        }
        return Ps(t, e),
        t
    }(Ma)
      , Da = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new Ra,
            i.creatorTypeConfig = new Pa,
            i
        }
        return Ps(t, e),
        t
    }(Sa)
      , Aa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineFloor",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object.position = [0, 0, 0],
                this.object.rotation = [0, 0, 0, 1],
                this.object
            }
        }]),
        t
    }(ks)
      , ka = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineCeiling",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object.position = [0, 0, 0],
                this.object.rotation = [0, 0, 0, 1],
                this.object
            }
        }]),
        t
    }(ks)
      , Oa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineRoof",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object.position = [0, 0, 0],
                this.object.rotation = [0, 0, 0, 1],
                this.object
            }
        }]),
        t
    }(ks)
      , Ba = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "create",
            value: function() {
                return js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.jsonData.combinefloors && this._parseJsonDataChildren({
                    jsonData: this.jsonData.combinefloors,
                    creatorType: na
                }),
                this.jsonData.combineroofs && this._parseJsonDataChildren({
                    jsonData: this.jsonData.combineroofs,
                    creatorType: sa
                }),
                this.jsonData.combineceilings && this._parseJsonDataChildren({
                    jsonData: this.jsonData.combineceilings,
                    creatorType: oa
                }),
                this.object
            }
        }]),
        t
    }(ja)
      , Fa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return Ps(t, e),
        t
    }(Ba)
      , La = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map[na] = Aa,
            i._map[oa] = ka,
            i._map[sa] = Oa,
            i._map[Fs] = Ba,
            i._map[zs] = Fa,
            i
        }
        return Ps(t, e),
        t
    }(Pa)
      , Ia = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.config = new La,
            i
        }
        return Ps(t, e),
        t
    }(Ra)
      , Na = function(e) {
        function t(e) {
            return Cs(this, t),
            Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ps(t, e),
        Ss(t, [{
            key: "loadModels",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this._createResourceObject(i);
                    if (r.baseUrl = this.baseModelUrl,
                    i.localurl) {
                        if (r.localUrl = i.localurl,
                        r.id = i.id,
                        r.localBaseUrl = this.manager.localCustomModelBaseUrl,
                        i.title && (r.modelName = i.title),
                        r.modelID = i.id,
                        null !== i.texture && void 0 !== i.texture && (r.customTexture = this.manager.textures[i.texture]),
                        i.rendermode && (r.renderMode = i.rendermode),
                        i.color) {
                            var n = i.color;
                            r.color = new THREE.Color(n[0],n[1],n[2]),
                            4 === n.length && (r.opacity = n[3])
                        }
                    } else if (i.id) {
                        if (r.id = i.id,
                        r.modelID = i.id,
                        r.version = i.version,
                        null !== i.texture && void 0 !== i.texture && (r.customTexture = this.manager.textures[i.texture]),
                        i.rendermode && (r.renderMode = i.rendermode),
                        i.model && (r.modelID = i.model),
                        i.title && (r.modelName = i.title),
                        i.color) {
                            n = i.color;
                            r.color = new THREE.Color(n[0],n[1],n[2]),
                            4 === n.length && (r.opacity = n[3])
                        }
                        if (i.size) {
                            var o = i.size;
                            r.modelSize = new THREE.Vector3(o[0],o[1],o[2])
                        }
                        i.hasanimation && (r.hasAnim = i.hasanimation),
                        i.url && (r.url = i.url)
                    }
                    for (var s = 0; s < this.manager.ableToSupportFootAndHeadModelWalls.length; s++) {
                        var a = this.manager.ableToSupportFootAndHeadModelWalls[s];
                        if (r.id === a) {
                            r.isSupportHeadAndFootModelWall = !0;
                            break
                        }
                    }
                    this.manager.models.push(r)
                }
            }
        }, {
            key: "_createResourceObject",
            value: function(e) {
                return e.keeprootrotation ? this.createResource("Max2TjsKeepRootRotationResource") : this.createResource("Max2TjsResource")
            }
        }]),
        t
    }(Ca)
      , Ha = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new Ia,
            i.creatorTypeConfig = new La,
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "parseResources",
            value: function(e, t) {
                var i = new Na(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models)
            }
        }]),
        t
    }(Da)
      , Ua = function(e) {
        function t(e) {
            return Cs(this, t),
            Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ps(t, e),
        Ss(t, [{
            key: "_createChildren",
            value: function() {
                js(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createChildren", this).call(this);
                var e = this.jsonData;
                e.placements && this._parseJsonDataChildren({
                    jsonData: e.placements,
                    creatorType: Is
                }),
                e.combineplacements && this._parseJsonDataChildren({
                    jsonData: e.combineplacements,
                    creatorType: $s
                }),
                e.groups && this._parseJsonDataChildren({
                    jsonData: e.groups,
                    creatorType: Ns
                }),
                e.videoprobes && this._parseJsonDataChildren({
                    jsonData: e.videoprobes,
                    creatorType: Zs
                })
            }
        }]),
        t
    }(ma)
      , za = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map[Us] = Ua,
            i
        }
        return Ps(t, e),
        t
    }(La)
      , Va = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.config = new za,
            i
        }
        return Ps(t, e),
        t
    }(Ia)
      , Wa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new Va,
            i.creatorTypeConfig = new za,
            i
        }
        return Ps(t, e),
        t
    }(Ha)
      , Ga = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Placement",
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.placements && this._parseJsonDataChildren({
                    jsonData: e.placements,
                    creatorType: Is
                })
            }
        }]),
        t
    }(pa)
      , qa = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map[Is] = Ga,
            i
        }
        return Ps(t, e),
        t
    }(za)
      , Xa = function(e) {
        function t(e) {
            return Cs(this, t),
            Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return Ps(t, e),
        Ss(t, [{
            key: "_createResourceObject",
            value: function(e) {
                return e.keeprootrotation ? this.createResource("Max2TjsKeepRootRotationResource") : this.createResource("Max2TjsResource_RotationDownBottom")
            }
        }]),
        t
    }(Na)
      , Ja = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.config = new qa,
            i
        }
        return Ps(t, e),
        t
    }(Va)
      , Ya = function(e) {
        function t(e) {
            Cs(this, t);
            var i = Rs(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new Ja,
            i.creatorTypeConfig = new qa,
            i
        }
        return Ps(t, e),
        Ss(t, [{
            key: "parseResources",
            value: function(e, t) {
                var i = new Xa(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models)
            }
        }]),
        t
    }(Wa)
      , Qa = new (function() {
        function e(t) {
            Cs(this, e),
            this._versionMap = {
                0: {
                    0: Sa,
                    1: Da,
                    2: Da,
                    3: Ha,
                    4: Wa,
                    5: Wa,
                    6: Ya
                }
            },
            this._smallVersionLibs = [[0, 1, 3, 4, 5, 6]],
            this._bigVersions = [0]
        }
        return Ss(e, [{
            key: "getLoaderManager",
            value: function(e, t) {
                if (null == e) {
                    e = this._bigVersions[this._bigVersions.length - 1];
                    var i = this._smallVersionLibs[e];
                    return t = i[i.length - 1],
                    new this._versionMap[e][t]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return t = r[r.length - 1],
                    new this._versionMap[e][t]
                }
                var n = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1]))
                    return t > n[n.length - 1] ? new this._versionMap[e][n.length - 1] : new this._versionMap[e][t];
                console.error("maxLoader not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , Za = function() {
        function e(t) {
            Cs(this, e),
            this.resourceManager = t.resourceManager,
            this.defaultSetting = t.defaultSetting,
            this.defaultResource = t.defaultResource,
            this.objectManager = t.objectManager
        }
        return Ss(e, [{
            key: "load",
            value: function(e) {
                return this.getLoaderManager(e.bigVersion, e.smallVersion).parseObjects(e)
            }
        }, {
            key: "getLoaderManager",
            value: function(e, t) {
                var i = Qa.getLoaderManager(e, t);
                return i.setDefaultSetting(this.defaultSetting),
                i.setDefaultResource(this.defaultResource),
                i.setResourceManager(this.resourceManager),
                i.setObjectManager(this.objectManager),
                i
            }
        }]),
        e
    }();
    Mt.enableCombinePlacementsByRoom = !1,
    Mt.enableCombinePlacementToBuildMesh = !0;
    var Ka = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , $a = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , el = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , tl = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , il = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , rl = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , nl = function() {
        function e(t) {
            $a(this, e),
            this._initParams(),
            this.object = t.object,
            this.manager = t.manager
        }
        return el(e, [{
            key: "_initParams",
            value: function() {
                this.object = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children, t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.manager.parserConfig.getParser(i.type);
                    if (r)
                        new r({
                            object: i,
                            manager: this.manager
                        }).parse()
                }
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , ol = function(e) {
        function t(e) {
            return $a(this, t),
            rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return il(t, e),
        t
    }(nl)
      , sl = function(e) {
        function t(e) {
            return $a(this, t),
            rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return il(t, e),
        t
    }(nl)
      , al = function() {
        function e(t) {
            $a(this, e),
            this._initParams(),
            this.manager = t.manager,
            this.parent = null
        }
        return el(e, [{
            key: "_initParams",
            value: function() {
                this.parent = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {}
        }, {
            key: "isNullOrUndefined",
            value: function(e) {
                return null == e
            }
        }]),
        e
    }()
      , ll = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combineObjectMaps = {},
            i._combineObjectClass = "BatchCombinePlacement",
            i
        }
        return il(t, e),
        el(t, [{
            key: "_initParams",
            value: function() {
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combineObjectMaps = null,
                this._CombineObjectClass = null
            }
        }, {
            key: "parse",
            value: function(e) {
                if (e.type === this.manager.objectManager.ClassName.CombinePlacement && this.isObjectShouldCombine(e)) {
                    this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource));
                    var t = this.combineObjectMaps[e.resource.id];
                    this._addPropertiesToCombinePlacement(e.properties, t),
                    this.combineObjectMaps[e.resource.id].addObject(e),
                    e.parent = null
                }
            }
        }, {
            key: "_addPropertiesToCombinePlacement",
            value: function(e, t) {
                for (var i in t.properties || (t.properties = {}),
                e)
                    t.properties[i] = e[i]
            }
        }, {
            key: "createCombineObject",
            value: function(e) {
                var t = this.manager.objectManager.create({
                    type: this._combineObjectClass
                });
                return t.resource = e,
                t.parent = this.parent,
                t
            }
        }, {
            key: "isObjectShouldCombine",
            value: function(e) {
                return !!this.isNullOrUndefined(e.nodeName)
            }
        }]),
        t
    }(al)
      , ul = {
        WallCorner: al,
        CombinePlacement: ll,
        Placement: function(e) {
            function t(e) {
                $a(this, t);
                var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                return i.combineObjectMaps = {},
                i._combineObjectClass = "BatchPlacement",
                i
            }
            return il(t, e),
            el(t, [{
                key: "_initParams",
                value: function() {
                    tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                    this.combineObjectMaps = null,
                    this._CombineObjectClass = null
                }
            }, {
                key: "parse",
                value: function(e) {
                    if (e.type === this.manager.objectManager.ClassName.Placement && this.isObjectShouldCombine(e)) {
                        this.combineObjectMaps[e.resource.id] || (this.combineObjectMaps[e.resource.id] = this.createCombineObject(e.resource));
                        var t = this.combineObjectMaps[e.resource.id];
                        this._addPropertiesToCombinePlacement(e.properties, t),
                        this.combineObjectMaps[e.resource.id].addObject(e),
                        e.parent = null
                    }
                }
            }, {
                key: "_addPropertiesToCombinePlacement",
                value: function(e, t) {
                    for (var i in t.properties || (t.properties = {}),
                    e)
                        t.properties[i] = e[i]
                }
            }, {
                key: "createCombineObject",
                value: function(e) {
                    var t = this.manager.objectManager.create({
                        type: this._combineObjectClass
                    });
                    return t.resource = e,
                    t.parent = this.parent,
                    t
                }
            }, {
                key: "isObjectShouldCombine",
                value: function(e) {
                    return !!this.isNullOrUndefined(e.nodeName)
                }
            }]),
            t
        }(al)
    }
      , cl = {
        WallCorner: al,
        CombinePlacement: ll
    }
      , hl = new (function() {
        function e(t) {
            $a(this, e),
            this.enableBatchPlacement = !0
        }
        return el(e, [{
            key: "getCombiner",
            value: function(e) {
                return this.enableBatchPlacement ? ul[e] : cl[e]
            }
        }]),
        e
    }())
      , pl = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combiners = {},
            i
        }
        return il(t, e),
        el(t, [{
            key: "_initParams",
            value: function() {
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combiners = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children.slice(), t = 0; t < e.length; t++) {
                    var i = e[t];
                    this.initCombiner(i)
                }
                this.removeCorners()
            }
        }, {
            key: "initCombiner",
            value: function(e) {
                if (!this.combiners[e.type]) {
                    var t = hl.getCombiner(e.type);
                    if (t) {
                        var i = new t({
                            manager: this.manager
                        });
                        i.parent = this.object,
                        this.combiners[e.type] = i
                    }
                }
                this.combiners[e.type] && this.combiners[e.type].parse(e)
            }
        }, {
            key: "removeCorners",
            value: function() {
                var e = this.object.typeToChildren.WallCorner;
                if (e) {
                    e = e.slice();
                    for (var t = 0; t < e.length; t++) {
                        e[t].parent = null
                    }
                }
            }
        }, {
            key: "clear",
            value: function() {
                for (var e in this.combiners)
                    this.combiners[e].clear();
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(nl)
      , dl = function(e) {
        function t(e) {
            return $a(this, t),
            rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return il(t, e),
        t
    }(pl)
      , fl = function() {
        function e() {
            $a(this, e),
            this._map = {
                World: ol,
                Building: sl,
                FloorPlan: pl,
                Outdoors: dl
            }
        }
        return el(e, [{
            key: "getParser",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , ml = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            var e, t = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""), i = new Array(36), r = 0;
            return function() {
                for (var n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }(),
        clamp: function(e, t, i) {
            return Math.max(t, Math.min(i, e))
        },
        euclideanModulo: function(e, t) {
            return (e % t + t) % t
        },
        mapLinear: function(e, t, i, r, n) {
            return r + (e - t) * (n - r) / (i - t)
        },
        lerp: function(e, t, i) {
            return (1 - i) * e + i * t
        },
        smoothstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * (3 - 2 * e)
        },
        smootherstep: function(e, t, i) {
            return e <= t ? 0 : e >= i ? 1 : (e = (e - t) / (i - t)) * e * e * (e * (6 * e - 15) + 10)
        },
        randInt: function(e, t) {
            return e + Math.floor(Math.random() * (t - e + 1))
        },
        randFloat: function(e, t) {
            return e + Math.random() * (t - e)
        },
        randFloatSpread: function(e) {
            return e * (.5 - Math.random())
        },
        degToRad: function(e) {
            return e * ml.DEG2RAD
        },
        radToDeg: function(e) {
            return e * ml.RAD2DEG
        },
        isPowerOfTwo: function(e) {
            return 0 == (e & e - 1) && 0 !== e
        },
        nearestPowerOfTwo: function(e) {
            return Math.pow(2, Math.round(Math.log(e) / Math.LN2))
        },
        nextPowerOfTwo: function(e) {
            return e--,
            e |= e >> 1,
            e |= e >> 2,
            e |= e >> 4,
            e |= e >> 8,
            e |= e >> 16,
            ++e
        }
    }
      , gl = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , vl = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , yl = function() {
        function e(t, i, r, n) {
            gl(this, e),
            this._x = t || 0,
            this._y = i || 0,
            this._z = r || 0,
            this._w = void 0 !== n ? n : 1
        }
        return vl(e, [{
            key: "slerp",
            value: function(e, t, i, r) {
                return i.copy(e).slerp(t, r)
            }
        }, {
            key: "slerpFlat",
            value: function(e, t, i, r, n, o, s) {
                var a = i[r + 0]
                  , l = i[r + 1]
                  , u = i[r + 2]
                  , c = i[r + 3]
                  , h = n[o + 0]
                  , p = n[o + 1]
                  , d = n[o + 2]
                  , f = n[o + 3];
                if (c !== f || a !== h || l !== p || u !== d) {
                    var m = 1 - s
                      , g = a * h + l * p + u * d + c * f
                      , v = g >= 0 ? 1 : -1
                      , y = 1 - g * g;
                    if (y > Number.EPSILON) {
                        var b = Math.sqrt(y)
                          , _ = Math.atan2(b, g * v);
                        m = Math.sin(m * _) / b,
                        s = Math.sin(s * _) / b
                    }
                    var x = s * v;
                    if (a = a * m + h * x,
                    l = l * m + p * x,
                    u = u * m + d * x,
                    c = c * m + f * x,
                    m === 1 - s) {
                        var E = 1 / Math.sqrt(a * a + l * l + u * u + c * c);
                        a *= E,
                        l *= E,
                        u *= E,
                        c *= E
                    }
                }
                e[t] = a,
                e[t + 1] = l,
                e[t + 2] = u,
                e[t + 3] = c
            }
        }, {
            key: "set",
            value: function(e, t, i, r) {
                return this._x = e,
                this._y = t,
                this._z = i,
                this._w = r,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this._x,this._y,this._z,this._w)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this._x = e.x,
                this._y = e.y,
                this._z = e.z,
                this._w = e.w,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromEuler",
            value: function(e, t) {
                if (!e || !e.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e.order
                  , s = Math.cos
                  , a = Math.sin
                  , l = s(i / 2)
                  , u = s(r / 2)
                  , c = s(n / 2)
                  , h = a(i / 2)
                  , p = a(r / 2)
                  , d = a(n / 2);
                return "XYZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "YXZ" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "ZXY" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c - h * p * d) : "ZYX" === o ? (this._x = h * u * c - l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c + h * p * d) : "YZX" === o ? (this._x = h * u * c + l * p * d,
                this._y = l * p * c + h * u * d,
                this._z = l * u * d - h * p * c,
                this._w = l * u * c - h * p * d) : "XZY" === o && (this._x = h * u * c - l * p * d,
                this._y = l * p * c - h * u * d,
                this._z = l * u * d + h * p * c,
                this._w = l * u * c + h * p * d),
                !1 !== t && this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromAxisAngle",
            value: function(e, t) {
                var i = t / 2
                  , r = Math.sin(i);
                return this._x = e.x * r,
                this._y = e.y * r,
                this._z = e.z * r,
                this._w = Math.cos(i),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromRotationMatrix",
            value: function(e) {
                var t, i = e.elements, r = i[0], n = i[4], o = i[8], s = i[1], a = i[5], l = i[9], u = i[2], c = i[6], h = i[10], p = r + a + h;
                return p > 0 ? (t = .5 / Math.sqrt(p + 1),
                this._w = .25 / t,
                this._x = (c - l) * t,
                this._y = (o - u) * t,
                this._z = (s - n) * t) : r > a && r > h ? (t = 2 * Math.sqrt(1 + r - a - h),
                this._w = (c - l) / t,
                this._x = .25 * t,
                this._y = (n + s) / t,
                this._z = (o + u) / t) : a > h ? (t = 2 * Math.sqrt(1 + a - r - h),
                this._w = (o - u) / t,
                this._x = (n + s) / t,
                this._y = .25 * t,
                this._z = (l + c) / t) : (t = 2 * Math.sqrt(1 + h - r - a),
                this._w = (s - n) / t,
                this._x = (o + u) / t,
                this._y = (l + c) / t,
                this._z = .25 * t),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "setFromUnitVectors",
            value: function(e, t) {
                var i, r = new bl;
                return void 0 === r && (r = new bl),
                (i = e.dot(t) + 1) < 1e-6 ? (i = 0,
                Math.abs(e.x) > Math.abs(e.z) ? r.set(-e.y, e.x, 0) : r.set(0, -e.z, e.y)) : r.crossVectors(e, t),
                this._x = r.x,
                this._y = r.y,
                this._z = r.z,
                this._w = i,
                this.normalize()
            }
        }, {
            key: "inverse",
            value: function() {
                return this.conjugate().normalize()
            }
        }, {
            key: "conjugate",
            value: function() {
                return this._x *= -1,
                this._y *= -1,
                this._z *= -1,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }
        }, {
            key: "normalize",
            value: function() {
                var e = this.length();
                return 0 === e ? (this._x = 0,
                this._y = 0,
                this._z = 0,
                this._w = 1) : (e = 1 / e,
                this._x = this._x * e,
                this._y = this._y * e,
                this._z = this._z * e,
                this._w = this._w * e),
                this.onChangeCallback(),
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e)
            }
        }, {
            key: "premultiply",
            value: function(e) {
                return this.multiplyQuaternions(e, this)
            }
        }, {
            key: "multiplyQuaternions",
            value: function(e, t) {
                var i = e._x
                  , r = e._y
                  , n = e._z
                  , o = e._w
                  , s = t._x
                  , a = t._y
                  , l = t._z
                  , u = t._w;
                return this._x = i * u + o * s + r * l - n * a,
                this._y = r * u + o * a + n * s - i * l,
                this._z = n * u + o * l + i * a - r * s,
                this._w = o * u - i * s - r * a - n * l,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "slerp",
            value: function(e, t) {
                if (0 === t)
                    return this;
                if (1 === t)
                    return this.copy(e);
                var i = this._x
                  , r = this._y
                  , n = this._z
                  , o = this._w
                  , s = o * e._w + i * e._x + r * e._y + n * e._z;
                if (s < 0 ? (this._w = -e._w,
                this._x = -e._x,
                this._y = -e._y,
                this._z = -e._z,
                s = -s) : this.copy(e),
                s >= 1)
                    return this._w = o,
                    this._x = i,
                    this._y = r,
                    this._z = n,
                    this;
                var a = Math.sqrt(1 - s * s);
                if (Math.abs(a) < .001)
                    return this._w = .5 * (o + this._w),
                    this._x = .5 * (i + this._x),
                    this._y = .5 * (r + this._y),
                    this._z = .5 * (n + this._z),
                    this;
                var l = Math.atan2(a, s)
                  , u = Math.sin((1 - t) * l) / a
                  , c = Math.sin(t * l) / a;
                return this._w = o * u + this._w * c,
                this._x = i * u + this._x * c,
                this._y = r * u + this._y * c,
                this._z = n * u + this._z * c,
                this.onChangeCallback(),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this._x = e[t],
                this._y = e[t + 1],
                this._z = e[t + 2],
                this._w = e[t + 3],
                this.onChangeCallback(),
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this._x,
                e[t + 1] = this._y,
                e[t + 2] = this._z,
                e[t + 3] = this._w,
                e
            }
        }, {
            key: "onChange",
            value: function(e) {
                return this.onChangeCallback = e,
                this
            }
        }, {
            key: "onChangeCallback",
            value: function() {}
        }, {
            key: "x",
            get: function() {
                return this._x
            },
            set: function(e) {
                this._x = e,
                this.onChangeCallback()
            }
        }, {
            key: "y",
            get: function() {
                return this._y
            },
            set: function(e) {
                this._y = e,
                this.onChangeCallback()
            }
        }, {
            key: "z",
            get: function() {
                return this._z
            },
            set: function(e) {
                this._z = e,
                this.onChangeCallback()
            }
        }, {
            key: "w",
            get: function() {
                return this._w
            },
            set: function(e) {
                this._w = e,
                this.onChangeCallback()
            }
        }]),
        e
    }()
      , bl = function() {
        function e(t, i, r) {
            gl(this, e),
            this.x = t || 0,
            this.y = i || 0,
            this.z = r || 0,
            this.isVector3 = !0
        }
        return vl(e, [{
            key: "set",
            value: function(e, t, i) {
                return this.x = e,
                this.y = t,
                this.z = i,
                this
            }
        }, {
            key: "setScalar",
            value: function(e) {
                return this.x = e,
                this.y = e,
                this.z = e,
                this
            }
        }, {
            key: "setX",
            value: function(e) {
                return this.x = e,
                this
            }
        }, {
            key: "setY",
            value: function(e) {
                return this.y = e,
                this
            }
        }, {
            key: "setZ",
            value: function(e) {
                return this.z = e,
                this
            }
        }, {
            key: "setComponent",
            value: function(e, t) {
                switch (e) {
                case 0:
                    this.x = t;
                    break;
                case 1:
                    this.y = t;
                    break;
                case 2:
                    this.z = t;
                    break;
                default:
                    throw new Error("index is out of range: " + e)
                }
                return this
            }
        }, {
            key: "getComponent",
            value: function(e) {
                switch (e) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + e)
                }
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this.x,this.y,this.z)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.x = e.x,
                this.y = e.y,
                this.z = e.z,
                this
            }
        }, {
            key: "add",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(e, t)) : (this.x += e.x,
                this.y += e.y,
                this.z += e.z,
                this)
            }
        }, {
            key: "addScalar",
            value: function(e) {
                return this.x += e,
                this.y += e,
                this.z += e,
                this
            }
        }, {
            key: "addVectors",
            value: function(e, t) {
                return this.x = e.x + t.x,
                this.y = e.y + t.y,
                this.z = e.z + t.z,
                this
            }
        }, {
            key: "addScaledVector",
            value: function(e, t) {
                return this.x += e.x * t,
                this.y += e.y * t,
                this.z += e.z * t,
                this
            }
        }, {
            key: "sub",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(e, t)) : (this.x -= e.x,
                this.y -= e.y,
                this.z -= e.z,
                this)
            }
        }, {
            key: "subScalar",
            value: function(e) {
                return this.x -= e,
                this.y -= e,
                this.z -= e,
                this
            }
        }, {
            key: "subVectors",
            value: function(e, t) {
                return this.x = e.x - t.x,
                this.y = e.y - t.y,
                this.z = e.z - t.z,
                this
            }
        }, {
            key: "multiply",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                this.multiplyVectors(e, t)) : (this.x *= e.x,
                this.y *= e.y,
                this.z *= e.z,
                this)
            }
        }, {
            key: "multiplyScalar",
            value: function(e) {
                return this.x *= e,
                this.y *= e,
                this.z *= e,
                this
            }
        }, {
            key: "multiplyVectors",
            value: function(e, t) {
                return this.x = e.x * t.x,
                this.y = e.y * t.y,
                this.z = e.z * t.z,
                this
            }
        }, {
            key: "applyEuler",
            value: function() {
                var e = new yl;
                return function(t) {
                    return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                    this.applyQuaternion(e.setFromEuler(t))
                }()
            }
        }, {
            key: "applyAxisAngle",
            value: function() {
                var e = new yl;
                return function(t, i) {
                    return this.applyQuaternion(e.setFromAxisAngle(t, i))
                }()
            }
        }, {
            key: "applyMatrix3",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[3] * i + n[6] * r,
                this.y = n[1] * t + n[4] * i + n[7] * r,
                this.z = n[2] * t + n[5] * i + n[8] * r,
                this
            }
        }, {
            key: "applyQuaternion",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.x
                  , o = e.y
                  , s = e.z
                  , a = e.w
                  , l = a * t + o * r - s * i
                  , u = a * i + s * t - n * r
                  , c = a * r + n * i - o * t
                  , h = -n * t - o * i - s * r;
                return this.x = l * a + h * -n + u * -s - c * -o,
                this.y = u * a + h * -o + c * -n - l * -s,
                this.z = c * a + h * -s + l * -o - u * -n,
                this
            }
        }, {
            key: "transformDirection",
            value: function(e) {
                var t = this.x
                  , i = this.y
                  , r = this.z
                  , n = e.elements;
                return this.x = n[0] * t + n[4] * i + n[8] * r,
                this.y = n[1] * t + n[5] * i + n[9] * r,
                this.z = n[2] * t + n[6] * i + n[10] * r,
                this.normalize()
            }
        }, {
            key: "divide",
            value: function(e) {
                return this.x /= e.x,
                this.y /= e.y,
                this.z /= e.z,
                this
            }
        }, {
            key: "divideScalar",
            value: function(e) {
                return this.multiplyScalar(1 / e)
            }
        }, {
            key: "min",
            value: function(e) {
                return this.x = Math.min(this.x, e.x),
                this.y = Math.min(this.y, e.y),
                this.z = Math.min(this.z, e.z),
                this
            }
        }, {
            key: "max",
            value: function(e) {
                return this.x = Math.max(this.x, e.x),
                this.y = Math.max(this.y, e.y),
                this.z = Math.max(this.z, e.z),
                this
            }
        }, {
            key: "clamp",
            value: function(e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)),
                this.y = Math.max(e.y, Math.min(t.y, this.y)),
                this.z = Math.max(e.z, Math.min(t.z, this.z)),
                this
            }
        }, {
            key: "clampScalar",
            value: function() {
                var t = new e
                  , i = new e;
                return function(e, r) {
                    return t.set(e, e, e),
                    i.set(r, r, r),
                    this.clamp(t, i)
                }()
            }
        }, {
            key: "clampLength",
            value: function(e, t) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)))
            }
        }, {
            key: "floor",
            value: function() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this
            }
        }, {
            key: "ceil",
            value: function() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this
            }
        }, {
            key: "round",
            value: function() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this
            }
        }, {
            key: "roundToZero",
            value: function() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this
            }
        }, {
            key: "negate",
            value: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this.x * e.x + this.y * e.y + this.z * e.z
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }
        }, {
            key: "lengthManhattan",
            value: function() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }
        }, {
            key: "normalize",
            value: function() {
                return this.divideScalar(this.length() || 1)
            }
        }, {
            key: "setLength",
            value: function(e) {
                return this.normalize().multiplyScalar(e)
            }
        }, {
            key: "lerp",
            value: function(e, t) {
                return this.x += (e.x - this.x) * t,
                this.y += (e.y - this.y) * t,
                this.z += (e.z - this.z) * t,
                this
            }
        }, {
            key: "lerpVectors",
            value: function(e, t, i) {
                return this.subVectors(t, e).multiplyScalar(i).add(e)
            }
        }, {
            key: "cross",
            value: function(e, t) {
                if (void 0 !== t)
                    return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                    this.crossVectors(e, t);
                var i = this.x
                  , r = this.y
                  , n = this.z;
                return this.x = r * e.z - n * e.y,
                this.y = n * e.x - i * e.z,
                this.z = i * e.y - r * e.x,
                this
            }
        }, {
            key: "crossVectors",
            value: function(e, t) {
                var i = e.x
                  , r = e.y
                  , n = e.z
                  , o = t.x
                  , s = t.y
                  , a = t.z;
                return this.x = r * a - n * s,
                this.y = n * o - i * a,
                this.z = i * s - r * o,
                this
            }
        }, {
            key: "projectOnVector",
            value: function(e) {
                var t = e.dot(this) / e.lengthSq();
                return this.copy(e).multiplyScalar(t)
            }
        }, {
            key: "projectOnPlane",
            value: function() {
                var t = new e;
                return function(e) {
                    return t.copy(this).projectOnVector(e),
                    this.sub(t)
                }
            }
        }, {
            key: "reflect",
            value: function() {
                var t = new e;
                return function(e) {
                    return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
                }()
            }
        }, {
            key: "angleTo",
            value: function(e) {
                var t = this.dot(e) / Math.sqrt(this.lengthSq() * e.lengthSq());
                return Math.acos(ml.clamp(t, -1, 1))
            }
        }, {
            key: "distanceTo",
            value: function(e) {
                return Math.sqrt(this.distanceToSquared(e))
            }
        }, {
            key: "distanceToSquared",
            value: function(e) {
                var t = this.x - e.x
                  , i = this.y - e.y
                  , r = this.z - e.z;
                return t * t + i * i + r * r
            }
        }, {
            key: "distanceToManhattan",
            value: function(e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z)
            }
        }, {
            key: "setFromSpherical",
            value: function(e) {
                var t = Math.sin(e.phi) * e.radius;
                return this.x = t * Math.sin(e.theta),
                this.y = Math.cos(e.phi) * e.radius,
                this.z = t * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromCylindrical",
            value: function(e) {
                return this.x = e.radius * Math.sin(e.theta),
                this.y = e.y,
                this.z = e.radius * Math.cos(e.theta),
                this
            }
        }, {
            key: "setFromMatrixPosition",
            value: function(e) {
                var t = e.elements;
                return this.x = t[12],
                this.y = t[13],
                this.z = t[14],
                this
            }
        }, {
            key: "setFromMatrixScale",
            value: function(e) {
                var t = this.setFromMatrixColumn(e, 0).length()
                  , i = this.setFromMatrixColumn(e, 1).length()
                  , r = this.setFromMatrixColumn(e, 2).length();
                return this.x = t,
                this.y = i,
                this.z = r,
                this
            }
        }, {
            key: "setFromMatrixColumn",
            value: function(e, t) {
                return this.fromArray(e.elements, 4 * t)
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.x === this.x && e.y === this.y && e.z === this.z
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this.x = e[t],
                this.y = e[t + 1],
                this.z = e[t + 2],
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this.x,
                e[t + 1] = this.y,
                e[t + 2] = this.z,
                e
            }
        }, {
            key: "fromBufferAttribute",
            value: function(e, t, i) {
                return void 0 !== i && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                this.x = e.getX(t),
                this.y = e.getY(t),
                this.z = e.getZ(t),
                this
            }
        }]),
        e
    }()
      , _l = function() {
        function e(t, i) {
            gl(this, e),
            this.isBox3 = !0,
            this.min = void 0 !== t ? t : new bl(1 / 0,1 / 0,1 / 0),
            this.max = void 0 !== i ? i : new bl(-1 / 0,-1 / 0,-1 / 0)
        }
        return vl(e, [{
            key: "set",
            value: function(e, t) {
                return this.min.copy(e),
                this.max.copy(t),
                this
            }
        }, {
            key: "setFromArray",
            value: function(e) {
                for (var t = 1 / 0, i = 1 / 0, r = 1 / 0, n = -1 / 0, o = -1 / 0, s = -1 / 0, a = 0, l = e.length; a < l; a += 3) {
                    var u = e[a]
                      , c = e[a + 1]
                      , h = e[a + 2];
                    u < t && (t = u),
                    c < i && (i = c),
                    h < r && (r = h),
                    u > n && (n = u),
                    c > o && (o = c),
                    h > s && (s = h)
                }
                return this.min.set(t, i, r),
                this.max.set(n, o, s),
                this
            }
        }, {
            key: "setFromBufferAttribute",
            value: function(e) {
                for (var t = 1 / 0, i = 1 / 0, r = 1 / 0, n = -1 / 0, o = -1 / 0, s = -1 / 0, a = 0, l = e.count; a < l; a++) {
                    var u = e.getX(a)
                      , c = e.getY(a)
                      , h = e.getZ(a);
                    u < t && (t = u),
                    c < i && (i = c),
                    h < r && (r = h),
                    u > n && (n = u),
                    c > o && (o = c),
                    h > s && (s = h)
                }
                return this.min.set(t, i, r),
                this.max.set(n, o, s),
                this
            }
        }, {
            key: "setFromPoints",
            value: function(e) {
                this.makeEmpty();
                for (var t = 0, i = e.length; t < i; t++)
                    this.expandByPoint(e[t]);
                return this
            }
        }, {
            key: "setFromCenterAndSize",
            value: function(e, t) {
                var i = (new bl).copy(t).multiplyScalar(.5);
                return this.min.copy(e).sub(i),
                this.max.copy(e).add(i),
                this
            }
        }, {
            key: "setFromObject",
            value: function(e) {
                return this.makeEmpty(),
                this.expandByObject(e)
            }
        }, {
            key: "clone",
            value: function() {
                return (new this.constructor).copy(this)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.min.copy(e.min),
                this.max.copy(e.max),
                this
            }
        }, {
            key: "makeEmpty",
            value: function() {
                return this.min.x = this.min.y = this.min.z = 1 / 0,
                this.max.x = this.max.y = this.max.z = -1 / 0,
                this
            }
        }, {
            key: "isEmpty",
            value: function() {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            }
        }, {
            key: "getCenter",
            value: function(e) {
                var t = e || new bl;
                return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
            }
        }, {
            key: "getSize",
            value: function(e) {
                var t = e || new bl;
                return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
            }
        }, {
            key: "expandByPoint",
            value: function(e) {
                return this.min.min(e),
                this.max.max(e),
                this
            }
        }, {
            key: "expandByVector",
            value: function(e) {
                return this.min.sub(e),
                this.max.add(e),
                this
            }
        }, {
            key: "expandByScalar",
            value: function(e) {
                return this.min.addScalar(-e),
                this.max.addScalar(e),
                this
            }
        }, {
            key: "expandByObject",
            value: function(e) {
                var t = new bl
                  , i = this;
                return e.updateMatrixWorld(!0),
                e.traverse((function(e) {
                    var r, n, o = e.geometry;
                    if (void 0 !== o)
                        if (o.isGeometry) {
                            var s = o.vertices;
                            for (r = 0,
                            n = s.length; r < n; r++)
                                t.copy(s[r]),
                                t.applyMatrix4(e.matrixWorld),
                                i.expandByPoint(t)
                        } else if (o.isBufferGeometry) {
                            var a = o.attributes.position;
                            if (void 0 !== a)
                                for (r = 0,
                                n = a.count; r < n; r++)
                                    t.fromBufferAttribute(a, r).applyMatrix4(e.matrixWorld),
                                    i.expandByPoint(t)
                        }
                }
                )),
                this
            }
        }, {
            key: "containsPoint",
            value: function(e) {
                return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z)
            }
        }, {
            key: "containsBox",
            value: function(e) {
                return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z
            }
        }, {
            key: "getParameter",
            value: function(e, t) {
                return (t || new bl).set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z))
            }
        }, {
            key: "intersectsBox",
            value: function(e) {
                return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z)
            }
        }, {
            key: "intersectsPlane",
            value: function(e) {
                var t, i;
                return e.normal.x > 0 ? (t = e.normal.x * this.min.x,
                i = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x,
                i = e.normal.x * this.min.x),
                e.normal.y > 0 ? (t += e.normal.y * this.min.y,
                i += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y,
                i += e.normal.y * this.min.y),
                e.normal.z > 0 ? (t += e.normal.z * this.min.z,
                i += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z,
                i += e.normal.z * this.min.z),
                t <= e.constant && i >= e.constant
            }
        }, {
            key: "clampPoint",
            value: function(e, t) {
                return (t || new bl).copy(e).clamp(this.min, this.max)
            }
        }, {
            key: "distanceToPoint",
            value: function(e) {
                return (new bl).copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }, {
            key: "intersect",
            value: function(e) {
                return this.min.max(e.min),
                this.max.min(e.max),
                this.isEmpty() && this.makeEmpty(),
                this
            }
        }, {
            key: "union",
            value: function(e) {
                return this.min.min(e.min),
                this.max.max(e.max),
                this
            }
        }, {
            key: "applyMatrix4",
            value: function(e) {
                var t = [new bl, new bl, new bl, new bl, new bl, new bl, new bl, new bl];
                return this.isEmpty() || (t[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
                t[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
                t[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
                t[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
                t[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
                t[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
                t[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
                t[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
                this.setFromPoints(t)),
                this
            }
        }, {
            key: "translate",
            value: function(e) {
                return this.min.add(e),
                this.max.add(e),
                this
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.min.equals(this.min) && e.max.equals(this.max)
            }
        }]),
        e
    }();
    function xl() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
        arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
    }
    Object.assign(xl.prototype, {
        isMatrix4: !0,
        set: function(e, t, i, r, n, o, s, a, l, u, c, h, p, d, f, m) {
            var g = this.elements;
            return g[0] = e,
            g[4] = t,
            g[8] = i,
            g[12] = r,
            g[1] = n,
            g[5] = o,
            g[9] = s,
            g[13] = a,
            g[2] = l,
            g[6] = u,
            g[10] = c,
            g[14] = h,
            g[3] = p,
            g[7] = d,
            g[11] = f,
            g[15] = m,
            this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        clone: function() {
            return (new xl).fromArray(this.elements)
        },
        copy: function(e) {
            var t = this.elements
              , i = e.elements;
            return t[0] = i[0],
            t[1] = i[1],
            t[2] = i[2],
            t[3] = i[3],
            t[4] = i[4],
            t[5] = i[5],
            t[6] = i[6],
            t[7] = i[7],
            t[8] = i[8],
            t[9] = i[9],
            t[10] = i[10],
            t[11] = i[11],
            t[12] = i[12],
            t[13] = i[13],
            t[14] = i[14],
            t[15] = i[15],
            this
        },
        copyPosition: function(e) {
            var t = this.elements
              , i = e.elements;
            return t[12] = i[12],
            t[13] = i[13],
            t[14] = i[14],
            this
        },
        extractBasis: function(e, t, i) {
            return e.setFromMatrixColumn(this, 0),
            t.setFromMatrixColumn(this, 1),
            i.setFromMatrixColumn(this, 2),
            this
        },
        makeBasis: function(e, t, i) {
            return this.set(e.x, t.x, i.x, 0, e.y, t.y, i.y, 0, e.z, t.z, i.z, 0, 0, 0, 0, 1),
            this
        },
        extractRotation: function() {
            var e = new bl;
            return function(t) {
                var i = this.elements
                  , r = t.elements
                  , n = 1 / e.setFromMatrixColumn(t, 0).length()
                  , o = 1 / e.setFromMatrixColumn(t, 1).length()
                  , s = 1 / e.setFromMatrixColumn(t, 2).length();
                return i[0] = r[0] * n,
                i[1] = r[1] * n,
                i[2] = r[2] * n,
                i[4] = r[4] * o,
                i[5] = r[5] * o,
                i[6] = r[6] * o,
                i[8] = r[8] * s,
                i[9] = r[9] * s,
                i[10] = r[10] * s,
                this
            }
        }(),
        makeRotationFromEuler: function(e) {
            e && e.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var t = this.elements
              , i = e.x
              , r = e.y
              , n = e.z
              , o = Math.cos(i)
              , s = Math.sin(i)
              , a = Math.cos(r)
              , l = Math.sin(r)
              , u = Math.cos(n)
              , c = Math.sin(n);
            if ("XYZ" === e.order) {
                var h = o * u
                  , p = o * c
                  , d = s * u
                  , f = s * c;
                t[0] = a * u,
                t[4] = -a * c,
                t[8] = l,
                t[1] = p + d * l,
                t[5] = h - f * l,
                t[9] = -s * a,
                t[2] = f - h * l,
                t[6] = d + p * l,
                t[10] = o * a
            } else if ("YXZ" === e.order) {
                var m = a * u
                  , g = a * c
                  , v = l * u
                  , y = l * c;
                t[0] = m + y * s,
                t[4] = v * s - g,
                t[8] = o * l,
                t[1] = o * c,
                t[5] = o * u,
                t[9] = -s,
                t[2] = g * s - v,
                t[6] = y + m * s,
                t[10] = o * a
            } else if ("ZXY" === e.order) {
                m = a * u,
                g = a * c,
                v = l * u,
                y = l * c;
                t[0] = m - y * s,
                t[4] = -o * c,
                t[8] = v + g * s,
                t[1] = g + v * s,
                t[5] = o * u,
                t[9] = y - m * s,
                t[2] = -o * l,
                t[6] = s,
                t[10] = o * a
            } else if ("ZYX" === e.order) {
                h = o * u,
                p = o * c,
                d = s * u,
                f = s * c;
                t[0] = a * u,
                t[4] = d * l - p,
                t[8] = h * l + f,
                t[1] = a * c,
                t[5] = f * l + h,
                t[9] = p * l - d,
                t[2] = -l,
                t[6] = s * a,
                t[10] = o * a
            } else if ("YZX" === e.order) {
                var b = o * a
                  , _ = o * l
                  , x = s * a
                  , E = s * l;
                t[0] = a * u,
                t[4] = E - b * c,
                t[8] = x * c + _,
                t[1] = c,
                t[5] = o * u,
                t[9] = -s * u,
                t[2] = -l * u,
                t[6] = _ * c + x,
                t[10] = b - E * c
            } else if ("XZY" === e.order) {
                b = o * a,
                _ = o * l,
                x = s * a,
                E = s * l;
                t[0] = a * u,
                t[4] = -c,
                t[8] = l * u,
                t[1] = b * c + E,
                t[5] = o * u,
                t[9] = _ * c - x,
                t[2] = x * c - _,
                t[6] = s * u,
                t[10] = E * c + b
            }
            return t[3] = 0,
            t[7] = 0,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        },
        makeRotationFromQuaternion: function(e) {
            var t = this.elements
              , i = e._x
              , r = e._y
              , n = e._z
              , o = e._w
              , s = i + i
              , a = r + r
              , l = n + n
              , u = i * s
              , c = i * a
              , h = i * l
              , p = r * a
              , d = r * l
              , f = n * l
              , m = o * s
              , g = o * a
              , v = o * l;
            return t[0] = 1 - (p + f),
            t[4] = c - v,
            t[8] = h + g,
            t[1] = c + v,
            t[5] = 1 - (u + f),
            t[9] = d - m,
            t[2] = h - g,
            t[6] = d + m,
            t[10] = 1 - (u + p),
            t[3] = 0,
            t[7] = 0,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        },
        lookAt: function() {
            var e = new bl
              , t = new bl
              , i = new bl;
            return function(r, n, o) {
                var s = this.elements;
                return i.subVectors(r, n),
                0 === i.lengthSq() && (i.z = 1),
                i.normalize(),
                e.crossVectors(o, i),
                0 === e.lengthSq() && (1 === Math.abs(o.z) ? i.x += 1e-4 : i.z += 1e-4,
                i.normalize(),
                e.crossVectors(o, i)),
                e.normalize(),
                t.crossVectors(i, e),
                s[0] = e.x,
                s[4] = t.x,
                s[8] = i.x,
                s[1] = e.y,
                s[5] = t.y,
                s[9] = i.y,
                s[2] = e.z,
                s[6] = t.z,
                s[10] = i.z,
                this
            }
        }(),
        multiply: function(e, t) {
            return void 0 !== t ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
            this.multiplyMatrices(e, t)) : this.multiplyMatrices(this, e)
        },
        premultiply: function(e) {
            return this.multiplyMatrices(e, this)
        },
        multiplyMatrices: function(e, t) {
            var i = e.elements
              , r = t.elements
              , n = this.elements
              , o = i[0]
              , s = i[4]
              , a = i[8]
              , l = i[12]
              , u = i[1]
              , c = i[5]
              , h = i[9]
              , p = i[13]
              , d = i[2]
              , f = i[6]
              , m = i[10]
              , g = i[14]
              , v = i[3]
              , y = i[7]
              , b = i[11]
              , _ = i[15]
              , x = r[0]
              , E = r[4]
              , w = r[8]
              , T = r[12]
              , M = r[1]
              , C = r[5]
              , S = r[9]
              , j = r[13]
              , P = r[2]
              , R = r[6]
              , D = r[10]
              , A = r[14]
              , k = r[3]
              , O = r[7]
              , B = r[11]
              , F = r[15];
            return n[0] = o * x + s * M + a * P + l * k,
            n[4] = o * E + s * C + a * R + l * O,
            n[8] = o * w + s * S + a * D + l * B,
            n[12] = o * T + s * j + a * A + l * F,
            n[1] = u * x + c * M + h * P + p * k,
            n[5] = u * E + c * C + h * R + p * O,
            n[9] = u * w + c * S + h * D + p * B,
            n[13] = u * T + c * j + h * A + p * F,
            n[2] = d * x + f * M + m * P + g * k,
            n[6] = d * E + f * C + m * R + g * O,
            n[10] = d * w + f * S + m * D + g * B,
            n[14] = d * T + f * j + m * A + g * F,
            n[3] = v * x + y * M + b * P + _ * k,
            n[7] = v * E + y * C + b * R + _ * O,
            n[11] = v * w + y * S + b * D + _ * B,
            n[15] = v * T + y * j + b * A + _ * F,
            this
        },
        multiplyScalar: function(e) {
            var t = this.elements;
            return t[0] *= e,
            t[4] *= e,
            t[8] *= e,
            t[12] *= e,
            t[1] *= e,
            t[5] *= e,
            t[9] *= e,
            t[13] *= e,
            t[2] *= e,
            t[6] *= e,
            t[10] *= e,
            t[14] *= e,
            t[3] *= e,
            t[7] *= e,
            t[11] *= e,
            t[15] *= e,
            this
        },
        applyToBufferAttribute: function() {
            var e = new bl;
            return function(t) {
                for (var i = 0, r = t.count; i < r; i++)
                    e.x = t.getX(i),
                    e.y = t.getY(i),
                    e.z = t.getZ(i),
                    e.applyMatrix4(this),
                    t.setXYZ(i, e.x, e.y, e.z);
                return t
            }
        }(),
        determinant: function() {
            var e = this.elements
              , t = e[0]
              , i = e[4]
              , r = e[8]
              , n = e[12]
              , o = e[1]
              , s = e[5]
              , a = e[9]
              , l = e[13]
              , u = e[2]
              , c = e[6]
              , h = e[10]
              , p = e[14];
            return e[3] * (+n * a * c - r * l * c - n * s * h + i * l * h + r * s * p - i * a * p) + e[7] * (+t * a * p - t * l * h + n * o * h - r * o * p + r * l * u - n * a * u) + e[11] * (+t * l * c - t * s * p - n * o * c + i * o * p + n * s * u - i * l * u) + e[15] * (-r * s * u - t * a * c + t * s * h + r * o * c - i * o * h + i * a * u)
        },
        transpose: function() {
            var e, t = this.elements;
            return e = t[1],
            t[1] = t[4],
            t[4] = e,
            e = t[2],
            t[2] = t[8],
            t[8] = e,
            e = t[6],
            t[6] = t[9],
            t[9] = e,
            e = t[3],
            t[3] = t[12],
            t[12] = e,
            e = t[7],
            t[7] = t[13],
            t[13] = e,
            e = t[11],
            t[11] = t[14],
            t[14] = e,
            this
        },
        setPosition: function(e) {
            var t = this.elements;
            return t[12] = e.x,
            t[13] = e.y,
            t[14] = e.z,
            this
        },
        getInverse: function(e, t) {
            var i = this.elements
              , r = e.elements
              , n = r[0]
              , o = r[1]
              , s = r[2]
              , a = r[3]
              , l = r[4]
              , u = r[5]
              , c = r[6]
              , h = r[7]
              , p = r[8]
              , d = r[9]
              , f = r[10]
              , m = r[11]
              , g = r[12]
              , v = r[13]
              , y = r[14]
              , b = r[15]
              , _ = d * y * h - v * f * h + v * c * m - u * y * m - d * c * b + u * f * b
              , x = g * f * h - p * y * h - g * c * m + l * y * m + p * c * b - l * f * b
              , E = p * v * h - g * d * h + g * u * m - l * v * m - p * u * b + l * d * b
              , w = g * d * c - p * v * c - g * u * f + l * v * f + p * u * y - l * d * y
              , T = n * _ + o * x + s * E + a * w;
            if (0 === T) {
                var M = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === t)
                    throw new Error(M);
                return console.warn(M),
                this.identity()
            }
            var C = 1 / T;
            return i[0] = _ * C,
            i[1] = (v * f * a - d * y * a - v * s * m + o * y * m + d * s * b - o * f * b) * C,
            i[2] = (u * y * a - v * c * a + v * s * h - o * y * h - u * s * b + o * c * b) * C,
            i[3] = (d * c * a - u * f * a - d * s * h + o * f * h + u * s * m - o * c * m) * C,
            i[4] = x * C,
            i[5] = (p * y * a - g * f * a + g * s * m - n * y * m - p * s * b + n * f * b) * C,
            i[6] = (g * c * a - l * y * a - g * s * h + n * y * h + l * s * b - n * c * b) * C,
            i[7] = (l * f * a - p * c * a + p * s * h - n * f * h - l * s * m + n * c * m) * C,
            i[8] = E * C,
            i[9] = (g * d * a - p * v * a - g * o * m + n * v * m + p * o * b - n * d * b) * C,
            i[10] = (l * v * a - g * u * a + g * o * h - n * v * h - l * o * b + n * u * b) * C,
            i[11] = (p * u * a - l * d * a - p * o * h + n * d * h + l * o * m - n * u * m) * C,
            i[12] = w * C,
            i[13] = (p * v * s - g * d * s + g * o * f - n * v * f - p * o * y + n * d * y) * C,
            i[14] = (g * u * s - l * v * s - g * o * c + n * v * c + l * o * y - n * u * y) * C,
            i[15] = (l * d * s - p * u * s + p * o * c - n * d * c - l * o * f + n * u * f) * C,
            this
        },
        scale: function(e) {
            var t = this.elements
              , i = e.x
              , r = e.y
              , n = e.z;
            return t[0] *= i,
            t[4] *= r,
            t[8] *= n,
            t[1] *= i,
            t[5] *= r,
            t[9] *= n,
            t[2] *= i,
            t[6] *= r,
            t[10] *= n,
            t[3] *= i,
            t[7] *= r,
            t[11] *= n,
            this
        },
        getMaxScaleOnAxis: function() {
            var e = this.elements
              , t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2]
              , i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6]
              , r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
            return Math.sqrt(Math.max(t, i, r))
        },
        makeTranslation: function(e, t, i) {
            return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, i, 0, 0, 0, 1),
            this
        },
        makeRotationX: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(1, 0, 0, 0, 0, t, -i, 0, 0, i, t, 0, 0, 0, 0, 1),
            this
        },
        makeRotationY: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(t, 0, i, 0, 0, 1, 0, 0, -i, 0, t, 0, 0, 0, 0, 1),
            this
        },
        makeRotationZ: function(e) {
            var t = Math.cos(e)
              , i = Math.sin(e);
            return this.set(t, -i, 0, 0, i, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        makeRotationAxis: function(e, t) {
            var i = Math.cos(t)
              , r = Math.sin(t)
              , n = 1 - i
              , o = e.x
              , s = e.y
              , a = e.z
              , l = n * o
              , u = n * s;
            return this.set(l * o + i, l * s - r * a, l * a + r * s, 0, l * s + r * a, u * s + i, u * a - r * o, 0, l * a - r * s, u * a + r * o, n * a * a + i, 0, 0, 0, 0, 1),
            this
        },
        makeScale: function(e, t, i) {
            return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, i, 0, 0, 0, 0, 1),
            this
        },
        makeShear: function(e, t, i) {
            return this.set(1, t, i, 0, e, 1, i, 0, e, t, 1, 0, 0, 0, 0, 1),
            this
        },
        compose: function(e, t, i) {
            return this.makeRotationFromQuaternion(t),
            this.scale(i),
            this.setPosition(e),
            this
        },
        decompose: function() {
            var e = new bl
              , t = new xl;
            return function(i, r, n) {
                var o = this.elements
                  , s = e.set(o[0], o[1], o[2]).length()
                  , a = e.set(o[4], o[5], o[6]).length()
                  , l = e.set(o[8], o[9], o[10]).length();
                this.determinant() < 0 && (s = -s),
                i.x = o[12],
                i.y = o[13],
                i.z = o[14],
                t.copy(this);
                var u = 1 / s
                  , c = 1 / a
                  , h = 1 / l;
                return t.elements[0] *= u,
                t.elements[1] *= u,
                t.elements[2] *= u,
                t.elements[4] *= c,
                t.elements[5] *= c,
                t.elements[6] *= c,
                t.elements[8] *= h,
                t.elements[9] *= h,
                t.elements[10] *= h,
                r.setFromRotationMatrix(t),
                n.x = s,
                n.y = a,
                n.z = l,
                this
            }
        }(),
        makePerspective: function(e, t, i, r, n, o) {
            void 0 === o && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
            var s = this.elements
              , a = 2 * n / (t - e)
              , l = 2 * n / (i - r)
              , u = (t + e) / (t - e)
              , c = (i + r) / (i - r)
              , h = -(o + n) / (o - n)
              , p = -2 * o * n / (o - n);
            return s[0] = a,
            s[4] = 0,
            s[8] = u,
            s[12] = 0,
            s[1] = 0,
            s[5] = l,
            s[9] = c,
            s[13] = 0,
            s[2] = 0,
            s[6] = 0,
            s[10] = h,
            s[14] = p,
            s[3] = 0,
            s[7] = 0,
            s[11] = -1,
            s[15] = 0,
            this
        },
        makeOrthographic: function(e, t, i, r, n, o) {
            var s = this.elements
              , a = 1 / (t - e)
              , l = 1 / (i - r)
              , u = 1 / (o - n)
              , c = (t + e) * a
              , h = (i + r) * l
              , p = (o + n) * u;
            return s[0] = 2 * a,
            s[4] = 0,
            s[8] = 0,
            s[12] = -c,
            s[1] = 0,
            s[5] = 2 * l,
            s[9] = 0,
            s[13] = -h,
            s[2] = 0,
            s[6] = 0,
            s[10] = -2 * u,
            s[14] = -p,
            s[3] = 0,
            s[7] = 0,
            s[11] = 0,
            s[15] = 1,
            this
        },
        equals: function(e) {
            for (var t = this.elements, i = e.elements, r = 0; r < 16; r++)
                if (t[r] !== i[r])
                    return !1;
            return !0
        },
        fromArray: function(e, t) {
            void 0 === t && (t = 0);
            for (var i = 0; i < 16; i++)
                this.elements[i] = e[i + t];
            return this
        },
        toArray: function(e, t) {
            void 0 === e && (e = []),
            void 0 === t && (t = 0);
            var i = this.elements;
            return e[t] = i[0],
            e[t + 1] = i[1],
            e[t + 2] = i[2],
            e[t + 3] = i[3],
            e[t + 4] = i[4],
            e[t + 5] = i[5],
            e[t + 6] = i[6],
            e[t + 7] = i[7],
            e[t + 8] = i[8],
            e[t + 9] = i[9],
            e[t + 10] = i[10],
            e[t + 11] = i[11],
            e[t + 12] = i[12],
            e[t + 13] = i[13],
            e[t + 14] = i[14],
            e[t + 15] = i[15],
            e
        }
    });
    !function() {
        function e(t, i) {
            gl(this, e),
            this.x = t || 0,
            this.y = i || 0,
            this.isVector2 = !0
        }
        vl(e, [{
            key: "set",
            value: function(e, t) {
                return this.x = e,
                this.y = t,
                this
            }
        }, {
            key: "setScalar",
            value: function(e) {
                return this.x = e,
                this.y = e,
                this
            }
        }, {
            key: "setX",
            value: function(e) {
                return this.x = e,
                this
            }
        }, {
            key: "setY",
            value: function(e) {
                return this.y = e,
                this
            }
        }, {
            key: "setComponent",
            value: function(e, t) {
                switch (e) {
                case 0:
                    this.x = t;
                    break;
                case 1:
                    this.y = t;
                    break;
                default:
                    throw new Error("index is out of range: " + e)
                }
                return this
            }
        }, {
            key: "getComponent",
            value: function(e) {
                switch (e) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw new Error("index is out of range: " + e)
                }
            }
        }, {
            key: "clone",
            value: function() {
                return new this.constructor(this.x,this.y)
            }
        }, {
            key: "copy",
            value: function(e) {
                return this.x = e.x,
                this.y = e.y,
                this
            }
        }, {
            key: "add",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(e, t)) : (this.x += e.x,
                this.y += e.y,
                this)
            }
        }, {
            key: "addScalar",
            value: function(e) {
                return this.x += e,
                this.y += e,
                this
            }
        }, {
            key: "addVectors",
            value: function(e, t) {
                return this.x = e.x + t.x,
                this.y = e.y + t.y,
                this
            }
        }, {
            key: "addScaledVector",
            value: function(e, t) {
                return this.x += e.x * t,
                this.y += e.y * t,
                this
            }
        }, {
            key: "sub",
            value: function(e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(e, t)) : (this.x -= e.x,
                this.y -= e.y,
                this)
            }
        }, {
            key: "subScalar",
            value: function(e) {
                return this.x -= e,
                this.y -= e,
                this
            }
        }, {
            key: "subVectors",
            value: function(e, t) {
                return this.x = e.x - t.x,
                this.y = e.y - t.y,
                this
            }
        }, {
            key: "multiply",
            value: function(e) {
                return this.x *= e.x,
                this.y *= e.y,
                this
            }
        }, {
            key: "multiplyScalar",
            value: function(e) {
                return this.x *= e,
                this.y *= e,
                this
            }
        }, {
            key: "divide",
            value: function(e) {
                return this.x /= e.x,
                this.y /= e.y,
                this
            }
        }, {
            key: "divideScalar",
            value: function(e) {
                return this.multiplyScalar(1 / e)
            }
        }, {
            key: "min",
            value: function(e) {
                return this.x = Math.min(this.x, e.x),
                this.y = Math.min(this.y, e.y),
                this
            }
        }, {
            key: "max",
            value: function(e) {
                return this.x = Math.max(this.x, e.x),
                this.y = Math.max(this.y, e.y),
                this
            }
        }, {
            key: "clamp",
            value: function(e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)),
                this.y = Math.max(e.y, Math.min(t.y, this.y)),
                this
            }
        }, {
            key: "clampScalar",
            value: function() {
                var t = new e
                  , i = new e;
                return function(e, r) {
                    return t.set(e, e),
                    i.set(r, r),
                    this.clamp(t, i)
                }()
            }
        }, {
            key: "clampLength",
            value: function(e, t) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)))
            }
        }, {
            key: "floor",
            value: function() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this
            }
        }, {
            key: "ceil",
            value: function() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this
            }
        }, {
            key: "round",
            value: function() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this
            }
        }, {
            key: "roundToZero",
            value: function() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this
            }
        }, {
            key: "negate",
            value: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this
            }
        }, {
            key: "dot",
            value: function(e) {
                return this.x * e.x + this.y * e.y
            }
        }, {
            key: "lengthSq",
            value: function() {
                return this.x * this.x + this.y * this.y
            }
        }, {
            key: "length",
            value: function() {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            }
        }, {
            key: "lengthManhattan",
            value: function() {
                return Math.abs(this.x) + Math.abs(this.y)
            }
        }, {
            key: "normalize",
            value: function() {
                return this.divideScalar(this.length() || 1)
            }
        }, {
            key: "angle",
            value: function() {
                var e = Math.atan2(this.y, this.x);
                return e < 0 && (e += 2 * Math.PI),
                e
            }
        }, {
            key: "distanceTo",
            value: function(e) {
                return Math.sqrt(this.distanceToSquared(e))
            }
        }, {
            key: "distanceToSquared",
            value: function(e) {
                var t = this.x - e.x
                  , i = this.y - e.y;
                return t * t + i * i
            }
        }, {
            key: "distanceToManhattan",
            value: function(e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y)
            }
        }, {
            key: "setLength",
            value: function(e) {
                return this.normalize().multiplyScalar(e)
            }
        }, {
            key: "lerp",
            value: function(e, t) {
                return this.x += (e.x - this.x) * t,
                this.y += (e.y - this.y) * t,
                this
            }
        }, {
            key: "lerpVectors",
            value: function(e, t, i) {
                return this.subVectors(t, e).multiplyScalar(i).add(e)
            }
        }, {
            key: "equals",
            value: function(e) {
                return e.x === this.x && e.y === this.y
            }
        }, {
            key: "fromArray",
            value: function(e, t) {
                return void 0 === t && (t = 0),
                this.x = e[t],
                this.y = e[t + 1],
                this
            }
        }, {
            key: "toArray",
            value: function(e, t) {
                return void 0 === e && (e = []),
                void 0 === t && (t = 0),
                e[t] = this.x,
                e[t + 1] = this.y,
                e
            }
        }, {
            key: "fromBufferAttribute",
            value: function(e, t, i) {
                return void 0 !== i && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),
                this.x = e.getX(t),
                this.y = e.getY(t),
                this
            }
        }, {
            key: "rotateAround",
            value: function(e, t) {
                var i = Math.cos(t)
                  , r = Math.sin(t)
                  , n = this.x - e.x
                  , o = this.y - e.y;
                return this.x = n * i - o * r + e.x,
                this.y = n * r + o * i + e.y,
                this
            }
        }, {
            key: "width",
            get: function() {
                return this.x
            },
            set: function(e) {
                this.x = e
            }
        }, {
            key: "height",
            get: function() {
                return this.y
            },
            set: function(e) {
                this.y = e
            }
        }])
    }();
    var El = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , wl = function() {
        function e() {
            $a(this, e)
        }
        return el(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = El.chars, i = El.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : Ka(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }, {
            key: "calTwoPositionLength",
            value: function(t, i) {
                var r = e.subPosition(t, i);
                return r = r[0] * r[0] + r[1] * r[1] + r[2] * r[2],
                Math.sqrt(r)
            }
        }, {
            key: "subPosition",
            value: function(e, t) {
                return [e[0] - t[0], e[1] - t[1], e[2] - t[2]]
            }
        }, {
            key: "normalizeDirection",
            value: function(t) {
                var i = e.calTwoPositionLength([0, 0, 0], t);
                if (1 === i)
                    return t;
                var r = t;
                return 0 === i ? (r[0] = 0,
                r[1] = 0,
                r[2] = 0,
                r) : (i = 1 / i,
                r[0] *= i,
                r[1] *= i,
                r[2] *= i,
                r)
            }
        }]),
        e
    }()
      , Tl = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.objects = [],
            i
        }
        return il(t, e),
        el(t, [{
            key: "_initParams",
            value: function() {
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.objects = []
            }
        }, {
            key: "_buildSelf",
            value: function() {
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_buildSelf", this).call(this)
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.objects.length; e++) {
                    this.objects[e].clear()
                }
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(function() {
        function e() {
            $a(this, e),
            this.type = "BaseObject",
            this._initParams(),
            this.calculaterData = {},
            this.objectsMap = null
        }
        return el(e, [{
            key: "_initParams",
            value: function() {
                this.id = wl.uuid(),
                this.name = null,
                this.userID = null,
                this.properties = null,
                this.resource = null,
                this._resources = null,
                this.position = [0, 0, 0],
                this.rotation = [0, 0, 0, 1],
                this.scale = [1, 1, 1],
                this._parent = null,
                this.children = [],
                this.typeToChildren = {},
                this.lowerCaseProperties = null,
                this.visible = !0,
                this.mesh = null,
                this.calculater = null,
                this.meshBuilder = null,
                this.buildCompleteCallbacks = [],
                this.buildCompleteCallbackParams = [],
                this.selfBuildCompleteCallbacks = [],
                this.selfBuildCompleteCallbackParams = [],
                this._isCalculated = !1,
                this._isMeshBuilded = !1,
                this._isChildrenBuilded = !1,
                this._isSelfBuilded = !1,
                this._isBuiled = !1,
                this._size = null,
                this._box3 = null,
                this._selfSize = null,
                this._center = null,
                this._isBuiled = !1,
                this._isRequestResource = !1,
                this._isNotifyListeners = !1,
                this.objectsMap = null
            }
        }, {
            key: "_getCalculateSizeObjects",
            value: function() {
                return this.children
            }
        }, {
            key: "_addChild",
            value: function(e) {
                this.children.push(e),
                this.typeToChildren[e.type] || (this.typeToChildren[e.type] = []),
                this.typeToChildren[e.type].push(e),
                e.registerBuildCallbackListener(this._childBuildCallback, {
                    obj: this
                })
            }
        }, {
            key: "_childBuildCallback",
            value: function(e, t) {
                var i = t.obj;
                i.children.every((function(e) {
                    return e.isBuilded
                }
                )) && (i._isChildrenBuilded = !0),
                i.isChildrenBuilded && i.isSelfBuilded && (i._isBuiled = !0),
                i.isBuilded && i.notifyBuildCompleteListeners()
            }
        }, {
            key: "_getChildrenByType",
            value: function(e) {
                return this.typeToChildren[e] ? this.typeToChildren[e] : []
            }
        }, {
            key: "_removeChild",
            value: function(e) {
                var t = this.children.indexOf(e);
                t > -1 && this.children.splice(t, 1),
                (t = this.typeToChildren[e.type].indexOf(e)) > -1 && this.typeToChildren[e.type].splice(t, 1),
                e.removeBuildCallbackListener(this._childBuildCallback)
            }
        }, {
            key: "build",
            value: function(e) {
                e && this.registerBuildCallbackListener(e),
                this.isBuilded || (this.isResourcesBuilded ? (this.buildSelf(),
                this.buildChildren(),
                this.isChildrenBuilded && this.notifyBuildCompleteListeners()) : this._initResources())
            }
        }, {
            key: "calculate",
            value: function() {
                this.calculater && this.calculater.build(this)
            }
        }, {
            key: "createMesh",
            value: function() {
                if (this.meshBuilder)
                    return this.meshBuilder.build(this)
            }
        }, {
            key: "_initResources",
            value: function() {
                if (!this._isRequestResource) {
                    for (var e = 0; e < this.resources.length; e++) {
                        var t = this.resources[e];
                        t.isBuilded || (t.registerBuildCallbackListener(this._resourceBuildedCallback, {
                            object: this
                        }),
                        t.build())
                    }
                    this._isRequestResource = !0
                }
            }
        }, {
            key: "_resourceBuildedCallback",
            value: function(e, t) {
                var i = t.object;
                e.isBuilded && i.build()
            }
        }, {
            key: "buildSelf",
            value: function() {
                this._buildSelf(),
                this.isSelfBuilded && this.notifySelfBuildCompleteListeners()
            }
        }, {
            key: "_buildSelf",
            value: function() {
                this.isSelfBuilded || (this._isCalculated || (this.calculate(),
                this._isCalculated = !0),
                this._isMeshBuilded || (this.createMesh(),
                this._isMeshBuilded = !0),
                this._isSelfBuilded = !0,
                this.isChildrenBuilded && (this._isBuiled = !0),
                this.isBuilded && this.notifyBuildCompleteListeners())
            }
        }, {
            key: "buildChildren",
            value: function() {
                this._buildChildren()
            }
        }, {
            key: "_buildChildren",
            value: function() {
                if (!this.isChildrenBuilded)
                    for (var e = 0; e < this.children.length; e++) {
                        this.children[e].build()
                    }
            }
        }, {
            key: "registerBuildCallbackListener",
            value: function(e, t) {
                this.buildCompleteCallbacks.push(e),
                this.buildCompleteCallbackParams.push(t)
            }
        }, {
            key: "registerSelfBuildCallbackListener",
            value: function(e, t) {
                this.selfBuildCompleteCallbacks.push(e),
                this.selfBuildCompleteCallbackParams.push(t)
            }
        }, {
            key: "removeBuildCallbackListener",
            value: function() {}
        }, {
            key: "notifyBuildCompleteListeners",
            value: function() {
                if (!this._isNotifyListeners) {
                    for (var e = 0; e < this.buildCompleteCallbacks.length; e++) {
                        (0,
                        this.buildCompleteCallbacks[e])(this, this.buildCompleteCallbackParams[e])
                    }
                    this._isNotifyListeners = !0
                }
            }
        }, {
            key: "notifySelfBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.selfBuildCompleteCallbacks.length; e++) {
                    (0,
                    this.selfBuildCompleteCallbacks[e])(this, this.selfBuildCompleteCallbackParams[e])
                }
            }
        }, {
            key: "findObjectByID",
            value: function(e) {
                return this.objectsMap || (this.objectsMap = {},
                this.collectObjectsToMap(this)),
                null != e && "" !== e ? this.objectsMap[e] : null
            }
        }, {
            key: "collectObjectsToMap",
            value: function(e) {
                this.objectsMap[e.id] = e;
                for (var t = 0; t < e.children.length; t++) {
                    var i = e.children[t];
                    this.collectObjectsToMap(i)
                }
            }
        }, {
            key: "findObjectByUserID",
            value: function(e) {
                if (!e)
                    return null;
                if (this.userID === e)
                    return this;
                if (this.children)
                    for (var t = 0; t < this.children.length; t++) {
                        var i = this.children[t];
                        if (i.userID === e)
                            return i;
                        var r = i.findObjectByUserID(e);
                        if (r)
                            return r
                    }
                return null
            }
        }, {
            key: "clear",
            value: function() {
                for (var e = 0; e < this.children.length; e++) {
                    this.children[e].clear()
                }
                this.clearBuildMesh(),
                this.calculater = null,
                this.meshBuilder = null,
                this._initParams(),
                this.id = null
            }
        }, {
            key: "clearBuildMesh",
            value: function() {
                this.meshBuilder && this.meshBuilder.clear(this.mesh),
                this._isMeshBuilded = !1,
                this._isSelfBuilded = !1,
                this.mesh = null,
                this._isBuiled = !1,
                this._isNotifyListeners = !1
            }
        }, {
            key: "deepClone",
            value: function(e) {
                var t = Array.isArray(e) ? [] : {};
                if (e && "object" === (void 0 === e ? "undefined" : Ka(e)))
                    for (var i in e)
                        e.hasOwnProperty(i) && (t[i] = e && "object" === Ka(e[i]) ? this.deepClone(e[i]) : e[i]);
                return t
            }
        }, {
            key: "selfSize",
            set: function(e) {
                this._selfSize = e
            },
            get: function() {
                return null === this._selfSize ? [0, 0, 0] : this._selfSize
            }
        }, {
            key: "center",
            get: function() {
                if (null === this._center) {
                    if (!this.size || !this._box3)
                        return [0, 0, 0];
                    this._center = this._box3.getCenter().toArray()
                }
                return this._center
            }
        }, {
            key: "size",
            set: function(e) {
                this._size = e,
                0 === this.children.length && (this.selfSize = e)
            },
            get: function() {
                if (null === this._size)
                    if (this.children.length > 0) {
                        if (this._box3 = new _l,
                        0 !== this.selfSize[0] && 0 !== this.selfSize[1] && 0 !== this.selfSize[2]) {
                            var e = new bl(this.position[0],this.position[1],this.position[2]);
                            e.y += this.selfSize[1] / 2,
                            this._box3.setFromCenterAndSize(e, new bl(this.selfSize[0],this.selfSize[1],this.selfSize[2]))
                        }
                        for (var t = this._getCalculateSizeObjects(), i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.size && r._box3 && this._box3.union(r._box3)
                        }
                        this._size = this._box3.getSize().toArray()
                    } else
                        this._size = this.selfSize;
                return this._size
            }
        }, {
            key: "parent",
            get: function() {
                return this._parent
            },
            set: function(e) {
                this._parent !== e && (null !== this._parent && this._parent._removeChild(this),
                null != e && (this._parent = e,
                this._parent && this._parent._addChild(this)))
            }
        }, {
            key: "isContainer",
            get: function() {
                return this.children.length > 0
            }
        }, {
            key: "resources",
            get: function() {
                return null === this._resources && (this._resources = [],
                this.resource && this._resources.push(this.resource)),
                this._resources
            }
        }, {
            key: "isBuilded",
            get: function() {
                return this._isBuiled
            }
        }, {
            key: "isSelfBuilded",
            get: function() {
                return this._isSelfBuilded
            }
        }, {
            key: "isChildrenBuilded",
            get: function() {
                return !this.isContainer || (!(this.children.length > 0) || this._isChildrenBuilded)
            }
        }, {
            key: "isResourcesBuilded",
            get: function() {
                for (var e = 0; e < this.resources.length; e++) {
                    if (!this.resources[e].isBuilded)
                        return !1
                }
                return !0
            }
        }]),
        e
    }())
      , Ml = function() {
        function e() {
            $a(this, e),
            this.positions = [],
            this.scales = [],
            this.quaternions = []
        }
        return el(e, [{
            key: "clone",
            value: function() {
                var t = new e;
                return t.positions = this.positions.slice(),
                t.scales = this.scales.slice(),
                t.quaternions = this.quaternions.slice(),
                t
            }
        }]),
        e
    }()
      , Cl = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "BatchCombinePlacement",
            i
        }
        return il(t, e),
        el(t, [{
            key: "_initParams",
            value: function() {
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.objects = [],
                this.belongRoomUserID = null,
                this.transformations = []
            }
        }, {
            key: "addObject",
            value: function(e) {
                this.objects.push(e);
                var t = new Ml;
                t.positions.push(e.position),
                t.scales.push(e.scale),
                t.quaternions.push(e.rotation),
                this.transformations.push(t)
            }
        }, {
            key: "selfSize",
            set: function(e) {
                this._selfSize = e
            },
            get: function() {
                if (null === this._selfSize) {
                    this._box3 = new _l;
                    for (var e = 0; e < this.objects.length; e++) {
                        var t = this.objects[e];
                        t.size && this._box3.union(t._box3)
                    }
                    this._selfSize = this._box3.getSize().toArray()
                }
                return this._selfSize
            }
        }]),
        t
    }(Tl)
      , Sl = function() {
        function e(t) {
            $a(this, e),
            this.object = t.object,
            this.mesh = null
        }
        return el(e, [{
            key: "build",
            value: function() {
                this.object.mesh = new THREE.Object3D
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }()
      , jl = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.type = "BatchPlacement",
            i
        }
        return il(t, e),
        t
    }(Cl)
      , Pl = function() {
        function e() {
            $a(this, e),
            this.objectManager = null,
            this.parserConfig = new fl,
            this.rootParser = null,
            this.enableBatchPlacement = !0
        }
        return el(e, [{
            key: "parse",
            value: function(e) {
                this.registerObjects(),
                this.registerMeshBuilder(),
                new (this.parserConfig.getParser(e.type))({
                    object: e,
                    manager: this
                }).parse()
            }
        }, {
            key: "registerObjects",
            value: function() {
                this.objectManager.containObjectClass("BatchCombinePlacement") || this.objectManager.registerObjectClass("BatchCombinePlacement", Cl),
                this.objectManager.containObjectClass("BatchPlacement") || this.objectManager.registerObjectClass("BatchPlacement", jl)
            }
        }, {
            key: "registerMeshBuilder",
            value: function() {
                if (this.objectManager.meshBuilderManager) {
                    var e = this.objectManager.meshBuilderManager;
                    e.containMeshBuilderClass("BatchCombinePlacement") || e.registerMeshBuilder("BatchCombinePlacement", Sl),
                    e.containMeshBuilderClass("BatchPlacement") || e.registerMeshBuilder("BatchPlacement", Sl)
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.rootParser && this.rootParser.clear(),
                this.rootParser = null,
                this.objectManager = null,
                this.parserConfig = null
            }
        }]),
        e
    }()
      , Rl = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combiners = {},
            i
        }
        return il(t, e),
        el(t, [{
            key: "_initParams",
            value: function() {
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_initParams", this).call(this),
                this.combiners = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children.slice(), t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.manager.parserConfig.getParser(i.type);
                    if (r)
                        new r({
                            object: i,
                            manager: this.manager
                        }).parse();
                    else
                        this.initCombiner(i)
                }
            }
        }, {
            key: "initCombiner",
            value: function(e) {
                if (!this.combiners[e.type]) {
                    var t = hl.getCombiner(e.type);
                    if (t) {
                        var i = new t({
                            manager: this.manager
                        });
                        i.parent = this.object,
                        this.combiners[e.type] = i
                    }
                }
                this.combiners[e.type] && this.combiners[e.type].parse(e)
            }
        }, {
            key: "clear",
            value: function() {
                for (var e in this.combiners)
                    this.combiners[e].clear();
                tl(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "clear", this).call(this)
            }
        }]),
        t
    }(nl)
      , Dl = function(e) {
        function t(e) {
            $a(this, t);
            var i = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.combiners = {},
            i
        }
        return il(t, e),
        el(t, [{
            key: "parse",
            value: function() {
                for (var e = this.object.children.slice(), t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.manager.parserConfig.getParser(i.type);
                    if (r)
                        new r({
                            object: i,
                            manager: this.manager
                        }).parse();
                    else
                        this.initCombiner(i)
                }
                this.removeCorners()
            }
        }]),
        t
    }(pl)
      , Al = function(e) {
        function t(e) {
            return $a(this, t),
            rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return il(t, e),
        t
    }(Dl)
      , kl = function(e) {
        function t() {
            $a(this, t);
            var e = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e._map.Room = Rl,
            e._map.FloorPlan = Dl,
            e._map.Outdoors = Al,
            e
        }
        return il(t, e),
        t
    }(fl)
      , Ol = function(e) {
        function t() {
            $a(this, t);
            var e = rl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
            return e.parserConfig = new kl,
            e
        }
        return il(t, e),
        t
    }(Pl)
      , Bl = new (function() {
        function e(t) {
            $a(this, e),
            this._versionMap = {
                0: {
                    0: Pl,
                    1: Pl,
                    2: Pl,
                    3: Pl,
                    4: Ol
                }
            },
            this._smallVersionLibs = [[0, 1, 2, 3, 4]],
            this._bigVersions = [0]
        }
        return el(e, [{
            key: "getCombinerManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][i.length - 1]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return new this._versionMap[e][r.length - 1]
                }
                var n = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1]))
                    return t > n[n.length - 1] ? new this._versionMap[e][n.length - 1] : new this._versionMap[e][t];
                console.error("max combiner not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , Fl = function() {
        function e(t) {
            $a(this, e),
            this.objectManager = t.objectManager,
            this.enableBatchPlacement = !0,
            void 0 !== t.enableBatchPlacement && (this.enableBatchPlacement = t.enableBatchPlacement)
        }
        return el(e, [{
            key: "parse",
            value: function(e, t, i) {
                var r = Bl.getCombinerManager(t, i);
                return r.enableBatchPlacement = this.enableBatchPlacement,
                hl.enableBatchPlacement = this.enableBatchPlacement,
                r ? (r.objectManager = this.objectManager,
                r.parse(e)) : null
            }
        }, {
            key: "getCombineManager",
            value: function(e, t) {
                var i = Bl.getCombinerManager(e, t);
                return i.objectManager = this.objectManager,
                i
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }()
      , Ll = function e(t) {
        p(this, e),
        this.objectsMap = {}
    }
      , Il = function(e) {
        function t(e) {
            p(this, t);
            var i = m(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.sceneJson = null,
            i.world = null,
            i.resourceManager = new Fi,
            i.debugManager = Zt,
            i.objectManager = new ai,
            i.loader = new Za({
                objectManager: i.objectManager,
                resourceManager: i.resourceManager
            }),
            i.loadVersion = null,
            i.enableRequestWorld = !0,
            i.dynamicBuildManager = new st(i),
            i.enableBatchPlacement = !0,
            i
        }
        return f(t, e),
        d(t, [{
            key: "startToDownloadRequestResources",
            value: function(e) {
                this.resourceManager.startToDownloadRequestResources(e)
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e) {
                this.resourceManager.addResourceDownloadRequest(e)
            }
        }, {
            key: "disposeModels",
            value: function() {
                this.resourceManager.disposeModels()
            }
        }, {
            key: "disposeTextures",
            value: function() {
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "clearAllResources",
            value: function() {
                this.resourceManager.disposeModels(),
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "clearAllObjects",
            value: function() {
                this.world.clear()
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                this.dynamicBuildManager.requestToBuild(e)
            }
        }, {
            key: "startToBuild",
            value: function(e) {
                return this.dynamicBuildManager.build(e)
            }
        }, {
            key: "disposeObject",
            value: function(e) {
                this.dynamicBuildManager.disposeObject(e)
            }
        }, {
            key: "findObjectByID",
            value: function(e) {
                return this.world.findObjectByID(e)
            }
        }, {
            key: "load",
            value: function(e) {
                var t = e.bigVersion
                  , i = e.smallVersion;
                return 0 === t && i > 1 && (Mt.enableBatchObject = !0,
                void 0 !== this.enableBatchPlacement && (this.enableBatchPlacement = e.enableBatchPlacement)),
                this.objectManager.meshBuilderManager = Ts.createManager(t, i),
                Mt.enableBatchObject && (this.combineManager = new Fl({
                    objectManager: this.objectManager,
                    enableBatchPlacement: this.enableBatchPlacement
                })),
                this.world = this.loader.load(e),
                this.combineManager && this.combineManager.parse(this.world, t, i),
                this.dynamicBuildManager.world = this.world,
                this.enableRequestWorld && this.requestToBuild(this.world.id),
                this.world
            }
        }, {
            key: "downloadResourceProgress",
            get: function() {
                return this.resourceManager.downloadResProgess
            }
        }]),
        t
    }(Ll)
      , Nl = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Hl = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , Ul = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , zl = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , Vl = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , Wl = function() {
        function e(t) {
            Nl(this, e),
            this.object = t.object,
            this.buildCompleteCallbacks = [],
            this.buildCompleteCallbackParams = [],
            this.mesh = null,
            this._boxMesh = null
        }
        return Hl(e, [{
            key: "build",
            value: function() {
                this._createMesh()
            }
        }, {
            key: "_createMesh",
            value: function() {
                if (this.object.resource) {
                    var e = this.object.resource;
                    e.isTestModel ? this.object.mesh = e.model.clone() : this.object.nodeName ? this.createMeshByNode() : this.createMeshByModelClone()
                } else
                    null === this.object.mesh && (this.object.mesh = new THREE.Object3D)
            }
        }, {
            key: "createMeshByNode",
            value: function() {
                var e = this.object.resource.model.getObjectByName(this.object.nodeName);
                if (e) {
                    if (e = e.clone(),
                    this.object.position = e.position.toArray(),
                    this.object.scale = e.scale.toArray(),
                    this.object.rotation = e.quaternion.toArray(),
                    this.object.children.length > 0)
                        for (var t = e.children.length - 1; t > -1; t--) {
                            var i = e.children[t];
                            e.remove(i)
                        }
                    this.object.mesh = e
                } else
                    console.warn("can not find node " + this.object.nodeName),
                    this.object.mesh = new THREE.Object3D
            }
        }, {
            key: "_setTransformation",
            value: function(e, t) {
                e.position.equals(t.position) || (0 === e.position.x && 0 === e.position.y && 0 === e.position.z ? this.object.position = t.position.clone() : t.position.copy(this.object.position)),
                e.scale.equals(t.scale) || (1 === e.scale.x && 1 === e.scale.y && 1 === e.scale.z ? this.object.scale = t.scale.clone() : t.scale.copy(t.scale)),
                e.rotation.equals(t.quaternion) || (0 === e.rotation.x && 0 === e.rotation.y && 0 === e.rotation.z && 1 === e.rotation.w ? this.object.rotation = t.quaternion.clone() : t.quaternion.copy(this.object.rotation))
            }
        }, {
            key: "createMeshByModelClone",
            value: function() {
                var e = this.object.resource.model.clone()
                  , t = this.object.position
                  , i = this.object.scale
                  , r = this.object.rotation;
                e.position.set(t[0], t[1], t[2]),
                e.quaternion.set(r[0], r[1], r[2], r[3]),
                e.scale.set(i[0], i[1], i[2]),
                this.object.mesh = e,
                this.object.mesh.name = this.object.type + this.object.id
            }
        }, {
            key: "createBoxMesh",
            value: function() {
                if (null === this._boxMesh) {
                    var e = new THREE.BoxBufferGeometry(1,1,1)
                      , t = new THREE.MeshBasicMaterial
                      , i = new THREE.Mesh(e,t)
                      , r = this.object.size;
                    i.scale.set(this.object.size[0], this.object.size[1], this.object.size[2]),
                    i.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]),
                    i.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                    i.position.y = (this.object.position[1] + r[1]) / 2,
                    this._boxMesh = i
                }
                return this._boxMesh
            }
        }, {
            key: "notifyBuildCompleteListeners",
            value: function() {
                for (var e = 0; e < this.buildCompleteCallbacks.length; e++) {
                    (0,
                    this.buildCompleteCallbacks[e])(this, this.buildCompleteCallbackParams[e])
                }
            }
        }, {
            key: "checkResourceReady",
            value: function() {
                if (this.object.resources) {
                    for (var e = 0; e < this.object.resources.length; e++) {
                        if (!this.object.resources[e].ready)
                            return !1
                    }
                    return !0
                }
                return !this.object.resource || !!this.object.resource.ready
            }
        }, {
            key: "initResource",
            value: function() {
                if (this.object.resources)
                    for (var e = 0; e < this.object.resources.length; e++) {
                        var t = this.object.resources[e];
                        this.requestResource(t)
                    }
                else
                    this.requestResource(this.object.resource)
            }
        }, {
            key: "requestResource",
            value: function(e) {
                e.ready || (e.isStartDownload || e.requestToDownload(),
                e.registerListener(this))
            }
        }, {
            key: "registerBuildCallbackListener",
            value: function(e, t) {
                this.buildCompleteCallbacks.push(e),
                this.buildCompleteCallbackParams.push(t)
            }
        }, {
            key: "resourceCallback",
            value: function(e) {
                this.build()
            }
        }, {
            key: "_dispose",
            value: function(e) {
                if (e instanceof THREE.Mesh) {
                    var t = e;
                    if (t) {
                        var i = t.material
                          , r = t.geometry;
                        t.isDestory = !0,
                        i && (this._disposeMaterial(i),
                        t.material = null),
                        r && (r.isDestory = !0,
                        r.dispose(),
                        t.geometry = null)
                    }
                }
                if (e)
                    for (var n = e.children, o = 0; o < n.length; o++) {
                        var s = n[o];
                        this._dispose(s)
                    }
            }
        }, {
            key: "_disposeMaterial",
            value: function(e) {
                if (e instanceof Array)
                    for (var t = 0; t < e.length; t++) {
                        var i = e[t];
                        this._disposeMaterial(i)
                    }
                else
                    e.isDestory = !0,
                    e.dispose()
            }
        }, {
            key: "clear",
            value: function(e) {
                e && (e.parent && e.parent.remove(e),
                this._dispose(e)),
                this.buildCompleteCallbacks = [],
                this.buildCompleteCallbackParams = [],
                this.mesh = null,
                this._boxMesh = null
            }
        }]),
        e
    }()
      , Gl = function(e) {
        function t(e) {
            Nl(this, t);
            var i = Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.isRegisterObjectBuildCallback = !1,
            i
        }
        return zl(t, e),
        Hl(t, [{
            key: "_createMesh",
            value: function() {
                Ul(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this)
            }
        }, {
            key: "buildCallback",
            value: function(e, t) {
                var i = t.builder;
                i.applyRotationToChildren(),
                i.object.mesh.quaternion.set(0, 0, 0, 1);
                for (var r = 0; r < e.children.length; r++) {
                    e.children[r].meshBuilder.applyRotationToChildren()
                }
            }
        }]),
        t
    }(Wl)
      , ql = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , Xl = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , Jl = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , Yl = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        Hl(t, [{
            key: "_createMesh",
            value: function() {
                Ul(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this);
                var e = new THREE.Object3D;
                e.name = "floorMax",
                e.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                e.scale.set(this.object.scale[0], this.object.scale[1], this.object.scale[2]),
                e.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]);
                var i = this.object.mesh;
                i.position.set(0, 0, 0),
                i.scale.set(1, 1, 1),
                i.quaternion.set(0, 0, 0, 1),
                e.add(i);
                var r = i.position.clone();
                r.applyQuaternion(e.quaternion),
                i.position.copy(r),
                i.quaternion.premultiply(e.quaternion),
                this.object.rotation = [0, 0, 0, 1],
                e.quaternion.set(0, 0, 0, 1),
                this.object.mesh = e,
                this.object.floor && (this.object.floor.mesh = i),
                this.object.roof && (this.object.roof.mesh = new THREE.Object3D),
                this.object.ceiling && (this.object.ceiling.mesh = new THREE.Object3D)
            }
        }]),
        t
    }(Wl)
      , Ql = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , Zl = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , Kl = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , $l = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , eu = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , tu = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , iu = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        Hl(t, [{
            key: "_createMesh",
            value: function() {
                this.object.mesh = new THREE.Object3D
            }
        }]),
        t
    }(Wl)
      , ru = function() {
        function e(t) {
            Nl(this, e),
            this._map = {
                Building: Gl,
                World: ql,
                FloorPlan: tu,
                Outdoors: Jl,
                Room: Yl,
                Floor: Xl,
                Placement: Ql,
                Facade: $l,
                DoorOrWindow: eu,
                CombinePlacement: Zl,
                CombinePlacementByBatch: iu,
                CombineModelWall: Kl
            }
        }
        return Hl(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , nu = function() {
        function e(t) {
            Nl(this, e),
            this.builderTypeConfig = new ru
        }
        return Hl(e, [{
            key: "create",
            value: function(e) {
                var t = e.type
                  , i = this.builderTypeConfig.getClass(t);
                return i ? new i(e) : null
            }
        }]),
        e
    }()
      , ou = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , su = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(Wl)
      , au = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        Hl(t, [{
            key: "_createMesh",
            value: function() {
                Ul(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_createMesh", this).call(this);
                var e = new THREE.Object3D;
                e.name = "floorMax",
                e.position.set(this.object.position[0], this.object.position[1], this.object.position[2]),
                e.scale.set(this.object.scale[0], this.object.scale[1], this.object.scale[2]),
                e.quaternion.set(this.object.rotation[0], this.object.rotation[1], this.object.rotation[2], this.object.rotation[3]);
                var i = this.object.mesh;
                i.position.set(0, 0, 0),
                i.scale.set(1, 1, 1),
                i.quaternion.set(0, 0, 0, 1),
                e.add(i);
                var r = i.position.clone();
                r.applyQuaternion(e.quaternion),
                i.position.copy(r),
                i.quaternion.premultiply(e.quaternion),
                this.object.rotation = [0, 0, 0, 1],
                e.quaternion.set(0, 0, 0, 1),
                this.object.mesh = e,
                this.object.floor && null === this.object.floor.mesh && (this.object.floor.mesh = i),
                this.object.roof && null === this.object.roof.mesh && (this.object.roof.mesh = new THREE.Object3D),
                this.object.ceiling && null === this.object.ceiling.mesh && (this.object.ceiling.mesh = new THREE.Object3D)
            }
        }]),
        t
    }(Wl)
      , lu = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        Hl(t, [{
            key: "_createMesh",
            value: function() {
                if (this.object.resource) {
                    var e = this.object.resource;
                    e.isTestModel ? this.object.mesh = e.model.clone() : this.object.nodeName ? this.createMeshByNode() : this.createMeshByModelClone()
                } else
                    null === this.object.mesh && (this.object.mesh = new THREE.Object3D)
            }
        }]),
        t
    }(Wl)
      , uu = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(lu)
      , cu = function(e) {
        function t(e) {
            return Nl(this, t),
            Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return zl(t, e),
        t
    }(lu)
      , hu = function(e) {
        function t(e) {
            Nl(this, t);
            var i = Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map.Roof = ou,
            i._map.Ceiling = su,
            i._map.Room = au,
            i._map.CombineFloor = lu,
            i._map.CombineRoof = uu,
            i._map.CombineCeiling = cu,
            i
        }
        return zl(t, e),
        t
    }(ru)
      , pu = function(e) {
        function t(e) {
            Nl(this, t);
            var i = Vl(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.builderTypeConfig = new hu,
            i
        }
        return zl(t, e),
        t
    }(nu)
      , du = new (function() {
        function e(t) {
            Nl(this, e),
            this._versionMap = {
                0: {
                    0: nu,
                    1: pu
                }
            },
            this._smallVersionLibs = [[0, 1]],
            this._bigVersions = [0]
        }
        return Hl(e, [{
            key: "getManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][i.length - 1]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return new this._versionMap[e][r.length - 1]
                }
                var n = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1]))
                    return t > n[n.length - 1] ? new this._versionMap[e][n.length - 1] : new this._versionMap[e][t];
                console.error("maxmeshbuilder not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , fu = new (function() {
        function e(t) {
            Nl(this, e)
        }
        return Hl(e, [{
            key: "createManager",
            value: function(e) {
                return du.getManager(e.bigVersion, e.smallVersion)
            }
        }]),
        e
    }())
      , mu = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , gu = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , vu = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , yu = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , bu = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , _u = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , xu = new (function() {
        function e(t) {
            gu(this, e),
            this.config = null,
            this.objectManager = null
        }
        return vu(e, [{
            key: "createObject",
            value: function(e) {
                var t = this.config.getClass(e.creatorType);
                e.objectManager = this.objectManager;
                var i = new t(e)
                  , r = i.create();
                return i.parseChildren(),
                r
            }
        }]),
        e
    }())
      , Eu = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , wu = function() {
        function e() {
            gu(this, e)
        }
        return vu(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = Eu.chars, i = Eu.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : mu(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }]),
        e
    }()
      , Tu = function() {
        function e(t) {
            gu(this, e),
            this.id = null,
            this.name = null,
            this.userID = null,
            this.properties = null,
            this.jsonData = t.jsonData,
            this.objectParent = null,
            t.parent && (this.objectParent = t.parent),
            this.createType = null,
            this.resourceManager = t.resourceManager,
            this.objectManager = t.objectManager
        }
        return vu(e, [{
            key: "create",
            value: function() {
                var e = this._getCreateParams();
                if (this.object = xu.objectManager.create(e),
                this.jsonData.id && (this.object.id = this.jsonData.id),
                this.jsonData.userid && (this.object.userID = this.jsonData.userid),
                this.jsonData.name && (this.object.name = this.jsonData.name),
                this.object.loadMode = 0,
                this.jsonData.node ? (this.object.nodeName = this.jsonData.node,
                this.object.loadMode = 2) : void 0 !== this.jsonData.model && null !== this.jsonData.model && (this.object.loadMode = 1),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object.resource || (this.object.resource = this.resourceManager.emptyModelResource),
                this.object.jsonData = this.jsonData,
                e.parent && (this.object.parent = e.parent),
                this.jsonData.position) {
                    var t = this.jsonData.position;
                    this.object.position = t
                }
                if (this.jsonData.scale) {
                    var i = this.jsonData.scale;
                    0 === i[0] && (i[0] = .01),
                    0 === i[1] && (i[1] = .01),
                    0 === i[2] && (i[2] = .01),
                    this.object.scale = i
                }
                if (this.jsonData.rotation) {
                    var r = this.jsonData.rotation;
                    this.object.rotation = r
                }
                if (this.jsonData.properties && (this.object.properties = this.jsonData.properties,
                this.object.lowerCaseProperties = this.convertPropertiesToLowerCase(this.jsonData.properties)),
                wu.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                this.jsonData.caminfo) {
                    var n = this.jsonData.caminfo.eye
                      , o = this.jsonData.caminfo.target;
                    n[2] = -n[2],
                    o[2] = -o[2],
                    this.object.camInfo = {
                        eye: n,
                        target: o
                    }
                }
                if (this.jsonData.size) {
                    var s = this.jsonData.size;
                    this.object.size = s
                } else
                    this.object.size = [1, 1, 1];
                return this.object
            }
        }, {
            key: "convertPropertiesToLowerCase",
            value: function(e) {
                var t = {};
                for (var i in e)
                    t[i.toLowerCase()] = e[i].toLowerCase();
                return t
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                xu.createObject(e)
            }
        }]),
        e
    }()
      , Mu = 0
      , Cu = 1
      , Su = 2
      , ju = 3
      , Pu = 6
      , Ru = 7
      , Du = 8
      , Au = 9
      , ku = 10
      , Ou = 11
      , Bu = 12
      , Fu = 13
      , Lu = 14
      , Iu = 15
      , Nu = 16
      , Hu = 17
      , Uu = 18
      , zu = 19
      , Vu = 21
      , Wu = 22
      , Gu = 23
      , qu = 24
      , Xu = 25
      , Ju = 26
      , Yu = 27
      , Qu = 28
      , Zu = 29
      , Ku = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                if (e.buildings && this._parseJsonDataChildren({
                    jsonData: e.buildings,
                    creatorType: Cu
                }),
                e.outdoors) {
                    var t = this._parseJsonDataChild({
                        jsonData: e.outdoors,
                        creatorType: ku
                    });
                    this.object.outdoors = t
                }
            }
        }]),
        t
    }(Tu)
      , $u = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                wu.checkValueEmpty(this.jsonData.structshow) || (this.object.structShow = this.jsonData.structshow),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.facades && this._parseJsonDataChildren({
                    jsonData: e.facades,
                    creatorType: Ou
                }),
                e.facadegroups && this._parseJsonDataChildren({
                    jsonData: e.facadegroups,
                    creatorType: Bu
                }),
                e.plans && this._parseJsonDataChildren({
                    jsonData: e.plans,
                    creatorType: Su
                })
            }
        }]),
        t
    }(Tu)
      , ec = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                wu.checkValueEmpty(this.jsonData.alwaysshowinsideobjs) || (this.object.alwaysShowInsideObjs = this.jsonData.alwaysshowinsideobjs),
                wu.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.corners && this._parseCorners(e.corners),
                e.walls && this._parseWalls(e.walls),
                e.placements && this._parseJsonDataChildren({
                    jsonData: e.placements,
                    creatorType: Pu
                }),
                e.combineplacements && this._parseJsonDataChildren({
                    jsonData: e.combineplacements,
                    creatorType: Wu
                }),
                e.rooms && this._parseJsonDataChildren({
                    jsonData: e.rooms,
                    creatorType: Au
                }),
                e.groups && this._parseJsonDataChildren({
                    jsonData: e.groups,
                    creatorType: Ru
                }),
                e.curvelines && this._parseJsonDataChildren({
                    jsonData: e.curvelines,
                    creatorType: Fu
                }),
                e.routelines && this._parseJsonDataChildren({
                    jsonData: e.routelines,
                    creatorType: Uu
                }),
                e.leakwaterlines && this._parseJsonDataChildren({
                    jsonData: e.leakwaterlines,
                    creatorType: Lu
                }),
                e.arrowlines && this._parseJsonDataChildren({
                    jsonData: e.arrowlines,
                    creatorType: Iu
                }),
                e.arrowdatalines && this._parseJsonDataChildren({
                    jsonData: e.arrowdatalines,
                    creatorType: Nu
                }),
                e.pipelines && this._parseJsonDataChildren({
                    jsonData: e.pipelines,
                    creatorType: Hu
                }),
                e.videoprobes && this._parseJsonDataChildren({
                    jsonData: e.videoprobes,
                    creatorType: zu
                }),
                e.grounds && this._parseJsonDataChildren({
                    jsonData: e.grounds,
                    creatorType: Vu
                }),
                e.doororwindows && this._parseDoorOrWindows(e.doororwindows)
            }
        }, {
            key: "_parseCorners",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = i[0]
                      , n = i[1]
                      , o = -i[2];
                    this.object.existsCorner(r, n, o) ? console.error("repeat corner") : this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: ju
                    })
                }
            }
        }, {
            key: "_parseWalls",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t];
                    this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Gu
                    })
                }
            }
        }, {
            key: "_parseDoorOrWindows",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    var r = e[i];
                    this._parseJsonDataChild({
                        jsonData: r,
                        attachWall: t,
                        creatorType: Du
                    })
                }
            }
        }]),
        t
    }(Tu)
      , tc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ModelWall",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                wu.checkValueEmpty(this.jsonData.model) || (this.object.resource = this.resourceManager.models[this.jsonData.model]),
                this.object
            }
        }]),
        t
    }(Tu)
      , ic = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "StraightManualWall",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }]),
        t
    }(Tu)
      , rc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Placement",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                if (yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                wu.checkValueEmpty(this.jsonData.texture) || (this.object.customTextureResource = this.resourceManager.textures[this.jsonData.texture]),
                this.jsonData.color) {
                    var e = this.jsonData.color;
                    this.object.customColor = e,
                    4 === e.length && (this.object.opacity = e[3])
                }
                return wu.checkValueEmpty(this.jsonData.rendermode) || (this.object.renderMode = this.jsonData.rendermode),
                this.jsonData.animinfo && (this.object.isPlayAnim = this.jsonData.animinfo.isplay,
                this.object.animClip = this.jsonData.animinfo.clip),
                wu.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Tu)
      , nc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementGroup",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.jsonData.placements && this._parseJsonDataChildren({
                    jsonData: this.jsonData.placements,
                    creatorType: Pu
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Ru
                }),
                this.jsonData.videoprobes && this._parseJsonDataChildren({
                    jsonData: this.jsonData.videoprobes,
                    creatorType: zu
                }),
                wu.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Tu)
      , oc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "DoorOrWindow",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                if (yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                wu.checkValueEmpty(this.jsonData.suspendpercent) || (this.object.suspendPercent = this.jsonData.suspendpercent),
                wu.checkValueEmpty(this.jsonData.isopen) || (this.object.isOpen = this.jsonData.isopen),
                wu.checkValueEmpty(this.jsonData.diridx) || (this.object.openDirIndex = this.jsonData.diridx),
                !wu.checkValueEmpty(this.jsonData.iswindow)) {
                    var e = this.jsonData.iswindow;
                    "string" == typeof e && (e = "false" !== e.toLocaleString()),
                    this.object.isWindow = e
                }
                return this.object
            }
        }]),
        t
    }(Tu)
      , sc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this._createChildren(),
                this.object
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: qu
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Xu
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Ju
                }))
            }
        }]),
        t
    }(Tu)
      , ac = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return bu(t, e),
        t
    }(ec)
      , lc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Facade",
            i
        }
        return bu(t, e),
        t
    }(rc)
      , uc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FacadeGroup",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.jsonData.facades && this._parseJsonDataChildren({
                    jsonData: this.jsonData.facades,
                    creatorType: Ou
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Bu
                }),
                this.object
            }
        }]),
        t
    }(Tu)
      , cc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombinePlacement",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(Tu)
      , hc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineModelWall",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(Tu)
      , pc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Floor",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Tu)
      , dc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Ceiling",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Tu)
      , fc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Roof",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Tu)
      , mc = function() {
        function e(t) {
            gu(this, e),
            this._map = {
                0: Ku,
                1: $u,
                2: ec,
                4: tc,
                5: ic,
                6: rc,
                7: nc,
                8: oc,
                9: sc,
                10: ac,
                11: lc,
                12: uc,
                22: cc,
                23: hc,
                24: pc,
                25: dc,
                26: fc
            }
        }
        return vu(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , gc = function() {
        function e(t) {
            gu(this, e),
            this.manager = t,
            this.baseModelUrl = this.manager.baseModelUrl,
            this.baseTextureUrl = this.manager.baseTextureUrl
        }
        return vu(e, [{
            key: "createResource",
            value: function(e) {
                var t = this.manager.create({
                    type: e
                });
                return t.manager = this.manager,
                t
            }
        }, {
            key: "loadTextures",
            value: function(e) {}
        }, {
            key: "_loadLocalCustomTextureResource",
            value: function(e) {
                var t = this.createResource("LocalCustomTextureResource");
                return t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadTextureResource",
            value: function(e) {
                var t = this.createResource("Resource");
                return this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadBaseTextureResourceData",
            value: function(e, t) {
                t.id = e.id,
                t.ext = e.ext,
                e.url && (t.url = e.url),
                t.baseUrl = this.baseTextureUrl,
                e.isDefault && (t.isDefault = e.isDefault)
            }
        }, {
            key: "loadModels",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    if ((t = this.createResource("Max2TjsResource")).baseUrl = this.baseModelUrl,
                    r.localurl) {
                        if (t.localUrl = r.localurl,
                        t.id = r.id,
                        t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                        r.title && (t.modelName = r.title),
                        t.modelID = r.id,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.color) {
                            var n = r.color;
                            t.color = new THREE.Color(n[0],n[1],n[2]),
                            4 === n.length && (t.opacity = n[3])
                        }
                    } else if (r.id) {
                        if (t.id = r.id,
                        t.modelID = r.id,
                        t.version = r.version,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.model && (t.modelID = r.model),
                        r.title && (t.modelName = r.title),
                        r.color) {
                            n = r.color;
                            t.color = new THREE.Color(n[0],n[1],n[2]),
                            4 === n.length && (t.opacity = n[3])
                        }
                        if (r.size) {
                            var o = r.size;
                            t.modelSize = new THREE.Vector3(o[0],o[1],o[2])
                        }
                        r.hasanimation && (t.hasAnim = r.hasanimation),
                        r.url && (t.url = r.url)
                    }
                    for (var s = 0; s < this.manager.ableToSupportFootAndHeadModelWalls.length; s++) {
                        var a = this.manager.ableToSupportFootAndHeadModelWalls[s];
                        if (t.id === a) {
                            t.isSupportHeadAndFootModelWall = !0;
                            break
                        }
                    }
                    this.manager.models.push(t)
                }
            }
        }, {
            key: "loadCustomModelResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t),
                e.localurl && (t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]))
            }
        }, {
            key: "loadCustomResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t)
            }
        }, {
            key: "loadBaseResourceData",
            value: function(e, t) {
                if (t.id = e.id,
                t.modelID = e.id,
                t.version = e.version,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]),
                e.rendermode && (t.renderMode = e.rendermode),
                e.model && (t.modelID = e.model),
                e.title && (t.modelName = e.title),
                e.color) {
                    var i = e.color;
                    t.color = new THREE.Color(i[0],i[1],i[2]),
                    4 === i.length && (t.opacity = i[3])
                }
                if (e.size) {
                    var r = e.size;
                    t.modelSize = new THREE.Vector3(r[0],r[1],r[2])
                }
                e.hasanimation && (t.hasAnim = e.hasanimation)
            }
        }]),
        e
    }()
      , vc = function() {
        function e() {
            gu(this, e),
            this.sceneJson = null,
            this.scale = 1,
            this.curFloorPlan = null,
            this.enableCombine = !0,
            this.world = null,
            this.resourceManager = null,
            this.defaultSetting = null,
            this.defaultResource = null,
            this.creatorTypeConfig = new mc
        }
        return vu(e, [{
            key: "setObjectTypeConfig",
            value: function(e) {
                objectManager.objectTypeConfig = e
            }
        }, {
            key: "setObjectManager",
            value: function(e) {
                xu.objectManager = e
            }
        }, {
            key: "setResourceManager",
            value: function(e) {
                this.resourceManager = e
            }
        }, {
            key: "setDefaultSetting",
            value: function(e) {
                this.defaultSetting = e
            }
        }, {
            key: "setDefaultResource",
            value: function(e) {
                this.defaultResource = e
            }
        }, {
            key: "loadLightMaps",
            value: function(e) {
                var t = null
                  , i = "18091219l1g1hnjt"
                  , r = "png";
                this.defaultSetting.userDefaultWallLightMap = !0,
                e && e.straightmanualwall && e.straightmanualwall.lightingtexture && (i = e.straightmanualwall.lightingtexture.id,
                r = e.straightmanualwall.lightingtexture.ext,
                this.defaultSetting.userDefaultWallLightMap = !1),
                this.defaultSetting.enableManaulWallLightMap && ((t = this.createResource("Resource")).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = i,
                t.ext = r,
                this.defaultResource.wallLightMapResource = t),
                this.defaultSetting.enableFloorLightMap && ((t = this.createResource("Resource")).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = "18091216vjlgtwbh",
                t.ext = "jpg",
                this.defaultResource.floorLightMapResource = t)
            }
        }, {
            key: "createResource",
            value: function(e) {
                var t = objectManager.create({
                    type: e
                });
                return t.manager = this.resourceManager,
                t
            }
        }, {
            key: "parseObjects",
            value: function(e) {
                return e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl && (this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl),
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }, {
            key: "getParentRelativeUrl",
            value: function(e) {
                for (var t = e.split("/"), i = "", r = 0; r < t.length - 1; r++) {
                    i += t[r] + "/"
                }
                return i
            }
        }, {
            key: "loadSceneJson",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    if (e.sceneJson)
                        t(e.sceneJson);
                    else if (e.sceneURL) {
                        (new THREE.FileLoader).load(e.sceneURL, (function(i) {
                            e.sceneJson = JSON.parse(i),
                            t()
                        }
                        ), (function() {}
                        ), (function(t) {
                            i("can not load " + e.sceneURL)
                        }
                        ))
                    } else
                        i("load scene json error")
                }
                ))
            }
        }, {
            key: "getResourceLoader",
            value: function() {
                var e = new gc(this.resourceManager);
                return e.resourceManager = this.resourceManager,
                e
            }
        }, {
            key: "parseSceneJson",
            value: function() {
                var e = this.getResourceLoader();
                e.loadTextures(this.sceneJson.textures),
                e.loadModels(this.sceneJson.models),
                this.parseWorld(this.sceneJson)
            }
        }, {
            key: "parseWorld",
            value: function(e) {
                xu.config = this.creatorTypeConfig,
                this.world = xu.createObject({
                    jsonData: e,
                    resourceManager: this.resourceManager,
                    creatorType: Mu
                })
            }
        }]),
        e
    }()
      , yc = (new vc,
    function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.floor && this._parseJsonDataChild({
                    jsonData: e.floor,
                    creatorType: qu
                }),
                "FloorPlan" === this.object.parent.type && (e.ceiling && this._parseJsonDataChild({
                    jsonData: e.ceiling,
                    creatorType: Xu
                }),
                e.roof && this._parseJsonDataChild({
                    jsonData: e.roof,
                    creatorType: Ju
                }))
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: qu
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Xu
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: Ju
                }))
            }
        }]),
        t
    }(Tu))
      , bc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineFloor",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(Tu)
      , _c = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineRoof",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(Tu)
      , xc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CombineCeiling",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                this.object
            }
        }]),
        t
    }(Tu)
      , Ec = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return bu(t, e),
        vu(t, [{
            key: "create",
            value: function() {
                return yu(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this),
                this.jsonData.combinefloors && this._parseJsonDataChildren({
                    jsonData: this.jsonData.combinefloors,
                    creatorType: Yu
                }),
                this.jsonData.combineroofs && this._parseJsonDataChildren({
                    jsonData: this.jsonData.combineroofs,
                    creatorType: Zu
                }),
                this.jsonData.combineceilings && this._parseJsonDataChildren({
                    jsonData: this.jsonData.combineceilings,
                    creatorType: Qu
                }),
                this.object
            }
        }]),
        t
    }(ec)
      , wc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return bu(t, e),
        t
    }(Ec)
      , Tc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i._map[Au] = yc,
            i._map[Yu] = bc,
            i._map[Qu] = xc,
            i._map[Zu] = _c,
            i._map[Su] = Ec,
            i._map[ku] = wc,
            i
        }
        return bu(t, e),
        t
    }(mc)
      , Mc = function(e) {
        function t(e) {
            gu(this, t);
            var i = _u(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorTypeConfig = new Tc,
            i
        }
        return bu(t, e),
        t
    }(vc)
      , Cc = new (function() {
        function e(t) {
            gu(this, e),
            this._versionMap = {
                0: {
                    0: vc,
                    1: Mc
                }
            },
            this._smallVersionLibs = [[0, 1]],
            this._bigVersions = [0]
        }
        return vu(e, [{
            key: "getLoaderManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1]
                      , r = i[i.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][r]
                }
                if (null == t) {
                    var n = this._smallVersionLibs[e]
                      , o = n[n.length - 1];
                    return new this._versionMap[e][o]
                }
                var s = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1])) {
                    var a = s[s.length - 1];
                    return t > a || !this._versionMap[e][t] ? new this._versionMap[e][a] : new this._versionMap[e][t]
                }
                console.error("bimLoader not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , Sc = function() {
        function e(t) {
            gu(this, e),
            this.resourceManager = t.resourceManager,
            this.defaultSetting = t.defaultSetting,
            this.defaultResource = t.defaultResource,
            this.objectManager = t.objectManager
        }
        return vu(e, [{
            key: "load",
            value: function(e) {
                var t = Cc.getLoaderManager(e.bigVersion, e.smallVersion);
                return t.setDefaultSetting(this.defaultSetting),
                t.setDefaultResource(this.defaultResource),
                t.setResourceManager(this.resourceManager),
                t.setObjectManager(this.objectManager),
                t.parseObjects(e)
            }
        }]),
        e
    }()
      , jc = function(e) {
        function t(e) {
            p(this, t);
            var i = m(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.sceneJson = null,
            i.world = null,
            i.resourceManager = new Fi,
            i.objectManager = new ai,
            i.debugManager = Zt,
            i.loader = new Sc({
                objectManager: i.objectManager,
                resourceManager: i.resourceManager
            }),
            i.loadVersion = null,
            i.enableRequestWorld = !0,
            i.dynamicBuildManager = new st(i),
            Mt.enableBatchObject && (i.objectManager.meshBuilderManager.registerMeshBuilder(wt.CombinePlacement, iu),
            i.combineManager = new Fl({
                objectManager: i.objectManager
            })),
            i
        }
        return f(t, e),
        d(t, [{
            key: "startToDownloadRequestResources",
            value: function(e) {
                this.resourceManager.startToDownloadRequestResources(e)
            }
        }, {
            key: "addResourceDownloadRequest",
            value: function(e) {
                this.resourceManager.addResourceDownloadRequest(e)
            }
        }, {
            key: "disposeModels",
            value: function() {
                this.resourceManager.disposeModels()
            }
        }, {
            key: "disposeTextures",
            value: function() {
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "clearAllResources",
            value: function() {
                this.resourceManager.disposeModels(),
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "clearAllObjects",
            value: function() {
                this.world.clear()
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                this.dynamicBuildManager.requestToBuild(e)
            }
        }, {
            key: "startToBuild",
            value: function(e) {
                return this.dynamicBuildManager.build(e)
            }
        }, {
            key: "disposeObject",
            value: function(e) {
                this.dynamicBuildManager.disposeObject(e)
            }
        }, {
            key: "findObjectByID",
            value: function(e) {
                return this.world.findObjectByID(e)
            }
        }, {
            key: "load",
            value: function(e) {
                return this.objectManager.meshBuilderManager = fu.createManager(e),
                this.world = this.loader.load(e),
                this.combineManager && this.combineManager.parse(this.world),
                this.dynamicBuildManager.world = this.world,
                this.enableRequestWorld && this.requestToBuild(this.world.id),
                this.world
            }
        }, {
            key: "downloadResourceProgress",
            get: function() {
                return this.resourceManager.downloadResProgess
            }
        }]),
        t
    }(Ll)
      , Pc = "function" == typeof Symbol && "symbol" === h(Symbol.iterator) ? function(e) {
        return void 0 === e ? "undefined" : h(e)
    }
    : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : h(e)
    }
      , Rc = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Dc = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , Ac = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , kc = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , Oc = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , Bc = {
        chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        uuid: new Array(36)
    }
      , Fc = function() {
        function e() {
            Rc(this, e)
        }
        return Dc(e, null, [{
            key: "uuid",
            value: function() {
                for (var e, t = Bc.chars, i = Bc.uuid, r = 0, n = 0; n < 36; n++)
                    8 === n || 13 === n || 18 === n || 23 === n ? i[n] = "-" : 14 === n ? i[n] = "4" : (r <= 2 && (r = 33554432 + 16777216 * Math.random() | 0),
                    e = 15 & r,
                    r >>= 4,
                    i[n] = t[19 === n ? 3 & e | 8 : e]);
                return i.join("")
            }
        }, {
            key: "approximatelyNumberEqual",
            value: function(e, t, i) {
                var r = 1e-4;
                return void 0 !== i && (r = i),
                Math.abs(e - t) < r
            }
        }, {
            key: "equalVectorZero",
            value: function(e) {
                return 0 === e.x && 0 === e.y && 0 === e.z
            }
        }, {
            key: "clone",
            value: function(e) {
                var t = e.clone()
                  , i = {};
                e.traverse((function(e) {
                    e.isSkinnedMesh && (i[e.name] = e)
                }
                ));
                var r = {}
                  , n = {};
                t.traverse((function(e) {
                    e.isBone && (r[e.name] = e),
                    e.isSkinnedMesh && (n[e.name] = e)
                }
                ));
                var o = !1;
                for (var s in i) {
                    o = !0;
                    for (var a = i[s].skeleton, l = n[s], u = [], c = 0; c < a.bones.length; ++c) {
                        var h = r[a.bones[c].name];
                        u.push(h)
                    }
                    l.bind(new THREE.Skeleton(u,a.boneInverses), l.matrixWorld)
                }
                return t.hasSkin = !!o,
                t
            }
        }, {
            key: "cloneJSObject",
            value: function(t) {
                if (null === t || "object" !== (void 0 === t ? "undefined" : Pc(t)))
                    return t;
                if (t instanceof Date)
                    return (i = new Date).setTime(t.getTime()),
                    i;
                if (t instanceof Array | t instanceof Object) {
                    var i = t instanceof Array ? [] : {};
                    for (var r in t)
                        t.hasOwnProperty(r) && (i[r] = e.cloneJSObject(t[r]));
                    return i
                }
                throw new Error("Unable to clone obj! Its type isn't supported.")
            }
        }, {
            key: "checkValueEmpty",
            value: function(e) {
                return null == e
            }
        }]),
        e
    }()
      , Lc = function() {
        function e(t) {
            Rc(this, e),
            this.creatorManager = t.creatorManager
        }
        return Dc(e, [{
            key: "initData",
            value: function(e) {
                this.id = null,
                this.name = null,
                this.userID = null,
                this.properties = null,
                this.jsonData = e.jsonData,
                this.objectParent = null,
                e.parent && (this.objectParent = e.parent),
                this.resourceManager = e.resourceManager
            }
        }, {
            key: "create",
            value: function(e) {
                this.initData(e);
                var t = this._getCreateParams();
                return this.object = this.creatorManager.objectManager.create(t),
                t.parent && (this.object.parent = t.parent),
                this._loadBaseData(),
                this.object
            }
        }, {
            key: "_loadBaseData",
            value: function() {
                if (this.jsonData.id && (this.object.id = this.jsonData.id),
                this.jsonData.userid && (this.object.userID = this.jsonData.userid),
                this.jsonData.name && (this.object.name = this.jsonData.name),
                this.object.jsonData = this.jsonData,
                this.jsonData.position) {
                    var e = this.jsonData.position.slice();
                    e[2] = -e[2],
                    this.object.position = e
                }
                if (this.jsonData.scale) {
                    var t = this.jsonData.scale.slice();
                    0 === t[0] && (t[0] = .01),
                    0 === t[1] && (t[1] = .01),
                    0 === t[2] && (t[2] = .01),
                    this.object.scale = t
                }
                if (this.jsonData.rotation) {
                    var i = this.jsonData.rotation.slice();
                    i[2] = -i[2],
                    i[3] = -i[3],
                    this.object.rotation = i
                }
                if (this.jsonData.properties && (this.object.properties = this.jsonData.properties,
                this.object.lowerCaseProperties = this.convertPropertiesToLowerCase(this.jsonData.properties)),
                Fc.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                this.jsonData.caminfo) {
                    var r = this.jsonData.caminfo.eye
                      , n = this.jsonData.caminfo.target;
                    r[2] = -r[2],
                    n[2] = -n[2],
                    this.object.camInfo = {
                        eye: r,
                        target: n
                    }
                }
            }
        }, {
            key: "convertPropertiesToLowerCase",
            value: function(e) {
                var t = {};
                for (var i in e) {
                    var r = e[i];
                    "string" != typeof r && (r = String(r)),
                    t[i.toLowerCase()] = r.toLowerCase()
                }
                return t
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                this.creatorManager.createObject(e)
            }
        }]),
        e
    }()
      , Ic = 0
      , Nc = 1
      , Hc = 2
      , Uc = 3
      , zc = 4
      , Vc = 5
      , Wc = 6
      , Gc = 7
      , qc = 8
      , Xc = 9
      , Jc = 10
      , Yc = 11
      , Qc = 12
      , Zc = 13
      , Kc = 14
      , $c = 15
      , eh = 16
      , th = 17
      , ih = 18
      , rh = 19
      , nh = 20
      , oh = 21
      , sh = 24
      , ah = 25
      , lh = 26
      , uh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                if (e.outdoors) {
                    var t = this._parseJsonDataChild({
                        jsonData: e.outdoors,
                        creatorType: Jc
                    });
                    this.object.outdoors = t
                }
                e.buildings && this._parseJsonDataChildren({
                    jsonData: e.buildings,
                    creatorType: Nc
                })
            }
        }]),
        t
    }(Lc)
      , ch = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                Fc.checkValueEmpty(this.jsonData.structshow) || (this.object.structShow = this.jsonData.structshow),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.facades && this._parseJsonDataChildren({
                    jsonData: e.facades,
                    creatorType: Yc
                }),
                e.facadegroups && this._parseJsonDataChildren({
                    jsonData: e.facadegroups,
                    creatorType: Qc
                }),
                e.plans && this._parseJsonDataChildren({
                    jsonData: e.plans,
                    creatorType: Hc
                })
            }
        }]),
        t
    }(Lc)
      , hh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                Fc.checkValueEmpty(this.jsonData.alwaysshowinsideobjs) || (this.object.alwaysShowInsideObjs = this.jsonData.alwaysshowinsideobjs),
                Fc.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.corners && this._parseCorners(e.corners),
                e.walls && this._parseWalls(e.walls),
                e.rooms && (this._parseJsonDataChildren({
                    jsonData: e.rooms,
                    creatorType: Xc
                }),
                this.object.calRoomsUV2()),
                e.placements && this._parseJsonDataChildren({
                    jsonData: e.placements,
                    creatorType: Wc
                }),
                e.groups && this._parseJsonDataChildren({
                    jsonData: e.groups,
                    creatorType: Gc
                }),
                e.curvelines && this._parseJsonDataChildren({
                    jsonData: e.curvelines,
                    creatorType: Zc
                }),
                e.routelines && this._parseJsonDataChildren({
                    jsonData: e.routelines,
                    creatorType: ih
                }),
                e.leakwaterlines && this._parseJsonDataChildren({
                    jsonData: e.leakwaterlines,
                    creatorType: Kc
                }),
                e.arrowlines && this._parseJsonDataChildren({
                    jsonData: e.arrowlines,
                    creatorType: $c
                }),
                e.arrowdatalines && this._parseJsonDataChildren({
                    jsonData: e.arrowdatalines,
                    creatorType: eh
                }),
                e.pipelines && this._parseJsonDataChildren({
                    jsonData: e.pipelines,
                    creatorType: th
                }),
                e.videoprobes && this._parseJsonDataChildren({
                    jsonData: e.videoprobes,
                    creatorType: rh
                }),
                e.grounds && this._parseJsonDataChildren({
                    jsonData: e.grounds,
                    creatorType: oh
                })
            }
        }, {
            key: "_parseCorners",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = i[0]
                      , n = i[1]
                      , o = -i[2];
                    this.object.existsCorner(r, n, o) ? console.error("repeat corner") : this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Uc
                    })
                }
            }
        }, {
            key: "_parseWalls",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = null;
                    0 === i.type ? r = this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Vc
                    }) : 1 === i.type ? r = this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: zc
                    }) : 2 === i.type && (r = this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: nh
                    })),
                    i.doororwindows && this._parseDoorOrWindows(i.doororwindows, r)
                }
            }
        }, {
            key: "_parseDoorOrWindows",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    var r = e[i];
                    this._parseJsonDataChild({
                        jsonData: r,
                        attachWall: t,
                        creatorType: qc
                    })
                }
            }
        }]),
        t
    }(Lc)
      , ph = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "WallCorner",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.jsonData[0]
                  , r = this.jsonData[1]
                  , n = -this.jsonData[2];
                return this.object.position = [i, r, n],
                this.object
            }
        }]),
        t
    }(Lc)
      , dh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ModelWall",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this._parseCorners(),
                Fc.checkValueEmpty(this.jsonData.model) || (this.object.resource = this.resourceManager.models[this.jsonData.model]),
                Fc.checkValueEmpty(this.jsonData.height) ? this.object.height = this.object.resource.size[1] : this.object.height = this.jsonData.height,
                Fc.checkValueEmpty(this.jsonData.thick) || (this.object.thick = this.jsonData.thick),
                this.object
            }
        }, {
            key: "_parseCorners",
            value: function() {
                var e = this.jsonData.corners
                  , t = this.objectParent.typeToChildren.WallCorner;
                this.object.startCorner = t[e[0]],
                this.object.endCorner = t[e[1]]
            }
        }]),
        t
    }(Lc)
      , fh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "StraightManualWall",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this._parseCorners(),
                this._parseResources(),
                this.jsonData.uvmultiple && (this.object.uvMultiple = this.jsonData.uvmultiple),
                Fc.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                Fc.checkValueEmpty(this.jsonData.thick) || (this.object.thick = this.jsonData.thick),
                this.object
            }
        }, {
            key: "_parseCorners",
            value: function() {
                var e = this.jsonData.corners
                  , t = this.objectParent.typeToChildren.WallCorner;
                this.object.startCorner = t[e[0]],
                this.object.endCorner = t[e[1]]
            }
        }, {
            key: "_parseResources",
            value: function() {
                Fc.checkValueEmpty(this.jsonData.lefttexture) || (this.object.leftResource = this.resourceManager.textures[this.jsonData.lefttexture]),
                Fc.checkValueEmpty(this.jsonData.righttexture) || (this.object.rightResource = this.resourceManager.textures[this.jsonData.righttexture]),
                Fc.checkValueEmpty(this.jsonData.edgetexture) || (this.object.edgeResource = this.resourceManager.textures[this.jsonData.edgetexture]),
                this.resourceManager.wallLightMapResource && (this.object.lightMapResource = this.resourceManager.wallLightMapResource)
            }
        }]),
        t
    }(Lc)
      , mh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Placement",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                if (Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                Fc.checkValueEmpty(this.jsonData.texture) || (this.object.customTextureResource = this.resourceManager.textures[this.jsonData.texture]),
                this.jsonData.color) {
                    var i = this.jsonData.color;
                    this.object.customColor = new THREE.Color(i[0],i[1],i[2]),
                    4 === i.length && (this.object.opacity = i[3])
                }
                return Fc.checkValueEmpty(this.jsonData.rendermode) || (this.object.renderMode = this.jsonData.rendermode),
                this.jsonData.animinfo && (this.object.isPlayAnim = this.jsonData.animinfo.isplay,
                this.object.animClip = this.jsonData.animinfo.clip),
                Fc.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Lc)
      , gh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementGroup",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.jsonData.placements && this._parseJsonDataChildren({
                    jsonData: this.jsonData.placements,
                    creatorType: Wc
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Gc
                }),
                this.jsonData.videoprobes && this._parseJsonDataChildren({
                    jsonData: this.jsonData.videoprobes,
                    creatorType: rh
                }),
                Fc.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Lc)
      , vh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "DoorOrWindow",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "initData",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "initData", this).call(this, e),
                this.attachWall = e.attachWall
            }
        }, {
            key: "create",
            value: function(e) {
                if (Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                Fc.checkValueEmpty(this.jsonData.suspendpercent) || (this.object.suspendPercent = this.jsonData.suspendpercent),
                Fc.checkValueEmpty(this.jsonData.isopen) || (this.object.isOpen = this.jsonData.isopen),
                Fc.checkValueEmpty(this.jsonData.diridx) || (this.object.openDirIndex = this.jsonData.diridx),
                !Fc.checkValueEmpty(this.jsonData.iswindow)) {
                    var i = this.jsonData.iswindow;
                    "string" == typeof i && (i = "false" !== i.toLocaleString()),
                    this.object.isWindow = i
                }
                return this.object.attachWall = this.attachWall,
                this.attachWall.doorOrWindows.push(this.object),
                this.object
            }
        }]),
        t
    }(Lc);
    function yh(e, t) {
        if (!(this instanceof yh))
            return new yh(e,t);
        if (this.data = e || [],
        this.length = this.data.length,
        this.compare = t || bh,
        this.length > 0)
            for (var i = (this.length >> 1) - 1; i >= 0; i--)
                this._down(i)
    }
    function bh(e, t) {
        return e < t ? -1 : e > t ? 1 : 0
    }
    function _h(e, t, i) {
        var r, n, o, s;
        t = t || 1;
        for (var a = 0; a < e[0].length; a++) {
            var l = e[0][a];
            (!a || l[0] < r) && (r = l[0]),
            (!a || l[1] < n) && (n = l[1]),
            (!a || l[0] > o) && (o = l[0]),
            (!a || l[1] > s) && (s = l[1])
        }
        var u = o - r
          , c = s - n
          , h = Math.min(u, c)
          , p = h / 2
          , d = new yh(null,xh);
        if (0 === h)
            return [r, n];
        for (var f = r; f < o; f += h)
            for (var m = n; m < s; m += h)
                d.push(new Eh(f + p,m + p,p,e));
        var g = function(e) {
            for (var t = 0, i = 0, r = 0, n = e[0], o = 0, s = n.length, a = s - 1; o < s; a = o++) {
                var l = n[o]
                  , u = n[a]
                  , c = l[0] * u[1] - u[0] * l[1];
                i += (l[0] + u[0]) * c,
                r += (l[1] + u[1]) * c,
                t += 3 * c
            }
            return 0 === t ? new Eh(n[0][0],n[0][1],0,e) : new Eh(i / t,r / t,0,e)
        }(e)
          , v = new Eh(r + u / 2,n + c / 2,0,e);
        v.d > g.d && (g = v);
        for (var y = d.length; d.length; ) {
            var b = d.pop();
            b.d > g.d && (g = b,
            i && console.log("found best %d after %d probes", Math.round(1e4 * b.d) / 1e4, y)),
            b.max - g.d <= t || (p = b.h / 2,
            d.push(new Eh(b.x - p,b.y - p,p,e)),
            d.push(new Eh(b.x + p,b.y - p,p,e)),
            d.push(new Eh(b.x - p,b.y + p,p,e)),
            d.push(new Eh(b.x + p,b.y + p,p,e)),
            y += 4)
        }
        return i && (console.log("num probes: " + y),
        console.log("best distance: " + g.d)),
        [g.x, g.y]
    }
    function xh(e, t) {
        return t.max - e.max
    }
    function Eh(e, t, i, r) {
        this.x = e,
        this.y = t,
        this.h = i,
        this.d = function(e, t, i) {
            for (var r = !1, n = 1 / 0, o = 0; o < i.length; o++)
                for (var s = i[o], a = 0, l = s.length, u = l - 1; a < l; u = a++) {
                    var c = s[a]
                      , h = s[u];
                    c[1] > t != h[1] > t && e < (h[0] - c[0]) * (t - c[1]) / (h[1] - c[1]) + c[0] && (r = !r),
                    n = Math.min(n, wh(e, t, c, h))
                }
            return (r ? 1 : -1) * Math.sqrt(n)
        }(e, t, r),
        this.max = this.d + this.h * Math.SQRT2
    }
    function wh(e, t, i, r) {
        var n = i[0]
          , o = i[1]
          , s = r[0] - n
          , a = r[1] - o;
        if (0 !== s || 0 !== a) {
            var l = ((e - n) * s + (t - o) * a) / (s * s + a * a);
            l > 1 ? (n = r[0],
            o = r[1]) : l > 0 && (n += s * l,
            o += a * l)
        }
        return (s = e - n) * s + (a = t - o) * a
    }
    yh.prototype = {
        push: function(e) {
            this.data.push(e),
            this.length++,
            this._up(this.length - 1)
        },
        pop: function() {
            if (0 !== this.length) {
                var e = this.data[0];
                return this.length--,
                this.length > 0 && (this.data[0] = this.data[this.length],
                this._down(0)),
                this.data.pop(),
                e
            }
        },
        peek: function() {
            return this.data[0]
        },
        _up: function(e) {
            for (var t = this.data, i = this.compare, r = t[e]; e > 0; ) {
                var n = e - 1 >> 1
                  , o = t[n];
                if (i(r, o) >= 0)
                    break;
                t[e] = o,
                e = n
            }
            t[e] = r
        },
        _down: function(e) {
            for (var t = this.data, i = this.compare, r = this.length >> 1, n = t[e]; e < r; ) {
                var o = 1 + (e << 1)
                  , s = o + 1
                  , a = t[o];
                if (s < this.length && i(t[s], a) < 0 && (o = s,
                a = t[s]),
                i(a, n) >= 0)
                    break;
                t[e] = a,
                e = o
            }
            t[e] = n
        }
    };
    var Th = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this._createChildren(),
                this._parseCorners(),
                this._parsePoints(),
                0 === this.object.points.length && console.warn("room points is null"),
                this._parseHolesCorners(),
                this._parseHolesPoints(),
                this._parseRoomResources(),
                this._parseRoomHeight(),
                this._parseRoomBlockSize(),
                this._parseRoomVisible(),
                this._parseRoomBlockAngle(),
                this._setOutdoorFloorHeight(),
                this.object.position = this._calRoomPosition(this.object),
                this._subRoomHolesPointsByPosition(this.object, this.object.position),
                this._subRoomPointsByPosition(this.object, this.object.position),
                this.object
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: sh
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: ah
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: lh
                }))
            }
        }, {
            key: "_parseCorners",
            value: function() {
                if (this.jsonData.corners) {
                    for (var e = [], t = this.objectParent.typeToChildren.WallCorner, i = 0; i < this.jsonData.corners.length; i++) {
                        var r = t[this.jsonData.corners[i]].position.slice();
                        e.push(r)
                    }
                    this.object.points = e
                }
            }
        }, {
            key: "_parsePoints",
            value: function() {
                if (this.jsonData.points) {
                    for (var e = [], t = 0; t < this.jsonData.points.length; t++) {
                        var i = this.jsonData.points[t]
                          , r = [i[0], i[1], -i[2]];
                        e.push(r)
                    }
                    this.object.points = e
                }
            }
        }, {
            key: "_parseHolesCorners",
            value: function() {
                if (this.jsonData.holescorners) {
                    for (var e = [], t = this.objectParent.typeToChildren.WallCorner, i = 0; i < this.jsonData.holescorners.length; i++) {
                        for (var r = this.jsonData.holescorners[i], n = [], o = 0; o < r.length; o++) {
                            var s = r[o];
                            n.push(t[s].position.slice())
                        }
                        e.push(n)
                    }
                    this.object.holes = e
                }
            }
        }, {
            key: "_parseHolesPoints",
            value: function() {
                if (this.jsonData.holespoints) {
                    for (var e = [], t = 0; t < this.jsonData.holespoints.length; t++) {
                        for (var i = this.jsonData.holespoints[t], r = [], n = 0; n < i.length; n++) {
                            var o = i[n]
                              , s = [o[0], o[1], -o[2]];
                            r.push(s)
                        }
                        e.push(r)
                    }
                    this.object.holes = e
                }
            }
        }, {
            key: "_parseRoomResources",
            value: function() {
                null !== this.jsonData.floortexture && void 0 !== this.jsonData.floortexture && (this.object.floorResource = this.resourceManager.textures[this.jsonData.floortexture],
                this.object.floor.resource = this.object.floorResource),
                this.object.ceiling && null !== this.jsonData.ceilingtexture && void 0 !== this.jsonData.ceilingtexture && (this.object.ceilingResource = this.resourceManager.textures[this.jsonData.ceilingtexture],
                this.object.ceiling.resource = this.object.ceilingResource),
                this.object.roof && null !== this.jsonData.rooftexture && void 0 !== this.jsonData.rooftexture && (this.object.roofResource = this.resourceManager.textures[this.jsonData.rooftexture],
                this.object.roof.resource = this.object.roofResource)
            }
        }, {
            key: "_parseRoomHeight",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                t.ceiling && (void 0 !== e.ceilingheight ? t.ceiling.height = e.ceilingheight : (t.ceiling.DefaultHeight = this.objectParent.height - .1,
                t.ceiling.height = t.ceiling.DefaultHeight)),
                t.roof && (void 0 !== e.roofheight ? t.roof.height = e.roofheight : (t.roof.defaultHeight = this.objectParent.height,
                t.roof.height = t.roof.defaultHeight)),
                void 0 !== e.floorheight && (t.floor.height = e.floorheight)
            }
        }, {
            key: "_parseRoomVisible",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                t.floor && void 0 !== e.isshowfloor && (t.floor.visible = e.isshowfloor),
                t.ceiling && void 0 !== e.isshowceiling && (t.ceiling.visible = e.isshowceiling),
                t.roof && void 0 !== e.isshowroof && (t.roof.visible = e.isshowroof)
            }
        }, {
            key: "_parseRoomBlockSize",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                if (t.floor && e.floorblocksize) {
                    var i = e.floorblocksize;
                    t.floor.blockSize = [i[0], i[1]]
                }
                if (t.ceiling && e.ceilingblocksize) {
                    i = e.ceilingblocksize;
                    t.ceiling.blockSize = [i[0], i[1]]
                }
                if (t.roof && e.roofblocksize) {
                    i = e.roofblocksize;
                    t.roof.blockSize = [i[0], i[1]]
                }
            }
        }, {
            key: "_parseRoomBlockAngle",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                t.floor && e.floorblockangle && (t.floor.blockAngle = e.floorblockangle),
                t.ceiling && e.ceilingblockangle && (t.ceiling.blockAngle = e.ceilingblockangle),
                t.roof && e.roofblockangle && (t.roof.blockAngle = e.roofblockangle)
            }
        }, {
            key: "_setOutdoorFloorHeight",
            value: function() {
                var e = this.objectParent
                  , t = this.object;
                "Outdoors" === e.type && t.floor.height === t.floor.DefaultHeight && (t.floor.height = 0,
                t.floor.DefaultHeight = 0)
            }
        }, {
            key: "_calRoomPosition",
            value: function(e) {
                for (var t = e.points, i = e.holes, r = [], n = [], o = 0; o < t.length; o++) {
                    var s = t[o];
                    r.push([s[0], s[2]])
                }
                if (i.length > 2 && !this._isSamePoints(i))
                    for (o = 0; o < i.length; o++) {
                        for (var a = i[o], l = [], u = 0; u < a.length; u++) {
                            s = a[u];
                            l.push([s[0], s[2]])
                        }
                        n.push(l)
                    }
                var c = this._getLabelPosition(r, n);
                return c || [0, 0, 0]
            }
        }, {
            key: "_isSamePoints",
            value: function(e) {
                for (var t = e[0], i = 1; i < e.length; i++) {
                    var r = e[i];
                    if (t[0] !== r[0] || t[1] !== r[1] || t[2] !== r[2])
                        return !1
                }
                return !0
            }
        }, {
            key: "_getLabelPosition",
            value: function(e, t) {
                if (!e || !e.length)
                    return null;
                var i = [];
                i.push(e);
                var r = _h(i);
                return [r[0], 0, r[1]]
            }
        }, {
            key: "_subRoomPointsByPosition",
            value: function(e, t) {
                for (var i = e.points, r = 0; r < i.length; r++) {
                    var n = i[r];
                    n[0] -= t[0],
                    n[1] -= t[1],
                    n[2] -= t[2]
                }
                e.points = i
            }
        }, {
            key: "_subRoomHolesPointsByPosition",
            value: function(e, t) {
                for (var i = e.holes, r = 0; r < i.length; r++)
                    for (var n = i[r], o = 0; o < n.length; o++) {
                        var s = n[o];
                        s[0] -= t[0],
                        s[1] -= t[1],
                        s[2] -= t[2]
                    }
                e.holes = i
            }
        }]),
        t
    }(Lc)
      , Mh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return kc(t, e),
        t
    }(hh)
      , Ch = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Facade",
            i
        }
        return kc(t, e),
        t
    }(mh)
      , Sh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FacadeGroup",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                this.initData(e);
                var t = this._getCreateParams();
                return this.object = this.creatorManager.objectManager.create(t),
                t.parent && (this.object.parent = t.parent),
                this._loadBaseData(),
                this.jsonData.facades && this._parseJsonDataChildren({
                    jsonData: this.jsonData.facades,
                    creatorType: Yc
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Qc
                }),
                Fc.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(gh)
      , jh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CurveLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.jsonData;
                if (Fc.checkValueEmpty(this.jsonData.texture) ? this.object.resource = this.resourceManager.emptyTextureResource : this.object.resource = this.resourceManager.textures[this.jsonData.texture],
                this.jsonData.color) {
                    var r = this.jsonData.color;
                    this.object.color = r,
                    4 === r.length && (this.object.opacity = r[3])
                }
                if (void 0 !== i.textiling) {
                    var n = i.textiling;
                    this.object.textureTiling = n
                }
                if (void 0 !== i.texoffset) {
                    var o = i.texoffset;
                    this.object.textureOffset = o
                }
                !Fc.checkValueEmpty(this.jsonData.width) && (this.object.width = this.jsonData.width),
                this.jsonData.enableanim && (this.object.enableMaterialAnimation = this.jsonData.enableanim),
                !Fc.checkValueEmpty(this.jsonData.matanimspeed) && (this.object.materialAnimationSpeed = this.jsonData.matanimspeed);
                for (var s = this.jsonData.path, a = 0; a < s.length; a++) {
                    var l = s[a];
                    l[2] = -l[2],
                    this.object.points.push(l)
                }
                return this.object
            }
        }]),
        t
    }(Lc)
      , Ph = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PipeLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                if (Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                Fc.checkValueEmpty(this.jsonData.texture) ? this.object.resource = this.resourceManager.emptyTextureResource : this.object.resource = this.resourceManager.textures[this.jsonData.texture],
                this.jsonData.color) {
                    var i = this.jsonData.color;
                    this.object.color = i,
                    4 === i.length && (this.object.opacity = i[3])
                }
                this.jsonData.sectionType && (this.object.sectionType = this.jsonData.sectionType),
                !Fc.checkValueEmpty(this.jsonData.rendermode) && (this.object.renderMode = this.jsonData.rendermode),
                !Fc.checkValueEmpty(this.jsonData.radius) && (this.object.radius = this.jsonData.radius),
                this.jsonData.enableanim && (this.object.enableMaterialAnimation = this.jsonData.enableanim),
                !Fc.checkValueEmpty(this.jsonData.matanimspeed) && (this.object.materialAnimationSpeed = this.jsonData.matanimspeed);
                for (var r = this.jsonData.path, n = 0; n < r.length; n++) {
                    var o = r[n];
                    o[2] = -o[2],
                    this.object.points.push(o)
                }
                return this.object
            }
        }]),
        t
    }(Lc)
      , Rh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "LeakWaterLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.jsonData.alarmlength && (this.object.alarmLength = this.jsonData.alarmlength),
                this.object
            }
        }]),
        t
    }(Ph)
      , Dh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ArrowLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.object
                  , r = this.jsonData;
                return null !== i.width && (i.arrowWidth = 3 * i.width,
                i.arrowHeight = 2 * i.width),
                r.arrow ? (Fc.checkValueEmpty(r.arrow.texture) ? i.arrowResource = this.resourceManager.emptyTextureResource : i.arrowResource = this.resourceManager.textures[r.arrow.texture],
                r.arrow.width && (i.arrowWidth = r.arrow.width),
                r.arrow.height && (i.arrowHeight = r.arrow.height)) : i.arrowResource = this.resourceManager.emptyTextureResource,
                this.object
            }
        }]),
        t
    }(jh)
      , Ah = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ArrowDataLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.object
                  , r = this.jsonData;
                if (r.pointuserids) {
                    var n = r.pointuserids;
                    i.pointUserIDs = n
                }
                if (r.pointproperteis) {
                    var o = r.pointproperteis;
                    i.pointProperteis = o
                }
                return this.object
            }
        }]),
        t
    }(Dh)
      , kh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "RouteLine",
            i
        }
        return kc(t, e),
        t
    }(jh)
      , Oh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "VideoProbe",
            i
        }
        return kc(t, e),
        t
    }(mh)
      , Bh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementWall",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }]),
        t
    }(mh)
      , Fh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementGround",
            i
        }
        return kc(t, e),
        t
    }(mh)
      , Lh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Ceiling",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Lc)
      , Ih = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Roof",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Lc)
      , Nh = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Floor",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Lc)
      , Hh = function() {
        function e(t) {
            Rc(this, e),
            this._map = {
                0: uh,
                1: ch,
                2: hh,
                3: ph,
                4: dh,
                5: fh,
                6: mh,
                7: gh,
                8: vh,
                9: Th,
                10: Mh,
                11: Ch,
                12: Sh,
                13: jh,
                14: Rh,
                15: Dh,
                16: Ah,
                17: Ph,
                18: kh,
                19: Oh,
                20: Bh,
                21: Fh,
                24: Nh,
                25: Lh,
                26: Ih
            }
        }
        return Dc(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , Uh = function() {
        function e(t) {
            Rc(this, e),
            this.config = new Hh,
            this.objectManager = null,
            this.creatorMap = {},
            this.creatorTypePlaceholderMap = {}
        }
        return Dc(e, [{
            key: "createObject",
            value: function(e) {
                var t = e.creatorType
                  , i = null;
                this.creatorMap[t] && !this.creatorTypePlaceholderMap[t] ? i = this.creatorMap[t] : (i = new (this.config.getClass(t))({
                    creatorManager: this
                }),
                this.creatorMap[t] = i);
                this.creatorTypePlaceholderMap[t] || (this.creatorTypePlaceholderMap[t] = e.jsonData.id);
                var r = i.create(e)
                  , n = !0;
                return void 0 !== e.enableCreateChildren && null !== e.enableCreateChildren && (n = e.enableCreateChildren),
                n && i.parseChildren(),
                this.creatorTypePlaceholderMap[t] === r.id && (this.creatorTypePlaceholderMap[t] = null),
                r
            }
        }]),
        e
    }()
      , zh = function() {
        function e(t) {
            Rc(this, e),
            this.manager = t,
            this.baseModelUrl = this.manager.baseModelUrl,
            this.baseTextureUrl = this.manager.baseTextureUrl,
            this.userDefaultWallLightMap = !0
        }
        return Dc(e, [{
            key: "createResource",
            value: function(e, t) {
                var i = this.manager.create({
                    id: e,
                    type: t
                });
                return i.manager = this.manager,
                i
            }
        }, {
            key: "loadLightMaps",
            value: function(e) {
                var t = null
                  , i = "18091219l1g1hnjt"
                  , r = "png";
                e && e.straightmanualwall && e.straightmanualwall.lightingtexture && (i = e.straightmanualwall.lightingtexture.id,
                r = e.straightmanualwall.lightingtexture.ext,
                this.manager.userDefaultWallLightMap = !1),
                (t = this.createResource(i, this.manager.ClassName.TextureResource)).baseUrl = this.manager.baseTextureUrl,
                t.id = i,
                t.ext = r,
                this.manager.wallLightMapResource = t,
                this.manager.textures.push(t)
            }
        }, {
            key: "loadTextures",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    t = r.localurl ? this._loadLocalCustomTextureResource(r) : this._loadTextureResource(r),
                    this.manager.textures.push(t)
                }
            }
        }, {
            key: "_loadLocalCustomTextureResource",
            value: function(e) {
                var t = this.createResource(e.id, "LocalCustomTextureResource");
                return t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadTextureResource",
            value: function(e) {
                var t = this.createResource(e.id, this.manager.ClassName.TextureResource);
                return this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadBaseTextureResourceData",
            value: function(e, t) {
                t.id = e.id,
                t.ext = e.ext,
                e.url && (t.url = e.url),
                t.baseUrl = this.baseTextureUrl,
                e.isDefault && (t.isDefault = e.isDefault)
            }
        }, {
            key: "loadModels",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    (t = r.model ? this.createResource(r.id, "CustomResource") : r.localurl ? this.createResource(r.id, "CustomModelResource") : this.createResource(r.id, this.manager.ClassName.ModelResource)).baseUrl = this.baseModelUrl,
                    r.localurl ? this._parseCustomModelReousrce(t, r) : r.id && this._parseCustomResource(t, r);
                    for (var n = 0; n < this.manager.ableToSupportFootAndHeadModelWalls.length; n++) {
                        var o = this.manager.ableToSupportFootAndHeadModelWalls[n];
                        if (t.id === o) {
                            t.isSupportHeadAndFootModelWall = !0;
                            break
                        }
                    }
                    this.manager.models.push(t)
                }
            }
        }, {
            key: "loadCustomModelResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t),
                e.localurl && (t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]))
            }
        }, {
            key: "loadCustomResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t)
            }
        }, {
            key: "loadBaseResourceData",
            value: function(e, t) {
                if (t.id = e.id,
                t.modelID = e.id,
                t.version = e.version,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]),
                e.rendermode && (t.renderMode = e.rendermode),
                e.model && (t.modelID = e.model),
                e.title && (t.modelName = e.title),
                e.color) {
                    var i = e.color;
                    t.color = [i[0], i[1], i[2]],
                    4 === i.length && (t.opacity = i[3])
                }
                if (e.size) {
                    var r = e.size;
                    t.modelSize = [r[0], r[1], r[2]]
                }
                e.hasanimation && (t.hasAnim = e.hasanimation)
            }
        }, {
            key: "_parseCustomModelReousrce",
            value: function(e, t) {
                if (e.localUrl = t.localurl,
                e.id = t.id,
                e.localBaseUrl = this.manager.localCustomModelBaseUrl,
                t.title && (e.modelName = t.title),
                e.modelID = t.id,
                null !== t.texture && void 0 !== t.texture && (e.customTexture = this.manager.textures[t.texture]),
                t.rendermode && (e.renderMode = t.rendermode),
                t.color) {
                    var i = t.color;
                    e.color = [i[0], i[1], i[2]],
                    4 === i.length && (e.opacity = i[3])
                }
                if (t.size) {
                    var r = t.size;
                    e.size = r
                }
            }
        }, {
            key: "_parseCustomResource",
            value: function(e, t) {
                if (e.id = t.id,
                e.modelID = t.id,
                e.version = t.version,
                null !== t.texture && void 0 !== t.texture && (e.customTexture = this.manager.textures[t.texture]),
                t.rendermode && (e.renderMode = t.rendermode),
                t.model && (e.modelID = t.model),
                t.title && (e.modelName = t.title),
                t.color) {
                    var i = t.color;
                    e.color = [i[0], i[1], i[2]],
                    4 === i.length && (e.opacity = i[3])
                }
                if (t.size) {
                    var r = t.size;
                    e.size = r
                }
                t.hasanimation && (e.hasAnim = t.hasanimation),
                t.url && (e.url = t.url)
            }
        }]),
        e
    }()
      , Vh = function() {
        function e() {
            Rc(this, e),
            this.sceneJson = null,
            this.scale = 1,
            this.curFloorPlan = null,
            this.enableCombine = !0,
            this.world = null,
            this.resourceManager = null,
            this.defaultSetting = null,
            this.defaultResource = null,
            this.creatorTypeConfig = new Hh,
            this.creatorManager = new Uh
        }
        return Dc(e, [{
            key: "setObjectTypeConfig",
            value: function(e) {
                objectManager.objectTypeConfig = e
            }
        }, {
            key: "setObjectManager",
            value: function(e) {
                this.creatorManager.objectManager = e
            }
        }, {
            key: "setResourceManager",
            value: function(e) {
                this.resourceManager = e
            }
        }, {
            key: "setDefaultSetting",
            value: function(e) {
                this.defaultSetting = e
            }
        }, {
            key: "setDefaultResource",
            value: function(e) {
                this.defaultResource = e
            }
        }, {
            key: "loadLightMaps",
            value: function(e) {
                var t = null
                  , i = "18091219l1g1hnjt"
                  , r = "png";
                this.defaultSetting.userDefaultWallLightMap = !0,
                e && e.straightmanualwall && e.straightmanualwall.lightingtexture && (i = e.straightmanualwall.lightingtexture.id,
                r = e.straightmanualwall.lightingtexture.ext,
                this.defaultSetting.userDefaultWallLightMap = !1),
                this.defaultSetting.enableManaulWallLightMap && ((t = this.createResource(this.resourceManager.ClassName.TextureResource)).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = i,
                t.ext = r,
                this.defaultResource.wallLightMapResource = t),
                this.defaultSetting.enableFloorLightMap && ((t = this.createResource(this.resourceManager.ClassName.TextureResource)).baseUrl = this.resourceManager.baseTextureUrl,
                t.id = "18091216vjlgtwbh",
                t.ext = "jpg",
                this.defaultResource.floorLightMapResource = t)
            }
        }, {
            key: "createResource",
            value: function(e) {
                var t = this.resourceManager.create({
                    type: e
                });
                return t.manager = this.resourceManager,
                t
            }
        }, {
            key: "parseObjects",
            value: function(e) {
                return e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl && (this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl),
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }, {
            key: "getParentRelativeUrl",
            value: function(e) {
                for (var t = e.split("/"), i = "", r = 0; r < t.length - 1; r++) {
                    i += t[r] + "/"
                }
                return i
            }
        }, {
            key: "loadSceneJson",
            value: function() {
                var e = this;
                return new Promise((function(t, i) {
                    if (e.sceneJson)
                        t(e.sceneJson);
                    else if (e.sceneURL) {
                        (new THREE.FileLoader).load(e.sceneURL, (function(i) {
                            e.sceneJson = JSON.parse(i),
                            t()
                        }
                        ), (function() {}
                        ), (function(t) {
                            i("can not load " + e.sceneURL)
                        }
                        ))
                    } else
                        i("load scene json error")
                }
                ))
            }
        }, {
            key: "getResourceLoader",
            value: function() {
                return new zh(this.resourceManager)
            }
        }, {
            key: "parseSceneJson",
            value: function() {
                this.parseResources(this.sceneJson, this.resourceManager),
                this.parseWorld(this.sceneJson)
            }
        }, {
            key: "parseResources",
            value: function(e, t) {
                var i = new zh(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models),
                i.loadLightMaps(e.materialsetting)
            }
        }, {
            key: "parseWorld",
            value: function(e) {
                this.world = this.creatorManager.createObject({
                    jsonData: e,
                    resourceManager: this.resourceManager,
                    creatorType: Ic
                })
            }
        }, {
            key: "getCreatorManager",
            value: function() {
                return this.creatorManager
            }
        }, {
            key: "getCreatorConfig",
            value: function() {
                return new Hh
            }
        }]),
        e
    }()
      , Wh = function() {
        function e(t) {
            Rc(this, e),
            this.creatorManager = t.creatorManager
        }
        return Dc(e, [{
            key: "initData",
            value: function(e) {
                this.id = null,
                this.name = null,
                this.userID = null,
                this.properties = null,
                this.jsonData = e.jsonData,
                this.objectParent = null,
                e.parent && (this.objectParent = e.parent),
                this.resourceManager = e.resourceManager
            }
        }, {
            key: "create",
            value: function(e) {
                this.initData(e);
                var t = this._getCreateParams();
                return this.object = this.creatorManager.objectManager.create(t),
                t.parent && (this.object.parent = t.parent),
                this._loadBaseData(),
                this.object
            }
        }, {
            key: "_loadBaseData",
            value: function() {
                if (this.jsonData.id && (this.object.id = this.jsonData.id),
                this.jsonData.userid && (this.object.userID = this.jsonData.userid),
                this.jsonData.name && (this.object.name = this.jsonData.name),
                this.object.jsonData = this.jsonData,
                this._initIDOnesPlaceNumber(),
                this.jsonData.position) {
                    var e = this.jsonData.position.slice();
                    this._decodePosition(e),
                    e[2] = -e[2],
                    this.object.position = e
                }
                if (this.jsonData.scale) {
                    var t = this.jsonData.scale.slice();
                    this._decodeScale(t),
                    0 === t[0] && (t[0] = .01),
                    0 === t[1] && (t[1] = .01),
                    0 === t[2] && (t[2] = .01),
                    this.object.scale = t
                }
                if (this.jsonData.rotation) {
                    var i = this.jsonData.rotation.slice();
                    this._decodeRotation(i),
                    i[2] = -i[2],
                    i[3] = -i[3],
                    this.object.rotation = i
                }
                if (this.jsonData.properties && (this.object.properties = this.jsonData.properties,
                this.object.lowerCaseProperties = this.convertPropertiesToLowerCase(this.jsonData.properties)),
                Fc.checkValueEmpty(this.jsonData.isshow) || (this.object.visible = this.jsonData.isshow),
                this.jsonData.caminfo) {
                    var r = this.jsonData.caminfo.eye
                      , n = this.jsonData.caminfo.target;
                    r[2] = -r[2],
                    n[2] = -n[2],
                    this.object.camInfo = {
                        eye: r,
                        target: n
                    }
                }
            }
        }, {
            key: "_initIDOnesPlaceNumber",
            value: function() {
                var e = this.object.id
                  , t = -1
                  , i = Number(e);
                if (isNaN(i)) {
                    if (t = 0,
                    this._isUUID(e)) {
                        var r = e.slice(e.length - 2);
                        if (r) {
                            var n = parseInt(r, 16);
                            isNaN(n) || (t = n)
                        }
                    }
                } else
                    t = (i = parseInt(e.substring(e.length - 1))) % 10;
                this.decodeIDOnesPlace = 1 ^ t
            }
        }, {
            key: "_decodePosition",
            value: function(e) {
                0 !== e[0] && (e[0] = this._decodeNumber(e[0])),
                0 !== e[1] && (e[1] = this._decodeNumber(e[1])),
                0 !== e[2] && (e[2] = this._decodeNumber(e[2]))
            }
        }, {
            key: "_decodeScale",
            value: function(e) {
                1 !== e[0] && (e[0] = this._decodeNumber(e[0])),
                1 !== e[1] && (e[1] = this._decodeNumber(e[1])),
                1 !== e[2] && (e[2] = this._decodeNumber(e[2]))
            }
        }, {
            key: "_decodeRotation",
            value: function(e) {
                0 !== e[0] && (e[0] = this._decodeNumber(e[0])),
                0 !== e[1] && (e[1] = this._decodeNumber(e[1])),
                0 !== e[2] && (e[2] = this._decodeNumber(e[2]))
            }
        }, {
            key: "_decodeNumber",
            value: function(e) {
                return e > 0 ? e - this.decodeIDOnesPlace : e + this.decodeIDOnesPlace
            }
        }, {
            key: "_decodeArray",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    e[t];
                    0 !== e[t] && (e[t] = e[t] > 0 ? e[t] - this.decodeIDOnesPlace : e[t] + this.decodeIDOnesPlace)
                }
            }
        }, {
            key: "convertPropertiesToLowerCase",
            value: function(e) {
                var t = {};
                for (var i in e) {
                    var r = e[i];
                    "string" != typeof r && (r = String(r)),
                    t[i.toLowerCase()] = r.toLowerCase()
                }
                return t
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                this.creatorManager.createObject(e)
            }
        }, {
            key: "_isUUID",
            value: function(e) {
                var t = "" + e;
                return null !== (t = t.match("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"))
            }
        }]),
        e
    }()
      , Gh = 1
      , qh = 2
      , Xh = 3
      , Jh = 4
      , Yh = 5
      , Qh = 6
      , Zh = 7
      , Kh = 8
      , $h = 9
      , ep = 10
      , tp = 11
      , ip = 12
      , rp = 13
      , np = 14
      , op = 15
      , sp = 16
      , ap = 17
      , lp = 18
      , up = 19
      , cp = 20
      , hp = 21
      , pp = 24
      , dp = 25
      , fp = 26
      , mp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                if (e.outdoors) {
                    var t = this._parseJsonDataChild({
                        jsonData: e.outdoors,
                        creatorType: ep
                    });
                    this.object.outdoors = t
                }
                e.buildings && this._parseJsonDataChildren({
                    jsonData: e.buildings,
                    creatorType: Gh
                })
            }
        }]),
        t
    }(Wh)
      , gp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                Fc.checkValueEmpty(this.jsonData.structshow) || (this.object.structShow = this.jsonData.structshow),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.facades && this._parseJsonDataChildren({
                    jsonData: e.facades,
                    creatorType: tp
                }),
                e.facadegroups && this._parseJsonDataChildren({
                    jsonData: e.facadegroups,
                    creatorType: ip
                }),
                e.plans && this._parseJsonDataChildren({
                    jsonData: e.plans,
                    creatorType: qh
                })
            }
        }]),
        t
    }(Wh)
      , vp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                Fc.checkValueEmpty(this.jsonData.alwaysshowinsideobjs) || (this.object.alwaysShowInsideObjs = this.jsonData.alwaysshowinsideobjs),
                Fc.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.corners && this._parseCorners(e.corners),
                e.walls && this._parseWalls(e.walls),
                e.rooms && (this._parseJsonDataChildren({
                    jsonData: e.rooms,
                    creatorType: $h
                }),
                this.object.calRoomsUV2()),
                e.placements && this._parseJsonDataChildren({
                    jsonData: e.placements,
                    creatorType: Qh
                }),
                e.groups && this._parseJsonDataChildren({
                    jsonData: e.groups,
                    creatorType: Zh
                }),
                e.curvelines && this._parseJsonDataChildren({
                    jsonData: e.curvelines,
                    creatorType: rp
                }),
                e.routelines && this._parseJsonDataChildren({
                    jsonData: e.routelines,
                    creatorType: lp
                }),
                e.leakwaterlines && this._parseJsonDataChildren({
                    jsonData: e.leakwaterlines,
                    creatorType: np
                }),
                e.arrowlines && this._parseJsonDataChildren({
                    jsonData: e.arrowlines,
                    creatorType: op
                }),
                e.arrowdatalines && this._parseJsonDataChildren({
                    jsonData: e.arrowdatalines,
                    creatorType: sp
                }),
                e.pipelines && this._parseJsonDataChildren({
                    jsonData: e.pipelines,
                    creatorType: ap
                }),
                e.videoprobes && this._parseJsonDataChildren({
                    jsonData: e.videoprobes,
                    creatorType: up
                }),
                e.grounds && this._parseJsonDataChildren({
                    jsonData: e.grounds,
                    creatorType: hp
                })
            }
        }, {
            key: "_parseCorners",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = i[0]
                      , n = i[1]
                      , o = -i[2];
                    this.object.existsCorner(r, n, o) ? console.error("repeat corner") : this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Xh
                    })
                }
            }
        }, {
            key: "_parseWalls",
            value: function(e) {
                for (var t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = null;
                    0 === i.type ? r = this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Yh
                    }) : 1 === i.type ? r = this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: Jh
                    }) : 2 === i.type && (r = this._parseJsonDataChild({
                        jsonData: i,
                        creatorType: cp
                    })),
                    i.doororwindows && this._parseDoorOrWindows(i.doororwindows, r)
                }
            }
        }, {
            key: "_parseDoorOrWindows",
            value: function(e, t) {
                for (var i = 0; i < e.length; i++) {
                    var r = e[i];
                    this._parseJsonDataChild({
                        jsonData: r,
                        attachWall: t,
                        creatorType: Kh
                    })
                }
            }
        }]),
        t
    }(Wh)
      , yp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "WallCorner",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.jsonData.slice();
                this._decodeArray(i);
                var r = i[0]
                  , n = i[1]
                  , o = -i[2];
                return this.object.position = [r, n, o],
                this.object
            }
        }, {
            key: "_initIDOnesPlaceNumber",
            value: function() {
                var e = this.object.parent.id;
                "Outdoors" === this.object.parent.type && (e = "3");
                var t = -1
                  , i = Number(e);
                if (isNaN(i)) {
                    if (t = 0,
                    this._isUUID(e)) {
                        var r = e.slice(e.length - 2);
                        if (r) {
                            var n = parseInt(r, 16);
                            isNaN(n) || (t = n)
                        }
                    }
                } else
                    t = (i = parseInt(e.substring(e.length - 1))) % 10;
                this.decodeIDOnesPlace = 1 ^ t
            }
        }]),
        t
    }(Wh)
      , bp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ModelWall",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this._parseCorners(),
                Fc.checkValueEmpty(this.jsonData.model) || (this.object.resource = this.resourceManager.models[this.jsonData.model]),
                Fc.checkValueEmpty(this.jsonData.height) ? this.object.height = this.object.resource.size[1] : this.object.height = this.jsonData.height,
                Fc.checkValueEmpty(this.jsonData.thick) || (this.object.thick = this.jsonData.thick),
                this.object
            }
        }, {
            key: "_parseCorners",
            value: function() {
                var e = this.jsonData.corners
                  , t = this.objectParent.typeToChildren.WallCorner;
                this.object.startCorner = t[e[0]],
                this.object.endCorner = t[e[1]]
            }
        }]),
        t
    }(Wh)
      , _p = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "StraightManualWall",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this._parseCorners(),
                this._parseResources(),
                this.jsonData.uvmultiple && (this.object.uvMultiple = this.jsonData.uvmultiple),
                Fc.checkValueEmpty(this.jsonData.height) || (this.object.height = this.jsonData.height),
                Fc.checkValueEmpty(this.jsonData.thick) || (this.object.thick = this.jsonData.thick),
                this.object
            }
        }, {
            key: "_parseCorners",
            value: function() {
                var e = this.jsonData.corners
                  , t = this.objectParent.typeToChildren.WallCorner;
                this.object.startCorner = t[e[0]],
                this.object.endCorner = t[e[1]]
            }
        }, {
            key: "_parseResources",
            value: function() {
                Fc.checkValueEmpty(this.jsonData.lefttexture) || (this.object.leftResource = this.resourceManager.textures[this.jsonData.lefttexture]),
                Fc.checkValueEmpty(this.jsonData.righttexture) || (this.object.rightResource = this.resourceManager.textures[this.jsonData.righttexture]),
                Fc.checkValueEmpty(this.jsonData.edgetexture) || (this.object.edgeResource = this.resourceManager.textures[this.jsonData.edgetexture]),
                this.resourceManager.wallLightMapResource && (this.object.lightMapResource = this.resourceManager.wallLightMapResource)
            }
        }]),
        t
    }(Wh)
      , xp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Placement",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                if (Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                Fc.checkValueEmpty(this.jsonData.texture) || (this.object.customTextureResource = this.resourceManager.textures[this.jsonData.texture]),
                this.jsonData.color) {
                    var i = this.jsonData.color;
                    this.object.customColor = new THREE.Color(i[0],i[1],i[2]),
                    4 === i.length && (this.object.opacity = i[3])
                }
                return Fc.checkValueEmpty(this.jsonData.rendermode) || (this.object.renderMode = this.jsonData.rendermode),
                this.jsonData.animinfo && (this.object.isPlayAnim = this.jsonData.animinfo.isplay,
                this.object.animClip = this.jsonData.animinfo.clip),
                Fc.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Wh)
      , Ep = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementGroup",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.jsonData.placements && this._parseJsonDataChildren({
                    jsonData: this.jsonData.placements,
                    creatorType: Qh
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: Zh
                }),
                this.jsonData.videoprobes && this._parseJsonDataChildren({
                    jsonData: this.jsonData.videoprobes,
                    creatorType: up
                }),
                Fc.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Wh)
      , wp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "DoorOrWindow",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "initData",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "initData", this).call(this, e),
                this.attachWall = e.attachWall
            }
        }, {
            key: "create",
            value: function(e) {
                if (Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object.resource = this.resourceManager.models[this.jsonData.model],
                Fc.checkValueEmpty(this.jsonData.suspendpercent) || (this.object.suspendPercent = this.jsonData.suspendpercent),
                Fc.checkValueEmpty(this.jsonData.isopen) || (this.object.isOpen = this.jsonData.isopen),
                Fc.checkValueEmpty(this.jsonData.diridx) || (this.object.openDirIndex = this.jsonData.diridx),
                !Fc.checkValueEmpty(this.jsonData.iswindow)) {
                    var i = this.jsonData.iswindow;
                    "string" == typeof i && (i = "false" !== i.toLocaleString()),
                    this.object.isWindow = i
                }
                return this.object.attachWall = this.attachWall,
                this.attachWall.doorOrWindows.push(this.object),
                this.object
            }
        }]),
        t
    }(Wh)
      , Tp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Room",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this._createChildren(),
                this._parseCorners(),
                this._parsePoints(),
                0 === this.object.points.length && console.warn("room points is null"),
                this._parseHolesCorners(),
                this._parseHolesPoints(),
                this._parseRoomResources(),
                this._parseRoomHeight(),
                this._parseRoomBlockSize(),
                this._parseRoomVisible(),
                this._parseRoomBlockAngle(),
                this._setOutdoorFloorHeight(),
                this.object.position = this._calRoomPosition(this.object),
                this._subRoomHolesPointsByPosition(this.object, this.object.position),
                this._subRoomPointsByPosition(this.object, this.object.position),
                this.object
            }
        }, {
            key: "_createChildren",
            value: function() {
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: pp
                }),
                "FloorPlan" === this.object.parent.type && (this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: dp
                }),
                this._parseJsonDataChild({
                    jsonData: {},
                    creatorType: fp
                }))
            }
        }, {
            key: "_parseCorners",
            value: function() {
                if (this.jsonData.corners) {
                    for (var e = [], t = this.objectParent.typeToChildren.WallCorner, i = 0; i < this.jsonData.corners.length; i++) {
                        var r = t[this.jsonData.corners[i]].position.slice();
                        e.push(r)
                    }
                    this.object.points = e
                }
            }
        }, {
            key: "_parsePoints",
            value: function() {
                if (this.jsonData.points) {
                    for (var e = [], t = 0; t < this.jsonData.points.length; t++) {
                        var i = this.jsonData.points[t]
                          , r = [i[0], i[1], -i[2]];
                        e.push(r)
                    }
                    this.object.points = e
                }
            }
        }, {
            key: "_parseHolesCorners",
            value: function() {
                if (this.jsonData.holescorners) {
                    for (var e = [], t = this.objectParent.typeToChildren.WallCorner, i = 0; i < this.jsonData.holescorners.length; i++) {
                        for (var r = this.jsonData.holescorners[i], n = [], o = 0; o < r.length; o++) {
                            var s = r[o];
                            n.push(t[s].position.slice())
                        }
                        e.push(n)
                    }
                    this.object.holes = e
                }
            }
        }, {
            key: "_parseHolesPoints",
            value: function() {
                if (this.jsonData.holespoints) {
                    for (var e = [], t = 0; t < this.jsonData.holespoints.length; t++) {
                        for (var i = this.jsonData.holespoints[t], r = [], n = 0; n < i.length; n++) {
                            var o = i[n]
                              , s = [o[0], o[1], -o[2]];
                            r.push(s)
                        }
                        e.push(r)
                    }
                    this.object.holes = e
                }
            }
        }, {
            key: "_parseRoomResources",
            value: function() {
                null !== this.jsonData.floortexture && void 0 !== this.jsonData.floortexture && (this.object.floorResource = this.resourceManager.textures[this.jsonData.floortexture],
                this.object.floor.resource = this.object.floorResource),
                this.object.ceiling && null !== this.jsonData.ceilingtexture && void 0 !== this.jsonData.ceilingtexture && (this.object.ceilingResource = this.resourceManager.textures[this.jsonData.ceilingtexture],
                this.object.ceiling.resource = this.object.ceilingResource),
                this.object.roof && null !== this.jsonData.rooftexture && void 0 !== this.jsonData.rooftexture && (this.object.roofResource = this.resourceManager.textures[this.jsonData.rooftexture],
                this.object.roof.resource = this.object.roofResource)
            }
        }, {
            key: "_parseRoomHeight",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                t.ceiling && (void 0 !== e.ceilingheight ? t.ceiling.height = e.ceilingheight : (t.ceiling.DefaultHeight = this.objectParent.height - .1,
                t.ceiling.height = t.ceiling.DefaultHeight)),
                t.roof && (void 0 !== e.roofheight ? t.roof.height = e.roofheight : (t.roof.defaultHeight = this.objectParent.height,
                t.roof.height = t.roof.defaultHeight)),
                void 0 !== e.floorheight && (t.floor.height = e.floorheight)
            }
        }, {
            key: "_parseRoomVisible",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                t.floor && void 0 !== e.isshowfloor && (t.floor.visible = e.isshowfloor),
                t.ceiling && void 0 !== e.isshowceiling && (t.ceiling.visible = e.isshowceiling),
                t.roof && void 0 !== e.isshowroof && (t.roof.visible = e.isshowroof)
            }
        }, {
            key: "_parseRoomBlockSize",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                if (t.floor && e.floorblocksize) {
                    var i = e.floorblocksize;
                    t.floor.blockSize = [i[0], i[1]]
                }
                if (t.ceiling && e.ceilingblocksize) {
                    i = e.ceilingblocksize;
                    t.ceiling.blockSize = [i[0], i[1]]
                }
                if (t.roof && e.roofblocksize) {
                    i = e.roofblocksize;
                    t.roof.blockSize = [i[0], i[1]]
                }
            }
        }, {
            key: "_parseRoomBlockAngle",
            value: function() {
                var e = this.jsonData
                  , t = this.object;
                t.floor && e.floorblockangle && (t.floor.blockAngle = e.floorblockangle),
                t.ceiling && e.ceilingblockangle && (t.ceiling.blockAngle = e.ceilingblockangle),
                t.roof && e.roofblockangle && (t.roof.blockAngle = e.roofblockangle)
            }
        }, {
            key: "_setOutdoorFloorHeight",
            value: function() {
                var e = this.objectParent
                  , t = this.object;
                "Outdoors" === e.type && t.floor.height === t.floor.DefaultHeight && (t.floor.height = 0,
                t.floor.DefaultHeight = 0)
            }
        }, {
            key: "_calRoomPosition",
            value: function(e) {
                for (var t = e.points, i = e.holes, r = [], n = [], o = 0; o < t.length; o++) {
                    var s = t[o];
                    r.push([s[0], s[2]])
                }
                if (i.length > 2 && !this._isSamePoints(i))
                    for (o = 0; o < i.length; o++) {
                        for (var a = i[o], l = [], u = 0; u < a.length; u++) {
                            s = a[u];
                            l.push([s[0], s[2]])
                        }
                        n.push(l)
                    }
                var c = this._getLabelPosition(r, n);
                return c || [0, 0, 0]
            }
        }, {
            key: "_isSamePoints",
            value: function(e) {
                for (var t = e[0], i = 1; i < e.length; i++) {
                    var r = e[i];
                    if (t[0] !== r[0] || t[1] !== r[1] || t[2] !== r[2])
                        return !1
                }
                return !0
            }
        }, {
            key: "_getLabelPosition",
            value: function(e, t) {
                if (!e || !e.length)
                    return null;
                var i = [];
                i.push(e);
                var r = _h(i);
                return [r[0], 0, r[1]]
            }
        }, {
            key: "_subRoomPointsByPosition",
            value: function(e, t) {
                for (var i = e.points, r = 0; r < i.length; r++) {
                    var n = i[r];
                    n[0] -= t[0],
                    n[1] -= t[1],
                    n[2] -= t[2]
                }
                e.points = i
            }
        }, {
            key: "_subRoomHolesPointsByPosition",
            value: function(e, t) {
                for (var i = e.holes, r = 0; r < i.length; r++)
                    for (var n = i[r], o = 0; o < n.length; o++) {
                        var s = n[o];
                        s[0] -= t[0],
                        s[1] -= t[1],
                        s[2] -= t[2]
                    }
                e.holes = i
            }
        }]),
        t
    }(Wh)
      , Mp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return kc(t, e),
        t
    }(vp)
      , Cp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Facade",
            i
        }
        return kc(t, e),
        t
    }(xp)
      , Sp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FacadeGroup",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                this.initData(e);
                var t = this._getCreateParams();
                return this.object = this.creatorManager.objectManager.create(t),
                t.parent && (this.object.parent = t.parent),
                this._loadBaseData(),
                this.jsonData.facades && this._parseJsonDataChildren({
                    jsonData: this.jsonData.facades,
                    creatorType: tp
                }),
                this.jsonData.groups && this._parseJsonDataChildren({
                    jsonData: this.jsonData.groups,
                    creatorType: ip
                }),
                Fc.checkValueEmpty(this.jsonData._temp_belongroom) || (this.object.belongRoomUserID = this.jsonData._temp_belongroom),
                this.object
            }
        }]),
        t
    }(Ep)
      , jp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "CurveLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.jsonData;
                if (Fc.checkValueEmpty(this.jsonData.texture) ? this.object.resource = this.resourceManager.emptyTextureResource : this.object.resource = this.resourceManager.textures[this.jsonData.texture],
                this.jsonData.color) {
                    var r = this.jsonData.color;
                    this.object.color = r,
                    4 === r.length && (this.object.opacity = r[3])
                }
                if (void 0 !== i.textiling) {
                    var n = i.textiling;
                    this.object.textureTiling = n
                }
                if (void 0 !== i.texoffset) {
                    var o = i.texoffset;
                    this.object.textureOffset = o
                }
                !Fc.checkValueEmpty(this.jsonData.width) && (this.object.width = this.jsonData.width),
                this.jsonData.enableanim && (this.object.enableMaterialAnimation = this.jsonData.enableanim),
                !Fc.checkValueEmpty(this.jsonData.matanimspeed) && (this.object.materialAnimationSpeed = this.jsonData.matanimspeed);
                for (var s = this.jsonData.path, a = 0; a < s.length; a++) {
                    var l = s[a];
                    l[2] = -l[2],
                    this.object.points.push(l)
                }
                return this.object
            }
        }]),
        t
    }(Wh)
      , Pp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PipeLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                if (Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                Fc.checkValueEmpty(this.jsonData.texture) ? this.object.resource = this.resourceManager.emptyTextureResource : this.object.resource = this.resourceManager.textures[this.jsonData.texture],
                this.jsonData.color) {
                    var i = this.jsonData.color;
                    this.object.color = i,
                    4 === i.length && (this.object.opacity = i[3])
                }
                this.jsonData.sectiontype && (this.object.sectionType = this.jsonData.sectiontype),
                !Fc.checkValueEmpty(this.jsonData.rendermode) && (this.object.renderMode = this.jsonData.rendermode),
                !Fc.checkValueEmpty(this.jsonData.radius) && (this.object.radius = this.jsonData.radius),
                this.jsonData.enableanim && (this.object.enableMaterialAnimation = this.jsonData.enableanim),
                !Fc.checkValueEmpty(this.jsonData.matanimspeed) && (this.object.materialAnimationSpeed = this.jsonData.matanimspeed);
                for (var r = this.jsonData.path, n = 0; n < r.length; n++) {
                    var o = r[n];
                    o[2] = -o[2],
                    this.object.points.push(o)
                }
                return this.object
            }
        }]),
        t
    }(Wh)
      , Rp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "LeakWaterLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.jsonData.alarmlength && (this.object.alarmLength = this.jsonData.alarmlength),
                this.object
            }
        }]),
        t
    }(Pp)
      , Dp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ArrowLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.object
                  , r = this.jsonData;
                return null !== i.width && (i.arrowWidth = 3 * i.width,
                i.arrowHeight = 2 * i.width),
                r.arrow ? (Fc.checkValueEmpty(r.arrow.texture) ? i.arrowResource = this.resourceManager.emptyTextureResource : i.arrowResource = this.resourceManager.textures[r.arrow.texture],
                r.arrow.width && (i.arrowWidth = r.arrow.width),
                r.arrow.height && (i.arrowHeight = r.arrow.height)) : i.arrowResource = this.resourceManager.emptyTextureResource,
                this.object
            }
        }]),
        t
    }(jp)
      , Ap = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "ArrowDataLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.object
                  , r = this.jsonData;
                if (r.pointuserids) {
                    var n = r.pointuserids;
                    i.pointUserIDs = n
                }
                if (r.pointproperteis) {
                    var o = r.pointproperteis;
                    i.pointProperteis = o
                }
                return this.object
            }
        }]),
        t
    }(Dp)
      , kp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "RouteLine",
            i
        }
        return kc(t, e),
        t
    }(jp)
      , Op = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "VideoProbe",
            i
        }
        return kc(t, e),
        t
    }(xp)
      , Bp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementWall",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }]),
        t
    }(xp)
      , Fp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "PlacementGround",
            i
        }
        return kc(t, e),
        t
    }(xp)
      , Lp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Ceiling",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Wh)
      , Ip = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Roof",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Wh)
      , Np = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Floor",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "_getCreateParams",
            value: function() {
                var e = {};
                return e.type = this.createType,
                this.objectParent && (e.parent = this.objectParent),
                e
            }
        }]),
        t
    }(Wh)
      , Hp = function() {
        function e(t) {
            Rc(this, e),
            this._map = {
                0: mp,
                1: gp,
                2: vp,
                3: yp,
                4: bp,
                5: _p,
                6: xp,
                7: Ep,
                8: wp,
                9: Tp,
                10: Mp,
                11: Cp,
                12: Sp,
                13: jp,
                14: Rp,
                15: Dp,
                16: Ap,
                17: Pp,
                18: kp,
                19: Op,
                20: Bp,
                21: Fp,
                24: Np,
                25: Lp,
                26: Ip
            }
        }
        return Dc(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , Up = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.config = new Hp,
            i
        }
        return kc(t, e),
        t
    }(Uh)
      , zp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new Up,
            i
        }
        return kc(t, e),
        t
    }(Vh)
      , Vp = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        Dc(t, [{
            key: "parseObjects",
            value: function(e) {
                return e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl ? this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl : this.resourceManager.localCustomModelBaseUrl = "https://www.thingjs.com/",
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }]),
        t
    }(Vh)
      , Wp = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        t
    }(Up)
      , Gp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new Wp,
            i
        }
        return kc(t, e),
        t
    }(Vp)
      , qp = 30
      , Xp = 31
      , Jp = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        Dc(t, [{
            key: "parseChildren",
            value: function() {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "parseChildren", this).call(this);
                var e = this.jsonData;
                e.generalpolygonlines && this._parseJsonDataChildren({
                    jsonData: e.generalpolygonlines,
                    creatorType: qp
                }),
                e.generalroutelines && this._parseJsonDataChildren({
                    jsonData: e.generalroutelines,
                    creatorType: Xp
                })
            }
        }]),
        t
    }(vp)
      , Yp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return kc(t, e),
        t
    }(Jp)
      , Qp = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.jsonData;
                if (Fc.checkValueEmpty(this.jsonData.texture) ? this.object.resource = this.resourceManager.emptyTextureResource : this.object.resource = this.resourceManager.textures[this.jsonData.texture],
                this.jsonData.color) {
                    var r = this.jsonData.color;
                    this.object.color = r,
                    4 === r.length && (this.object.opacity = r[3])
                } else
                    this.object.color = void 0;
                if (void 0 !== i.textiling) {
                    var n = i.textiling;
                    this.object.textureTiling = n
                }
                if (void 0 !== i.texoffset) {
                    var o = i.texoffset;
                    this.object.textureOffset = o
                }
                this.jsonData.enableanim && (this.object.enableMaterialAnimation = this.jsonData.enableanim),
                !Fc.checkValueEmpty(this.jsonData.matanimspeed) && (this.object.materialAnimationSpeed = this.jsonData.matanimspeed);
                for (var s = this.jsonData.path, a = 0; a < s.length; a++) {
                    var l = s[a];
                    l[2] = -l[2],
                    this.object.points.push(l)
                }
                if (i.pointuserids) {
                    var u = i.pointuserids;
                    this.object.pointUserIDs = u
                }
                if (i.pointproperteis) {
                    var c = i.pointproperteis;
                    this.object.pointProperteis = c
                }
                return this.object
            }
        }]),
        t
    }(Wh)
      , Zp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "GeneralPolygonLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                return Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                !Fc.checkValueEmpty(this.jsonData.radius) && (this.object.radius = this.jsonData.radius),
                !Fc.checkValueEmpty(this.jsonData.pathRadialSegments) && (this.object.pathRadialSegments = this.jsonData.pathRadialSegments),
                this.object
            }
        }]),
        t
    }(Qp)
      , Kp = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "GeneralRouteLine",
            i
        }
        return kc(t, e),
        Dc(t, [{
            key: "create",
            value: function(e) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e);
                var i = this.object;
                return !Fc.checkValueEmpty(this.jsonData.width) && (i.width = this.jsonData.width),
                !1 !== this.jsonData.arrowVisible ? (i.arrowResource = this.resourceManager.textures[this.jsonData.texture],
                i.arrowVisible = !0) : (i.arrowResource = this.resourceManager.emptyTextureResource,
                i.arrowVisible = !1),
                this.object
            }
        }]),
        t
    }(Qp)
      , $p = function() {
        function e(t) {
            Rc(this, e),
            this._map = {
                0: mp,
                1: gp,
                2: Jp,
                3: yp,
                4: bp,
                5: _p,
                6: xp,
                7: Ep,
                8: wp,
                9: Tp,
                10: Yp,
                11: Cp,
                12: Sp,
                13: jp,
                14: Rp,
                15: Dp,
                16: Ap,
                17: Pp,
                18: kp,
                19: Op,
                20: Bp,
                21: Fp,
                24: Np,
                25: Lp,
                26: Ip,
                30: Zp,
                31: Kp
            }
        }
        return Dc(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , ed = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.config = new $p,
            i
        }
        return kc(t, e),
        t
    }(Up)
      , td = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new ed,
            i
        }
        return kc(t, e),
        t
    }(zp)
      , id = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        t
    }(ed)
      , rd = function(e) {
        function t(e) {
            Rc(this, t);
            var i = Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.creatorManager = new id,
            i
        }
        return kc(t, e),
        t
    }(Gp)
      , nd = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        Dc(t, [{
            key: "_parseCustomModelReousrce",
            value: function(e, i) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_parseCustomModelReousrce", this).call(this, e, i),
                this._parseOpacity(e, i)
            }
        }, {
            key: "_parseCustomResource",
            value: function(e, i) {
                Ac(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "_parseCustomResource", this).call(this, e, i),
                this._parseOpacity(e, i)
            }
        }, {
            key: "_parseOpacity",
            value: function(e, t) {
                null !== t.opacity && void 0 !== t.opacity && (e.opacity = t.opacity)
            }
        }]),
        t
    }(zh)
      , od = function(e) {
        function t() {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this))
        }
        return kc(t, e),
        Dc(t, [{
            key: "getResourceLoader",
            value: function() {
                return new nd(this.resourceManager)
            }
        }, {
            key: "parseResources",
            value: function(e, t) {
                var i = new nd(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models),
                i.loadLightMaps(e.materialsetting)
            }
        }]),
        t
    }(td)
      , sd = function(e) {
        function t(e) {
            return Rc(this, t),
            Oc(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
        }
        return kc(t, e),
        Dc(t, [{
            key: "getResourceLoader",
            value: function() {
                return new nd(this.resourceManager)
            }
        }, {
            key: "parseResources",
            value: function(e, t) {
                var i = new nd(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models),
                i.loadLightMaps(e.materialsetting)
            }
        }]),
        t
    }(rd)
      , ad = new (function() {
        function e(t) {
            Rc(this, e),
            this._versionMap = {
                0: {
                    0: Vh,
                    1: Vh,
                    2: zp,
                    4: td,
                    5: od
                },
                1: {
                    0: Vp,
                    2: Gp,
                    4: rd,
                    5: sd
                }
            },
            this._smallVersionLibs = [[0, 1, 2, 4, 5], [0, 2, 4, 5]],
            this._bigVersions = [0, 1]
        }
        return Dc(e, [{
            key: "getLoaderManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1]
                      , r = i[i.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][r]
                }
                if (null == t) {
                    var n = this._smallVersionLibs[e]
                      , o = n[n.length - 1];
                    return new this._versionMap[e][o]
                }
                var s = this._smallVersionLibs[e];
                if (!(e > this._bigVersions[this._bigVersions.length - 1])) {
                    var a = s[s.length - 1];
                    return t > a || !this._versionMap[e][t] ? new this._versionMap[e][a] : new this._versionMap[e][t]
                }
                console.error("ubuilderLoader not support version " + e + "." + t)
            }
        }]),
        e
    }())
      , ld = function() {
        function e(t) {
            Rc(this, e),
            this.resourceManager = t.resourceManager,
            this.defaultSetting = t.defaultSetting,
            this.defaultResource = t.defaultResource,
            this.objectManager = t.objectManager
        }
        return Dc(e, [{
            key: "load",
            value: function(e) {
                return this.getLoaderManager(e.bigVersion, e.smallVersion).parseObjects(e)
            }
        }, {
            key: "getLoaderManager",
            value: function(e, t) {
                var i = ad.getLoaderManager(e, t);
                return i.setDefaultSetting(this.defaultSetting),
                i.setDefaultResource(this.defaultResource),
                i.setResourceManager(this.resourceManager),
                i.setObjectManager(this.objectManager),
                i
            }
        }, {
            key: "clear",
            value: function() {
                this.resourceManager = null,
                this.defaultSetting = null,
                this.defaultResource = null,
                this.objectManager = null
            }
        }]),
        e
    }()
      , ud = function(e) {
        function t(e) {
            p(this, t);
            var i = m(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            i.sceneJson = null,
            i.world = null,
            i.debugManager = Zt;
            var r = new ai
              , n = new Fi;
            return r.meshBuilderManager = Qn.create(),
            r.calculaterManager = on.create(),
            r.calculaterManager.testInfo = e,
            n.modelCombineBuilder = so,
            i.objectManager = r,
            i.loader = new ld({
                objectManager: r,
                resourceManager: n,
                defaultSetting: Mt,
                defaultResource: jt
            }),
            i.combineManager = new Oo({
                objectManager: r
            }),
            i.dynamicBuildManager = new st(i),
            i.dynamicBuildManager.testInfo = e,
            i.objectsMap = {},
            i.enableRequestWorld = !0,
            i.loadVersion = null,
            i.resourceManager = n,
            i
        }
        return f(t, e),
        d(t, [{
            key: "setResourcesUnitDownloadNumber",
            value: function(e) {
                this.dynamicBuildManager.maxResourcesUnitDownloadNumber = e
            }
        }, {
            key: "disposeModels",
            value: function() {
                this.resourceManager.disposeModels()
            }
        }, {
            key: "disposeTextures",
            value: function() {
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "clearAllResources",
            value: function() {
                this.resourceManager.clear(),
                this.objectManager.meshBuilderManager.clear(),
                this.objectManager.calculaterManager.clear(),
                this.dynamicBuildManager.clear()
            }
        }, {
            key: "clearAllObjects",
            value: function() {
                this.world.clear()
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                this.dynamicBuildManager.requestToBuild(e)
            }
        }, {
            key: "startToBuild",
            value: function(e) {
                return this.dynamicBuildManager.build(e)
            }
        }, {
            key: "disposeObject",
            value: function(e) {
                var t = this.world.findObjectByID(e);
                t && t.clearBuildMesh()
            }
        }, {
            key: "findObjectByID",
            value: function(e) {
                return this.world.findObjectByID(e)
            }
        }, {
            key: "load",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                  , i = this;
                return i.world = i.loader.load(e),
                i.combineManager.parse(i.world),
                i.dynamicBuildManager.world = i.world,
                i.enableRequestWorld && i.requestToBuild(i.world.id),
                t ? i.world : new Promise((function(e, t) {
                    e(i.world)
                }
                ))
            }
        }, {
            key: "downloadResourceProgress",
            get: function() {
                return meshBuilderManager.downloadResProgess
            }
        }]),
        t
    }(Ll)
      , cd = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , hd = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , pd = function e(t, i, r) {
        null === t && (t = Function.prototype);
        var n = Object.getOwnPropertyDescriptor(t, i);
        if (void 0 === n) {
            var o = Object.getPrototypeOf(t);
            return null === o ? void 0 : e(o, i, r)
        }
        if ("value"in n)
            return n.value;
        var s = n.get;
        return void 0 !== s ? s.call(r) : void 0
    }
      , dd = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , fd = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , md = new (function() {
        function e(t) {
            cd(this, e),
            this.config = null,
            this.objectManager = null,
            this.creatorMap = {},
            this.creatorTypePlaceholderMap = {},
            this.loadModeConfig = {}
        }
        return hd(e, [{
            key: "addLoadDataType",
            value: function(e, t) {
                this.loadModeConfig[e] = t
            }
        }, {
            key: "createObject",
            value: function(e) {
                var t = e.creatorType
                  , i = null;
                this.creatorMap[t] && !this.creatorTypePlaceholderMap[t] ? i = this.creatorMap[t] : (i = new (this.config.getClass(t)),
                this.creatorMap[t] = i);
                this.creatorTypePlaceholderMap[t] || (this.creatorTypePlaceholderMap[t] = e.jsonData.id);
                var r = i.create(e);
                return i.parseChildren(),
                this.creatorTypePlaceholderMap[t] === r.id && (this.creatorTypePlaceholderMap[t] = null),
                r
            }
        }]),
        e
    }())
      , gd = function() {
        function e(t, i) {
            cd(this, e);
            var r = t.loadversion;
            if (this.mode = 3,
            this.bigVersion = null,
            this.smallVersion = null,
            r)
                if (isNaN(r)) {
                    var n = r.split(".");
                    this.mode = parseInt(n[0]),
                    n[1] && (this.bigVersion = parseInt(n[1])),
                    n[2] && (this.smallVersion = parseInt(n[2]))
                } else
                    this.mode = r;
            else
                i && i.dataVersion && (this.mode = i.dataVersion.getMode())
        }
        return hd(e, [{
            key: "getMode",
            value: function() {
                return this.mode
            }
        }, {
            key: "getBigVersion",
            value: function() {
                return this.bigVersion
            }
        }, {
            key: "getSmallVersion",
            value: function() {
                return this.smallVersion
            }
        }]),
        e
    }()
      , vd = function() {
        function e(t) {
            cd(this, e)
        }
        return hd(e, [{
            key: "initData",
            value: function(e) {
                this.id = null,
                this.name = null,
                this.userID = null,
                this.properties = null,
                this.jsonData = e.jsonData,
                this.objectParent = null,
                e.parent && (this.objectParent = e.parent),
                this.resourceManager = e.resourceManager
            }
        }, {
            key: "create",
            value: function(e) {
                this.initData(e);
                var t = new gd(this.jsonData,this.objectParent)
                  , i = md.loadModeConfig[t.getMode()].getLoaderManager(t.getBigVersion(), t.getSmallVersion()).getCreatorManager();
                return this.object = i.createObject(this._initCreateParams(e)),
                this.object.dataVersion = t,
                this.object.children.forEach((function(e) {
                    return e.dataVersion = t
                }
                )),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {}
        }, {
            key: "_initCreateParams",
            value: function(e) {
                return e.enableCreateChildren = !1,
                e
            }
        }, {
            key: "_parseJsonDataChildren",
            value: function(e) {
                for (var t = e.jsonData, i = e.creatorType, r = 0; r < t.length; r++)
                    this._parseJsonDataChild({
                        jsonData: t[r],
                        creatorType: i
                    })
            }
        }, {
            key: "_parseJsonDataChild",
            value: function(e) {
                return e.parent = this.object,
                e.resourceManager = this.resourceManager,
                md.createObject(e)
            }
        }]),
        e
    }()
      , yd = 0
      , bd = 1
      , _d = 2
      , xd = 10
      , Ed = 11
      , wd = 12
      , Td = function(e) {
        function t(e) {
            cd(this, t);
            var i = fd(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "World",
            i
        }
        return dd(t, e),
        hd(t, [{
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                if (e.outdoors) {
                    var t = this._parseJsonDataChild({
                        jsonData: e.outdoors,
                        creatorType: xd
                    });
                    this.object.outdoors = t
                }
                e.buildings && this._parseJsonDataChildren({
                    jsonData: e.buildings,
                    creatorType: bd
                })
            }
        }]),
        t
    }(vd)
      , Md = function(e) {
        function t(e) {
            cd(this, t);
            var i = fd(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Building",
            i
        }
        return dd(t, e),
        hd(t, [{
            key: "create",
            value: function(e) {
                return pd(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }, {
            key: "parseChildren",
            value: function() {
                var e = this.jsonData;
                e.facades && this._parseJsonDataChildren({
                    jsonData: e.facades,
                    creatorType: Ed
                }),
                e.facadegroups && this._parseJsonDataChildren({
                    jsonData: e.facadegroups,
                    creatorType: wd
                }),
                e.plans && this._parseJsonDataChildren({
                    jsonData: e.plans,
                    creatorType: _d
                })
            }
        }]),
        t
    }(vd)
      , Cd = function(e) {
        function t(e) {
            cd(this, t);
            var i = fd(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FloorPlan",
            i
        }
        return dd(t, e),
        hd(t, [{
            key: "_initCreateParams",
            value: function(e) {
                return e.enableCreateChildren = !0,
                e
            }
        }, {
            key: "create",
            value: function(e) {
                return pd(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "create", this).call(this, e),
                this.object
            }
        }]),
        t
    }(vd)
      , Sd = function(e) {
        function t(e) {
            cd(this, t);
            var i = fd(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Outdoors",
            i
        }
        return dd(t, e),
        t
    }(Cd)
      , jd = function(e) {
        function t(e) {
            cd(this, t);
            var i = fd(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "Facade",
            i
        }
        return dd(t, e),
        t
    }(vd)
      , Pd = function(e) {
        function t(e) {
            cd(this, t);
            var i = fd(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.createType = "FacadeGroup",
            i
        }
        return dd(t, e),
        hd(t, [{
            key: "_initCreateParams",
            value: function(e) {
                return e.enableCreateChildren = !0,
                e
            }
        }]),
        t
    }(vd)
      , Rd = function() {
        function e(t) {
            cd(this, e),
            this._map = {
                0: Td,
                1: Md,
                2: Cd,
                10: Sd,
                11: jd,
                12: Pd
            }
        }
        return hd(e, [{
            key: "getClass",
            value: function(e) {
                return this._map[e]
            }
        }]),
        e
    }()
      , Dd = function() {
        function e(t) {
            cd(this, e),
            this.manager = t,
            this.baseModelUrl = this.manager.baseModelUrl,
            this.baseTextureUrl = this.manager.baseTextureUrl,
            this.userDefaultWallLightMap = !0
        }
        return hd(e, [{
            key: "createResource",
            value: function(e, t) {
                var i = this.manager.create({
                    id: e,
                    type: t
                });
                return i.manager = this.manager,
                i
            }
        }, {
            key: "loadLightMaps",
            value: function(e) {
                var t = null
                  , i = "18091219l1g1hnjt"
                  , r = "png";
                e && e.straightmanualwall && e.straightmanualwall.lightingtexture && (i = e.straightmanualwall.lightingtexture.id,
                r = e.straightmanualwall.lightingtexture.ext,
                this.userDefaultWallLightMap = !1),
                (t = this.createResource(i, this.manager.ClassName.TextureResource)).baseUrl = this.manager.baseTextureUrl,
                t.id = i,
                t.ext = r,
                this.manager.wallLightMapResource = t,
                this.manager.textures.push(t)
            }
        }, {
            key: "loadTextures",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i];
                    t = r.localurl ? this._loadLocalCustomTextureResource(r) : this._loadTextureResource(r),
                    this.manager.textures.push(t)
                }
            }
        }, {
            key: "_loadLocalCustomTextureResource",
            value: function(e) {
                var t = this.createResource(e.id, "LocalCustomTextureResource");
                return t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadTextureResource",
            value: function(e) {
                var t = this.createResource(e.id, this.manager.ClassName.TextureResource);
                return this._loadBaseTextureResourceData(e, t),
                t
            }
        }, {
            key: "_loadBaseTextureResourceData",
            value: function(e, t) {
                t.id = e.id,
                t.ext = e.ext,
                e.url && (t.url = e.url),
                t.baseUrl = this.baseTextureUrl,
                e.isDefault && (t.isDefault = e.isDefault)
            }
        }, {
            key: "loadModels",
            value: function(e) {
                for (var t = null, i = 0; i < e.length; i++) {
                    var r = e[i]
                      , n = new gd(r);
                    if (r.model)
                        t = this.createResource(r.id, "CustomResource");
                    else if (r.localurl) {
                        var o = "CustomModelResource";
                        5 === n.getMode() && (o = "Max2TjsResource"),
                        t = this.createResource(r.id, o)
                    } else
                        t = this.createResource(r.id, this.manager.ClassName.ModelResource);
                    if (t.baseUrl = this.baseModelUrl,
                    r.localurl) {
                        if (t.localUrl = r.localurl,
                        t.id = r.id,
                        t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                        r.title && (t.modelName = r.title),
                        t.modelID = r.id,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.color) {
                            var s = r.color;
                            t.color = [s[0], s[1], s[2]],
                            4 === s.length && (t.opacity = s[3])
                        }
                        if (r.size) {
                            var a = r.size;
                            t.size = a
                        }
                    } else if (r.id) {
                        if (t.id = r.id,
                        t.modelID = r.id,
                        t.version = r.version,
                        null !== r.texture && void 0 !== r.texture && (t.customTexture = this.manager.textures[r.texture]),
                        r.rendermode && (t.renderMode = r.rendermode),
                        r.model && (t.modelID = r.model),
                        r.title && (t.modelName = r.title),
                        r.color) {
                            s = r.color;
                            t.color = [s[0], s[1], s[2]],
                            4 === s.length && (t.opacity = s[3])
                        }
                        if (r.size) {
                            a = r.size;
                            t.size = a
                        }
                        r.hasanimation && (t.hasAnim = r.hasanimation),
                        r.url && (t.url = r.url)
                    }
                    for (var l = 0; l < this.manager.ableToSupportFootAndHeadModelWalls.length; l++) {
                        var u = this.manager.ableToSupportFootAndHeadModelWalls[l];
                        if (t.id === u) {
                            t.isSupportHeadAndFootModelWall = !0;
                            break
                        }
                    }
                    this.manager.models.push(t)
                }
            }
        }, {
            key: "loadCustomModelResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t),
                e.localurl && (t.localUrl = e.localurl,
                t.localBaseUrl = this.manager.localCustomModelBaseUrl,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]))
            }
        }, {
            key: "loadCustomResource",
            value: function(e, t) {
                this.loadBaseResourceData(e, t)
            }
        }, {
            key: "loadBaseResourceData",
            value: function(e, t) {
                if (t.id = e.id,
                t.modelID = e.id,
                t.version = e.version,
                null !== e.texture && void 0 !== e.texture && (t.customTexture = this.manager.textures[e.texture]),
                e.rendermode && (t.renderMode = e.rendermode),
                e.model && (t.modelID = e.model),
                e.title && (t.modelName = e.title),
                e.color) {
                    var i = e.color;
                    t.color = [i[0], i[1], i[2]],
                    4 === i.length && (t.opacity = i[3])
                }
                if (e.size) {
                    var r = e.size;
                    t.modelSize = [r[0], r[1], r[2]]
                }
                e.hasanimation && (t.hasAnim = e.hasanimation)
            }
        }]),
        e
    }()
      , Ad = function() {
        function e() {
            cd(this, e),
            this.sceneJson = null,
            this.world = null,
            this.resourceManager = null,
            this.defaultSetting = null,
            this.defaultResource = null,
            this.creatorTypeConfig = new Rd
        }
        return hd(e, [{
            key: "setObjectManager",
            value: function(e) {
                md.objectManager = e
            }
        }, {
            key: "setResourceManager",
            value: function(e) {
                this.resourceManager = e
            }
        }, {
            key: "setDefaultSetting",
            value: function(e) {
                this.defaultSetting = e
            }
        }, {
            key: "setDefaultResource",
            value: function(e) {
                this.defaultResource = e
            }
        }, {
            key: "addLoadDataType",
            value: function(e, t) {
                md.addLoadDataType(e, t)
            }
        }, {
            key: "parseDataTypeVersion",
            value: function(e) {
                if (e.loaderVersions) {
                    var t = e.loaderVersions;
                    for (var i in t)
                        this.addLoadDataType(i, t[i])
                }
            }
        }, {
            key: "parseObjects",
            value: function(e) {
                return this.resourceManager = e.resourceManager,
                e ? (e.url && (this.sceneURL = e.url,
                this.resourceManager.localCustomModelBaseUrl = this.getParentRelativeUrl(this.sceneURL)),
                e.json && (this.sceneJson = e.json),
                e.customModeBaseUrl && (this.resourceManager.localCustomModelBaseUrl = e.customModeBaseUrl),
                this.parseDataTypeVersion(e),
                this.parseSceneJson(),
                this.world) : (console.error("load param can not be null"),
                null)
            }
        }, {
            key: "parseSceneJson",
            value: function() {
                this.parseResources(this.sceneJson, this.resourceManager),
                this.parseWorld(this.sceneJson)
            }
        }, {
            key: "parseResources",
            value: function(e, t) {
                var i = new Dd(t);
                i.loadTextures(e.textures),
                i.loadModels(e.models),
                i.loadLightMaps(e.materialsetting)
            }
        }, {
            key: "parseWorld",
            value: function(e) {
                md.config = this.creatorTypeConfig,
                this.world = md.createObject({
                    jsonData: e,
                    resourceManager: this.resourceManager,
                    creatorType: yd
                })
            }
        }]),
        e
    }()
      , kd = (new Ad,
    new (function() {
        function e(t) {
            cd(this, e),
            this._versionMap = {
                0: {
                    0: Ad
                }
            },
            this._smallVersionLibs = [[0]],
            this._bigVersions = [0]
        }
        return hd(e, [{
            key: "getLoaderManager",
            value: function(e, t) {
                if (null == e) {
                    var i = this._smallVersionLibs[this._bigVersions.length - 1];
                    return new this._versionMap[this._bigVersions.length - 1][i.length - 1]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return new this._versionMap[e][r.length - 1]
                }
                return new this._versionMap[e][t]
            }
        }]),
        e
    }()))
      , Od = function() {
        function e(t) {
            cd(this, e)
        }
        return hd(e, [{
            key: "load",
            value: function(e) {
                return kd.getLoaderManager(e.bigVersion, e.smallVersion).parseObjects(e)
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }()
      , Bd = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
      , Fd = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                r.enumerable = r.enumerable || !1,
                r.configurable = !0,
                "value"in r && (r.writable = !0),
                Object.defineProperty(e, r.key, r)
            }
        }
        return function(t, i, r) {
            return i && e(t.prototype, i),
            r && e(t, r),
            t
        }
    }()
      , Ld = function(e, t) {
        if ("function" != typeof t && null !== t)
            throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : h(t)));
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
    }
      , Id = function(e, t) {
        if (!e)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" !== (void 0 === t ? "undefined" : h(t)) && "function" != typeof t ? e : t
    }
      , Nd = function() {
        function e(t) {
            Bd(this, e),
            this._initParams(),
            this.object = t.object,
            this.manager = t.manager
        }
        return Fd(e, [{
            key: "_initParams",
            value: function() {
                this.object = null,
                this.manager = null
            }
        }, {
            key: "parse",
            value: function() {
                for (var e = this.object.children, t = 0; t < e.length; t++) {
                    var i = e[t]
                      , r = this.manager.parserConfig[i.type];
                    if (r)
                        new r({
                            object: i,
                            manager: this.manager
                        }).parse()
                }
            }
        }, {
            key: "parseInMode",
            value: function(e) {
                var t = e.dataVersion
                  , i = t.getMode()
                  , r = t.getBigVersion()
                  , n = t.getSmallVersion();
                this.manager.getCombineManager(i, r, n).parse(e)
            }
        }, {
            key: "clear",
            value: function() {
                this._initParams()
            }
        }]),
        e
    }()
      , Hd = {
        World: function(e) {
            function t(e) {
                return Bd(this, t),
                Id(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
            }
            return Ld(t, e),
            Fd(t, [{
                key: "parse",
                value: function() {
                    for (var e = this.object.children, t = 0; t < e.length; t++) {
                        var i = e[t];
                        if ("Outdoors" === i.type)
                            this.parseInMode(i);
                        else {
                            var r = this.manager.parserConfig[i.type];
                            if (r)
                                new r({
                                    object: i,
                                    manager: this.manager
                                }).parse()
                        }
                    }
                }
            }]),
            t
        }(Nd),
        Building: function(e) {
            function t(e) {
                return Bd(this, t),
                Id(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
            }
            return Ld(t, e),
            Fd(t, [{
                key: "parse",
                value: function() {
                    for (var e = this.object.children, t = 0; t < e.length; t++) {
                        var i = e[t];
                        "FloorPlan" === i.type && this.parseInMode(i)
                    }
                }
            }]),
            t
        }(Nd)
    }
      , Ud = function() {
        function e() {
            Bd(this, e),
            this.objectManager = null,
            this.parserConfig = Hd,
            this.rootParser = null,
            this.combineModeConfig = {},
            this.objectManagerModeConfig = {}
        }
        return Fd(e, [{
            key: "addCombineMode",
            value: function(e, t, i) {
                this.combineModeConfig[e] = t,
                this.objectManagerModeConfig[e] = i
            }
        }, {
            key: "parse",
            value: function(e) {
                this.initCombineManagerVersions(e);
                var t = e.object;
                new (0,
                this.parserConfig[t.type])({
                    object: t,
                    manager: this
                }).parse()
            }
        }, {
            key: "initCombineManagerVersions",
            value: function(e) {
                var t = e.combineManagerVersions;
                for (var i in t)
                    this.combineModeConfig[i] = t[i]
            }
        }, {
            key: "initObjectManagerVersions",
            value: function(e) {
                var t = e.objectManagerVersions;
                for (var i in t)
                    this.objectManagerModeConfig[i] = t[i]
            }
        }, {
            key: "getCombineManager",
            value: function(e, t, i) {
                return this.combineModeConfig[e].getCombineManager(t, i)
            }
        }, {
            key: "clear",
            value: function() {
                this.rootParser && this.rootParser.clear(),
                this.rootParser = null,
                this.objectManager = null,
                this.parserConfig = null,
                this.combineModeConfig = {}
            }
        }]),
        e
    }()
      , zd = new (function() {
        function e(t) {
            Bd(this, e),
            this._versionMap = {
                0: {
                    0: Ud
                }
            },
            this._smallVersionLibs = [[0]],
            this._bigVersions = [0]
        }
        return Fd(e, [{
            key: "getCombinerManager",
            value: function(e, t) {
                if (null == e) {
                    e = this._bigVersions[this._bigVersions.length - 1];
                    var i = this._smallVersionLibs[e];
                    return t = i[i.length - 1],
                    new this._versionMap[e][t]
                }
                if (null == t) {
                    var r = this._smallVersionLibs[e];
                    return t = r[r.length - 1],
                    new this._versionMap[e][t]
                }
                return this._versionMap[e] && this._versionMap[e][t] ? new this._versionMap[e][t] : null
            }
        }]),
        e
    }())
      , Vd = function() {
        function e(t) {
            Bd(this, e)
        }
        return Fd(e, [{
            key: "parse",
            value: function(e) {
                var t = zd.getCombinerManager(e.bigVersion, e.smallVersion);
                return t ? t.parse(e) : null
            }
        }, {
            key: "clear",
            value: function() {}
        }]),
        e
    }()
      , Wd = function(e) {
        function t(e) {
            p(this, t);
            var i = m(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
            return i.sceneJson = null,
            i.world = null,
            i.debugManager = Zt,
            i.resourceManager = new Fi,
            i.builderObjectManager = new ai,
            i.maxObjectManager = new ai,
            i.loader = new Od,
            i.dynamicBuildManager = new st(i),
            i.combineManager = new Vd,
            i.objectsMap = {},
            i.enableRequestWorld = !0,
            i.loadVersion = null,
            i
        }
        return f(t, e),
        d(t, [{
            key: "getMaxLoaderManager",
            value: function() {
                return this.maxObjectManager.meshBuilderManager = Ts.createManager(),
                new Za({
                    objectManager: this.maxObjectManager,
                    resourceManager: this.resourceManager
                })
            }
        }, {
            key: "getUbuilderLoaderManager",
            value: function() {
                return this.builderObjectManager.meshBuilderManager = Qn.create(),
                this.builderObjectManager.calculaterManager = on.create(),
                new ld({
                    objectManager: this.builderObjectManager,
                    resourceManager: this.resourceManager,
                    defaultSetting: Mt,
                    defaultResource: jt
                })
            }
        }, {
            key: "setResourcesUnitDownloadNumber",
            value: function(e) {
                this.dynamicBuildManager.maxResourcesUnitDownloadNumber = e
            }
        }, {
            key: "disposeModels",
            value: function() {
                this.resourceManager.disposeModels()
            }
        }, {
            key: "disposeTextures",
            value: function() {
                this.resourceManager.disposeTextures()
            }
        }, {
            key: "clearAllResources",
            value: function() {
                this.resourceManager.clear()
            }
        }, {
            key: "clearAllObjects",
            value: function() {
                this.world.clear(),
                this.builderObjectManager.meshBuilderManager.clear(),
                this.builderObjectManager.calculaterManager.clear(),
                this.maxObjectManager.meshBuilderManager.clear(),
                this.maxObjectManager.calculaterManager.clear()
            }
        }, {
            key: "requestToBuild",
            value: function(e) {
                this.dynamicBuildManager.requestToBuild(e)
            }
        }, {
            key: "startToBuild",
            value: function(e) {
                return this.dynamicBuildManager.build(e)
            }
        }, {
            key: "disposeObject",
            value: function(e) {
                this.dynamicBuildManager.disposeObject(e)
            }
        }, {
            key: "findObjectByID",
            value: function(e) {
                return this.world.findObjectByID(e)
            }
        }, {
            key: "load",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                  , i = this;
                return this.initLoaderParams(e),
                i.world = i.loader.load(e),
                i.combineManager.parse({
                    object: i.world,
                    bigVersion: 0,
                    smallVersion: 0,
                    combineManagerVersions: {
                        3: new Oo({
                            objectManager: this.builderObjectManager
                        }),
                        5: new Fl({
                            objectManager: this.maxObjectManager
                        })
                    }
                }),
                i.dynamicBuildManager.world = i.world,
                i.enableRequestWorld && i.requestToBuild(i.world.id),
                t ? i.world : new Promise((function(e, t) {
                    e(i.world)
                }
                ))
            }
        }, {
            key: "initLoaderParams",
            value: function(e) {
                e.resourceManager = this.resourceManager,
                e.loaderVersions = {
                    3: this.getUbuilderLoaderManager(),
                    5: this.getMaxLoaderManager()
                }
            }
        }, {
            key: "downloadResourceProgress",
            get: function() {
                return meshBuilderManager.downloadResProgess
            }
        }]),
        t
    }(Ll);
    e.Bim2TjsLoader = jc,
    e.Building = kt,
    e.CurveLine = Ot,
    e.DefaultSetting = Mt,
    e.DoorOrWindow = Nt,
    e.Max2TjsLoader = Il,
    e.MixTjsLoader = Wd,
    e.Outdoors = Vt,
    e.PipeLine = Wt,
    e.Placement = Lt,
    e.PlacementGroup = Ht,
    e.Room = Tt,
    e.ThingjsEditorSceneLoader = Bo,
    e.ThingjsEditorSceneLoader_2_0 = Fo,
    e.UBuilderSceneLoader = ud,
    e.VideoProbe = Xt,
    e.debugManager = Zt,
    Object.defineProperty(e, "__esModule", {
        value: !0
    })
}
));
