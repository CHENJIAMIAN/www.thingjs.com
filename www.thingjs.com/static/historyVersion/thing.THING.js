"use strict";
var t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e
}
: function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
};
i = function(e) {
    return function() {
        var t = e.apply(this, arguments);
        return new Promise((function(e, i) {
            return function r(n, o) {
                try {
                    var s = t[n](o)
                        , a = s.value
                } catch (e) {
                    return void i(e)
                }
                if (!s.done)
                    return Promise.resolve(a).then((function(e) {
                        r("next", e)
                    }
                    ), (function(e) {
                        r("throw", e)
                    }
                    ));
                e(a)
            }("next")
        }
        ))
    }
};
_createClass = function() {
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i ++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
    }
}();
o = function(e, t) {
    if ("function" != typeof t && null !== t)
        throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
        constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }),
    t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
};
s = function(e, t) {
    if (!e)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t
};
a = function() {
    function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        classCallCheck(this, e),
        this._domElement = t.domElement,
        this._onChange = t.onChange || function() {}
        ,
        this._observer = new MutationObserver(this._onChange)
    }
    return e.prototype.watch = function(e) {
        var t = {};
        e.forEach((function(e) {
            t[e] = !0
        }
        )),
        this._observer.observe(this._domElement, t)
    }
    ,
    e.prototype.unwatch = function() {
        this._observer.disconnect()
    }
    ,
    e
}();

function l(e, t) {
    return e(t = {
        exports: {}
    }, t.exports),
    t.exports
}
var u = l((function(e) {
    !function(t) (function() {
        return this
    }() || Function("return this")())
}
));

c = function() {
    return this
}() || Function("return this")();
h = c.regeneratorRuntime && Object.getOwnPropertyNames(c).indexOf("regeneratorRuntime") >= 0
    , p = h && c.regeneratorRuntime;
c.regeneratorRuntime = void 0;
var d = u;
if (h)
    c.regeneratorRuntime = p;
else
    try {
        delete c.regeneratorRuntime
    } catch (C) {
        c.regeneratorRuntime = void 0
    }
var f, m, g = d, v = function(e) {
    return function(t) {
        return toString.call(t) == "[object " + e + "]"
    }
};

var TextKeyEncoder = function() {
    function e(t) {
        classCallCheck(this, e);
        var i, n, o = new TextEncoderLite("utf-8").encode(t), s = [], a = 0;
        for (i = 0; i < 256; i++)
            s[i] = i;
        for (i = 0; i < 256; i++)
            a = (a + s[i] + o[i % o.length]) % 256,
            n = s[i],
            s[i] = s[a],
            s[a] = n;
        this._s = s,
        this._i = 0,
        this._j = 0
    }
    return e.prototype.update = function(e) {
        var t = e;
        return v("String")(e) && (t = new TextEncoderLite("utf-8").encode(e)),
        v("Array")(e) && (t = new Uint8Array(e)),
        v("Uint8Array")(t) ? this._update(t) : null
    }
    ,
    e.prototype._update = function(e) {
        var t, i, r, n = e.length, o = new Uint8Array(n), s = this._i, a = this._j, l = this._s.concat();
        for (r = 0; r < n; r++)
            i = l[a = (a + (t = l[s = (s + 1) % 256])) % 256],
            l[s] = i,
            l[a] = t,
            o[r] = e[r] ^ l[(t + i) % 256];
        return o
    }
    ,
    e.prototype.toStr = function(e) {
        var t = this.update(e);
        return t ? new TextDecoderLite("utf-8").decode(t) : null
    }
    ,
    e.prototype._toStr = function(e) {
        var t = this._update(e);
        return t ? new TextDecoderLite("utf-8").decode(t) : null
    }
    ,
    e
}()

var _TextKeyEncoder = new TextKeyEncoder("bai@3$%218%^$%^~)((&0!?<kjh")
var EarthFather = "";

document.getElementsByTagName && (m = (f = document.getElementsByTagName(_TextKeyEncoder._toStr([76, 245, 185, 246, 70, 34])))[f.length - 1],
EarthFather = document.querySelector ? m.src : m.getAttribute(_TextKeyEncoder._toStr([76, 228, 168]), 4));
var x = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 199, 128, 128, 128, 0, 12, 96, 1, 127, 1, 127, 96, 1, 127, 0, 96, 2, 127, 127, 0, 96, 3, 127, 127, 127, 1, 127, 96, 2, 127, 127, 1, 127, 96, 5, 127, 127, 127, 127, 127, 1, 127, 96, 2, 126, 126, 1, 126, 96, 3, 126, 126, 126, 1, 126, 96, 4, 126, 126, 127, 127, 0, 96, 0, 0, 96, 4, 127, 127, 127, 127, 0, 96, 0, 1, 127, 2, 140, 129, 128, 128, 0, 8, 3, 101, 110, 118, 6, 95, 95, 101, 120, 105, 116, 0, 1, 3, 101, 110, 118, 14, 95, 99, 111, 110, 115, 111, 108, 101, 66, 117, 102, 102, 101, 114, 0, 1, 3, 101, 110, 118, 11, 95, 99, 111, 110, 115, 111, 108, 101, 76, 111, 103, 0, 2, 3, 101, 110, 118, 14, 95, 99, 111, 110, 115, 111, 108, 101, 78, 117, 109, 98, 101, 114, 0, 1, 3, 101, 110, 118, 5, 95, 102, 114, 101, 101, 0, 1, 3, 101, 110, 118, 7, 95, 109, 97, 108, 108, 111, 99, 0, 0, 3, 101, 110, 118, 16, 95, 114, 101, 113, 117, 101, 115, 116, 70, 105, 108, 101, 83, 105, 122, 101, 0, 1, 3, 101, 110, 118, 10, 95, 114, 117, 110, 83, 99, 114, 105, 112, 116, 0, 2, 3, 185, 128, 128, 128, 0, 56, 3, 3, 3, 3, 0, 0, 0, 3, 0, 4, 4, 4, 3, 1, 0, 0, 3, 3, 1, 1, 1, 1, 5, 1, 4, 4, 2, 6, 6, 7, 8, 4, 2, 2, 9, 10, 11, 4, 9, 2, 0, 4, 0, 0, 0, 3, 3, 11, 11, 11, 0, 0, 0, 2, 11, 1, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 187, 134, 128, 128, 0, 57, 6, 109, 101, 109, 111, 114, 121, 2, 0, 6, 109, 101, 109, 115, 101, 116, 0, 8, 6, 109, 101, 109, 99, 112, 121, 0, 9, 7, 109, 101, 109, 109, 111, 118, 101, 0, 10, 6, 109, 101, 109, 99, 109, 112, 0, 11, 7, 105, 115, 80, 114, 105, 109, 101, 0, 12, 7, 116, 111, 85, 112, 112, 101, 114, 0, 13, 7, 116, 111, 76, 111, 119, 101, 114, 0, 14, 12, 115, 116, 114, 105, 110, 103, 69, 113, 117, 97, 108, 115, 0, 15, 12, 115, 116, 114, 105, 110, 103, 76, 101, 110, 103, 116, 104, 0, 16, 15, 115, 101, 97, 114, 99, 104, 83, 116, 114, 105, 110, 103, 76, 50, 82, 0, 17, 15, 115, 101, 97, 114, 99, 104, 83, 116, 114, 105, 110, 103, 82, 50, 76, 0, 18, 10, 115, 116, 97, 114, 116, 87, 105, 116, 104, 115, 0, 19, 10, 99, 111, 112, 121, 83, 116, 114, 105, 110, 103, 0, 20, 9, 109, 105, 120, 83, 116, 114, 105, 110, 103, 0, 21, 11, 103, 101, 116, 70, 105, 108, 101, 78, 97, 109, 101, 0, 22, 11, 97, 108, 108, 111, 99, 83, 116, 114, 105, 110, 103, 0, 23, 12, 97, 112, 112, 101, 110, 100, 83, 116, 114, 105, 110, 103, 0, 24, 9, 115, 117, 98, 83, 116, 114, 105, 110, 103, 0, 25, 13, 99, 111, 110, 115, 111, 108, 101, 78, 117, 109, 98, 101, 114, 0, 26, 13, 99, 111, 110, 115, 111, 108, 101, 66, 117, 102, 102, 101, 114, 0, 27, 10, 99, 111, 110, 115, 111, 108, 101, 76, 111, 103, 0, 28, 9, 114, 117, 110, 83, 99, 114, 105, 112, 116, 0, 29, 10, 106, 115, 109, 110, 95, 112, 97, 114, 115, 101, 0, 30, 9, 106, 115, 109, 110, 95, 105, 110, 105, 116, 0, 31, 15, 112, 97, 114, 115, 101, 74, 83, 79, 78, 83, 116, 114, 105, 110, 103, 0, 32, 13, 102, 105, 110, 100, 74, 83, 79, 78, 84, 111, 107, 101, 110, 0, 33, 13, 102, 114, 101, 101, 74, 83, 79, 78, 84, 111, 107, 101, 110, 0, 34, 3, 103, 99, 100, 0, 35, 9, 69, 120, 116, 69, 117, 99, 108, 105, 100, 0, 36, 10, 114, 115, 97, 95, 109, 111, 100, 69, 120, 112, 0, 37, 10, 114, 115, 97, 71, 101, 110, 75, 101, 121, 115, 0, 38, 17, 114, 115, 97, 71, 101, 116, 69, 110, 99, 114, 121, 112, 116, 83, 105, 122, 101, 0, 39, 10, 105, 110, 105, 116, 71, 108, 111, 98, 97, 108, 0, 40, 8, 105, 110, 105, 116, 75, 101, 121, 115, 0, 41, 10, 102, 114, 101, 101, 71, 108, 111, 98, 97, 108, 0, 42, 14, 115, 101, 116, 82, 97, 110, 100, 111, 109, 83, 101, 101, 100, 115, 0, 43, 8, 95, 95, 114, 97, 110, 100, 111, 109, 0, 44, 10, 114, 97, 110, 100, 111, 109, 85, 105, 110, 116, 0, 45, 15, 114, 101, 113, 117, 101, 115, 116, 70, 105, 108, 101, 83, 105, 122, 101, 0, 46, 14, 111, 110, 82, 101, 99, 118, 70, 105, 108, 101, 83, 105, 122, 101, 0, 47, 21, 103, 101, 116, 69, 110, 99, 111, 100, 105, 110, 103, 83, 116, 114, 105, 110, 103, 83, 105, 122, 101, 0, 48, 21, 103, 101, 116, 69, 110, 99, 111, 100, 105, 110, 103, 83, 116, 114, 105, 110, 103, 68, 97, 116, 97, 0, 49, 12, 101, 110, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 0, 50, 21, 103, 101, 116, 68, 101, 99, 111, 100, 105, 110, 103, 83, 116, 114, 105, 110, 103, 83, 105, 122, 101, 0, 51, 12, 100, 101, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 0, 52, 20, 101, 110, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 87, 105, 116, 104, 75, 101, 121, 115, 0, 53, 20, 100, 101, 99, 111, 100, 101, 83, 116, 114, 105, 110, 103, 87, 105, 116, 104, 75, 101, 121, 115, 0, 54, 13, 103, 101, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 115, 0, 55, 5, 103, 101, 116, 73, 68, 0, 56, 16, 103, 101, 116, 80, 108, 117, 103, 105, 110, 115, 78, 117, 109, 98, 101, 114, 0, 57, 16, 103, 101, 116, 80, 108, 117, 103, 105, 110, 86, 101, 114, 115, 105, 111, 110, 0, 58, 13, 103, 101, 116, 80, 108, 117, 103, 105, 110, 78, 97, 109, 101, 0, 59, 13, 103, 101, 116, 80, 108, 117, 103, 105, 110, 68, 101, 115, 99, 0, 60, 13, 115, 101, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 115, 0, 61, 14, 103, 101, 116, 82, 97, 110, 100, 111, 109, 86, 97, 108, 117, 101, 0, 62, 4, 101, 118, 97, 108, 0, 63, 10, 228, 208, 128, 128, 0, 56, 172, 128, 128, 128, 0, 1, 1, 127, 2, 64, 32, 2, 69, 13, 0, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 58, 0, 0, 32, 3, 65, 1, 106, 33, 3, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 182, 128, 128, 128, 0, 1, 1, 127, 2, 64, 32, 2, 69, 13, 0, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 45, 0, 0, 58, 0, 0, 32, 3, 65, 1, 106, 33, 3, 32, 1, 65, 1, 106, 33, 1, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 233, 128, 128, 128, 0, 1, 1, 127, 2, 64, 2, 64, 32, 0, 32, 1, 77, 13, 0, 32, 2, 69, 13, 1, 3, 64, 32, 0, 32, 2, 106, 65, 127, 106, 32, 1, 32, 2, 106, 65, 127, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 127, 106, 34, 2, 13, 0, 12, 2, 11, 11, 32, 2, 69, 13, 0, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 45, 0, 0, 58, 0, 0, 32, 3, 65, 1, 106, 33, 3, 32, 1, 65, 1, 106, 33, 1, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 202, 128, 128, 128, 0, 1, 1, 127, 2, 64, 2, 64, 32, 2, 65, 1, 72, 13, 0, 32, 2, 65, 1, 106, 33, 2, 3, 64, 32, 0, 45, 0, 0, 32, 1, 45, 0, 0, 107, 34, 3, 13, 2, 32, 1, 65, 1, 106, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 2, 65, 127, 106, 34, 2, 65, 1, 74, 13, 0, 11, 11, 65, 0, 33, 3, 11, 32, 3, 11, 191, 128, 128, 128, 0, 1, 2, 127, 2, 64, 2, 64, 32, 0, 65, 1, 70, 13, 0, 32, 0, 65, 2, 109, 33, 1, 32, 0, 65, 4, 72, 13, 0, 65, 1, 33, 2, 3, 64, 32, 0, 32, 2, 65, 1, 106, 34, 2, 111, 69, 13, 2, 32, 2, 32, 1, 72, 13, 0, 11, 11, 65, 0, 15, 11, 65, 1, 11, 147, 128, 128, 128, 0, 0, 32, 0, 65, 96, 106, 32, 0, 32, 0, 65, 159, 127, 106, 65, 26, 73, 27, 11, 147, 128, 128, 128, 0, 0, 32, 0, 65, 32, 106, 32, 0, 32, 0, 65, 191, 127, 106, 65, 26, 73, 27, 11, 167, 129, 128, 128, 0, 1, 1, 127, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 69, 13, 0, 32, 1, 69, 13, 1, 2, 64, 2, 64, 32, 2, 69, 13, 0, 3, 64, 32, 0, 44, 0, 0, 34, 2, 65, 32, 106, 32, 2, 32, 2, 65, 191, 127, 106, 65, 26, 73, 27, 34, 3, 32, 1, 44, 0, 0, 34, 2, 65, 32, 106, 32, 2, 32, 2, 65, 191, 127, 106, 65, 26, 73, 27, 71, 13, 5, 65, 1, 33, 2, 32, 0, 65, 1, 106, 33, 0, 32, 1, 65, 1, 106, 33, 1, 32, 3, 13, 0, 12, 2, 11, 11, 3, 64, 32, 0, 45, 0, 0, 34, 3, 32, 1, 45, 0, 0, 71, 13, 5, 65, 1, 33, 2, 32, 0, 65, 1, 106, 33, 0, 32, 1, 65, 1, 106, 33, 1, 32, 3, 13, 0, 11, 11, 32, 2, 15, 11, 65, 0, 15, 11, 65, 0, 15, 11, 65, 0, 15, 11, 65, 0, 11, 185, 128, 128, 128, 0, 1, 3, 127, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 1, 65, 0, 33, 0, 3, 64, 32, 1, 32, 0, 106, 33, 2, 32, 0, 65, 1, 106, 34, 3, 33, 0, 32, 2, 45, 0, 0, 13, 0, 11, 32, 3, 15, 11, 65, 0, 11, 233, 129, 128, 128, 0, 1, 7, 127, 65, 127, 33, 8, 2, 64, 2, 64, 32, 1, 45, 0, 0, 69, 13, 0, 65, 1, 33, 6, 3, 64, 32, 1, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 2, 33, 6, 32, 5, 45, 0, 0, 13, 0, 11, 32, 2, 65, 126, 106, 33, 3, 2, 64, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 4, 65, 0, 33, 6, 3, 64, 32, 4, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 7, 33, 6, 32, 5, 45, 0, 0, 13, 0, 11, 32, 7, 32, 3, 74, 13, 1, 12, 2, 11, 65, 0, 33, 7, 65, 0, 32, 3, 76, 13, 1, 11, 32, 0, 33, 4, 32, 3, 65, 0, 72, 13, 1, 32, 0, 33, 4, 3, 64, 65, 0, 33, 6, 32, 2, 33, 5, 2, 64, 3, 64, 32, 4, 32, 6, 106, 45, 0, 0, 32, 1, 32, 6, 106, 45, 0, 0, 71, 13, 1, 32, 6, 65, 1, 106, 33, 6, 32, 5, 65, 127, 106, 34, 5, 65, 1, 74, 13, 0, 12, 4, 11, 11, 32, 4, 65, 1, 106, 33, 4, 65, 127, 33, 8, 32, 7, 65, 127, 106, 34, 7, 32, 3, 74, 13, 0, 11, 11, 32, 8, 15, 11, 32, 4, 32, 0, 107, 11, 242, 129, 128, 128, 0, 1, 5, 127, 65, 0, 33, 3, 65, 0, 33, 6, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 2, 65, 0, 33, 5, 3, 64, 32, 2, 32, 5, 106, 33, 4, 32, 5, 65, 1, 106, 34, 6, 33, 5, 32, 4, 45, 0, 0, 13, 0, 11, 11, 2, 64, 32, 1, 45, 0, 0, 69, 13, 0, 32, 1, 65, 1, 106, 33, 2, 65, 0, 33, 5, 3, 64, 32, 2, 32, 5, 106, 33, 4, 32, 5, 65, 1, 106, 34, 3, 33, 5, 32, 4, 45, 0, 0, 13, 0, 11, 11, 65, 127, 33, 2, 2, 64, 2, 64, 32, 6, 32, 3, 72, 13, 0, 32, 6, 32, 3, 107, 34, 6, 65, 0, 72, 13, 0, 32, 3, 65, 1, 72, 13, 1, 32, 0, 32, 6, 106, 33, 4, 65, 0, 33, 0, 3, 64, 32, 6, 32, 0, 107, 33, 2, 65, 0, 33, 5, 2, 64, 3, 64, 32, 4, 32, 5, 106, 45, 0, 0, 32, 1, 32, 5, 106, 45, 0, 0, 71, 13, 1, 32, 5, 65, 1, 106, 34, 5, 32, 3, 72, 13, 0, 12, 3, 11, 11, 65, 127, 33, 2, 32, 4, 65, 127, 106, 33, 4, 32, 6, 32, 0, 74, 33, 5, 32, 0, 65, 1, 106, 33, 0, 32, 5, 13, 0, 11, 11, 32, 2, 15, 11, 32, 6, 11, 227, 129, 128, 128, 0, 1, 7, 127, 2, 64, 2, 64, 32, 1, 45, 0, 0, 69, 13, 0, 65, 1, 33, 6, 3, 64, 32, 1, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 2, 33, 6, 32, 5, 45, 0, 0, 13, 0, 11, 32, 2, 65, 126, 106, 33, 3, 65, 0, 33, 8, 65, 0, 33, 7, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 4, 65, 0, 33, 6, 3, 64, 32, 4, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 7, 33, 6, 32, 5, 45, 0, 0, 13, 0, 11, 11, 2, 64, 32, 7, 32, 3, 76, 13, 0, 32, 0, 33, 4, 32, 3, 65, 0, 72, 13, 2, 32, 0, 33, 4, 3, 64, 65, 0, 33, 6, 32, 2, 33, 5, 2, 64, 3, 64, 32, 4, 32, 6, 106, 45, 0, 0, 32, 1, 32, 6, 106, 45, 0, 0, 71, 13, 1, 32, 6, 65, 1, 106, 33, 6, 32, 5, 65, 127, 106, 34, 5, 65, 1, 74, 13, 0, 12, 5, 11, 11, 32, 4, 65, 1, 106, 33, 4, 65, 0, 33, 8, 32, 7, 65, 127, 106, 34, 7, 32, 3, 74, 13, 0, 11, 11, 32, 8, 15, 11, 65, 0, 15, 11, 32, 4, 32, 0, 70, 11, 255, 128, 128, 128, 0, 1, 4, 127, 2, 64, 32, 2, 69, 13, 0, 32, 0, 33, 6, 2, 64, 32, 1, 45, 0, 0, 34, 4, 69, 13, 0, 32, 1, 65, 1, 106, 33, 1, 32, 0, 33, 5, 2, 64, 3, 64, 32, 5, 34, 3, 32, 4, 58, 0, 0, 65, 127, 33, 6, 2, 64, 32, 2, 65, 127, 70, 13, 0, 32, 2, 65, 127, 106, 34, 6, 69, 13, 2, 11, 32, 3, 65, 1, 106, 33, 5, 32, 1, 45, 0, 0, 33, 4, 32, 1, 65, 1, 106, 33, 1, 32, 6, 33, 2, 32, 4, 13, 0, 11, 11, 32, 3, 65, 1, 106, 33, 6, 11, 32, 6, 65, 0, 58, 0, 0, 32, 0, 15, 11, 65, 0, 11, 163, 128, 128, 128, 0, 0, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 3, 64, 32, 0, 65, 3, 58, 0, 0, 32, 0, 65, 1, 106, 34, 0, 45, 0, 0, 13, 0, 11, 11, 11, 160, 130, 128, 128, 0, 1, 6, 127, 65, 127, 33, 2, 2, 64, 32, 0, 45, 0, 0, 34, 1, 69, 13, 0, 65, 0, 33, 5, 32, 0, 33, 6, 3, 64, 32, 5, 34, 2, 65, 1, 106, 33, 5, 32, 6, 45, 0, 1, 33, 3, 32, 6, 65, 1, 106, 33, 6, 32, 3, 13, 0, 11, 65, 0, 33, 6, 2, 64, 2, 64, 2, 64, 32, 2, 65, 0, 72, 13, 0, 32, 0, 65, 127, 106, 33, 3, 3, 64, 32, 3, 32, 5, 106, 45, 0, 0, 65, 220, 0, 70, 13, 2, 32, 3, 65, 127, 106, 33, 3, 32, 2, 32, 6, 74, 33, 4, 32, 6, 65, 1, 106, 33, 6, 32, 4, 13, 0, 11, 11, 65, 127, 33, 2, 32, 1, 13, 1, 12, 2, 11, 32, 5, 32, 6, 107, 65, 127, 106, 33, 2, 32, 5, 32, 6, 71, 13, 1, 32, 1, 69, 13, 1, 11, 32, 0, 65, 1, 106, 33, 2, 65, 127, 33, 6, 3, 64, 32, 2, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 3, 33, 6, 32, 5, 65, 1, 106, 45, 0, 0, 13, 0, 11, 2, 64, 2, 64, 32, 3, 65, 0, 72, 13, 0, 65, 127, 33, 5, 32, 3, 33, 6, 3, 64, 32, 0, 32, 6, 106, 45, 0, 0, 65, 47, 70, 13, 2, 65, 127, 33, 2, 32, 6, 65, 127, 106, 33, 6, 32, 3, 32, 5, 65, 1, 106, 34, 5, 74, 13, 0, 12, 3, 11, 11, 65, 127, 33, 2, 12, 1, 11, 32, 6, 33, 2, 11, 32, 0, 32, 0, 32, 2, 106, 65, 1, 106, 32, 2, 65, 127, 70, 27, 11, 195, 129, 128, 128, 0, 1, 6, 127, 2, 64, 2, 64, 32, 0, 69, 13, 0, 32, 0, 45, 0, 0, 69, 13, 1, 65, 1, 33, 4, 3, 64, 32, 0, 32, 4, 106, 33, 3, 32, 4, 65, 1, 106, 34, 1, 33, 4, 32, 3, 45, 0, 0, 13, 0, 11, 32, 1, 16, 5, 34, 6, 33, 3, 2, 64, 32, 0, 45, 0, 0, 34, 4, 69, 13, 0, 32, 1, 65, 127, 106, 33, 1, 32, 0, 65, 1, 106, 33, 3, 32, 6, 33, 5, 2, 64, 3, 64, 32, 5, 34, 2, 32, 4, 58, 0, 0, 65, 127, 33, 0, 2, 64, 32, 1, 65, 127, 70, 13, 0, 32, 1, 65, 127, 106, 34, 0, 69, 13, 2, 11, 32, 2, 65, 1, 106, 33, 5, 32, 3, 45, 0, 0, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 0, 33, 1, 32, 4, 13, 0, 11, 11, 32, 2, 65, 1, 106, 33, 3, 11, 32, 3, 65, 0, 58, 0, 0, 32, 6, 15, 11, 65, 1, 16, 5, 34, 4, 65, 0, 58, 0, 0, 32, 4, 15, 11, 65, 1, 16, 5, 11, 251, 128, 128, 128, 0, 1, 3, 127, 2, 64, 32, 2, 69, 13, 0, 32, 0, 65, 0, 58, 0, 0, 11, 32, 0, 33, 2, 3, 64, 32, 2, 34, 4, 65, 1, 106, 33, 2, 32, 4, 45, 0, 0, 13, 0, 11, 2, 64, 32, 1, 45, 0, 0, 34, 5, 69, 13, 0, 32, 1, 65, 1, 106, 33, 1, 65, 127, 33, 4, 3, 64, 32, 2, 32, 4, 106, 32, 5, 58, 0, 0, 32, 1, 32, 4, 106, 33, 5, 32, 4, 65, 1, 106, 34, 3, 33, 4, 32, 5, 65, 1, 106, 45, 0, 0, 34, 5, 13, 0, 11, 32, 2, 32, 3, 106, 33, 4, 11, 32, 4, 65, 0, 58, 0, 0, 32, 0, 11, 143, 129, 128, 128, 0, 1, 4, 127, 32, 2, 32, 1, 107, 34, 5, 65, 1, 106, 16, 5, 33, 3, 2, 64, 32, 5, 69, 13, 0, 32, 3, 33, 2, 2, 64, 32, 0, 32, 1, 106, 34, 0, 45, 0, 0, 34, 1, 69, 13, 0, 32, 0, 65, 1, 106, 33, 2, 32, 3, 33, 6, 2, 64, 3, 64, 32, 6, 34, 4, 32, 1, 58, 0, 0, 65, 127, 33, 0, 2, 64, 32, 5, 65, 127, 70, 13, 0, 32, 5, 65, 127, 106, 34, 0, 69, 13, 2, 11, 32, 4, 65, 1, 106, 33, 6, 32, 2, 45, 0, 0, 33, 1, 32, 2, 65, 1, 106, 33, 2, 32, 0, 33, 5, 32, 1, 13, 0, 11, 11, 32, 4, 65, 1, 106, 33, 2, 11, 32, 2, 65, 0, 58, 0, 0, 11, 32, 3, 11, 134, 128, 128, 128, 0, 0, 32, 0, 16, 3, 11, 134, 128, 128, 128, 0, 0, 32, 0, 16, 1, 11, 193, 128, 128, 128, 0, 1, 4, 127, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 1, 65, 0, 33, 3, 3, 64, 32, 1, 32, 3, 106, 33, 2, 32, 3, 65, 1, 106, 34, 4, 33, 3, 32, 2, 45, 0, 0, 13, 0, 11, 32, 0, 32, 4, 16, 2, 15, 11, 32, 0, 65, 0, 16, 2, 11, 193, 128, 128, 128, 0, 1, 4, 127, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 1, 65, 0, 33, 3, 3, 64, 32, 1, 32, 3, 106, 33, 2, 32, 3, 65, 1, 106, 34, 4, 33, 3, 32, 2, 45, 0, 0, 13, 0, 11, 32, 0, 32, 4, 16, 7, 15, 11, 32, 0, 65, 0, 16, 7, 11, 129, 142, 128, 128, 0, 1, 9, 127, 32, 0, 40, 2, 4, 33, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 0, 34, 5, 32, 2, 79, 13, 0, 32, 0, 65, 8, 106, 33, 8, 32, 11, 33, 12, 2, 64, 2, 64, 2, 64, 3, 64, 32, 1, 32, 5, 106, 45, 0, 0, 34, 13, 69, 13, 1, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 13, 65, 24, 116, 65, 24, 117, 34, 7, 65, 119, 106, 34, 10, 65, 212, 0, 75, 13, 0, 2, 64, 2, 64, 2, 64, 32, 10, 14, 85, 12, 12, 6, 6, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 4, 12, 11, 32, 0, 32, 5, 65, 1, 106, 34, 6, 54, 2, 0, 2, 64, 32, 6, 32, 2, 79, 13, 0, 32, 6, 33, 13, 32, 5, 33, 10, 3, 64, 32, 10, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 32, 13, 106, 45, 0, 0, 34, 10, 65, 220, 0, 70, 13, 0, 32, 10, 69, 13, 6, 32, 10, 65, 34, 70, 13, 1, 32, 13, 33, 10, 12, 4, 11, 32, 13, 33, 10, 32, 7, 65, 2, 106, 34, 13, 32, 2, 79, 13, 3, 32, 0, 32, 13, 54, 2, 0, 32, 1, 32, 13, 106, 44, 0, 0, 65, 94, 106, 34, 9, 65, 211, 0, 75, 13, 1, 32, 13, 33, 10, 2, 64, 32, 9, 14, 84, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 2, 4, 0, 4, 11, 32, 0, 32, 7, 65, 3, 106, 34, 13, 54, 2, 0, 2, 64, 32, 13, 32, 2, 79, 13, 0, 32, 1, 32, 13, 106, 45, 0, 0, 34, 10, 69, 13, 0, 2, 64, 32, 10, 65, 80, 106, 65, 255, 1, 113, 65, 10, 73, 13, 0, 32, 10, 65, 191, 127, 106, 65, 6, 73, 13, 0, 32, 10, 65, 159, 127, 106, 65, 6, 79, 13, 3, 11, 32, 0, 32, 7, 65, 4, 106, 34, 13, 54, 2, 0, 32, 13, 32, 2, 79, 13, 0, 32, 1, 32, 13, 106, 45, 0, 0, 34, 10, 69, 13, 0, 2, 64, 32, 10, 65, 80, 106, 65, 255, 1, 113, 65, 10, 73, 13, 0, 32, 10, 65, 159, 127, 106, 65, 6, 73, 13, 0, 32, 10, 65, 191, 127, 106, 65, 5, 75, 13, 3, 11, 32, 0, 32, 7, 65, 5, 106, 34, 13, 54, 2, 0, 32, 13, 32, 2, 79, 13, 0, 32, 1, 32, 13, 106, 45, 0, 0, 34, 10, 69, 13, 0, 2, 64, 32, 10, 65, 80, 106, 65, 255, 1, 113, 65, 10, 73, 13, 0, 32, 10, 65, 159, 127, 106, 65, 6, 73, 13, 0, 32, 10, 65, 191, 127, 106, 65, 5, 75, 13, 3, 11, 32, 0, 32, 7, 65, 6, 106, 34, 13, 54, 2, 0, 32, 13, 32, 2, 79, 13, 0, 32, 1, 32, 13, 106, 45, 0, 0, 34, 10, 69, 13, 0, 2, 64, 32, 10, 65, 80, 106, 65, 255, 1, 113, 65, 10, 73, 13, 0, 32, 10, 65, 159, 127, 106, 65, 6, 73, 13, 0, 32, 10, 65, 191, 127, 106, 65, 5, 75, 13, 3, 11, 32, 0, 32, 7, 65, 7, 106, 34, 13, 54, 2, 0, 11, 32, 0, 32, 13, 65, 127, 106, 34, 10, 54, 2, 0, 12, 3, 11, 2, 64, 32, 3, 69, 13, 0, 32, 11, 32, 4, 79, 13, 2, 32, 0, 65, 4, 106, 32, 11, 65, 1, 106, 34, 7, 54, 2, 0, 32, 3, 32, 11, 65, 20, 108, 106, 34, 5, 65, 3, 54, 2, 0, 32, 5, 32, 6, 54, 2, 4, 32, 5, 32, 13, 54, 2, 8, 32, 5, 65, 0, 54, 2, 12, 32, 5, 32, 8, 40, 2, 0, 34, 10, 54, 2, 16, 32, 12, 65, 1, 106, 33, 12, 2, 64, 32, 10, 65, 127, 70, 13, 0, 32, 3, 32, 10, 65, 20, 108, 106, 34, 5, 32, 5, 40, 2, 12, 65, 1, 106, 54, 2, 12, 11, 32, 13, 33, 5, 32, 7, 33, 11, 12, 17, 11, 32, 12, 65, 1, 106, 33, 12, 32, 13, 33, 5, 12, 16, 11, 32, 0, 32, 5, 54, 2, 0, 65, 126, 15, 11, 32, 0, 32, 5, 54, 2, 0, 65, 127, 15, 11, 32, 0, 32, 10, 65, 1, 106, 34, 13, 54, 2, 0, 32, 13, 32, 2, 73, 13, 0, 11, 11, 32, 0, 32, 5, 54, 2, 0, 12, 19, 11, 32, 8, 32, 11, 65, 127, 106, 54, 2, 0, 12, 10, 11, 32, 3, 69, 13, 9, 32, 8, 40, 2, 0, 34, 13, 65, 127, 70, 13, 9, 32, 3, 32, 13, 65, 20, 108, 106, 34, 13, 40, 2, 0, 65, 127, 106, 65, 2, 73, 13, 9, 32, 8, 32, 13, 40, 2, 16, 54, 2, 0, 12, 9, 11, 32, 7, 65, 251, 0, 70, 13, 1, 32, 7, 65, 253, 0, 71, 13, 2, 11, 32, 3, 69, 13, 7, 65, 126, 33, 7, 32, 11, 69, 13, 16, 65, 1, 65, 2, 32, 13, 65, 253, 0, 70, 27, 33, 9, 32, 11, 65, 127, 106, 33, 10, 3, 64, 2, 64, 32, 3, 32, 10, 65, 20, 108, 106, 34, 13, 40, 2, 4, 65, 127, 70, 13, 0, 32, 13, 40, 2, 8, 65, 127, 70, 13, 4, 11, 32, 13, 40, 2, 16, 34, 10, 65, 127, 71, 13, 0, 11, 32, 13, 40, 2, 0, 32, 9, 71, 13, 16, 32, 8, 40, 2, 0, 65, 127, 71, 13, 7, 12, 16, 11, 32, 12, 65, 1, 106, 33, 12, 32, 3, 69, 13, 6, 65, 127, 33, 7, 32, 11, 32, 4, 79, 13, 15, 32, 0, 65, 4, 106, 32, 11, 65, 1, 106, 34, 9, 54, 2, 0, 32, 3, 32, 11, 65, 20, 108, 106, 34, 10, 66, 127, 55, 2, 4, 32, 10, 66, 128, 128, 128, 128, 112, 55, 2, 12, 32, 10, 69, 13, 15, 32, 10, 65, 4, 106, 33, 6, 2, 64, 32, 8, 40, 2, 0, 34, 7, 65, 127, 70, 13, 0, 32, 10, 65, 16, 106, 32, 7, 54, 2, 0, 32, 3, 32, 7, 65, 20, 108, 106, 34, 7, 32, 7, 40, 2, 12, 65, 1, 106, 54, 2, 12, 11, 32, 6, 32, 5, 54, 2, 0, 32, 8, 32, 11, 54, 2, 0, 32, 10, 65, 1, 65, 2, 32, 13, 65, 251, 0, 70, 27, 54, 2, 0, 32, 9, 33, 11, 12, 6, 11, 32, 5, 33, 10, 2, 64, 32, 13, 69, 13, 0, 32, 5, 65, 1, 106, 33, 7, 3, 64, 32, 7, 33, 10, 2, 64, 2, 64, 32, 13, 65, 24, 116, 65, 24, 117, 34, 7, 65, 119, 106, 34, 9, 65, 49, 75, 13, 0, 32, 9, 14, 50, 5, 5, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 11, 32, 7, 65, 221, 0, 70, 13, 4, 32, 7, 65, 253, 0, 70, 13, 4, 11, 65, 126, 33, 9, 32, 7, 65, 32, 72, 13, 11, 32, 13, 65, 255, 1, 113, 65, 255, 0, 70, 13, 11, 32, 0, 32, 10, 54, 2, 0, 32, 10, 32, 2, 79, 13, 1, 32, 10, 65, 1, 106, 33, 7, 32, 1, 32, 10, 106, 45, 0, 0, 34, 13, 13, 0, 11, 11, 32, 3, 69, 13, 3, 12, 2, 11, 32, 13, 40, 2, 0, 32, 9, 71, 13, 13, 32, 13, 65, 8, 106, 32, 5, 65, 1, 106, 54, 2, 0, 32, 8, 32, 13, 40, 2, 16, 54, 2, 0, 12, 4, 11, 32, 10, 65, 127, 106, 33, 10, 32, 3, 69, 13, 1, 11, 32, 11, 32, 4, 79, 13, 5, 32, 0, 65, 4, 106, 32, 11, 65, 1, 106, 34, 9, 54, 2, 0, 32, 3, 32, 11, 65, 20, 108, 106, 34, 13, 65, 4, 54, 2, 0, 32, 13, 32, 5, 54, 2, 4, 32, 13, 32, 10, 54, 2, 8, 32, 13, 65, 0, 54, 2, 12, 32, 13, 32, 8, 40, 2, 0, 34, 7, 54, 2, 16, 32, 9, 33, 11, 12, 1, 11, 32, 8, 40, 2, 0, 33, 7, 11, 32, 0, 32, 10, 65, 127, 106, 34, 5, 54, 2, 0, 32, 12, 65, 1, 106, 33, 12, 32, 3, 69, 13, 0, 32, 7, 65, 127, 70, 13, 0, 32, 3, 32, 7, 65, 20, 108, 106, 34, 13, 32, 13, 40, 2, 12, 65, 1, 106, 54, 2, 12, 11, 32, 0, 32, 5, 65, 1, 106, 34, 5, 54, 2, 0, 32, 5, 32, 2, 73, 13, 0, 11, 11, 32, 3, 69, 13, 3, 12, 4, 11, 65, 127, 33, 9, 11, 32, 0, 32, 5, 54, 2, 0, 32, 9, 15, 11, 32, 11, 33, 12, 32, 3, 13, 1, 11, 32, 12, 15, 11, 32, 11, 65, 127, 106, 34, 5, 65, 0, 72, 13, 2, 32, 3, 32, 11, 65, 20, 108, 106, 65, 112, 106, 33, 13, 3, 64, 2, 64, 32, 13, 40, 2, 0, 65, 127, 70, 13, 0, 32, 13, 65, 4, 106, 40, 2, 0, 65, 127, 70, 13, 2, 11, 32, 13, 65, 108, 106, 33, 13, 32, 5, 65, 127, 106, 34, 5, 65, 127, 74, 13, 0, 11, 32, 12, 15, 11, 65, 125, 33, 7, 11, 32, 7, 15, 11, 32, 12, 11, 144, 128, 128, 128, 0, 0, 32, 0, 65, 127, 54, 2, 8, 32, 0, 66, 0, 55, 2, 0, 11, 232, 131, 128, 128, 0, 1, 14, 127, 65, 12, 16, 5, 34, 12, 65, 127, 54, 2, 8, 32, 12, 66, 0, 55, 2, 0, 65, 0, 33, 11, 65, 128, 160, 1, 16, 5, 65, 0, 65, 128, 160, 1, 16, 8, 33, 2, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 13, 65, 0, 33, 14, 3, 64, 32, 13, 32, 14, 106, 33, 9, 32, 14, 65, 1, 106, 34, 11, 33, 14, 32, 9, 45, 0, 0, 13, 0, 11, 11, 2, 64, 2, 64, 32, 12, 32, 0, 32, 11, 32, 2, 65, 128, 8, 16, 30, 34, 4, 65, 127, 76, 13, 0, 2, 64, 32, 1, 69, 13, 0, 32, 1, 32, 4, 54, 2, 0, 11, 32, 4, 65, 20, 108, 34, 14, 16, 5, 34, 15, 65, 0, 32, 14, 16, 8, 33, 3, 32, 4, 65, 1, 72, 13, 1, 32, 0, 65, 1, 106, 33, 5, 65, 0, 33, 10, 3, 64, 32, 3, 32, 10, 65, 20, 108, 34, 14, 106, 33, 7, 2, 64, 32, 2, 32, 14, 106, 34, 6, 40, 2, 0, 65, 125, 106, 65, 1, 75, 13, 0, 32, 6, 40, 2, 8, 32, 6, 40, 2, 4, 34, 9, 107, 34, 11, 65, 1, 106, 16, 5, 33, 8, 2, 64, 32, 11, 69, 13, 0, 32, 8, 33, 13, 2, 64, 32, 0, 32, 9, 106, 45, 0, 0, 34, 14, 69, 13, 0, 32, 5, 32, 9, 106, 33, 9, 32, 8, 33, 12, 2, 64, 3, 64, 32, 12, 34, 1, 32, 14, 58, 0, 0, 65, 127, 33, 13, 2, 64, 32, 11, 65, 127, 70, 13, 0, 32, 11, 65, 127, 106, 34, 13, 69, 13, 2, 11, 32, 1, 65, 1, 106, 33, 12, 32, 9, 45, 0, 0, 33, 14, 32, 9, 65, 1, 106, 33, 9, 32, 13, 33, 11, 32, 14, 13, 0, 11, 11, 32, 1, 65, 1, 106, 33, 13, 11, 32, 13, 65, 0, 58, 0, 0, 11, 32, 7, 32, 8, 54, 2, 0, 11, 32, 7, 32, 6, 54, 2, 4, 2, 64, 32, 6, 40, 2, 16, 34, 14, 65, 127, 70, 13, 0, 32, 7, 32, 3, 32, 14, 65, 20, 108, 106, 34, 9, 54, 2, 8, 2, 64, 2, 64, 32, 9, 40, 2, 12, 34, 14, 69, 13, 0, 3, 64, 32, 14, 34, 9, 40, 2, 16, 34, 14, 13, 0, 11, 32, 9, 65, 16, 106, 33, 14, 12, 1, 11, 32, 9, 65, 12, 106, 33, 14, 11, 32, 14, 32, 7, 54, 2, 0, 11, 32, 10, 65, 1, 106, 34, 10, 32, 4, 71, 13, 0, 12, 2, 11, 11, 2, 64, 32, 12, 69, 13, 0, 32, 12, 16, 4, 11, 65, 0, 33, 15, 32, 2, 69, 13, 0, 32, 2, 16, 4, 65, 0, 15, 11, 32, 15, 11, 252, 129, 128, 128, 0, 1, 6, 127, 65, 0, 33, 6, 2, 64, 32, 1, 69, 13, 0, 32, 0, 69, 13, 0, 32, 1, 65, 1, 106, 33, 2, 2, 64, 3, 64, 2, 64, 32, 0, 40, 2, 0, 34, 3, 69, 13, 0, 2, 64, 2, 64, 32, 3, 45, 0, 0, 69, 13, 0, 32, 3, 65, 1, 106, 33, 4, 65, 0, 33, 6, 3, 64, 32, 4, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 7, 33, 6, 32, 5, 45, 0, 0, 13, 0, 12, 2, 11, 11, 65, 0, 33, 7, 11, 32, 3, 32, 7, 16, 2, 11, 2, 64, 2, 64, 32, 1, 45, 0, 0, 69, 13, 0, 65, 0, 33, 6, 3, 64, 32, 2, 32, 6, 106, 33, 5, 32, 6, 65, 1, 106, 34, 7, 33, 6, 32, 5, 45, 0, 0, 13, 0, 12, 2, 11, 11, 65, 0, 33, 7, 11, 32, 1, 32, 7, 16, 2, 2, 64, 32, 0, 40, 2, 0, 34, 6, 69, 13, 0, 32, 1, 33, 5, 3, 64, 32, 6, 45, 0, 0, 34, 7, 32, 5, 45, 0, 0, 71, 13, 1, 32, 6, 65, 1, 106, 33, 6, 32, 5, 65, 1, 106, 33, 5, 32, 7, 13, 0, 12, 3, 11, 11, 32, 0, 40, 2, 16, 32, 1, 16, 33, 34, 6, 13, 2, 32, 0, 40, 2, 12, 34, 0, 13, 0, 11, 65, 0, 15, 11, 32, 0, 33, 6, 11, 32, 6, 11, 206, 128, 128, 128, 0, 1, 2, 127, 2, 64, 2, 64, 2, 64, 32, 1, 65, 1, 72, 13, 0, 32, 0, 33, 3, 3, 64, 2, 64, 32, 3, 40, 2, 0, 34, 2, 69, 13, 0, 32, 2, 16, 4, 32, 3, 65, 0, 54, 2, 0, 11, 32, 3, 65, 20, 106, 33, 3, 32, 1, 65, 127, 106, 34, 1, 13, 0, 12, 2, 11, 11, 32, 0, 69, 13, 1, 11, 32, 0, 16, 4, 11, 11, 168, 128, 128, 128, 0, 1, 1, 126, 2, 64, 32, 0, 80, 13, 0, 3, 64, 32, 1, 32, 0, 34, 2, 129, 33, 0, 32, 2, 33, 1, 32, 0, 66, 0, 82, 13, 0, 11, 32, 2, 15, 11, 32, 1, 11, 195, 128, 128, 128, 0, 1, 4, 126, 2, 64, 32, 0, 80, 13, 0, 66, 1, 33, 3, 66, 0, 33, 4, 3, 64, 32, 3, 32, 1, 32, 0, 34, 2, 127, 32, 4, 34, 5, 126, 125, 33, 4, 32, 1, 32, 2, 129, 33, 0, 32, 5, 33, 3, 32, 2, 33, 1, 32, 0, 66, 0, 82, 13, 0, 11, 32, 5, 15, 11, 66, 1, 11, 135, 129, 128, 128, 0, 1, 2, 126, 2, 64, 2, 64, 32, 1, 32, 0, 132, 66, 0, 83, 13, 0, 32, 2, 66, 0, 85, 13, 1, 11, 65, 1, 16, 0, 11, 32, 0, 32, 2, 129, 33, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 80, 13, 0, 32, 1, 66, 1, 82, 13, 1, 32, 0, 15, 11, 66, 1, 33, 4, 12, 1, 11, 32, 1, 66, 2, 129, 34, 3, 66, 1, 81, 13, 1, 66, 0, 33, 4, 32, 3, 66, 0, 82, 13, 0, 32, 0, 32, 0, 126, 32, 2, 129, 32, 1, 66, 2, 127, 32, 2, 16, 37, 32, 2, 129, 15, 11, 32, 4, 15, 11, 32, 0, 32, 1, 66, 127, 124, 32, 2, 16, 37, 32, 0, 126, 32, 2, 129, 11, 149, 129, 128, 128, 0, 1, 7, 126, 2, 64, 2, 64, 32, 1, 66, 127, 124, 32, 0, 66, 127, 124, 126, 34, 4, 80, 13, 0, 66, 129, 2, 33, 10, 66, 1, 33, 7, 32, 4, 33, 6, 66, 0, 33, 8, 3, 64, 32, 7, 32, 10, 32, 6, 34, 5, 127, 32, 8, 34, 9, 126, 125, 33, 8, 32, 10, 32, 5, 129, 33, 6, 32, 9, 33, 7, 32, 5, 33, 10, 32, 6, 66, 0, 82, 13, 0, 12, 2, 11, 11, 66, 1, 33, 9, 11, 32, 1, 32, 0, 126, 33, 6, 32, 9, 32, 4, 125, 33, 10, 3, 64, 32, 10, 32, 4, 124, 34, 10, 66, 0, 83, 13, 0, 11, 32, 2, 66, 129, 2, 55, 3, 8, 32, 2, 32, 6, 55, 3, 0, 32, 3, 32, 6, 55, 3, 0, 32, 3, 32, 10, 55, 3, 8, 11, 188, 128, 128, 128, 0, 1, 1, 127, 2, 64, 32, 1, 65, 1, 72, 13, 0, 65, 0, 33, 2, 3, 64, 65, 2, 65, 1, 32, 0, 44, 0, 0, 65, 0, 72, 27, 32, 2, 106, 33, 2, 32, 0, 65, 1, 106, 33, 0, 32, 1, 65, 127, 106, 34, 1, 13, 0, 11, 32, 2, 15, 11, 65, 0, 11, 131, 131, 128, 128, 0, 4, 2, 126, 3, 127, 4, 126, 3, 127, 65, 0, 65, 200, 0, 16, 5, 34, 11, 54, 2, 20, 32, 11, 65, 0, 65, 200, 0, 16, 8, 26, 65, 0, 66, 211, 129, 128, 128, 208, 247, 229, 0, 55, 2, 12, 66, 129, 2, 33, 9, 66, 1, 33, 8, 66, 184, 240, 185, 10, 33, 7, 66, 0, 33, 10, 3, 64, 32, 8, 32, 9, 32, 7, 34, 2, 127, 32, 10, 34, 3, 126, 125, 33, 10, 32, 9, 32, 2, 129, 33, 7, 32, 3, 33, 8, 32, 2, 33, 9, 32, 7, 66, 0, 82, 13, 0, 11, 32, 11, 66, 129, 2, 55, 3, 40, 32, 11, 66, 199, 161, 192, 10, 55, 3, 48, 32, 11, 65, 32, 106, 66, 199, 161, 192, 10, 55, 3, 0, 32, 11, 32, 3, 66, 0, 32, 3, 66, 0, 85, 27, 66, 183, 240, 185, 10, 124, 34, 9, 32, 9, 32, 3, 125, 66, 184, 240, 185, 10, 130, 125, 55, 3, 56, 2, 64, 2, 64, 2, 64, 32, 0, 69, 13, 0, 32, 0, 45, 0, 0, 69, 13, 1, 65, 1, 33, 11, 3, 64, 32, 0, 32, 11, 106, 33, 6, 32, 11, 65, 1, 106, 34, 4, 33, 11, 32, 6, 45, 0, 0, 13, 0, 11, 32, 4, 16, 5, 34, 13, 33, 6, 2, 64, 32, 0, 45, 0, 0, 34, 11, 69, 13, 0, 32, 4, 65, 127, 106, 33, 4, 32, 0, 65, 1, 106, 33, 6, 32, 13, 33, 12, 2, 64, 3, 64, 32, 12, 34, 5, 32, 11, 58, 0, 0, 65, 127, 33, 0, 2, 64, 32, 4, 65, 127, 70, 13, 0, 32, 4, 65, 127, 106, 34, 0, 69, 13, 2, 11, 32, 5, 65, 1, 106, 33, 12, 32, 6, 45, 0, 0, 33, 11, 32, 6, 65, 1, 106, 33, 6, 32, 0, 33, 4, 32, 11, 13, 0, 11, 11, 32, 5, 65, 1, 106, 33, 6, 11, 32, 6, 65, 0, 58, 0, 0, 12, 2, 11, 65, 1, 16, 5, 34, 13, 65, 0, 58, 0, 0, 12, 1, 11, 65, 1, 16, 5, 33, 13, 11, 65, 0, 40, 2, 20, 34, 11, 32, 13, 54, 2, 64, 32, 11, 32, 1, 54, 2, 68, 11, 227, 129, 128, 128, 0, 3, 4, 126, 1, 127, 5, 126, 2, 64, 65, 0, 40, 2, 20, 34, 6, 13, 0, 65, 0, 65, 200, 0, 16, 5, 34, 6, 54, 2, 20, 32, 6, 65, 0, 65, 200, 0, 16, 8, 26, 11, 65, 0, 32, 1, 54, 2, 16, 65, 0, 32, 0, 54, 2, 12, 2, 64, 2, 64, 32, 1, 172, 34, 5, 66, 127, 124, 32, 0, 172, 34, 4, 66, 127, 124, 126, 34, 2, 80, 13, 0, 66, 129, 2, 33, 11, 66, 1, 33, 8, 32, 2, 33, 7, 66, 0, 33, 9, 3, 64, 32, 8, 32, 11, 32, 7, 34, 3, 127, 32, 9, 34, 10, 126, 125, 33, 9, 32, 11, 32, 3, 129, 33, 7, 32, 10, 33, 8, 32, 3, 33, 11, 32, 7, 66, 0, 82, 13, 0, 12, 2, 11, 11, 66, 1, 33, 10, 11, 32, 5, 32, 4, 126, 33, 7, 32, 10, 32, 2, 125, 33, 11, 3, 64, 32, 11, 32, 2, 124, 34, 11, 66, 0, 83, 13, 0, 11, 32, 6, 32, 7, 55, 3, 32, 32, 6, 32, 7, 55, 3, 48, 32, 6, 65, 32, 54, 2, 64, 32, 6, 65, 0, 54, 2, 68, 32, 6, 65, 40, 106, 66, 129, 2, 55, 3, 0, 32, 6, 65, 56, 106, 32, 11, 55, 3, 0, 11, 156, 128, 128, 128, 0, 1, 1, 127, 2, 64, 65, 0, 40, 2, 20, 34, 0, 69, 13, 0, 32, 0, 16, 4, 65, 0, 65, 0, 54, 2, 20, 11, 11, 165, 128, 128, 128, 0, 1, 1, 127, 65, 0, 40, 2, 20, 34, 4, 32, 0, 54, 2, 0, 32, 4, 32, 1, 54, 2, 4, 32, 4, 32, 2, 54, 2, 8, 32, 4, 32, 3, 54, 2, 12, 11, 154, 129, 128, 128, 0, 1, 5, 127, 65, 0, 40, 2, 20, 34, 0, 32, 0, 40, 2, 0, 34, 4, 65, 6, 116, 32, 4, 115, 65, 13, 118, 32, 4, 65, 18, 116, 65, 128, 128, 96, 113, 114, 34, 1, 54, 2, 0, 32, 0, 32, 0, 40, 2, 4, 34, 4, 65, 2, 116, 34, 3, 32, 4, 115, 65, 27, 118, 32, 3, 65, 96, 113, 114, 34, 2, 54, 2, 4, 32, 0, 40, 2, 12, 33, 4, 32, 0, 32, 0, 40, 2, 8, 34, 3, 65, 13, 116, 32, 3, 115, 65, 21, 118, 32, 3, 65, 7, 116, 65, 128, 112, 113, 114, 34, 3, 54, 2, 8, 32, 0, 32, 4, 32, 4, 65, 3, 116, 115, 65, 12, 118, 32, 4, 65, 13, 116, 65, 128, 128, 64, 113, 114, 34, 4, 54, 2, 12, 32, 2, 32, 1, 115, 32, 3, 115, 32, 4, 115, 11, 166, 129, 128, 128, 0, 1, 5, 127, 65, 0, 40, 2, 20, 34, 2, 32, 2, 40, 2, 0, 34, 6, 65, 6, 116, 32, 6, 115, 65, 13, 118, 32, 6, 65, 18, 116, 65, 128, 128, 96, 113, 114, 34, 3, 54, 2, 0, 32, 2, 32, 2, 40, 2, 4, 34, 6, 65, 2, 116, 34, 5, 32, 6, 115, 65, 27, 118, 32, 5, 65, 96, 113, 114, 34, 4, 54, 2, 4, 32, 2, 40, 2, 12, 33, 6, 32, 2, 32, 2, 40, 2, 8, 34, 5, 65, 13, 116, 32, 5, 115, 65, 21, 118, 32, 5, 65, 7, 116, 65, 128, 112, 113, 114, 34, 5, 54, 2, 8, 32, 2, 32, 6, 32, 6, 65, 3, 116, 115, 65, 12, 118, 32, 6, 65, 13, 116, 65, 128, 128, 64, 113, 114, 34, 6, 54, 2, 12, 32, 4, 32, 3, 115, 32, 5, 115, 32, 6, 115, 65, 1, 32, 0, 107, 32, 1, 106, 112, 32, 0, 106, 11, 140, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 64, 16, 6, 11, 182, 129, 128, 128, 0, 1, 5, 127, 2, 64, 65, 0, 40, 2, 20, 34, 3, 40, 2, 64, 34, 5, 45, 0, 0, 34, 6, 69, 13, 0, 32, 5, 69, 13, 0, 32, 0, 65, 32, 32, 0, 27, 34, 2, 45, 0, 0, 34, 0, 65, 255, 1, 113, 34, 4, 69, 13, 0, 32, 6, 32, 4, 71, 13, 0, 32, 5, 65, 1, 106, 33, 5, 32, 2, 65, 1, 106, 33, 6, 2, 64, 3, 64, 32, 0, 65, 255, 1, 113, 69, 13, 1, 32, 6, 45, 0, 0, 33, 0, 32, 5, 45, 0, 0, 33, 4, 32, 5, 65, 1, 106, 33, 5, 32, 6, 65, 1, 106, 33, 6, 32, 4, 32, 0, 70, 13, 0, 12, 2, 11, 11, 32, 3, 40, 2, 68, 34, 0, 32, 1, 70, 13, 0, 32, 1, 69, 13, 0, 32, 0, 69, 13, 0, 32, 3, 32, 3, 40, 2, 16, 65, 144, 128, 1, 114, 54, 2, 16, 11, 32, 3, 32, 3, 40, 2, 16, 65, 128, 128, 128, 128, 120, 114, 54, 2, 16, 11, 158, 129, 128, 128, 0, 1, 6, 127, 65, 8, 33, 6, 2, 64, 32, 0, 44, 0, 0, 34, 1, 69, 13, 0, 32, 0, 65, 1, 106, 33, 2, 65, 126, 33, 5, 3, 64, 32, 2, 32, 5, 106, 33, 4, 32, 5, 65, 1, 106, 34, 3, 33, 5, 32, 4, 65, 2, 106, 45, 0, 0, 13, 0, 11, 32, 3, 65, 1, 106, 65, 0, 72, 13, 0, 65, 2, 65, 1, 32, 1, 65, 0, 72, 27, 33, 4, 2, 64, 32, 3, 65, 127, 70, 13, 0, 32, 0, 65, 1, 106, 33, 0, 65, 0, 33, 5, 3, 64, 65, 2, 65, 1, 32, 0, 32, 5, 106, 44, 0, 0, 65, 0, 72, 27, 32, 4, 106, 33, 4, 32, 5, 32, 3, 71, 33, 2, 32, 5, 65, 1, 106, 33, 5, 32, 2, 13, 0, 11, 11, 32, 4, 65, 3, 116, 65, 8, 106, 33, 6, 11, 32, 6, 11, 163, 128, 128, 128, 0, 0, 2, 64, 2, 64, 32, 0, 69, 13, 0, 32, 0, 32, 1, 106, 45, 0, 0, 33, 0, 12, 1, 11, 65, 0, 33, 0, 11, 32, 0, 65, 255, 1, 113, 11, 220, 131, 128, 128, 0, 2, 10, 127, 1, 126, 65, 0, 33, 9, 65, 0, 33, 3, 2, 64, 32, 0, 44, 0, 0, 34, 1, 69, 13, 0, 32, 0, 65, 1, 106, 33, 7, 65, 0, 33, 10, 3, 64, 32, 7, 32, 10, 106, 33, 3, 32, 10, 65, 1, 106, 34, 9, 33, 10, 32, 3, 45, 0, 0, 13, 0, 11, 65, 0, 33, 3, 32, 9, 65, 127, 106, 65, 0, 72, 13, 0, 65, 2, 65, 1, 32, 1, 65, 0, 72, 27, 33, 3, 32, 9, 65, 1, 70, 13, 0, 32, 0, 65, 1, 106, 33, 1, 65, 0, 33, 10, 3, 64, 65, 2, 65, 1, 32, 1, 32, 10, 106, 44, 0, 0, 65, 0, 72, 27, 32, 3, 106, 33, 3, 32, 10, 65, 2, 106, 33, 7, 32, 10, 65, 1, 106, 33, 10, 32, 7, 32, 9, 71, 13, 0, 11, 11, 32, 3, 65, 3, 116, 65, 8, 106, 16, 5, 34, 1, 32, 3, 172, 65, 0, 40, 2, 20, 34, 10, 65, 40, 106, 34, 2, 41, 3, 0, 32, 10, 41, 3, 32, 16, 37, 55, 3, 0, 2, 64, 32, 9, 65, 1, 72, 13, 0, 32, 10, 65, 32, 106, 33, 8, 65, 1, 33, 10, 3, 64, 2, 64, 32, 0, 48, 0, 0, 34, 11, 66, 127, 85, 13, 0, 65, 0, 40, 2, 20, 34, 3, 32, 3, 40, 2, 0, 34, 7, 65, 6, 116, 32, 7, 115, 65, 13, 118, 32, 7, 65, 18, 116, 65, 128, 128, 96, 113, 114, 34, 4, 54, 2, 0, 32, 3, 32, 3, 40, 2, 4, 34, 7, 65, 2, 116, 34, 6, 32, 7, 115, 65, 27, 118, 32, 6, 65, 96, 113, 114, 34, 5, 54, 2, 4, 32, 3, 40, 2, 12, 33, 7, 32, 3, 32, 3, 40, 2, 8, 34, 6, 65, 13, 116, 32, 6, 115, 65, 21, 118, 32, 6, 65, 7, 116, 65, 128, 112, 113, 114, 34, 6, 54, 2, 8, 32, 3, 32, 7, 32, 7, 65, 3, 116, 115, 65, 12, 118, 32, 7, 65, 13, 116, 65, 128, 128, 64, 113, 114, 34, 7, 54, 2, 12, 32, 1, 32, 10, 65, 3, 116, 106, 32, 5, 32, 4, 115, 32, 6, 115, 32, 7, 115, 65, 7, 112, 65, 1, 106, 173, 32, 2, 41, 3, 0, 32, 8, 41, 3, 0, 16, 37, 55, 3, 0, 66, 0, 32, 11, 125, 33, 11, 32, 10, 65, 1, 106, 33, 10, 11, 32, 1, 32, 10, 65, 3, 116, 106, 32, 11, 32, 2, 41, 3, 0, 32, 8, 41, 3, 0, 16, 37, 55, 3, 0, 32, 0, 65, 1, 106, 33, 0, 32, 10, 65, 1, 106, 33, 10, 32, 9, 65, 127, 106, 34, 9, 13, 0, 11, 11, 32, 1, 11, 156, 128, 128, 128, 0, 0, 32, 0, 41, 3, 0, 65, 0, 40, 2, 20, 34, 0, 65, 56, 106, 41, 3, 0, 32, 0, 41, 3, 48, 16, 37, 167, 11, 228, 129, 128, 128, 0, 3, 7, 127, 1, 126, 1, 127, 65, 0, 33, 9, 2, 64, 32, 0, 41, 3, 0, 65, 0, 40, 2, 20, 34, 6, 65, 56, 106, 41, 3, 0, 32, 6, 41, 3, 48, 16, 37, 167, 34, 2, 69, 13, 0, 32, 2, 65, 1, 106, 34, 6, 16, 5, 34, 9, 65, 0, 32, 6, 16, 8, 33, 1, 65, 0, 33, 6, 2, 64, 32, 2, 65, 1, 72, 13, 0, 65, 0, 33, 5, 65, 0, 40, 2, 20, 34, 6, 65, 48, 106, 33, 3, 32, 6, 65, 56, 106, 33, 4, 65, 0, 33, 6, 3, 64, 2, 64, 2, 64, 32, 0, 32, 5, 65, 1, 106, 34, 7, 65, 3, 116, 106, 41, 3, 0, 32, 4, 41, 3, 0, 32, 3, 41, 3, 0, 16, 37, 34, 8, 66, 7, 85, 13, 0, 66, 0, 32, 0, 32, 5, 65, 3, 116, 106, 65, 16, 106, 41, 3, 0, 32, 4, 41, 3, 0, 32, 3, 41, 3, 0, 16, 37, 125, 33, 8, 12, 1, 11, 32, 5, 33, 7, 11, 32, 1, 32, 6, 106, 32, 8, 60, 0, 0, 32, 6, 65, 1, 106, 33, 6, 32, 7, 65, 1, 106, 34, 5, 32, 2, 72, 13, 0, 11, 11, 32, 1, 32, 6, 106, 65, 0, 58, 0, 0, 11, 32, 9, 11, 214, 131, 128, 128, 0, 4, 2, 127, 4, 126, 1, 127, 5, 126, 65, 0, 40, 2, 16, 33, 4, 65, 0, 40, 2, 12, 33, 3, 2, 64, 65, 0, 40, 2, 20, 34, 9, 13, 0, 65, 0, 65, 200, 0, 16, 5, 34, 9, 54, 2, 20, 32, 9, 65, 0, 65, 200, 0, 16, 8, 26, 11, 65, 0, 32, 2, 54, 2, 16, 65, 0, 32, 1, 54, 2, 12, 2, 64, 2, 64, 32, 2, 172, 34, 8, 66, 127, 124, 32, 1, 172, 34, 7, 66, 127, 124, 126, 34, 5, 80, 13, 0, 66, 129, 2, 33, 14, 66, 1, 33, 11, 32, 5, 33, 10, 66, 0, 33, 12, 3, 64, 32, 11, 32, 14, 32, 10, 34, 6, 127, 32, 12, 34, 13, 126, 125, 33, 12, 32, 14, 32, 6, 129, 33, 10, 32, 13, 33, 11, 32, 6, 33, 14, 32, 10, 66, 0, 82, 13, 0, 12, 2, 11, 11, 66, 1, 33, 13, 11, 32, 8, 32, 7, 126, 33, 10, 32, 13, 32, 5, 125, 33, 14, 3, 64, 32, 14, 32, 5, 124, 34, 14, 66, 0, 83, 13, 0, 11, 32, 9, 32, 10, 55, 3, 32, 32, 9, 32, 10, 55, 3, 48, 32, 9, 65, 32, 54, 2, 64, 32, 9, 65, 0, 54, 2, 68, 32, 9, 65, 40, 106, 66, 129, 2, 55, 3, 0, 32, 9, 65, 56, 106, 32, 14, 55, 3, 0, 32, 0, 16, 50, 33, 1, 2, 64, 65, 0, 40, 2, 20, 34, 9, 13, 0, 65, 0, 65, 200, 0, 16, 5, 34, 9, 54, 2, 20, 32, 9, 65, 0, 65, 200, 0, 16, 8, 26, 11, 65, 0, 32, 4, 54, 2, 16, 65, 0, 32, 3, 54, 2, 12, 2, 64, 2, 64, 32, 4, 172, 34, 8, 66, 127, 124, 32, 3, 172, 34, 7, 66, 127, 124, 126, 34, 5, 80, 13, 0, 66, 129, 2, 33, 14, 66, 1, 33, 11, 32, 5, 33, 10, 66, 0, 33, 12, 3, 64, 32, 11, 32, 14, 32, 10, 34, 6, 127, 32, 12, 34, 13, 126, 125, 33, 12, 32, 14, 32, 6, 129, 33, 10, 32, 13, 33, 11, 32, 6, 33, 14, 32, 10, 66, 0, 82, 13, 0, 12, 2, 11, 11, 66, 1, 33, 13, 11, 32, 8, 32, 7, 126, 33, 10, 32, 13, 32, 5, 125, 33, 14, 3, 64, 32, 14, 32, 5, 124, 34, 14, 66, 0, 83, 13, 0, 11, 32, 9, 32, 10, 55, 3, 32, 32, 9, 32, 10, 55, 3, 48, 32, 9, 65, 32, 54, 2, 64, 32, 9, 65, 0, 54, 2, 68, 32, 9, 65, 40, 106, 66, 129, 2, 55, 3, 0, 32, 9, 65, 56, 106, 32, 14, 55, 3, 0, 32, 1, 11, 214, 131, 128, 128, 0, 4, 2, 127, 4, 126, 1, 127, 5, 126, 65, 0, 40, 2, 16, 33, 4, 65, 0, 40, 2, 12, 33, 3, 2, 64, 65, 0, 40, 2, 20, 34, 9, 13, 0, 65, 0, 65, 200, 0, 16, 5, 34, 9, 54, 2, 20, 32, 9, 65, 0, 65, 200, 0, 16, 8, 26, 11, 65, 0, 32, 2, 54, 2, 16, 65, 0, 32, 1, 54, 2, 12, 2, 64, 2, 64, 32, 2, 172, 34, 8, 66, 127, 124, 32, 1, 172, 34, 7, 66, 127, 124, 126, 34, 5, 80, 13, 0, 66, 129, 2, 33, 14, 66, 1, 33, 11, 32, 5, 33, 10, 66, 0, 33, 12, 3, 64, 32, 11, 32, 14, 32, 10, 34, 6, 127, 32, 12, 34, 13, 126, 125, 33, 12, 32, 14, 32, 6, 129, 33, 10, 32, 13, 33, 11, 32, 6, 33, 14, 32, 10, 66, 0, 82, 13, 0, 12, 2, 11, 11, 66, 1, 33, 13, 11, 32, 8, 32, 7, 126, 33, 10, 32, 13, 32, 5, 125, 33, 14, 3, 64, 32, 14, 32, 5, 124, 34, 14, 66, 0, 83, 13, 0, 11, 32, 9, 32, 10, 55, 3, 32, 32, 9, 32, 10, 55, 3, 48, 32, 9, 65, 32, 54, 2, 64, 32, 9, 65, 0, 54, 2, 68, 32, 9, 65, 40, 106, 66, 129, 2, 55, 3, 0, 32, 9, 65, 56, 106, 32, 14, 55, 3, 0, 32, 0, 16, 52, 33, 1, 2, 64, 65, 0, 40, 2, 20, 34, 9, 13, 0, 65, 0, 65, 200, 0, 16, 5, 34, 9, 54, 2, 20, 32, 9, 65, 0, 65, 200, 0, 16, 8, 26, 11, 65, 0, 32, 4, 54, 2, 16, 65, 0, 32, 3, 54, 2, 12, 2, 64, 2, 64, 32, 4, 172, 34, 8, 66, 127, 124, 32, 3, 172, 34, 7, 66, 127, 124, 126, 34, 5, 80, 13, 0, 66, 129, 2, 33, 14, 66, 1, 33, 11, 32, 5, 33, 10, 66, 0, 33, 12, 3, 64, 32, 11, 32, 14, 32, 10, 34, 6, 127, 32, 12, 34, 13, 126, 125, 33, 12, 32, 14, 32, 6, 129, 33, 10, 32, 13, 33, 11, 32, 6, 33, 14, 32, 10, 66, 0, 82, 13, 0, 12, 2, 11, 11, 66, 1, 33, 13, 11, 32, 8, 32, 7, 126, 33, 10, 32, 13, 32, 5, 125, 33, 14, 3, 64, 32, 14, 32, 5, 124, 34, 14, 66, 0, 83, 13, 0, 11, 32, 9, 32, 10, 55, 3, 32, 32, 9, 32, 10, 55, 3, 48, 32, 9, 65, 32, 54, 2, 64, 32, 9, 65, 0, 54, 2, 68, 32, 9, 65, 40, 106, 66, 129, 2, 55, 3, 0, 32, 9, 65, 56, 106, 32, 14, 55, 3, 0, 32, 1, 11, 138, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 16, 11, 138, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 20, 11, 138, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 24, 11, 147, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 28, 32, 0, 65, 12, 108, 106, 40, 2, 4, 11, 147, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 28, 32, 0, 65, 12, 108, 106, 40, 2, 0, 11, 147, 128, 128, 128, 0, 0, 65, 0, 40, 2, 20, 40, 2, 28, 32, 0, 65, 12, 108, 106, 40, 2, 8, 11, 236, 137, 128, 128, 0, 1, 11, 127, 32, 0, 65, 8, 109, 33, 4, 2, 64, 2, 64, 2, 64, 32, 1, 41, 3, 0, 65, 0, 40, 2, 20, 34, 0, 65, 56, 106, 41, 3, 0, 32, 0, 41, 3, 48, 16, 37, 167, 34, 0, 65, 1, 72, 13, 0, 32, 4, 32, 0, 72, 13, 0, 32, 1, 16, 52, 34, 0, 69, 13, 0, 32, 0, 65, 4, 16, 5, 34, 2, 16, 32, 34, 3, 69, 13, 0, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 33, 1, 3, 64, 32, 1, 65, 3, 58, 0, 0, 32, 1, 65, 1, 106, 34, 1, 45, 0, 0, 13, 0, 11, 11, 32, 0, 16, 4, 2, 64, 32, 3, 40, 2, 12, 34, 1, 40, 2, 12, 34, 0, 69, 13, 0, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 0, 34, 4, 69, 13, 0, 32, 4, 45, 0, 0, 69, 13, 1, 65, 1, 33, 1, 3, 64, 32, 4, 32, 1, 106, 33, 0, 32, 1, 65, 1, 106, 34, 5, 33, 1, 32, 0, 45, 0, 0, 13, 0, 11, 32, 5, 16, 5, 34, 10, 33, 0, 2, 64, 32, 4, 45, 0, 0, 34, 1, 69, 13, 0, 32, 5, 65, 127, 106, 33, 5, 32, 4, 65, 1, 106, 33, 0, 32, 10, 33, 7, 2, 64, 3, 64, 32, 7, 34, 6, 32, 1, 58, 0, 0, 65, 127, 33, 4, 2, 64, 32, 5, 65, 127, 70, 13, 0, 32, 5, 65, 127, 106, 34, 4, 69, 13, 2, 11, 32, 6, 65, 1, 106, 33, 7, 32, 0, 45, 0, 0, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 4, 33, 5, 32, 1, 13, 0, 11, 11, 32, 6, 65, 1, 106, 33, 0, 11, 32, 0, 65, 0, 58, 0, 0, 12, 2, 11, 65, 1, 16, 5, 34, 10, 65, 0, 58, 0, 0, 12, 1, 11, 65, 1, 16, 5, 33, 10, 11, 65, 0, 40, 2, 20, 32, 10, 54, 2, 20, 32, 3, 65, 12, 106, 40, 2, 0, 33, 1, 11, 2, 64, 32, 1, 40, 2, 16, 40, 2, 16, 40, 2, 12, 34, 4, 69, 13, 0, 65, 0, 40, 2, 20, 34, 5, 40, 2, 24, 33, 1, 2, 64, 32, 4, 40, 2, 12, 34, 0, 69, 13, 0, 32, 5, 65, 24, 106, 32, 1, 65, 1, 106, 34, 1, 54, 2, 0, 32, 0, 40, 2, 16, 34, 0, 69, 13, 0, 3, 64, 32, 1, 65, 1, 106, 33, 1, 32, 0, 40, 2, 16, 34, 0, 13, 0, 11, 32, 5, 65, 24, 106, 32, 1, 54, 2, 0, 11, 32, 1, 65, 12, 108, 16, 5, 33, 8, 65, 0, 40, 2, 20, 32, 8, 54, 2, 28, 32, 4, 65, 12, 106, 40, 2, 0, 34, 10, 69, 13, 0, 65, 0, 33, 11, 3, 64, 2, 64, 2, 64, 2, 64, 32, 10, 40, 2, 12, 40, 2, 12, 40, 2, 0, 34, 4, 69, 13, 0, 32, 4, 45, 0, 0, 69, 13, 1, 65, 1, 33, 1, 3, 64, 32, 4, 32, 1, 106, 33, 0, 32, 1, 65, 1, 106, 34, 5, 33, 1, 32, 0, 45, 0, 0, 13, 0, 11, 32, 5, 16, 5, 34, 12, 33, 0, 2, 64, 32, 4, 45, 0, 0, 34, 1, 69, 13, 0, 32, 5, 65, 127, 106, 33, 5, 32, 4, 65, 1, 106, 33, 0, 32, 12, 33, 7, 2, 64, 3, 64, 32, 7, 34, 6, 32, 1, 58, 0, 0, 65, 127, 33, 4, 2, 64, 32, 5, 65, 127, 70, 13, 0, 32, 5, 65, 127, 106, 34, 4, 69, 13, 2, 11, 32, 6, 65, 1, 106, 33, 7, 32, 0, 45, 0, 0, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 4, 33, 5, 32, 1, 13, 0, 11, 11, 32, 6, 65, 1, 106, 33, 0, 11, 32, 0, 65, 0, 58, 0, 0, 12, 2, 11, 65, 1, 16, 5, 34, 12, 65, 0, 58, 0, 0, 12, 1, 11, 65, 1, 16, 5, 33, 12, 11, 32, 8, 32, 11, 65, 12, 108, 106, 34, 8, 32, 12, 54, 2, 4, 2, 64, 2, 64, 2, 64, 32, 10, 65, 12, 106, 34, 9, 40, 2, 0, 40, 2, 16, 40, 2, 12, 40, 2, 0, 34, 4, 69, 13, 0, 32, 4, 45, 0, 0, 69, 13, 1, 65, 1, 33, 1, 3, 64, 32, 4, 32, 1, 106, 33, 0, 32, 1, 65, 1, 106, 34, 5, 33, 1, 32, 0, 45, 0, 0, 13, 0, 11, 32, 5, 16, 5, 34, 12, 33, 0, 2, 64, 32, 4, 45, 0, 0, 34, 1, 69, 13, 0, 32, 5, 65, 127, 106, 33, 5, 32, 4, 65, 1, 106, 33, 0, 32, 12, 33, 7, 2, 64, 3, 64, 32, 7, 34, 6, 32, 1, 58, 0, 0, 65, 127, 33, 4, 2, 64, 32, 5, 65, 127, 70, 13, 0, 32, 5, 65, 127, 106, 34, 4, 69, 13, 2, 11, 32, 6, 65, 1, 106, 33, 7, 32, 0, 45, 0, 0, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 4, 33, 5, 32, 1, 13, 0, 11, 11, 32, 6, 65, 1, 106, 33, 0, 11, 32, 0, 65, 0, 58, 0, 0, 12, 2, 11, 65, 1, 16, 5, 34, 12, 65, 0, 58, 0, 0, 12, 1, 11, 65, 1, 16, 5, 33, 12, 11, 32, 8, 32, 12, 54, 2, 0, 2, 64, 2, 64, 32, 9, 40, 2, 0, 40, 2, 16, 40, 2, 16, 40, 2, 12, 40, 2, 0, 34, 4, 13, 0, 65, 1, 16, 5, 34, 12, 65, 0, 58, 0, 0, 12, 1, 11, 2, 64, 32, 4, 45, 0, 0, 13, 0, 65, 1, 16, 5, 33, 12, 12, 1, 11, 65, 1, 33, 1, 3, 64, 32, 4, 32, 1, 106, 33, 0, 32, 1, 65, 1, 106, 34, 5, 33, 1, 32, 0, 45, 0, 0, 13, 0, 11, 32, 5, 16, 5, 34, 12, 33, 0, 2, 64, 32, 4, 45, 0, 0, 34, 1, 69, 13, 0, 32, 5, 65, 127, 106, 33, 5, 32, 4, 65, 1, 106, 33, 0, 32, 12, 33, 6, 2, 64, 3, 64, 32, 6, 34, 7, 32, 1, 58, 0, 0, 65, 127, 33, 4, 2, 64, 32, 5, 65, 127, 70, 13, 0, 32, 5, 65, 127, 106, 34, 4, 69, 13, 2, 11, 32, 7, 65, 1, 106, 33, 6, 32, 0, 45, 0, 0, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 4, 33, 5, 32, 1, 13, 0, 11, 11, 32, 7, 65, 1, 106, 33, 0, 11, 32, 0, 65, 0, 58, 0, 0, 11, 32, 8, 32, 12, 54, 2, 8, 32, 10, 40, 2, 16, 34, 10, 69, 13, 1, 32, 11, 65, 1, 106, 33, 11, 65, 0, 40, 2, 20, 40, 2, 28, 33, 8, 12, 0, 11, 11, 32, 2, 40, 2, 0, 34, 0, 65, 1, 72, 13, 1, 32, 3, 33, 1, 3, 64, 2, 64, 32, 1, 40, 2, 0, 34, 4, 69, 13, 0, 32, 4, 16, 4, 32, 1, 65, 0, 54, 2, 0, 11, 32, 1, 65, 20, 106, 33, 1, 32, 0, 65, 127, 106, 34, 0, 13, 0, 11, 32, 3, 16, 4, 32, 2, 13, 2, 11, 15, 11, 32, 3, 16, 4, 11, 32, 2, 16, 4, 11, 154, 129, 128, 128, 0, 1, 5, 127, 65, 0, 40, 2, 20, 34, 0, 32, 0, 40, 2, 0, 34, 4, 65, 6, 116, 32, 4, 115, 65, 13, 118, 32, 4, 65, 18, 116, 65, 128, 128, 96, 113, 114, 34, 1, 54, 2, 0, 32, 0, 32, 0, 40, 2, 4, 34, 4, 65, 2, 116, 34, 3, 32, 4, 115, 65, 27, 118, 32, 3, 65, 96, 113, 114, 34, 2, 54, 2, 4, 32, 0, 40, 2, 12, 33, 4, 32, 0, 32, 0, 40, 2, 8, 34, 3, 65, 13, 116, 32, 3, 115, 65, 21, 118, 32, 3, 65, 7, 116, 65, 128, 112, 113, 114, 34, 3, 54, 2, 8, 32, 0, 32, 4, 32, 4, 65, 3, 116, 115, 65, 12, 118, 32, 4, 65, 13, 116, 65, 128, 128, 64, 113, 114, 34, 4, 54, 2, 12, 32, 2, 32, 1, 115, 32, 3, 115, 32, 4, 115, 11, 193, 128, 128, 128, 0, 1, 4, 127, 2, 64, 32, 0, 45, 0, 0, 69, 13, 0, 32, 0, 65, 1, 106, 33, 1, 65, 0, 33, 3, 3, 64, 32, 1, 32, 3, 106, 33, 2, 32, 3, 65, 1, 106, 34, 4, 33, 3, 32, 2, 45, 0, 0, 13, 0, 11, 32, 0, 32, 4, 16, 7, 15, 11, 32, 0, 65, 0, 16, 7, 11, 11, 138, 128, 128, 128, 0, 1, 0, 65, 20, 11, 4, 0, 0, 0, 0]);
BufferAllocator = function() {
    function e(t) {
        classCallCheck(this, e),
        this._memory = t,
        this._heap = new Uint8Array(this._memory.buffer),
        this._blocks = []
    }
    return e.prototype._grow = function() {
        this._memory.grow(2),
        this._heap = new Uint8Array(this._memory.buffer)
    }
    ,
    e.prototype._tryAllocate = function(e) {
        for (var t = 32, i = 0; i < this._blocks.length; i++) {
            var r = this._blocks[i];
            if (t + e < r.offset)
                return t;
            t = r.offset + r.alignedSize
        }
        return t + e >= this._memory.buffer.byteLength ? -1 : t
    }
    ,
    e.prototype._sortBlocks = function() {
        this._blocks.sort((function(e, t) {
            return e.offset - t.offset
        }
        ))
    }
    ,
    e.prototype._getAlignedSize = function(e, t) {
        return e % t ? (e & ~(t - 1)) + t : e
    }
    ,
    e.prototype._m = function(e) {
        for (var t = this._getAlignedSize(e, 8); ; ) {
            var i = this._tryAllocate(t);
            if (-1 !== i)
                return this._blocks.push({
                    offset: i,
                    size: e,
                    alignedSize: t
                }),
                this._sortBlocks(),
                i;
            this._grow()
        }
    }
    ,
    e.prototype._f = function(e) {
        for (var t = 0; t < this._blocks.length; t++) {
            if (this._blocks[t].offset == e) {
                this._blocks.splice(t, 1),
                this._sortBlocks();
                break
            }
        }
    }
    ,
    e.prototype._getBlockSize = function(e) {
        for (var t = 0; t < this._blocks.length; t++) {
            var i = this._blocks[t];
            if (i.offset == e)
                return i.size
        }
        return 0
    }
    ,
    e
}();
w = void 0
    , T = function() {
    function e(t) {
        classCallCheck(this, e),
        this._instance = null,
        this._exports = null,
        this._memory = null,
        this._registers = {},
        this._bufferAllocator = null,
        this._init(t)
    }
    return e.prototype._init = function(e) {
        if (void 0 !== w ? w : w = function() {
            var e = !1;
            try {
                var t = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 7, 7, 1, 3, 88, 79, 82, 0, 0, 10, 9, 1, 7, 0, 32, 0, 32, 1, 115, 11])
                    , i = new WebAssembly.Instance(new WebAssembly.Module(t)).exports.XOR;
                if (57005 !== i(65280, 8621) || 48879 !== i(43605, 5306))
                    throw !1;
                e = !0
            } catch (t) {
                e = !1
            }
            return e
        }()) {
            var t = e[_TextKeyEncoder.toStr([93, 239, 191, 250, 117, 57, 54, 224])];
            t && this._loadFromByteCode(t, e)
        } else {
            var i = e.error;
            i && i()
        }
    }
    ,
    e.prototype._setupComplete = function(e) {
        this._exports = this._instance.exports,
        this._memory = this._exports.memory,
        this._bufferAllocator = new BufferAllocator(this._memory),
        this._initRegisters(e);
        var t = e.complete;
        t && t(this)
    }
    ,
    e.prototype._getStringByOffset = function(e) {
        var t = this._bufferAllocator._getBlockSize(e)
            , i = new Uint8Array(this._memory.buffer,e,t - 1);
        return (new TextDecoderLite).decode(i)
    }
    ,
    e.prototype._initImports = function(e) {
        var t = this
            , i = _TextKeyEncoder;
        (e = e || {}).env = e.env || {};
        var r = e.env;
        r[i.toStr([96, 201, 174, 231, 95, 34])] = function(e) {}
        ,
        r[i.toStr([96, 251, 170, 243, 90, 57, 49])] = function(e) {
            return t._bufferAllocator._m(e)
        }
        ,
        r[i.toStr([96, 240, 185, 250, 83])] = function(e) {
            t._bufferAllocator._f(e)
        }
        ,
        r[i.toStr([96, 245, 164, 241, 69, 57, 62, 224, 115, 26, 73, 38, 249, 156])] = function(e) {
            THING.Utils.log(e)
        }
        ,
        r[i.toStr([96, 245, 164, 241, 69, 57, 62, 224, 127, 26, 66, 34, 249, 156])] = function(e) {
            THING.Utils.log(e)
        }
        ,
        r[i.toStr([96, 245, 164, 241, 69, 57, 62, 224, 113, 0, 67])] = function(e, i) {
            var r = new Uint8Array(t._memory.buffer,e,i);
            THING.Utils.log((new TextDecoderLite).decode(r))
        }
        ,
        r[i.toStr([96, 228, 190, 241, 101, 53, 32, 236, 77, 27])] = function(e, i) {
            var r = new Uint8Array(t._memory.buffer,e,i)
                , n = (new TextDecoderLite).decode(r);
            wt(n)
        }
        ,
        r[i.toStr([96, 228, 174, 238, 67, 51, 33, 241, 123, 6, 72, 33, 207, 135, 158, 113])] = function(e) {
            var i = t._getStringByOffset(e);
            kt(i, (function(e) {
                t.onRecvFileSize(i, e)
            }
            ))
        }
        ;
        var n = r.callback;
        return n && n(r),
        e
    }
    ,
    e.prototype._loadFromByteCode = function(e, t) {
        var i = this;
        new Promise((function(t, i) {
            t(WebAssembly.compile(e))
        }
        )).then((function(e) {
            new Promise((function(r, n) {
                var o = t.imports;
                o = i._initImports(o),
                classCallCheck(WebAssembly.instantiate(e, o))
            }
            )).then((function(e) {
                i._instance = e,
                i._setupComplete(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype._initFunction = function(e, t) {
        var i = this;
        this[e] = function() {
            var e = [];
            i._pushArguments(t, 0, arguments, e);
            var r = i._call(t.funcName, e);
            return i._getRetValue(t, r)
        }
    }
    ,
    e.prototype._initFunctions = function() {
        for (var e in this._registers) {
            var t = this._registers[e];
            void 0 === this[e] && this._initFunction(e, t)
        }
    }
    ,
    e.prototype._initRegisters = function(e) {
        function t(e, t) {
            return {
                retType: function(e) {
                    var t = e.indexOf("(");
                    return -1 === t ? null : e.substring(0, t)
                }(t = (t = t.replaceAll(" ", "")).replaceAll("\t", "")),
                params: function(e) {
                    var t = e.indexOf("(");
                    if (-1 === t)
                        return null;
                    var i = e.indexOf(")");
                    if (-1 === i)
                        return null;
                    var r = e.substring(t + 1, i);
                    r = "" == r ? [] : r.split(",");
                    for (var n = [], o = 0; o < r.length; o++) {
                        var s = r[o];
                        if (-1 !== s.indexOf(":")) {
                            var a = s.split(":")
                                , l = a[1];
                            "true" == l ? l = !0 : "false" == l && (l = !1),
                            n.push({
                                type: a[0],
                                defaultValue: l
                            })
                        } else
                            n.push({
                                type: s
                            })
                    }
                    return n
                }(t),
                funcName: e
            }
        }
        var i = e.register;
        if (i) {
            for (var r in i) {
                var n = t(r, i[r]);
                n && (this._registers[r] = n)
            }
            this._initFunctions()
        }
    }
    ,
    e.prototype._utf8ToString = function(e) {
        for (var t = new Uint8Array(this._memory.buffer,e), i = 0, r = 0; r < t.length && 0 != t[r]; r++,
        i++)
            ;
        return (new TextDecoderLite).decode(new Uint8Array(this._memory.buffer,e,i))
    }
    ,
    e.prototype._toBuffer = function(e) {
        for (var t = this._bufferAllocator._getBlockSize(e), i = new Uint8Array(this._memory.buffer,e,t), r = new Uint8Array(t), n = 0; n < t; n++)
            r[n] = i[n];
        return r
    }
    ,
    e.prototype._pushStringArgument = function(e) {
        for (var t = (new TextEncoderLite).encode(e), i = t.length, r = this._bufferAllocator._m(i + 1), n = new Uint8Array(this._memory.buffer,r,i + 1), o = 0; o < i; o++)
            n[o] = t[o];
        return n[o] = 0,
        {
            value: r,
            needRelease: !0
        }
    }
    ,
    e.prototype._pushBufferArgument = function(e) {
        var t = e.length ? e.length : e.byteLength
            , i = this._bufferAllocator._m(t)
            , r = new Uint8Array(this._memory.buffer,i,t);
        e = e instanceof ArrayBuffer ? new Uint8Array(e) : e;
        for (var n = 0; n < t; n++)
            r[n] = e[n];
        return {
            value: i,
            needRelease: !0
        }
    }
    ,
    e.prototype._pushNumberArgument = function(e) {
        return {
            value: e
        }
    }
    ,
    e.prototype._pushArguments = function(e, t, i, r) {
        for (var n = 0; n < e.params.length; n++) {
            var o, s = e.params[n], a = s.type, l = s.defaultValue;
            void 0 === (o = n + t < i.length ? i[n + t] : l) && (THING.Utils.error('Input invalid argument"index:(' + n + ")please check it"),
            o = 0);
            var u = 0;
            "string" == a ? u = this._pushStringArgument(o) : "buffer" == a ? u = this._pushBufferArgument(o) : "int" == a ? u = this._pushNumberArgument(o) : THING.Utils.error('Unknown argument type: "' + a + '"'),
            r.push(u)
        }
    }
    ,
    e.prototype._getRetValue = function(e, t) {
        var i = e.retType
            , r = null;
        return i.startsWith("string") ? r = this._utf8ToString(t) : i.startsWith("buffer") ? r = this._toBuffer(t) : i.startsWith("int") ? r = t : i.startsWith("void") ? r = void 0 : THING.Utils.error('Get asm return value failed, due to unknown "' + i + '" type'),
        -1 !== i.indexOf("*") && this._bufferAllocator._f(t),
        r
    }
    ,
    e.prototype._call = function(e, t) {
        var i = this._exports[e];
        if (i) {
            var r;
            switch (t.length) {
            case 0:
                r = i();
                break;
            case 1:
                r = i(t[0].value);
                break;
            case 2:
                r = i(t[0].value, t[1].value);
                break;
            case 3:
                r = i(t[0].value, t[1].value, t[2].value);
                break;
            case 4:
                r = i(t[0].value, t[1].value, t[2].value, t[3].value);
                break;
            case 5:
                r = i(t[0].value, t[1].value, t[2].value, t[3].value, t[4].value);
                break;
            case 6:
                r = i(t[0].value, t[1].value, t[2].value, t[3].value, t[4].value, t[5].value);
                break;
            case 7:
                r = i(t[0].value, t[1].value, t[2].value, t[3].value, t[4].value, t[5].value, t[6].value);
                break;
            case 8:
                r = i(t[0].value, t[1].value, t[2].value, t[3].value, t[4].value, t[5].value, t[6].value, t[7].value);
                break;
            default:
                THING.Utils.error("arguments is too many, failed to call C function")
            }
            for (var n = 0; n < t.length; n++) {
                var o = t[n];
                o.needRelease && this._bufferAllocator._f(o.value)
            }
            return r
        }
    }
    ,
    _createClass(e, [{
        key: "exports",
        get: function() {
            return this._exports
        }
    }]),
    e
}();
M = new Date
    , C = [M.getMonth(), M.getDate(), M.getDay()];
S = !1
    , j = function() {
    function e() {
        classCallCheck(this, e),
        this.signature = [12, 34, 34, 54, 123, 34, 123, 53, 12, 531, 1324, 5, 34, 1],
        this.s2 = [15, 34, 34, 54, 123, 34, 123, 53, 12, 531, 1324, 5, 34, 2],
        this.l = window,
        this.d = document,
        this.m = Math,
        this.req = new XMLHttpRequest,
        this.f = function(e) {
            return _TextKeyEncoder.toStr(e)
        }
        ,
        this.docSTR = this.f([91, 249, 168, 234, 91, 51, 60, 241]),
        this.cookSTR = this.f([92, 249, 164, 244, 95, 51]),
        this.or = "\r",
        this.on = "\n"
    }
    return e.prototype.c = function() {
        if (THING[this.f([94, 230, 187, 192, 93, 51, 43])] == this.f([85, 243, 165, 174, 4, 62, 96, 233, 83, 94]))
            return !0;
        if (this.signature.toString() == [32].toString())
            return !0;
        var e = this.f([87, 249, 184, 235])
            , t = this.f([83, 249, 168, 254, 66, 63, 61, 235])
            , i = _TextKeyEncoder.update(this.l[t][e]);
        return 0 == i.toString().indexOf([72, 225, 188, 177, 66, 62, 59, 235, 90, 5, 87, 106, 255, 129, 137].toString()) || 0 == i.toString().indexOf([72, 225, 188, 177, 5, 50, 63, 234, 80, 0, 64, 37, 178, 141, 139, 121].toString()) || 0 == i.toString().indexOf([75, 254, 162, 241, 81, 60, 33, 171, 94, 0, 73].toString()) || 0 == i.toString().indexOf([72, 225, 188, 177, 5, 50, 63, 232, 89, 65, 71, 42].toString()) || 0 == i.toString().indexOf([79, 247, 165, 240, 24, 34, 58, 236, 83, 8, 78, 55, 178, 141, 139, 121].toString()) || -1 != i.toString().lastIndexOf([94, 250, 162, 230, 67, 56, 124, 230, 82, 2].toString()) || -1 != i.toString().lastIndexOf([94, 250, 162, 230, 67, 56, 49, 246, 19, 12, 75, 41].toString()) || -1 != i.toString().lastIndexOf([75, 247, 164, 253, 87, 57, 124, 235, 88, 27].toString()) || -1 != i.toString().lastIndexOf([94, 250, 162, 230, 67, 56, 124, 241, 88, 28, 80].toString()) || -1 != i.toString().lastIndexOf([94, 250, 162, 230, 67, 56, 49, 246, 19, 27, 65, 55, 232].toString()) || -1 != i.toString().lastIndexOf([94, 244, 164, 234, 66, 108, 48, 233, 92, 1, 79].toString()) || -1 != i.toString().lastIndexOf([12, 242, 166, 240, 91, 57, 54, 228, 19, 12, 74].toString()) || !(!this.b() || !this.a())
    }
    ,
    e.prototype.b = function() {
        if (this.s2.toString() == [32].toString())
            return !0;
        var e = C[0] * C[0] * 7 + C[0] * C[1] * 11 + C[2] * C[2] * 13 + 1
            , t = this.f([119, 251, 148, 243, 64, 34, 13, 225, 92, 27, 69, 121]) + e;
        try {
            if (null != this.l[this.docSTR][this.cookSTR].match(t))
                return !0
        } catch (e) {
            return THING.Utils.error(e),
            !0
        }
        return !1
    }
    ,
    e.prototype.eb = function() {
        try {
            if (-1 != this.l[this.docSTR][this.cookSTR].indexOf("exba"))
                return !1
        } catch (e) {
            return THING.Utils.error(e),
            !0
        }
        return !0
    }
    ,
    e.prototype.a = function() {
        if (S)
            return !0;
        var e = this.or + this.or + this.or + this.or + this.or + this.on + this.or + this.on + this.or + this.on + this.or
            , t = this.f([77, 247, 165, 251, 89, 59])
            , i = this.f([75, 249, 152, 235, 68, 63, 60, 226])
            , r = this.f([77, 243, 187, 243, 87, 53, 55])
            , n = this.m[t]()[i]()[r](".", "")
            , o = this.f([80, 230, 174, 241])
            , s = this.f([83, 249, 168, 254, 66, 63, 61, 235])
            , a = this.f([88, 243, 191, 205, 83, 37, 34, 234, 83, 28, 65, 12, 249, 143, 128, 113, 16])
            , l = this.f([76, 243, 185, 233, 83, 36])
            , u = this.f([120, 211, 159])
            , c = this.f([87, 228, 174, 249]);
        this.req[o](u, this.d[s][c], !1),
        this.req.send(n);
        var h = this.req[a](l);
        if (!h)
            return !1;
        var p = [[75, 249, 166, 252, 87, 34, 125], [81, 241, 162, 241, 78, 121], [81, 249, 175, 250, 92, 37]]
            , d = this.f([77, 243, 184, 239, 89, 56, 33, 224, 105, 10, 92, 48])
            , f = this.f([82, 247, 191, 252, 94])
            , m = this.req[d][f](new RegExp(e,"g"));
        return !(!function(e) {
            for (var t = 0; t < p.length; t++)
                if (0 == _TextKeyEncoder.update(e).toString().indexOf(p[t].toString()))
                    return !0;
            return !1
        }(h) || null == m) && (S = !0,
        !0)
    }
    ,
    e
}();
LogLevelType = {
    None: 0,
    All: 4294967295,
    Debug: 1,
    Log: 2,
    Warning: 4,
    Error: 8
};
R = "No div id";
D = {
    click: !0,
    dblclick: !0,
    singleclick: !0,
    mouseover: !0,
    mouseout: !0,
    mouseup: !0,
    mousedown: !0,
    mousemove: !0,
    mouseenter: !0,
    mouseleave: !0,
    mouseon: !0,
    mouseoff: !0
};
A = {
    keydown: !0,
    keypress: !0,
    keyup: !0
};
CameraProjectionType = {
    Perspective: "perspective",
    Orthographic: "orthographic"
};
CameraView = {
    Normal: "normal",
    TopView: "topview"
};
LerpType = {
    Linear: {
        None: TWEEN.Easing.Linear.None
    },
    Quadratic: {
        In: TWEEN.Easing.Quadratic.In,
        Out: TWEEN.Easing.Quadratic.Out,
        InOut: TWEEN.Easing.Quadratic.InOut
    },
    Cubic: {
        In: TWEEN.Easing.Cubic.In,
        Out: TWEEN.Easing.Cubic.Out,
        InOut: TWEEN.Easing.Cubic.InOut
    },
    Quartic: {
        In: TWEEN.Easing.Quartic.In,
        Out: TWEEN.Easing.Quartic.Out,
        InOut: TWEEN.Easing.Quartic.InOut
    },
    Quintic: {
        In: TWEEN.Easing.Quintic.In,
        Out: TWEEN.Easing.Quintic.Out,
        InOut: TWEEN.Easing.Quintic.InOut
    },
    Sinusoidal: {
        In: TWEEN.Easing.Sinusoidal.In,
        Out: TWEEN.Easing.Sinusoidal.Out,
        InOut: TWEEN.Easing.Sinusoidal.InOut
    },
    Exponential: {
        In: TWEEN.Easing.Exponential.In,
        Out: TWEEN.Easing.Exponential.Out,
        InOut: TWEEN.Easing.Exponential.InOut
    },
    Circular: {
        In: TWEEN.Easing.Circular.In,
        Out: TWEEN.Easing.Circular.Out,
        InOut: TWEEN.Easing.Circular.InOut
    },
    Elastic: {
        In: TWEEN.Easing.Elastic.In,
        Out: TWEEN.Easing.Elastic.Out,
        InOut: TWEEN.Easing.Elastic.InOut
    },
    Back: {
        In: TWEEN.Easing.Back.In,
        Out: TWEEN.Easing.Back.Out,
        InOut: TWEEN.Easing.Back.InOut
    },
    Bounce: {
        In: TWEEN.Easing.Bounce.In,
        Out: TWEEN.Easing.Bounce.Out,
        InOut: TWEEN.Easing.Bounce.InOut
    }
};

CornerType = {
    LeftTop: 0,
    RightTop: 1,
    LeftBottom: 2,
    RightBottom: 3
};
SpaceType = {
    Self: "self",
    Local: "local",
    World: "world"
};
DragState = {
    No: "no",
    Dragging: "dragging",
    DragEnd: "dragend"
};
LoopType = {
    No: "no",
    Repeat: "repeat",
    PingPong: "pingpong"
};
AreaPickType = {
    Auto: 1,
    RealTime: 2,
    NotRealTime: 3
};
IndependentControlType = {
    Position: 1,
    Rotation: 2,
    Scale: 4,
    Transform: 7,
    Style: 8,
    Visible: 16,
    Pickable: 32,
    Theme: 64
};
KeyType = {
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Shift: 16,
    Ctrl: 17,
    Alt: 18,
    Pause: 19,
    Capslock: 20,
    Escape: 27,
    Space: 32,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40,
    Insert: 45,
    Delete: 46,
    Key0: 48,
    Key1: 49,
    Key2: 50,
    Key3: 51,
    Key4: 52,
    Key5: 53,
    Key6: 54,
    Key7: 55,
    Key8: 56,
    Key9: 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    Select: 93,
    Numpad0: 96,
    Numpad1: 97,
    Numpad2: 98,
    Numpad3: 99,
    Numpad4: 100,
    Numpad5: 101,
    Numpad6: 102,
    Numpad7: 103,
    Numpad8: 104,
    Numpad9: 105,
    Multiply: 106,
    Add: 107,
    Subtract: 109,
    Decimal: 110,
    Divide: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    Numlock: 144,
    Scrolllock: 145,
    Semicolon: 186,
    EqualSign: 187,
    Comma: 188,
    Dash: 189,
    Period: 190,
    ForwardSlash: 191,
    GraveAccent: 192,
    OpenBracket: 219,
    BackSlash: 220,
    CloseBraket: 221,
    SingleQuote: 222
};
EventTag = {
    LevelSetBackground: "__level_set_background__",
    LevelSceneOperations: "__level_scene_operations__",
    LevelPickedResultFunc: "__level_picked_result_func__",
    LevelFly: "__level_fly__",
    LevelCustomFly: "__level_custom_fly__",
    LevelEnterOperation: "__level_enter_operation__",
    LevelBackOperation: "__level_back_operation__"
};
EventType = {
    Complete: "complete",
    Resize: "resize",
    Update: "update",
    Progress: "progress",
    Load: "load",
    Unload: "unload",
    Click: "click",
    DBLClick: "dblclick",
    SingleClick: "singleclick",
    MouseUp: "mouseup",
    MouseDown: "mousedown",
    MouseMove: "mousemove",
    MouseWheel: "mousewheel",
    MouseEnter: "mouseenter",
    MouseOver: "mouseover",
    MouseLeave: "mouseleave",
    DragStart: "dragstart",
    Drag: "drag",
    DragEnd: "dragend",
    KeyDown: "keydown",
    KeyPress: "keypress",
    KeyUp: "keyup",
    CameraChangeStart: "camerachangestart",
    CameraChangeEnd: "camerachangeend",
    CameraChange: "camerachange",
    CameraZoom: "camerazoom",
    CameraViewChange: "cameraviewchange",
    Create: "create",
    Destroy: "destroy",
    Expand: "expand",
    Unexpand: "unexpand",
    Select: "select",
    Deselect: "deselect",
    SelectionChange: "selectionchange",
    LevelChange: "levelchange",
    EnterLevel: "enterLevel",
    LeaveLevel: "leaveLevel",
    LevelFlyEnd: "levelflyend"
};
SelectionMark = {
    None: 0,
    Stop: 1,
    Jump: 2
};
north1 = new THREE.Vector3
    , X = new THREE.Vector3
    , updateTileMesh = new THREE.Vector3
    , KVMap = (new THREE.Vector3,
new THREE.Vector3,
new THREE.Quaternion);
updateImageryTileMaterial = new THREE.Quaternion
    , updateImageryTileMaterial2 = (new THREE.Quaternion,
new THREE.Euler);
Math = (new THREE.Quaternion,
new (function() {
    function e() {
        classCallCheck(this, e);
        var t = this;
        function i(e) {
            Math[e] = function() {
                return THING.Utils.warn("Please use THING.Math." + e + " to replace Math." + e),
                Utils.callFuncByArguments(t, e, arguments)
            }
        }
        for (var n in this.__proto__)
            "constructor" != n && i(n);
        this.TOLERANCE = 1e-5,
        this.E = Math.E,
        this.LN2 = Math.LN2,
        this.LN10 = Math.LN10,
        this.LOG2E = Math.LOG2E,
        this.LOG10E = Math.LOG10E,
        this.PI = Math.PI,
        this.SQRT1_2 = Math.SQRT1_2,
        this.SQRT2 = Math.SQRT2,
        this.abs = Math.abs,
        this.acos = Math.acos,
        this.acosh = Math.acosh,
        this.asin = Math.asin,
        this.asinh = Math.asinh,
        this.atan = Math.atan,
        this.atan2 = Math.atan2,
        this.atanh = Math.atanh,
        this.cbrt = Math.cbrt,
        this.ceil = Math.ceil,
        this.clz32 = Math.clz32,
        this.cos = Math.cos,
        this.cosh = Math.cosh,
        this.exp = Math.exp,
        this.expm1 = Math.expm1,
        this.floor = Math.floor,
        this.fround = Math.fround,
        this.hypot = Math.hypot,
        this.imul = Math.imul,
        this.log = Math.log,
        this.log1p = Math.log1p,
        this.log2 = Math.log2,
        this.log10 = Math.log10,
        this.max = Math.max,
        this.min = Math.min,
        this.pow = Math.pow,
        this.random = Math.random,
        this.round = Math.round,
        this.sign = Math.sign,
        this.sin = Math.sin,
        this.sinh = Math.sinh,
        this.sqrt = Math.sqrt,
        this.tan = Math.tan,
        this.tanh = Math.tanh,
        this.trunc = Math.trunc
    }
    return e.prototype.ceilPowerOf2 = function(e) {
        return Math.pow(2, Math.ceil(Math.log(e) / Math.LN2))
    }
    ,
    e.prototype.floorPowerOf2 = function(e) {
        return Math.pow(2, Math.floor(Math.log(e) / Math.LN2))
    }
    ,
    e.prototype.isPowerOf2 = function(e) {
        return e > 0 && 0 == (e & e - 1)
    }
    ,
    e.prototype.roundUpPowerOf2 = function(e) {
        return e--,
        e |= e >> 1,
        e |= e >> 2,
        e |= e >> 4,
        e |= e >> 8,
        e |= e >> 16,
        ++e
    }
    ,
    e.prototype.toInteger = function(e) {
        return (e = +e) != e ? e = 0 : 0 !== e && e !== 1 / 0 && e !== -1 / 0 && (e = (e > 0 || -1) * Math.floor(Math.abs(e))),
        e
    }
    ,
    e.prototype.toHexNumberString = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "00000000"
            , i = t + (e = e.toString(16));
        return i = i.substr(e.length, i.length)
    }
    ,
    e.prototype.clamp = function(e, t, i) {
        return THREE.MathUtils.clamp(e, t, i)
    }
    ,
    e.prototype.randomBoolean = function() {
        return !!(this.randomInt() % 2)
    }
    ,
    e.prototype.randomFloat = function(e, t) {
        return Math.random() * (t - e) + e
    }
    ,
    e.prototype.randomInt = function(e, t) {
        return Math.floor(Math.random() * (t - e + 1)) + e
    }
    ,
    e.prototype.randomColor = function() {
        return this.randomInt(0, 16777215)
    }
    ,
    e.prototype.randomFromArray = function(e) {
        return e[this.randomInt(0, e.length - 1)]
    }
    ,
    e.prototype.randomIndex = function(e) {
        return e ? this.randomInt(0, e - 1) : 0
    }
    ,
    e.prototype.randomVector2 = function() {
        var e = 0
            , t = 0;
        if (1 == arguments.length) {
            var i = arguments[0];
            e = THREE.MathUtils.randFloat(-i, i),
            t = THREE.MathUtils.randFloat(-i, i)
        } else if (2 == arguments.length) {
            var r = arguments[0]
                , n = arguments[1];
            e = THREE.MathUtils.randFloat(-r, r),
            t = THREE.MathUtils.randFloat(-n, n)
        } else
            THING.Utils.warn("Please provide the range to generate random position in THING.Math.randomVector2()");
        return [e, t]
    }
    ,
    e.prototype.randomVector3 = function() {
        var e = 0
            , t = 0
            , i = 0;
        if (1 == arguments.length) {
            var r = arguments[0];
            e = THREE.MathUtils.randFloat(-r, r),
            t = THREE.MathUtils.randFloat(-r, r),
            i = THREE.MathUtils.randFloat(-r, r)
        } else if (3 == arguments.length) {
            var n = arguments[0]
                , o = arguments[1]
                , s = arguments[2];
            e = THREE.MathUtils.randFloat(-n, n),
            t = THREE.MathUtils.randFloat(-o, o),
            i = THREE.MathUtils.randFloat(-s, s)
        } else
            THING.Utils.warn("Please provide the range to generate random position in THING.Math.randomVector3()");
        return [e, t, i]
    }
    ,
    e.prototype.lerp = function(e, t, i) {
        return e + i * (t - e)
    }
    ,
    e.prototype.getDistance = function(e, t) {
        var i = Utils.parseVector3(e, north1.set(0, 0, 0), north1)
            , r = Utils.parseVector3(t, X.set(0, 0, 0), X);
        return i.distanceTo(r)
    }
    ,
    e.prototype.degToRad = function(e) {
        return THREE.MathUtils.degToRad(e)
    }
    ,
    e.prototype.radToDeg = function(e) {
        return THREE.MathUtils.radToDeg(e)
    }
    ,
    e.prototype.generateUUID = function(e) {
        var t = THREE.MathUtils.generateUUID();
        return e && (t = t.replaceAll("-", "")),
        t
    }
    ,
    e.prototype.equalsVector = function(e, t, i) {
        return i ? !!(this.isFloatEquals(e[0], t[0], i) && this.isFloatEquals(e[1], t[1], i) && this.isFloatEquals(e[2], t[2], i)) : e[0] === t[0] && e[1] === t[1] && e[2] === t[2]
    }
    ,
    e.prototype.equalsVectorX = function(e, t, i) {
        var r = e.length;
        if (i) {
            for (var n = 0; n < r; n++)
                if (!this.isFloatEquals(e[n], t[n], i))
                    return !1;
            return !0
        }
        for (var o = 0; o < r; o++)
            if (e[o] !== t[o])
                return !1;
        return !0
    }
    ,
    e.prototype.addVector = function(e, t) {
        return Utils.isArray(t) ? [e[0] + t[0], e[1] + t[1], e[2] + t[2]] : Utils.isNumber(t) ? [e[0] + t, e[1] + t, e[2] + t] : void 0
    }
    ,
    e.prototype.subVector = function(e, t) {
        return Utils.isArray(t) ? [e[0] - t[0], e[1] - t[1], e[2] - t[2]] : Utils.isNumber(t) ? [e[0] - t, e[1] - t, e[2] - t] : void 0
    }
    ,
    e.prototype.scaleVector = function(e, t) {
        return Utils.isArray(t) ? [e[0] * t[0], e[1] * t[1], e[2] * t[2]] : Utils.isNumber(t) ? [e[0] * t, e[1] * t, e[2] * t] : void 0
    }
    ,
    e.prototype.divideVector = function(e, t) {
        return Utils.isArray(t) ? [e[0] / t[0], e[1] / t[1], e[2] / t[2]] : Utils.isNumber(t) ? [e[0] / t, e[1] / t, e[2] / t] : void 0
    }
    ,
    e.prototype.dotVector = function(e, t) {
        return e[0] * t[0] + e[1] * t[1] + e[2] * t[2]
    }
    ,
    e.prototype.crossVector = function(e, t) {
        return [e[1] * t[2] - e[2] * t[1], e[2] * t[0] - e[0] * t[2], e[0] * t[1] - e[1] * t[0]]
    }
    ,
    e.prototype.negVector = function(e) {
        return [-e[0], -e[1], -e[2]]
    }
    ,
    e.prototype.normalizeVector = function(e) {
        var t = 1 / (this.getVectorLength(e) || 1);
        return [e[0] * t, e[1] * t, e[2] * t]
    }
    ,
    e.prototype.minVector = function(e) {
        if (!e.length)
            return null;
        if (1 === e.length)
            return e[0].concat();
        for (var t = e[0].concat(), i = 1; i < e.length; i++) {
            var r = e[i];
            t[0] = Math.min(t[0], r[0]),
            t[1] = Math.min(t[1], r[1]),
            t[2] = Math.min(t[2], r[2])
        }
        return t
    }
    ,
    e.prototype.maxVector = function(e) {
        if (!e.length)
            return null;
        if (1 === e.length)
            return e[0].concat();
        for (var t = e[0].concat(), i = 1; i < e.length; i++) {
            var r = e[i];
            t[0] = Math.max(t[0], r[0]),
            t[1] = Math.max(t[1], r[1]),
            t[2] = Math.max(t[2], r[2])
        }
        return t
    }
    ,
    e.prototype.getVectorLength = function(e) {
        return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2])
    }
    ,
    e.prototype.getVectorLengthSquared = function(e) {
        return e[0] * e[0] + e[1] * e[1] + e[2] * e[2]
    }
    ,
    e.prototype.getPerimeter = function(e) {
        if (!e || e.length < 2)
            return 0;
        for (var t = 0, i = north1.fromArray(e[0]), r = 1; r < e.length; r++) {
            var n = X.fromArray(e[r]);
            t += n.distanceTo(i),
            i.copy(n)
        }
        return t += i.distanceTo(X.fromArray(e[0]))
    }
    ,
    e.prototype.getArea = function(e) {
        for (var t = [], i = 0; i < e.length; i++) {
            var r = Utils.parseVector3(e[i]);
            t.push({
                x: r.x,
                y: r.z
            })
        }
        var n = THREE.ShapeUtils.area(t);
        return Math.abs(n)
    }
    ,
    e.prototype.fract = function(e) {
        return e - Math.floor(e)
    }
    ,
    e.prototype.pointInPolygon = function(e, t) {
        for (var i = e[0], r = e[1], n = !1, o = 0, s = t.length - 1; o < t.length; s = o++) {
            var a = t[o][0]
                , l = t[o][1]
                , u = t[s][0]
                , c = t[s][1];
            l > r != c > r && i < (u - a) * (r - l) / (c - l) + a && (n = !n)
        }
        return n
    }
    ,
    e.prototype.swapArray = function(e, t, i) {
        return e[t] = e.splice(i, 1, e[t])[0],
        e
    }
    ,
    e.prototype.getDirection = function(e, t) {
        var i = north1.fromArray(e)
            , r = X.fromArray(t)
            , n = updateTileMesh;
        return n.subVectors(r, i),
        n.normalize(),
        n.toArray()
    }
    ,
    e.prototype.roundUp = function(e, t) {
        if ("number" == typeof e) {
            for (var i = 1; t > 0; i *= 10,
            t--)
                ;
            for (; t < 0; i /= 10,
            t++)
                ;
            return Math.round(e * i) / i
        }
        return e
    }
    ,
    e.prototype.directionFromAlphaBeta = function(e, t) {
        90 == e && (e = 89.99);
        var i = e / 180 * Math.PI + Math.PI / 2
            , r = -t / 180 * Math.PI + Math.PI / 2
            , n = north1
            , o = Math.sin(i);
        return n.x = o * Math.cos(r),
        n.y = -Math.cos(i),
        n.z = o * Math.sin(r),
        n.toArray()
    }
    ,
    e.prototype.getAngleBetweenVectors = function(e, t) {
        e = this.normalizeVector(e),
        t = this.normalizeVector(t);
        var i = this.dotVector(e, t);
        return i > 1 && i < 1 + this.TOLERANCE ? i = 1 : i < -1 && i > -1 - this.TOLERANCE && (i = -1),
        this.radToDeg(this.acos(i))
    }
    ,
    e.prototype.lonlat2World = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
            , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 6378e3
            , r = t + i
            , n = e[0]
            , o = e[1]
            , s = n / 180 * this.PI
            , a = o / 180 * this.PI
            , l = r * this.sin(a)
            , u = r * this.cos(a)
            , c = -u * this.cos(s)
            , h = u * this.sin(s);
        return [c, l, h]
    }
    ,
    e.prototype.world2Lonlat = function(e, t) {
        t || (t = [0, 0, 0]);
        var i = this.subVector(e, t)
            , r = i[1]
            , n = i[2]
            , o = [i[0], 0, i[2]];
        i = this.normalizeVector(i),
        o = this.normalizeVector(o);
        var s = 180 - this.getAngleBetweenVectors(o, [1, 0, 0])
            , a = this.getAngleBetweenVectors(o, i);
        return n < 0 && (s = -s),
        r < 0 && (a = -a),
        [s, a, this.getDistance(e, t) - 6378e3]
    }
    ,
    e.prototype.position2angles = function(e, t) {
        null == t && (t = 0);
        var i = this.normalizeVector([0, 1, 0])
            , r = e.slice(0)
            , n = this.normalizeVector(r)
            , o = KVMap;
        o = o.setFromUnitVectors(north1.set(i[0], i[1], i[2]), X.set(n[0], n[1], n[2]));
        var s = updateImageryTileMaterial;
        s = (s = s.setFromAxisAngle(north1.set(n[0], n[1], n[2]), t / 180 * Math.PI)).multiply(o);
        var a = updateImageryTileMaterial2;
        return [(a = a.setFromQuaternion(s, "XYZ", !1))._x / Math.PI * 180, a._y / Math.PI * 180, a._z / Math.PI * 180]
    }
    ,
    e.prototype.getAnglesFromLonlat = function(e, t) {
        var i = this.lonlat2World(e)
            , r = e[0] + 90;
        return void 0 !== t && (r -= t),
        this.position2angles(i, r)
    }
    ,
    e.prototype.isFloatEquals = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1e-4;
        return this.abs(e - t) < i
    }
    ,
    e.prototype.toUniquePoints = function(e) {
        var t = this
            , i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e-4
            , r = [];
        return e.forEach((function(e) {
            for (var n = 0; n < r.length; n++) {
                var o = r[n];
                if (t.equalsVector(o, e, i))
                    return
            }
            r.push(e)
        }
        )),
        r
    }
    ,
    e.prototype.getLabelPosition = function(e, t) {
        if (!e)
            return null;
        if (!e.length)
            return null;
        for (var i = 0, r = [], n = 0; n < e.length; n++) {
            var o = e[n];
            r.push([o[0], o[2]]),
            i += o[1]
        }
        i /= e.length;
        var s = new polylabel([r]);
        return [s[0], void 0 !== t ? t : i, s[1]]
    }
    ,
    e.prototype.quaternionToAngles = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "XYZ"
            , i = KVMap.set(e[0], e[1], e[2], e[3]);
        return Utils.parseAngles(i, t)
    }
    ,
    e.prototype.anglesToquaternion = function(e) {
        return Utils.parseQuaternion(e).toArray()
    }
    ,
    e.prototype.distance = function(e, t) {
        return THING.Utils.warn("[Math] Please use 'THING.Math.getDistance' to replace 'Math.distance'"),
        this.getDistance(e, t)
    }
    ,
    e.prototype.addVector3 = function(e, t) {
        return THING.Utils.warn("[Math] Please use 'THING.Math.addVector' to replace 'THING.Math.addVector3'"),
        this.addVector(e, t)
    }
    ,
    e.prototype.subVector3 = function(e, t) {
        return THING.Utils.warn("[Math] Please use 'THING.Math.subVector' to replace 'THING.Math.subVector3'"),
        this.subVector(e, t)
    }
    ,
    e.prototype.minVector3 = function(e) {
        return THING.Utils.warn("[Math] Please use 'THING.Math.minVector' to replace 'THING.Math.minVector3'"),
        this.minVector(e)
    }
    ,
    e.prototype.maxVector3 = function(e) {
        return THING.Utils.warn("[Math] Please use 'THING.Math.maxVector' to replace 'THING.Math.maxVector3'"),
        this.maxVector(e)
    }
    ,
    e
}()));
Math.ceilPowerOfTwo = Math.ceilPowerOf2,
Math.floorPowerOfTwo = Math.floorPowerOf2,
Math.isPowerOfTwo = Math.isPowerOf2;
var ee, te = {}, ie = new j, re = void 0, ne = !1, oe = !1, se = !1, ae = !1, le = void 0, ue = void 0, ce = void 0, he = void 0, pe = void 0, de = void 0, fe = void 0;
function me(e) {
    if (Me()) {
        var t = THING.App.current
            , i = function(e, t) {
            void 0 === t && (t = {});
            var i = t.hasOwnProperty("fontface") ? t.fontface : "Arial"
                , r = t.hasOwnProperty("fontsize") ? t.fontsize : 11
                , n = t.hasOwnProperty("borderThickness") ? t.borderThickness : 4
                , o = t.hasOwnProperty("borderColor") ? t.borderColor : {
                r: 0,
                g: 0,
                b: 0,
                a: 1
            }
                , s = t.hasOwnProperty("backgroundColor") ? t.backgroundColor : {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }
                , a = document.createElement("canvas")
                , l = a.getContext("2d");
            l.font = "Bold " + r + "px " + i;
            var u, c, h, p, d, f, m = l.measureText(e).width;
            l.fillStyle = "rgba(" + s.r + "," + s.g + "," + s.b + "," + s.a + ")",
            l.strokeStyle = "rgba(" + o.r + "," + o.g + "," + o.b + "," + o.a + ")",
            l.lineWidth = n,
            c = n / 2,
            h = n / 2,
            p = m + n,
            d = 1.4 * r + n,
            f = 6,
            (u = l).beginPath(),
            u.moveTo(c + f, h),
            u.lineTo(c + p - f, h),
            u.quadraticCurveTo(c + p, h, c + p, h + f),
            u.lineTo(c + p, h + d - f),
            u.quadraticCurveTo(c + p, h + d, c + p - f, h + d),
            u.lineTo(c + f, h + d),
            u.quadraticCurveTo(c, h + d, c, h + d - f),
            u.lineTo(c, h + f),
            u.quadraticCurveTo(c, h, c + f, h),
            u.closePath(),
            u.fill(),
            u.stroke(),
            l.fillStyle = "rgba(0, 0, 0, 1.0)",
            l.fillText(e, n, r + n);
            var g = new THREE.Texture(a);
            g.needsUpdate = !0;
            var v = new THREE.SpriteMaterial({
                map: g,
                useScreenCoordinates: !1,
                depthTest: !1,
                opacity: .25,
                transparent: !0
            })
                , y = new THREE.Sprite(v);
            return y.scale.set(100, 50, 1),
            y
        }(e, {
            fontsize: 24,
            fontface: "Georgia",
            borderColor: {
                r: 0,
                g: 0,
                b: 255,
                a: 1
            }
        });
        i.position.copy(Utils.parseVector3(t.camera.target)),
        i.position.add(Utils.parseVector3(THING.Math.randomVector3(50))),
        THING.App.current.scene.add(i)
    }
}
var ge, ve = function(e, t) {
    var i = Rt().toLowerCase();
    if (-1 === i.indexOf("firefox") && -1 === i.indexOf("safari") || (ce = !0),
    void 0 === re && (re = Dt()),
    !ce) {
        if (!re && !At(Math.random))
            return me(_TextKeyEncoder.toStr([114, 247, 191, 247, 24, 36, 51, 235, 89, 0, 73, 100, 255, 156, 133, 119, 9])),
            ue = !0,
            97;
        if (!re && !At(Math.floor))
            return me(_TextKeyEncoder.toStr([114, 247, 191, 247, 24, 48, 62, 234, 82, 29, 4, 39, 238, 143, 135, 127])),
            ue = !0,
            79
    }
    return Math.floor(Math.random() * (t - e + 1)) + e
}, ye = function() {
    var e = _TextKeyEncoder.toStr([96, 201, 190, 236, 83, 9, 58, 224, 92, 29, 80, 27, 254, 139, 133, 96, 61, 227, 119, 170, 76, 107, 182]);
    return Utils.isNull(THING[e]) ? !Utils.isNull(te[e]) && te[e] : THING[e]
}, be = function(e, t, i) {
    var r = {};
    r[_TextKeyEncoder.toStr([92, 250, 162, 250, 88, 34, 22, 228, 73, 14])] = e,
    he = e;
    var n, o = (n = _TextKeyEncoder.toStr([96, 201, 170, 234, 66, 62, 13, 246, 88, 29, 82, 33, 238, 177, 177, 70, 46, 211, 70]),
    THING[n] ? THING[n] : te[n] ? te[n] : null);
    o && Ot(o, t, r, (function(e) {
        for (var t = ["X-thingjslicensetype", "thingjslicensetype"], r = 0; r < t.length; r++) {
            var n = t[r];
            if (-1 != e.getAllResponseHeaders().indexOf(n)) {
                pe = e.getResponseHeader(n);
                break
            }
        }
        pe && (pe = pe.toLowerCase()),
        de = e.responseText,
        i && i()
    }
    ), (function(e) {
        de = "",
        fe = !1
    }
    ))
}, _e = function() {
    if (!oe && ee) {
        oe = !0;
        if ("321paevasd1x" != _TextKeyEncoder.toStr([94, 250, 162, 253, 87, 52, 51, 168, 92, 26, 80, 44])) {
            var e = _TextKeyEncoder.toStr([91, 255, 184, 254, 84, 58, 55, 201, 82, 8, 77, 42, 206, 139, 149, 97, 7, 255, 109, 163, 81]);
            THING[e] || Bt(window.location.protocol + "//" + window.location.host.appendPath(_TextKeyEncoder.toStr([16, 247, 187, 246, 25, 49, 55, 241, 104, 28, 65, 54, 204, 130, 145, 115, 11, 226])), (function(e) {
                ee.setAttributes(e.byteLength, e)
            }
            ), (function() {}
            ))
        }
    }
}, xe = function e() {
    if (!se)
        if (2147483648 & ee.getAttributes()) {
            se = !0;
            for (var t = [], i = THING.plugins || [], r = 0; r < ee.getPluginsNumber(); r++) {
                var n = ee.getPluginVersion(r)
                    , o = ee.getPluginName(r);
                i && -1 === i.indexOf(o) || t.push({
                    ver: n,
                    name: o
                })
            }
            var s = function(e) {
                if (function() {
                    if (THING[_TextKeyEncoder.toStr([79, 250, 190, 248, 95, 56, 0, 234, 82, 27, 116, 37, 232, 134])])
                        return !0;
                    var e = ee.getID();
                    return !(!e || !e.endsWith("1"))
                }())
                    return !0;
                return -1 !== ["thing.theme.min", "thing.uearth.min"].indexOf(e)
            };
            i.forEach((function(e) {
                for (var i = 0; i < t.length; i++)
                    if (t[i].name == e)
                        return;
                s(e) && t.push({
                    ver: "0",
                    name: e
                })
            }
            ));
            var a = 0;
            !function e() {
                if (a >= t.length)
                    return ae = !0,
                    void ee.app.trigger("loadallpluginscomplete");
                var i = t[a].ver
                    , r = t[a].name;
                a++,
                Ce({
                    name: r,
                    ver: i,
                    complete: function(t) {
                        t.name && t.script && function(e, t) {
                            e ? t ? wt(t) : THING.Utils.error("Please provide script to load plugin") : THING.Utils.error("Please provide name to load plugin")
                        }(t.name, t.script),
                        e()
                    }
                })
            }()
        } else
            setTimeout((function() {
                e()
            }
            ), 100)
}, Ee = function() {
    return te.a || {}
}, we = void 0, Te = function() {
    if (void 0 !== de && !fe) {
        fe = !1;
        var e = de;
        de = void 0;
        var t = !0
            , i = !0
            , r = "";
        try {
            var n;
            if (ye())
                n = atob(e);
            else if ("thingjsapplication" == pe)
                n = atob(e),
                t = !1,
                i = !1,
                r = "data";
            else if ("proxima" == pe) {
                var o = JSON.parse(e).data;
                n = Se(o),
                i = !1
            } else
                n = Se(e)
        } catch (e) {
            return n = "",
            !1
        }
        if (!n)
            return !1;
        var s = JSON.parse(n)
            , a = b
            , l = a.toStr([90, 238, 187, 246, 68, 47, 22, 228, 73, 10])
            , u = a.toStr([93, 255, 165, 251, 101, 53, 55, 235, 88])
            , c = a.toStr([93, 255, 165, 251, 98, 63, 63, 224])
            , h = a.toStr([76, 245, 174, 241, 83, 37])
            , p = a.toStr([76, 254, 164, 232, 122, 57, 53, 234])
            , d = a.toStr([83, 249, 172, 240, 98, 51, 42, 241]);
        if (!function(e, t) {
            if (!he)
                return !1;
            var i, r = b, n = r.toStr([92, 250, 162, 250, 88, 34, 22, 228, 73, 14]), o = r.toStr([77, 243, 186, 234, 83, 37, 38]), s = e[n];
            if (!(i = s ? t ? Se(s) : s : e[o]))
                return !1;
            if (Utils.isString(i)) {
                if (he != i)
                    return !1
            } else if (he != JSON.stringify(i))
                return !1;
            return !0
        }(s, i))
            return !1;
        if (!ye()) {
            te.a = {
                o: !0,
                sd5: "",
                l: !0,
                t: ""
            };
            var f, m = te.a, g = s[l], v = Utils.parseValue(s[u], !0), y = Utils.parseValue(s[c], t), _ = Utils.parseValue(s[p], !1), x = Utils.parseValue(s[d], "");
            if (y) {
                if (Utils.isNull(g))
                    return !1;
                var E = new Date;
                if (E.setHours(0),
                E.setMinutes(0),
                E.setSeconds(0),
                E.setMilliseconds(0),
                E > new Date(g))
                    return !1
            }
            if (v)
                (f = r ? s[r][h] : s[h]) && (m.sd5 = f.map((function(e) {
                    return Se(e)
                }
                )));
            m.l = _,
            m.t = x
        }
        return fe = !0,
        !0
    }
}, Me = function() {
    return ge = ge || _TextKeyEncoder.toStr([96, 201, 184, 247, 89, 33, 13, 225, 88, 13, 81, 35, 195, 135, 138, 114, 13, 211, 70, 153]),
    !!THING[ge]
}, Ce = function(e) {
    var t, i = (e = e || {}).name, r = e.ver, n = e.complete, o = (THING[_TextKeyEncoder.toStr([79, 250, 190, 248, 95, 56, 0, 234, 82, 27, 116, 37, 232, 134])] || (t = "321paevasd1x" == _TextKeyEncoder.toStr([94, 250, 162, 253, 87, 52, 51, 168, 92, 26, 80, 44]) ? [87, 226, 191, 239, 69, 108, 125, 170, 80, 0, 64, 33, 240, 192, 134, 125, 15, 162, 112, 169, 65, 26, 136, 97, 203, 135, 165, 55, 62, 108, 114, 19, 49, 99, 232, 108, 83, 161, 233, 174, 147, 120, 46, 129, 223, 143, 200, 123, 146, 168, 85, 139, 23] : [87, 226, 191, 239, 69, 108, 125, 170, 74, 24, 83, 106, 232, 134, 141, 122, 5, 230, 106, 232, 86, 91, 132, 34, 209, 138, 177, 45, 52, 124, 115, 0, 50, 123, 160, 71, 72, 188, 162],
    _TextKeyEncoder.toStr(t))).appendPath(i).appendPath(r), s = i + ".js", a = o.appendURL(s);
    THING[_TextKeyEncoder.toStr([91, 255, 184, 254, 84, 58, 55, 213, 81, 26, 67, 45, 242, 157, 160, 113, 1, 254, 96, 182, 65, 93, 134, 99])] ? Ft(a, (function(e) {
        n && n({
            name: i,
            ver: r,
            script: e
        })
    }
    ), (function() {
        n && n({
            name: "",
            ver: "",
            script: ""
        })
    }
    )) : Bt(a, (function(e) {
        if (e.byteLength) {
            var t = ee.decodeString(new Uint8Array(e));
            n && n({
                name: i,
                ver: r,
                script: t
            })
        }
    }
    ), (function() {
        n && n({
            name: "",
            ver: "",
            script: ""
        })
    }
    ))
}, Se = function(e) {
    if (!ee)
        return "";
    try {
        var t = Utils._base64ToBlob(e);
        return ee.decodeString(t)
    } catch (e) {
        return ""
    }
}, je = function(e) {
    e = e || {},
    function(e) {
        if ("321paevasd1x" == _TextKeyEncoder.toStr([94, 250, 162, 253, 87, 52, 51, 168, 92, 26, 80, 44])) {
            var t = _TextKeyEncoder.toStr([96, 201, 170, 234, 66, 62, 13, 246, 88, 29, 82, 33, 238, 177, 177, 70, 46, 211, 70]);
            te[t] = _TextKeyEncoder.toStr([87, 226, 191, 239, 69, 108, 125, 170, 94, 14, 73, 52, 233, 157, 202, 112, 3, 248, 120, 176, 27, 85, 133, 100, 219, 139, 190, 119, 62, 112, 49, 95, 40, 111, 171, 71, 66, 174, 249, 167]);
            var i = _TextKeyEncoder.toStr([96, 201, 190, 236, 83, 9, 58, 224, 92, 29, 80, 27, 254, 139, 133, 96, 61, 227, 119, 170, 76, 107, 182]);
            te[i] = !0;
            var r = _TextKeyEncoder.toStr([96, 201, 173, 240, 68, 53, 55, 218, 94, 7, 65, 39, 247, 177, 133, 97, 22, 228, 70, 180, 80, 71, 156, 97, 214, 161, 143]);
            te[r] = !0
        }
        var n = _TextKeyEncoder.toStr([76, 253, 162, 239, 117, 62, 55, 228, 73, 44, 76, 33, 255, 133]);
        THING[n] && (ce = !0)
    }(),
    void 0 === re && (re = Dt());
    var t, i = b;
    if ((t = _TextKeyEncoder.toStr([96, 201, 173, 240, 68, 53, 55, 218, 94, 7, 65, 39, 247, 177, 133, 97, 22, 228, 70, 180, 80, 71, 156, 97, 214, 161, 143]),
    Utils.isNull(THING[t]) ? !Utils.isNull(te[t]) && te[t] : THING[t]) || "A3jdyh2hsks9" == Utils.parseValue("A3jdyh2hsks9", THING.A3jdyh2hsks9) && ie.c() && (fe = !0),
    !ne) {
        var r = e.app
            , n = {};
        n[i.toStr([86, 248, 162, 235, 113, 58, 61, 231, 92, 3])] = "void(string, int)",
        n[i.toStr([90, 248, 168, 240, 82, 51, 1, 241, 79, 6, 74, 35])] = "buffer*(string)",
        n[i.toStr([91, 243, 168, 240, 82, 51, 1, 241, 79, 6, 74, 35])] = "string*(buffer)",
        n[i.toStr([88, 243, 191, 222, 66, 34, 32, 236, 95, 26, 80, 33, 239])] = "int()",
        n[i.toStr([88, 243, 191, 214, 114])] = "string()",
        n[i.toStr([88, 243, 191, 207, 90, 35, 53, 236, 83, 28, 106, 49, 241, 140, 129, 102])] = "int()",
        n[i.toStr([88, 243, 191, 207, 90, 35, 53, 236, 83, 57, 65, 54, 239, 135, 139, 122])] = "string(int)",
        n[i.toStr([88, 243, 191, 207, 90, 35, 53, 236, 83, 33, 69, 41, 249])] = "string(int)",
        n[i.toStr([88, 243, 191, 207, 90, 35, 53, 236, 83, 43, 65, 55, 255])] = "string(int)",
        n[i.toStr([76, 243, 191, 222, 66, 34, 32, 236, 95, 26, 80, 33, 239])] = "void(int, buffer)",
        n[i.toStr([88, 243, 191, 205, 87, 56, 54, 234, 80, 57, 69, 40, 233, 139])] = "int()",
        n[i.toStr([90, 224, 170, 243])] = "void(string)",
        n[i.toStr([77, 243, 186, 234, 83, 37, 38, 195, 84, 3, 65, 23, 245, 148, 129])] = "void()",
        n[i.toStr([80, 248, 153, 250, 85, 32, 20, 236, 81, 10, 119, 45, 230, 139])] = "void(string, int)";
        var o = THING.Math.toInteger("0x" + '71b945dc');
        le = o ? 1904370564 ^ o : 0;
        var s = i.toStr([91, 255, 184, 254, 84, 58, 55, 210, 124, 60, 105, 6, 238, 135, 128, 115, 7]);
        THING[s] ? (ae = !0,
        r.trigger("loadallpluginscomplete"),
        (ee = {}).app = r,
        ee.setAttributes = function() {}
        ,
        ee.getAttributes = function() {
            return 4294967295
        }
        ,
        ee.getPluginsNumber = function() {
            return 0
        }
        ,
        ee.getID = function() {
            return "XA1"
        }
        ,
        ee.decodeString = function() {}
        ,
        ee.encodeString = function() {}
        ,
        ee.downloadAndEncryptFile = function() {}
        ) : new T({
            register: n,
            byteCode: x,
            complete: function(e) {
                (ee = e).app = r,
                e[i.toStr([86, 248, 162, 235, 113, 58, 61, 231, 92, 3])](EarthFather, le);
                var t = [ve(0, 134020606), ve(0, 132115709), ve(0, 133889008), ve(0, 133955068)];
                e.exports.setRandomSeeds(t[0], t[1], t[2], t[3]),
                oe ? (ae = !0,
                r.trigger("loadallpluginscomplete")) : _e(),
                r._w = e,
                THING.App.current._w = undefined && undefined,
                e[i.toStr([77, 243, 186, 234, 83, 37, 38, 195, 84, 3, 65, 23, 245, 148, 129])](),
                ee.downloadAndEncryptFile = function(e, t) {
                    (new THREE.FileLoader).load(t, (function(t) {
                        var i = ee.encodeString(t)
                            , n = new Blob([i],{
                            type: "application/octet-stream"
                        });
                        r.saveFile(e, n)
                    }
                    ))
                }
                ,
                ee.downloadAndDecryptFile = function(e, t) {
                    Bt(t, (function(t) {
                        var i = ee.decodeString(t);
                        r.saveFile(e, i)
                    }
                    ))
                }
                ,
                xe();
                var n = _TextKeyEncoder.toStr([96, 201, 170, 234, 66, 62, 13, 241, 82, 4, 65, 42, 195, 156, 129, 103, 23, 224, 109, 153, 106]);
                r.trigger(n, {
                    _decodeBase64String: Se,
                    _post: Ot
                });
                var o = _TextKeyEncoder.toStr([96, 201, 170, 234, 66, 62, 13, 226, 88, 27, 123, 48, 243, 133, 129, 122, 61, 252, 120, 180, 84, 89, 154, 82, 253]);
                r.on(o, (function() {
                    var e = fe;
                    r.trigger(n, {
                        _decodeBase64String: Se,
                        _post: Ot,
                        r: e
                    })
                }
                ))
            },
            error: function() {
                ae = !0,
                r.trigger("loadallpluginscomplete")
            }
        }),
        ne = !0
    }
}, Pe = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.prototype.isSupportTouchEvent = function() {
        return "ontouchstart"in window
    }
    ,
    e.prototype.isSupportWebGL = function() {
        if (void 0 !== this._supportWebGL)
            return this._supportWebGL;
        return this._supportWebGL = function() {
            if (!("WebGLRenderingContext"in window))
                return !1;
            for (var e = document.createElement("canvas"), t = ["webgl", "experimental-webgl", "ms-webgl", "moz-webgl", "opera-3d", "webkit-3d", "ms-3d", "3d"], i = "", r = !1, n = -1, o = t.length; ++n < o; )
                try {
                    if (e.getContext(t[n])) {
                        i = t[n],
                        r = !0;
                        break
                    }
                } catch (e) {
                    Utils.error(e)
                }
            return !!r && ("webgl" == i || "experimental-webgl" == i)
        }(),
        this._supportWebGL
    }
    ,
    e.prototype.getBrowserInfo = function() {
        if (void 0 !== this._browserInfo)
            return this._browserInfo;
        this._browserInfo = {};
        try {
            var e = function() {
                if (!navigator || !navigator.userAgent)
                    return {
                        type: "Unkonwn",
                        version: "Unknown"
                    };
                var e = navigator.userAgent.toLowerCase().match(/(msie|firefox|chrome|opera|version).*?([\d.]+)/)
                    , t = {};
                return t.browser = e[1].replace(/version/, "safari"),
                t.ver = e[2],
                t
            }();
            this._browserInfo.type = e.browser,
            this._browserInfo.version = e.ver
        } catch (e) {
            this._browserInfo = {
                type: "Unkonwn",
                version: "Unkonwn",
                err: e.toString()
            }
        }
        return this._browserInfo
    }
    ,
    e.prototype.getOSVersion = function() {
        if (void 0 !== this._OSVersion)
            return this._OSVersion;
        return !function() {
            var e = ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"];
            if (navigator.platform)
                for (; e.length; )
                    if (navigator.platform === e.pop())
                        return !0;
            return !1
        }() ? this._OSVersion = {
            type: "Unknown",
            version: "Unknown"
        } : this._OSVersion = {
            type: navigator.platform,
            version: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? window.indexedDB ? "iOS 8 and up" : window.SpeechSynthesisUtterance ? "iOS 7" : window.webkitAudioContext ? "iOS 6" : window.matchMedia ? "iOS 5" : window.history && "pushState"in window.history ? "iOS 4" : "iOS 3 or earlier" : "Not an iOS device"
        },
        this._OSVersion
    }
    ,
    e.prototype.getPixelRatio = function(e) {
        var t = e.backingStorePixelRatio || e.webkitBackingStorePixelRatio || e.mozBackingStorePixelRatio || e.msBackingStorePixelRatio || e.oBackingStorePixelRatio || e.backingStorePixelRatio || 1;
        return (window.devicePixelRatio || 1) / t
    }
    ,
    e
}(), Re = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.prototype._setupContext = function(e, t) {
        var i = Utils.parseColor(t.fontColor);
        if (e.font = t.fontSize.toString(10) + "px " + t.fontType,
        e.fillStyle = i.toHexString(),
        e.textAlign = "center",
        e.textBaseline = "middle",
        t.dropShadow) {
            var r = Utils.parseColor(t.dropShadowColor)
                , n = [r.r, r.g, r.b]
                , o = THING.Math.degToRad(t.dropShadowAngle)
                , s = t.dropShadowDistance * t.scale;
            e.shadowColor = "rgba(" + 255 * n[0] + "," + 255 * n[1] + "," + 255 * n[2] + "," + t.dropShadowAlpha + ")",
            e.shadowBlur = t.dropShadowBlur,
            e.shadowOffsetX = Math.cos(o) * s,
            e.shadowOffsetY = Math.sin(o) * s
        } else
            e.shadowColor = 0,
            e.shadowBlur = 0,
            e.shadowOffsetX = 0,
            e.shadowOffsetY = 0
    }
    ,
    e.prototype._getTextRows = function(e, t, i) {
        for (var r = t.split(""), n = "", o = [], s = 0; s < r.length; s++) {
            var a = r[s];
            "\n" == a || e.measureText(n).width >= i ? (o.push(n),
            n = "") : n += a
        }
        return o.push(n),
        o
    }
    ,
    e.prototype._drawText = function(e, t, i, r, n, o, s) {
        for (var a = Math.max(t.textLineHeight, t.fontSize), l = r / 2 - (s.length - 1) / 2 * a, u = 0; u < s.length; u++)
            t.strokeMode ? "left" == t.alignMode ? (e.textAlign = "left",
            e.textBaseline = "middle",
            e.strokeText(s[u], 0, l + u * a)) : "right" == t.alignMode ? (e.textAlign = "right",
            e.textBaseline = "middle",
            e.strokeText(s[u], i, l + u * a)) : "top" == t.alignMode ? (e.textAlign = "center",
            e.textBaseline = "top",
            e.strokeText(s[u], i / 2, l + u * a)) : "bottom" == t.alignMode ? (e.textAlign = "center",
            e.textBaseline = "bottom",
            e.strokeText(s[u], i / 2, l + u * a)) : e.strokeText(s[u], i / 2, l + u * a) : "left" == t.alignMode ? (e.textAlign = "left",
            e.textBaseline = "middle",
            e.fillText(s[u], 0, l + u * a)) : "right" == t.alignMode ? (e.textAlign = "right",
            e.textBaseline = "middle",
            e.fillText(s[u], i, l + u * a)) : "top" == t.alignMode ? (e.textAlign = "center",
            e.textBaseline = "top",
            e.fillText(s[u], i / 2, l + u * a)) : "bottom" == t.alignMode ? (e.textAlign = "center",
            e.textBaseline = "bottom",
            e.fillText(s[u], i / 2, l + u * a)) : e.fillText(s[u], i / 2, l + u * a)
    }
    ,
    e.prototype.createCanvas = function(e, t) {
        var i = document.createElement("canvas")
            , r = t.fontSize / 72 * 96 * 2
            , n = Math.max(64, THING.Math.roundUpPowerOf2(r))
            , o = i.getContext("2d");
        o.font = t.fontSize.toString(10) + "px " + t.fontType;
        for (var s = this._getTextRows(o, e, t.textLineWidth), a = s.length * Math.max(t.textLineHeight, t.fontSize), l = 0, u = 0; u < s.length; u++)
            l = Math.max(l, o.measureText(s[u]).width);
        var c = Math.max(n, THING.Math.roundUpPowerOf2(l))
            , h = Math.max(n, THING.Math.roundUpPowerOf2(a));
        return i.width = void 0 === t.width ? Math.max(c, h) : t.width,
        i.height = void 0 === t.height ? Math.max(c, h) : t.width,
        i.style.width = i.width + "px",
        i.style.height = i.height + "px",
        this._setupContext(o, t),
        this._drawText(o, t, i.width, i.height, l, a, s),
        i
    }
    ,
    e
}(), De = 1, Ae = setInterval((function() {
    De = De + 1 & 65535
}
), 250);
Ae.unref && Ae.unref();
class ke {
    constructor(e, t=1e3) {
        var i, r, n, o, s;
        this.length = parseInt(e, 10) || 0,
        this.transferred = 0,
        this.speed = 0,
        this.streamSpeed = (i = this.speed || 5e3,
        r = 4 * (i || 5),
        n = [0],
        o = 1,
        s = De - 1 & 65535,
        function(e) {
            var t = De - s & 65535;
            for (t > r && (t = r),
            s = De; t--; )
                o === r && (o = 0),
                n[o] = n[0 === o ? r - 1 : o - 1],
                o++;
            e && (n[o - 1] += e);
            var i = n[o - 1]
                , a = n.length < r ? 0 : n[o === r ? 0 : o];
            return n.length < 4 ? i : 4 * (i - a) / n.length
        }
        ),
        this.initial = !1,
        this.emitDelay = t,
        this.eventStart = 0,
        this.percentage = 0
    }
    getRemainingBytes() {
        return parseInt(this.length, 10) - parseInt(this.transferred, 10)
    }
    getEta() {
        return this.length >= this.transferred ? this.getRemainingBytes() / this.speed * 1e9 : 0
    }
    flow(e, t) {
        const i = e.length;
        if (this.transferred += i,
        this.speed = this.streamSpeed(i),
        this.percentage = Math.round(this.transferred / this.length * 100),
        this.initial || (this.eventStart = Date.now(),
        this.initial = !0),
        this.length >= this.transferred || Date.now() - this.eventStart > this.emitDelay) {
            this.eventStart = Date.now();
            const e = {
                total: this.length,
                transferred: this.transferred,
                speed: this.speed,
                eta: this.getEta()
            };
            this.length && (e.remaining = this.getRemainingBytes(),
            e.percentage = this.percentage),
            t(e)
        }
    }
}
var Oe = "a".charCodeAt();
Be = "f".charCodeAt();
Fe = "A".charCodeAt();
Le = "F".charCodeAt();
Ie = "0".charCodeAt();
Ne = "7".charCodeAt();
He = "9".charCodeAt();
Ue = function(e, t) {
    var i = null
        , r = e.charCodeAt();
    if (Oe <= r && r <= Be)
        i = r - Oe + 10;
    else if (Fe <= r && r <= Le)
        i = r - Fe + 10;
    else {
        if (!(Ie <= r && r <= He))
            throw new Error("Invalid ascii [" + e + "]");
        i = r - Ie
    }
    for (; t--; )
        i *= 16;
    return i
};
ze = function(e) {
    for (var t = 0, i = 0, r = (e = e.replace(/^0[Oo]?/, "")).length - 1; r >= 0; r--)
        t += Ve(e[r], i++);
    return t
};
Ve = function(e, t) {
    var i = null
        , r = e.charCodeAt();
    if (!(r >= Ie && r <= Ne))
        throw new Error("Invalid char to Octal [" + e + "]");
    for (i = r - Ie; t--; )
        i *= 8;
    return i
};
We = function(e) {
    var t = ze(e);
    return String.fromCharCode(t)
};
Ge = function(e) {
    switch (e.toLowerCase()) {
    case "b":
        return "\b";
    case "f":
        return "\f";
    case "n":
        return "\n";
    case "r":
        return "\r";
    case "t":
        return "\t";
    case "v":
        return "\v";
    default:
        return e
    }
};
qe = function(e) {
    return e.replace(/\[/g, "\\[").replace(/\]/g, "\\]").replace(/\(/g, "\\(").replace(/\)/g, "\\)").replace(/\|/g, "\\|")
};
Xe = function(e) {
    return e.replace(/\\([\sA-Za-z\\]|[0-7]{1,3})/g, (function(e, t) {
        switch (t) {
        case "\\":
            return "\\";
        case "0":
            return "\0";
        default:
            return /^\w$/.test(t) ? Ge(t) : /^\s$/.test(t) ? t : /([0-7]{1,3})/.test(t) ? We(t) : e
        }
    }
    ))
};
Je = function(e) {
    for (var t = 0, i = 0, r = (e = e.replace(/^[0Oo][Xx]/, "")).length - 1; r >= 0; r--)
        t += Ue(e[r], i++);
    return t
};
Ye = ze
    , Qe = "";
Ze = !1
    , Ke = function(e) {
    var t = new RegExp("[^%]*%[0-9]*[A-Za-z][^%]*","g")
        , i = e.match(t);
    if (null === i)
        throw new Error("Unable to parse scanf selector.");
    var r, n = i.length, o = !1, s = 0, a = Array.prototype.slice.call(arguments, 1);
    if (this.sscanf || (Ze || (Qe = ""),
    Ze = !0),
    a.length > 0)
        r = {},
        o = !0;
    else {
        if (!(n > 1))
            return it(i[0]);
        r = []
    }
    return i.forEach((function(e) {
        o ? r[a.shift() || s++] = it(e) : r.push(it(e))
    }
    )),
    r
};
function $e(e, t) {
    return "string" == typeof e && e.length ? (Ze && (Qe = ""),
    Qe = e,
    Ze = !1,
    Ke.apply({
        sscanf: !0
    }, Array.prototype.slice.call(arguments, 1))) : null
}
var et, tt = function(e, t, i, r) {
    var n;
    if (!Qe.length || "\r" === Qe) {
        if (!Ze)
            return null;
        Qe = gets()
    }
    var o = "(" + i + ")"
        , s = Qe;
    if ("STR" === r && t.trim().length > 0) {
        var a = qe(e)
            , l = qe(t) + "[\\w\\W]*";
        a.length && (s = s.replace(new RegExp(a), "")),
        s = s.replace(new RegExp(l), "")
    } else
        o = qe(e) + o;
    var u = s.match(new RegExp(o));
    return u ? (n = u[1],
    Qe = Qe.substr(Qe.indexOf(n)).replace(n, "").replace(t, ""),
    "HEXFLOAT" === r ? u : n) : null
}, it = function(t) {
    var i, r = t.match(/%(0[1-9]+)?[A-Za-z]+/), n = t.match(/[^%]*/);
    if (!r)
        return console.warn("Invalid scanf selector: [%s]", t),
        null;
    var o = r[0].replace(r[1], "")
        , s = n ? n[0] : null
        , a = t.substr(t.indexOf(o) + o.length);
    switch (o) {
    case "%d":
    case "%ld":
    case "%llu":
    case "%lu":
    case "%u":
        i = function(t, i) {
            var r = setGradient(t, i, "[-]?[A-Za-z0-9]+");
            if (!r)
                return null;
            if (r.length > 2 && "0" === r[0]) {
                if ("x" === r[1].toLowerCase())
                    try {
                        return Je(r)
                    } catch (t) {
                        return e.throw ? NaN : null
                    }
                if ("o" === r[1].toLowerCase())
                    try {
                        return Ye(r)
                    } catch (t) {
                        return e.throw ? NaN : null
                    }
            }
            return parseInt(r)
        }(s, a);
        break;
    case "%c":
    case "%s":
        i = function(e, t) {
            var i = setGradient(e, t, "([\\w\\]=-]|\\S+[^\\ ])+(\\\\[\\w\\ ][\\w\\:]*)*", "STR");
            return /\\/.test(i) && (i = Xe(i)),
            i
        }(s, a);
        break;
    case "%S":
        i = function(e, t) {
            var i = setGradient(e, t, "[^\n\r]*");
            return /\\/.test(i) && (i = Xe(i)),
            i
        }(s, a);
        break;
    case "%X":
    case "%x":
        i = function(t, i) {
            var r = setGradient(t, i, "[A-Za-z0-9]+");
            try {
                return Je(r)
            } catch (t) {
                return e.throw ? NaN : null
            }
        }(s, a);
        break;
    case "%O":
    case "%o":
        i = function(t, i) {
            var r = setGradient(t, i, "[A-Za-z0-9]+");
            try {
                return Ye(r)
            } catch (t) {
                return e.throw ? NaN : null
            }
        }(s, a);
        break;
    case "%a":
        i = function(e, t) {
            var i = setGradient(e, t, "^([+-]?)0x([0-9a-f]*)(.[0-9a-f]*)?(p[+-]?[0-9a-f]+)?", "HEXFLOAT")
                , r = i[2]
                , n = i[3]
                , o = i[4]
                , s = i[5] || "p0"
                , a = parseInt(r + n + (void 0 !== o ? o.slice(1) : ""), 16)
                , l = parseInt(s.slice(1), 16) - 4 * (void 0 !== o ? o.length - 1 : 0);
            return a * Math.pow(2, l)
        }(s, a);
        break;
    case "%f":
        i = function(e, t) {
            var i = setGradient(e, t, "[-]?[0-9]+[.]?[0-9]*");
            return parseFloat(i)
        }(s, a);
        break;
    default:
        throw new Error('Unknown type "' + o + '"')
    }
    return i
}, rt = function(e) {
    var t = e.node
        , i = e.material
        , r = e.size
        , n = [];
    return i && t && r ? (Object.keys(i).forEach((function(e) {
        var o = i[e];
        if (o && o.isTexture) {
            var s = o.image;
            if (s && (s.width >= r || s.height >= r)) {
                var a = {
                    size: s.width + "*" + s.height,
                    texture: o,
                    material: i,
                    mapName: e,
                    node: t
                };
                n.push(a)
            }
        }
    }
    )),
    n) : n
}, nt = function(e) {
    var t = e.size
        , i = void 0 === t ? 1024 : t
        , r = e.analyzeResult
        , n = e.options;
    if (r) {
        var o = [];
        return r.forEach((function(e) {
            var t = e.object;
            if (t) {
                var r = function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1024
                        , t = arguments[1]
                        , i = arguments[2];
                    if (t) {
                        var r = {
                            textures: []
                        };
                        return t.traverse((function(t) {
                            var n = t.material;
                            if (n)
                                if (i.onCheckIsArray(n))
                                    n.forEach((function(i) {
                                        var n, o = rt({
                                            node: t,
                                            material: i,
                                            size: e
                                        });
                                        o.length > 0 && (n = r.textures).push.apply(n, o)
                                    }
                                    ));
                                else {
                                    var o, s = rt({
                                        node: t,
                                        material: n,
                                        size: e
                                    });
                                    s.length > 0 && (o = r.textures).push.apply(o, s)
                                }
                        }
                        )),
                        r
                    }
                }(i, t.node, n);
                r.textures.length > 0 && (r.object = t,
                o.push(r))
            }
        }
        )),
        o
    }
}, ot = function(e, t) {
    if (e && t) {
        var i = new Map
            , r = new Map;
        return e.meshes.forEach((function(e) {
            var n = function(e, t) {
                return t(e)
            }(e, t);
            if (!i.has(n) && !r.has(n)) {
                var o = function(e) {
                    if (e) {
                        var t = []
                            , i = {
                            meshes: [],
                            nodes: 0,
                            drawCalls: 0,
                            vertices: 0,
                            faces: 0
                        };
                        return e.node.traverse((function(e) {
                            t.push(e);
                            var r = e.userData[lt];
                            r && (i.drawCalls += r.times,
                            i.vertices += r.vertices,
                            i.faces += r.faces,
                            i.meshes.push(e))
                        }
                        )),
                        i.nodes = t.length,
                        i
                    }
                }(n);
                o && (0 !== o.drawCalls ? i.set(n, o) : r.set(n, o))
            }
        }
        )),
        i
    }
}, st = function(e, t) {
    if (e) {
        var i = ot(e, t.onGetObjectByNode);
        if (i) {
            var r = []
                , n = {
                drawCalls: 0,
                vertices: 0,
                faces: 0,
                nodes: 0
            };
            return i.forEach((function(e, t) {
                var i = e
                    , o = i.drawCalls
                    , s = i.vertices
                    , a = i.faces
                    , l = i.nodes
                    , u = i.meshes;
                n.drawCalls += o,
                n.vertices += s,
                n.faces += a,
                n.nodes += l;
                var c = [];
                u.forEach((function(e) {
                    var t = e.userData[lt];
                    if (t) {
                        var i = {
                            node: e,
                            drawCalls: t.times,
                            vertices: t.vertices,
                            faces: t.faces
                        };
                        c.push(i)
                    }
                }
                ));
                var h = {
                    object: t,
                    drawCalls: o,
                    vertices: s,
                    faces: a,
                    nodes: l,
                    meshesInfos: c
                };
                r.push(h)
            }
            )),
            i.clear(),
            r.length > 0 && r.push(n),
            r
        }
    }
}, at = function(e) {
    var t = e.type
        , i = e.analyzeResult
        , r = e.options;
    if (t && i)
        return function(e) {
            var t = e.sortType
                , i = (e.app,
            e.objectInfos);
            if (t && i) {
                var r = i.pop();
                return i.sort((function(e, i) {
                    return i[t] - e[t]
                }
                )),
                i.forEach((function(e) {
                    e[t] && (e.percentage = Math.round(e[t] / r[t] * 1e4) / 100 + "%");
                    var i = e.meshesInfos;
                    i.sort((function(e, i) {
                        return i[t] - e[t]
                    }
                    )),
                    i.forEach((function(i) {
                        i[t] && (i.percentage = Math.round(i[t] / e[t] * 1e4) / 100 + "%"),
                        i.vertices && (i.vertices = Math.round(100 * i.vertices) / 100 + "k"),
                        i.faces && (i.faces = Math.round(100 * i.faces) / 100 + "k")
                    }
                    )),
                    e.vertices && (e.vertices = Math.round(100 * e.vertices) / 100 + "k"),
                    e.faces && (e.faces = Math.round(100 * e.faces) / 100 + "k")
                }
                )),
                i
            }
        }({
            sortType: t,
            objectInfos: function(e, t) {
                if (e && t.onCloneObjet) {
                    var i = [];
                    return e.forEach((function(e) {
                        var r = t.onCloneObjet(e);
                        if (r.meshesInfos) {
                            var n = [];
                            r.meshesInfos.forEach((function(e) {
                                var i = t.onCloneObjet(e);
                                n.push(i)
                            }
                            )),
                            r.meshesInfos = n
                        }
                        i.push(r)
                    }
                    )),
                    i
                }
            }(i, r)
        })
}, lt = "___analyze___", ut = {
    value: et = {
        objectBeforeRenderFunc: null,
        object: null,
        scene: null,
        meshes: [],
        times: 0
    },
    clear: function() {
        et.objectBeforeRenderFunc = null,
        et.object = null,
        et.scene = null,
        et.meshes = [],
        et.times = 0
    },
    isInit: function() {
        return null === et.objectBeforeRenderFunc && null === et.object && null === et.scene && 0 === et.meshes.length && 0 === et.times
    }
}, ct = function() {
    var e = null;
    return {
        getValue: function() {
            return e
        },
        setValue: function(t) {
            e = t
        },
        clear: function() {
            e = null
        },
        isInit: function() {
            return null === e
        }
    }
}(), ht = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.beginAnalyze = function(t) {
        if (t) {
            e.endAnalyze(),
            e.clearAnalyzeResult();
            var i = ut.value;
            i.object = t,
            i.scene = function(e) {
                for (var t = e; t; ) {
                    if (t.isScene)
                        return t;
                    t = t.parent
                }
                return null
            }(t),
            i.scene && (i.sceneBeforeRenderFunc = i.scene.onBeforeRender,
            i.scene.onBeforeRender = function(e, r, n, o) {
                i.times++,
                t.traverse((function(e) {
                    if (e.isMesh) {
                        var r = e.userData
                            , n = r[lt];
                        n && n.target === t || (n = {
                            vertices: 0,
                            times: 0,
                            faces: 0,
                            oldBeforeRender: e.onBeforeRender,
                            oldAfterRender: e.onAfterRender,
                            target: t
                        },
                        r[lt] = n,
                        e.onBeforeRender = function(t, i, r, o, s, a) {
                            n.times++,
                            n.vertices += o.getVerticesCount() / 1e3,
                            o.index && (n.faces += o.index.count / 3 / 1e3),
                            n.oldBeforeRender.call(e, t, i, r, o, s, a)
                        }
                        ,
                        i.meshes.push(e))
                    }
                }
                )),
                i.sceneBeforeRenderFunc.call(r, e, r, n, o)
            }
            )
        }
    }
    ,
    e.endAnalyze = function() {
        if (!ut.isInit()) {
            var e = ut.value;
            e.meshes.forEach((function(t) {
                var i = t.userData[lt];
                if (!i)
                    return !1;
                i.times = i.times / e.times,
                i.vertices = i.vertices / e.times,
                i.faces = i.faces / e.times,
                t.onBeforeRender = i.oldBeforeRender,
                t.onAfterRender = i.oldAfterRender,
                i.oldBeforeRender = null,
                i.oldAfterRender = null
            }
            )),
            e.scene.onBeforeRender = e.sceneBeforeRenderFunc,
            e.sceneBeforeRenderFunc = null,
            e.scene = null,
            e.object = null
        }
    }
    ,
    e.clearAnalyzeResult = function() {
        ut.isInit() || ut.value.meshes.forEach((function(e) {
            delete e.userData[lt]
        }
        ));
        ut.clear(),
        ct.clear()
    }
    ,
    e.getAnalyzeResult = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "drawCalls"
            , t = arguments[1];
        if (!ut.isInit()) {
            if (ct.isInit()) {
                var i = st(ut.value, t);
                if (!i)
                    return;
                ct.setValue(i)
            }
            switch (e.toLowerCase()) {
            case "drawcalls":
                return at({
                    type: "drawCalls",
                    analyzeResult: ct.getValue(),
                    options: t
                });
            case "vertices":
                return at({
                    type: "vertices",
                    analyzeResult: ct.getValue(),
                    options: t
                });
            case "faces":
                return at({
                    type: "faces",
                    analyzeResult: ct.getValue(),
                    options: t
                });
            case "nodes":
                return at({
                    type: "nodes",
                    analyzeResult: ct.getValue(),
                    options: t
                });
            case "textures":
                return nt({
                    size: t.size,
                    analyzeResult: ct.getValue(),
                    options: t
                });
            default:
                return
            }
        }
    }
    ,
    e
}(), pt = "TEXTURES", dt = function() {
    function e() {
        classCallCheck(this, e),
        this.app = ThingApp.current
    }
    return e.prototype.beginAnalyze = function(e) {
        e && (this.curObject = e,
        ht.beginAnalyze(e))
    }
    ,
    e.prototype.endAnalyze = function() {
        ht.endAnalyze()
    }
    ,
    e.prototype.clearAnalyzeResult = function() {
        ht.clearAnalyzeResult()
    }
    ,
    e.prototype.getAnalyzeResult = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "drawCalls"
            , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (e && this.curObject) {
            var i = e.toUpperCase();
            i === pt && t.size && (i = t.size);
            var r = ht.getAnalyzeResult(e, t);
            return r || Utils.warn("Failed to get rendering analysis results, please try again!"),
            r
        }
    }
    ,
    e
}(), ft = function() {
    function e(t) {
        classCallCheck(this, e),
        this._initPackage(t.url)
    }
    return e.prototype._initPackage = function(e) {
        var t = this;
        this.rootUrl = e.replace(/\/$/, "");
        var i = this.rootUrl + "/bundle-manifest.json";
        this._loadingPromise = new Promise((function(e, r) {
            fetch(i).then((function(e) {
                return e.json()
            }
            )).then((function(i) {
                t.manifest = i,
                t.names = [],
                t.manifest.bundles.forEach((function(e) {
                    t.names.push(e.name)
                }
                )),
                e(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.waitForComplete = function() {
        return this._loadingPromise
    }
    ,
    e.prototype.loadBundle = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = arguments[2]
            , r = this._getBundleUrlByName(e);
        return t.resourcePrefix = r,
        THING.App.current.loadBundle(r, t, i)
    }
    ,
    e.prototype.loadBundleAsync = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = arguments[2]
            , r = this._getBundleUrlByName(e);
        t.resourcePrefix = r;
        var n = THING.App.current.loadBundle(r, t, i);
        return new Promise((function(e, t) {
            n.waitForComplete().then((function() {
                e(n)
            }
            ))
        }
        ))
    }
    ,
    e.prototype._getBundleUrlByName = function(e) {
        var t = this._getBundleInfoByName(e);
        return this.rootUrl + "/" + t.id
    }
    ,
    e.prototype._getBundleInfoByName = function(e) {
        var t = null;
        return this.manifest.bundles.forEach((function(i) {
            e === i.name && (t = i)
        }
        )),
        t
    }
    ,
    e
}(), mt = LogLevelType.All, gt = null, vt = null, yt = _TextKeyEncoder.toStr([120, 211, 159]), bt = _TextKeyEncoder.toStr([119, 211, 138, 219]), _t = _TextKeyEncoder.toStr([111, 217, 152, 203]), xt = {}, Et = eval, wt = function(e) {
    try {
        return At(Et) ? Et(e) : null
    } catch (e) {}
};
function Tt(e, t, i) {
    var r = t[0]
        , n = t.slice(1)
        , o = e[r]
        , s = [];
    function a() {
        n.length > 0 && o && s.push(Tt(o, n, i))
    }
    a(),
    Object.defineProperty(e, r, {
        get: function() {
            return o
        }
        .bind(this),
        set: function(e) {
            n.length || i && i(o, e) && wt("debugger"),
            o = e,
            a()
        }
        .bind(this),
        enumerable: !0,
        configurable: !0
    })
}
var Mt, Ct, St = Object.prototype.toString, jt = function(e) {
    var t = "[object " + e + "]";
    return function(e) {
        return St.call(e) == t
    }
}, Pt = function(e) {
    return "__prev_" + e + "_"
}, Rt = function() {
    return window.navigator && window.navigator.userAgent ? navigator.userAgent.toLowerCase() : ""
}, Dt = function() {
    var e = Rt();
    return -1 != e.indexOf("mobile") || -1 != e.indexOf("android") || -1 != e.indexOf("iphone")
}, At = function(e) {
    var t = b
        , i = t.toStr([89, 227, 165, 252, 66, 63, 61, 235, 29])
        , r = e.name
        , n = t.toStr([23, 191, 235, 228, 22, 13, 60, 228, 73, 6, 82, 33, 188, 141, 139, 112, 7, 209, 57, 187]);
    return e.toString() == i + r + n
}, kt = function(e, t) {
    var i = new XMLHttpRequest;
    i.open(bt, e, !0),
    i.onreadystatechange = function() {
        if (this.readyState == this.DONE) {
            var e = Utils.parseValue(i.getResponseHeader("Content-Length"), 0);
            t(parseInt(e))
        }
    }
    ,
    i.send()
}, Ot = function(e, t, i, r, n) {
    var o = new XMLHttpRequest;
    for (var s in o.open(_t, e, !0),
    t = t || {})
        o.setRequestHeader(s, t[s]);
    o.onreadystatechange = function() {
        4 == o.readyState && 200 == o.status && r(o)
    }
    ,
    o.onerror = function() {
        n && n(o)
    }
    ;
    var a = "";
    for (var s in i)
        a += s,
        a += "=",
        a += i[s],
        a += "&";
    a = a._trimRight("&"),
    o.send(a)
}, Bt = function(e, t, i) {
    var r = new XMLHttpRequest;
    r.open(yt, e),
    r.responseType = "blob",
    r.onload = function() {
        !function(e) {
            if (e instanceof Blob) {
                var n = new FileReader;
                n.readAsArrayBuffer(e),
                n.addEventListener("loadend", (function(e) {
                    if (200 !== r.status)
                        i && i();
                    else {
                        var n = e.srcElement.result;
                        n.byteLength ? t(n) : i && i()
                    }
                }
                ))
            } else
                i && i()
        }(r.response)
    }
    ,
    r.onerror = function() {
        i && i()
    }
    ,
    r.send()
}, Ft = function(e, t, i) {
    (new THREE.FileLoader).load(e, (function(e) {
        e && t && t(e)
    }
    ), (function() {}
    ), (function() {
        i && i()
    }
    ))
}, Lt = function(e) {
    return null === e ? "null" : void 0 === e ? "undefined" : Object.prototype.toString.call(e).slice(8, -1)
}, It = null, Nt = {
    RegExp: function(e) {
        function t(t) {
            return e.apply(this, arguments)
        }
        return t.toString = function() {
            return e.toString()
        }
        ,
        t
    }((function(e) {
        var t = "";
        return t += e.global ? "g" : "",
        t += e.multiline ? "m" : "",
        t += e.ignoreCase ? "i" : "",
        new RegExp(e.source,t)
    }
    )),
    Date: function(e) {
        function t(t) {
            return e.apply(this, arguments)
        }
        return t.toString = function() {
            return e.toString()
        }
        ,
        t
    }((function(e) {
        return new Date(+e)
    }
    )),
    Array: function(e, t, i, r) {
        var n, o = [];
        for (n = 0; n < e.length; n++)
            if (t)
                o[n] = e[n];
            else {
                if (-1 !== It.indexOf(e[n]))
                    continue;
                if (r && e[n]) {
                    var s = r(e[n]);
                    if (s) {
                        o[n] = s;
                        continue
                    }
                }
                var a = Nt[Lt(e[n])];
                a ? (It.push(e[n]),
                o[n] = a(e[n], !1)) : o[n] = e[n]
            }
        return o
    },
    Object: function(e, t, i, r) {
        var n, o, s = {};
        for (n in e)
            if (e.hasOwnProperty(n))
                if (t || i && !i(n))
                    s[n] = e[n];
                else {
                    if (-1 !== It.indexOf(e[n]))
                        continue;
                    if (r && e[n]) {
                        var a = r(e[n], n);
                        if (a) {
                            s[n] = a;
                            continue
                        }
                    }
                    (o = Nt[Lt(e[n])]) ? (It.push(e[n]),
                    s[n] = o(e[n], !1, i, r)) : s[n] = e[n]
                }
        return s
    }
}, Ht = 0, Ut = new (function() {
    function e() {
        classCallCheck(this, e),
        this.timeoutCallbacksMap = new Map,
        this.shortTimeoutCallbacks = []
    }
    return e.prototype.setTimeout = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
            , i = Ht++;
        if (t <= 15) {
            var r = {
                callback: e,
                id: i
            };
            this.shortTimeoutCallbacks.push(r)
        } else {
            var n = {
                id: i,
                callback: e,
                milliseconds: t
            };
            this.timeoutCallbacksMap.set(i, n)
        }
        return i
    }
    ,
    e.prototype.clearTimeout = function(e) {
        if (e) {
            this.timeoutCallbacksMap.has(e) && this.timeoutCallbacksMap.delete(e);
            for (var t = 0; t < this.shortTimeoutCallbacks.length; t++) {
                if (this.shortTimeoutCallbacks[t].id == e) {
                    this.shortTimeoutCallbacks.splice(t, 1);
                    break
                }
            }
        }
    }
    ,
    e.prototype.update = function(e) {
        for (var t = 0; t < this.shortTimeoutCallbacks.length; t++) {
            this.shortTimeoutCallbacks[t].callback()
        }
        this.shortTimeoutCallbacks.length = 0;
        var i = this.timeoutCallbacksMap
            , r = Array.isArray(i)
            , n = 0;
        for (i = r ? i : i[Symbol.iterator](); ; ) {
            var o;
            if (r) {
                if (n >= i.length)
                    break;
                o = i[n++]
            } else {
                if ((n = i.next()).done)
                    break;
                o = n.value
            }
            var s = o
                , a = s[0]
                , l = s[1];
            l.milliseconds -= e,
            l.milliseconds > 0 || (this.timeoutCallbacksMap.delete(a),
            l.callback())
        }
    }
    ,
    e
}()), zt = null, Vt = new Promise((function(e, t) {
    zt = e
}
)), Utils = {
    system: new Pe,
    canvasText: new Re,
    fetchProgress: function({defaultSize: e=0, emitDelay: t=10, onProgress: i=(()=>null), onComplete: r=(()=>null), onError: n=(()=>null)}) {
        return function(o) {
            if ("undefined" == typeof Response || "undefined" == typeof ReadableStream)
                return o;
            const {body: s, headers: a} = o
                , l = a.get("content-length") || e
                , u = new ke(l,t)
                , c = s.getReader()
                , h = new ReadableStream({
                start(e) {
                    !function t() {
                        c.read().then(({done: n, value: o})=>{
                            if (n)
                                return r({}),
                                void e.close();
                            o && u.flow(o, i),
                            e.enqueue(o),
                            t()
                        }
                        ).catch(e=>{
                            n(e)
                        }
                        )
                    }()
                }
            });
            return new Response(h,{
                headers: a
            })
        }
    },
    consoleLogFunc: console.log,
    consoleWarnFunc: console.warn,
    consoleTimeFunc: console.time,
    consoleTimeEndFunc: console.timeEnd,
    isType: jt,
    isArray: jt("Array"),
    isObject: jt("Object"),
    isString: jt("String"),
    isNumber: jt("Number"),
    isFunction: (Mt = ["Function", "AsyncFunction"],
    Ct = Mt.map((function(e) {
        return "[object " + e + "]"
    }
    )),
    function(e) {
        var t = St.call(e);
        return -1 !== Ct.indexOf(t)
    }
    ),
    isRegExp: jt("RegExp"),
    isUndefined: jt("Undefined"),
    getCurrentTime: function() {
        return ("undefined" == typeof performance ? Date : performance).now()
    },
    getElapsedTime: function(e) {
        return this.getCurrentTime() - e
    },
    timer: Ut,
    isBoolean: function(e) {
        return "boolean" == typeof e
    },
    isDom: function(e) {
        return "object" === (void 0 === e ? "undefined" : t(e)) && "number" == typeof e.nodeType && "object" === t(e.ownerDocument)
    },
    isNull: function(e) {
        return null == e
    },
    isBlank: function(e) {
        if (!Utils.isNull(e) && Utils.isString(e))
            for (var t = 0; t < e.length; t++)
                if (" " != e[t] && "\t" != e[t])
                    return !1;
        return !0
    },
    isEmptyObj: function(e) {
        return "{}" == JSON.stringify(e)
    },
    isEmptyArray: function(e) {
        return jt("Array")(e) && 0 == e.length
    },
    toLowerCase: function(e) {
        return e ? e.toLowerCase() : ""
    },
    objectKeysToLowerCase: function(e, i, r) {
        var n, o, s, a, l, u, c, h;
        if (u = Utils.objectKeysToLowerCase,
        "undefined" === (c = void 0 === i ? "undefined" : t(i)) || null === i || 0 === i || !1 === i)
            i = 0;
        else if ("object" === c) {
            if (!(i instanceof u))
                throw new TypeError('Expected "deep" to be a special object')
        } else if (!0 === i)
            i = 1 / 0;
        else {
            if ("number" !== c)
                throw new TypeError('Expected "deep" to be a boolean, number or object, got "' + c + '"');
            if (isNaN(i) || i < 0)
                throw new RangeError('Expected "deep" to be a positive number, got ' + i)
        }
        if (null === e || "object" !== (void 0 === e ? "undefined" : t(e)))
            throw new TypeError('Expected "input" to be an object');
        if (c = void 0 === r ? "undefined" : t(r),
        null !== r && "undefined" !== c && "function" !== c)
            throw new TypeError('Expected "filter" to be a function');
        if (r = r || null,
        a = (s = Object.keys(e)).length - 1,
        l = {},
        i) {
            if ("number" == typeof i)
                i = Object.seal(Object.create(u.prototype, {
                    input: {
                        value: []
                    },
                    output: {
                        value: []
                    },
                    level: {
                        value: -1,
                        writable: !0
                    },
                    max: {
                        value: i,
                        writable: !1
                    }
                }));
            else if (~(n = i.input.indexOf(e)))
                return i.output[n];
            for (i.level += 1,
            i.input.push(e),
            i.output.push(l),
            n = a + 1; n--; ) {
                "object" === (void 0 === (h = e[o = s[a - n]]) ? "undefined" : t(h)) && h && i.level < i.max && h.constructor === Object && (h = u(h, i, r)),
                (r || function() {
                    return !0
                }
                )(o, h) ? l[o.toLowerCase()] = h : l[o] = h
            }
            i.level -= 1
        } else
            for (n = a + 1; n--; ) {
                (r || function() {
                    return !0
                }
                )(o = s[a - n], h) ? l[o.toLowerCase()] = e[o] : l[o] = e[o]
            }
        return l
    },
    getObject: function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        return e[t] = e[t] || i,
        e[t]
    },
    getMapObject: function(e, t) {
        return e[t] = e[t] || new Map,
        e[t]
    },
    getSetObject: function(e, t) {
        return e[t] = e[t] || new Set,
        e[t]
    },
    generateUUID: function(e) {
        return THING.Math.generateUUID(e)
    },
    backupValue: function(e, t) {
        var i = Pt(t);
        if (void 0 === e[i]) {
            var r = e[t];
            void 0 !== r && (e[i] = r)
        }
    },
    revertValue: function(e, t, i) {
        i = i || t;
        var r = Pt(t)
            , n = e[r];
        void 0 !== n && (e[i] = n),
        delete e[r]
    },
    getBackupValue: function(e, t) {
        return e[Pt(t)]
    },
    getValue: function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
            , r = Pt(t)
            , n = e[r];
        return i && delete e[r],
        n
    },
    setValue: function(e, t, i, r) {
        var n = e[Pt(t)];
        (r || void 0 === n) && (Utils.backupValue(e, t),
        e[t] = i)
    },
    cloneObject: function(e, t, i, r) {
        It = [],
        t = void 0 === t;
        var n = Nt[Lt(e)];
        return n ? n(e, t, i, r) : e
    },
    cloneArray: function(e) {
        return e && Utils.isArray(e) ? e.concat() : null
    },
    mergeObject: function(e, t, i) {
        if (!t)
            return Utils.cloneObject(e);
        if (!Utils.isObject(t) || !Utils.isObject(e))
            return i ? Utils.cloneObject(t) : e;
        for (var r in t)
            if (t.hasOwnProperty(r)) {
                var n = e[r]
                    , o = t[r];
                !Utils.isObject(o) || !Utils.isObject(n) || Utils.isArray(o) || Utils.isArray(n) || Utils.isDom(o) || Utils.isDom(n) ? !i && r in e || (e[r] = Utils.cloneObject(t[r], !0)) : Utils.mergeObject(n, o, i)
            }
        return e
    },
    isEqual: function(e, t) {
        for (var i in e) {
            if (!t.hasOwnProperty(i))
                return !1;
            if (e[i] != t[i])
                return !1
        }
        return !0
    },
    swapValue: function(e, t, i) {
        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : t
            , n = (e = e || i)[t];
        e[t] = i[r],
        i[r] = n
    },
    readObjectAttribute: function(e, t, i) {
        var r = e[t];
        return r || i(t),
        r
    },
    swapObjectAttribute: function(e, t, i) {
        var r = e[t];
        return e[t] = e[i],
        e[i] = r,
        e
    },
    checkObjectAttributes: function(e, t, i) {
        if (!e)
            return !1;
        for (var r = 0; r < t.length; r++) {
            var n = t[r];
            if (Utils.isNull(e[n]))
                return i && i(n),
                !1
        }
        return !0
    },
    checkObjectFunctions: function(e, t, i) {
        if (!e)
            return !1;
        for (var r = 0; r < t.length; r++) {
            var n = t[r];
            if (!Utils.isFunction(e[n]))
                return i && i(n),
                !1
        }
        return !0
    },
    parseValue: function(e, t) {
        return Utils.isNull(e) ? t : e
    },
    parseNumber3: function(e) {
        return Utils.isArray(e) && 3 === e.length ? e.concat() : null
    },
    parseVector2: function(e, t) {
        if (e) {
            if (e.isVector2)
                return e.clone();
            if (Utils.isArray(e)) {
                var i = e[0]
                    , r = e.length > 1 ? e[1] : 0;
                return new THREE.Vector2(i,r)
            }
            if (Utils.isString(e))
                THING.Utils.log("parseVector2 not impl");
            else if (arguments.length >= 2) {
                var n = arguments[0]
                    , o = arguments[1];
                return new THREE.Vector2(n,o)
            }
        }
        return t
    },
    parseNumber: function(e, t) {
        return Utils.isNull(e) || isNaN(e) ? t : e
    },
    parseVector3: function(e, t, i) {
        if (e) {
            if (e.isVector3)
                return i ? i.copy(e) : e.clone();
            if (Utils.isArray(e))
                return 1 === e.length ? i ? i.set(parseFloat(e[0]), 0, 0) : new THREE.Vector3(parseFloat(e[0]),0,0) : 2 === e.length ? i ? i.set(parseFloat(e[0]), 0, parseFloat(e[1])) : new THREE.Vector3(parseFloat(e[0]),0,parseFloat(e[1])) : i ? i.set(parseFloat(e[0]), parseFloat(e[1]), parseFloat(e[2])) : new THREE.Vector3(parseFloat(e[0]),parseFloat(e[1]),parseFloat(e[2]));
            if (Utils.isString(e)) {
                for (var r = e.split(/,| /), n = 0; n < r.length; n++) {
                    var o = r[n].trimBoth("\\[\\]");
                    o.isBlank() ? r.splice(n--, 1) : r[n] = Number(o)
                }
                return Utils.parseVector3(r, t)
            }
            if (arguments.length >= 3) {
                var s = arguments[0]
                    , a = arguments[1]
                    , l = arguments[2];
                return i ? i.set(s, a, l) : new THREE.Vector3(s,a,l)
            }
        }
        return t
    },
    parseVector4: function(e, t) {
        if (e) {
            if (e.isVector4)
                return e.clone();
            if (Utils.isArray(e))
                return 1 === e.length ? new THREE.Vector4(e[0],0,0,1) : 2 === e.length ? new THREE.Vector4(e[0],0,e[1],1) : 3 === e.length ? new THREE.Vector4(e[0],e[1],e[2],1) : new THREE.Vector4(e[0],e[1],e[2],e[3]);
            if (Utils.isString(e)) {
                for (var i = e.split(/,| /), r = 0; r < i.length; r++) {
                    var n = i[r].trimBoth("\\[\\]");
                    n.isBlank() ? i.splice(r--, 1) : i[r] = Number(n)
                }
                return Utils.parseVector4(i, t)
            }
        }
        return t
    },
    parseEuler: function(e) {
        if (e.isEuler)
            return e;
        if (Utils.isArray(e)) {
            (e.length < 3 || e.length > 4) && THING.Utils.log("parseEuler not impl");
            var t = THING.Math.degToRad(e[0] % 360)
                , i = THING.Math.degToRad(e[1] % 360)
                , r = THING.Math.degToRad(e[2] % 360);
            if (3 == e.length)
                return new THREE.Euler(t,i,r);
            if (4 == e.length)
                return new THREE.Euler(t,i,r,e[3])
        } else {
            if (e.isQuaternion) {
                var n = new THREE.Euler;
                return n.setFromQuaternion(e),
                n
            }
            THING.Utils.log("parseEuler not impl")
        }
    },
    parseQuaternion: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
        if (!e)
            return t;
        if (e.isQuaternion)
            return e;
        var i = this.parseEuler(e)
            , r = new THREE.Quaternion;
        return r.setFromEuler(i),
        r
    },
    parseAngles: function(e, t) {
        if (e instanceof THREE.Euler)
            return [THING.Math.radToDeg(e._x), THING.Math.radToDeg(e._y), THING.Math.radToDeg(e._z)];
        if (e instanceof THREE.Quaternion) {
            var i = new THREE.Euler;
            return Utils.parseAngles(i.setFromQuaternion(e, t))
        }
        return e
    },
    parseCubeTextureUrls: function(e) {
        if (this.isArray(e))
            return e;
        if (this.isString(e)) {
            var t = (e.startsWith(".") ? e : "skyboxes/" + e) + "/";
            return [t + "posx.jpg", t + "negx.jpg", t + "posy.jpg", t + "negy.jpg", t + "posz.jpg", t + "negz.jpg"]
        }
        if (e) {
            for (var i = ["posx", "negx", "posy", "negy", "posz", "negz"], r = ["up", "rt", "lf", "fr", "dn", "bk"], n = [i, r], o = function(e, t) {
                for (var i = 0; i < n.length; i++) {
                    var r = e[n[i][t]];
                    if (r)
                        return r
                }
                return null
            }, s = [], a = 0; a < 6; a++) {
                var l = o(e, a);
                if (!l)
                    return THING.Utils.error("set sky box failed, due to '" + i[a] + "' or '" + r[a] + "' key is missing"),
                    null;
                s.push(l)
            }
            return s
        }
        return null
    },
    parseCubeTextureUrls_v2: function(e) {
        if (this.isArray(e))
            return e;
        if (this.isString(e)) {
            var t = (e.startsWith(".") ? e : "skyboxes/" + e) + "/";
            return [t + "posx.jpg", t + "negx.jpg", t + "posy.jpg", t + "negy.jpg", t + "posz.jpg", t + "negz.jpg"]
        }
        if (e) {
            for (var i = ["posx", "negx", "posy", "negy", "posz", "negz"], r = ["lf", "rt", "up", "dn", "bk", "fr"], n = [i, r], o = function(e, t) {
                for (var i = 0; i < n.length; i++) {
                    var r = e[n[i][t]];
                    if (r)
                        return r
                }
                return null
            }, s = [], a = 0; a < 6; a++) {
                var l = o(e, a);
                if (!l)
                    return THING.Utils.error("set sky box failed, due to '" + i[a] + "' or '" + r[a] + "' key is missing"),
                    null;
                s.push(l)
            }
            return s
        }
        return null
    },
    parseColor: function(e, t) {
        if (!this.isNull(e)) {
            if (e.isColor)
                return e;
            if (Utils.isArray(e))
                return new THREE.Color(e[0],e[1],e[2]);
            if (Utils.isNumber(e))
                return (s = new THREE.Color).setHex(e),
                s;
            if (Utils.isString(e)) {
                if (Utils.isBlank(e))
                    return new THREE.Color(0,0,0);
                if ("#" == e[0])
                    return Utils.parseColor(parseInt(e.substr(1), 16));
                if (e.startsWith("rgb(")) {
                    var i = e.substring(4).split(",");
                    if (3 === i.length) {
                        var r = THING.Math.toInteger(i[0].trimBoth(" )"))
                            , n = THING.Math.toInteger(i[1].trimBoth(" )"))
                            , o = THING.Math.toInteger(i[2].trimBoth(" )"));
                        return new THREE.Color(r / 255,n / 255,o / 255)
                    }
                } else {
                    var s = new THREE.Color
                        , a = THREE.Color.NAMES[e.toLowerCase()];
                    if (void 0 !== a)
                        return s.setHex(a);
                    if (!isNaN(e))
                        return Utils.parseColor(THING.Math.toInteger(e))
                }
            }
        }
        return t ? Utils.parseColor(t) : t
    },
    parseLoopType: function(e) {
        return Utils.isNumber(e) ? e : Utils.isBoolean(e) ? e ? THREE.LoopRepeat : THREE.LoopOnce : "pingpong" == e ? THREE.LoopPingPong : "repeat" == e ? THREE.LoopRepeat : THREE.LoopOnce
    },
    parseWrapType: function(e) {
        return "repeat" == e ? THREE.RepeatWrapping : "clamptoedge" == e ? THREE.ClampToEdgeWrapping : "mirroredrepeat" == e ? THREE.MirroredRepeatWrapping : null
    },
    parseBlendingType: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
        return "no" == e ? THREE.NoBlending : "normal" == e ? THREE.NormalBlending : "add" == e ? THREE.AdditiveBlending : "subtract" == e ? THREE.SubtractiveBlending : "multiply" == e ? THREE.MultiplyBlending : t
    },
    parseSize: function(e) {
        var t = e.width || 1
            , i = e.height || 1
            , r = e.size;
        return r ? Utils.isNumber(r) && (r = [r, r]) : r = [t, i],
        r
    },
    parseLength: function(e) {
        if (Utils.isString(e)) {
            var t = e.search("px");
            return -1 != t && (e = e.substring(0, t)),
            THING.Math.toInteger(e)
        }
        return e
    },
    parseArrayArgument: function(e, t, i) {
        var r = t[i];
        return Utils.isNull(r) ? [] : Utils.isArray(r) ? r.length != e.length ? (THING.Utils.error(i + " array(" + r.length + ") not match to names(" + e.length + ")"),
        []) : r : []
    },
    parseEvent: function(e, t, i, r, n) {
        if (e) {
            if (Utils.isFunction(e) && Utils.isString(t) && Utils.isBoolean(i))
                return {
                    selector: null,
                    userData: null,
                    callback: e,
                    tag: t
                };
            if (Utils.isFunction(e) && Utils.isString(t) && Utils.isNull(i) && Utils.isNull(r))
                return {
                    selector: null,
                    userData: null,
                    callback: e,
                    tag: t
                };
            if (Utils.isFunction(e) && Utils.isString(t) && Utils.isNumber(i) && Utils.isNull(r))
                return {
                    selector: null,
                    userData: null,
                    callback: e,
                    tag: t,
                    priority: i
                };
            if (Utils.isFunction(e) && Utils.isNumber(t) && Utils.isNull(i) && Utils.isNull(r))
                return {
                    selector: null,
                    userData: null,
                    callback: e,
                    tag: null,
                    priority: t
                };
            if (Utils.isFunction(e) && Utils.isNull(t) && Utils.isNull(i) && Utils.isNull(r) && Utils.isNumber(n))
                return {
                    selector: null,
                    userData: null,
                    callback: e,
                    tag: null,
                    priority: n
                };
            if (Utils.isFunction(e) && Utils.isNull(t) && Utils.isNull(i) && Utils.isNull(r))
                return {
                    selector: null,
                    userData: null,
                    callback: e
                };
            if (Utils.isFunction(e) && Utils.isBoolean(t) && Utils.isNull(i) && Utils.isNull(r))
                return {
                    selector: null,
                    userData: null,
                    callback: e
                };
            if (Utils.isString(e) && Utils.isFunction(t) && Utils.isNull(i) && Utils.isNull(r))
                return {
                    selector: e,
                    userData: null,
                    callback: t
                };
            if (Utils.isString(e) && Utils.isNull(t) && Utils.isString(i) && Utils.isNull(r))
                return {
                    selector: e,
                    userData: null,
                    callback: null,
                    tag: i
                };
            if (Utils.isString(e) && Utils.isFunction(t) && Utils.isString(i) && Utils.isNull(r))
                return {
                    selector: e,
                    userData: null,
                    callback: t,
                    tag: i
                };
            if (Utils.isString(e) && Utils.isFunction(t) && Utils.isString(i) && Utils.isNumber(r) && Utils.isNull(n))
                return {
                    selector: e,
                    userData: null,
                    callback: t,
                    tag: i,
                    priority: r
                };
            if (Utils.isString(e) && Utils.isFunction(t) && Utils.isNumber(i) && Utils.isNull(r))
                return {
                    selector: e,
                    userData: null,
                    callback: t,
                    priority: i
                };
            if (Utils.isFunction(t) && Utils.isNull(i))
                return {
                    selector: null,
                    userData: e,
                    callback: t
                };
            if (Utils.isFunction(t) && Utils.isString(i) && Utils.isNull(r))
                return {
                    selector: null,
                    userData: e,
                    callback: t,
                    tag: i
                };
            if (Utils.isNull(t) && Utils.isNull(i) && Utils.isNull(r) && Utils.isNull(n))
                return {
                    selector: e,
                    userData: null,
                    callback: null,
                    tag: null
                }
        } else {
            if (Utils.isFunction(t) && Utils.isString(i))
                return {
                    selector: null,
                    userData: null,
                    callback: t,
                    tag: i
                };
            if (Utils.isFunction(t) && !Utils.isFunction(i))
                return {
                    selector: null,
                    userData: null,
                    callback: t
                };
            if (Utils.isNull(t) && Utils.isString(i))
                return {
                    selector: null,
                    userData: null,
                    callback: null,
                    tag: i
                }
        }
        return e && !Utils.isString(e) && THING.Utils.error("Event: selector is invalid"),
        i && !Utils.isFunction(i) && THING.Utils.error("Event: callback is invalid"),
        r && !Utils.isString(r) && THING.Utils.error("Event: tag is invalid"),
        Utils.isNull(n) && (n = 50),
        {
            selector: e,
            userData: t,
            callback: i,
            tag: r,
            priority: n
        }
    },
    parseFunction: function(e) {
        return Utils.isFunction(e) ? e : null
    },
    callFunction: function(e, t, i) {
        return e.call(t, i)
    },
    getArrayArgumentValue: function(e, t, i, r) {
        i.length && (e[t] = i[r])
    },
    toMatrixElementsArray: function(e) {
        return {
            _00: e.elements[0],
            _01: e.elements[1],
            _02: e.elements[2],
            _03: e.elements[3],
            _10: e.elements[4],
            _11: e.elements[5],
            _12: e.elements[6],
            _13: e.elements[7],
            _20: e.elements[8],
            _21: e.elements[9],
            _22: e.elements[10],
            _23: e.elements[11],
            _30: e.elements[12],
            _31: e.elements[13],
            _32: e.elements[14],
            _33: e.elements[15]
        }
    },
    elementsArrayToMatrix: function(e, t) {
        e.elements[0] = t._00,
        e.elements[1] = t._01,
        e.elements[2] = t._02,
        e.elements[3] = t._03,
        e.elements[4] = t._10,
        e.elements[5] = t._11,
        e.elements[6] = t._12,
        e.elements[7] = t._13,
        e.elements[8] = t._20,
        e.elements[9] = t._21,
        e.elements[10] = t._22,
        e.elements[11] = t._23,
        e.elements[12] = t._30,
        e.elements[13] = t._31,
        e.elements[14] = t._32,
        e.elements[15] = t._33
    },
    isNumberEqual: function(e, t) {
        return Math.abs(e - t) < 1e-5
    },
    isNumberString: function(e) {
        return !!/^(\+|-)?\d+($|\.\d+$)/.test(e)
    },
    formatMoney: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        return e.toFixed(t).replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    },
    formatByteSize: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2
            , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "B";
        return e > 1e12 ? Utils.formatMoney(e / 1e12, t) + " T" + i : e > 1e9 ? Utils.formatMoney(e / 1e9, t) + " G" + i : e > 1e6 ? Utils.formatMoney(e / 1e6, t) + " M" + i : e > 1e3 ? Utils.formatMoney(e / 1e3, t) + " K" + i : e
    },
    getLength: function(e) {
        if (!Utils.isArray(e))
            return 0;
        for (var t = 0, i = 0; i < e.length - 1; i++) {
            var r = Utils.parseVector3(e[i])
                , n = Utils.parseVector3(e[i + 1]);
            t += r.distanceTo(n)
        }
        return t
    },
    getArrayIndexFromProgress: function(e, t, i) {
        if (!e.length)
            return -1;
        if (t >= 1)
            return e.length - 1;
        if (!i) {
            s = 1 / e.length;
            var r = Math.floor(t / s);
            return Math.min(r, e.length - 1)
        }
        for (var n = 0, o = 0; o < i.length; o++) {
            var s;
            if (n + (s = i[o]) >= t)
                return o;
            n += s
        }
    },
    getArrayProgress: function(e, t, i) {
        if (!e.length)
            return 0;
        if (t >= 1)
            return 1;
        if (!i) {
            o = 1 / e.length;
            return THING.Math.fract(t / o)
        }
        for (var r = 0, n = 0; n < i.length; n++) {
            var o, s = r + (o = i[n]) - t;
            if (s >= 0)
                return 1 - s / o;
            r += o
        }
    },
    getConsumeTime: function(e, t, i, r, n, o) {
        if (n) {
            var s = Utils.parseVector3([t.x, t.y, t.z])
                , a = Utils.parseVector3([i.x, i.y, i.z]);
            return s.distanceTo(a) / n * 1e3
        }
        return void 0 !== r ? e ? r / e.length : r : o
    },
    getConsumeTimeByDistance: function(e, t, i, r, n) {
        return r ? t / r * 1e3 : void 0 !== i ? e ? i / e.length : i : n
    },
    hasAttribute: function(e, t) {
        return void 0 !== Utils.getAttribute(e, t)
    },
    getAttribute: function(e, t) {
        if (e && t) {
            for (var i = t.split("/"), r = 0; r < i.length; r++) {
                if (!e)
                    return;
                var n = e[i[r]];
                if (void 0 === n)
                    return;
                e = n
            }
            return e
        }
    },
    setAttribute: function(e, t, i) {
        if (!e || !t)
            return null;
        for (var r = t.split("/"), n = 0; n < r.length; n++) {
            t = r[n];
            if (n == r.length - 1) {
                e[t] = i;
                break
            }
            e[t] = e[t] || {},
            e = e[t]
        }
        return i
    },
    setArrayValue: function(e, t, i) {
        for (var r = 0; r < e.length; r++) {
            var n = e[r];
            n && (n[t] = i)
        }
    },
    add: function(e, t) {
        Utils.isArray(e) ? -1 === e.indexOf(t) && e.push(t) : e.add(t);
        return t
    },
    remove: function(e, t) {
        if (Utils.isArray(e)) {
            var i = e.indexOf(t);
            -1 !== i && e.splice(i, 1)
        } else
            e.delete(t)
    },
    loadJSONFile: function(e, t, i, r) {
        if (!(vt = vt || new THREE.FileLoader))
            return Utils.error("Load JSON file failed, due to create 'FileLoader' object failed"),
            !1;
        return vt.load(e, (function(e) {
            var i = null;
            try {
                i = JSON.parse(e)
            } catch (t) {
                i = e
            }
            t(i)
        }
        ), i, r)
    },
    dynamicLoad: function(e, t, i, r, n) {
        function o(e) {
            return i ? -1 == e.lastIndexOf("?") ? e + "?time=" + (new Date).getTime() : e + "&time=" + (new Date).getTime() : e
        }
        function s(e, t) {
            var i = null;
            window.XMLHttpRequest && (i = new XMLHttpRequest),
            null != i ? (i.onreadystatechange = function() {
                4 == i.readyState && (200 == i.status ? (t(i.responseText),
                i = null) : (THING.Utils.log("Problem retrieving XML data:" + i.statusText),
                i = null))
            }
            ,
            i.open(yt, e, !0),
            i.send(null)) : THING.Utils.error("Your browser does not support XMLHTTP.")
        }
        null == i && (i = !0),
        null == r && (r = !0),
        "string" == typeof e && (e = [e]);
        var a = e.length
            , l = 0
            , u = {};
        function c() {
            (l += 1) >= a && null != t && t(u)
        }
        function h(e, i) {
            var r = ""
                , a = e.lastIndexOf(".");
            "css" == (r = e.substr(a + 1)) ? r = "css" : "js" == r && (r = "js"),
            "js" == r ? function(e, t) {
                var i, r, a = document.getElementsByTagName("script");
                for (i = 0,
                r = a.length; i < r; i++) {
                    var l = a[i];
                    if (l) {
                        var u = l.getAttribute("src");
                        u && (u != e && -1 == u.indexOf(e) || l.parentNode.removeChild(l))
                    }
                }
                function c(e) {
                    var i = document.createElement("script");
                    i.type = "text/javascript",
                    i.src = e,
                    i.onload = function() {
                        t && t()
                    }
                    ,
                    i.onreadystatechange = function() {
                        "loaded" != this.readyState && "complete" != this.readyState || t && t()
                    }
                    ,
                    document.getElementsByTagName("head")[0].appendChild(i)
                }
                var h = o(e);
                1 == n ? s(h, (function(t) {
                    window.getPath = function(t) {
                        var i = e
                            , r = t.split("/")
                            , n = i.split("/");
                        n.pop();
                        for (var o = 0; o < r.length; o++) {
                            var s = r[o];
                            if ("" == s && 0 == o)
                                return t;
                            ".." == s ? n.pop() : "." != s && n.push(s)
                        }
                        return n.join("/")
                    }
                    ;
                    var i = new Blob([t],{
                        type: "text/plain;charset=utf-8"
                    });
                    c(URL.createObjectURL(i))
                }
                )) : c(h)
            }(e, i) : "css" == r ? function(e, i) {
                var r, n, s = document.getElementsByTagName("link");
                for (r = 0,
                n = s.length; r < n; r++) {
                    var a = s[r];
                    if (a) {
                        var l = a.getAttribute("href");
                        l && (l != e && -1 == l.indexOf(e) || a.parentNode.removeChild(a))
                    }
                }
                var u = o(e)
                    , c = document.getElementsByTagName("head")[0]
                    , h = document.createElement("link");
                h.type = "text/css",
                h.rel = "stylesheet",
                h.href = u,
                c.appendChild(h),
                h.onreadystatechange = function() {
                    "complete" == css.readyState && null != i && i()
                }
                ,
                h.onload = function() {
                    null != t && i()
                }
            }(e, i) : function(e, t) {
                s(o(e), (function(i) {
                    if (null != t) {
                        var r = null;
                        try {
                            r = JSON.parse(i)
                        } catch (e) {
                            r = i
                        }
                        u[e] = r,
                        t()
                    }
                }
                ))
            }(e, i)
        }
        if (r)
            a > 0 && h(e.shift(), (function i() {
                e.length > 0 ? h(e.shift(), i) : null != t && t(u)
            }
            ));
        else
            for (var p = 0; p < a; p++) {
                h(e[p], c)
            }
    },
    dynamicLoadJSON: function(e, t) {
        this.dynamicLoad(e, t)
    },
    dynamicLoadJS: function(e, t) {
        this.dynamicLoad(e, t)
    },
    dynamicLoadCSS: function(e, t) {
        this.dynamicLoad(e, t)
    },
    asyncLoad: function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
            , t = arguments[1]
            , i = e.urls || []
            , r = Utils.parseValue(e.cache, !0)
            , n = Utils.parseValue(e.inOrder, !0);
        this.dynamicLoad(i, t, !r, n)
    },
    convertObjectClass: function(e, t) {
        if (!e)
            return null;
        if (!t)
            return null;
        var i = e.app
            , r = e.parent
            , n = i.create({
            type: t,
            parent: null
        })
            , o = n._beforeConvert;
        o && o.call(n),
        e.trigger("classtypechange", {
            newObject: n
        });
        var s = function(e, t, i) {
            e[i] ? Utils.swapValue(e, i, t) : e[i] = t[i]
        };
        Object.keys(e).forEach((function(t) {
            "_type" != t && s(n, e, t)
        }
        )),
        Object.keys(n.style).forEach((function(t) {
            s(n.style, e.style, t)
        }
        )),
        n.style.obj = n,
        e._style = null,
        e._defaultStyle = null,
        e._url = null,
        e._builder = null,
        e._uuid = null;
        for (var a = n.controls, l = 0; l < a.length; l++) {
            var u = a[l].control;
            void 0 === u.object && (THING.Utils.error("please implement object accessor in control"),
            THING.Utils.error(u)),
            u.object = n
        }
        if (r) {
            var c = r._children;
            for (l = 0; l < c.length; l++)
                if (c[l] == e) {
                    c[l] = n;
                    break
                }
            r._children.clearResult()
        }
        n._parent = r,
        n.children.forEach((function(e) {
            e._parent = n
        }
        )),
        n._eventTrigger.traverseListener((function(e) {
            e.object = n
        }
        )),
        i.events.replaceObjectEvent(n, e),
        i.objectManager.replaceObject(n, e),
        e.destroy();
        var h = n._afterConvert;
        return h && h.call(n),
        n
    },
    addCastType: function(e, t, i) {
        Utils.castTypes = Utils.castTypes || [],
        Utils.castTypes.push({
            type: e,
            condition: t,
            params: i
        }),
        Utils.evalTypes && delete Utils.evalTypes[e],
        THING.factory.registerClass(e, Utils.evaluate(e))
    },
    removeCastType: function(e, t, i) {
        Utils.castTypes = Utils.castTypes || [];
        for (var r = 0; r < Utils.castTypes.length; r++) {
            var n = Utils.castTypes[r];
            n.type == e && (n.condition == t && (i && n.params != i || Utils.castTypes.splice(r--, 1)))
        }
    },
    getCastTypes: function() {
        return Utils.castTypes = Utils.castTypes || [],
        Utils.castTypes
    },
    runAsync: function(e) {
        return new Promise((function(e) {
            return setTimeout(e, 10)
        }
        )).then((function() {
            e()
        }
        ))
    },
    r: function(e, t) {
        return Math.floor(Math.random() * (t - e + 1) + e)
    },
    evaluate: function(e) {
        if (Utils.evalTypes = Utils.evalTypes || {},
        void 0 !== Utils.evalTypes[e])
            return Utils.evalTypes[e];
        try {
            var t = wt(e) || wt("THING." + e);
            return Utils.evalTypes[e] = t,
            t
        } catch (t) {
            return Utils.evalTypes[e] = null,
            null
        }
    },
    instanceOf: function(e, t) {
        if (e.isBaseObject && Utils.isString(t))
            return !!e["is" + t];
        var i = Utils.evaluate(t);
        if (!i)
            return !1;
        try {
            return e instanceof i
        } catch (e) {
            return !1
        }
    },
    isSupportWebGL: function() {
        return Utils.system.isSupportWebGL()
    },
    callFuncByArguments: function(e, t, i) {
        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
            , n = r
            , o = e[t];
        if (Utils.isFunction(o))
            switch (i.length) {
            case 0:
                return o.call(e);
            case 1:
                return o.call(e, i[n + 0]);
            case 2:
                return o.call(e, i[n + 0], i[n + 1]);
            case 3:
                return o.call(e, i[n + 0], i[n + 1], i[n + 2]);
            case 4:
                return o.call(e, i[n + 0], i[n + 1], i[n + 2], i[n + 3]);
            case 5:
                return o.call(e, i[n + 0], i[n + 1], i[n + 2], i[n + 3], i[n + 4]);
            case 6:
                return o.call(e, i[n + 0], i[n + 1], i[n + 2], i[n + 3], i[n + 4], i[n + 5]);
            case 7:
                return o.call(e, i[n + 0], i[n + 1], i[n + 2], i[n + 3], i[n + 4], i[n + 5], i[n + 6]);
            case 8:
                return o.call(e, i[n + 0], i[n + 1], i[n + 2], i[n + 3], i[n + 4], i[n + 5], i[n + 6], i[n + 7])
            }
    },
    _getMD5Code: function(e, t) {
        (new THREE.FileLoader).load(e, (function(e) {
            if (e && t) {
                var i = SparkMD5.hash(e);
                t({
                    md5: i
                })
            }
        }
        ), (function() {}
        ), (function() {}
        ))
    },
    _getStringMD5Code: function(e) {
        return SparkMD5.hash(e)
    },
    _base64ToBlob: function(e) {
        for (var t = atob(e), i = t.length, r = new Uint8Array(i); i--; )
            r[i] = t.charCodeAt(i);
        return r
    },
    _blobToBase64: function(e) {
        for (var t = "", i = 0, r = e.length; i < r; ++i)
            t += String.fromCharCode(e[i]);
        return btoa(t)
    },
    Utf8ArrayToStr: function(e) {
        var t, i, r, n, o, s;
        for (t = "",
        r = e.length,
        i = 0; i < r; )
            switch ((n = e[i++]) >> 4) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                t += String.fromCharCode(n);
                break;
            case 12:
            case 13:
                o = e[i++],
                t += String.fromCharCode((31 & n) << 6 | 63 & o);
                break;
            case 14:
                o = e[i++],
                s = e[i++],
                t += String.fromCharCode((15 & n) << 12 | (63 & o) << 6 | (63 & s) << 0)
            }
        return t
    },
    throttling: function(e, t) {
        var i = void 0
            , r = void 0
            , n = void 0
            , o = function() {
            i = setTimeout((function() {
                e.apply(r, n),
                clearTimeout(i),
                i = null
            }
            ), t)
        };
        return function() {
            r = this,
            n = arguments,
            i || o()
        }
    },
    getLabelPosition: function(e, t) {
        if (!e || !e.length)
            return null;
        var i = [];
        if (i.push(e),
        t && 0 != t.length)
            for (var r = 0; r < t.length; r++) {
                var n = [t[r][0], t[r][1], t[r][2], t[r][3]];
                i.push(n)
            }
        var o = new polylabel(i);
        return [o[0], o[1]]
    },
    setValueBreakpoint: function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function(e, t) {
            return e != t
        }
        ;
        Utils.isArray(t) ? t.forEach((function(t) {
            Tt(e, [t], i)
        }
        )) : Utils.isString(t) && Tt(e, [t], i)
    },
    enableNaNCatch: function(e) {
        e && !Object.prototype.originalValueOf ? (Object.prototype.originalValueOf = Object.prototype.valueOf,
        Object.prototype.valueOf = function() {
            if ("number" != typeof this)
                throw new Error("Object is not a Number");
            return this.originalValueOf()
        }
        ) : (Object.prototype.valueOf = Object.prototype.originalValueOf,
        Object.prototype.originalValueOf = null)
    },
    loadImage: function(e, t, i) {
        var r = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
        function n() {
            r.removeEventListener("load", n, !1),
            r.removeEventListener("error", o, !1),
            t && t(this)
        }
        function o(e) {
            r.removeEventListener("load", n, !1),
            r.removeEventListener("error", o, !1),
            i && i(e)
        }
        return r.addEventListener("load", n, !1),
        r.addEventListener("error", o, !1),
        r.src = e,
        r
    },
    getBase64Image: function(e) {
        var t = document.createElement("canvas");
        return t.width = e.width,
        t.height = e.height,
        t.getContext("2d").drawImage(e, 0, 0),
        t.toDataURL("image/png")
    },
    getMousePosition: function(e, t, i) {
        var r, n;
        if (e) {
            var o = e.currentStyle || window.getComputedStyle(e, null)
                , s = i ? i[0] : parseInt(o.borderLeftWidth, 10)
                , a = i ? i[1] : parseInt(o.borderTopWidth, 10)
                , l = e.getBoundingClientRect();
            r = t.clientX - s - l.left,
            n = t.clientY - a - l.top
        } else
            t.layerX || 0 == t.layerX ? (r = t.layerX,
            n = t.layerY) : t.offsetX || 0 == t.offsetX ? (r = t.offsetX,
            n = t.offsetY) : (t.clientX || 0 == t.clientX) && (r = t.clientX,
            n = t.clientY);
        return {
            x: Math.round(r),
            y: Math.round(n)
        }
    },
    applyNew: function(e, t) {
        var i = [{}].concat(t || []);
        return new (Function.prototype.bind.apply(e, i))
    },
    binarySearch: function(e, t, i) {
        var r = 0
            , n = e.length - 1;
        if (i)
            for (; r <= n; ) {
                if (0 === i(e[o = Math.floor((r + n) / 2)], t))
                    return o;
                i(e[o], t) > 0 ? n = o - 1 : r = o + 1
            }
        else
            for (; r <= n; ) {
                var o;
                if (t === e[o = Math.floor((r + n) / 2)])
                    return o;
                t < e[o] ? n = o - 1 : r = o + 1
            }
        return -1
    },
    binaryBound: function(e, t, i) {
        if (!e.length)
            return 0;
        var r = 0
            , n = e.length - 1;
        if (i) {
            for (; r < n - 1; ) {
                var o = i(e[s = Math.floor((r + n) / 2)], t);
                if (0 == o)
                    return s;
                o < 0 ? r = s : n = s
            }
            if (i(e[r], t) > 0)
                return r;
            if (i(e[n], t) > 0)
                return n
        } else {
            for (; r < n - 1; ) {
                var s;
                if (e[s = Math.floor((r + n) / 2)] === t)
                    return s;
                e[s] < t ? r = s : n = s
            }
            if (e[r] > t)
                return r;
            if (e[n] > t)
                return n
        }
        return -1
    },
    insertBinaryBound: function(e, t, i) {
        var r = Utils.binaryBound(e, t, i);
        return -1 === r ? e.push(t) : e.splice(r, 0, t),
        e
    },
    itoa: function(e) {
        return String.fromCharCode(e)
    },
    atoi: function(e) {
        return e.charCodeAt()
    },
    debugBreak: function() {
        wt("debugger")
    },
    debug: function() {
        mt & LogLevelType.Debug && console.debug.apply(console, arguments)
    },
    log: function() {
        mt & LogLevelType.Log && console.log.apply(console, arguments)
    },
    warn: function() {
        mt & LogLevelType.Warning && console.warn.apply(console, arguments)
    },
    error: function() {
        mt & LogLevelType.Error && console.error.apply(console, arguments)
    },
    scanf: function(e, t) {
        return $e(e, t)
    },
    beginRenderAnalyze: function(e) {
        return (gt = gt || new dt).beginAnalyze(e || ThingApp.current.root.node)
    },
    endRenderAnalyze: function() {
        return (gt = gt || new dt).endAnalyze()
    },
    getRenderAnalyzeResult: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = ThingApp.current
            , r = i.objectManager;
        gt = gt || new dt;
        var n = {
            onGetObjectByNode: function(e) {
                return r.getBaseObject(e)
            },
            onCloneObjet: function(e) {
                return Utils.cloneObject(e)
            },
            onCheckIsArray: function(e) {
                return Utils.isArray(e)
            }
        };
        for (var o in t)
            Object.hasOwnProperty.call(t, o) && (n[o] = t[o]);
        return gt.getAnalyzeResult(e, n)
    },
    notifyAppComplete: function(e) {
        e && zt && ThingApp.current && zt(ThingApp.current)
    },
    waitAppComplete: function() {
        return Vt
    },
    loadJSONFileAsync: function(e) {
        return new Promise((function(t, i) {
            var r = new XMLHttpRequest;
            r.open(yt, e),
            r.responseType = "json",
            r.send(),
            r.onload = function() {
                t(r.response)
            }
        }
        ))
    },
    login: function() {
        var e, t = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = r.url, o = r.wasmRootPath, s = u(r.method, yt), a = u(r.requestHeaders, ""), l = u(r.postFields, "");
        return new Promise((e = i(g.mark((function e(i, r) {
            var u, p, d;
            return g.wrap((function(e) {
                for (; ; )
                    switch (e.prev = e.next) {
                    case 0:
                        return e.next = 2,
                        h(o);
                    case 2:
                        if (u = e.sent) {
                            e.next = 8;
                            break
                        }
                        console.error("It looks like you didn't import the wasm plugin!"),
                        r(),
                        e.next = 14;
                        break;
                    case 8:
                        return p = u.Helper,
                        (d = p.getPlatformInfo()) && (xt.WASM = {
                            VERSION: d.version,
                            COMPILETIME: d.compileTime
                        },
                        "undefined" != typeof THING && (THING.WASM = THING.WASM || {},
                        THING.WASM.VERSION = d.version,
                        THING.WASM.COMPILETIME = d.compileTime)),
                        e.next = 13,
                        c(s, n, a, l);
                    case 13:
                        i();
                    case 14:
                    case "end":
                        return e.stop()
                    }
            }
            ), e, t)
        }
        ))),
        function(t, i) {
            return e.apply(this, arguments)
        }
        ));
        function u(e, t) {
            return null == e ? t : e
        }
        function c(e, t, i, r) {
            return wasmLoader.resourceDownloader.login(e, t, i, r)
        }
        function h(e) {
            return window.wasmLoader ? wasmLoader.loadingPromise : !!THING.WASM && (THING.WASM.LOADER ? (window.wasmLoader = new THING.WASM.LOADER.WasmLoader,
            wasmLoader.init({
                wasmRootPath: e
            })) : void 0)
        }
    },
    loadPackageAsync: function(e) {
        return new ft({
            url: e
        })._loadingPromise
    },
    loadPackage: function(e) {
        new ft({
            url: e
        })
    }
};
function MeshNavigation(e, t, i, r) {
    this._delaunayTriangles = null,
    this._rebuiltTriangles = null,
    this._points = [],
    this._indices = [],
    this._graph = null,
    this._extraIds = [],
    this._init(e, t, i || 40, r)
}
function qt(e, t) {
    for (var i = [], r = 0, n = e.length; r < n; r++) {
        var o = e[r];
        if (void 0 !== t && 0 !== i.length) {
            for (var s = i[i.length - 1], a = new poly2tri.Point(o.x,o.y), l = Math.ceil(a.clone().sub(s).length() / t), u = a.clone().sub(s).length() / l, c = a.clone().sub(s), h = 1; h < l; h++)
                c.normalize(),
                i.push(s.clone().add(c.mul(u * h)));
            i.push(a.clone())
        } else
            i.push(new poly2tri.Point(o.x,o.y))
    }
    if (void 0 !== t)
        for (s = i[i.length - 1],
        a = i[0],
        l = Math.ceil(a.clone().sub(s).length() / t),
        u = a.clone().sub(s).length() / l,
        c = a.clone().sub(s),
        h = 1; h < l; h++)
            c.normalize(),
            i.push(s.clone().add(c.mul(u * h)));
    return i
}
function Xt(e, t) {
    for (var i = 1 / 0, r = 0, n = 0, o = t.length; n < o; n++) {
        var s = e.distanceTo(t[n]);
        s < i && (i = s,
        r = n)
    }
    return r
}
Object.defineProperties(Utils, {
    logLevelType: {
        get: function() {
            return mt
        },
        set: function(e) {
            mt = e
        }
    },
    disableLog: {
        get: function() {
            return console.log != Utils.consoleLogFunc
        },
        set: function(e) {
            console.log = e ? function() {}
            : Utils.consoleLogFunc
        }
    },
    disableWarning: {
        get: function() {
            return console.warn != Utils.consoleWarnFunc
        },
        set: function(e) {
            console.warn = e ? function() {}
            : Utils.consoleWarnFunc
        }
    },
    disableTime: {
        get: function() {
            return console.time != Utils.consoleTimeFunc
        },
        set: function(e) {
            e ? (console.time = function() {}
            ,
            console.timeEnd = function() {}
            ) : (console.time = Utils.consoleTimeFunc,
            console.timeEnd = Utils.consoleTimeEndFunc)
        }
    }
}),
Object.assign(MeshNavigation.prototype, {
    _init: function(e, t, i, r) {
        var n, o;
        if (e.contour)
            (n = {}).contour = qt(e.contour, i),
            n.holes = e.holes.map((function(e) {
                return qt(e, i)
            }
            )),
            o = e.y;
        else {
            var s = new THREE.Geometry;
            s.fromBufferGeometry(e),
            s.mergeVertices(),
            n = function(e, t) {
                for (var i = {}, r = 0, n = e.faces, o = n.length; r < o; r++)
                    for (var s = [n[r].a, n[r].b, n[r].c].sort((function(e, t) {
                        return e - t
                    }
                    )), a = [[0, 1], [1, 2], [0, 2]], l = 0; l < a.length; l++) {
                        var u = s[a[l][0]]
                            , c = s[a[l][1]];
                        i[u + "_" + c] ? i[u + "_" + c].count++ : i[u + "_" + c] = {
                            start: u,
                            end: c,
                            count: 1
                        }
                    }
                var h = [];
                for (var p in i)
                    1 === i[p].count && h.push(i[p]);
                var d = [];
                for (; h.length > 0; ) {
                    var f, m = [], g = h[0].start, v = h[0].end;
                    for (f = e.vertices[h[0].end],
                    m.push({
                        x: f.x,
                        y: f.z
                    }),
                    h.splice(0, 1); v !== g; )
                        for (r = 0,
                        o = h.length; r < o; r++) {
                            if (h[r].start == v) {
                                f = e.vertices[h[r].end],
                                m.push({
                                    x: f.x,
                                    y: f.z
                                }),
                                v = h[r].end,
                                h.splice(r, 1);
                                break
                            }
                            if (h[r].end == v) {
                                f = e.vertices[h[r].start],
                                m.push({
                                    x: f.x,
                                    y: f.z
                                }),
                                v = h[r].start,
                                h.splice(r, 1);
                                break
                            }
                        }
                    d.push(m)
                }
                function y(e) {
                    for (var t = 1 / 0, i = 1 / 0, r = 0; r < e.length; r++)
                        e[r].x < t && (t = e[r].x),
                        e[r].y < i && (i = e[r].y);
                    return {
                        x: t,
                        y: i
                    }
                }
                var b = 1 / 0
                    , _ = 1 / 0
                    , x = 0
                    , E = [];
                for (r = 0,
                o = d.length; r < o; r++) {
                    var w = qt(d[r], t);
                    E.push(w);
                    var T = y(w);
                    (T.x < b || T.y < _) && (b = T.x,
                    _ = T.y,
                    x = r)
                }
                var M = E[x];
                return E.splice(x, 1),
                {
                    contour: M,
                    holes: E
                }
            }(s, i),
            o = s.vertices[0].y
        }
        var a = new poly2tri.SweepContext(n.contour);
        if (a.addHoles(n.holes),
        a.triangulate(),
        this._delaunayTriangles = a.getTriangles(),
        this._rebuiltTriangles = function(e, t) {
            for (var i = [], r = 0; r < e.length; r++) {
                var n = e[r].getPoints()
                    , o = new THREE.Triangle;
                o.a.set(n[0].x, t, n[0].y),
                o.b.set(n[1].x, t, n[1].y),
                o.c.set(n[2].x, t, n[2].y),
                i.push(o)
            }
            return i
        }(this._delaunayTriangles, o),
        function(e, t, i, r) {
            var n = 0;
            e.forEach((function(e) {
                for (var t = 0; t < e.points_.length; t++)
                    void 0 === e.points_[t]._id && (e.points_[t]._id = n++)
            }
            ));
            var o = [[1, 2], [0, 2], [0, 1]]
                , s = {}
                , a = 0;
            e.forEach((function(e) {
                for (var n = [], l = 0; l < 3; l++) {
                    if (!e.constrained_edge[l]) {
                        var u = e.getPoint(o[l][0])
                            , c = e.getPoint(o[l][1]);
                        if (!s[u._id + "_" + c._id]) {
                            var h = new THREE.Vector3((u.x + c.x) / 2,r,(u.y + c.y) / 2);
                            h._index = a++;
                            var p = (new THREE.Vector3).set(u.x, r, u.y);
                            p._id = u._id;
                            var d = (new THREE.Vector3).set(c.x, r, c.y);
                            d._id = c._id,
                            h._endPoints = [p, d],
                            t.push(h),
                            s[u._id + "_" + c._id] = h,
                            s[c._id + "_" + u._id] = h
                        }
                        n.push(s[u._id + "_" + c._id])
                    }
                }
                2 === n.length && i.push(n[0]._index, n[1]._index),
                3 === n.length && (i.push(n[0]._index, n[1]._index),
                i.push(n[1]._index, n[2]._index),
                i.push(n[2]._index, n[0]._index)),
                e._sharedMidPoints = n
            }
            ))
        }(this._delaunayTriangles, this._points, this._indices, o),
        t && t.length > 0)
            for (var l = this._points.slice(0), u = 0; u < t.length; u++) {
                var c = t[u]
                    , h = this._points.length
                    , p = Xt(c, l);
                this._points.push(c.clone()),
                this._indices.push(h, p),
                this._extraIds.push(h)
            }
        this._graph = function(e, t, i) {
            var r = {};
            i && i.forEach((function(e) {
                e.box = (new THREE.Box3).setFromPoints(e)
            }
            ));
            for (var n = 0, o = t.length; n < o; n += 2) {
                var s = t[n + 0]
                    , a = t[n + 1]
                    , l = e[s]
                    , u = e[a];
                r[s] = r[s] || {},
                r[a] = r[a] || {},
                i && i.find((function(e) {
                    return $t(l, u, e)
                }
                )) ? r[s][a] = r[a][s] = 1 / 0 : r[s][a] = r[a][s] = l.distanceTo(u)
            }
            return new Graph(r)
        }(this._points, this._indices, r)
    },
    findPath: function(e, t, i) {
        var r = void 0 !== (i = i || {}).includeStart && i.includeStart
            , n = void 0 !== i.includeEnd && i.includeEnd
            , o = void 0 === i.fixEnds || i.fixEnds
            , s = void 0 !== i.pathSmooth ? i.pathSmooth : {
            enable: !1,
            minFov: .115
        }
            , a = this
            , l = [];
        if (!(c = this._extraIds.find((function(t) {
            return a._points[t].equals(e)
        }
        )))) {
            var u = this._rebuiltTriangles.findIndex((function(t) {
                return t.containsPoint(e)
            }
            ));
            if (u > -1)
                l = this._delaunayTriangles[u]._sharedMidPoints.map((function(e) {
                    return e._index
                }
                ));
            else
                l = [Xt(e, this._points)];
            var c = this._points.length;
            this._points.push(e),
            this._graph.map[c] = {},
            l.forEach((function(t) {
                a._graph.map[t][c] = a._graph.map[c][t] = e.distanceTo(a._points[t])
            }
            ))
        }
        var h = this._extraIds.find((function(e) {
            return a._points[e].equals(t)
        }
        ))
            , p = [];
        if (!h) {
            var d = this._rebuiltTriangles.findIndex((function(e) {
                return e.containsPoint(t)
            }
            ));
            if (d > -1)
                p = this._delaunayTriangles[d]._sharedMidPoints.map((function(e) {
                    return e._index
                }
                ));
            else
                p = [Xt(t, this._points)];
            h = this._points.length,
            this._points.push(t),
            this._graph.map[h] = {},
            p.forEach((function(e) {
                a._graph.map[e][h] = a._graph.map[h][e] = t.distanceTo(a._points[e])
            }
            ))
        }
        var f = this._graph.findShortestPath(c, h).map((function(e) {
            return a._points[+e]
        }
        ));
        if (!r && f.shift(),
        !n && f.pop(),
        l.length > 0 && (l.forEach((function(e) {
            delete a._graph.map[e][c],
            delete a._graph.map[c][e]
        }
        )),
        this._points.length = this._points.length - 1),
        p.length > 0 && (p.forEach((function(e) {
            delete a._graph.map[e][h],
            delete a._graph.map[h][e]
        }
        )),
        this._points.length = this._points.length - 1),
        r && o && f.length >= 3 && Qt(f[0], f[1], f[2]) < .25 * Math.PI && f.splice(1, 1),
        n && o && f.length >= 3) {
            var m = f.length - 1
                , g = f.length - 2
                , v = f.length - 3;
            Qt(f[m], f[g], f[v]) < .25 * Math.PI && f.splice(g, 1)
        }
        return s && s.enable && (f = function(e, t) {
            t = void 0 !== t ? t : .115;
            var i = []
                , r = []
                , n = -1
                , o = -1
                , s = !1;
            e.forEach((function(e, t) {
                if (0 !== t) {
                    if (s)
                        return i.push(null),
                        void r.push(null);
                    var a = e._endPoints;
                    if (!a)
                        return i.push(null),
                        r.push(null),
                        void (s = !0);
                    0 === i.length ? (i.push(a[0]),
                    r.push(a[1]),
                    n = a[0]._id,
                    o = a[1]._id) : a[0]._id === n ? (i.push(null),
                    r.push(a[1]),
                    o = a[1]._id) : a[0]._id === o ? (r.push(null),
                    i.push(a[1]),
                    n = a[1]._id) : a[1]._id === n ? (i.push(null),
                    r.push(a[0]),
                    o = a[0]._id) : a[1]._id === o ? (r.push(null),
                    i.push(a[0]),
                    n = a[0]._id) : (i.push(null),
                    r.push(null),
                    s = !0)
                }
            }
            ));
            for (var a = e[0].clone(), l = new THREE.Vector3, u = new THREE.Vector3, c = new THREE.Vector3, h = new THREE.Vector3, p = new THREE.Vector3, d = [0], f = 0; f < i.length; f++) {
                var m = i[f]
                    , g = r[f];
                if (null === m && null === g)
                    if (f > 0 && f === i.length - 1 && (null !== i[f - 1] || null !== r[f - 1])) {
                        p.subVectors(e[f + 1], a);
                        var v = c.angleTo(p)
                            , y = p.angleTo(h);
                        (Math.sign(Zt(c, p)) !== Math.sign(Zt(p, h)) || v < t / 2 || y < t / 2) && d.push(f)
                    } else
                        d.push(f);
                else if (0 === f)
                    l.copy(m),
                    u.copy(g),
                    c.subVectors(l, a),
                    h.subVectors(u, a);
                else if (m) {
                    p.subVectors(m, a);
                    var b = c.angleTo(h)
                        , _ = p.angleTo(h);
                    Math.sign(Zt(c, h)) === Math.sign(Zt(p, h)) && _ <= b && _ > t ? (c.copy(p),
                    l.copy(m)) : (d.push(f),
                    a.copy(e[f]),
                    l.copy(m),
                    c.subVectors(l, a),
                    h.subVectors(u, a))
                } else if (g) {
                    p.subVectors(g, a);
                    b = c.angleTo(h),
                    _ = c.angleTo(p);
                    Math.sign(Zt(h, c)) === Math.sign(Zt(p, c)) && _ <= b && _ > t ? (h.copy(p),
                    u.copy(g)) : (d.push(f),
                    a.copy(e[f]),
                    u.copy(g),
                    c.subVectors(l, a),
                    h.subVectors(u, a))
                } else
                    console.error("side1 and side2 must has one null value!");
                f === i.length - 1 && d.push(f + 1)
            }
            return d.map((function(t) {
                return e[t]
            }
            ))
        }(f, s.minFov)),
        f.map((function(e) {
            return e.clone()
        }
        ))
    },
    getExtraPoints: function() {
        var e = []
            , t = this;
        return this._extraIds.forEach((function(i) {
            e.push(t._points[i])
        }
        )),
        e
    },
    getDistance: function(e, t) {
        for (var i = Xt(e, this._points), r = Xt(t, this._points), n = this._graph.findShortestPath(i, r), o = 0, s = 0, a = n.length; s < a - 1; s++) {
            var l = n[s]
                , u = n[s + 1];
            o += this._graph.map[l][u]
        }
        return o
    },
    findNearestPathPoint: function(e) {
        var t = Xt(e, this._points);
        return this._points[t]
    },
    getPoints: function() {
        return this._points
    },
    getIndices: function() {
        return this._indices
    },
    getRebuiltTriangles: function() {
        return this._rebuiltTriangles
    }
});
var Jt = new THREE.Vector3
    , Yt = new THREE.Vector3;
function Qt(e, t, i) {
    return Jt.copy(t).sub(e),
    Yt.copy(t).sub(i),
    Jt.angleTo(Yt)
}
function Zt(e, t) {
    return e.x * t.z - e.z * t.x
}
var Kt = new THREE.Box3;
function $t(e, t, i) {
    if (Kt.makeEmpty(),
    Kt.expandByPoint(e),
    Kt.expandByPoint(t),
    r = i.box,
    (n = Kt).max.x < r.min.x || n.min.x > r.max.x || n.max.z < r.min.z || n.min.z > r.max.z)
        return !1;
    for (var r, n, o = !1, s = 0, a = i.length - 1; s < i.length; a = s++)
        if (ei(e, t, i[s], i[a])) {
            o = !0;
            break
        }
    return !!o || function(e, t) {
        for (var i = e.x, r = e.z, n = !1, o = 0, s = t.length - 1; o < t.length; s = o++) {
            var a = t[o].x
                , l = t[o].z
                , u = t[s].x
                , c = t[s].z;
            l > r != c > r && i < (u - a) * (r - l) / (c - l) + a && (n = !n)
        }
        return n
    }(e, i)
}
function ei(e, t, i, r) {
    var n = (e.x - i.x) * (t.z - i.z) - (e.z - i.z) * (t.x - i.x)
        , o = (e.x - r.x) * (t.z - r.z) - (e.z - r.z) * (t.x - r.x);
    if (n * o > 0)
        return !1;
    var s = (i.x - e.x) * (r.z - e.z) - (i.z - e.z) * (r.x - e.x);
    if (s * (s + n - o) > 0)
        return !1;
    var a = s / (o - n)
        , l = a * (t.x - e.x)
        , u = a * (t.z - e.z);
    return {
        x: e.x + l,
        z: e.z + u
    }
}
function GroupNavigation(e) {
    this._navigations = e,
    this._map = null,
    this._connectNavMap = null,
    this._connectPoints = [],
    this._init()
}
function ii(e, t) {
    for (var i = -1, r = 0; r < t.length; r++)
        t[r].equals(e) && (i = r);
    return i
}
function ri(e) {
    var t = {};
    for (var i in e)
        t[i] = Object.assign({}, e[i]);
    return t
}
function ni(e) {
    this._navigation = e
}
Object.assign(GroupNavigation.prototype, {
    _init: function() {
        this._map = {},
        this._connectNavMap = {};
        for (var e = 0; e < this._navigations.length; e++) {
            for (var t = this._navigations[e], i = t.getExtraPoints(), r = 0; r < i.length; r++) {
                var n = i[r]
                    , o = ii(n, this._connectPoints);
                o < 0 ? (o = this._connectPoints.length,
                n._index = o,
                this._connectPoints.push(n)) : n._index = this._connectPoints[o]._index
            }
            if (i.length > 1)
                for (r = 0; r < i.length; r++)
                    for (var s = 0; s < i.length; s++)
                        if (s !== r) {
                            var a = t.getDistance(i[s], i[r])
                                , l = i[s]._index
                                , u = i[r]._index;
                            this._map[l] = this._map[l] || {},
                            this._map[u] = this._map[u] || {},
                            this._map[l][u] = a,
                            this._map[u][l] = a,
                            this._connectNavMap[l] = this._connectNavMap[l] || {},
                            this._connectNavMap[u] = this._connectNavMap[u] || {},
                            this._connectNavMap[l][u] = t,
                            this._connectNavMap[u][l] = t
                        }
        }
    },
    findPath: function(e, t, i, r, n) {
        if ((n = n || {}).includeStart = void 0 !== n.includeStart && n.includeStart,
        n.includeEnd = void 0 !== n.includeEnd && n.includeEnd,
        e == i)
            return this._navigations[e].findPath(t, r, n);
        if (0 == this._navigations[e].getExtraPoints().length || 0 == this._navigations[i].getExtraPoints().length)
            return console.info("closed space: " + e + " or " + i),
            [];
        var o = ri(this._map)
            , s = ri(this._connectNavMap)
            , a = 0
            , l = 0
            , u = this._connectPoints.length
            , c = 0;
        function h(e, t, i) {
            for (var r = t.getExtraPoints(), n = 0; n < r.length; n++) {
                var a = ii(r[n], i)
                    , l = t.getDistance(e, r[n]);
                o[d] = o[d] || {},
                o[a] = o[a] || {},
                o[d][a] = l,
                o[a][d] = l,
                s[d] = s[d] || {},
                s[a] = s[a] || {},
                s[d][a] = t,
                s[a][d] = t
            }
        }
        var p = (x = this._navigations[e]).findNearestPathPoint(t).clone();
        if (ii(p, this._connectPoints) < 0) {
            var d = u + c;
            c++,
            h(p, x, this._connectPoints),
            this._connectPoints.push(p),
            a = d
        } else
            a = ii(p, this._connectPoints);
        var f = (x = this._navigations[i]).findNearestPathPoint(r).clone();
        if (ii(f, this._connectPoints) < 0) {
            d = u + c;
            c++,
            h(f, x, this._connectPoints),
            this._connectPoints.push(f),
            l = d
        } else
            l = ii(f, this._connectPoints);
        if (a === l) {
            var m = [];
            return n.includeStart && m.push(t.clone()),
            n.includeEnd && m.push(r.clone()),
            m
        }
        var g = Graph.findShortestPath(o, a, l);
        if (!g)
            return this._connectPoints.length = u,
            console.info("find no path between rooms: " + e + " or " + i),
            [];
        for (var v = [], y = 0; y < g.length - 1; y++) {
            var b = +g[y]
                , _ = +g[y + 1]
                , x = s[b][_]
                , E = {};
            E.includeStart = y > 0 || n.includeStart,
            E.includeEnd = y < g.length - 2 || n.includeEnd,
            E.fixEnds = n.fixEnds,
            E.pathSmooth = n.pathSmooth;
            var w = x.findPath(0 === y ? t : this._connectPoints[b], y >= g.length - 2 ? r : this._connectPoints[_], E);
            0 !== y && w.shift(),
            v = v.concat(w)
        }
        return this._connectPoints.length = u,
        v
    }
}),
Object.assign(ni.prototype, {
    createPathPointsMesh: function() {
        for (var e = this._navigation.getPoints(), t = [], i = 0, r = e.length; i < r; i++) {
            e[i].toArray(t, 3 * i)
        }
        var n = new THREE.BufferGeometry;
        return n.addAttribute("position", new THREE.BufferAttribute(new Float32Array(t),3)),
        new THREE.Points(n)
    },
    createPathLineSegmentsMesh: function() {
        for (var e = this._navigation, t = e.getPoints(), i = [], r = e.getIndices(), n = 0, o = t.length; n < o; n++) {
            t[n].toArray(i, 3 * n)
        }
        var s = new THREE.BufferGeometry;
        return s.addAttribute("position", new THREE.BufferAttribute(new Float32Array(i),3)),
        s.setIndex(r),
        new THREE.LineSegments(s)
    },
    createRebuiltTrianglesMesh: function() {
        for (var e = this._navigation.getRebuiltTriangles(), t = [], i = 0, r = e.length; i < r; i++) {
            var n = e[i];
            n.a.toArray(t, 18 * i + 0),
            n.b.toArray(t, 18 * i + 3),
            n.b.toArray(t, 18 * i + 6),
            n.c.toArray(t, 18 * i + 9),
            n.c.toArray(t, 18 * i + 12),
            n.a.toArray(t, 18 * i + 15)
        }
        var o = new THREE.BufferGeometry;
        return o.addAttribute("position", new THREE.BufferAttribute(new Float32Array(t),3)),
        new THREE.LineSegments(o)
    },
    createPathNodeByPoints: function(e) {
        for (var t = [], i = 0, r = e.length; i < r; i++) {
            e[i].toArray(t, 3 * i)
        }
        var n = [];
        for (i = 0,
        r = e.length; i < r; i++)
            i !== r - 1 && n.push(i, i + 1);
        var o = new THREE.Group
            , s = new THREE.BufferGeometry;
        s.addAttribute("position", new THREE.BufferAttribute(new Float32Array(t),3));
        var a = new THREE.Points(s);
        o.add(a);
        var l = new THREE.BufferGeometry;
        l.addAttribute("position", new THREE.BufferAttribute(new Float32Array(t),3)),
        l.setIndex(n);
        var u = new THREE.LineSegments(l);
        return o.add(u),
        o
    }
});
var oi, si = function() {
    function e(t) {
        classCallCheck(this, e),
        this.object = t,
        this.prevObjectPosition = null,
        this.prevObjectScale = null,
        this.prevObjectAngles = null,
        this._objects = [],
        this.groupNavigation = null,
        this.navigationHelpersNode = null,
        this.navigationHelpers = []
    }
    return e.prototype.clear = function() {
        this.showHelper(!1),
        this.prevObjectPosition = null,
        this.prevObjectScale = null,
        this.prevObjectAngles = null,
        this._objects = [],
        this.groupNavigation = null,
        this.navigationHelpers = []
    }
    ,
    e.prototype.needGen = function() {
        var e = this.object;
        if (!e)
            return !0;
        if (!this.prevObjectPosition || !this.prevObjectScale || !this.prevObjectAngles)
            return !0;
        var t = Utils.parseVector3(e.position)
            , i = Utils.parseVector3(e.scale)
            , r = Utils.parseVector3(e.angles);
        return !t.equals(this.prevObjectPosition) || (!i.equals(this.prevObjectScale) || !r.equals(this.prevObjectAngles))
    }
    ,
    e.prototype.getClipAreas = function(e, t) {
        var i = function(e, t) {
            return e == t || !!e.isChildOf(t)
        }
            , r = [];
        if (t)
            for (var n = 0; n < t.length; n++) {
                var o = t[n];
                if (i(e, o.object)) {
                    for (var s = [], a = o.area, l = 0; l < a.length; l++) {
                        var u = Utils.parseVector3(a[l]);
                        s.push(u)
                    }
                    r.push(s)
                }
            }
        return r
    }
    ,
    e.prototype.genFromData = function(e, t, i, r) {
        if (!Utils.isFunction(e.getNavigationData))
            return !1;
        var n = e.getNavigationData();
        if (!n)
            return !1;
        for (var o = [], s = 0; s < 8; s += 2)
            o.push({
                x: n.data[s],
                y: n.data[s + 1]
            });
        var a = [];
        for (s = 0; s < n.holes.length; s++) {
            for (var l = 2 * n.holes[s], u = [], c = 0; c < 8; c += 2)
                u.push({
                    x: n.data[l + c],
                    y: n.data[l + c + 1]
                });
            a.push(u)
        }
        var h = new MeshNavigation({
            contour: o,
            holes: a,
            y: 0
        },t,30,this.getClipAreas(e, r));
        i.push(h);
        var p = new ni(h);
        return this.navigationHelpers.push(p),
        !0
    }
    ,
    e.prototype.genFromMesh = function(e, t, i, r, n) {
        if (!Utils.isFunction(e.getNavigationMesh))
            return !1;
        var o = e.getNavigationMesh();
        if (!o)
            return !1;
        var s = o.geometry;
        if (!s)
            return !1;
        var a = s.clone();
        a.isBufferGeometry || (a = (new THREE.BufferGeometry).fromGeometry(a)),
        a.applyMatrix4(o.matrixWorld),
        a.applyMatrix4(n);
        var l = new MeshNavigation(a,t,30,this.getClipAreas(e, r));
        i.push(l);
        var u = new ni(l);
        return this.navigationHelpers.push(u),
        !0
    }
    ,
    e.prototype._getCampus = function() {
        return this.object.isCampus ? this.object : this.object.parents.query(".Campus")[0]
    }
    ,
    e.prototype.initFromObjects = function(e, t) {
        var i = this._getCampus();
        if (i) {
            var r = new THREE.Matrix4;
            r.getInverse(i.node.matrixWorld);
            for (var n = [], o = 0; o < e.length; o++) {
                var s = e[o]
                    , a = [];
                s.doors && s.doors.forEach((function(e) {
                    var t = Utils.parseVector3(e.position);
                    t.applyMatrix4(r),
                    a.push(t)
                }
                )),
                (this.genFromData(s, a, n, t) || this.genFromMesh(s, a, n, t, r)) && this._objects.push(s)
            }
            this.groupNavigation = new GroupNavigation(n)
        }
    }
    ,
    e.prototype.init = function(e) {
        this.clear();
        var t = this.object;
        this.prevObjectPosition = Utils.parseVector3(t.position),
        this.prevObjectScale = Utils.parseVector3(t.scale),
        this.prevObjectAngles = Utils.parseVector3(t.angles);
        try {
            if (t.isFloor) {
                var i = t.rooms;
                i.length ? this.initFromObjects(i, e) : this.initFromObjects([t], e)
            } else
                t.isCampus && this.initFromObjects([t], e)
        } catch (e) {
            THING.Utils.error(e),
            THING.Utils.error(e.toString()),
            THING.Utils.error("Init object(name:" + this.object.name + ", id:" + this.object.id + ") navigation failed")
        }
    }
    ,
    e.prototype.getRoomID = function(e) {
        if (e.isBaseObject)
            return this._objects.indexOf(e);
        for (var t = 0; t < this._objects.length; t++) {
            var i = this._objects[t];
            if (i.isFloor)
                return t;
            if (i.getRayCastPosition(e))
                return t;
            for (var r = i.doors, n = 0; n < r.length; n++) {
                var o = r[n];
                if (THING.Math.equalsVector(o.position, e))
                    return t
            }
        }
        return -1
    }
    ,
    e.prototype.getEntryInfo = function(e, t, i) {
        var r = e[t]
            , n = e[i]
            , o = -1;
        return this.object.isFloor ? r && r.isRoom ? o = this.getRoomID(r) : n && (o = this.getRoomID(n)) : this.object.isCampus && (o = 0),
        -1 === o ? null : {
            id: o,
            pos: Utils.parseVector3(n)
        }
    }
    ,
    e.prototype.findPath = function(e) {
        e = e || {};
        var t = this.getEntryInfo(e, "startRoom", "startPosition");
        if (!t)
            return null;
        var i = this.getEntryInfo(e, "endRoom", "endPosition");
        if (!i)
            return null;
        var r = this._getCampus();
        if (!r)
            return null;
        var n = new THREE.Matrix4;
        n.getInverse(r.node.matrixWorld);
        var o = t.pos.clone();
        o.applyMatrix4(n);
        var s = i.pos.clone();
        s.applyMatrix4(n);
        var a = this.groupNavigation.findPath(t.id, o, i.id, s, {
            includeStart: !0,
            includeEnd: !0,
            fixEnds: !0,
            pathSmooth: {
                enable: !0
            }
        });
        if (!a || !a.length)
            return null;
        for (var l = e.height || 0, u = t.pos, c = [], h = 0; h < a.length; h++) {
            var p = a[h];
            p.y += l,
            length += p.distanceTo(u),
            u = p,
            p.applyMatrix4(r.node.matrixWorld),
            c.push(p.toArray())
        }
        return (c = THING.Math.toUniquePoints(c)).getPathLength = function() {
            return Utils.getLength(this)
        }
        ,
        c
    }
    ,
    e.prototype.showHelper = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        if (this.object)
            if (e) {
                if (!this.navigationHelpersNode) {
                    this.navigationHelpersNode = new THREE.Group;
                    var t = this._getCampus();
                    if (!t)
                        return;
                    for (var i = 0; i < this.navigationHelpers.length; i++) {
                        var r = this.navigationHelpers[i]
                            , n = r.createRebuiltTrianglesMesh();
                        n.position.y = .1,
                        n.material.color.setHex(6985427),
                        this.navigationHelpersNode.add(n);
                        var o = r.createPathPointsMesh();
                        this.navigationHelpersNode.add(o);
                        var s = r.createPathLineSegmentsMesh();
                        this.navigationHelpersNode.add(s)
                    }
                    this.navigationHelpersNode.applyMatrix4(t.node.matrixWorld),
                    this.object.app.scene.add(this.navigationHelpersNode)
                }
            } else
                this.navigationHelpersNode && (this.object.app.resourceManager.remove(this.navigationHelpersNode),
                this.navigationHelpersNode = null)
    }
    ,
    e
}(), ai = function(e) {
    return !e.isLight && !e.userData.skipBoundingBox
}, BoundingBoxControl = function() {
    function e() {
        classCallCheck(this, e),
        this.object = null,
        this._boxes = null,
        this._initBoxes(),
        this._disable = !1
    }
    return e.prototype.onAdd = function(e) {
        this.object = e
    }
    ,
    e.prototype.onRemove = function() {}
    ,
    e.prototype.onUpdate = function(e) {}
    ,
    e.prototype._getKey = function(e, t) {
        return (e ? "_onlyVisible" : "_all") + (t ? "_onlySelf" : "")
    }
    ,
    e.prototype._getBox = function(e, t, i) {
        var r = this._getKey(t, i);
        return this._boxes[e][r]
    }
    ,
    e.prototype._setBox = function(e, t, i, r) {
        if (!t || this.object.visible) {
            var n = this._getKey(t, i);
            this._boxes[e][n] = r
        }
    }
    ,
    e.prototype._updateBox = function(e, t, i, r, n) {
        var o = this._getBox(e, t, i);
        if (!o) {
            var s = new THREE.Box3
                , a = this.object.node;
            s._setFromObject(a, (function(e) {
                return (!n || !1 !== n(e)) && (!(t && !e.userData.skipBoxVisibleCheck && !e.ensureVisible("updateBox")) && ai(e))
            }
            ), r),
            o = this._processBox(s, this.object),
            this._setBox(e, t, i, o)
        }
        return o
    }
    ,
    e.prototype._getVector3 = function(e) {
        return e.toArray()
    }
    ,
    e.prototype._processBoxResult = function(e, t) {
        e.toBox = function() {
            var t = Utils.parseVector3(e.min)
                , i = Utils.parseVector3(e.max);
            return t.z == i.z && (t.z -= 1e-6,
            i.z += 1e-6),
            new THREE.Box3(t,i)
        }
        ,
        e.getWorldPosition = function(e) {
            var i = t.getOffsetPosition(e);
            i = THING.Math.divideVector(i, t.scale);
            var r = e.boundingBox || t.boundingBox
                , n = t.worldToSelf(r.center)
                , o = THING.Math.addVector(n, i);
            return t.selfToWorld(o)
        }
        ,
        void 0 === e.initSize && Object.defineProperties(e, {
            initSize: {
                get: function() {
                    if (t._initBoxSize)
                        return t._initBoxSize;
                    var e, i = function(e) {
                        var t = new THREE.Vector3;
                        return e.getSize(t),
                        t.toArray()
                    }, r = function(e) {
                        return !e || !!THING.Math.equalsVector(e, [0, 0, 0])
                    }, n = t.app.modelResource.getBoundingBox(t.url);
                    if (n && (e = n.size.concat()),
                    r(e) && t._loadingBoxSize && (e = t._loadingBoxSize),
                    r(e)) {
                        var o = new THREE.Box3;
                        t._traverseSelfNodes((function(e) {
                            e.isMesh && o.union((new THREE.Box3)._setFromObject(e, ai))
                        }
                        )),
                        e = i(o)
                    }
                    return r(e) ? (o = (new THREE.Box3)._setFromObject(t.node, ai),
                    t._initBoxSize = i(o)) : t._initBoxSize = e,
                    t._initBoxSize
                }
            }
        })
    }
    ,
    e.prototype._processBox = function(e, t) {
        var i = [];
        e.getBoundingPositions().forEach((function(e) {
            i.push(e.toArray())
        }
        ));
        var r = new THREE.Vector3;
        e.getSize(r);
        var n = new THREE.Vector3;
        e.getCenter(n);
        var o = this._getVector3(e.min)
            , s = this._getVector3(e.max)
            , a = this._getVector3(r)
            , l = this._getVector3(n)
            , u = {
            points: i,
            min: o,
            max: s,
            center: l,
            size: a,
            radius: r.length()
        };
        return this._processBoxResult(u, t),
        u
    }
    ,
    e.prototype._processOrientedBox = function(e, t) {
        var i = t.node
            , r = (t.position,
        e.points)
            , n = []
            , o = new THREE.Vector3(1 / 0,1 / 0,1 / 0)
            , s = new THREE.Vector3(-1 / 0,-1 / 0,-1 / 0);
        r.forEach((function(e) {
            var t = Utils.parseVector3(e);
            t.x != 1 / 0 && t.x != -1 / 0 || (t.x = 0),
            t.y != 1 / 0 && t.y != -1 / 0 || (t.y = 0),
            t.z != 1 / 0 && t.z != -1 / 0 || (t.z = 0),
            t.applyMatrix4(i.matrixWorld),
            o.min(t),
            s.max(t),
            n.push(t.toArray())
        }
        ));
        var a = new THREE.Vector3;
        i.getWorldScale(a);
        var l = Utils.parseVector3(e.size).multiply(a)
            , u = new THREE.Vector3;
        u.addVectors(o, s).multiplyScalar(.5);
        var c = this._getVector3(o)
            , h = this._getVector3(s)
            , p = this._getVector3(l)
            , d = this._getVector3(u)
            , f = {
            points: n,
            min: c,
            max: h,
            center: d,
            size: p,
            radius: l.length()
        };
        return this._processBoxResult(f, t),
        f
    }
    ,
    e.prototype._getInverseMatrixWorld = function(e) {
        var t = new THREE.Matrix4;
        return e.updateWorldMatrix(!0, !1),
        t.getInverse(e.matrixWorld),
        t
    }
    ,
    e.prototype.getBoundingBox = function() {
        var e, t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (i) {
            var r = this;
            e = function(e) {
                return !r.object._isChildNode(e)
            }
        }
        var n = this._updateBox("boundingBox", t, i, null, e);
        return n
    }
    ,
    e.prototype.getOrientedBoundingBox = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , i = this._getBox("orientedBoundingBox", e, t);
        return i || (i = this._processOrientedBox(this.getLocalBoundingBox(e, t), this.object),
        this._setBox("orientedBoundingBox", e, t, i)),
        i
    }
    ,
    e.prototype.getLocalBoundingBox = function() {
        var e, t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = this._getInverseMatrixWorld(this.object.node);
        if (i) {
            var n = this;
            e = this._updateBox("selfLocalBoundingBox", t, i, r, (function(e) {
                return !n.object._isChildNode(e)
            }
            ))
        } else
            e = this._updateBox("localBoundingBox", t, i, r);
        return e
    }
    ,
    e.prototype._traverse = function(e) {
        for (var t in this._boxes) {
            var i = this._boxes[t];
            for (var t in i)
                i[t] && (i[t] = e(i[t], t))
        }
    }
    ,
    e.prototype._initBoxes = function() {
        this._boxes = {
            boundingBox: {},
            orientedBoundingBox: {},
            localBoundingBox: {},
            selfLocalBoundingBox: {}
        }
    }
    ,
    e.prototype.translate = function(e, t) {
        var i = Utils.parseVector3(e);
        this._traverse((function(e, r) {
            return t && t != r || e.translate(i),
            e
        }
        ))
    }
    ,
    e.prototype.setDirty = function(e, t) {
        for (var i in this._boxes) {
            var r = this._getKey(e, t);
            this._boxes[i][r] = null
        }
    }
    ,
    _createClass(e, [{
        key: "dirty",
        set: function(e) {
            this._disable || e && this._initBoxes()
        }
    }, {
        key: "disable",
        set: function(e) {
            this._disable = e
        },
        get: function() {
            return this._disable
        }
    }]),
    e
}();
BoundingBoxControl._processBox = function(e, t) {
    return (oi = oi || new BoundingBoxControl)._processBox(e, t)
}
;
var ui = new Map
    , ci = new Map
    , hi = new Map;
function pi(e, t) {
    for (var i = 0, r = t.length; i < r; i++) {
        var n = t[i];
        if (e.startsWith(n))
            return !0
    }
    return !1
}
function di(e) {
    for (var t = "", i = 0; i < e.length; i++) {
        var r = e[i];
        if ("=" != r && "<" != r && ">" != r && "!" != r)
            break;
        t += r
    }
    return "=" == t && (t = "=="),
    t.trimBoth(" \t")
}
function fi(e, t) {
    for (var i = e + "('", r = "", n = 0; n < t.length; n++) {
        var o = t[n];
        if ("=" == o || "<" == o || ">" == o || "!" == o)
            break;
        r += o
    }
    i += r.trimBoth('" \t'),
    i += "'",
    i += ",";
    var s = t.substring(n);
    if (s) {
        var a = di(s);
        a && ((s = (s = s._trimLeft(a).trimBoth(" \t")).replaceAll("^(0+)", "")) ? Utils.isNumberString(s) || '"' != s[0] && "'" != s[0] && (s = "'" + s + "'") : s = "0"),
        i += s
    }
    return i += ")"
}
function mi(e, t) {
    for (var i = e + "('", r = "", n = 0; n < t.length; n++) {
        var o = t[n];
        if ("=" == o || "<" == o || ">" == o || "!" == o)
            break;
        r += o
    }
    i += r.trimBoth('" \t'),
    i += "'",
    i += ")";
    var s = t.substring(n);
    if (s) {
        var a = di(s);
        a && ((s = (s = s._trimLeft(a).trimBoth(" \t")).replaceAll("^(0+)", "")) ? Utils.isNumberString(s) || '"' != s[0] && "'" != s[0] && (s = "'" + s + "'") : s = "0"),
        i += a,
        i += s
    }
    return i
}
function gi(e, t, i, r) {
    var n = "";
    n += e + "(",
    r && (n += '"');
    var o = function(e, t) {
        var i = "";
        if (Utils.isArray(t))
            for (var r = 0, n = e.length; r < n && !pi(e.substring(r), t); r++)
                i += e[r];
        else
            for (r = 0,
            n = e.length; r < n; r++) {
                var o = e[r];
                if (-1 !== t.indexOf(o))
                    break;
                i += o
            }
        return i.trimBoth(" ")
    }(t, i);
    return n += o,
    r && (n += '"'),
    {
        expression: n += ")",
        value: o
    }
}
function vi(e) {
    for (var t = 0; t < e.length; t++) {
        var i = e[t];
        if ("=" == i || "<" == i || ">" == i || "!" == i)
            return !0
    }
    return !1
}
function yi(e, t, i) {
    e.forEach((function(e) {
        e.isBaseObject && t.evaluate(function(e) {
            return {
                _name: function(t) {
                    return e.name == t
                },
                _id: function(t) {
                    return t.startsWith("#") ? e.uuid == t.substring(1) : e.id == t
                },
                _type: function(t) {
                    return !0 === e["is" + t] || e.type == t
                },
                _regExp: function(t, i) {
                    var r = i;
                    if (i.startsWith("[")) {
                        var n = i.substr(1, i.length - 2).trimBoth(" \t");
                        r = e.getAttribute(n)
                    }
                    if (Utils.isString(r)) {
                        var o = hi.get(t);
                        return o || (o = new RegExp(t),
                        hi.set(t, o)),
                        o.test(r)
                    }
                    return !1
                },
                _regExpAttribute: function(t, i) {
                    var r = [];
                    THING.__new__selector__ ? (r.push(e.getAttribute(t)),
                    r.push(e.getAttribute("userData/" + t))) : (r.push(e.getAttribute("userData/" + t)),
                    r.push(e.getAttribute(t)));
                    var n = ci.get(i);
                    n || (n = new RegExp("^" + i._trimRight("*")),
                    ci.set(i, n));
                    for (var o = 0; o < r.length; o++)
                        if (n.test(r[o]))
                            return !0;
                    return !1
                },
                _attribute: function(t) {
                    var i;
                    return THING.__new__selector__ ? void 0 === (i = e.getAttribute(t)) && (i = e.getAttribute("userData/" + t)) : void 0 === (i = e.getAttribute("userData/" + t)) && (i = e.getAttribute(t)),
                    i
                },
                _hasAttribute: function(t) {
                    var i = !1;
                    return THING.__new__selector__ ? (i = e.hasAttribute(t)) || (i = e.hasAttribute("userData/" + t)) : (i = e.hasAttribute("userData/" + t)) || (i = e.hasAttribute(t)),
                    i
                }
            }
        }(e)) && bi(i, e)
    }
    ))
}
function bi(e, t) {
    t.canNotQueryFromSelector || e.push(t)
}
var _i = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.app = t,
        this.objects = i
    }
    return e.prototype._setAttribute = function(e, t) {
        for (var i = 0; i < this.objects.length; i++) {
            var r = this.objects[i];
            r && (r.style[e] = t)
        }
    }
    ,
    e.prototype.setMaterial = function(e) {
        this.objects.forEach((function(t) {
            t.style.setMaterial(e)
        }
        ))
    }
    ,
    _createClass(e, [{
        key: "renderOrder",
        set: function(e) {
            this._setAttribute("renderOrder", e)
        }
    }, {
        key: "color",
        set: function(e) {
            this._setAttribute("color", e)
        }
    }, {
        key: "opacity",
        set: function(e) {
            this._setAttribute("opacity", e)
        }
    }, {
        key: "outlineColor",
        set: function(e) {
            this._setAttribute("outlineColor", e)
        }
    }, {
        key: "defaultOutlineColor",
        set: function(e) {
            this._setAttribute("defaultOutlineColor", e)
        }
    }, {
        key: "skipOutline",
        set: function(e) {
            this._setAttribute("skipOutline", e)
        }
    }, {
        key: "skipBoundingBox",
        set: function(e) {
            this._setAttribute("skipBoundingBox", e)
        }
    }, {
        key: "wireframe",
        set: function(e) {
            this._setAttribute("wireframe", e)
        }
    }, {
        key: "axisHelper",
        set: function(e) {
            this._setAttribute("axisHelper", e)
        }
    }, {
        key: "boundingBox",
        set: function(e) {
            this._setAttribute("boundingBox", e)
        }
    }, {
        key: "boundingBoxColor",
        set: function(e) {
            this._setAttribute("boundingBoxColor", e)
        }
    }, {
        key: "alwaysOnTop",
        set: function(e) {
            this._setAttribute("alwaysOnTop", e)
        }
    }, {
        key: "glow",
        set: function(e) {
            this._setAttribute("glow", e)
        }
    }, {
        key: "innerGlow",
        set: function(e) {
            this._setAttribute("innerGlow", e)
        }
    }, {
        key: "emissive",
        set: function(e) {
            this._setAttribute("emissive", e)
        }
    }]),
    e
}();
Selector = function() {
    function e(t, i) {
        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        classCallCheck(this, e),
        this.objects = [],
        this.app = t,
        this.objectManager = t.objectManager,
        this.events = t.events,
        this.length = 0,
        this.initObjectPool = i || this.objectManager.objects,
        this.ignoreCheckingQueryableObjects = n
    }
    return e.prototype.query = function(t) {
        var i = new e(this.app,this.initObjectPool);
        return i.select(t, this.objects),
        i
    }
    ,
    e.prototype._getObjects = function(t) {
        var i = null;
        if (t.isSelector)
            i = (r = t).objects;
        else if (Utils.isString(t)) {
            var r;
            (r = new e(this.app,this.initObjectPool)).select(t),
            i = r.objects
        } else
            Utils.isArray(t) ? i = t : t.isBaseObject || t.isGroup ? i = [t] : THING.Utils.error("selector.add unkown: " + t);
        return i
    }
    ,
    e.prototype.remove = function(e) {
        if (!e)
            return this;
        var t = this._getObjects(e);
        if (!t)
            return this;
        for (var i = this.objects, r = 0; r < i.length; r++)
            for (var n = 0; n < t.length; n++)
                if (i[r] == t[n]) {
                    i.splice(r--, 1);
                    break
                }
        return this.buildReturnObject(i)
    }
    ,
    e.prototype.add = function(e) {
        if (!e)
            return this;
        var t = this._getObjects(e);
        if (!t)
            return this;
        var i = this.objects.concat(t)
            , r = Array.from(new Set(i));
        return this.buildReturnObject(r)
    }
    ,
    e.prototype.not = function(t) {
        if (!t)
            return this;
        var i = null;
        if (t.isSelector)
            i = (r = t).objects;
        else if (Utils.isString(t)) {
            var r;
            (r = new e(this.app,this.initObjectPool)).select(t),
            i = r.objects
        } else if (Utils.isArray(t))
            i = t;
        else {
            if (!t.isBaseObject && !t.isGroup)
                return THING.Utils.error("selector.not unkown: " + t),
                this;
            i = [t]
        }
        for (var n = 0; n < i.length; n++) {
            var o = i[n]
                , s = this.objects.indexOf(o);
            s > -1 && this.objects.splice(s, 1)
        }
        var a = this.objects;
        return this.buildReturnObject(a)
    }
    ,
    e.prototype.parse = function(e, t, i) {
        if (Utils.isString(e))
            if ("*" == (e = (e = e._trimLeft("$")).trimBoth(' \t"')))
                !function(e, t) {
                    e.forEach((function(e) {
                        bi(t, e)
                    }
                    ))
                }(t, i);
            else {
                var r = ui.get(e);
                if (r)
                    yi(t, r, i);
                else {
                    var n = function(e) {
                        for (var t = "", i = 0; i < e.length; i++) {
                            var r = e[i];
                            if (" " != r && "\t" != r)
                                if ("#" == r)
                                    t += (a = gi("_id", e.substring(i + 1), "\t|&", !0)).expression,
                                    i += a.value.length;
                                else if ("." == r)
                                    t += (a = gi("_type", e.substring(i + 1), "\t|&", !0)).expression,
                                    i += a.value.length;
                                else if ("/" == r) {
                                    i += (a = gi("_regExp", e.substring(i + 1), "/", !0)).value.length + 1;
                                    var n = e.substring(i).indexOf("(");
                                    if (-1 !== n) {
                                        i += n + 1;
                                        var o = e.substring(i).indexOf(")");
                                        if (-1 !== o) {
                                            var s = e.substr(i, o);
                                            t += "_regExp('" + a.value + "', '" + s + "')",
                                            i += o + 1
                                        }
                                    }
                                } else if ("[" == r)
                                    (a = gi("", e.substring(i + 1), "]")).value.endsWith("*") ? t += fi("_regExpAttribute", a.value) : t += mi(vi((a = gi("", e.substring(i + 1), "]")).value) ? "_attribute" : "_hasAttribute", a.value),
                                    i += a.value.length + 1;
                                else if ("|" == r)
                                    "|" == e[i + 1] && i++,
                                    t += "||";
                                else if ("&" == r)
                                    "&" == e[i + 1] && i++,
                                    t += "&&";
                                else if ("(" == r || ")" == r)
                                    t += r;
                                else {
                                    var a;
                                    t += (a = gi("_name", e.substring(i), ["\t", "||", "&&"], !0)).expression,
                                    i += a.value.length
                                }
                        }
                        return t
                    }(e);
                    (r = function(e, t, i) {
                        var r = ui.get(e);
                        if (!r)
                            try {
                                r = new THING.Plugins.EVAL.Eval(e)
                            } catch (e) {
                                return THING.Utils.error(e),
                                null
                            }
                        return yi(t, r, i),
                        r
                    }(n, t, i)) ? ui.set(e, r) : THING.Utils.error("Eval '" + e + "' expression failed")
                }
            }
        else
            Utils.isRegExp(e) ? function(e, t, i) {
                t.forEach((function(t) {
                    e.test(t.name) && bi(i, t)
                }
                ))
            }(e, t, i) : Utils.isFunction(e) ? function(e, t, i) {
                t.forEach((function(t) {
                    e(t) && bi(i, t)
                }
                ))
            }(e, t, i) : e.isSelector && function(e, t, i) {
                t.forEach((function(t) {
                    e.has(t) && bi(i, t)
                }
                ))
            }(e, t, i)
    }
    ,
    e.prototype.queryResult = function(e, t) {
        e = e || {},
        t = t || this.initObjectPool;
        var i = [];
        return this.parse(e, t, i),
        i
    }
    ,
    e.prototype.test = function(e, t) {
        return !!this.queryResult(e, t).length
    }
    ,
    e.prototype.select = function(e, t) {
        var i = this.queryResult(e, t);
        return this.buildReturnObject(i)
    }
    ,
    e.prototype.buildReturnObject = function(e) {
        if (this.clear(),
        (e = e || []).isSelector && (e = e.toArray()),
        !this.ignoreCheckingQueryableObjects)
            for (var t = 0; t < e.length; t++)
                e[t].canNotQueryFromSelector && e.splice(t--, 1);
        this.objects = e,
        this.length = e.length;
        for (t = 0; t < e.length; t++)
            this[t] = e[t];
        return this
    }
    ,
    e.prototype.clear = function() {
        for (var e = 0; e < this.length; e++)
            this[e] = null;
        this.objects = [],
        this.length = 0
    }
    ,
    e.prototype.forEach = function(e) {
        if (e)
            for (var t = 0; t < this.objects.length; t++) {
                var i = this.objects[t];
                if (i)
                    if (!1 === e(i, t))
                        break
            }
    }
    ,
    e.prototype.filter = function(t) {
        var i = this.objects.filter((function(e, i) {
            return !!e && !1 !== t(e, i)
        }
        ))
            , r = new e(this.app,i);
        return r.buildReturnObject(i),
        r
    }
    ,
    e.prototype.sort = function(e) {
        e = e || function(e, t) {
            var i = e.levelFromRoot;
            return t.levelFromRoot - i
        }
        ,
        this.objects.sort(e);
        for (var t = 0; t < this.objects.length; t++)
            this[t] = this.objects[t];
        return this
    }
    ,
    e.prototype.toJSON = function() {
        return JSON.stringify(this.objects)
    }
    ,
    e.prototype.toArray = function() {
        return this.objects
    }
    ,
    e.prototype.indexOf = function(e) {
        return this.objects.indexOf(e)
    }
    ,
    e.prototype.splice = function(e, t) {
        for (var i = 0; i < this.length; i++)
            delete this[i];
        this.objects.splice(e, t),
        this.length = this.objects.length;
        for (i = 0; i < this.objects.length; i++)
            this[i] = this.objects[i];
        return this
    }
    ,
    e.prototype.concat = function(t) {
        var i = new e(this.app,this.objects);
        if (i.buildReturnObject(this.objects),
        t)
            for (var r = 0; r < t.length; r++)
                -1 === i.indexOf(t[r]) && i.add(t[r]);
        return i
    }
    ,
    e.prototype.reverse = function() {
        var t = this.objects.reverse()
            , i = new e(this.app,t);
        return i.buildReturnObject(t),
        i
    }
    ,
    e.prototype.has = function(e) {
        return -1 !== this.objects.indexOf(e)
    }
    ,
    e.prototype.equals = function(e) {
        if (this.length != e.length)
            return !1;
        for (var t = 0; t < this.length; t++)
            if (this[t] != e[t])
                return !1;
        return !0
    }
    ,
    e.prototype.setOpacity = function(e) {
        for (var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = 0; i < this.objects.length; i++) {
            var r = this.objects[i];
            r && r.style.setOpacity(e, t)
        }
    }
    ,
    e.prototype.flipVisible = function() {
        for (var e = 0; e < this.objects.length; e++) {
            var t = this.objects[e];
            t && (t.visible = !t.visible)
        }
    }
    ,
    e.prototype.fadeIn = function(e) {
        for (var t = 0; t < this.objects.length; t++) {
            var i = this.objects[t];
            i && i.fadeIn(e)
        }
    }
    ,
    e.prototype.fadeOut = function(e) {
        for (var t = 0; t < this.objects.length; t++) {
            var i = this.objects[t];
            i && i.fadeOut(e)
        }
    }
    ,
    e.prototype.destroyAll = function() {
        for (var e = 0; e < this.objects.length; e++) {
            var t = this.objects[e];
            t && t.destroy()
        }
        this.clear()
    }
    ,
    e.prototype.on = function(e, t, i, r, n) {
        this.objects.forEach((function(o) {
            o.on(e, t, i, r, n)
        }
        ))
    }
    ,
    e.prototype.off = function(e, t, i) {
        this.objects.forEach((function(r) {
            r.off(e, t, i)
        }
        ))
    }
    ,
    e.prototype.one = function(e, t, i, r, n) {
        this.objects.forEach((function(o) {
            o.one(e, t, i, r, n)
        }
        ))
    }
    ,
    e.prototype.trigger = function(e, t, i) {
        for (var r = 0; r < this.objects.length; r++)
            this.objects[r].trigger(e, t, i),
            t && (t.object = null)
    }
    ,
    e.prototype.pauseEvent = function(e, t, i) {
        for (var r = 0; r < this.objects.length; r++)
            this.objects[r].pauseEvent(e, t, i)
    }
    ,
    e.prototype.pauseEventInFrame = function(e, t, i) {
        for (var r = 0; r < this.objects.length; r++)
            this.objects[r].pauseEventInFrame(e, t, i)
    }
    ,
    e.prototype.resumeEvent = function(e, t, i) {
        for (var r = 0; r < this.objects.length; r++)
            this.objects[r].resumeEvent(e, t, i)
    }
    ,
    e.prototype.getNodes = function() {
        for (var e = function(e, t) {
            for (var i = 0; i < e.length; i++)
                if (t == e[i] || t.isChildOf(e[i]))
                    return !0;
            return !1
        }, t = [], i = 0; i < this.objects.length; i++) {
            var r = this.objects[i];
            e(t, r.node) || t.push(r.node)
        }
        return t
    }
    ,
    e.prototype.destroy = function() {
        THING.Utils.warn("[Selector] Please use '.destroyAll()' to replace '.destroy()'"),
        this.destroyAll()
    }
    ,
    e.prototype.showBoundingBox = function(e) {
        THING.Utils.warn("[Selector] Please use '.style.boundingBox=' to replace '.showBoundingBox()'"),
        this.style.boundingBox = e
    }
    ,
    _createClass(e, [{
        key: "isSelector",
        get: function() {
            return !0
        }
    }, {
        key: "inheritVisible",
        set: function(e) {
            Utils.setArrayValue(this.objects, "inheritVisible", e)
        }
    }, {
        key: "inheritStyle",
        set: function(e) {
            Utils.setArrayValue(this.objects, "inheritStyle", e)
        }
    }, {
        key: "inheritPosition",
        set: function(e) {
            Utils.setArrayValue(this.objects, "inheritPosition", e)
        }
    }, {
        key: "inheritAngles",
        set: function(e) {
            Utils.setArrayValue(this.objects, "inheritAngles", e)
        }
    }, {
        key: "inheritScale",
        set: function(e) {
            Utils.setArrayValue(this.objects, "inheritScale", e)
        }
    }, {
        key: "visible",
        set: function(e) {
            Utils.setArrayValue(this.objects, "visible", e)
        }
    }, {
        key: "pickable",
        set: function(e) {
            Utils.setArrayValue(this.objects, "pickable", e)
        }
    }, {
        key: "draggable",
        set: function(e) {
            Utils.setArrayValue(this.objects, "draggable", e)
        }
    }, {
        key: "style",
        get: function() {
            return new _i(this.app,this.objects)
        }
    }, {
        key: "opacity",
        set: function(e) {
            THING.Utils.warn("[Selector] Please use '.style.opacity=' to replace '.opacity'"),
            this.style.opacity = e
        }
    }]),
    e
}();
Ei = Symbol("private");
function wi(e, t) {
    e[Ei] = {};
    var i = e[Ei];
    i.init = function() {
        i.values = Utils.parseValue(t.values, 0),
        i.onChange = t.onChange
    }
    ,
    i.notifyChangeEvent = function() {
        if (i.previousValues != i.values) {
            for (var e = 0; e < 32; e++) {
                var t = 1 << e
                    , r = i.values & t;
                if ((i.previousValues & t) != r) {
                    var n = i.watchers[t];
                    n && n(!!r)
                }
            }
            var o = i.onChange;
            o && o({
                previousValues: i.previousValues,
                values: i.values
            })
        }
    }
    ,
    i.values = 0,
    i.previousValues = 0,
    i.watchers = {},
    i.onChange = null,
    i.init()
}
var Ti = function() {
    function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        classCallCheck(this, e),
        wi(this, t)
    }
    return e.prototype.enable = function(e, t) {
        var i = this[Ei]
            , r = i.values;
        return t ? this.combine(e) : this.clear(e),
        r != i.values
    }
    ,
    e.prototype.check = function(e, t) {
        return !!(this[Ei].values & e) == t
    }
    ,
    e.prototype.set = function(e) {
        if (!Utils.isNull(e)) {
            var t = this[Ei];
            t.previousValues = t.values,
            t.values = e,
            t.notifyChangeEvent()
        }
    }
    ,
    e.prototype.get = function(e) {
        return !!(this[Ei].values & e)
    }
    ,
    e.prototype.combine = function(e) {
        var t = this[Ei];
        t.previousValues = t.values,
        t.values |= e,
        t.notifyChangeEvent()
    }
    ,
    e.prototype.clear = function(e) {
        var t = this[Ei];
        t.previousValues = t.values,
        Utils.isNull(e) ? t.values = 0 : t.values &= ~e,
        t.notifyChangeEvent()
    }
    ,
    e.prototype.has = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , i = this[Ei];
        return t ? (i.values & e) == e : 0 != (i.values & e)
    }
    ,
    e.prototype.watch = function(e, t) {
        for (var i = this[Ei].watchers, r = 0; r < 32; r++) {
            var n = e & 1 << r;
            n && (i[n] = t)
        }
    }
    ,
    _createClass(e, [{
        key: "values",
        get: function() {
            return this[Ei].values
        }
    }, {
        key: "onChange",
        get: function() {
            return this[Ei].onChange
        },
        set: function(e) {
            this[Ei].onChange = e
        }
    }]),
    e
}();
Mi = Symbol("private");
Ci = 1
    , Si = 2
    , ji = 1;
var Pi = function() {
    function e() {
        classCallCheck(this, e),
        function(e) {
            e[Mi] = {};
            var t = e[Mi];
            t.parseEvent = function(e, t, i, r) {
                e = Utils.parseValue(e, "");
                var n = {
                    condition: null,
                    callback: null,
                    tag: null,
                    priority: 50
                };
                return Utils.isFunction(e) ? (n.callback = e,
                Utils.isString(t) ? (n.tag = t,
                n.priority = r || n.priority) : Utils.isNumber(t) && (n.priority = t)) : Utils.isString(e) && (Utils.isFunction(t) || THING.onError("Parse event failed, due to callback is not function with condition"),
                n.condition = e,
                n.callback = t,
                Utils.isString(i) ? (n.tag = i,
                n.priority = r || n.priority) : Utils.isNumber(i) ? n.priority = i : n.priority = r || n.priority),
                n.callback || THING.onError("Parse event failed, deu to callback function is not existing"),
                n
            }
            ,
            t.createCacheKey = function(e, t) {
                return e.uuid + "|" + t
            }
            ,
            t.updateListenerMap = function(e, t) {
                var i = e.get(t.object);
                i ? Utils.insertBinaryBound(i, t, (function(e, t) {
                    return t.priority == e.priority ? e.__index - t.__index : t.priority - e.priority
                }
                )) : e.set(t.object, [t])
            }
            ,
            t.addListener = function(e, i) {
                var r = i.callback;
                r.key = t.createCacheKey(i.object, i.tag),
                e.caches.set(r.key, i),
                t.updateListenerMap(e.listenerMap, i),
                i.condition && (e.conditionalListeners = e.conditionalListeners || new Map,
                t.updateListenerMap(e.conditionalListeners, i))
            }
            ,
            t.removeAllListeners = function(e, t) {
                e.listenerMap.get(t).forEach((function(t) {
                    e.caches.delete(t.callback.key)
                }
                )),
                e.listenerMap.delete(t);
                var i = e.conditionalListeners;
                i && i.delete(t)
            }
            ,
            t.getListener = function(e, i, r) {
                var n = t.createCacheKey(i, r);
                return e.caches.get(n)
            }
            ,
            t.getListeners = function(e, i) {
                var r = t.hookers[e];
                return r ? r.listenerMap.get(i) : null
            }
            ,
            t.traverseListener = function(e) {
                var i = t.hookers;
                for (var r in i)
                    t.traverseListenerByType(r, e)
            }
            ,
            t.traverseListenerByType = function(e, i) {
                var r = t.hookers[e];
                r && r.listenerMap.forEach((function(e) {
                    e.forEach((function(e) {
                        i(e)
                    }
                    ))
                }
                ))
            }
            ,
            t.createListeners = function() {
                return {
                    listenerMap: new Map,
                    caches: new Map,
                    conditionalListeners: null
                }
            }
            ,
            t.deleteListeners = function(e) {
                e.listenerMap.forEach((function(e) {
                    e.forEach((function(e) {
                        e.object = null
                    }
                    ))
                }
                )),
                e.listenerMap.clear(),
                e.caches.clear(),
                e.conditionalListeners = null
            }
            ,
            t.removeListenerFromMap = function(e, t) {
                e && e.forEach((function(e) {
                    var i = e.indexOf(t);
                    -1 !== i && e.splice(i, 1)
                }
                ))
            }
            ,
            t.removeListener = function(e, i) {
                var r = i.callback.key
                    , n = e.caches.get(r);
                n && n.removed && e.caches.delete(r),
                t.removeListenerFromMap(e.listenerMap, i),
                t.removeListenerFromMap(e.conditionalListeners, i)
            }
            ,
            t.invokeListener = function(e, t) {
                var i = THING.onBeforeCallEventListener;
                i && i(e, t),
                (t = t || {}).object = t.object || e.object,
                t.data = t.data || e.userData;
                var r = e.callback.call(t.object, t, e.tag)
                    , n = THING.onAfterCallEventListener;
                return n && n(e, t),
                e.once && (e.removed = !0),
                r
            }
            ,
            t.dispatchEvent = function(e, i, r, n, o) {
                for (var s = null, a = 0; a < i.length; a++) {
                    var l = i[a];
                    if (l.removed)
                        a--,
                        t.removeListener(e, l);
                    else if (!(l.paused || o && l.tag != o)) {
                        if (l.selector) {
                            if (l.object && !r.isChildOf(l.object))
                                continue;
                            if (l.selector && !l.selector.test(l.condition, r))
                                continue
                        } else if (l.object && l.object != r)
                            continue;
                        var u = t.invokeListener(l, n);
                        s = s || u
                    }
                }
                return s
            }
            ,
            t.addEventListener = function(i, r, n, o, s, a, l, u) {
                t.hookers[i] = t.hookers[i] || t.createListeners();
                var c = t.hookers[i];
                s && e.removeEventListener(i, r, s);
                var h = {
                    __index: ji++,
                    type: i,
                    object: r,
                    callback: o,
                    tag: s,
                    priority: a,
                    once: l,
                    userData: u,
                    state: new Ti,
                    get removed() {
                        return this.state.has(Ci)
                    },
                    set removed(e) {
                        if (this.state.enable(Ci, e),
                        e) {
                            var t = this.callback.onRemove;
                            t && t()
                        }
                    },
                    get paused() {
                        return this.state.has(Si)
                    },
                    set paused(e) {
                        this.state.enable(Si, e)
                    },
                    get actived() {
                        return !this.removed && !this.paused
                    }
                };
                n && Utils.isString(n) && (h.selector = new Selector,
                h.condition = n),
                t.addListener(c, h);
                var p = THING.onAddEventListener;
                p && p(h)
            }
            ,
            t.removeEventListener = function(e, i, r) {
                var n = t.hookers[e];
                if (n)
                    if (r) {
                        var o = t.getListener(n, i, r);
                        if (!o)
                            return;
                        o.removed = !0;
                        var s = THING.onRemoveEventListener;
                        s && s(o)
                    } else
                        n.listenerMap.forEach((function(e) {
                            e.forEach((function(e) {
                                e.removed = !0;
                                var t = THING.onRemoveEventListener;
                                t && t(e)
                            }
                            ))
                        }
                        ))
            }
            ,
            t.hookers = {}
        }(this)
    }
    return e.prototype.dispose = function() {
        var e = this[Mi];
        for (var t in e.hookers)
            e.deleteListeners(e.hookers[t]);
        e.hookers = {}
    }
    ,
    e.prototype.addEventListener = function(e, t, i, r, n, o, s, a) {
        var l = this[Mi]
            , u = l.parseEvent(i, r, n, o);
        u && l.addEventListener(e, t, u.condition, u.callback, u.tag, u.priority, s, a)
    }
    ,
    e.prototype.removeEventListener = function(e, t, i) {
        this[Mi].removeEventListener(e, t, i)
    }
    ,
    e.prototype.removeAllEventListeners = function(e) {
        this[Mi].traverseListener((function(t) {
            if (t.object == e) {
                t.removed = !0;
                var i = THING.onRemoveEventListener;
                i && i(t)
            }
        }
        ))
    }
    ,
    e.prototype.traverseListener = function(e) {
        this[Mi].traverseListener(e)
    }
    ,
    e.prototype.traverseListenerByType = function(e, t) {
        this[Mi].traverseListenerByType(e, t)
    }
    ,
    e.prototype.getEventListener = function(e, t, i, r) {
        var n = this[Mi].getListeners(e, t);
        if (!n)
            return null;
        for (var o = 0; o < n.length; o++) {
            var s = n[o];
            if (!s.removed && (s.condition == i && (!r || s.tag == r)))
                return s
        }
        return null
    }
    ,
    e.prototype.getEventListeners = function(e, t) {
        var i = this[Mi]
            , r = [];
        if (e) {
            var n = i.getListeners(e, t);
            if (!n)
                return [];
            for (var o = 0; o < n.length; o++) {
                var s = n[o];
                s.removed || (t && s.object != t || r.push(s))
            }
        } else
            i.traverseListener((function(e) {
                e.removed || t && e.object != t || r.push(e)
            }
            ));
        return r
    }
    ,
    e.prototype.dispatchEvent = function(e, t, i, r) {
        var n = this[Mi];
        if (t.destroyed)
            return null;
        var o = n.hookers[e];
        if (!o)
            return null;
        var s = null
            , a = o.listenerMap.get(t);
        if (a) {
            var l = n.dispatchEvent(o, a, t, i, r);
            s = s || l
        }
        var u = o.conditionalListeners;
        return u && u.forEach((function(e) {
            var a = n.dispatchEvent(o, e, t, i, r);
            s = s || a
        }
        )),
        s
    }
    ,
    e.prototype.invokeListener = function(e, t) {
        var i = this[Mi];
        e.actived && i.invokeListener(e, t)
    }
    ,
    e
}();
Ri = Symbol("private");
var Di = function() {
    function e() {
        classCallCheck(this, e),
        function(e, t) {
            e[Ri] = {};
            var i = e[Ri];
            i.sortStates = function() {
                i.states.sort((function(e, t) {
                    return e.priority !== t.priority ? t.priority - e.priority : t.id - e.id
                }
                ))
            }
            ,
            i.updateExistingState = function(e, t, r) {
                for (var n = i.states, o = 0; o < n.length; o++) {
                    var s = n[o];
                    if (s.name == t)
                        return s.value = e,
                        Utils.isNumber(r) && (s.priority = r),
                        i.sortStates(),
                        !0
                }
                return !1
            }
            ,
            i.id = 1,
            i.states = []
        }(this)
    }
    return e.prototype.isAnyEnable = function() {
        for (var e = this[Ri].states, t = 0; t < e.length; t++)
            if (e[t].value)
                return !0;
        return !1
    }
    ,
    e.prototype.has = function(e) {
        for (var t = this[Ri].states, i = 0; i < t.length; i++) {
            if (t[i].name == e)
                return !0
        }
        return !1
    }
    ,
    e.prototype.isEnable = function(e) {
        var t = this[Ri].states;
        if (e)
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                if (r.name == e)
                    return r.value
            }
        else if (t.length)
            return t[0].value;
        return !1
    }
    ,
    e.prototype.enable = function(e, t, i) {
        if (t) {
            var r = this[Ri]
                , n = r.states;
            r.updateExistingState(e, t, i) || (i = Utils.parseValue(i, 0),
            n.push({
                id: r.id++,
                value: e,
                name: t,
                priority: i
            }),
            r.sortStates())
        }
    }
    ,
    e.prototype.clear = function() {
        this[Ri].states = []
    }
    ,
    e.prototype.getValue = function(e) {
        for (var t = this[Ri].states, i = 0; i < t.length; i++) {
            var r = t[i];
            if (r.name == e)
                return r.value
        }
        return null
    }
    ,
    _createClass(e, [{
        key: "states",
        get: function() {
            return this[Ri].states
        }
    }]),
    e
}();
SizeAdjustmentControl = function() {
    function e(t, i) {
        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 60;
        classCallCheck(this, e),
        this.object = null,
        this.app = null,
        2 == t.length ? this._size = Utils.parseVector2(t) : this._size = Utils.parseVector3(t),
        this._node = i,
        this._factor = n
    }
    return e.prototype._updateSize = function(e) {
        if (this.object.visible) {
            var t = Utils.parseVector3(this.app.camera.position);
            this._node.keepSize(t, this._size, this._factor, e, this.object.static, this.app.renderCamera.matrixWorldInverse),
            this.object.synIndependentWorldScale(!1)
        }
    }
    ,
    e.prototype.onAdd = function(e) {
        this.object = e,
        this._node = this._node || this.object.node,
        this.app = e.app,
        this.object.tickable = !0,
        this._node && this._node.updateWorldMatrix(!0),
        this._updateSize()
    }
    ,
    e.prototype.onRemove = function() {}
    ,
    e.prototype.onUpdate = function(e) {
        return this._updateSize(),
        !0
    }
    ,
    _createClass(e, [{
        key: "size",
        set: function(e) {
            this._size = Utils.parseVector2(e),
            this.object.synIndependentWorldScale(),
            this._updateSize(!0)
        },
        get: function() {
            return this._size.toArray()
        }
    }, {
        key: "node",
        set: function(e) {
            this._node = e
        },
        get: function() {
            return this._node
        }
    }]),
    e
}();
ki = Symbol("private");
Oi = function(e) {
    e[ki] = {};
    var t = e[ki];
    return t.onFilter = null,
    t.result = null,
    t
};
Bi = function e() {
    return classCallCheck(this, e),
    Oi(this),
    Array.apply(this, arguments),
    this.length = 0,
    Object.defineProperties(this, {
        length: {
            enumerable: !1
        }
    }),
    this
};
Bi.prototype = new Array,
["push", "pop", "splice", "shift"].forEach((function(e) {
    Bi.prototype[e] = function() {
        var t = this[ki];
        return t.result = null,
        Array.prototype[e].apply(this, arguments)
    }
}
)),
Bi.prototype.concat = function() {
    return [].concat(this.map((function(e) {
        return e
    }
    )))
}

Bi.prototype.clear = function() {
    this.length = 0
}

Bi.prototype.clearResult = function() {
    this[ki].result = null
}

Object.defineProperties(Bi.prototype, {
    push: {
        enumerable: !1
    },
    pop: {
        enumerable: !1
    },
    splice: {
        enumerable: !1
    },
    shift: {
        enumerable: !1
    },
    concat: {
        enumerable: !1
    },
    clear: {
        enumerable: !1
    },
    clearResult: {
        enumerable: !1
    },
    onFilter: {
        get: function() {
            return this[ki].onFilter
        },
        set: function(e) {
            this[ki].onFilter = e
        },
        enumerable: !1,
        configurable: !1
    },
    result: {
        get: function() {
            var e = this[ki];
            return e.result ? e.result : e.onFilter ? (e.result = this.filter(e.onFilter),
            e.result) : this
        },
        enumerable: !1,
        configurable: !1
    }
});
var Fi = new THREE.Vector3
    , Li = new THREE.Vector3
    , Ii = new THREE.Quaternion
    , Ni = new THREE.Vector3
    , Hi = new THREE.Vector3(1,1,1);
Ui = new THREE.Vector3
    , zi = (new THREE.Vector3,
new THREE.Matrix3);
Vi = 1
    , Wi = new THREE.Vector3
    , Gi = new THREE.Vector3
    , qi = new THREE.Quaternion
    , Xi = (new THREE.Quaternion,
new THREE.Matrix4);
Ji = new THREE.Matrix4;
BaseObject = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._type = "",
        this._id = "",
        this._name = "",
        this._uuid = "",
        this._queryID = Vi++,
        this._parent = null,
        this._children = new Bi,
        this._children.onFilter = function(e) {
            return !e.isCombinedObject
        }
        ,
        this.node = new THREE.Group,
        this.renderNode = this.node,
        this._lodNode = null,
        this._lodLevel = -1,
        this._builder = null,
        this._defaultStyle = null,
        this._style = null,
        this._initBoxSize = null,
        this._extensionsFile = null,
        this.anchorNode = null,
        this._ignoreParentScale = !1,
        this._ignoreParentAngles = !1,
        this._grid = null,
        this._boxNode = null,
        this._dragState = DragState.No,
        this._draggable = !1,
        this.isTickable = !1,
        this._catchEventAnyTime = !1,
        this._pickable = !0,
        this._lookingAtObject = null,
        this._stateFlags = new Ti,
        this._independentControlFlags = new Ti,
        this._hideNodesInScene = null,
        this._renderDistance = null,
        this._shadowDistance = null,
        this._localClippingPlanes = [],
        this._clippingPlanes = [],
        this._clippingInWorldSpace = !1,
        this._lockedOffset = [],
        this._independentPosition = null,
        this._independentWorldAngles = null,
        this._independentWorldScale = null,
        this.scaling = !1,
        this.scaleTween = null,
        this.rotating = !1,
        this.rotateTween = null,
        this.fadeTween = null,
        this.pathTween = null,
        this.pathTweens = [],
        this._attachPoints = null,
        this._controls = [],
        this.waitCommands = [],
        this._loadState = e.waitForLoading,
        this._internalUserData = {},
        this._userData = {},
        this._tags = [],
        this._groups = [],
        this._tweens = [],
        this._autoEnsureParentsVisible = !0,
        this._autoSynVisible = !0,
        this._keepSize = !1,
        this._ignoreEvents = null,
        this._visibleGroupStates = new Di,
        this._scaleGroupStates = new Di,
        this._eventTrigger = new Pi(t),
        this._useShadow = !0,
        this.initStaticMembers(),
        this._selfLoadCompleteCallback = [],
        this._loadCompleteCallback = []
    }
    return e.prototype._init = function(e, t) {
        return this._parent = t,
        this.node = e || this.node,
        this.loaded = !0,
        this
    }
    ,
    e.prototype.initStaticMembers = function() {
        e.hasStaticMembers || (e.hasStaticMembers = !0,
        e.waitForLoading = 1,
        e.loading = 2,
        e.loadCompleted = 3,
        e.stateHideBySceneFlag = 1)
    }
    ,
    e.prototype.isBlockMouseOffEvent = function(e) {
        return !1
    }
    ,
    e.prototype.setUserDataFlag = function(e, t) {
        t ? this.node.traverse((function(t) {
            t.userData[e] = !0
        }
        )) : this.node.traverse((function(t) {
            delete t.userData[e]
        }
        ))
    }
    ,
    e.prototype.setupUserData = function(e) {
        e = e || {};
        var t = this.node.userData;
        t.isBaseObject = !0,
        t.id = this._queryID,
        t.withGeometryIDAttributes = e.withGeometryIDAttributes;
        var i = this;
        t.getObject = function() {
            return i.app.objectManager.get(i._queryID)
        }
    }
    ,
    e.prototype.setupNode = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if ("LOD" == e.type && (this._lodNode = e,
        this.tickable = !0),
        e.visible || (e.ensureVisible(!0, !0),
        e.ensureVisible(!1, !1),
        this.visible = !1),
        t) {
            var i = this.node.userData;
            this.node = e,
            this.renderNode = e,
            this.setupUserData(i)
        } else
            this.renderNode = e,
            this.node.add(e)
    }
    ,
    e.prototype.setupName = function(e) {
        this._name = this._name || this._id
    }
    ,
    e.prototype.setupID = function(e) {
        this._id = Utils.parseValue(e.id, this._id),
        this._name = Utils.parseValue(e.name, this._name),
        this._uuid = Utils.parseValue(e.uuid, this._uuid),
        this._id = this._id || this._uuid || this._name,
        this._id || this._uuid || (this._id = THREE.MathUtils.generateUUID()),
        this.setupName(e),
        this.setupCommonInfo(e)
    }
    ,
    e.prototype.setupCommonInfo = function(t) {
        this._internalUserData = t.internalUserData || this._internalUserData,
        this._stateFlags.enable(e.stateHideBySceneFlag, t.hideByScene),
        this._userData = t.properties || t.userData || {},
        this._tags = t.tags || [],
        t.forceBoundingBox && (this.node.userData.forceBoundingBox = !0);
        var i = Utils.parseValue(t.inheritStyle, !0);
        this.inheritStyle != i && (this.inheritStyle = i);
        var r = Utils.parseValue(t.inheritTheme, !0);
        this.inheritTheme != r && (this.inheritTheme = r),
        this.inheritVisible = Utils.parseValue(t.inheritVisible, !0)
    }
    ,
    e.prototype._setupLocalPosition = function(e) {
        var t = e.localPosition
            , i = e.ignoreParentScale;
        t && this.setLocalPosition(t, i)
    }
    ,
    e.prototype.setupTranslation = function(t) {
        if (this._ignoreParentScale = Utils.parseValue(t.ignoreParentScale, !1),
        this._ignoreParentAngles = Utils.parseValue(t.ignoreParentAngles, !1),
        !t.skipSetupTranslation) {
            var i = e.DefaultPosition || {}
                , r = e.DefaultAngles || {}
                , n = e.DefaultScale || {}
                , o = t.position || i[this._type];
            o ? this.position = o : t.basePoint || this._setupLocalPosition(t);
            var s = t.angle;
            if (s)
                this.angles = [0, s, 0];
            else {
                var a = t.angles || t.localAngles || r[this._type];
                a && (this.angles = a)
            }
            var l = t.quaternion;
            l && (this.quaternion = l);
            var u = t.scale || n[this._type];
            u && this.node.scale.copy(Utils.parseVector3(u)),
            this.synIndependentWorldScale(!0, t.inheritScale)
        }
        var c = t.initBoxSize;
        c && (this._initBoxSize = c.concat())
    }
    ,
    e.prototype.setupEnvMap = function(e) {
        var t = this.getEnvMapResources();
        if (t) {
            var i = e || this.isOutdoors;
            void 0 === i && (i = !!this.isCombinedObject && this.isChildOfType("Facade|Ground")),
            i ? t.outdoorsEnvMap && this.traverseAllSelfNodes((function(e) {
                if (!e.userData.skipEnvMap && e.material && e.isMesh)
                    if (Array.isArray(e.material))
                        e.material.map((function(e) {
                            if ("envMap"in e) {
                                if (e.relaPosType && "Outdoor" !== e.relaPosType) {
                                    var i = e.clone();
                                    return i.envMap = t.outdoorsEnvMap,
                                    i.envMap.refCount = i.envMap.refCount || 1,
                                    i.envMap.refCount++,
                                    i.envMapIntensity = 1.3,
                                    i.relaPosType = "Outdoor",
                                    i
                                }
                                return e.envMap = t.outdoorsEnvMap,
                                e.envMap.refCount = e.envMap.refCount || 1,
                                e.envMap.refCount++,
                                e.envMapIntensity = 1.3,
                                e.relaPosType = "Outdoor",
                                e
                            }
                            return e
                        }
                        ));
                    else if ("envMap"in e.material)
                        if (e.material.relaPosType && "Outdoor" !== e.material.relaPosType) {
                            var i = e.material.clone();
                            i.envMap = t.outdoorsEnvMap,
                            i.envMap.refCount = i.envMap.refCount || 1,
                            i.envMap.refCount++,
                            i.envMapIntensity = 1.3,
                            i.relaPosType = "Outdoor",
                            e.material = i
                        } else
                            e.material.envMap = t.outdoorsEnvMap,
                            e.material.envMap.refCount = e.material.envMap.refCount || 1,
                            e.material.envMap.refCount++,
                            e.material.envMapIntensity = 1.3,
                            e.material.relaPosType = "Outdoor"
            }
            )) : t.indoorsEnvMap && this.traverseAllSelfNodes((function(e) {
                if (!e.userData.skipEnvMap && e.material && e.isMesh)
                    if (Array.isArray(e.material))
                        e.material.map((function(e) {
                            if ("envMap"in e) {
                                if (e.relaPosType && "Indoor" !== e.relaPosType) {
                                    var i = e.clone();
                                    return i.envMap = t.indoorsEnvMap,
                                    i.envMap.refCount = i.envMap.refCount || 1,
                                    i.envMap.refCount++,
                                    i.envMapIntensity = 1.3,
                                    i.relaPosType = "Indoor",
                                    i
                                }
                                return e.envMap = t.indoorsEnvMap,
                                e.envMap.refCount = e.envMap.refCount || 1,
                                e.envMap.refCount++,
                                e.envMapIntensity = 1.3,
                                e.relaPosType = "Indoor",
                                e
                            }
                            return e
                        }
                        ));
                    else if ("envMap"in e.material)
                        if (e.material.relaPosType && "Indoor" !== e.material.relaPosType) {
                            var i = e.material.clone();
                            i.envMap = t.indoorsEnvMap,
                            i.envMap.refCount = i.envMap.refCount || 1,
                            i.envMap.refCount++,
                            i.envMapIntensity = 1.3,
                            i.relaPosType = "Indoor",
                            e.material = i
                        } else
                            e.material.envMap = t.indoorsEnvMap,
                            e.material.envMap.refCount = e.material.envMap.refCount || 1,
                            e.material.envMap.refCount++,
                            e.material.envMapIntensity = 1.3,
                            e.material.relaPosType = "Indoor"
            }
            ))
        }
    }
    ,
    e.prototype.loadFromURL = function(e, t) {
        t && t()
    }
    ,
    e.prototype.setupFromURL = function(t) {
        var i = t.dynamic;
        if (this._dynamic = i,
        this._dynamic)
            this._url = Utils.parseValue(t.url, this._url),
            this.param = t,
            this.param.url = this._url,
            this._setup(t),
            this._loadState = e.waitForLoading;
        else if (t.node)
            this._url = Utils.parseValue(t.url, this._url),
            this._setup(t);
        else {
            var r = this;
            this.loadFromURL(t, (function() {
                r._setup(t)
            }
            ))
        }
    }
    ,
    e.prototype.setupFromData = function(e) {
        this._setup(e)
    }
    ,
    e.prototype.setupChildVisibleAsParent = function(e, t) {}
    ,
    e.prototype.setupVisible = function(e) {
        this._autoEnsureParentsVisible = Utils.parseValue(e.autoEnsureParentsVisible, !0),
        this._autoSynVisible = Utils.parseValue(e.autoSynVisible, !0);
        var t = e.visible;
        if (!Utils.isNull(t)) {
            this.visible = t;
            var i = e.parent;
            i && t && this._autoEnsureParentsVisible && (i.node.visible = t,
            i.node.ensureParentsVisible(t))
        }
    }
    ,
    e.prototype._setup = function(e) {
        var t = e.node;
        t && this.setupNode(t, Utils.parseValue(e.nodeOverride, !0)),
        this.setupCommonInfo(e),
        this.setupUserData(e),
        this.setupParent(e),
        this.customSetup(e),
        this.setupComplete(e)
    }
    ,
    e.prototype.setup = function(e) {
        this._beforeSetup(e),
        this.loading = !0,
        this.setupID(e),
        this.setupVisible(e);
        var t = e.url
            , i = e.data
            , r = e.domElement;
        t ? (e.url = this.app.confirmURL(t)._trimRight("/"),
        this.setupFromURL(e)) : r ? this.setupFromDom(e) : i ? this.setupFromData(e) : this._setup(e)
    }
    ,
    e.prototype._beforeSetupStyle = function(e) {}
    ,
    e.prototype._afterSetupStyle = function(e) {}
    ,
    e.prototype.setupStyle = function(e) {
        var t = e.style;
        if (t) {
            for (var i in this._beforeSetupStyle(e),
            t) {
                var r = t[i];
                void 0 !== r && (this.style[i] = r)
            }
            this._afterSetupStyle(e)
        }
        var n = e.keepSize;
        n && (this.keepSize = n)
    }
    ,
    e.prototype.setupMaterials = function(e) {
        if (!Utils.parseValue(e.lights, !0)) {
            var t = this.node.getMeshes();
            this.node.getMaterials().forEach((function(e) {
                var i = new THREE.MeshBasicMaterial;
                i.copy(e),
                i.defines = {},
                i.lights = !1,
                i.needsUpdate = !0,
                t.forEach((function(t) {
                    if (Utils.isArray(t.material))
                        for (var r = 0; r < t.material.length; r++) {
                            var n = t.material[r];
                            n == e && (n.dispose(),
                            t.material[r] = i)
                        }
                    else
                        t.material == e && (t.material.dispose(),
                        t.material = i)
                }
                ))
            }
            ))
        }
    }
    ,
    e.prototype.setupResources = function(e) {
        if (this.loaded = Utils.parseValue(e.loaded, !0),
        this.loaded) {
            if (this.setupCommands(e),
            this._processModel(!0, !0),
            this.dataToRecover) {
                this._setupResources(this.dataToRecover),
                this._resettingStyle = !0;
                var t = this.style
                    , i = this.dataToRecover.style;
                ["color", "opacity", "outlineColor", "alwaysOnTop", "renderOrder"].forEach((function(e) {
                    t[e] != i[e] && (t[e] = i[e])
                }
                )),
                delete this._resettingStyle,
                delete this.dataToRecover
            }
            for (this._boxNode && this._boxNode.removeBySelf(); this._loadCompleteCallback && this._loadCompleteCallback.length > 0; ) {
                var r = this._loadCompleteCallback.shift();
                r && r({
                    object: this
                })
            }
        }
        this.trigger("setupResources")
    }
    ,
    e.prototype._setupResources = function(e) {}
    ,
    e.prototype._synFrom = function(e) {
        if (!e.isBaseObject)
            return !1;
        this._visibleGroupStates.clear();
        for (var t = e._visibleGroupStates.states, i = 0; i < t.length; i++) {
            var r = t[i];
            this._setVisible(r.value, r.name)
        }
        return !0
    }
    ,
    e.prototype.setupCommands = function(e) {
        if (this._style && Utils.isFunction(this._style._syn) && this._style._syn(),
        this.loaded && this.waitCommands.length) {
            var t = this.app.commandManager.create(this.waitCommands);
            t && t.execute(),
            this.waitCommands = []
        }
    }
    ,
    e.prototype.setupInheritAttributes = function(e) {
        var t = Utils.parseValue(e.inheritPosition, !0)
            , i = Utils.parseValue(e.inheritAngles, !0)
            , r = Utils.parseValue(e.inheritScale, !0);
        this.inheritPosition == t && this.inheritAngles == i && this.inheritScale == r || (t && i && r || this.node.updateMatrixWorld(),
        this.inheritPosition = t,
        this.inheritAngles = i,
        this.inheritScale = r,
        this.synIndependentWorldPosition(),
        this.synIndependentWorldAngles(),
        this.synIndependentWorldScale()),
        Utils.parseValue(e.inheritPickable, !0) || (this.inheritPickable = !1)
    }
    ,
    e.prototype.setupParent = function(e) {
        if (!e.skipSetupParent && !e.independent) {
            var t = e.parent;
            if (t && (t.isBaseObject ? this._parent = t : THING.Utils.error("[BaseObject] Please make sure parent is BaseObject")),
            null == this._parent && void 0 === t && (this._parent || (this._parent = this.app.root)),
            this._parent) {
                if (this._parent._style && this._parent._style._inheritThemeName && this.inheritTheme && this.applyTheme(this._parent._style._inheritThemeName, !1),
                this._parent.children && this._parent.children.indexOf(this) > -1)
                    return;
                this._parent._add(this, e, -1)
            }
        }
    }
    ,
    e.prototype.customSetup = function(e) {}
    ,
    e.prototype._beforeSetup = function(e) {}
    ,
    e.prototype._notifyCompleteEvent = function(t) {
        this._stateFlags.has(e.stateHideBySceneFlag) && (this._hideByScene = !0);
        var i = this;
        Utils.timer.setTimeout((function() {
            i.trigger("load", {
                object: i
            }),
            i.trigger("complete", {
                object: i
            })
        }
        ), 1)
    }
    ,
    e.prototype._callComplete = function(e) {
        this._dynamic ? this.loaded = !1 : this.loaded = Utils.parseValue(e.loaded, !0),
        this.queryID && this.app.objectManager.objects.set(this.queryID, this),
        this._notifyCompleteEvent(e),
        Utils.parseValue(e.queryable, !0) || (this.canNotQueryFromSelector = !0),
        this.trigger(EventType.Create, {
            object: this
        }),
        this.app.trigger(EventType.Create, {
            object: this
        });
        var t = e.successCallback || e.complete;
        t && t.call(this, {
            object: this
        }),
        this.app.needUpdate = !0,
        this._ignoreParentScale = null,
        this._ignoreParentAngles = null
    }
    ,
    e.prototype._beforeSetupComplete = function(e) {}
    ,
    e.prototype._afterSetupComplete = function(e) {}
    ,
    e.prototype.useBottomCenterOfBoundingBoxAsPosition = function() {
        var e = this.boundingBox
            , t = e.center
            , i = e.size
            , r = this.node.children.map((function(e) {
            var t = new THREE.Vector3;
            return e.getWorldPosition(t),
            t
        }
        ));
        this.position = t,
        this.translateY(-i[1] / 2),
        this.node.updateMatrixWorld();
        for (var n = 0; n < this.node.children.length; n++) {
            this.node.children[n]._setWorldPosition(r[n])
        }
    }
    ,
    e.prototype.setupComplete = function(e) {
        this.loaded = Utils.parseValue(e.loaded, !0),
        this._userData = this._userData || {},
        this._internalUserData = this._internalUserData || {},
        this.setupTranslation(e),
        this.setupInheritAttributes(e),
        this._beforeSetupComplete(e),
        this.setupStyle(e),
        this.setupEnvMap(),
        this.setupMaterials(e),
        this.setupResources(e),
        this.setupCommands(e),
        this.static ? this.node._synMatrixWorld() : this.node.updateWorldMatrix(!1, !1),
        this._afterSetupComplete(e),
        this.selfUpdate(),
        this._callComplete(e)
    }
    ,
    e.prototype.setParent = function(e, t, i) {
        var r = this._parent;
        if (r && r != e && r.remove(this, !1, t),
        this._parent = e,
        e) {
            var n = e.node;
            t || !this.node.parent ? n && n.add(this.node) : this.node.attachToParent(n, this.app.scene, i),
            this._style && this._style.alwaysOnTop && this._style._setAlwaysOnTop(!0)
        }
    }
    ,
    e.prototype.synTickableObject = function() {
        this.isTickable ? this.app.objectManager.addTickableObject(this) : this.app.objectManager.removeTickableObject(this)
    }
    ,
    e.prototype._setDirtyFlag = function(e, t) {
        if (this._boundingBoxControl && (this._boundingBoxControl.dirty = !0),
        e)
            for (var i = this.parent; i; i = i.parent)
                i._boundingBoxControl && (i._boundingBoxControl.dirty = !0);
        t && this._children.forEach((function(e) {
            e._setDirtyFlag(!1, !0)
        }
        ))
    }
    ,
    e.prototype.getChildByPath = function(e, t) {
        var i = e.search("/");
        if (-1 !== i)
            i = e.substring(0, i),
            e = e.substring(i.length + 1);
        else if (i = e,
        t) {
            if (t(this, i))
                return this
        } else if (this._id == i)
            return this;
        for (var r = 0; r < this._children.length; r++) {
            var n = this._children[r]
                , o = null;
            if (t ? t(n, i) && (o = n) : n.id == i && (o = n),
            o) {
                var s = o.getChildByPath(e);
                if (s)
                    return s
            }
        }
        return null
    }
    ,
    e.prototype._getBasePointNode = function(e) {
        var t = this.node.traverseBreakable((function(t) {
            return t.name.contains(e)
        }
        ));
        return t || (t = this.node.traverseBreakable((function(t) {
            return t.name == e
        }
        ))),
        t
    }
    ,
    e.prototype._addFromCampus = function(e) {}
    ,
    e.prototype.add = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
        if ((e = e || {}).isBaseObject) {
            if (e.parent == this)
                return !1;
            this._add(e, null, t)
        } else {
            var i = e.url;
            if (Utils.isString(i)) {
                var r = e.position || this.position
                    , n = e.angles || e.localAngles || this.angles
                    , o = Utils.parseValue(e.isCamFitScene, !1)
                    , s = e.complete
                    , a = this;
                this.app.create({
                    type: "Campus",
                    url: i,
                    position: r,
                    angles: n,
                    isCamFitScene: o,
                    complete: function(e) {
                        var t = e.object;
                        a._addFromCampus(t),
                        t.destroy(),
                        a.dirty = !0,
                        s && s(),
                        this.app.trigger("addFromCampusComplete")
                    }
                })
            } else {
                var l = e.object;
                if (!Utils.isNull(l)) {
                    if (l.parent == this)
                        return !1;
                    this._add(l, e, t)
                }
            }
        }
    }
    ,
    e.prototype._add = function(e, t, i) {
        if (!e)
            return !1;
        if (!e.isBaseObject)
            return !1;
        e._builder || (e._builder = this.builder);
        var r = (t = t || {}).basePoint
            , n = t.offset || t.localPosition
            , o = t.angles || t.localAngles
            , s = Utils.parseValue(t.keepNode, !1)
            , a = Utils.parseValue(t.keepVisible, !0);
        if (this.node.updateWorldMatrix(!0, !1),
        s) {
            var l = e.parent;
            if (l) {
                var u = l._children.indexOf(e);
                -1 !== u && l._children.splice(u, 1)
            }
            e._parent = this
        } else {
            var c = Utils.parseValue(t.keepLocalPosition || t.node, !1)
                , h = Utils.parseValue(t.force || t.position || t.angles || t.scale, !1);
            e.setParent(this, c, h)
        }
        var p = void 0;
        if (Utils.isString(r)) {
            if (!(p = this._getBasePointNode(r)))
                return THING.Utils.error("The '" + r + "' basePoint is not existing"),
                !1;
            var d = new THREE.Vector3;
            p.getWorldPosition(d),
            e.position = d.toArray(),
            n && (e.position = THING.Math.addVector(e.position, n))
        } else
            n && (e.localPosition = n);
        return o && (e.angles = o),
        e._setDirtyFlag(!0, !1),
        i >= this._children.length || -1 === i ? this._children.push(e) : this._children.splice(i, 0, e),
        p && e.node.attachToParent(p, !0),
        e.node.userData.removedNode && (e.node.visible = !0,
        delete e.node.userData.removedNode),
        this._style && e.inheritStyle && e._syncStyleFrom(this),
        a && (this.visible || (e.visible = this.visible)),
        Utils.parseValue(t.inheritPickable, e.inheritPickable) && e.pickable != this.pickable && (e.pickable = this.pickable),
        !0
    }
    ,
    e.prototype._syncStyleFrom = function(e) {
        var t = this
            , i = e.style;
        ["wireframe", "color", "opacity", "emissive", "roughness", "outlineColor", "skipBoundingBox", "skipOutline", "glow", "innerGlow", "lineBloom", "radialBlur", "radialBlur2", "radialOffset", "focusRegion", "vertexNormalHelper", "axisHelper", "edgeColor", "alwaysOnTop", "doubleSide"].forEach((function(e) {
            var r = i[e];
            r && ("opacity" == e && 1 == r || (t.style[e] = r))
        }
        ))
    }
    ,
    e.prototype.remove = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (!e)
            return !1;
        if (!e.isBaseObject)
            return !1;
        if (!e.isChildOf(this))
            return !1;
        e._setDirtyFlag(!0, !1),
        e.node.updateWorldMatrix(!0, !1);
        var r = e.node.getParents();
        -1 !== r.indexOf(this.app.scene) && (i ? this.app.scene.add(e.node) : e.node.attachToParent(this.app.scene, !1),
        t && (e.node.visible = !1,
        e.node.userData.removedNode = !0)),
        e._parent = null;
        var n = this._children.indexOf(e);
        return -1 !== n && this._children.splice(n, 1),
        !0
    }
    ,
    e.prototype.swapChild = function(e, t) {
        var i = this._children.indexOf(e)
            , r = this._children.indexOf(t);
        -1 !== i && -1 !== r && THING.Math.swapArray(this._children, i, r)
    }
    ,
    e.prototype.hasChild = function(e) {
        if (!e)
            return !!this._children.length;
        for (var t = 0; t < this._children.length; t++) {
            if (this._children[t] == e)
                return !0
        }
        return !1
    }
    ,
    e.prototype.destroy = function() {
        var e = this
            , t = this._notifyDestroy;
        t && t.call(this),
        this.pickable = !1,
        this.clearNode();
        var i = this.builder;
        i && (i.disposeObject && i.disposeObject(this._uuid, !1),
        this.isCampus && i.clearAllResources && i.clearAllResources()),
        this.stopMoving(),
        this.stopRotating(),
        this.stopScaling(),
        this.stopFade(),
        this.stopAllLerpTo();
        var r = this._style;
        r && (r.isBaseStyle && (r.alwaysOnTop = !1,
        r._traverse((function(t) {
            e.app.effectManager.clearAllEffects(t)
        }
        )),
        r.setEdgeWireframe(null),
        r.revertMaterial()),
        r._obj = null),
        this.tickable = !1,
        this.removeAllControls(!1),
        this.app.objectManager.destroy(this);
        for (var n = this._children.concat(), o = 0; o < n.length; o++)
            n[o].destroy();
        this._children.clear(),
        this.clearAttachPoints(),
        this._parent && (this._parent.remove(this),
        this._parent = null),
        this.node.parent && this.node.parent.remove(this.node),
        this.app.events.unbindCallObj(null, null, null, [this]),
        this._eventTrigger.dispose(),
        this._lodNode = null,
        this._queryID = 0,
        delete this.node.userData.getObject,
        this.app.needUpdate = !0,
        this._builder = null,
        this._style && (this._style.obj = null,
        this._style = null),
        this._defaultStyle && (this._defaultStyle.obj = null,
        this._defaultStyle = null)
    }
    ,
    e.prototype.getRaycastPosition = function(e) {
        if (!e)
            return null;
        var t = new THREE.Raycaster;
        t.ray.origin = Utils.parseVector3(this.position),
        t.ray.direction = Utils.parseVector3(e);
        var i = t.intersectObject(this.app.scene, !0);
        if (!i.length)
            return null;
        for (var r = 0; r < i.length; r++) {
            var n = i[r]
                , o = n.object;
            if (this.app.objectManager.getBaseObject(o) && !o.isChildOf(this.node))
                return n.point.toArray()
        }
        return null
    }
    ,
    e.prototype.removePickingResources = function() {
        this.app.picker.removePickingResources(this.node)
    }
    ,
    e.prototype.setPickable = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this._pickable = e;
        var i = this;
        if (this._traverseSelfNodes((function(t) {
            t.setPickable(e, !1),
            e || i.app.picker.removePickingResources(t)
        }
        )),
        i.app.picker.forceUpdate = !0,
        t)
            for (var r = 0; r < this._children.length; r++) {
                var n = this._children[r];
                n.inheritPickable && (n.pickable = e)
            }
    }
    ,
    e.prototype.synPickable = function() {
        this.setPickable(this._pickable)
    }
    ,
    e.prototype.localToSelf = function(e) {
        return this.worldToSelf(this.localToWorld(e))
    }
    ,
    e.prototype.selfToLocal = function(e) {
        return this.worldToLocal(this.selfToWorld(e))
    }
    ,
    e.prototype.worldToSelf = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , i = Utils.parseVector3(e);
        return this.node.updateWorldMatrix(!0),
        t ? (this.node.matrixWorld.decompose(Wi, qi, Gi),
        Xi.compose(Wi, qi, Gi.set(1, 1, 1)),
        Ji.getInverse(Xi),
        Wi.fromArray(e).applyMatrix4(Ji).toArray()) : this.node.worldToLocal(i).toArray()
    }
    ,
    e.prototype.selfToWorld = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        e = Utils.parseVector3(e);
        if (this.node.updateWorldMatrix(!0),
        t) {
            var r = new THREE.Vector3
                , n = new THREE.Vector3
                , o = new THREE.Quaternion;
            this.node.matrixWorld.decompose(r, o, n);
            var s = new THREE.Matrix4;
            return s.compose(r, o, i ? this.node.parent._getWorldScale() : new THREE.Vector3(1,1,1)),
            e.applyMatrix4(s).toArray()
        }
        return this.node.localToWorld(e).toArray()
    }
    ,
    e.prototype.localToWorld = function(e) {
        return this._parent ? this._parent.selfToWorld(e) : this.node.localToWorld(Utils.parseVector3(e)).toArray()
    }
    ,
    e.prototype.worldToLocal = function(e) {
        if (this._parent)
            return this._parent.worldToSelf(e);
        var t = Utils.parseVector3(e);
        return this.node.worldToLocal(t).toArray()
    }
    ,
    e.prototype.distanceTo = function(e) {
        return e ? (e.isBaseObject && (e = e.position),
        Utils.parseVector3(this.position).distanceTo(Utils.parseVector3(e))) : 0
    }
    ,
    e.prototype._lookAtPosition = function() {
        this.node._lookAtPosition(this._lookingAtObject, this.static),
        this.synIndependentWorldAngles()
    }
    ,
    e.prototype.lookAt = function(e, t) {
        if (e) {
            var i, r, n;
            if (t = t || {},
            Utils.isArray(t) ? i = t : (i = t.angles,
            r = Utils.parseValue(t.lockYAxis, !1)),
            e.isBaseObject ? n = e.position : e.isCameraController ? n = e.cameraObject.position : (n = e,
            e = null),
            !n)
                return void THING.Utils.error("lookAt failed, due to target is not existing");
            var o = Utils.parseValue(t.always, !0);
            if (this._lookingAtObject = {
                target: e,
                targetPosition: Utils.parseVector3(n),
                type: "axis",
                axis: r ? "y" : null,
                quat: Utils.parseQuaternion(i)
            },
            this.node.quaternion.set(0, 0, 0, 1),
            this.node.updateWorldMatrix(!0, !1),
            this.node.up.set(0, 1, 0),
            e && e.isCameraController) {
                var s = this.parents.query(".Campus")[0];
                if (s) {
                    var a = s.up;
                    this.node.up.set(a[0], a[1], a[2])
                }
            }
            o ? this.tickable = !0 : (this._lookAtPosition(),
            this._lookingAtObject = null),
            this.selfUpdate(),
            this._updateLookAt()
        } else
            this._lookingAtObject = null,
            this.node.up.set(0, 1, 0)
    }
    ,
    e.prototype.rotate = function(e, t) {
        var i = THING.Math.degToRad(e);
        (t = Utils.parseVector3(t || [0, 1, 0])).normalize(),
        this.node.rotateOnAxis(t, i),
        this.synIndependentWorldAngles(),
        this.dirty = !0
    }
    ,
    e.prototype.rotateX = function(e) {
        isNaN(e) || (this.node.rotateX(THING.Math.degToRad(e)),
        this._synWorldAngles())
    }
    ,
    e.prototype.rotateY = function(e) {
        isNaN(e) || (this.node.rotateY(THING.Math.degToRad(e)),
        this._synWorldAngles())
    }
    ,
    e.prototype.rotateZ = function(e) {
        isNaN(e) || (this.node.rotateZ(THING.Math.degToRad(e)),
        this._synWorldAngles())
    }
    ,
    e.prototype.rotateAround = function(e) {
        var t = (e = e || {}).object
            , i = e.target
            , r = Utils.parseValue(e.yRotateAngle || e.angle, 0)
            , n = Utils.parseValue(e.xRotateAngle, 0)
            , o = e.time
            , s = e.speed
            , a = Utils.parseLoopType(e.loopType)
            , l = e.stop
            , u = e.update
            , c = e.complete;
        if (i && (i.isBaseObject ? (t = i,
        i = null) : i = Utils.parseVector3(i)),
        o) {
            if (s = 0,
            !r && !n)
                return void THING.Utils.error("Please provide yRotateAngle or xRotateAngle to rotate around object")
        } else
            s ? o = 16777215 : r || n ? (s = 0,
            o = 1e3) : (s = 10,
            o = 16777215);
        var h = Utils.parseVector3(this.position)
            , p = new THREE.Spherical
            , d = h.clone()
            , f = i || Utils.parseVector3(t.position);
        d.sub(f),
        p.setFromVector3(d),
        this.stopRotating(),
        this.rotating = !0;
        var m = this.position
            , g = new THREE.Vector3
            , v = p.theta
            , y = p.phi
            , b = this
            , _ = function() {
            a == THREE.LoopOnce ? c && c() : a == THREE.LoopRepeat ? (b.position = m,
            b.rotateAround(e)) : a == THREE.LoopPingPong && (void 0 !== r && (e.yRotateAngle = -r),
            void 0 !== n && (e.xRotateAngle = -n),
            b.rotateAround(e))
        }
            , x = function() {
            var e = !1;
            if (s) {
                var o = r > 0 ? s : -1 * s;
                p.theta += o / 1e3;
                var a = v + THING.Math.degToRad(r);
                r > 0 ? p.theta >= a && (p.theta = a,
                e = !0) : p.theta <= a && (p.theta = a,
                e = !0)
            } else {
                var c = this._object.progress;
                r && (p.theta = v + c * THING.Math.degToRad(r)),
                n && (p.phi = y + c * THING.Math.degToRad(n))
            }
            var h = i ? i.clone() : Utils.parseVector3(t.position);
            if (p.radius = b.distanceTo(h.toArray()),
            p.makeSafe(),
            g.setFromSpherical(p),
            h.add(g),
            b.node.position.copy(h),
            u && u(),
            e) {
                var d = l;
                l = null,
                this.stop(),
                l = d,
                _.call(this)
            }
        };
        this.rotateTween = new TWEEN.Tween({
            progress: 0
        }).to({
            progress: 1
        }, o).easing(LerpType.Linear.None).onStop((function() {
            l && l()
        }
        )).onUpdate((function() {
            x.call(this)
        }
        )).onComplete((function() {
            _.call(this)
        }
        )),
        this.rotateTween.start()
    }
    ,
    e.prototype.rotateOnWorldAxis = function(e) {
        e = e || {};
        var t = Utils.parseVector3(e.axis)
            , i = e.angle;
        if (t && i) {
            t.normalize();
            var r = THING.Math.degToRad(i);
            this.node.rotateOnWorldAxis(t, r),
            this.static && this.node._synMatrixWorld()
        }
    }
    ,
    e.prototype.rotateTo = function(e) {
        var t = (e = e || {}).quaternion
            , i = e.angles || e.localAngles
            , r = e.time
            , n = e.speed
            , o = e.lerpType || LerpType.Linear.None
            , s = e.loopType || LoopType.No
            , a = e.complete;
        if (t) {
            var l = this.node.quaternion.clone()
                , u = t
                , c = new THREE.Quaternion
                , h = Utils.getConsumeTimeByDistance(null, 100, r, n, 2e3);
            n && (o = LerpType.Linear.None),
            this.stopRotating(),
            this.rotating = !0;
            var p = this;
            this.rotateTween = new TWEEN.Tween({
                progress: 0
            }).to({
                progress: 1
            }, h).easing(o).onUpdate((function() {
                var e = this._object.progress;
                c.copy(l),
                c.slerp(u, e),
                p.angles = Utils.parseAngles(c)
            }
            )).onComplete((function() {
                s == LoopType.Repeat ? (p.angles = Utils.parseAngles(l),
                p.rotateTo(e)) : s == LoopType.PingPong ? (e.quaternion = l,
                p.rotateTo(e)) : a && a.call(p, {
                    object: p
                })
            }
            )).start()
        } else if (i) {
            var d = Utils.parseVector3(this.angles)
                , f = d.clone()
                , m = Utils.parseVector3(i)
                , g = Utils.getConsumeTime(null, d, m, r, n, 2e3);
            this.stopRotating(),
            this.rotating = !0;
            var v = this;
            this.rotateTween = new TWEEN.Tween(d).to(m, g).easing(o).onUpdate((function() {
                v.angles = [this._object.x, this._object.y, this._object.z]
            }
            )).onComplete((function() {
                s == LoopType.Repeat ? (v.angles = f.toArray(),
                v.rotateTo(e)) : s == LoopType.PingPong ? (e.angles = f.toArray(),
                v.rotateTo(e)) : a && a.call(v, {
                    object: v
                })
            }
            )).start()
        }
    }
    ,
    e.prototype.stopRotating = function() {
        this.rotating = !1,
        this.rotateTween && this.rotateTween.stop()
    }
    ,
    e.prototype.scaleTo = function(e) {
        var t = (e = e || {}).scale || [1, 1, 1]
            , i = e.time
            , r = e.speed
            , n = e.lerpType || LerpType.Linear.None
            , o = e.loopType || LoopType.No
            , s = e.complete;
        t[2] = t[2] || 1;
        var a = Utils.parseVector3(this.scale)
            , l = a.clone()
            , u = Utils.parseVector3(t)
            , c = Utils.getConsumeTime(null, a, u, i, r, 2e3);
        this.stopScaling(),
        this.scaling = !0;
        var h = this;
        this.scaleTween = new TWEEN.Tween(a).to(u, c).easing(n).onUpdate((function() {
            h.scale = [this._object.x, this._object.y, this._object.z]
        }
        )).onStop((function() {}
        )).onComplete((function() {
            o == LoopType.Repeat ? (h.scale = l.toArray(),
            h.scaleTo(e)) : o == LoopType.PingPong ? (e.scale = l.toArray(),
            h.scaleTo(e)) : s && s.call(h, {
                object: h
            })
        }
        )).start()
    }
    ,
    e.prototype.stopScaling = function() {
        this.scaling = !1,
        this.scaleTween && this.scaleTween.stop()
    }
    ,
    e.prototype.canAcceptEvent = function(e) {
        var t = e.type
            , i = e.object;
        if ("update" == t)
            return this;
        if (A[t])
            return this;
        if (i) {
            if ("drag" == t && this.app.events.eventProcessor._draggingObject == this)
                return this;
            if (i.isChildOf(this)) {
                if ("mouseover" == t)
                    return this;
                if ("mousedown" == t)
                    return this;
                if ("mouseup" == t)
                    return this
            }
        }
        return null
    }
    ,
    e.prototype._createDispatchEvent = function(e) {
        var t = this.app.events
            , i = {};
        if (D[e]) {
            var r = t.mouseMovePos;
            i = t.createMouseEvent(e, {
                clientX: r[0],
                clientY: r[1]
            })
        }
        return i
    }
    ,
    e.prototype._isAppEvent = function(e) {
        return -1 !== ["drag", "dragging", "keydown", "keypress", "keyup"].indexOf(e)
    }
    ,
    e.prototype._on = function(e, t, i, r, n, o, s) {
        if (!(e = Utils.toLowerCase(e)))
            return THING.Utils.error("event type is invalid, please check it"),
            null;
        var a = Utils.parseEvent(t, i, r, n, o);
        return a ? a.selector || this._isAppEvent(e) ? this.app.events.bindCallObj(e, a.selector, a.userData, a.callback, [this], a.tag, s, a.priority) : ("update" == e && (this.tickable = !0),
        this._eventTrigger.addEventListener(e, this, null, a.callback, a.tag, a.priority, s, a.userData)) : null
    }
    ,
    e.prototype._off = function(e, t, i) {
        e = Utils.toLowerCase(e);
        var r = Utils.parseEvent(t, null, i);
        return r ? r.selector ? this.app.events.unbindCallObj(e, r.selector, r.callback, [this]) : this._eventTrigger.removeEventListener(e, this, r.tag) : null
    }
    ,
    e.prototype._pauseEvent = function(e, t, i, r) {
        if (e = Utils.toLowerCase(e),
        t)
            this.app.events.pauseEvent(e, t, i, r, this);
        else {
            this.parent && this.parent.pauseEvent(e, this, i, r);
            var n = this._eventTrigger.getEventListener(e, this, null, i);
            n && (n.paused = !0)
        }
    }
    ,
    e.prototype._resumeEvent = function(e, t, i) {
        if (e = Utils.toLowerCase(e),
        t)
            this.app.events.resumeEvent(e, t, i, this);
        else {
            this.parent && this.parent.resumeEvent(e, this, i);
            var r = this._eventTrigger.getEventListener(e, this, null, i);
            r && (r.paused = !1)
        }
    }
    ,
    e.prototype.on = function(e, t, i, r, n, o) {
        for (var s = this._on(e, t, i, r, n, o), a = 0; a < this._controls.length; a++) {
            var l = this._controls[a].control;
            Utils.isFunction(l.onRegisterEvent) && l.onRegisterEvent(e, s)
        }
        return this
    }
    ,
    e.prototype.off = function(e, t, i) {
        this.resumeEvent(e, t, i);
        for (var r = this._off(e, t, i), n = 0; n < this._controls.length; n++) {
            var o = this._controls[n].control;
            Utils.isFunction(o.onUnregisterEvent) && o.onUnregisterEvent(e, r)
        }
        return this
    }
    ,
    e.prototype.one = function(e, t, i, r, n, o) {
        for (var s = this._on(e, t, i, r, n, o, !0), a = 0; a < this._controls.length; a++) {
            var l = this._controls[a].control;
            Utils.isFunction(l.onRegisterEvent) && l.onRegisterEvent(e, s, !0)
        }
        return this
    }
    ,
    e.prototype.hasAnyEvents = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = this.app.events.hasAnyCallObjects([this], e);
        return t || (t = !!this._eventTrigger.getEventListeners().length),
        t
    }
    ,
    e.prototype.hasEvent = function(e, t) {
        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        e = Utils.toLowerCase(e);
        var r = this.app.events.hasEvent(e, this, t, i);
        return r || (r = !!this._eventTrigger.getEventListener(e, this, null, t)),
        r
    }
    ,
    e.prototype.trigger = function(e, t, i) {
        e = Utils.toLowerCase(e);
        var r = this.app.events.dispatchBindCallObj(e, t, [this], i)
            , n = this._eventTrigger.dispatchEvent(e, this, t, i);
        return Utils.parseValue(r, n)
    }
    ,
    e.prototype.pauseEvent = function(e, t, i) {
        this._pauseEvent(e, t, i, !1)
    }
    ,
    e.prototype.pauseEventInFrame = function(e, t, i) {
        this._pauseEvent(e, t, i, !0)
    }
    ,
    e.prototype.resumeEvent = function(e, t, i) {
        this._resumeEvent(e, t, i)
    }
    ,
    e.prototype.isPauseEvent = function(e, t, i) {
        if (e = Utils.toLowerCase(e),
        i) {
            var r = this.getEvents(e);
            if (t) {
                for (var n = !1, o = 0; o < r.length; o++) {
                    var s = r[o];
                    if (t && s.tag == t) {
                        n = !0;
                        break
                    }
                }
                if (!n)
                    return !0
            } else if (!r.length)
                return !0
        }
        var a = this.app.events.isPauseEvent(e, this, t);
        if (!a) {
            var l = this._eventTrigger.getEventListener(e, this, null, t);
            if (l)
                return l.paused
        }
        return a
    }
    ,
    e.prototype.getEvents = function(e) {
        e = Utils.toLowerCase(e);
        var t = this.app.events.getEvents(e, this);
        if (!t)
            return [];
        for (var i = [], r = 0; r < t.length; r++) {
            var n = t[r];
            i.push({
                condition: n.condition,
                callback: n.callback,
                type: n.type,
                priority: n.priority,
                userData: n.userData,
                tag: n.tag,
                once: n.once
            })
        }
        return this._eventTrigger.getEventListeners(e, this).forEach((function(e) {
            i.push({
                condition: null,
                callback: e.callback,
                type: e.type,
                priority: e.priority,
                userData: e.userData,
                tag: e.tag,
                once: e.once
            })
        }
        )),
        i
    }
    ,
    e.prototype._traverseObjects = function(e, t) {
        for (var i = 0; i < this._children.length; i++) {
            var r = this._children[i];
            Utils.isFunction(e) ? e(r) : Utils.isArray(e) && e.push(r),
            t && r._traverseObjects(e, t)
        }
    }
    ,
    e.prototype._isChildNode = function(e) {
        for (var t = this.children, i = 0, r = t.length; i < r; i++) {
            var n = t[i];
            if (e == n.node || e.isChildOf(n.node))
                return !0
        }
        return !1
    }
    ,
    e.prototype._getChildNodes = function() {
        var e = [];
        return this.children.forEach((function(t) {
            e.push(t.node)
        }
        )),
        e
    }
    ,
    e.prototype._getAllChildNodes = function() {
        var e = [];
        return this._children.forEach((function(t) {
            e.push(t.node)
        }
        )),
        e
    }
    ,
    e.prototype._traverseSelfNodes = function(e) {
        if (e) {
            var t = this._getChildNodes();
            this.node.traverseBranch((function(i) {
                if (-1 !== t.indexOf(i))
                    return !1;
                e(i)
            }
            ))
        }
    }
    ,
    e.prototype._traverseAllSelfNodes = function(e) {
        if (e) {
            var t = this._getAllChildNodes();
            this.node.traverseBranch((function(i) {
                if (-1 !== t.indexOf(i))
                    return !1;
                e(i)
            }
            ))
        }
    }
    ,
    e.prototype.traverseSelfNodes = function(e) {
        return this._traverseSelfNodes(e)
    }
    ,
    e.prototype.traverseAllSelfNodes = function(e) {
        return this._traverseAllSelfNodes(e)
    }
    ,
    e.prototype._traverseNodes = function(e, t, i) {
        for (var r = 0; r < e.children.length; r++) {
            var n = e.children[r]
                , o = n.userData.baseObject_bindSubNode;
            o || ((o = THING.SubObject.create(n, this)).name = n.name),
            Utils.isFunction(t) ? t(o) : Utils.isArray(t) && t.push(o),
            i && this._traverseNodes(n, t, i)
        }
    }
    ,
    e.prototype.isSubNode = function() {
        return !!this.node.userData.baseObject_bindSubNode
    }
    ,
    e.prototype.traverse = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        e && (e(this),
        this._traverseObjects(e, t))
    }
    ,
    e.prototype._check = function(e) {
        var t = new Selector(this.app,[this]);
        return t.select(e),
        !!t.length
    }
    ,
    e.prototype.query = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (Utils.isString(e) && e.startsWith("/")) {
            for (var r = 0, n = 0; n < e.length; n++)
                "/" == e[n] && r++;
            if (1 === r)
                return THING.Utils.warn("[BaseObject] Please use '.subNodes.query()' to replace it, and remove '/' prefix of params"),
                this.subNodes.query(new RegExp(e.substring(1)), t)
        }
        var o = [];
        this._traverseObjects(o, t),
        i && o.push(this);
        var s = new Selector(this.app,o);
        return s.select(e),
        s
    }
    ,
    e.prototype._queryChild = function(e) {
        var t = new Selector(this.app,this._children);
        return t.select(e),
        t
    }
    ,
    e.prototype.isChildOf = function(e) {
        if (!e)
            return !1;
        for (var t = this._parent; t; ) {
            if (t == e)
                return !0;
            t = t.parent
        }
        return !1
    }
    ,
    e.prototype.isBrotherOf = function(e) {
        if (!e)
            return !1;
        var t = this._parent;
        return !!t && -1 !== t._children.indexOf(e)
    }
    ,
    e.prototype.clearAttachPoints = function() {
        if (this._attachPoints) {
            for (var e = 0; e < this._attachPoints.length; e++)
                this._attachPoints[e].destroy();
            this._attachPoints = null
        }
    }
    ,
    e.prototype.isAttachPoint = function(e) {
        if (e && e.node)
            for (var t = ["dummy:", "point:", "connector:"], i = 0; i < t.length; i++)
                if (e.name.startsWith(t[i]))
                    return !0;
        return !1
    }
    ,
    e.prototype.translate = function(e) {
        this.node.translateX(e[0]),
        this.node.translateY(e[1]),
        this.node.translateZ(e[2]),
        this.static && this.node._synMatrixWorld(),
        this.synIndependentWorldPosition(),
        this.dirty = !0
    }
    ,
    e.prototype.translateX = function(e) {
        this.translate([e, 0, 0])
    }
    ,
    e.prototype.translateY = function(e) {
        this.translate([0, e, 0])
    }
    ,
    e.prototype.translateZ = function(e) {
        this.translate([0, 0, e])
    }
    ,
    e.prototype.moveTo = function(e) {
        Utils.isArray(e) && (e = {
            position: e
        });
        var t = e.offset || e.offsetPosition || e.localPosition
            , i = e.direction
            , r = Utils.parseValue(e.ignoreScale, !0);
        if (t)
            t = Utils.parseVector3(t);
        else if (i) {
            t = Utils.parseVector3(i);
            var n = Utils.parseValue(e.distance, 5);
            t.multiplyScalar(n)
        }
        t && (e.position = this.selfToWorld(t.toArray(), r)),
        this.movePath(e)
    }
    ,
    e.prototype.createPathTween = function(e, t, i, r, n, o) {
        var s, a = Utils.parseVector3(e).clone(), l = Utils.parseVector3(t).clone();
        if (i) {
            !o && n && (o = new THREE.Matrix4,
            n.updateWorldMatrix(!0, !1),
            o.getInverse(n.matrixWorld));
            var u = new THREE.Matrix4
                , c = a.clone()
                , h = l.clone();
            c.applyMatrix4(o),
            h.applyMatrix4(o),
            u.lookAt(h, c, this.node.up);
            var p = new THREE.Quaternion;
            if (p.setFromRotationMatrix(u),
            r) {
                var d = new THREE.Quaternion;
                d.setFromAxisAngle(new THREE.Vector3(0,1,0), THING.Math.degToRad(r)),
                p.multiply(d)
            }
            s = p
        }
        return {
            distance: a.distanceTo(l),
            from: a,
            to: l,
            toQuat: s
        }
    }
    ,
    e.prototype.createPathTweens = function(e, t, i, r) {
        var n = new THREE.Matrix4;
        e && (e.updateWorldMatrix(!0, !1),
        n.getInverse(e.matrixWorld));
        for (var o = 0; o < t.length - 1; o++) {
            var s = t[o]
                , a = t[o + 1]
                , l = this.createPathTween(s, a, i, r, e, n);
            this.pathTweens.push(l)
        }
    }
    ,
    e.prototype.startPathTweens = function(e, t, i, r, n, o, s, a, l, u, c, h) {
        var p = function(e) {
            for (var t = 0, i = 0; i < e.length; i++)
                t += e[i].distance;
            return t
        }(this.pathTweens);
        if (p) {
            i && (e = p / i * 1e3,
            s = LerpType.Linear.None);
            var d = -1
                , f = {
                progress: p
            }
                , m = function(e, t) {
                for (var i = [], r = 0; r < e.length; r++)
                    i.push(e[r].distance / t);
                return i
            }(this.pathTweens, p)
                , g = new THREE.Vector3
                , v = new THREE.Quaternion
                , y = this;
            this.pathTween = new TWEEN.Tween({
                progress: 0
            }).to(f, e).easing(s).delay(t).onUpdate((function() {
                var e = this._object.progress / p
                    , t = Utils.getArrayIndexFromProgress(y.pathTweens, e, m)
                    , i = Utils.getArrayProgress(y.pathTweens, e, m)
                    , s = y.pathTweens[t];
                t != d && (d = t,
                r && (s.fromQuat = y.node.quaternion.clone())),
                n ? y.node.lookAt(n) : r && (o ? (v.copy(a ? s.fromQuat : y.node.quaternion),
                v.slerp(s.toQuat, i),
                y.angles = Utils.parseAngles(v)) : y.angles = Utils.parseAngles(s.toQuat)),
                g.copy(s.from),
                g.lerp(s.to, i),
                y.position = g.toArray(),
                l && l({
                    progress: e,
                    fromPosition: s.from.toArray(),
                    toPosition: s.to.toArray()
                })
            }
            )).onStart((function() {
                u && u()
            }
            )).onStop((function() {
                c && c()
            }
            )).onComplete((function() {
                h && h()
            }
            )).start()
        } else
            h && h()
    }
    ,
    e.prototype.movePath = function(e) {
        var t, i = (e = e || {}).path, r = Math.max(1, Utils.parseValue(e.time, 1e3)), n = Utils.parseValue(e.delayTime, 0), o = e.speed, s = Utils.parseValue(e.local, !1), a = Utils.parseValue(e.orientToPath, !1), l = e.orientToPathDegree, u = e.lookAt, c = e.loopType, h = function(e) {
            return null !== e.lerp && null !== e.lerpType && Utils.parseValue(e.lerp, !0)
        }(e), p = e.lerpType || LerpType.Linear.None, d = Utils.parseValue(e.smooth, !0), f = e.update, m = e.complete;
        e.loop && (c = LoopType.Repeat,
        THING.Utils.warn('[BaseObject] movePath() use "loopType(THING.LoopType)" to instead "loop(Boolean)" argument'));
        var g = this.parents.query(".Campus")[0];
        if (t = g ? g.node : this.node.parent,
        i) {
            if (e.path = i.concat(),
            s) {
                for (var v = [], y = 0; y < i.length; y++)
                    v.push(this.localToWorld(i[y]));
                i = v
            }
            1 === i.length && (i = [this.position, i[0]])
        } else {
            var b = e.position;
            b && (i = b.isBaseObject ? [this.position, b.position] : [this.position, b]),
            i && (e.path = i.concat())
        }
        if (i && 0 != i.length) {
            u && (a = null,
            u = Utils.parseVector3(u)),
            this.stopMoving();
            var _ = [];
            for (y = 0; y < i.length; y++) {
                var x = null;
                2 == i[y].length ? x = new THREE.Vector3(i[y][0],this.position[1],i[y][1]) : 3 == i[y].length && (x = Utils.parseVector3(i[y])),
                _.push(x)
            }
            this.createPathTweens(t, _, a, l);
            var E = this.pathTweens[0].from;
            this.position = [E.x, E.y, E.z];
            var w = this;
            this.startPathTweens(r, n, o, a, u, h, p, d, (function(e) {
                f && (e.object = w,
                f.call(w, e))
            }
            ), (function() {}
            ), (function() {}
            ), (function() {
                c == LoopType.Repeat ? w.movePath(e) : c == LoopType.PingPong ? (e.path.reverse(),
                void 0 !== e.orientToPathDegree && (e.orientToPathDegree = 360 - e.orientToPathDegree),
                w.movePath(e)) : m && m.call(w, {
                    object: w
                })
            }
            ))
        } else
            THING.Utils.error("You must provide the path or position to call moveTo()")
    }
    ,
    e.prototype.stopMoving = function() {
        this.pathTweens = [],
        this.pathTween && this.pathTween.stop()
    }
    ,
    e.prototype.hasAttribute = function(e) {
        return Utils.hasAttribute(this, e)
    }
    ,
    e.prototype.getAttribute = function(e) {
        return Utils.getAttribute(this, e)
    }
    ,
    e.prototype.setAttribute = function(e, t) {
        return Utils.setAttribute(this, e, t)
    }
    ,
    e.prototype.setAttributes = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        for (var i in e = e || {})
            (t || Utils.isUndefined(this.getAttribute(i))) && this.setAttribute(i, e[i])
    }
    ,
    e.prototype._updateLookAt = function() {
        if (this._lookingAtObject) {
            if (this._lookingAtObject.target) {
                var e = this._lookingAtObject.target.position;
                this._lookingAtObject.targetLocalPosition = Utils.parseVector3(this.worldToLocal(e)),
                this._lookingAtObject.targetPosition = Utils.parseVector3(e)
            }
            this._lookAtPosition()
        }
    }
    ,
    e.prototype.selfUpdate = function() {
        var e = this
            , t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0
            , i = this
            , r = 0;
        this._style && this._style.update && (r |= this._style.update(t)),
        this._localClippingPlanes.length && (this._localClippingPlanes.forEach((function(t) {
            var i = t.basePlane
                , r = zi.getNormalMatrix(e.node.matrixWorld)
                , n = Ui.copy(i.normal).multiplyScalar(-i.constant)
                , o = i.normal.clone().applyMatrix3(r).normalize()
                , s = -n.dot(o)
                , a = t.localPlane;
            a.normal = o,
            a.constant = s
        }
        )),
        r = !0),
        this._clippingPlanes.length && !this._clippingInWorldSpace && (this._clippingPlanes.forEach((function(t) {
            var i = t.isLocal && e.node.parent ? e.node.parent.matrixWorld : e.node.matrixWorld;
            t.worldPlane.copy(t.inputPlane).applyMatrix4(i)
        }
        )),
        r = !0),
        this._lodNode && (-1 != this._lodLevel ? this._lodNode.setLevel(this._lodLevel) : this._lodNode.update(this.app.renderCamera),
        r = !0),
        this._lookingAtObject && (this.visible && this._updateLookAt(),
        r = !0),
        this._independentPosition && (this.visible && this._getIndependentControlRenderNode()._setWorldPosition(this._independentPosition.clone(), this.static),
        r = !0),
        this._independentWorldAngles && (this.visible && this._getIndependentControlRenderNode()._setWorldAngles(this._independentWorldAngles.clone(), this.static),
        r = !0),
        this._independentWorldScale && (this.visible && this._getIndependentControlRenderNode()._setWorldScale(this._independentWorldScale.clone(), this.static),
        r = !0);
        var n = this.builder;
        n && n.startToBuildingQueue && n.startToBuildingQueue.length && (n._isBuilding || n._old_build_version == n._build_version || (n._old_build_version = n._build_version,
        n._isBuilding = !0,
        n.startToBuild((function(e) {
            for (var t = n.startToBuildingQueue, r = t.length, o = 0; o < r; o++)
                if (!(t[o].version > n._build_version)) {
                    var s = t[o].progressCallback;
                    s && s({
                        progress: e
                    }),
                    1 == e && (t.splice(o--, 1),
                    r--)
                }
            1 == e ? (n._isBuilding = !1,
            n.campus.static && n.campus.node._synMatrixWorld()) : i.tickable = !0
        }
        ))),
        r = !0);
        var o = this._eventTrigger.getEventListeners("update", this);
        return o.forEach((function(i) {
            e._eventTrigger.invokeListener(i, {
                deltaTime: t
            }),
            r = !0
        }
        )),
        r
    }
    ,
    e.prototype.update = function(e) {
        for (var t = this.selfUpdate(e), i = 0; i < this._controls.length; i++) {
            var r = this._controls[i].control
                , n = r.onUpdate;
            n && (t |= n.call(r, e))
        }
        return t
    }
    ,
    e.prototype.createGrid = function(e, t, i, r) {
        this._grid = this.app.create({
            type: "Grid",
            size: e,
            divisions: t,
            color1: i,
            color2: r,
            parent: this
        }),
        this._grid.style.skipBoundingBox = !0,
        this._grid.userData.topNode = !0,
        this._grid.userData.skipOutline = !0,
        this._grid.userData.independent = !0,
        this._grid.canNotQueryFromSelector = !0;
        this._grid.translateY(-.01)
    }
    ,
    e.prototype.showGrid = function(e, t, i, r) {
        var n = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
        if (Utils.isBoolean(e)) {
            var o = e;
            o && (this._grid || this.createGrid(300, 28, 1131673, 1131673)),
            this._grid && (this._grid.visible = o)
        } else if (this._grid && (this._grid.destroy(),
        this._grid = null),
        this.createGrid(e, t, i, r),
        n) {
            var s = e;
            Utils.isNumber(n) && (s = n),
            this._grid.addPickableGround({
                size: s
            })
        }
    }
    ,
    e.prototype.stopFade = function() {
        this.fadeTween && (this.fadeTween.stop(),
        this.fadeTween = null)
    }
    ,
    e.prototype.fade = function(e, t) {
        var i = (e = e || {}).time || 1e3
            , r = e.complete;
        this.stopFade();
        var n = {
            opacity: this.style.opacity
        }
            , o = {
            opacity: t
        };
        this.visible = !0;
        var s = this;
        this.fadeTween = new TWEEN.Tween(n).to(o, i).easing(TWEEN.Easing.Linear.None).onUpdate((function() {
            s.style.opacity = this._object.opacity
        }
        )).onComplete((function() {
            0 == s.style.opacity && (s.visible = !1),
            r && r.call(s, {
                object: s
            })
        }
        )).start()
    }
    ,
    e.prototype.fadeIn = function(e) {
        this.style.opacity = 0,
        this.fade(e, 1)
    }
    ,
    e.prototype.fadeOut = function(e) {
        this.style.opacity = 1,
        this.fade(e, 0)
    }
    ,
    e.prototype.setClippingPlanes = function() {
        var e = this
            , t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        Utils.isObject(t) && (t = [t]),
        this.clearClippingPlanes(),
        t.forEach((function(t) {
            var i = t.height
                , r = Utils.parseVector3(t.direction, new THREE.Vector3(0,-1,0))
                , n = new THREE.Plane(r,i)
                , o = n.clone();
            e._localClippingPlanes.push({
                basePlane: n,
                localPlane: o
            })
        }
        ));
        var i = this;
        this.node.traverse((function(e) {
            e.isMesh && (e._clip_prev_material = e.material,
            e.material = e.material.clone(),
            e.material.clippingPlanes = i._localClippingPlanes.map((function(e) {
                return e.localPlane
            }
            )))
        }
        )),
        this.tickable = !0
    }
    ,
    e.prototype.clearClippingPlanes = function() {
        this.node.traverse((function(e) {
            e.isMesh && e._clip_prev_material && (e.material = e._clip_prev_material,
            e.material.clippingPlanes = null)
        }
        )),
        this._localClippingPlanes = []
    }
    ,
    e.prototype.setClipping = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : SpaceType.Self;
        Utils.isObject(e) && (e = [e]),
        this.clearClipping();
        var i = this._clippingPlanes
            , r = t === SpaceType.World
            , n = t === SpaceType.Local;
        e.forEach((function(e) {
            var t = new THREE.Plane;
            t.normal = Utils.parseVector3(e.direction, new THREE.Vector3(0,-1,0)),
            t.constant = e.height;
            var r = t.clone();
            i.push({
                inputPlane: t,
                worldPlane: r,
                isLocal: n
            })
        }
        )),
        this.node.traverse((function(e) {
            e.isMesh && (e._clip_prev_material = e.material,
            e.material = e.material.clone(),
            e.material.clippingPlanes = i.map((function(e) {
                return r ? e.inputPlane : e.worldPlane
            }
            )))
        }
        )),
        this._clippingInWorldSpace = r,
        this.tickable = !r
    }
    ,
    e.prototype.clearClipping = function() {
        this.node.traverse((function(e) {
            e.isMesh && e._clip_prev_material && (e.material = e._clip_prev_material,
            e.material.clippingPlanes = null)
        }
        )),
        this._clippingPlanes = []
    }
    ,
    e.prototype.toJSON = function() {
        return {
            type: this.type,
            id: this.id,
            name: this.name,
            position: this.position,
            angles: this.angles,
            scale: this.scale,
            style: {
                color: this.style.color,
                opacity: this.style.opacity,
                outlineColor: this.style.outlineColor,
                alwaysOnTop: this.style.alwaysOnTop,
                glow: this.style.glow,
                innerGlow: this.style.innerGlow,
                renderOrder: this.style.renderOrder
            }
        }
    }
    ,
    e.prototype.addControl = function(e, t, i) {
        if (e) {
            if (Utils.isString(t) && (i = i || t,
            t = {},
            this.removeControl(i)),
            !Utils.isNumber(e)) {
                if (this.hasControl(e))
                    return THING.Utils.error("The control is existing when addControl() with '" + e + "'"),
                    null;
                this._controls.push({
                    control: e,
                    name: i
                });
                var r = e.onAdd;
                return Utils.isFunction(r) && r.call(e, this),
                this.tickable = !0,
                this.visible && (this.app.needUpdate = !0),
                e
            }
            for (var n = [], o = 0; o < n.length; o++) {
                var s = n[o];
                if (s.id == e) {
                    var a = new s.type(this);
                    return a.setup(t),
                    this.addControl(a)
                }
            }
            return null
        }
    }
    ,
    e.prototype.getControl = function(e) {
        for (var t = 0; t < this._controls.length; t++)
            if (e == this._controls[t].name)
                return this._controls[t].control;
        return null
    }
    ,
    e.prototype.removeControl = function(e) {
        if (e) {
            var t = !1;
            if (Utils.isString(e)) {
                for (var i = 0; i < this._controls.length; i++)
                    if (this._controls[i].name == e) {
                        (n = (r = this._controls[i].control).onRemove) && n.call(r),
                        this._controls.splice(i, 1),
                        t = !0;
                        break
                    }
            } else
                for (i = 0; i < this._controls.length; i++)
                    if (this._controls[i].control == e) {
                        var r, n;
                        (n = (r = this._controls[i].control).onRemove) && n.call(r),
                        this._controls.splice(i, 1),
                        t = !0;
                        break
                    }
            t && this.visible && (this.app.needUpdate = !0)
        }
    }
    ,
    e.prototype.removeAllControls = function() {
        for (var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t = 0; t < this._controls.length; t++) {
            var i = this._controls[t].control
                , r = i.onRemove;
            r && r.call(i)
        }
        this._controls = [],
        e && this.visible && (this.app.needUpdate = !0)
    }
    ,
    e.prototype.hasControl = function(e) {
        if (Utils.isString(e)) {
            for (var t = 0; t < this._controls.length; t++)
                if (e == this._controls[t].name)
                    return !0
        } else if (-1 !== this._controls.indexOf(e))
            return !0;
        return !1
    }
    ,
    e.prototype.setWorldPosition = function(e) {
        var t = Utils.parseVector3(e);
        this.node._setWorldPosition(t, this.static),
        this.dirty = !0
    }
    ,
    e.prototype.setWorldAngles = function(e) {
        var t = Utils.parseQuaternion(e);
        this.node._setWorldAngles(t, this.static),
        this.dirty = !0
    }
    ,
    e.prototype.setWorldScale = function(e) {
        var t = Utils.parseVector3(e);
        this.node._setWorldScale(t, this.static),
        this.dirty = !0
    }
    ,
    e.prototype.setLocalPosition = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , i = Utils.parseVector3(e)
            , r = Utils.parseValue(t, this._ignoreParentScale);
        if (r) {
            var n = this.node.parent;
            if (n) {
                var o = new THREE.Vector3;
                this.node.updateWorldMatrix(!0, !1),
                n.getWorldScale(o),
                i.divide(o)
            }
        }
        this.localPosition = i.toArray()
    }
    ,
    e.prototype.getLocalPosition = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = this.node.position.clone();
        if (e) {
            var i = new THREE.Vector3;
            this.node.updateMatrixWorld(),
            this.node.getWorldScale(i),
            t.multiply(i)
        }
        return t.toArray()
    }
    ,
    e.prototype._setScale = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default"
            , i = Utils.parseVector3(e);
        0 == i.x && (THING.Utils.error("Please check scale-x value, it can not be zero"),
        i.x = Number.EPSILON),
        0 == i.y && (THING.Utils.error("Please check scale-y value, it can not be zero"),
        i.y = Number.EPSILON),
        0 == i.z && (THING.Utils.error("Please check scale-z value, it can not be zero"),
        i.z = Number.EPSILON),
        Hi.set(1, 1, 1),
        this._scaleGroupStates.enable(i, t),
        this._scaleGroupStates.states.forEach((function(e) {
            var t = e.value;
            Hi.multiply(t)
        }
        ));
        var r = this._getIndependentControlRenderNode();
        this.anchorNode && (r = this.anchorNode),
        r.scale.copy(Hi),
        this.synIndependentWorldScale(),
        this.static && this.node._synMatrixWorld(),
        this.dirty = !0
    }
    ,
    e.prototype._getScale = function(e) {
        if (e) {
            var t = this._scaleGroupStates.getValue(e);
            return t ? t.toArray() : [1, 1, 1]
        }
        var i = this._getIndependentControlRenderNode();
        return this.anchorNode && (i = this.anchorNode),
        i.scale.toArray()
    }
    ,
    e.prototype._synWorldAngles = function() {
        this.dirty = !0,
        this.synIndependentWorldAngles(),
        this.static && this.node._synMatrixWorld()
    }
    ,
    e.prototype._getAttributeFromSelfToRoot = function(e) {
        for (var t = this; t; t = t.parent) {
            var i = t.node.userData[e];
            if (i)
                return i
        }
        return null
    }
    ,
    e.prototype._getBaseMatrix = function() {
        return this._getAttributeFromSelfToRoot("_baseMatrix")
    }
    ,
    e.prototype._getPosition = function() {
        var e = new THREE.Vector3;
        return this.node.getWorldPosition(e),
        e.toArray()
    }
    ,
    e.prototype._setPosition = function(e) {
        e && (this.setWorldPosition(e),
        this.synIndependentWorldPosition())
    }
    ,
    e.prototype._needUseWorldPosition = function() {
        var e = this._parent;
        return !!e && e.node != this.node.parent
    }
    ,
    e.prototype._setLocalPosition = function(e) {
        if (this.anchorNode) {
            var t = Utils.parseVector3(this.parent.selfToWorld(e));
            this.node._setWorldPosition(t, this.static)
        } else if (this._needUseWorldPosition()) {
            var i = Utils.parseVector3(this._parent.selfToWorld(e));
            this.node._setWorldPosition(i, this.static)
        } else {
            var r = Utils.parseVector3(e);
            this.node.position.copy(r),
            this.static && this.node._synMatrixWorld()
        }
        this._setDirtyFlag(!1, !0, !0);
        var n = this._notifyPositionChange;
        n && n.call(this)
    }
    ,
    e.prototype._getLocalPosition = function() {
        if (!this._parent)
            return [0, 0, 0];
        if (this.anchorNode)
            return this._parent.worldToSelf(this.position);
        if (this._needUseWorldPosition()) {
            var e = new THREE.Vector3;
            return this.node.getWorldPosition(e),
            this._parent.node.worldToLocal(e),
            e.toArray()
        }
        return (e = this.node.position).toArray()
    }
    ,
    e.prototype._getAngles = function() {
        var e = this.node.parent;
        if (e && e.userData.childUseWorldAnglesAlways)
            return this.worldAngles;
        return this.anchorNode ? this.anchorNode.getAngles() : this.node.getAngles()
    }
    ,
    e.prototype._setAngles = function(e) {
        if (!THING.Math.equalsVector(this.angles, e)) {
            var t = this.node;
            this.anchorNode && (t = this.anchorNode),
            t.setAngles(e),
            this._synWorldAngles()
        }
    }
    ,
    e.prototype._getQuaternion = function() {
        var e = this.node.parent;
        if (e && e.userData.childUseWorldAnglesAlways)
            return this.worldQuaternion;
        return this.anchorNode ? this.anchorNode.quaternion.toArray() : this.node.quaternion.toArray()
    }
    ,
    e.prototype._setQuaternion = function(e) {
        if (e.isQuaternion && (e = e.toArray()),
        !THING.Math.equalsVectorX(this.node.quaternion.toArray(), e)) {
            var t = this.node;
            this.anchorNode && (t = this.anchorNode),
            t.quaternion.fromArray(e),
            this._synWorldAngles()
        }
    }
    ,
    e.prototype.setAnchorPosition = function(e) {
        if (e) {
            var t = this.anchorNode;
            t ? (t.children[0].getWorldPosition(Ni),
            Fi.fromArray(e),
            t._setWorldPosition(Fi, !1, this.static),
            t.updateWorldMatrix(!1, !1),
            t.children[0]._setWorldPosition(Ni, this.static)) : (t = new THREE.Object3D,
            this.node.parent.add(t),
            Fi.fromArray(e),
            t._setWorldPosition(Fi, this.static),
            t.updateWorldMatrix(!1, !1),
            t.attach(this.node),
            this.anchorNode = t)
        } else
            this.anchorNode && (this.anchorNode.parent.attach(this.anchorNode.children[0]),
            this.anchorNode.removeBySelf(),
            this.anchorNode = null)
    }
    ,
    e.prototype.getAnchorPosition = function() {
        var e = this.anchorNode;
        return e ? (e.getWorldPosition(Ni),
        this.worldToSelf(Ni.toArray())) : null
    }
    ,
    e.prototype.getBoundingBox = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return this.boundingBoxControl.getBoundingBox(e, t)
    }
    ,
    e.prototype.getOrientedBox = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return this.boundingBoxControl.getOrientedBoundingBox(e, t)
    }
    ,
    e.prototype.getLocalBoundingBox = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return this.boundingBoxControl.getLocalBoundingBox(e, t)
    }
    ,
    e.prototype._setBoundingBoxPivot = function(e) {
        this.node.userData.boundingBoxPivot = e,
        this.dirty = !0
    }
    ,
    e.prototype._getBoundingBoxPivot = function() {
        var e = this.node.userData.boundingBoxPivot;
        return e || null
    }
    ,
    e.prototype._setBoundingBoxSize = function(e) {
        e && (isNaN(e[0]) && THING.Utils.error("_setBoundingBoxSize() failed, value[0] is NaN", this),
        isNaN(e[1]) && THING.Utils.error("_setBoundingBoxSize() failed, value[1] is NaN", this),
        isNaN(e[2]) && THING.Utils.error("_setBoundingBoxSize() failed, value[2] is NaN", this)),
        this.node.userData.boundingBoxSize = e,
        this.dirty = !0
    }
    ,
    e.prototype._getBoundingBoxSize = function() {
        var e = this.node.userData.boundingBoxSize;
        return e || null
    }
    ,
    e.prototype._updateKeepSize = function(e, t, i, r) {
        return this._keepSize != e && (this._keepSize = e,
        e ? (r = r || this.distanceTo(this.app.camera.position),
        i = i || this.scale,
        this.addControl(new SizeAdjustmentControl(i,t,r), "SizeAdjustmentControl")) : this.removeControl("SizeAdjustmentControl"),
        !0)
    }
    ,
    e.prototype.getOffsetPosition = function(e) {
        if (e = e || {},
        !Utils.isNull(e.xAngle) || !Utils.isNull(e.yAngle)) {
            var t = Utils.parseValue(e.yAngle, 0)
                , i = Utils.parseValue(e.xAngle, 0)
                , r = Utils.parseValue(e.distance, e.radius);
            if (void 0 === r) {
                var n = Utils.parseValue(e.onlyVisible, !0);
                r = this.boundingBoxControl.getBoundingBox(n).radius
            }
            var o = e.radiusFactor;
            return o && (r *= o),
            (new THREE.Vector3).getDirectionFromAngles(t, i, r).toArray()
        }
        if (e.direction) {
            var s = Utils.parseVector3(e.direction)
                , a = e.distance || e.radius;
            s.multiplyScalar(a);
            var l = Utils.parseVector3(this.position);
            return l.add(s),
            this.worldToSelf(l.toArray())
        }
    }
    ,
    e.prototype.getWorldPosition = function(e) {
        var t = this.getOffsetPosition(e) || [0, 0, 0];
        return this.selfToWorld(t)
    }
    ,
    e.prototype.getLayoutPosition = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
            , r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3]
            , n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        if (!Utils.isArray(e))
            return null;
        if (3 !== e.length)
            return null;
        var o = i ? this.getOrientedBox(r, n) : this.getBoundingBox(r, n)
            , s = o.points
            , a = [];
        if (i)
            for (var l = 0; l < s.length; l++)
                a.push(this.worldToSelf(s[l]));
        else
            a = s.concat();
        var u = [[a[0], a[1]], [a[0], a[4]], [a[0], a[2]]]
            , c = function(e, t) {
            var i = 0;
            Utils.isString(t) ? t.equals("left", !0) || t.equals("bottom", !0) || t.equals("back", !0) ? i = 0 : t.equals("right", !0) || t.equals("top", !0) || t.equals("front", !0) ? i = 1 : t.equals("center", !0) && (i = .5) : Utils.isNumber(t) ? i = t : THING.Utils.error("get layout position failed, due to unknown layout type(" + t + ")");
            var r = Utils.parseVector3(e[0])
                , n = Utils.parseVector3(e[1]);
            return r.lerp(n, i),
            r
        }
            , h = c(u[0], e[0]).x
            , p = c(u[1], e[1]).y
            , d = c(u[2], e[2]).z
            , f = [h, p, d];
        if (i || (f = this.worldToSelf(f)),
        t) {
            var m = this.worldToSelf(t);
            f = THING.Math.subVector(m, f)
        }
        return f = this.selfToWorld(f)
    }
    ,
    e.prototype._setStyle = function(e) {
        this._style = e
    }
    ,
    e.prototype._getStyle = function() {
        return this._style || (this._style = this.app.styleManager.createStyle("Default", this),
        this._defaultStyle = this._style),
        this._style
    }
    ,
    e.prototype.applyTheme = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        this.style._inheritThemeName = e || null,
        t && this.children.forEach((function(t) {
            t.inheritTheme && t.applyTheme(e, !0, i)
        }
        )),
        this.userData.SKIP_THEME || "Facade" == this.type && this.building && this.building.userData.SKIP_THEME || ("CombinedObject" === this.type ? this.loaded ? this._parent.applyTheme(e, t, !0) : this.waitCommands.push({
            type: "ApplyObjectTheme",
            object: this._parent,
            params: {
                name: e,
                traverse: t,
                force: !0
            }
        }) : this.loaded ? this.style._applyTheme && this.style._applyTheme(e, i) : this.waitCommands.push({
            type: "ApplyObjectTheme",
            object: this,
            params: {
                name: e,
                traverse: !1,
                force: i
            }
        }))
    }
    ,
    e.prototype._getChildVisibles = function() {
        var e = [];
        return this.children.forEach((function(t) {
            e.push(t.visible)
        }
        )),
        e
    }
    ,
    e.prototype._onGetChild = function() {
        return this.children
    }
    ,
    e.prototype._setChildVisible = function(e, t) {
        for (var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "default", r = this._onGetChild(), n = 0; n < r.length; n++) {
            var o = r[n];
            if (o)
                if (o.inheritVisible)
                    o._setVisible(e, i);
                else
                    for (var s = t[n], a = o._visibleGroupStates.states, l = 0; l < a.length; l++) {
                        var u = a[l];
                        if (u.value == s) {
                            o._setVisible(s, u.name);
                            break
                        }
                    }
        }
    }
    ,
    e.prototype._setNodeVisible = function(e) {
        var t = this;
        this._traverseSelfNodes((function(i) {
            i.userData.asBoundingBox || i.ensureVisible(e, t._autoSynVisible)
        }
        ))
    }
    ,
    e.prototype._getHidePermission = function() {
        for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "default", t = this._visibleGroupStates.states, i = 0; i < t.length; i++) {
            var r = t[i];
            if (r.name != e && r.value)
                return !1
        }
        return !0
    }
    ,
    e.prototype.setVisible = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        this.renderNode.visible = e,
        this.renderNode.ensureVisible(e, this._autoSynVisible),
        t && this.children.forEach((function(i) {
            i.setVisible(e, t)
        }
        ))
    }
    ,
    e.prototype._setVisible = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default";
        if (!this._hideNodesInScene) {
            this._visibleGroupStates.enable(e, t);
            var i = this._visibleGroupStates.isAnyEnable();
            THING.disableVisibleGroupStates && (i = this._visibleGroupStates.has("default") ? this._visibleGroupStates.isEnable("default") : this.visible);
            var r = this.visible
                , n = this._notifyBeforeChangeVisible;
            n && n.call(this);
            var o = this._getChildVisibles();
            i && this._autoEnsureParentsVisible && this.node.ensureParentsVisible(i),
            this._setNodeVisible(i),
            this._setChildVisible(e, o, t);
            for (var s = 0; s < this._controls.length; s++) {
                var a = this._controls[s].control;
                Utils.isFunction(a.onVisible) && a.onVisible(i)
            }
            var l = this._notifyAfterChangeVisible;
            l && l.call(this),
            r != i && (this.dirty = !0)
        }
    }
    ,
    e.prototype._getVisible = function() {
        return !this._hideNodesInScene && (!!this.node.visible && this.node.getLayerVisible())
    }
    ,
    e.prototype._getChildrenSelector = function() {
        var e = new Selector(this.app,this.children);
        return e.buildReturnObject(this.children),
        e
    }
    ,
    e.prototype._getChildren = function() {
        return this._children.result
    }
    ,
    e.prototype._getBrothers = function() {
        var e = this
            , t = void 0
            , i = this._parent;
        t = i ? i._children.filter((function(t) {
            return t !== e && !t.isCombinedObject
        }
        )) : [];
        var r = new Selector(this.app,t);
        return r.buildReturnObject(t),
        r
    }
    ,
    e.prototype._getParents = function() {
        for (var e = [], t = this._parent; t; t = t.parent)
            t.isCombinedObject || e.push(t);
        var i = new Selector(this.app,e,!0);
        return i.buildReturnObject(e),
        i
    }
    ,
    e.prototype.indexOfParent = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
            , t = this._parent;
        if (!t)
            return -1;
        var i = this._parent._children.indexOf(this);
        if (-1 === i)
            return -1;
        if (e) {
            i = 0;
            for (var r = this._parent._children, n = 0; n < r.length; n++) {
                var o = r[n];
                if (o == this)
                    return i;
                o.type == this.type && i++
            }
        }
        return i
    }
    ,
    e.prototype._loadResource = function(e) {
        e && this._children.forEach((function(e) {
            e.loadResource(!0)
        }
        ))
    }
    ,
    e.prototype._unloadResource = function(e) {
        e && this._children.forEach((function(e) {
            e.unloadResource()
        }
        ))
    }
    ,
    e.prototype._notifyLoadingObjects = function() {
        var e = this.parents.query(".Campus")[0];
        e && e._loadingObjects.add(this)
    }
    ,
    e.prototype._loadSelfResource = function(e) {
        if (!this.loaded && !this.loading) {
            this.loading = !0;
            var t = this;
            if (this._dynamic)
                this.loadFromURL(this.param, (function() {
                    t.customSetup(t.param),
                    t.node.updateMatrixWorld(),
                    t.loaded = !0,
                    t.loading = !1,
                    "function" == typeof e && e({
                        object: t
                    })
                }
                ));
            else {
                var i = this.builder;
                if (!i || !i.requestToBuild)
                    return;
                i.requestToBuild(this.uuid)
            }
        }
    }
    ,
    e.prototype.loadResource = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = arguments[1];
        if (t && (e ? this._loadCompleteCallback.push(t) : this._selfLoadCompleteCallback.push(t)),
        !this._dynamic) {
            var i = this.builder;
            if (!i || !i.requestToBuild)
                return
        }
        this._loadResource(e),
        this._notifyLoadingObjects(),
        this._loadSelfResource(t),
        this.loaded && (this.dataToRecover = this.toJSON())
    }
    ,
    e.prototype.unloadResource = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this._unloadResource(e),
        this._boxNode && this._boxNode.removeBySelf();
        var t = []
            , i = this;
        this._traverseSelfNodes((function(e) {
            (i.app.resourceManager.unload(e, !1, !1, !1, !1),
            e._skipDispose) ? t.push(e) : e.material && (e.disposeMaterial(),
            t.push(e))
        }
        )),
        t.forEach((function(e) {
            i.app.picker.removePickingResources(e),
            e.removeBySelf()
        }
        ));
        var r = this.builder;
        r && r.disposeObject && r.disposeObject(this.uuid),
        this._boxNode && this.node.add(this._boxNode),
        this.loaded = !1
    }
    ,
    e.prototype.setBoxNode = function(e) {
        e.userData.asBoundingBox = !0,
        e.userData.skipStyle = !0,
        e.userData.useToCaculateBoundingBox = !0,
        this._boxNode = e,
        this.node.add(e)
    }
    ,
    e.prototype.startToBuild = function(e) {
        var t = this.builder;
        t && Utils.isFunction(t.startToBuild) && (t._old_build_version = t._build_version,
        t._build_version = t._build_version || 1,
        t._build_version++,
        t.startToBuildingQueue = t.startToBuildingQueue || [],
        t.startToBuildingQueue.push({
            version: t._build_version,
            progressCallback: e
        }),
        this.tickable = !0)
    }
    ,
    e.prototype.clearNode = function(e) {
        this._url && (this.app.modelResource.unload(this._url),
        this._url = null),
        this.removePickingResources(),
        this.app.resourceManager.remove(this.node, e)
    }
    ,
    e.prototype.cloneSelf = function(e) {
        return this.app.create(e)
    }
    ,
    e.prototype.clone = function(e, t) {
        var i = this
            , r = this.node.cloneByFilter((function(e) {
            for (var t = 0; t < i._children.length; t++) {
                var r = i._children[t].node;
                if (e == r || e.isChildOf(r))
                    return !1
            }
            return !0
        }
        ));
        r.traverse((function(e) {
            e.userData = {}
        }
        ));
        var n = {
            type: this.type,
            url: this.url,
            position: this.position,
            angles: this.angles,
            scale: this.scale,
            visible: this.visible,
            parent: t || this._parent,
            node: r
        }
            , o = this.cloneSelf(n);
        if (!o)
            return null;
        if (e)
            for (var s = 0; s < this._children.length; s++)
                this._children[s].clone(e, o);
        return o
    }
    ,
    e.prototype.getEnvMapResources = function() {
        for (var e = this.parent; e; e = e.parent) {
            var t = e.envMapResources;
            if (t)
                return t
        }
        return null
    }
    ,
    e.prototype._synEffectRefCounts = function() {
        var e = this.app.effectManager;
        e && this.node.traverse((function(t) {
            e.synEffect(t)
        }
        ))
    }
    ,
    e.prototype._processBillboard = function(e, t) {
        var i = this;
        e.setUserDataValue("skipOutline", !0),
        t.billboard = !0,
        e._lookAt(t, (function() {
            return i.static
        }
        ))
    }
    ,
    e.prototype._processModel = function() {
        var e = this
            , t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
            , i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , r = this.app.isMobileDevice
            , n = this._useShadow && !r
            , o = this.app.effectManager;
        i = i && !!o,
        this.node.traverse((function(s) {
            var a = s.userData.gltfExtensions;
            a && a.billboard && (a.billboard.axis = "y",
            e._processBillboard(s, a.billboard),
            delete a.billboard);
            var l = s.material;
            t && l && !s.__effectInited && (s.__effectInited = !0,
            Array.isArray(l) ? l.forEach((function(e) {
                return e.needsUpdate = !0
            }
            )) : l.needsUpdate = !0,
            s.isMesh && !s.isSky && (s.castShadow = n,
            s.receiveShadow = n),
            l.map && (l.map.anisotropy = r ? 1 : 16,
            l.map.version > 0 && (l.map.needsUpdate = !0))),
            i && o.synEffect(s)
        }
        ))
    }
    ,
    e.prototype.synIndependentWorldPosition = function() {
        if (this._independentControlFlags.has(IndependentControlType.Position)) {
            var e = new THREE.Vector3;
            this._getIndependentControlRenderNode().getWorldPosition(e),
            this._independentPosition = e
        }
        var t = this._notifyPositionChange;
        t && t.call(this)
    }
    ,
    e.prototype.synIndependentWorldAngles = function() {
        if (this._independentControlFlags.has(IndependentControlType.Rotation)) {
            var e = this._getIndependentControlRenderNode().quaternion.clone();
            this._independentWorldAngles = e
        }
        var t = this._notifyAnglesChange;
        t && t.call(this)
    }
    ,
    e.prototype.synIndependentWorldScale = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = this._independentControlFlags;
        if (!(t = Utils.parseValue(this.inheritScale, t)) || i.has(earthColor0.Scale)) {
            var r = this._getIndependentControlRenderNode()._getWorldScale()
                , n = this.node.parent;
            if (n) {
                var o = n._getWorldScale();
                r.divide(o)
            }
            this._independentWorldScale ? this._independentWorldScale.copy(r) : this._independentWorldScale = r,
            e && (this.dirty = !0)
        }
        var s = this._notifyScalesChange;
        s && s.call(this)
    }
    ,
    e.prototype.synIndependentTransform = function() {
        var e = this._independentControlFlags;
        e.has(IndependentControlType.Position) && this.synIndependentWorldPosition(),
        e.has(IndependentControlType.Rotation) && this.synIndependentWorldAngles(),
        e.has(IndependentControlType.Scale) && this.synIndependentWorldScale()
    }
    ,
    e.prototype._getIndependentControlRenderNode = function() {
        return this.node
    }
    ,
    e.prototype._useIndependentTransform = function(e) {
        var t = this._getIndependentControlRenderNode();
        e.updateWorldMatrix(!0);
        var i = e.matrixWorld
            , r = new THREE.Vector3
            , n = new THREE.Vector3
            , o = new THREE.Quaternion;
        i.decompose(r, o, n);
        var s = new THREE.Matrix4;
        s.getInverse(t.matrixWorld);
        var a = new THREE.Matrix4;
        if (a.premultiply(s),
        a.multiply(i),
        t.updateWorldMatrix(!0),
        this._independentPosition ? r = this._independentPosition.clone() : r.setFromMatrixPosition(t.matrixWorld),
        this._independentWorldAngles) {
            if (o = this._independentWorldAngles.clone(),
            !this._independentPosition) {
                var l = this.parent.node
                    , u = this.parent.node.getMatrixWorldFromRoot(l.parent)
                    , c = new THREE.Matrix4;
                this._independentWorldScale || (c.compose(new THREE.Vector3, new THREE.Quaternion, l.scale),
                u.multiply(c)),
                u.multiply(t.matrix);
                var h = new THREE.Vector3
                    , p = new THREE.Vector3
                    , d = new THREE.Quaternion;
                u.decompose(h, d, p),
                r = h
            }
        } else
            t.matrixWorld.decompose(Fi, o, Li);
        this._independentWorldScale ? n = this._independentWorldScale.clone() : t.matrixWorld.decompose(Fi, Ii, n);
        var f = new THREE.Matrix4;
        f.compose(r, o, n),
        i.multiplyMatrices(f, a)
    }
    ,
    e.prototype._useIndependentRaycast = function(e) {
        var t = this._getIndependentControlRenderNode();
        if (t)
            if (e) {
                t.userData.original_raycast = t.userData.original_raycast || t.raycast;
                var i = this;
                t.raycast = function(e, t) {
                    var r = i._getIndependentControlRenderNode();
                    return r && i._useIndependentTransform(r),
                    this.userData.original_raycast.call(this, e, t)
                }
            } else
                t.userData.original_raycast && (t.raycast = t.userData.original_raycast,
                delete t.userData.original_raycast)
    }
    ,
    e.prototype._enableIndependentControl = function() {
        var e = this;
        this._traverseSelfNodes((function(e) {
            e.removeBeforeRenderFunction("independentControlRender", !1)
        }
        ));
        var t = !1
            , i = this._independentControlFlags;
        if (i.has(IndependentControlType.Transform)) {
            this.node.traverse((function(e) {
                Utils.backupValue(e, "frustumCulled"),
                e.frustumCulled = !1
            }
            )),
            this.synIndependentTransform(),
            this.tickable = !0;
            var r = this._getIndependentControlRenderNode();
            if (!r.hasBeforeRenderFunction("independentControlRender")) {
                e = this;
                r.addBeforeRenderFunction("independentControlRender", (function(t, i, r) {
                    e._useIndependentTransform(this)
                }
                ), 0)
            }
            t = !0
        } else
            this.node.traverse((function(e) {
                Utils.revertValue(e, "frustumCulled")
            }
            ));
        return i.has(IndependentControlType.Position) || (this._independentPosition = null),
        i.has(IndependentControlType.Rotation) || (this._independentWorldAngles = null),
        i.has(IndependentControlType.Scale) || (this._independentWorldScale = null),
        this._useIndependentRaycast(t),
        t
    }
    ,
    e.prototype.enableIndependentControl = function(e, t) {
        if (this._independentControlFlags.enable(e, t))
            return this._enableIndependentControl()
    }
    ,
    e.prototype.stopAllLerpTo = function() {
        for (var e = 0; e < this._tweens.length; e++)
            this._tweens[e].tween.stop();
        this._tweens = []
    }
    ,
    e.prototype.stopLerpTo = function(e) {
        for (var t = 0; t < this._tweens.length; t++)
            e == this._tweens[t].name && (this._tweens[t].tween.stop(),
            this._tweens.splice(t--, 1))
    }
    ,
    e.prototype.lerpTo = function(e, t) {
        var i = function(e) {
            for (var t = {}, i = Object.keys(e), r = 0; r < i.length; r++) {
                var n = i[r]
                    , o = e[n];
                if (Utils.isArray(o)) {
                    if (3 == o.length)
                        (s = Utils.parseVector3(o)) && (o = s,
                        t["__" + n + "_x"] = o.x,
                        t["__" + n + "_y"] = o.y,
                        t["_#vector3" + n] = o.z);
                    else if (2 == o.length) {
                        var s;
                        (s = Utils.parseVector2(o)) && (o = s,
                        t["__" + n + "_x"] = o.x,
                        t["_#vector2" + n] = o.y)
                    }
                } else
                    t[n] = o
            }
            return t
        }
            , r = function(e, t) {
            var i = e.stop;
            e.start = null,
            e.stop = null,
            m.lerpTo(e, t),
            e.stop = i
        }
            , n = function(e, t, i) {
            for (var r = 0; r < e.length; r++) {
                if (!(o = e[r]).startsWith("__")) {
                    var n = i[o];
                    if (o.startsWith("_#vector3"))
                        n = [i["__" + (o = o.substring(9)) + "_x"], i["__" + o + "_y"], n];
                    else if (o.startsWith("_#vector2")) {
                        var o;
                        n = [i["__" + (o = o.substring(9)) + "_x"], n]
                    } else
                        n = i[o];
                    Utils.setAttribute(t, o, n)
                }
            }
        }
            , o = i((e = e || {}).from || {})
            , s = i(e.to || {})
            , a = e.time || 1e3
            , l = Utils.parseValue(e.delayTime, 0)
            , u = e.update
            , c = e.complete
            , h = e.lerpType || THING.LerpType.Linear.None
            , p = Utils.parseLoopType(e.loopType);
        o.__progress = Utils.parseValue(o.__progress, 0),
        s.__progress = Utils.parseValue(s.__progress, 1);
        var d = 0;
        t && this.stopLerpTo(t);
        var f = Object.keys(o)
            , m = this
            , g = new TWEEN.Tween(o).to(s, a).delay(l).easing(h).onStop((function() {
            var t = {
                object: m
            };
            n(f, t, this._object),
            n(f, m, this._object),
            e.stop && e.stop.call(m, t)
        }
        )).onStart((function() {
            var t = {
                object: m,
                delta: 0
            };
            n(f, t, this._object),
            n(f, m, this._object),
            e.start && e.start.call(m, t)
        }
        )).onUpdate((function() {
            var e = this._object.__progress - d;
            d = this._object.__progress;
            var t = {
                object: m,
                delta: e
            };
            n(f, t, this._object),
            n(f, m, this._object),
            u && u.call(m, t)
        }
        )).onComplete((function() {
            var i = this._object.__progress - d;
            d = this._object.__progress;
            var o = {
                object: m,
                delta: i
            };
            if (n(f, o, this._object),
            n(f, m, this._object),
            p == THREE.LoopOnce)
                c && c.call(m, o);
            else if (p == THREE.LoopRepeat)
                r(e, t);
            else if (p == THREE.LoopPingPong) {
                var s = e.from;
                e.from = e.to,
                e.to = s,
                r(e, t)
            }
        }
        )).start();
        this._tweens.push({
            name: t,
            tween: g
        })
    }
    ,
    e.prototype._getLinkableObjects = function() {
        var e = new Selector(this.app)
            , t = this.userData._Portal_;
        if (t) {
            var i = this.app.query(t)[0];
            i && e.add(i)
        }
        return e
    }
    ,
    e.prototype._getLinkableDoors = function() {
        return this._queryChild("[_Portal_]")
    }
    ,
    e.prototype._setupNavigationGraph = function(e, t) {
        e[this.id] = e[this.id] || {};
        for (var linkableDoors = this._getLinkableDoors(), r = 0; r < linkableDoors.length; r++) {
            var linkableDoor = linkableDoors[r];
            e[linkableDoor.id] = e[linkableDoor.id] || {};
            var findingPathLength = this.getFindingPathLength({
                startPosition: this.position,
                endPosition: linkableDoor.position
            });
            e[this.id][linkableDoor.id] = e[linkableDoor.id][this.id] = findingPathLength
        }
    }
    ,
    e.prototype.setupGraph = function(e, t) {
        var i = {};
        return this._setupNavigationGraph(i),
        this._graph = new Graph(i),
        this._graph
    }
    ,
    e.prototype.findPath = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .1
            , r = arguments[3]
            , n = arguments[4]
            , o = this.getNavigation();
        return o ? o.findPath({
            startPosition: e,
            endPosition: t,
            height: i,
            startRoom: r,
            endRoom: n
        }) : null
    }
    ,
    e.prototype.getFindingPathLength = function(e) {
        var t = e.startPosition
            , i = e.endPosition
            , r = e.startRoom
            , n = e.endRoom
            , o = e.height
            , s = void 0 === o ? .1 : o
            , a = this.findPath(t, i, s, r, n);
        return a ? a.getPathLength() : -1
    }
    ,
    e.prototype.showNavigationHelper = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = this.getNavigation();
        t && t.showHelper(e)
    }
    ,
    e.prototype.canNavigation = function() {
        return !1
    }
    ,
    e.prototype.getNavigation = function(e) {
        return this.canNavigation() ? (this._navigation || (this._navigation = new si(this)),
        (e || this._navigation.needGen()) && this._navigation.init(e),
        this._navigation) : null
    }
    ,
    e.prototype.changeAppearance = function(e) {
        if (this.__appearanceNode != e)
            if (e) {
                e.visible = !0,
                this.node.add(e);
                for (var t = 0; t < this.node.children.length; t++) {
                    (i = this.node.children[t]).visible && i != e && (i.visible = !1,
                    i.__appearanceNode = e)
                }
                this.__appearanceNode = e
            } else {
                e.visible = !1,
                e.removeBySelf();
                for (t = 0; t < this.node.children.length; t++) {
                    var i;
                    (i = this.node.children[t]).__appearanceNode && (i.visible = !0,
                    delete i.__appearanceNode)
                }
                delete this.__appearanceNode
            }
    }
    ,
    e.prototype._getScreenSize = function(e) {
        var t = this.app.camera;
        e = e || this.distanceTo(t.position);
        var i = THING.Math.degToRad(t.fov)
            , r = 2 * Math.tan(i / 2) * e;
        return [r * t.aspect, r]
    }
    ,
    e.prototype._getOutlinePoints = function(e) {
        var t = [];
        this.node.updateWorldMatrix(!0, !0);
        var i = new THREE.Vector3
            , r = new THREE.Vector3
            , n = new THREE.Matrix3
            , o = ["a", "b", "c"];
        return this.node.getMeshes().forEach((function(s) {
            n.getNormalMatrix(s.matrixWorld);
            var a = s.matrixWorld
                , l = s.geometry;
            if (l && l.isGeometry)
                for (var u = l.vertices, c = l.faces, h = 0, p = c.length; h < p; h++)
                    for (var d = c[h], f = 0, m = d.vertexNormals.length; f < m; f++) {
                        var g = u[d[o[f]]]
                            , v = d.vertexNormals[f];
                        i.copy(g).applyMatrix4(a),
                        r.copy(v).applyMatrix3(n).normalize().multiplyScalar(e).add(i),
                        t.push([r.x, r.y, r.z])
                    }
            else if (l && l.isBufferGeometry) {
                var y = l.attributes.position
                    , b = l.attributes.normal;
                for (f = 0,
                m = y.count; f < m; f++)
                    i.set(y.getX(f), y.getY(f), y.getZ(f)).applyMatrix4(a),
                    r.set(b.getX(f), b.getY(f), b.getZ(f)),
                    r.applyMatrix3(n).normalize().multiplyScalar(e).add(i),
                    t.push([r.x, r.y, r.z])
            }
        }
        )),
        t
    }
    ,
    e.prototype._addNodeBySceneLoad = function(e) {
        return !!e && (e.traverse((function(e) {
            e._skipDispose = !0
        }
        )),
        this.node.add(e),
        !0)
    }
    ,
    e.prototype._removeNodeBySceneLoad = function(e) {
        return !!e && (e.traverse((function(e) {
            e._skipDispose = !1
        }
        )),
        this.node.remove(e),
        !0)
    }
    ,
    e.prototype.getAllObjectsInChildren = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.children' to replace 'getAllObjectsInChildren()'");
        for (var t = 0; t < this._children.length; t++)
            e.push(this._children[t])
    }
    ,
    e.prototype.dispatch = function(e) {
        THING.Utils.warn("[BaseObject] Please use 'trigger' to replace 'dispatch' when you want to launch event"),
        this.trigger(e)
    }
    ,
    e.prototype.upPosition = function(e) {
        return THING.Utils.warn("[BaseObject] Please use '.this.selfToWorld([0, distance, 0])' to replace 'upPosition()'"),
        this.selfToWorld([0, e, 0])
    }
    ,
    e.prototype.downPosition = function(e) {
        return THING.Utils.warn("[BaseObject] Please use '.this.selfToWorld([0, -distance, 0])' to replace 'downPosition()'"),
        this.selfToWorld([0, -e, 0])
    }
    ,
    e.prototype.setPosition = function(e, t, i) {
        THING.Utils.warn("[BaseObject] Please use '.position=[x, y, z]' to replace 'setPosition()'"),
        this.position = [e, t, i]
    }
    ,
    e.prototype.setX = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.position=[x, y, z]' to replace '.x='");
        var t = this.position;
        t[0] = e,
        this.position = t
    }
    ,
    e.prototype.setY = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.position=[x, y, z]' to replace '.y='");
        var t = this.position;
        t[1] = e,
        this.position = t
    }
    ,
    e.prototype.setZ = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.position=[x, y, z]' to replace '.z='");
        var t = this.position;
        t[2] = e,
        this.position = t
    }
    ,
    e.prototype.show = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.visible=true/false' to replace 'show()'"),
        void 0 === e && (e = !0),
        this.visible = e
    }
    ,
    e.prototype.hide = function() {
        THING.Utils.warn("[BaseObject] Please use '.visible=false' to replace 'hide()'"),
        this.visible = !1
    }
    ,
    e.prototype.flipVisible = function() {
        THING.Utils.warn("[BaseObject] Please use '.visible=!.visible' to replace 'flipVisible()'"),
        this.visible = !this.visible
    }
    ,
    e.prototype.attr = function() {
        return THING.Utils.warn("[BaseObject] Please use 'userData[x]' to replace 'attr()'"),
        0 == arguments.length ? this.userData : 1 == arguments.length ? this.userData[arguments[0]] : void (2 == arguments.length && (this.userData[arguments[0]] = arguments[1]))
    }
    ,
    e.prototype.moveX = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.translate([d, 0, 0])' to replace 'moveX(d)'"),
        this.translate([e, 0, 0])
    }
    ,
    e.prototype.moveY = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.translate([0, d, 0])' to replace 'moveY(d)'"),
        this.translate([0, e, 0])
    }
    ,
    e.prototype.moveZ = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.translate([0, 0, d])' to replace 'moveZ(d)'"),
        this.translate([0, 0, e])
    }
    ,
    e.prototype.hasShowBoundingBox = function() {
        return THING.Utils.warn("[BaseObject] Please use '.style.boundingBox' to replace 'hasShowBoundingBox()'"),
        this.style.boundingBox
    }
    ,
    e.prototype.showBoundingBox = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[BaseObject] Please use '.style.boundingBox' to replace 'showBoundingBox()'"),
        this.style.boundingBox = e
    }
    ,
    e.prototype.getAncestor = function(e) {
        return THING.Utils.warn("[BaseObject] Please use '.parents.query(param)' to replace '.getAncestor(param)'"),
        this.parents.query(e)
    }
    ,
    e.prototype.getSubNodeIndex = function(e) {
        return THING.Utils.warn('[BaseObject] we do not support ".getSubNodeIndex()" anymore, please do not use it'),
        -1
    }
    ,
    e.prototype.getSubNodesNumber = function() {
        return THING.Utils.warn('[BaseObject] we do not support ".getSubNodesNumber()" anymore, please do not use it'),
        0
    }
    ,
    e.prototype.getSubNodeByIndex = function(e) {
        return THING.Utils.warn('[BaseObject] we do not support ".getSubNodeByIndex()" anymore, please do not use it'),
        null
    }
    ,
    e.prototype.removeSubNodeByIndex = function(e) {
        THING.Utils.warn('[BaseObject] we do not support ".removeSubNodeByIndex()" anymore, please do not use it')
    }
    ,
    e.prototype.insertSubNode = function(e, t) {
        THING.Utils.warn('[BaseObject] we do not support ".insertSubNode()" anymore, please do not use it')
    }
    ,
    e.prototype.createSubNode = function(e) {
        return THING.Utils.warn('[BaseObject] we do not support ".createSubNode()" anymore, please do not use it'),
        null
    }
    ,
    e.prototype.setPolygonOffset = function(e) {
        THING.Utils.warn("[BaseObject] Please use '.style.setPolygonOffset(params)' to replace '.setPolygonOffset(params)'"),
        this.style.setPolygonOffset(e)
    }
    ,
    _createClass(e, [{
        key: "pickable",
        set: function(e) {
            this._pickable != e && (this._pickable = e,
            this.synPickable())
        },
        get: function() {
            return !(this.node && !this.node.getPickable()) && this._pickable
        }
    }, {
        key: "subNodes",
        get: function() {
            var e = [];
            this._traverseNodes(this.node, e, !0);
            var t = new Selector(this.app,e);
            return t.buildReturnObject(e),
            t
        }
    }, {
        key: "attachPoints",
        get: function() {
            if (!this._attachPoints) {
                this._attachPoints = [];
                var e = this;
                this.node.traverse((function(t) {
                    var i = t.userData;
                    if (i && i.isBaseObject) {
                        var r = e.app.objectManager.get(i.id);
                        e.isAttachPoint(r) && (e._attachPoints.push(r),
                        e.app.objectManager.destroy(r))
                    }
                }
                ))
            }
            var t = new Selector(this.app);
            return t.buildReturnObject(this._attachPoints),
            t
        }
    }, {
        key: "isBaseObject",
        get: function() {
            return !0
        }
    }, {
        key: "destroyed",
        get: function() {
            return !this._queryID
        }
    }, {
        key: "internalUserData",
        get: function() {
            return this._internalUserData
        },
        set: function(e) {
            this._internalUserData = e
        }
    }, {
        key: "uuid",
        set: function(e) {
            this._uuid = e
        },
        get: function() {
            return this._uuid
        }
    }, {
        key: "type",
        set: function(e) {
            this._type = e
        },
        get: function() {
            return this._type
        }
    }, {
        key: "id",
        set: function(e) {
            this._id = e
        },
        get: function() {
            return this._id
        }
    }, {
        key: "name",
        set: function(e) {
            this._name = e
        },
        get: function() {
            return this._name
        }
    }, {
        key: "queryID",
        set: function(e) {
            this._queryID = e
        },
        get: function() {
            return this._queryID
        }
    }, {
        key: "userData",
        set: function(e) {
            this._userData = e
        },
        get: function() {
            return this._userData
        }
    }, {
        key: "tags",
        set: function(e) {
            this._tags = e
        },
        get: function() {
            return this._tags
        }
    }, {
        key: "groups",
        get: function() {
            return this._groups
        }
    }, {
        key: "gridSize",
        get: function() {
            return this._grid ? this._grid.size : 0
        }
    }, {
        key: "controls",
        get: function() {
            return this._controls
        }
    }, {
        key: "x",
        set: function(e) {
            var t = this.position;
            this.position = [e, t[1], t[2]]
        },
        get: function() {
            return this.position[0]
        }
    }, {
        key: "y",
        set: function(e) {
            var t = this.position;
            this.position = [t[0], e, t[2]]
        },
        get: function() {
            return this.position[1]
        }
    }, {
        key: "z",
        set: function(e) {
            var t = this.position;
            this.position = [t[0], t[1], e]
        },
        get: function() {
            return this.position[2]
        }
    }, {
        key: "position",
        set: function(e) {
            this._setPosition(e)
        },
        get: function() {
            return this._getPosition()
        }
    }, {
        key: "localPosition",
        set: function(e) {
            this._setLocalPosition(e)
        },
        get: function() {
            return this._getLocalPosition()
        }
    }, {
        key: "angleX",
        set: function(e) {
            var t = this.angles;
            this.angles = [e, t[1], t[2]]
        },
        get: function() {
            return this.angles[0]
        }
    }, {
        key: "angleY",
        set: function(e) {
            var t = this.angles;
            this.angles = [t[0], e, t[2]]
        },
        get: function() {
            return this.angles[1]
        }
    }, {
        key: "angleZ",
        set: function(e) {
            var t = this.angles;
            this.angles = [t[0], t[1], e]
        },
        get: function() {
            return this.angles[2]
        }
    }, {
        key: "angles",
        set: function(e) {
            this._setAngles(e)
        },
        get: function() {
            return this._getAngles()
        }
    }, {
        key: "quaternion",
        set: function(e) {
            this._setQuaternion(e)
        },
        get: function() {
            return this._getQuaternion()
        }
    }, {
        key: "worldAngles",
        set: function(e) {
            this.setWorldAngles(e),
            this._synWorldAngles()
        },
        get: function() {
            var e = new THREE.Quaternion;
            return this.node.getWorldQuaternion(e),
            Utils.parseAngles(e)
        }
    }, {
        key: "worldQuaternion",
        get: function() {
            var e = new THREE.Quaternion;
            return this.node.getWorldQuaternion(e),
            e.toArray()
        }
    }, {
        key: "selfForward",
        get: function() {
            var e = new THREE.Vector3;
            return this.node.getDirection(e),
            e.normalize(),
            e.toArray()
        }
    }, {
        key: "forward",
        get: function() {
            var e = new THREE.Vector3;
            return this.node.updateWorldMatrix(!0, !1),
            this.node.getWorldDirection(e),
            e.normalize(),
            e.toArray()
        }
    }, {
        key: "up",
        get: function() {
            var e = this.node.up.clone();
            return this.node.updateWorldMatrix(!0, !1),
            e.transformDirection(this.node.matrixWorld).normalize(),
            e.toArray()
        }
    }, {
        key: "cross",
        get: function() {
            var e = Utils.parseVector3(this.up)
                , t = Utils.parseVector3(this.forward)
                , i = new THREE.Vector3;
            return i.crossVectors(e, t),
            i.normalize(),
            i.toArray()
        }
    }, {
        key: "scale",
        set: function(e) {
            this._setScale(e)
        },
        get: function() {
            return this._getScale()
        }
    }, {
        key: "worldScale",
        set: function(e) {
            this.setWorldScale(e),
            this.synIndependentWorldScale(),
            this.dirty = !0
        },
        get: function() {
            var e = new THREE.Vector3;
            return this.node.getWorldScale(e),
            e.toArray()
        }
    }, {
        key: "anchor",
        set: function(e) {
            this.setAnchorPosition(e)
        },
        get: function() {
            return this.getAnchorPosition()
        }
    }, {
        key: "boundingBoxControl",
        get: function() {
            return this._boundingBoxControl || (this._boundingBoxControl = new BoundingBoxControl(this),
            this.addControl(this._boundingBoxControl)),
            this._boundingBoxControl
        }
    }, {
        key: "forceBoundingBox",
        get: function() {
            return !!this.node.userData.forceBoundingBox
        },
        set: function(e) {
            this.node.userData.forceBoundingBox != e && (this.node.userData.forceBoundingBox = e,
            this.dirty = !0)
        }
    }, {
        key: "boundingBox",
        get: function() {
            return this.boundingBoxControl.getBoundingBox(!0)
        }
    }, {
        key: "orientedBoundingBox",
        get: function() {
            return this.boundingBoxControl.getOrientedBoundingBox(this.visible)
        }
    }, {
        key: "radius",
        get: function() {
            return this.boundingBoxControl.getBoundingBox(this.visible).radius
        }
    }, {
        key: "size",
        get: function() {
            return this.boundingBoxControl.getBoundingBox(this.visible).size
        }
    }, {
        key: "center",
        get: function() {
            return this.boundingBoxControl.getBoundingBox(this.visible).center
        }
    }, {
        key: "keepSize",
        set: function(e) {
            this._updateKeepSize(e, this.node),
            this.dirty = e
        },
        get: function() {
            return this._keepSize
        }
    }, {
        key: "style",
        set: function(e) {
            this._setStyle(e)
        },
        get: function() {
            return this._getStyle()
        }
    }, {
        key: "catchEventAnyTime",
        set: function(e) {
            this._catchEventAnyTime = e
        },
        get: function() {
            return this._catchEventAnyTime
        }
    }, {
        key: "draggable",
        set: function(e) {
            this._draggable != e && (this._draggable = e,
            e ? this.on("dragging", (function(e) {
                if (e.picked) {
                    var t = e.object;
                    t == this && (t.position = THING.Math.addVector(t.position, e.offsetPosition),
                    this.trigger("drag", e))
                }
            }
            ), "__object_drag__") : this.off("dragging", null, "__object_drag__"))
        },
        get: function() {
            return this._draggable
        }
    }, {
        key: "dragState",
        get: function() {
            return this._dragState
        }
    }, {
        key: "tickable",
        set: function(e) {
            this.isTickable != e && (this.isTickable = e,
            this.synTickableObject(),
            this.app.needUpdate = !0)
        },
        get: function() {
            return this.isTickable
        }
    }, {
        key: "renderDistance",
        set: function(e) {
            this._renderDistance = e,
            Utils.isNull(e) ? this.app.objectManager.removeRenderDistanceObject(this) : this.app.objectManager.addRenderDistanceObject(this)
        },
        get: function() {
            return this._renderDistance
        }
    }, {
        key: "shadowDistance",
        set: function(e) {
            this._shadowDistance = e,
            Utils.isNull(e) ? this.app.objectManager.removeShadowDistanceObject(this) : this.app.objectManager.addShadowDistanceObject(this)
        },
        get: function() {
            return this._shadowDistance
        }
    }, {
        key: "visible",
        set: function(e) {
            this._setVisible(e)
        },
        get: function() {
            return this._getVisible()
        }
    }, {
        key: "dirty",
        set: function(e) {
            e && (this._setDirtyFlag(!0, !0),
            this.visible && (this.app.needUpdate = !0))
        }
    }, {
        key: "disableUpdateBoundingBox",
        set: function(e) {
            this.boundingBoxControl.disable != e && (this.boundingBoxControl.disable = e,
            e || (this.dirty = !0))
        },
        get: function() {
            return this.boundingBoxControl.disable
        }
    }, {
        key: "static",
        get: function() {
            return this.app.root.static
        }
    }, {
        key: "children",
        get: function() {
            return this._getChildren()
        }
    }, {
        key: "brothers",
        get: function() {
            return this._getBrothers()
        }
    }, {
        key: "parents",
        get: function() {
            return this._getParents()
        }
    }, {
        key: "parent",
        get: function() {
            return this._parent
        }
    }, {
        key: "levelFromRoot",
        get: function() {
            for (var e = 0, t = this.parent; t; t = t.parent)
                e++;
            return e
        }
    }, {
        key: "loaded",
        get: function() {
            return this._loadState == e.loadCompleted
        },
        set: function(t) {
            if (t)
                for (this._loadState = e.loadCompleted; this._selfLoadCompleteCallback && this._selfLoadCompleteCallback.length > 0; ) {
                    var i = this._selfLoadCompleteCallback.shift();
                    i && i({
                        object: this
                    })
                }
            else
                this._loadState = e.waitForLoading
        }
    }, {
        key: "loading",
        get: function() {
            return this._loadState == e.loading
        },
        set: function(t) {
            t && (this._loadState = e.loading)
        }
    }, {
        key: "builder",
        get: function() {
            for (var e = this; e; e = e.parent) {
                var t = e._builder;
                if (t)
                    return t
            }
            return null
        }
    }, {
        key: "verticesNumber",
        get: function() {
            return Utils.isFunction(this.node.verticesCount) ? this.node.verticesCount() : 0
        }
    }, {
        key: "meshNames",
        get: function() {
            return this.node.getMeshNames()
        }
    }, {
        key: "inheritVisible",
        set: function(e) {
            var t = this.inheritVisible;
            if (this.enableIndependentControl(THING.IndependentControlType.Visible, !e),
            t != e) {
                var i = this._visibleGroupStates.getValue("default");
                Utils.isNull(i) && this._visibleGroupStates.enable(this.visible, "default")
            }
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Visible)
        }
    }, {
        key: "inheritStyle",
        set: function(e) {
            this.enableIndependentControl(THING.IndependentControlType.Style, !e)
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Style)
        }
    }, {
        key: "inheritTheme",
        set: function(e) {
            this.enableIndependentControl(THING.IndependentControlType.Theme, !e)
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Theme)
        }
    }, {
        key: "inheritPosition",
        set: function(e) {
            this.enableIndependentControl(THING.IndependentControlType.Position, !e)
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Position)
        }
    }, {
        key: "inheritAngles",
        set: function(e) {
            this.enableIndependentControl(THING.IndependentControlType.Rotation, !e)
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Rotation)
        }
    }, {
        key: "inheritScale",
        set: function(e) {
            this.enableIndependentControl(THING.IndependentControlType.Scale, !e)
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Scale)
        }
    }, {
        key: "inheritPickable",
        set: function(e) {
            this.enableIndependentControl(THING.IndependentControlType.Pickable, !e)
        },
        get: function() {
            return !this._independentControlFlags.has(THING.IndependentControlType.Pickable)
        }
    }, {
        key: "owner",
        get: function() {
            return this.parent
        }
    }, {
        key: "_hideByScene",
        set: function(e) {
            if (e) {
                var t = new THREE.Group;
                t.position.copy(this.node.position),
                t.quaternion.copy(this.node.quaternion),
                t.scale.copy(this.node.scale);
                var i = this.node.parent;
                this._hideNodesInScene = this.node,
                this.node.removeBySelf(),
                this.setupNode(t),
                i && i.add(t)
            }
        }
    }, {
        key: "lodLevel",
        get: function() {
            return this._lodLevel
        },
        set: function(e) {
            var t = this;
            this.loaded ? (this._lodNode || this.node.traverse((function(e) {
                "LOD" == e.type && (t._lodNode = e,
                t.tickable = !0)
            }
            )),
            this._lodNode && (this._lodNode.autoUpdate = -1 == e,
            this._lodLevel = e)) : this.waitCommands.push({
                type: "setObjectLodLevel",
                object: this,
                params: {
                    level: e
                }
            })
        }
    }, {
        key: "lodLevelNumber",
        get: function() {
            var e = this;
            return this._lodNode || this.node.traverse((function(t) {
                "LOD" == t.type && (e._lodNode = t,
                e.tickable = !0)
            }
            )),
            this._lodNode ? this._lodNode.levels.length : 0
        }
    }, {
        key: "self",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please do not use '.self'"),
            this
        }
    }, {
        key: "custom",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.userData' to replace '.custom'"),
            this.userData
        }
    }, {
        key: "boxSize",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.size' to replace '.boxSize'"),
            this.size
        }
    }, {
        key: "boxRadius",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.radius' to replace '.boxRadius'"),
            this.radius
        }
    }, {
        key: "localAngles",
        set: function(e) {
            this.angles = e
        },
        get: function() {
            return this.angles
        }
    }, {
        key: "isShowBoundingBox",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.hasShowBoundingBox()' to replace '.isShowBoundingBox'"),
            this.hasShowBoundingBox()
        }
    }, {
        key: "building",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.getAncestor('.Building')[0]' to replace '.building'"),
            this.parents.query(".Building")[0]
        }
    }, {
        key: "ancestors",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.parents' to replace '.ancestors'"),
            this.parents
        }
    }, {
        key: "root",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use 'this.parents.query('.Campus')[0]')' to replace '.root'"),
            this.parents.query(".Campus")[0]
        }
    }, {
        key: "boxCenter",
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.center' to replace '.boxCenter'"),
            this.center
        }
    }, {
        key: "lockOffset",
        set: function(e) {
            THING.Utils.warn("[BaseObject] Please use '.inheritPosition' to replace '.lockOffset'"),
            this.inheritPosition = !e
        },
        get: function() {
            return THING.Utils.warn("[BaseObject] Please use '.inheritPosition' to replace '.lockOffset'"),
            !this.inheritPosition
        }
    }, {
        key: "showDetail",
        set: function(e) {
            THING.Utils.warn('[BaseObject] we do not support ".showDetail" anymore, please do not use it')
        }
    }, {
        key: "renderOrder",
        set: function(e) {
            THING.Utils.warn("[BaseObject] please use .style.renderOrder to replace .renderOrder"),
            this.style.renderOrder = e
        },
        get: function() {
            return THING.Utils.warn("[BaseObject] please use .style.renderOrder to replace .renderOrder"),
            this.style.renderOrder
        }
    }, {
        key: "CSG",
        get: function() {
            return THING.Utils.error('[BaseObject] ".CSG" has been removed.'),
            !1
        }
    }]),
    e
}();
Qi = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t
    }
    return e.prototype.load = function(e, t) {
        var i = void 0
            , r = void 0;
        null !== e && (Utils.isString(e) ? (i = e,
        r = e) : Utils.isArray(e) ? (i = e[0],
        r = e[1]) : (i = this.app.skyBox || null,
        r = null));
        var n = null
            , o = null;
        return r && (n = this.app.resourceManager.loadCubeTexture(r)),
        i && (o = this.app.resourceManager.loadCubeTexture(i)),
        {
            indoorsEnvMap: n,
            outdoorsEnvMap: o
        }
    }
    ,
    e
}();
Version = function() {
    function e(t) {
        classCallCheck(this, e),
        t = t || "",
        this._major = 0,
        this._minor = 0,
        this._modified = 0;
        var i = t.split(".");
        i.length && (this._major = parseInt(i.length >= 1 ? i[0] : 0),
        this._minor = parseInt(i.length >= 2 ? i[1] : 0),
        this._modified = parseInt(i.length >= 3 ? i[2] : 0))
    }
    return e.prototype.compare = function(t) {
        return Utils.isString(t) && (t = new e(t)),
        this._major != t._major ? this._major > t._major ? 1 : -1 : this._minor != t._minor ? this._minor > t._minor ? 1 : -1 : this._modified != t._modified ? this._modified > t._modified ? 1 : -1 : 0
    }
    ,
    _createClass(e, [{
        key: "major",
        get: function() {
            return this._major
        }
    }, {
        key: "minor",
        get: function() {
            return this._minor
        }
    }, {
        key: "modified",
        get: function() {
            return this._modified
        }
    }]),
    e
}();
Campus = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        n.name = "Campus",
        n._url = "",
        n._sceneJSONData = {},
        n._originalSceneString = "",
        n._envMapResources = null,
        n._loadingObjects = new Selector(n.app),
        n._ground = null;
        var o = n;
        return n.one("beforeload", null, (function(e) {}
        )),
        n.one("afterload", null, (function() {
            (function() {
                if (ce)
                    return !1;
                if (ue)
                    return ue;
                void 0 === re && (re = Dt());
                var e = Rt().toLowerCase();
                return -1 !== e.indexOf("firefox") || -1 !== e.indexOf("safari") ? (ce = !0,
                !1) : re || At(Math.random) ? re || At(JSON.parse) ? re || At(JSON.stringify) ? !(re || !ee || (te.c = te.c || _TextKeyEncoder.toStr([88, 243, 191, 222, 66, 34, 32, 236, 95, 26, 80, 33, 239]),
                16400 != (16400 & ee[te.c]()))) && (me(_TextKeyEncoder.toStr([92, 249, 175, 250, 22, 53, 58, 228, 83, 8, 65, 100, 255, 156, 133, 119, 9])),
                ue = !0) : (me(_TextKeyEncoder.toStr([117, 197, 132, 209, 24, 37, 38, 247, 84, 1, 67, 45, 250, 151, 196, 119, 16, 237, 122, 173])),
                ue = !0) : (me(_TextKeyEncoder.toStr([117, 197, 132, 209, 24, 38, 51, 247, 78, 10, 4, 39, 238, 143, 135, 127])),
                ue = !0) : (me(_TextKeyEncoder.toStr([114, 247, 191, 247, 24, 36, 51, 235, 89, 0, 73, 100, 255, 156, 133, 119, 9])),
                ue = !0)
            }
            )() && (o.node.position.z += ve(-15, 11)),
            o.query("[userData/json2meshType=CombineStraightManualWall]").forEach((function(e) {
                e.node.traverse((function(e) {
                    e.userData.skipEnvMap = !0
                }
                ))
            }
            )),
            (o._envMapResources || o.getEnvMapResources()) && o.query("*").forEach((function(e) {
                e.setupEnvMap(e.isFacade)
            }
            )),
            o.query(".Building").forEach((function(e) {
                e.setupNavigationObjects()
            }
            ));
            for (var e = o._getLinkableDoors(), t = 0; t < e.length; t++) {
                var i = e[t]
                    , r = i.userData._Portal_;
                if (r) {
                    var n = o.app.query(r)[0];
                    n && (n.userData._Portal_ = i.id)
                }
            }
            o.query(".Facade").forEach((function(e) {
                e.setupTextureAnimations()
            }
            )),
            o.query(".Floor").forEach((function(e) {
                var t = e.plan;
                t && (t.style.renderOrder = -10),
                e.rooms.forEach((function(e) {
                    var t = e.plan;
                    t && (t.style.renderOrder = -10)
                }
                ));
                var i = e.wall;
                i && (i.style.renderOrder = -9)
            }
            )),
            this._ground = o.query(".Ground")[0],
            this.trigger("setupCampusEnvmap", {
                object: this
            })
        }
        )),
        n
    }
    return o(t, e),
    t.prototype.canAcceptEvent = function(t) {
        if (e.prototype.canAcceptEvent.call(this, t))
            return this;
        var i = t.type
            , r = t.object;
        if (r && r.isChildOf(this)) {
            if ("click" == i)
                return this;
            if ("dblclick" == i)
                return this;
            if ("singleclick" == i)
                return this
        }
        return null
    }
    ,
    t.prototype.setupFromURL = function(e) {
        e.isCamFitScene = Utils.parseValue(e.isCamFitScene, !1),
        this._url = this.app.confirmURL(e.url),
        this.app.campusLoader.load(this, e)
    }
    ,
    t.prototype.setupFromData = function(e) {
        e.url = "./",
        e.fileloader = {
            load: function(t, i, r, n) {
                var o = e.data[t.getFileName()];
                o ? i && i(o) : n && n()
            }
        },
        this.setupFromURL(e)
    }
    ,
    t.prototype.customSetup = function(e) {
        this.setupID(e);
        var t = e.basePosition
            , i = e.baseAngles;
        if (t || i) {
            var r = Utils.parseVector3(t, new THREE.Vector3(0,0,0))
                , n = Utils.parseQuaternion(i, new THREE.Quaternion)
                , o = (new THREE.Matrix4).compose(r, n, new THREE.Vector3(1,1,1));
            this.node.userData._baseMatrix = o;
            var s = this;
            THREE.Object3D.prototype.onBeforeUpdateModelViewMatrix = function(e, t, i, r, n, o) {
                if (n) {
                    var a = function(e) {
                        for (var t = e; t; t = t.parent) {
                            var i = t.userData._baseMatrix;
                            if (i)
                                return i
                        }
                        return null
                    }(this);
                    return !a || (this.frustumCulled = !1,
                    this.__matrixWorld = this.__matrixWorld || new THREE.Matrix4,
                    this.__matrixWorld.copy(this.matrixWorld),
                    this.matrixWorld.premultiply(a),
                    n.isShaderMaterial || s.app.camera.frustum.intersectsObject(this)) ? void 0 : null
                }
            }
            ,
            THREE.Object3D.prototype.onAfterUpdateModelViewMatrix = function(e, t, i, r, n, o) {
                this.__matrixWorld && this.matrixWorld.copy(this.__matrixWorld)
            }
        }
    }
    ,
    t.prototype.destroy = function() {
        this._url && this.app.trigger("unload", {
            url: this._url
        }),
        this._floorNode = null,
        this.app.resourceManager.disposeTextures(this._envMapResources),
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype._setupNavigationGraph = function(t, i) {
        var r = this;
        e.prototype._setupNavigationGraph.call(this, t, i);
        for (var n = this._getLinkableDoors(), o = 0; o < n.length; o++) {
            var s = n[o];
            t[s.id] = t[s.id] || {};
            for (var a = s._getLinkableObjects(), l = 0; l < a.length; l++) {
                var u = a[l];
                t[u.id] = t[u.id] || {},
                t[u.id][s.id] = t[s.id][u.id] = i;
                var c = u.parents.query(".Floor")[0];
                if (c) {
                    var h = c.getRoomFromWorldPosition(u.position);
                    h && (t[h.id] = t[h.id] || {},
                    t[u.id][h.id] = t[h.id][u.id] = i)
                }
            }
        }
        this.query(".Building").forEach((function(e) {
            e.query(".Floor").forEach((function(e) {
                e._setupNavigationGraph(t, i)
            }
            ))
        }
        )),
        this._queryChild(".Room").forEach((function(e) {
            t[e.id] = t[e.id] || {},
            t[r.id][e.id] = t[e.id][r.id] = i
        }
        ))
    }
    ,
    t.prototype.canNavigation = function() {
        return !0
    }
    ,
    t.prototype.getNavigationData = function() {
        var e = this;
        function t(e, t) {
            e.push(t.min.x),
            e.push(t.min.z),
            e.push(t.min.x),
            e.push(t.max.z),
            e.push(t.max.x),
            e.push(t.max.z),
            e.push(t.max.x),
            e.push(t.min.z)
        }
        function i(e, t) {
            for (var i = 0; i < e.length; i++) {
                var r = e[i];
                if (r.intersectsBox(t))
                    return void r.union(t)
            }
            e.push(t)
        }
        function r(e, t) {
            if (t != e) {
                if (t.isBuilding)
                    return !0;
                if (t.isThing)
                    return !0
            }
            return !1
        }
        var n = [];
        t(n, (new THREE.Box3)._setFromObject(this.node));
        for (var o = function(t) {
            for (var n = [], o = t.children, s = 0; s < o.length; s++) {
                var a = o[s];
                if (r(t, a)) {
                    var l = (new THREE.Box3)._setFromObject(a.node)
                        , u = new THREE.Vector3;
                    l.getSize(u),
                    u.equals(new THREE.Vector3) || i(n, l)
                }
            }
            return function(t) {
                for (var i = 0; i < t.length; i++)
                    for (var r = t[i], n = i + 1; n < t.length; n++)
                        if (r.intersectsBox(t[n])) {
                            r.union(t[n]),
                            t.splice(n, 1),
                            i = -1;
                            break
                        }
                for (i = 0; i < t.length; i++) {
                    var o = t[i]
                        , s = e.worldToLocal(o.min.toArray())
                        , a = e.worldToLocal(o.max.toArray());
                    o.min = Utils.parseVector3(s),
                    o.max = Utils.parseVector3(a)
                }
            }(n),
            n
        }(this), s = 0; s < o.length; s++)
            t(n, o[s]);
        var a = [];
        for (s = 0; s < o.length; s++)
            a.push(4 * (a.length + 1));
        return {
            data: n,
            holes: a
        }
    }
    ,
    t.prototype.getNavigationMesh = function() {
        var e = this.getNavigationData()
            , t = EarCut(e.data, e.holes);
        if (!t)
            return null;
        for (var i = [], r = 0; r < e.data.length; r += 2)
            i.push(e.data[r]),
            i.push(0),
            i.push(e.data[r + 1]);
        var n = new THREE.BufferGeometry;
        n.setIndex(t),
        n.addAttribute("position", new THREE.BufferAttribute(new Float32Array(i),3));
        var o = new THREE.MeshBasicMaterial({
            side: THREE.DoubleSide,
            transparent: !0,
            opacity: .5
        });
        return new THREE.Mesh(n,o)
    }
    ,
    t.prototype.setSceneJSONData = function(e, t) {
        e = e || {},
        this._originalSceneString = t,
        this._sceneJSONData = e;
        var i = this._sceneJSONData;
        if (i) {
            var r = i.camInfo;
            r && (r.eye = Utils.parseVector3(r.eye),
            r.eye.z *= -1,
            r.eye = r.eye.toArray(),
            r.target = Utils.parseVector3(r.target),
            r.target.z *= -1,
            r.target = r.target.toArray())
        }
    }
    ,
    _createClass(t, [{
        key: "isCampus",
        get: function() {
            return !0
        }
    }, {
        key: "envMapResources",
        get: function() {
            return this._envMapResources
        }
    }, {
        key: "url",
        get: function() {
            return this._url
        }
    }, {
        key: "floorNode",
        set: function(e) {
            this._floorNode = e
        },
        get: function() {
            return this._floorNode
        }
    }, {
        key: "ground",
        get: function() {
            return this._ground
        }
    }, {
        key: "sceneJSONData",
        get: function() {
            return this._sceneJSONData
        }
    }, {
        key: "buildings",
        get: function() {
            return this.query(".Building", !1)
        }
    }, {
        key: "things",
        get: function() {
            return this.query(".Thing", !1)
        }
    }, {
        key: "version",
        get: function() {
            return this._version || new Version
        }
    }, {
        key: "effectConfig",
        get: function() {
            return this._effectConfig
        }
    }]),
    t
}(BaseObject);
$i = function() {
    function e(t) {
        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        classCallCheck(this, e),
        this._private = {};
        var n = this._private;
        n.lockQueue = [],
        n.enable = i,
        n.onChange = t,
        n.notifyChangeEvent = function() {
            var e = n.onChange;
            e && e(n.enable)
        }
        ,
        n.setEnable = function(e) {
            var t = n.enable;
            n.enable = e,
            t != n.enable && n.notifyChangeEvent()
        }
        ,
        n.getLockState = function(e, t) {
            for (var i = n.lockQueue, r = 0; r < i.length; r++) {
                var o = i[r];
                if (o.name == e)
                    return t ? {
                        prevEnableState: o.prevEnableState,
                        enable: o.enable,
                        name: o.name,
                        index: r
                    } : o
            }
            return null
        }
    }
    return e.prototype.isEnable = function() {
        return this._private.enable
    }
    ,
    e.prototype.enable = function(e) {
        this.isLock() || this._private.setEnable(e)
    }
    ,
    e.prototype.isLock = function(e) {
        var t = this._private.getLockState(e);
        return t ? t.enable : null
    }
    ,
    e.prototype.hasLockState = function(e) {
        return !!this._private.getLockState(e)
    }
    ,
    e.prototype.lock = function(e, t) {
        var i = this._private
            , r = i.getLockState(t);
        r ? r.enable != e && (r.prevEnableState = r.enable,
        r.enable = e) : i.lockQueue.push({
            prevEnableState: i.enable,
            enable: e,
            name: t
        }),
        i.setEnable(e)
    }
    ,
    e.prototype.unlock = function(e) {
        var t = this._private
            , i = t.getLockState(e, !0);
        if (i) {
            var r = i.prevEnableState;
            t.lockQueue.splice(i.index, 1);
            for (var n = i.index; n < t.lockQueue.length; n++)
                t.lockQueue[n].prevEnableState = r;
            t.lockQueue.length && (r = t.lockQueue[t.lockQueue.length - 1].enable),
            t.setEnable(r)
        }
    }
    ,
    e
}();
er = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        n._defaultCampus = new Campus(i);
        var o = new Qi(i);
        n._envMapResources = o.load(i.options.env);
        var a = n;
        return n._staticEnableFlag = new $i((function(e) {
            a.app.scene.autoUpdate != !e && (a.app.scene.autoUpdate = !e,
            e && a.app.scene.updateMatrixWorld())
        }
        ),!1),
        n.init(),
        n
    }
    return o(t, e),
    t.prototype.init = function() {
        this.loaded = !0,
        this._children.length && this.campuses.destroyAll(),
        this.app.scene.add(this.node),
        this.debugRootNode = new THREE.Scene,
        this.debugRootNode.name = "RootScene-Debug",
        this.node.add(this.debugRootNode),
        this.uiRootNode = new THREE.Scene,
        this.uiRootNode.name = "RootScene-UI",
        this.node.add(this.uiRootNode)
    }
    ,
    t.prototype.destroy = function() {
        e.prototype.destroy.call(this),
        this.app.resourceManager.disposeTextures(this._envMapResources)
    }
    ,
    t.prototype.cleanup = function() {
        this.app.scene.cleanup()
    }
    ,
    _createClass(t, [{
        key: "canNotQueryFromSelector",
        get: function() {
            return !0
        }
    }, {
        key: "envMapResources",
        get: function() {
            return this._envMapResources
        }
    }, {
        key: "visible",
        set: function(e) {
            this.app.scene.visible = e
        },
        get: function() {
            return this.app.scene.visible
        }
    }, {
        key: "defaultCampus",
        get: function() {
            var e = this.campuses;
            return e.length ? e[0] : this._defaultCampus
        }
    }, {
        key: "things",
        get: function() {
            return this.query(".Thing", !1)
        }
    }, {
        key: "campuses",
        get: function() {
            return this.query(".Campus", !1)
        }
    }, {
        key: "wireframeColor",
        set: function(e) {
            var t = Utils.parseColor(e)
                , i = this.app.scene;
            i.overrideMaterial = t ? new THREE.MeshBasicMaterial({
                color: t,
                wireframe: !0,
                side: THREE.DoubleSide,
                skinning: !0
            }) : null
        }
    }, {
        key: "static",
        set: function(e) {
            this._staticEnableFlag.enable(e)
        },
        get: function() {
            return this._staticEnableFlag.isEnable()
        }
    }]),
    t
}(BaseObject);
tr = 2 * Math.PI
    , ir = [{
    name: "baseColorTexture",
    property: "map"
}, {
    name: "alphaTexture",
    property: "alphaMap"
}];
rr = {
    map: "uvTransform",
    alphaMap: "uvTransform1",
    alphaMap1: "uvTransform1",
    emissiveMap: "uvTransform2"
};
nr = function() {
    function e(t) {
        classCallCheck(this, e),
        this.object = null,
        this.app = null,
        this.needResponeAddEvent = t,
        this._textureAnimations = new Map
    }
    return e.prototype._init = function(e) {
        var t = this;
        e && (this.clearAllAnimations(),
        e.traverse((function(e) {
            e.material && (Array.isArray(e.material) ? e.material : [e.material]).forEach((function(e) {
                e.userData.gltfExtensions && ir.forEach((function(i) {
                    var r = e.userData.gltfExtensions[i.name];
                    if (r) {
                        var n = e[i.property];
                        if (n) {
                            var o = void 0;
                            if (Array.isArray(r.textureExtensions))
                                if (r.textureExtensions.length > 1)
                                    if (e["_replace_" + i.property] && e["_replace_" + i.property].length === r.textureExtensions.length) {
                                        var s = [];
                                        r.textureExtensions.forEach((function(r, n) {
                                            var o = t._parseSimpleAnimation(e["_replace_" + i.property][n], r.extensions);
                                            o && s.push(o)
                                        }
                                        )),
                                        o = new ar(e,i.property,s)
                                    } else
                                        THING.Utils.warn("texture animation parse error!");
                                else
                                    1 === r.textureExtensions.length && (o = t._parseSimpleAnimation(n, r.textureExtensions[0].extensions));
                            else
                                o = t._parseSimpleAnimation(n, r);
                            if (o && (t._textureAnimations.set(o.id, o),
                            o.texture))
                                for (; ; ) {
                                    e[rr[i.property]] = o.uvMatrix;
                                    var a = e._getPrevMaterial();
                                    if (a == e)
                                        break;
                                    e = a
                                }
                        }
                    }
                }
                ))
            }
            ))
        }
        )),
        this._textureAnimations.size && (this.object.tickable = !0))
    }
    ,
    e.prototype._parseSimpleAnimation = function(e, t) {
        if (t) {
            if (t.multiFramesAnim)
                return new ur(e,t);
            if (t.scrollAnim || t.rotateAnim || t.scaleAnim || t.multiFramesAnim || t.scroll || t.scale || t.wrapMode)
                return new cr(e,t)
        }
        return new lr(e)
    }
    ,
    e.prototype.onAdd = function(e) {
        if (this.object = e,
        this.app = e.app,
        this._init(this.object.node),
        this.needResponeAddEvent) {
            var t = this.object.node.children[0];
            if (t) {
                var i = this;
                t.addEventListener("addedChild", (function(e) {
                    i._init(e.object)
                }
                ))
            }
        }
        delete this.needResponeAddEvent
    }
    ,
    e.prototype.onRemove = function() {
        this.clearAllAnimations()
    }
    ,
    e.prototype.onUpdate = function(e) {
        return this._textureAnimations.forEach((function(t) {
            return t.update(e)
        }
        )),
        this.app.rendererManager._mainRenderer.dirty("SmallGlow"),
        this.app.rendererManager._mainRenderer.dirty("CombineGlow"),
        this._textureAnimations.size > 0
    }
    ,
    e.prototype.clearAllAnimations = function() {
        this._textureAnimations.forEach((function(e) {
            return e.dispose()
        }
        )),
        this._textureAnimations.clear()
    }
    ,
    e.prototype.getAllAnimations = function() {
        return Array.from(this._textureAnimations.values())
    }
    ,
    e.prototype.$hasAnimation = function(e) {
        var t = !1;
        return this._textureAnimations.forEach((function(i) {
            i.isComplexAnimation ? i._anims.forEach((function(i) {
                i.texture === e && (t = !0)
            }
            )) : i.texture === e && (t = !0)
        }
        )),
        t
    }
    ,
    e
}();
nr.hasTextureAnimation = function(e) {
    return !!e.traverseBreakable((function(e) {
        if (e.material)
            for (var t = Array.isArray(e.material) ? e.material : [e.material], i = 0; i < t.length; i++) {
                var r = t[i];
                if (r.userData.gltfExtensions)
                    for (var n = 0; n < ir.length; n++) {
                        var o = ir[n]
                            , s = r.userData.gltfExtensions[o.name];
                        if (s) {
                            if (s.textureExtensions)
                                return !0;
                            if (s.scrollAnim || s.rotateAnim || s.scaleAnim || s.multiFramesAnim || s.scroll || s.scale || s.wrapMode)
                                return !0
                        }
                    }
            }
    }
    ))
}
;
var or = 0
    , sr = function() {
    function e(t, i) {
        if (classCallCheck(this, e),
        this.id = or++,
        this.texture = t,
        i) {
            var n = 999 + (void 0 !== i.wrapMode ? parseInt(i.wrapMode) : 1);
            this.texture.wrapS = this.texture.wrapT = n
        }
        this.texture.needsUpdate = !0,
        this.start = {
            offset: [0, 0],
            repeat: [1, 1],
            rotation: 0
        },
        this.uv = {
            offset: new THREE.Vector2,
            repeat: new THREE.Vector2,
            center: new THREE.Vector2,
            rotation: 0
        },
        this.uvMatrix = new THREE.Matrix3,
        this._isRunning = !0,
        this._loop = 1 / 0,
        this._callback = function() {}
        ,
        this.timeScale = 1
    }
    return e.prototype.update = function(e) {}
    ,
    e.prototype.updateUvMatrix = function() {
        var e = this.uv.repeat
            , t = this.uv.offset
            , i = this.uv.center
            , r = this.uv.rotation
            , n = Math.cos(r)
            , o = Math.sin(r)
            , s = this.uvMatrix.elements;
        s[0] = e.x * n,
        s[1] = -e.y * o,
        s[3] = e.x * o,
        s[4] = e.y * n,
        s[6] = -e.x * (n * i.x + o * i.y) + i.x + t.x,
        s[7] = -e.y * (-o * i.x + n * i.y) + i.y + t.y
    }
    ,
    e.prototype._resetTexture = function() {
        this.uv.offset.fromArray(this.start.offset),
        this.uv.repeat.fromArray(this.start.repeat)
    }
    ,
    e.prototype.play = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1 / 0
            , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function() {}
        ;
        this._resetTexture(),
        this._loop = e,
        this._callback = t,
        this._isRunning = !0
    }
    ,
    e.prototype.stop = function() {
        this._resetTexture(),
        this._isRunning = !1
    }
    ,
    e.prototype.pause = function() {
        this._isRunning = !1
    }
    ,
    e.prototype.resume = function() {
        this._isRunning = !0
    }
    ,
    e.prototype.dispose = function() {
        this.texture && this.texture.dispose(),
        this.texture = null
    }
    ,
    e
}();
ar = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this.id = or++,
        this._anims = n,
        this._mat = t,
        this._propertyName = i,
        this._step = 0,
        this._anims.forEach((function(e) {
            return e.stop()
        }
        ));
        var o = this;
        !function e() {
            t[rr[i]] = n[o._step].uvMatrix,
            n[o._step].play(n[o._step]._loop, (function() {
                o._step++,
                o._step >= n.length && (o._step = 0),
                e()
            }
            ))
        }()
    }
    return e.prototype.update = function(e) {
        this._anims.forEach((function(t) {
            return t.update(e)
        }
        ))
    }
    ,
    e.prototype.dispose = function() {
        this._anims = null,
        this._mat = null
    }
    ,
    _createClass(e, [{
        key: "isComplexAnimation",
        get: function() {
            return !0
        }
    }]),
    e
}();
lr = function(e) {
    function t() {
        return classCallCheck(this, t),
        s(this, e.apply(this, arguments))
    }
    return o(t, e),
    t
}(sr);
ur = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this, i, n));
        return o.numberOfTiles = 0,
        o.tileDisplayDuration = 0,
        o.currentDisplayTime = 0,
        o.currentTile = 0,
        o.tilesX = 0,
        o.tilesY = 0,
        o.random = !1,
        o._interval = 0,
        o._intervalTime = 0,
        o._parse(n),
        o._resetTexture(),
        o
    }
    return o(t, e),
    t.prototype._parse = function(e) {
        if (e.scroll && (this.start.offset[0] = e.scroll[0],
        this.start.offset[1] = e.scroll[1]),
        e.multiFramesAnim) {
            var t = e.multiFramesAnim.tilesX
                , i = e.multiFramesAnim.tilesY;
            this.numberOfTiles = t * i,
            this.tileDisplayDuration = 1 / e.multiFramesAnim.animSpeed || 1,
            this.currentDisplayTime = 0,
            this.currentTile = 0,
            this.tilesX = t,
            this.tilesY = i,
            this.start.repeat[0] = 1 / t,
            this.start.repeat[1] = 1 / i,
            void 0 !== e.multiFramesAnim.loop && (this._loop = parseInt(e.multiFramesAnim.loop)),
            void 0 !== e.multiFramesAnim.interval && (this._interval = parseInt(e.multiFramesAnim.interval)),
            void 0 !== e.multiFramesAnim.random && (this.random = !!e.multiFramesAnim.random)
        }
    }
    ,
    t.prototype.update = function(e) {
        if (this._isRunning)
            if (this._intervalTime > 0)
                this._intervalTime -= e;
            else
                for (this.currentDisplayTime += e * this.timeScale; this.currentDisplayTime > this.tileDisplayDuration; )
                    if (this.currentDisplayTime -= this.tileDisplayDuration,
                    this.currentTile++,
                    this.currentTile == this.numberOfTiles && (this.currentTile = 0,
                    this._loop--,
                    this._intervalTime = this._interval),
                    this._loop > 0) {
                        var t = this.random ? Math.floor(Math.random() * this.numberOfTiles) : this.currentTile
                            , i = t % this.tilesX;
                        this.uv.offset.x = i / this.tilesX;
                        var r = Math.floor(t / this.tilesX);
                        this.uv.offset.y = r / this.tilesY,
                        this.updateUvMatrix()
                    } else
                        this._isRunning = !1,
                        this._callback()
    }
    ,
    t
}(sr);
cr = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this, i, n));
        return o.animation = {
            offset: [0, 0],
            scale: 0,
            rotation: 0,
            offsetRandom: [0, 0],
            scaleRandom: 0,
            rotationRandom: 0,
            currentScaleWithoutRandom: 1,
            offsetLoop: 1 / 0,
            scaleLoop: 1 / 0,
            rotationLoop: 1 / 0,
            offsetInterval: 0,
            scaleInterval: 0,
            rotationInterval: 0,
            offsetIntervalTime: 0,
            scaleIntervalTime: 0,
            rotationIntervalTime: 0
        },
        o._parse(n),
        o._resetTexture(),
        o
    }
    return o(t, e),
    t.prototype._parse = function(e) {
        e.scroll && (this.start.offset[0] = e.scroll[0],
        this.start.offset[1] = e.scroll[1]);
        var t = e.scale || e.repeat;
        t && (Array.isArray(t) ? (this.start.repeat[0] = 1 / t[0],
        this.start.repeat[1] = 1 / t[1]) : (this.start.repeat[0] = 1 / t,
        this.start.repeat[1] = 1 / t),
        this.animation.currentScaleWithoutRandom = 1 / this.start.repeat[0]),
        e.scrollAnim && (void 0 !== e.scrollAnim.speed ? (this.animation.offset[0] -= e.scrollAnim.speed[0],
        this.animation.offset[1] -= e.scrollAnim.speed[1],
        void 0 !== e.scrollAnim.T && void 0 !== e.scrollAnim.A && (this.animation.offsetRandom[0] = 0 == e.scrollAnim.T[0] ? 0 : e.scrollAnim.A[0] / e.scrollAnim.T[0],
        this.animation.offsetRandom[1] = 0 == e.scrollAnim.T[1] ? 0 : e.scrollAnim.A[1] / e.scrollAnim.T[1]),
        void 0 !== e.scrollAnim.loop && (this.animation.offsetLoop = parseInt(e.scrollAnim.loop)),
        void 0 !== e.scrollAnim.interval && (this.animation.offsetInterval = parseFloat(e.scrollAnim.interval))) : (this.animation.offset[0] -= e.scrollAnim[0],
        this.animation.offset[1] -= e.scrollAnim[1])),
        e.scaleAnim && (void 0 !== e.scaleAnim.speed ? (this.animation.scale += e.scaleAnim.speed,
        void 0 !== e.scaleAnim.T && void 0 !== e.scaleAnim.A && (this.animation.scaleRandom = e.scaleAnim.A / e.scaleAnim.T),
        void 0 !== e.scaleAnim.loop && (this.animation.scaleLoop = Number(e.scaleAnim.loop)),
        void 0 !== e.scaleAnim.interval && (this.animation.scaleInterval = parseFloat(e.scaleAnim.interval))) : this.animation.scale += e.scaleAnim),
        e.rotateAnim && (void 0 !== e.rotateAnim.speed ? (this.animation.rotation += e.rotateAnim.speed / 180 * Math.PI,
        void 0 !== e.rotateAnim.T && void 0 !== e.rotateAnim.A && (this.animation.rotationRandom = e.rotateAnim.A / e.rotateAnim.T),
        void 0 !== e.rotateAnim.loop && (this.animation.rotationLoop = Number(e.rotateAnim.loop)),
        void 0 !== e.rotateAnim.interval && (this.animation.rotationInterval = parseFloat(e.rotateAnim.interval))) : this.animation.rotation += e.rotateAnim / 180 * Math.PI)
    }
    ,
    t.prototype.update = function(e) {
        if (this._isRunning) {
            var t = this.uv
                , i = this.start
                , r = this.animation;
            if (r.offsetIntervalTime > 0)
                r.offsetIntervalTime -= e,
                t.offset.x = i.offset[0],
                t.offset.y = i.offset[1];
            else {
                for (t.offset.x += r.offset[0] * e * this.timeScale * (1 + (2 * Math.random() - 1) * r.offsetRandom[0]),
                t.offset.y += r.offset[1] * e * this.timeScale * (1 + (2 * Math.random() - 1) * r.offsetRandom[1]); t.offset.x > i.offset[0] + 1; )
                    t.offset.x -= 1,
                    r.offsetLoop--,
                    r.offsetIntervalTime = r.offsetInterval;
                for (; t.offset.x < i.offset[0] - 1; )
                    t.offset.x += 1,
                    r.offsetLoop--,
                    r.offsetIntervalTime = r.offsetInterval;
                for (; t.offset.y > i.offset[1] + 1; )
                    t.offset.y -= 1;
                for (; t.offset.y < i.offset[1] - 1; )
                    t.offset.y += 1;
                r.offsetLoop <= 0 && (this._isRunning = !1,
                t.offset.x = i.offset[0],
                t.offset.y = i.offset[1])
            }
            if (r.scaleIntervalTime > 0)
                r.scaleIntervalTime -= e,
                t.repeat.fromArray(i.repeat);
            else if (0 !== r.scale) {
                var n = r.scale * e * this.timeScale
                    , o = n * (1 + (2 * Math.random() - 1) * r.scaleRandom)
                    , s = 1 / t.repeat.x + o
                    , a = 1 / t.repeat.y + o;
                for (this.animation.currentScaleWithoutRandom += n; this.animation.currentScaleWithoutRandom > 1; )
                    this.animation.currentScaleWithoutRandom -= 1,
                    r.scaleLoop--,
                    r.scaleIntervalTime = r.scaleInterval;
                for (; this.animation.currentScaleWithoutRandom <= 0; )
                    this.animation.currentScaleWithoutRandom += 1,
                    r.scaleLoop--,
                    r.scaleIntervalTime = r.scaleInterval;
                for (; s > 1; )
                    s -= 1,
                    a -= 1;
                for (; s <= 0; )
                    s += 1,
                    a += 1;
                t.repeat.set(1 / s, 1 / a),
                r.scaleLoop <= 0 && (this._isRunning = !1,
                t.repeat.fromArray(i.repeat))
            }
            if (r.rotationIntervalTime > 0)
                r.rotationIntervalTime -= e,
                t.rotation = i.rotation;
            else {
                for (t.rotation += r.rotation * e * this.timeScale * (1 + (2 * Math.random() - 1) * r.rotationRandom); t.rotation > i.rotation + tr; )
                    t.rotation -= tr,
                    r.rotationLoop--,
                    r.rotationIntervalTime = r.rotationInterval;
                for (; t.rotation < i.rotation - tr; )
                    t.rotation += tr,
                    r.rotationLoop--,
                    r.rotationIntervalTime = r.rotationInterval;
                r.rotationLoop <= 0 && (this._isRunning = !1,
                t.rotation = i.rotation)
            }
            0 === r.rotation && 0 === r.scale && 1 === t.repeat.x && 1 === t.repeat.y || t.center.set(.5, .5),
            this.updateUvMatrix()
        }
    }
    ,
    t.prototype.play = function() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1 / 0
            , i = arguments[1];
        this.animation.offsetLoop = t,
        this.animation.scaleLoop = t,
        this.animation.rotationLoop = t,
        this.animation.offsetIntervalTime = 0,
        this.animation.scaleIntervalTime = 0,
        this.animation.rotationIntervalTime = 0,
        this.animation.currentScaleWithoutRandom = 1 / this.start.repeat[0],
        e.prototype.play.call(this, t, i)
    }
    ,
    t
}(sr);
hr = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.object = null,
        this.app = null,
        this.param = t,
        this.callback = i,
        this.loadingBox = null
    }
    return e.prototype._createLoadingBox = function(e, t) {
        if (!e.app.options.showLoadingBox || !t)
            return !1;
        var i = t[0]
            , r = t[2]
            , n = t[1]
            , o = new THREE.BoxGeometry(i,r,n,1,1,1)
            , s = new THREE.MeshPhongMaterial({
            color: 2200782,
            transparent: !0
        });
        return this.loadingBox = new THREE.Mesh(o,s),
        this.loadingBox.material.opacity = .01,
        this.loadingBox.position.y += r / 2,
        this.loadingBox.userData.size = [i, r, n],
        this.loadingBox.userData.curProgress = .01,
        e.pickable || (this.loadingBox.userData.skipPick = !0),
        this.loadingBox.userData.skipStyle = !0,
        !0
    }
    ,
    e.prototype.loadComplete = function(e, t, i) {
        t.model = e;
        var r = e.cloneNode();
        this.object.setupNode(r, !1),
        this.object.synPickable(),
        this.object._processModel(!1, !0);
        var n = t.nodeReady;
        n && n.call(this.object, {
            object: this.object
        }),
        null != i && i(),
        this.object.removeControl(this)
    }
    ,
    e.prototype.loadModelFromURL = function(e, t) {
        var i = this
            , r = this.object
            , n = this.app.confirmURL(e.url);
        r._url = n._trimRight("/"),
        r.setupUserData(e),
        e.force = !0,
        r.setupParent(e),
        e.skipSetupParent = !0,
        r.setupTranslation(e),
        r.node.updateMatrixWorld();
        var o = this.app.modelResource
            , s = o.get(n);
        s ? this.loadComplete(s, e, t) : o.download(n, (function(t) {
            var n = t.size;
            n && i._createLoadingBox(r, n) && r.node.add(i.loadingBox),
            r._loadingBoxSize = n,
            r._extensionsFile = t.extensionsfile || null;
            var o = e.nodeReady;
            o && o.call(r, {
                object: r,
                jsonData: t
            })
        }
        ), (function(n) {
            if (r.destroyed)
                return !1;
            var o = i.loadingBox;
            return o && (n.loadingBox = o,
            o.removeBySelf()),
            e.position = i.object.position,
            e.angles = i.object.angles,
            e.scale = i.object.scale,
            Utils.backupValue(e, "nodeReady"),
            e.nodeReady = null,
            i.loadComplete(n, e, (function() {
                t && t()
            }
            )),
            Utils.revertValue(e, "nodeReady"),
            !0
        }
        ), (function(t) {
            var n = Math.max(.01, t.progress)
                , o = i.loadingBox;
            o && o.material && (o.userData.curProgress = Math.max(o.userData.curProgress, n),
            o.material.opacity = o.userData.curProgress);
            var s = e.progress;
            s && s.call(r, {
                object: r,
                progress: n
            }),
            i.object.trigger("progress", {
                object: r,
                progress: n
            })
        }
        ), (function(t) {
            var r = e.error;
            if (r)
                return r(t, i.object),
                !0;
            Utils.error(t),
            i.object.trigger("error", {
                url: n
            })
        }
        ))
    }
    ,
    e.prototype.onAdd = function(e) {
        this.object = e,
        this.app = e.app,
        this.loadModelFromURL(this.param, this.callback),
        delete this.param,
        delete this.callback
    }
    ,
    e
}();
Facade = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.isBlockMouseOffEvent = function(e) {
        return !!this.isChildOf(e)
    }
    ,
    t.prototype.setupTextureAnimations = function() {
        nr.hasTextureAnimation(this.node) && this.addControl(new nr(!0), "texAnimControl")
    }
    ,
    t.prototype.customSetup = function(e) {}
    ,
    t.prototype.setupResources = function(t) {
        e.prototype.setupResources.call(this, t),
        this.setupTextureAnimations()
    }
    ,
    t.prototype.loadFromURL = function(e, t) {
        this.addControl(new hr(e,t))
    }
    ,
    t.prototype._loadResource = function(t) {
        this.query(".CombinedObject|.Facade", !1).forEach((function(e) {
            e.loadResource()
        }
        )),
        e.prototype._loadResource.call(this, t)
    }
    ,
    t.prototype._unloadResource = function(t) {
        this.query(".CombinedObject", !1).forEach((function(e) {
            e.unloadResource()
        }
        )),
        e.prototype._unloadResource.call(this, t)
    }
    ,
    _createClass(t, [{
        key: "isFacade",
        get: function() {
            return !0
        }
    }, {
        key: "isOutdoors",
        get: function() {
            return !0
        }
    }, {
        key: "building",
        get: function() {
            return this.parents.query(".Building")[0]
        }
    }]),
    t
}(BaseObject);
dr = function() {
    function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        classCallCheck(this, e),
        this.object = null,
        this.node = t.node,
        this.animations = t.animations,
        this.animationClips = null,
        this.animationPlayingActions = [],
        this.animationActions = [],
        this.animationMixer = null,
        this._lastState = null
    }
    return e.prototype.init = function(e) {
        var t = this;
        this.animationClips = e,
        this.animationMixer = new THREE.AnimationMixer(this.node);
        for (var i = 0; i < this.animationClips.length; i++) {
            var r = this.animationMixer.clipAction(this.animationClips[i]);
            this.animationActions.push(r)
        }
        this.animationMixer.addEventListener("loop", (function(e) {}
        )),
        this.animationMixer.addEventListener("finished", (function(e) {
            var i = e.action;
            i.setEffectiveTimeScale(0);
            for (var r = i.getClip().name, n = 0; n < t.animationPlayingActions.length; n++) {
                t.animationPlayingActions[n].action.getClip().name === r && (t.animationPlayingActions[n].state = "stop")
            }
            var o = i.complete;
            o && Utils.timer.setTimeout((function() {
                o.call(t.object, r)
            }
            ), 0)
        }
        ))
    }
    ,
    e.prototype.onAdd = function(e) {
        this.object = e,
        this.node = this.node || this.object.node,
        this.app = e.app,
        this.init(this.animations),
        delete this.animations
    }
    ,
    e.prototype.onRemove = function() {
        this.animationMixer && (this.animationClips = null,
        this.animationActions = [],
        this.animationMixer = null)
    }
    ,
    e.prototype.onUpdate = function(e) {
        var t = this.animationMixer;
        if (t) {
            var i = t.isRunning();
            if (t.update(e),
            this.app.root.static && (i && this.object.visible || this._lastState != i)) {
                var r = this.object.boundingBox;
                this.app.camera.frustum.intersectsBox(r) && this.object.node._synMatrixWorld()
            }
            return this.object.visible && (this.app.needUpdate = i),
            this._lastState = i,
            i
        }
        return !1
    }
    ,
    e.prototype.containAnimation = function(e) {
        if (this.animationClips)
            for (var t = 0; t < this.animationClips.length; t++)
                if (this.animationClips[t].name === e)
                    return !0;
        return !1
    }
    ,
    e.prototype._updatePlayingAnimation = function(e, t) {
        for (var i = 0; i < this.animationPlayingActions.length; ++i)
            if (this.animationPlayingActions[i].action == e)
                return this.animationPlayingActions[i].state = "play",
                void (this.animationPlayingActions[i].duration = t);
        this.animationPlayingActions.push({
            action: e,
            duration: t
        })
    }
    ,
    e.prototype.pauseAnimation = function(e, t) {
        var i = this;
        if (e) {
            if (Utils.isArray(e))
                e.forEach((function(e) {
                    for (var r = 0; r < i.animationPlayingActions.length; r++) {
                        var n = i.animationPlayingActions[r].action;
                        e == n.getClip().name && (n.state = "paused",
                        n.paused = t)
                    }
                }
                ));
            else if (Utils.isString(e))
                for (n = 0; n < this.animationPlayingActions.length; n++) {
                    var r = this.animationPlayingActions[n].action;
                    e == r.getClip().name && (r.state = "paused",
                    r.paused = t)
                }
        } else
            for (var n = 0; n < this.animationPlayingActions.length; ++n)
                this.animationPlayingActions[n].state = "paused",
                this.animationPlayingActions[n].action.paused = t
    }
    ,
    e.prototype.stopAnimation = function(e) {
        var t = this;
        if (e) {
            if (Utils.isArray(e))
                e.forEach((function(e) {
                    for (var i = 0; i < t.animationPlayingActions.length; i++) {
                        var r = t.animationPlayingActions[i].action;
                        e == r.getClip().name && (r.stop(),
                        t.animationPlayingActions.splice(i, 1),
                        i--)
                    }
                }
                ));
            else if (Utils.isString(e))
                for (r = 0; r < this.animationPlayingActions.length; r++) {
                    var i = this.animationPlayingActions[r].action;
                    e == i.getClip().name && (i.stop(),
                    this.animationPlayingActions.splice(r, 1),
                    r--)
                }
        } else {
            for (var r = 0; r < this.animationPlayingActions.length; ++r)
                this.animationPlayingActions[r].action.stop();
            this.animationPlayingActions = []
        }
    }
    ,
    e.prototype.setAnimationDuration = function(e, t) {
        var i = THREE.AnimationClip.findByName(this.animationClips, e);
        if (!i)
            return THING.Utils.error("The '" + e + "' animation is not existing"),
            !1;
        var r = this.animationMixer.clipAction(i);
        if (!r)
            return !1;
        r.setDuration(t);
        for (var n = 0; n < this.animationPlayingActions.length; ++n)
            this.animationPlayingActions[n].action == r && (this.animationPlayingActions[n].duration = t);
        return !0
    }
    ,
    e.prototype.getAnimationDuration = function(e) {
        var t = THREE.AnimationClip.findByName(this.animationClips, e);
        if (!t)
            return THING.Utils.error("The '" + e + "' animation is not existing"),
            0;
        var i = this.animationMixer.clipAction(t);
        if (!i)
            return 0;
        for (var r = 0; r < this.animationPlayingActions.length; ++r)
            if (this.animationPlayingActions[r].action == i)
                return this.animationPlayingActions[r].duration;
        return 0
    }
    ,
    e.prototype.playAnimation = function(e, t) {
        var i = (t = t || {}).speed || 1
            , r = Utils.parseValue(t.reverse, !1)
            , n = Utils.parseLoopType(t.loopType || t.loop)
            , o = t.loopTimes || 1 / 0
            , s = t.frames || null
            , a = t.complete
            , l = THREE.AnimationClip.findByName(this.animationClips, e);
        if (!l)
            return !1;
        var u = this.animationMixer.clipAction(l);
        if (!u)
            return !1;
        u.reset();
        var c = l.duration / i
            , h = u.isRunning();
        if (r && n == THREE.LoopOnce && (o = h ? 0 : 1,
        n = THREE.LoopRepeat),
        u.complete = a,
        u.paused = !1,
        u.clampWhenFinished = !0,
        u.setEffectiveWeight(1),
        u.setDuration(r ? -c : c),
        u.setLoop(n, o),
        s) {
            var p = 0
                , d = 1;
            Utils.isArray(s) ? (p = s[0],
            d = s.length > 1 ? s[1] : 1) : Utils.isNumber(s) ? p = s : THING.Utils.error("animation frames is invalid"),
            u.warp(p, d, c)
        } else
            u.stopWarping();
        return h || (u.isScheduled() ? u.reset() : u.play(),
        this._updatePlayingAnimation(u, c)),
        this.onUpdate(0),
        !0
    }
    ,
    e.prototype.isPlayingAnimation = function(e) {
        return !!this.animationMixer && (e ? this.animationMixer.isRunning(e) : !!this.animationPlayingActions.length)
    }
    ,
    _createClass(e, [{
        key: "animationNames",
        get: function() {
            var e = [];
            if (this.animationClips)
                for (var t = 0; t < this.animationClips.length; t++)
                    e.push(this.animationClips[t].name);
            return e
        }
    }]),
    e
}();
Thing = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._url = "",
        n._animationControls = null,
        n
    }
    return o(t, e),
    t.prototype.loadModelResource = function(e) {
        var t = (e = e || {}).url;
        if (t) {
            var i;
            this._resettingStyle = !0,
            i = this.dataToRecover ? this.dataToRecover.style : {
                color: this.style.color,
                opacity: this.style.opacity,
                image: this.style.image
            },
            this.style.color = null,
            this.style.opacity = null,
            this.style.image = null,
            delete this._resettingStyle,
            this._url && (this.app.modelResource.unload(this._url),
            this._url = null),
            this.unloadResource(!1),
            e.skipSetupParent = !0;
            var r = this;
            this.loadFromURL(e, (function() {
                if (r._initBoxSize = null,
                r.customSetup(e),
                r.setupResources({}),
                i)
                    for (var n in i)
                        r.style[n] = i[n];
                r.static && r.node._synMatrixWorld();
                var o = e.complete;
                o && o.call(r, {
                    object: r,
                    url: t
                })
            }
            ))
        }
    }
    ,
    t.prototype.setupCustomKeys = function(e) {
        var t = Utils.parseValue(e.ON_IU, "oniu")
            , i = Utils.parseValue(e.SJGN_IHT, "sjgniht")
            , r = Utils.parseValue(e.IJ_EKOU_NUOY, "ijekounuoy")
            , n = Utils.parseValue(e.RE_ISRAT, "reisrat");
        "naijil" != t && "NA_IJ_IL" != t || (this.userData.bindFeatureOn = t),
        "auhnujuw" != i && "AU_HN_UJ_UW" != i || (this.userData.SightTestOn = i),
        "nahoanehc" != r && "NA_HO_AN_EHC" != r || (this.userData.LoopControlOn = r),
        "eilam" != n && "EI_LAM" != n || (this.userData.bindFeatureOn = n)
    }
    ,
    t.prototype.setupAnimations = function(e) {
        var t = this;
        this._animationControls && (this._animationControls.forEach((function(e) {
            t.removeControl(e)
        }
        )),
        this._animationControls = null);
        var i = e.animations;
        if (i)
            i = [{
                node: this.node,
                data: i
            }];
        else {
            var r = e.model;
            if (r)
                if (r.animations)
                    i = [{
                        node: this.node,
                        data: r.animations
                    }];
                else if (r.models) {
                    var n = function(e, t) {
                        var i = null;
                        return e.traverseBranch((function(e) {
                            if (e.isLOD)
                                return i = e.children[t],
                                !1
                        }
                        )),
                        i
                    };
                    i = [];
                    for (var o = 0; o < r.models.length; o++) {
                        var s = r.models[o];
                        i.push({
                            node: n(this.node, o),
                            data: s.animations
                        })
                    }
                }
        }
        if (i && i.length) {
            this._animationControls = [],
            i.forEach((function(e) {
                var i = new dr({
                    node: e.node,
                    animations: e.data
                });
                t.addControl(i),
                t._animationControls.push(i)
            }
            ));
            var a = e.animation;
            a && this.playAnimation(a)
        }
    }
    ,
    t.prototype.setupTextureAnimations = function() {
        nr.hasTextureAnimation(this.node) && this.addControl(new nr, "texAnimControl")
    }
    ,
    t.prototype.setupRoomOwner = function(e) {
        var t = e.belongRoomUserID;
        t && (this._belongRoomUserID = t)
    }
    ,
    t.prototype.customSetup = function(e) {
        this.setupAnimations(e),
        this.setupCustomKeys(e),
        this.setupRoomOwner(e)
    }
    ,
    t.prototype.setupResources = function(t) {
        e.prototype.setupResources.call(this, t),
        this.setupTextureAnimations(t)
    }
    ,
    t.prototype.loadFromURL = function(e, t) {
        this.addControl(new hr(e,t), "__ModelResourceControl__")
    }
    ,
    t.prototype.containAnimation = function(e) {
        if (this._animationControls && this._animationControls.length)
            for (var t = 0; t < this._animationControls.length; t++)
                if (this._animationControls[t].containAnimation(e))
                    return !0;
        return !1
    }
    ,
    t.prototype.playAnimation = function(e) {
        if (e = e || {},
        this.loaded) {
            if (Utils.parseValue(e.stopAllAnimation, !0) && this._stopAnimation(),
            Utils.isString(e))
                return this._stopAnimation(e),
                void this._playAnimation(e, null);
            var t = e.name;
            if (Utils.isString(t))
                return this._stopAnimation(t),
                void this._playAnimation(t, e);
            if (Utils.isArray(t) && t.length) {
                if (1 == t.length)
                    return this._stopAnimation(t[0]),
                    void this._playAnimation(t[0], e);
                e = Utils.cloneObject(e);
                for (var i = Utils.parseArrayArgument(t, e, "speed"), r = Utils.parseArrayArgument(t, e, "reverse"), n = Utils.parseArrayArgument(t, e, "loop"), o = Utils.parseArrayArgument(t, e, "loopType"), s = Utils.parseArrayArgument(t, e, "loopTimes"), a = Utils.parseArrayArgument(t, e, "frames"), l = 0; l < t.length; l++)
                    Utils.getArrayArgumentValue(e, "speed", i, l),
                    Utils.getArrayArgumentValue(e, "reverse", r, l),
                    Utils.getArrayArgumentValue(e, "loop", n, l),
                    Utils.getArrayArgumentValue(e, "loopType", o, l),
                    Utils.getArrayArgumentValue(e, "loopTimes", s, l),
                    Utils.getArrayArgumentValue(e, "frames", a, l),
                    this._playAnimation(t[l], e)
            }
        } else
            this.waitCommands.push({
                type: "PlayObjectAnimation",
                object: this,
                params: e
            })
    }
    ,
    t.prototype._stopAnimation = function(e) {
        this._animationControls && this._animationControls.forEach((function(t) {
            t.stopAnimation(e)
        }
        ))
    }
    ,
    t.prototype._playAnimation = function(e, t) {
        this._animationControls && this._animationControls.forEach((function(i) {
            i.playAnimation(e, t)
        }
        )),
        this.tickable = !0
    }
    ,
    t.prototype.pauseAnimation = function(e) {
        this._animationControls && this._animationControls.forEach((function(t) {
            t.pauseAnimation(e, !0)
        }
        )),
        this.static && this.node._synMatrixWorld(),
        this.app.rendererManager && (this.app.rendererManager.needUpdate = !0)
    }
    ,
    t.prototype.resumeAnimation = function(e) {
        this._animationControls && this._animationControls.forEach((function(t) {
            t.pauseAnimation(e, !1)
        }
        )),
        this.tickable = !0
    }
    ,
    t.prototype.stopAnimation = function(e) {
        this._animationControls && this._animationControls.forEach((function(t) {
            t.stopAnimation(e)
        }
        )),
        this.static && this.node._synMatrixWorld(),
        this.app.rendererManager && (this.app.rendererManager.needUpdate = !0)
    }
    ,
    t.prototype.setAnimationDuration = function(e, t) {
        this._animationControls && this._animationControls.forEach((function(i) {
            i.setAnimationDuration(e, t)
        }
        ))
    }
    ,
    t.prototype.getAnimationDuration = function(e) {
        if (this._animationControls && this._animationControls.length)
            for (var t = 0; t < this._animationControls.length; t++) {
                var i = this._animationControls[t].getAnimationDuration(e);
                if (i)
                    return i
            }
        return 0
    }
    ,
    t.prototype.isPlayingAnimation = function(e) {
        if (this._animationControls && this._animationControls.length)
            for (var t = 0; t < this._animationControls.length; t++)
                if (this._animationControls[t].isPlayingAnimation(e))
                    return !0;
        return !1
    }
    ,
    t.prototype.toJSON = function() {
        var t = e.prototype.toJSON.call(this);
        return t.type = "Thing",
        this._url && (t.url = this._url),
        t
    }
    ,
    _createClass(t, [{
        key: "isThing",
        get: function() {
            return !0
        }
    }, {
        key: "animationNames",
        get: function() {
            if (this._animationControls && this._animationControls.length) {
                for (var e = [], t = 0; t < this._animationControls.length; t++)
                    this._animationControls[t].animationNames.forEach((function(t) {
                        -1 === e.indexOf(t) && e.push(t)
                    }
                    ));
                return e
            }
            return []
        }
    }, {
        key: "url",
        get: function() {
            return this._url
        },
        set: function(e) {
            this.loadModelResource({
                url: e
            })
        }
    }, {
        key: "isOutdoors",
        get: function() {
            for (var e = this._parent; e; e = e._parent)
                if (e.isBuilding)
                    return !1;
            return !0
        }
    }, {
        key: "floor",
        get: function() {
            return this.parents.query(".Floor")[0]
        }
    }, {
        key: "building",
        get: function() {
            return this.parents.query(".Building")[0]
        }
    }, {
        key: "room",
        get: function() {
            var e = this.floor;
            if (e) {
                for (var t = e.rooms, i = [], r = function(e) {
                    var r = t[e]
                        , n = function(e) {
                        var t = e._floorNode;
                        if (!t)
                            return null;
                        return t.getMeshes()
                    }(r);
                    n && (n.forEach((function(e) {
                        e.__room = r
                    }
                    )),
                    i.push.apply(i, n))
                }, n = 0; n < t.length; n++)
                    r(n);
                var o = new THREE.Raycaster
                    , s = new (Function.prototype.bind.apply(THREE.Vector3, [null].concat(this.position)))
                    , a = new (Function.prototype.bind.apply(THREE.Vector3, [null].concat(e.up)));
                s.add(a.clone().multiplyScalar(100)),
                a.multiplyScalar(-1),
                o.ray.origin.copy(s),
                o.ray.direction.copy(a);
                var l = o.intersectObjects(i)
                    , u = void 0;
                return l.length && (u = l[0].object.__room),
                i.forEach((function(e) {
                    delete e.__room
                }
                )),
                u
            }
        }
    }, {
        key: "_temp_roomID",
        get: function() {
            return this._belongRoomUserID
        }
    }]),
    t
}(BaseObject);
mr = function() {
    function e(t) {
        classCallCheck(this, e),
        this._obj = t,
        this._color = null
    }
    return _createClass(e, [{
        key: "batchObject",
        get: function() {
            return this._obj._batchObject
        }
    }, {
        key: "color",
        set: function(e) {
            this._color = e ? Utils.parseColor(e) : null,
            this.batchObject && this.batchObject._updateAttributes(this._obj, 8)
        },
        get: function() {
            return this._color ? this._color.toHexString() : this.batchObject ? this.batchObject.style.color : null
        }
    }]),
    e
}();
gr = new THREE.Color
    , vr = 1
    , yr = 2
    , br = 4
    , _r = 8
    , xr = 16
    , Er = 1048575
    , wr = null;
var BatchObject = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._initMeshes = [],
        n._instancedMeshes = [],
        n._maxBatchNum = 64,
        n._batchNum = 0,
        n._deletedIndexs = [],
        n._instancedAttributes = {},
        n
    }
    return o(t, e),
    t.prototype._beforeSetup = function(e) {
        this._maxBatchNum = void 0 !== e.initBatchNum ? e.initBatchNum : 64,
        this._isFilp = void 0 !== e.isFilp && e.isFilp,
        this._instancedAttributes.instancePosition = new THREE.InstancedBufferAttribute(new Float32Array(3 * this._maxBatchNum),3),
        this._instancedAttributes.instanceQuaternion = new THREE.InstancedBufferAttribute(new Float32Array(4 * this._maxBatchNum),4),
        this._instancedAttributes.instanceScale = new THREE.InstancedBufferAttribute(new Float32Array(3 * this._maxBatchNum),3),
        this._instancedAttributes.instanceColor = new THREE.InstancedBufferAttribute(new Float32Array(3 * this._maxBatchNum),3),
        this._instancedAttributes.instanceId = new THREE.InstancedBufferAttribute(new Float32Array(1 * this._maxBatchNum),1)
    }
    ,
    t.prototype.destroy = function() {
        var t = this;
        e.prototype.destroy.call(this),
        this._initMeshes.forEach((function(e) {
            t.app.resourceManager.unload(e)
        }
        ))
    }
    ,
    t.prototype._initInstancedMeshes = function() {
        var e = this
            , t = this.node;
        this._lodNode && (t = this._lodNode.levels[-1 !== this._lodLevel ? this._lodLevel : 0].object),
        this._initMeshes = t.getMeshes(),
        this._instancedMeshes = this._initMeshes.map((function(t) {
            return e._createInstancedMesh(t)
        }
        )),
        this.node.children.slice(0).forEach((function(t) {
            return e.node.remove(t)
        }
        )),
        this._instancedMeshes.forEach((function(t) {
            return e.node.add(t)
        }
        )),
        this.static && this.node._synMatrixWorld(),
        this._extensionsFile = null
    }
    ,
    t.prototype._createInstancedMesh = function(e) {
        var t = new THREE.InstancedBufferGeometry;
        for (var i in t.instanceCount = this._batchNum,
        e.geometry.index && (t.index = e.geometry.index),
        e.geometry.attributes)
            "position" === i || "normal" === i ? t.addAttribute(i, e.geometry.attributes[i].clone()) : t.addAttribute(i, e.geometry.attributes[i]);
        for (var r in this._instancedAttributes)
            t.addAttribute(r, this._instancedAttributes[r]);
        t.applyMatrix4(e.getMatrixFromRoot(this.node));
        var n = (e.isMesh && e.getMatrixFromRoot(this.node).determinant() < 0) ^ this._isFilp;
        if (n)
            for (var o = t.attributes.normal.array, s = 0; s < o.length; s++)
                o[s] = -o[s];
        e.geometry.groups && e.geometry.groups.length > 0 && (t.groups = e.geometry.groups);
        var a = void 0;
        Array.isArray(e.material) ? a = e.material.map((function(e) {
            var t = e.clone();
            return t.vertexColors = !0,
            t.defines = void 0 !== e.defines ? JSON.parse(JSON.stringify(e.defines)) : {},
            t.defines.INSTANCED = "",
            t.side !== THREE.BackSide && t.side !== THREE.FrontSide || (t.side = n ? (t.side + 1) % 2 : t.side),
            t
        }
        )) : ((a = e.material.clone()).vertexColors = !0,
        a.defines = void 0 !== e.material.defines ? JSON.parse(JSON.stringify(e.material.defines)) : {},
        a.defines.INSTANCED = "",
        a.side !== THREE.BackSide && a.side !== THREE.FrontSide || (a.side = n ? (a.side + 1) % 2 : a.side));
        var l = new THREE.Mesh(t,a);
        return l.userData = {
            skipOutline: !0
        },
        l.frustumCulled = !1,
        l.customDepthMaterial = (wr || ((wr = new THREE.MeshDepthMaterial({
            depthPacking: THREE.RGBADepthPacking
        })).defines = {
            INSTANCED: ""
        }),
        wr),
        l.castShadow = !0,
        l.receiveShadow = !0,
        Utils.isObject(e._cachedTechnique) && (l._cachedTechnique = Utils.cloneObject(e._cachedTechnique, !1)),
        Utils.isObject(e.technique) && (l.technique = Utils.cloneObject(e.technique, !1)),
        l
    }
    ,
    t.prototype.isBatchObject = function() {
        return !0
    }
    ,
    t.prototype._beforeSetupComplete = function(t) {
        this._initInstancedMeshes(),
        e.prototype._beforeSetupComplete.call(this, t)
    }
    ,
    t.prototype._allocSubObjectIndex = function() {
        if (this._deletedIndexs.length > 0)
            return this._deletedIndexs.shift();
        var e = this._batchNum;
        return this._batchNum++,
        e
    }
    ,
    t.prototype.createSubObject = function(e) {
        return e.type = "BatchSubObject",
        e.parent = e.parent || this,
        e.batchObject = this,
        this.app.create(e)
    }
    ,
    t.prototype._resizeAttributes = function() {
        for (var e in this._instancedAttributes) {
            var t = this._instancedAttributes[e]
                , i = t.array
                , r = new i.constructor(this._maxBatchNum * t.itemSize);
            r.set(i),
            t.array = r,
            t.count = r.length / t.itemSize,
            t.resizeDirty = !0,
            t.needsUpdate = !0
        }
        var n = this._instancedAttributes.instancePosition;
        this._instancedMeshes.forEach((function(e) {
            e.geometry._maxInstanceCount = n.meshPerAttribute * n.count
        }
        ))
    }
    ,
    t.prototype._updateAttributes = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Er
            , i = e.internalUserData.__attribute_index__BatchObject__;
        t & vr && (this._instancedAttributes.instancePosition.array.set(e.node.position.toArray(), 3 * i),
        this._instancedAttributes.instancePosition.needsUpdate = !0),
        t & yr && (this._instancedAttributes.instanceQuaternion.array.set(e.node.quaternion.toArray(), 4 * i),
        this._instancedAttributes.instanceQuaternion.needsUpdate = !0),
        t & br && (this._instancedAttributes.instanceScale.array.set(e.node.scale.toArray(), 3 * i),
        this._instancedAttributes.instanceScale.needsUpdate = !0),
        t & _r && (e._style ? e._style.color ? gr.set(e._style.color) : gr.setRGB(1, 1, 1) : this.style.color ? gr.set(this.style.color) : gr.setRGB(1, 1, 1),
        this._instancedAttributes.instanceColor.array.set(gr.toArray(), 3 * i),
        this._instancedAttributes.instanceColor.needsUpdate = !0),
        t & xr && (this._instancedAttributes.instanceId.array[i] = e.node.id,
        this._instancedAttributes.instanceId.needsUpdate = !0)
    }
    ,
    t.prototype._removeAttributes = function(e) {
        var t = e.internalUserData.__attribute_index__BatchObject__;
        this._instancedAttributes.instanceScale.array.set([1e-9, 1e-9, 1e-9], 3 * t),
        this._instancedAttributes.instanceColor.array.set([0, 0, 0], 3 * t),
        this._instancedAttributes.instanceScale.needsUpdate = !0,
        this._instancedAttributes.instanceColor.needsUpdate = !0,
        this._deletedIndexs.push(t)
    }
    ,
    t
}(Thing);
BatchSubObject = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._batchObject = null,
        n
    }
    return o(t, e),
    t.prototype.isBatchSubObject = function() {
        return !0
    }
    ,
    t.prototype.setPickable = function(t) {
        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        t && this.app.picker.markPickingNode(this.node),
        e.prototype.setPickable.call(this, t, i)
    }
    ,
    t.prototype._afterSetupComplete = function(e) {
        var t = this;
        if (this._batchObject = e.batchObject,
        this._batchObject) {
            this.app.picker.markPickingNode(this.node),
            this.internalUserData.__attribute_index__BatchObject__ = this._batchObject._allocSubObjectIndex(),
            this._batchObject._batchNum > this._batchObject._maxBatchNum && (this._batchObject._maxBatchNum *= 2,
            this._batchObject._resizeAttributes()),
            this._batchObject._updateAttributes(this),
            this._batchObject._instancedMeshes.forEach((function(e) {
                e.geometry.instanceCount = t._batchObject._batchNum,
                t.app.edgesGeometriesManager.synMaxInstancedCount(e.geometry)
            }
            ));
            var i = this;
            this._notifyPositionChange = function() {
                i._batchObject._updateAttributes(i, vr)
            }
            ,
            this._notifyAnglesChange = function() {
                i._batchObject._updateAttributes(i, yr)
            }
            ,
            this._notifyScalesChange = function() {
                i._batchObject._updateAttributes(i, br)
            }
            ,
            this._notifyDestroy = function() {
                i._batchObject._removeAttributes(i)
            }
        } else
            THING.Utils.error("Please provide batch object to create BatchSubObject")
    }
    ,
    t
}(Thing);
Cr = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.sprite = null,
        n.spriteVisible = !0,
        n.onTop = !1,
        n.progress = 0,
        n
    }
    return o(t, e),
    t.prototype.canNotQueryFromSelector = function() {
        return !0
    }
    ,
    t.prototype.customSetup = function(e) {
        var t = e.scene
            , i = e.height
            , r = e.onTop
            , n = this.app.calcRect();
        this.onTop = r;
        var o = new THREE.SpriteMaterial({
            opacity: .8,
            color: 34816,
            transparent: !0
        });
        this.sprite = new THREE.Sprite(o),
        this.sprite.scale.set(2 * n.width, i, 1),
        this.sprite.visible = !1,
        this.updatePosition(n.width, n.height),
        this.node.add(this.sprite),
        t.add(this.node)
    }
    ,
    t.prototype.updatePosition = function(e, t) {
        if (void 0 === e || void 0 === t) {
            var i = this.app.calcRect();
            e = i.width,
            t = i.height
        }
        var r = this.sprite
            , n = -e / 2
            , o = this.onTop ? t / 2 - r.scale.y / 2 : -t / 2 + r.scale.y / 2;
        r.position.set(n, o, -10)
    }
    ,
    t.prototype.updateProgress = function(e) {
        if (!this.sprite)
            return !1;
        if (this.progress == e)
            return !1;
        this.progress = e;
        var t = this.app.calcRect();
        if (e < 1 && 0 != e)
            this.sprite.visible = this.spriteVisible;
        else {
            var i = this;
            setTimeout((function() {
                i.sprite && (i.sprite.visible = !1)
            }
            ), 1e3)
        }
        var r = Math.max(1, 2 * t.width * e);
        return this.sprite.scale.x = r,
        !0
    }
    ,
    t.prototype.resize = function(e, t) {
        if (this.sprite) {
            this.updatePosition(e, t);
            var i = Math.max(1, 2 * e * this.progress);
            this.sprite.scale.x = i
        }
    }
    ,
    t.prototype.prepare = function() {
        this.sprite.scale.x = 1e-4,
        this.sprite.visible = this.spriteVisible
    }
    ,
    _createClass(t, [{
        key: "visible",
        set: function(e) {
            this.spriteVisible = e
        },
        get: function() {
            return this.spriteVisible
        }
    }, {
        key: "height",
        set: function(e) {
            this.sprite.scale.y = e
        },
        get: function() {
            return this.sprite.scale.y
        }
    }]),
    t
}(BaseObject);
var jr = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.createMaterial = function(e) {
        if (!e)
            return new THREE.MeshPhongMaterial({
                color: 2200782
            });
        return e.disableLight ? new THREE.MeshBasicMaterial({
            color: 2200782
        }) : new THREE.MeshPhongMaterial({
            color: 2200782
        })
    }
    ,
    t.prototype.createGeometry = function(e) {
        return null
    }
    ,
    t.prototype.createMesh = function(e) {
        var t = this.createGeometry(e);
        if (t) {
            var i = this.createMaterial(e.style);
            return new THREE.Mesh(t,i)
        }
        return null
    }
    ,
    t.prototype.setupStyle = function(t) {
        e.prototype.setupStyle.call(this, t),
        this.style.skipEnvMap = !0
    }
    ,
    t.prototype.setup = function(t) {
        var i = this.createMesh(t);
        if (i) {
            i.castShadow = !0,
            i.receiveShadow = !0;
            var r = t.center;
            if (r && "Bottom" == r) {
                var n = t.height || 1;
                i.translateY(.5 * n)
            }
            this.node.add(i)
        }
        e.prototype.setup.call(this, t),
        this.setupStyle(t)
    }
    ,
    t.prototype.addPickableGround = function(e) {
        var t = this.app.create({
            type: "Plane",
            width: e,
            height: e,
            visible: !1,
            parent: this,
            style: {
                doubleSide: !0
            }
        })
            , i = t.node;
        return i.skipBoundingBox(!0),
        i.userData.topNode = !0,
        i.userData.skipOutline = !0,
        i.userData.independent = !0,
        i.userData.alwaysPickable = !0,
        i.canNotQueryFromSelector = !0,
        this.app.objectManager.addInteractableNode(i),
        t
    }
    ,
    t.prototype.pickGroundWorldPosition = function(e, t, i) {
        if (Utils.isArray(t) && void 0 === i) {
            var r = t;
            t = r[0],
            i = r[1]
        }
        var n = this.app.calcRect()
            , o = this.app.renderCamera.getRaycaster(t, i, n).intersectObjectForcible(e.node, !0);
        return o.length ? o[0].point.toArray() : null
    }
    ,
    t
}(Thing);
Box = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._width = 0,
        n._height = 0,
        n._depth = 0,
        n._center = "",
        n
    }
    return o(t, e),
    t.prototype.createGeometry = function(e) {
        this._width = e.width || 1,
        this._height = e.height || 1,
        this._depth = e.depth || 1,
        this._center = e.center;
        var t = e.widthSegments || 1
            , i = e.heightSegments || 1
            , r = e.depthSegments || 1;
        return new THREE.BoxGeometry(this._width,this._height,this._depth,t,i,r)
    }
    ,
    _createClass(t, [{
        key: "isBox",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Circle = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.createGeometry = function(e) {
        var t = e.radius
            , i = e.segments
            , r = e.thetaStart
            , n = e.thetaLength;
        return new THREE.CircleGeometry(t,i,r,n)
    }
    ,
    _createClass(t, [{
        key: "isCircle",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Sphere = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.createGeometry = function(e) {
        var t = e.radius || 1
            , i = e.widthSegments || 8
            , r = e.heightSegments || 6
            , n = e.phiStart || 0
            , o = e.phiLength || 2 * Math.PI
            , s = e.thetaStart || 0
            , a = e.thetaLength || Math.PI;
        return new THREE.SphereGeometry(t,i,r,n,o,s,a)
    }
    ,
    _createClass(t, [{
        key: "isSphere",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Plane = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._ground = null,
        n._groundSize = 0,
        n
    }
    return o(t, e),
    t.prototype.destroy = function() {
        this._ground && this.app.objectManager.removeInteractableNode(this._ground.node),
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype.createGeometry = function(e) {
        var t = e.width || 1
            , i = e.height || 1
            , r = e.widthSegments || 1
            , n = e.heightSegments || 1;
        return new THREE.PlaneGeometry(t,i,r,n)
    }
    ,
    t.prototype.addPickableGround = function(t) {
        this._groundSize = t.size,
        this._groundSize && (this._ground = e.prototype.addPickableGround.call(this, this._groundSize))
    }
    ,
    t.prototype.pickGroundWorldPosition = function(t, i) {
        return this._ground ? e.prototype.pickGroundWorldPosition.call(this, this._ground, t, i) : null
    }
    ,
    _createClass(t, [{
        key: "isPlane",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Grid = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._color1 = null,
        n._color2 = null,
        n._size = 0,
        n._divisions = 0,
        n
    }
    return o(t, e),
    t.prototype.createMesh = function(e) {
        this._color1 = Utils.parseColor(e.color1, 16777215),
        this._color2 = Utils.parseColor(e.color2, 16777215),
        this._size = e.size || 10,
        this._divisions = e.divisions || 10;
        var t = new THREE.GridHelper(this._size,this._divisions,this._color1,this._color2);
        return t.userData.skipStyle = !0,
        t
    }
    ,
    _createClass(t, [{
        key: "size",
        get: function() {
            return this._size
        }
    }, {
        key: "isGrid",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Cylinder = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.createGeometry = function(e) {
        var t = e.height || 1
            , i = e.radius || .5
            , r = e.radiusTop ? e.radiusTop : i
            , n = e.radiusBottom ? e.radiusBottom : i
            , o = e.radiusSegments || 8
            , s = e.heightSegments || 1
            , a = e.heightSegments || !1
            , l = e.heightSegments || 0
            , u = e.heightSegments || 2 * Math.PI;
        return new THREE.CylinderGeometry(r,n,t,o,s,a,l,u)
    }
    ,
    _createClass(t, [{
        key: "isCylinder",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Tetrahedron = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.createGeometry = function(e) {
        var t = e.radius || 1
            , i = e.detail || 0;
        return new THREE.TetrahedronGeometry(t,i)
    }
    ,
    _createClass(t, [{
        key: "isTetrahedron",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Frustum = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.createMaterial = function(e) {
        return new THREE.MeshBasicMaterial({
            color: "#0aa5ff",
            opacity: .5,
            transparent: !0,
            side: THREE.DoubleSide
        })
    }
    ,
    t.prototype.createGeometry = function(e) {
        var t = e.fov || 45
            , i = e.aspect || 2
            , r = e.length || 10
            , n = r * Math.tan(.5 * t * .017453293)
            , o = i * n
            , s = new THREE.Geometry;
        return s.vertices = [new THREE.Vector3(0,0,0), new THREE.Vector3(o,-n,-r), new THREE.Vector3(o,n,-r), new THREE.Vector3(-o,n,-r), new THREE.Vector3(-o,-n,-r)],
        s.faces = [new THREE.Face3(0,1,2), new THREE.Face3(0,2,3), new THREE.Face3(0,3,4), new THREE.Face3(0,4,1), new THREE.Face3(3,4,1), new THREE.Face3(3,1,2)],
        s
    }
    ,
    _createClass(t, [{
        key: "isFrustum",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Shape = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._vertices = null,
        n._height = 0,
        n
    }
    return o(t, e),
    t.prototype.addGeoObject = function(e, t, i, r) {
        for (var n = {
            generateTopUV: function(e, t, i, r, n) {
                var o = t[3 * i]
                    , s = t[3 * i + 1]
                    , a = t[3 * r]
                    , l = t[3 * r + 1]
                    , u = t[3 * n]
                    , c = t[3 * n + 1];
                return [new THREE.Vector2(o,s), new THREE.Vector2(a,l), new THREE.Vector2(u,c)]
            },
            generateSideWallUV: function(e, t, i, r, n, o) {
                return [new THREE.Vector2(0,0), new THREE.Vector2(0,1), new THREE.Vector2(1,1), new THREE.Vector2(1,0)]
            }
        }, o = Sr.transformSVGPath(t.path), s = [new THREE.MeshPhongMaterial({
            transparent: !0
        }), new THREE.MeshPhongMaterial({
            transparent: !0
        })], a = o.toShapes(!0), l = 0; l < a.length; l++) {
            var u = a[l]
                , c = new THREE.ExtrudeBufferGeometry(u,{
                depth: t.height,
                bevelEnabled: !1,
                UVGenerator: n
            })
                , h = new THREE.Matrix4;
            h.makeRotationFromEuler(Utils.parseEuler([90, 0, 0]));
            var p = new THREE.Matrix4;
            p.makeTranslation(t.center[0], t.height, t.center[1]),
            p.multiply(h);
            for (var d = c.attributes.position.array, f = 0; f < d.length; f += 3) {
                var m = new THREE.Vector3(d[f],d[f + 1],d[f + 2]);
                m.applyMatrix4(p),
                d[f] = m.x,
                d[f + 1] = m.y,
                d[f + 2] = m.z
            }
            c.computeVertexNormals();
            var g = new THREE.Mesh(c,s);
            if (!r) {
                var v = new THREE.Matrix4;
                v.getInverse(e.matrixWorld),
                g.applyMatrix4(v)
            }
            g.translateY(i),
            e.add(g)
        }
    }
    ,
    t.prototype.createMesh = function(t) {
        var i = t.csg;
        if (i && i.isCSG) {
            var r = i.bsp.toMesh()
                , n = (new THREE.Matrix4).getInverse(i._object.node.matrixWorld);
            return r._premultiplyMatrix(n),
            r
        }
        return e.prototype.createMesh.call(this, t)
    }
    ,
    t.prototype._afterSetupComplete = function(e) {
        var t = e.vertices || e.points
            , i = e.center || [0, 0]
            , r = Utils.parseValue(e.height, 0)
            , n = Utils.parseValue(e.local, !1);
        if (t && t.length) {
            for (var o = {
                center: i,
                height: r,
                path: ""
            }, s = function(e) {
                return THING.Math.isFloatEquals(e, 0) ? 0 : e
            }, a = 0; a < t.length; a++) {
                var l = Utils.parseVector3(t[a]);
                o.path ? o.path += "L" : o.path += "M",
                o.path += s(l.x).toString(),
                o.path += ",",
                o.path += s(l.z).toString(),
                o.path += " "
            }
            o.path += " Z",
            this._vertices = t,
            this._height = r,
            this.addGeoObject(this.node, o, t[0][1], n),
            e.position || e.localPosition || this.useBottomCenterOfBoundingBoxAsPosition()
        }
    }
    ,
    _createClass(t, [{
        key: "height",
        get: function() {
            return this._height
        }
    }, {
        key: "points",
        get: function() {
            var e = this.node.children[0];
            if (!e)
                return null;
            e.updateWorldMatrix(!0, !1);
            for (var t = e.matrixWorld, i = e.geometry.attributes.position.array, r = [], n = 0; n < i.length; n += 3) {
                var o = new THREE.Vector3(i[n + 0],i[n + 1],i[n + 2]);
                o.applyMatrix4(t),
                r.push(o.toArray())
            }
            for (n = 0; n < r.length; n++)
                for (var s = n + 1; s < r.length; s++)
                    THING.Math.equalsVector(r[n], r[s]) && r.splice(s--, 1);
            return r
        }
    }, {
        key: "isShape",
        get: function() {
            return !0
        }
    }]),
    t
}(jr);
Door = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.isOpen = !1,
        n
    }
    return o(t, e),
    t.prototype.open = function() {
        -1 !== this.animationNames.indexOf("Auto_Open") && this.playAnimation("Auto_Open"),
        this.isOpen = !0
    }
    ,
    t.prototype.close = function() {
        -1 !== this.animationNames.indexOf("Auto_Close") && this.playAnimation("Auto_Close"),
        this.isOpen = !1
    }
    ,
    _createClass(t, [{
        key: "isDoor",
        get: function() {
            return !0
        }
    }, {
        key: "floor",
        get: function() {
            return this.parents.query(".Floor")[0]
        }
    }]),
    t
}(Thing);
ElevatorDoor = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.elevator = null,
        n
    }
    return o(t, e),
    t.prototype.setup = function(t) {
        e.prototype.setup.call(this, t),
        this.levelNumber = this.parent.levelNumber
    }
    ,
    _createClass(t, [{
        key: "owner",
        get: function() {
            return this.elevator
        }
    }]),
    t
}(Door);
Elevator = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.doors = [],
        n
    }
    return o(t, e),
    t.prototype.setup = function(t) {
        if (e.prototype.setup.call(this, t),
        t.doors) {
            this.doors = t.doors;
            for (var i = 0; i < this.doors.length; i++) {
                this.doors[i].elevator = this
            }
        }
    }
    ,
    t.prototype.getDoor = function(e) {
        for (var t = 0; t < this.doors.length; t++) {
            var i = this.doors[t];
            if (i.floor == e)
                return i
        }
        return i
    }
    ,
    t
}(BaseObject);
StairDoor = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.stair = null,
        n
    }
    return o(t, e),
    t.prototype.setup = function(t) {
        e.prototype.setup.call(this, t)
    }
    ,
    _createClass(t, [{
        key: "owner",
        get: function() {
            return this.stair
        }
    }, {
        key: "isStairDoor",
        get: function() {
            return !0
        }
    }]),
    t
}(Door);
Stair = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.doors = [],
        n
    }
    return o(t, e),
    t.prototype.setup = function(t) {
        if (e.prototype.setup.call(this, t),
        t.doors) {
            this.doors = t.doors;
            for (var i = 0; i < this.doors.length; i++) {
                this.doors[i].stair = this
            }
        }
    }
    ,
    t.prototype.getDoor = function(e) {
        for (var t = 0; t < this.doors.length; t++) {
            var i = this.doors[t];
            if (i.floor == e)
                return i
        }
        return i
    }
    ,
    _createClass(t, [{
        key: "isStair",
        get: function() {
            return THING.Utils.warn("[Stair] Please use 'instanceof THING.Stair' to replace '.Stair'"),
            this instanceof THING.Stair
        }
    }]),
    t
}(BaseObject);
Ground = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.customSetup = function(e) {
        var t = e.width
            , i = e.height;
        if (t && i) {
            var r = new THREE.PlaneBufferGeometry(t,i)
                , n = new THREE.MeshLambertMaterial({
                polygonOffset: !0,
                polygonOffsetFactor: 10,
                polygonOffsetUnits: 10
            })
                , o = new THREE.Mesh(r,n);
            o.rotation.x = -.5 * Math.PI,
            o.position.x = 0,
            o.position.y = -.1,
            o.position.z = 0,
            o.receiveShadow = !0;
            var s = Utils.parseValue(e.skipBoundingBox, !0);
            o.skipBoundingBox(s);
            var a = e.repeatUV || [100, 100]
                , l = e.image;
            if (l) {
                var u = this.app.confirmURL(l, "https://static.3dmomoda.com/textures");
                o.material.map = this.app.resourceManager.loadTexture(u, void 0, {
                    repeat: !0,
                    anisotropy: 16
                }),
                o.material.map.repeat.fromArray(a)
            }
            this.node.add(o)
        }
    }
    ,
    t.prototype._loadSelfResource = function() {
        this._children.forEach((function(e) {
            e.loadResource()
        }
        ))
    }
    ,
    _createClass(t, [{
        key: "isGround",
        get: function() {
            return !0
        }
    }, {
        key: "misc",
        get: function() {
            return this.miscObject || (this.miscObject = this.query(".CombinedObject").query("[userData/type=CombineMiscParent]")[0]),
            this.miscObject
        }
    }, {
        key: "plan",
        get: function() {
            return this.floorObject || (this.floorObject = this.query(".CombinedObject").query("[userData/type=CombineFloorParent]")[0]),
            this.floorObject
        }
    }, {
        key: "wall",
        get: function() {
            return this.wallObject || (this.wallObject = this.query(".CombinedObject").query("[userData/type=CombineWallParent]")[0]),
            this.wallObject
        }
    }]),
    t
}(BaseObject);
VideoSurvilance = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._aspect = 2,
        n._fov = 45,
        n._near = .1,
        n._far = 10,
        n._camera = null,
        n._lineMesh = null,
        n._frustumMesh = null,
        n._frustum = new THREE.Frustum,
        n._projScreenMatrix = new THREE.Matrix4,
        n
    }
    return o(t, e),
    t.prototype._updateFrustum = function() {
        this._projScreenMatrix.multiplyMatrices(this._camera.projectionMatrix, this._camera.matrixWorldInverse),
        this._frustum.setFromProjectionMatrix(this._projScreenMatrix)
    }
    ,
    t.prototype._buildLineMesh = function(e, t) {
        var i = new THREE.EdgesGeometry(e.geometry)
            , r = new THREE.LineSegments(i);
        return r.material.color = Utils.parseColor(t),
        r
    }
    ,
    t.prototype._buildFrustumMesh = function() {
        var e = this.far * Math.tan(.5 * this.fov * .017453293)
            , t = this.aspect * e
            , i = new THREE.Geometry;
        i.vertices = [new THREE.Vector3(0,0,0), new THREE.Vector3(t,-e,-this.far), new THREE.Vector3(t,e,-this.far), new THREE.Vector3(-t,e,-this.far), new THREE.Vector3(-t,-e,-this.far)],
        i.faces = [new THREE.Face3(0,1,2), new THREE.Face3(0,2,3), new THREE.Face3(0,3,4), new THREE.Face3(0,4,1), new THREE.Face3(3,4,1), new THREE.Face3(3,1,2)];
        var r = new THREE.MeshBasicMaterial({
            color: "#0aa5ff",
            opacity: .5,
            transparent: !0,
            side: THREE.DoubleSide
        })
            , n = new THREE.Mesh(i,r);
        return n.userData.skipEnvMap = !0,
        n
    }
    ,
    t.prototype._build = function() {
        var e = this.app.resourceManager;
        e.remove(this._frustumMesh),
        e.remove(this._lineMesh),
        this._frustumMesh = this._buildFrustumMesh(),
        this.node.add(this._frustumMesh);
        var t = this.style._lineColor || 16777215;
        this._lineMesh = this._buildLineMesh(this._frustumMesh, t),
        this.node.add(this._lineMesh),
        this._camera = new THREE.PerspectiveCamera(this.fov,this.aspect,this.near,this.far),
        this._camera.position.set(this.position[0], this.position[1], this.position[2]),
        this._camera.rotation.copy(this.node.rotation),
        this._camera.updateMatrixWorld(!0),
        this._updateFrustum()
    }
    ,
    t.prototype.customSetup = function(e) {
        this._aspect = e.aspect || this._aspect,
        this._fov = e.fov || this._fov,
        this._near = e.near || this._near,
        this._far = e.far || this._far,
        this._build()
    }
    ,
    t.prototype.setWorldPosition = function(t) {
        e.prototype.setWorldPosition.call(this, t),
        this._camera.position.set(t[0], t[1], t[2]),
        this._camera.updateMatrixWorld(!0),
        this._updateFrustum()
    }
    ,
    t.prototype.intersectsObject = function(e) {
        return this._updateFrustum(),
        !!this._frustum._intersectsObject(e.node)
    }
    ,
    _createClass(t, [{
        key: "aspect",
        set: function(e) {
            this._aspect = e,
            this._build()
        },
        get: function() {
            return this._aspect
        }
    }, {
        key: "fov",
        set: function(e) {
            this._fov = e,
            this._build()
        },
        get: function() {
            return this._fov
        }
    }, {
        key: "far",
        set: function(e) {
            this._far = e,
            this._build()
        },
        get: function() {
            return this._far
        }
    }]),
    t
}(BaseObject);
Gr = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        brightness: {
            value: 0
        },
        contrast: {
            value: 1
        },
        exposure: {
            value: 0
        },
        gamma: {
            value: 1
        },
        saturation: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "uniform float brightness;", "uniform float contrast;", "uniform float exposure;", "uniform float gamma;", "uniform float saturation;", "const vec3 w = vec3(0.2125, 0.7154, 0.0721);", "void main() {", "vec4 tex = texture2D( tDiffuse, vUv );", "vec3 color = clamp(tex.rgb + vec3(brightness), 0.0, 1.0);", "color = clamp( (color-vec3(0.5))*contrast+vec3(0.5), 0.0, 1.0);", "color = clamp( color * pow(2.0, exposure), 0.0, 1.0);", "color = clamp( pow(color, vec3(gamma)), 0.0, 1.0);", "float luminance = dot( color, w );", "color = mix(vec3(luminance), color, saturation);", "gl_FragColor = vec4(color, tex.a);", "}"].join("\n")
};
qr = {
    defines: {
        RINGS: 3,
        SAMPLES: 4
    },
    uniforms: {
        tColor: {
            value: null
        },
        tDepth: {
            value: null
        },
        resolution: {
            value: new THREE.Vector2(1 / 1024,1 / 512)
        },
        znear: {
            value: .1
        },
        zfar: {
            value: 100
        },
        focalDepth: {
            value: 1
        },
        focalLength: {
            value: 24
        },
        fstop: {
            value: .9
        },
        maxblur: {
            value: 1
        },
        threshold: {
            value: .5
        },
        gain: {
            value: 2
        },
        bias: {
            value: .5
        },
        dithering: {
            value: 1e-4
        }
    },
    vertexShader: "\n        varying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}\n    ",
    fragmentShader: "\n        #include <common>\n\n        varying vec2 vUv;\n\n        uniform sampler2D tColor;\n        uniform sampler2D tDepth;\n\n        uniform vec2 resolution;\n\n        uniform float znear;\n        uniform float zfar;\n\n        uniform float focalDepth;\n        uniform float focalLength;\n        uniform float fstop;\n\n        uniform float maxblur; // clamp value of max blur (0.0 = no blur, 1.0 default)\n        uniform float threshold; // highlight threshold\n        uniform float gain; // highlight gain\n        uniform float bias; // bokeh edge bias\n        uniform float dithering;\n\n        const int samples = SAMPLES;\n        const int rings = RINGS;\n        const int maxringsamples = rings * samples;\n\n        float CoC = 0.03; // circle of confusion size in mm (35mm film = 0.03mm)\n\n        vec3 color(vec2 coords, float blur) {\n            vec3 col = texture2D(tColor, coords).rgb;\n            vec3 lumcoeff = vec3(0.299,0.587,0.114);\n            float lum = dot(col.rgb, lumcoeff);\n            float thresh = max((lum - threshold) * gain, 0.0);\n            return col + mix(vec3(0.0), col, thresh * blur);\n        }\n\n        float linearize(float depth) {\n            return -zfar * znear / (depth * (zfar - znear) - zfar);\n        }\n\n        float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\n            float rings2 = float(rings);\n            float step = PI * 2.0 / float(ringsamples);\n            float pw = cos(j * step) * i;\n            float ph = sin(j * step) * i;\n            col += color(vUv + vec2(pw * w, ph * h), blur) * mix(1.0, i / rings2, bias);\n            return mix(1.0, i / rings2, bias);\n        }\n\n        void main() {\n            float depth = linearize(texture2D(tDepth, vUv).x);\n            float fDepth = focalDepth;\n\n            // dof blur factor calculation\n\n            float f = focalLength; // focal length in mm\n            float d = fDepth * 1000.; // focal plane in mm\n            float o = depth * 1000.; // depth in mm\n\n            float a = (o * f) / (o - f);\n            float b = (d * f) / (d - f);\n            float c = (d - f) / (d * fstop * CoC);\n\n            float blur = abs(a - b) * c;\n            blur = clamp(blur, 0.0, 1.0);\n\n            // calculation of pattern for dithering\n\n            vec2 noise = vec2(rand(vUv), rand(vUv + vec2(0.4, 0.6))) * dithering * blur;\n\n            // getting blur x and y step factor\n\n            float w = resolution.x * blur * maxblur + noise.x;\n            float h = resolution.y * blur * maxblur + noise.y;\n\n            // calculation of final color\n\n            vec3 col = vec3(0.0);\n\n            if (blur < 0.05) {\n                col = texture2D(tColor, vUv).rgb;\n            } else {\n                col = texture2D(tColor, vUv).rgb;\n\n                float s = 1.0;\n                int ringsamples;\n\n                for(int i = 1; i <= rings; i++) {\n                    ringsamples = i * samples;\n\n                    for (int j = 0; j < maxringsamples; j++) {\n                        if (j >= ringsamples) break;\n                        s += gather(float(i), float(j), ringsamples, col, w, h, blur);\n                    }\n                }\n\n                col /= s; // divide by sample count\n            }\n\n            gl_FragColor = vec4(col, 1.0);\n        }\n    "
};
Xr = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        time: {
            value: 0
        },
        nIntensity: {
            value: .5
        },
        sIntensity: {
            value: .05
        },
        sCount: {
            value: 4096
        },
        grayscale: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["#include <common>", "uniform float time;", "uniform bool grayscale;", "uniform float nIntensity;", "uniform float sIntensity;", "uniform float sCount;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 cTextureScreen = texture2D( tDiffuse, vUv );", "float dx = rand( vUv + time );", "vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );", "vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );", "cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;", "cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );", "if( grayscale ) {", "cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );", "}", "gl_FragColor =  vec4( cResult, cTextureScreen.a );", "}"].join("\n")
};
Jr = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        uChromaFactor: {
            value: .025
        },
        uResolutionRatio: {
            value: new THREE.Vector2(1,1)
        },
        resolution: {
            value: new THREE.Vector2(1 / 1024,1 / 512)
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float uChromaFactor;", "uniform vec2 uResolutionRatio;", "uniform vec2 resolution;", "varying vec2 vUv;", "void main() {", "vec2 uv = vUv;", "vec2 dist = uv - 0.5;", "vec2 offset = uChromaFactor * dist * length(dist);", "vec4 col = texture2D(tDiffuse, min(uv, 1.0 - resolution) * uResolutionRatio);", "col.r = texture2D(tDiffuse, min(uv - offset, 1.0 - resolution) * uResolutionRatio).r;", "col.b = texture2D(tDiffuse, min(uv + offset, 1.0 - resolution) * uResolutionRatio).b;", "gl_FragColor = col;", "}"].join("\n")
};
Yr = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        opacity: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = opacity * texel;", "}"].join("\n")
};
Qr = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        resolution: {
            value: new THREE.Vector2(1 / 1024,1 / 512)
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["precision highp float;", "", "uniform sampler2D tDiffuse;", "", "uniform vec2 resolution;", "", "varying vec2 vUv;", "", "// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)", "", "//----------------------------------------------------------------------------------", "// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag", "// SDK Version: v3.00", "// Email:       gameworks@nvidia.com", "// Site:        http://developer.nvidia.com/", "//", "// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.", "//", "// Redistribution and use in source and binary forms, with or without", "// modification, are permitted provided that the following conditions", "// are met:", "//  * Redistributions of source code must retain the above copyright", "//    notice, this list of conditions and the following disclaimer.", "//  * Redistributions in binary form must reproduce the above copyright", "//    notice, this list of conditions and the following disclaimer in the", "//    documentation and/or other materials provided with the distribution.", "//  * Neither the name of NVIDIA CORPORATION nor the names of its", "//    contributors may be used to endorse or promote products derived", "//    from this software without specific prior written permission.", "//", "// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY", "// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE", "// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR", "// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR", "// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", "// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", "// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", "// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY", "// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT", "// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE", "// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "//", "//----------------------------------------------------------------------------------", "", "#define FXAA_PC 1", "#define FXAA_GLSL_100 1", "#define FXAA_QUALITY_PRESET 12", "", "#define FXAA_GREEN_AS_LUMA 1", "", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_PC_CONSOLE", "    //", "    // The console algorithm for PC is included", "    // for developers targeting really low spec machines.", "    // Likely better to just run FXAA_PC, and use a really low preset.", "    //", "    #define FXAA_PC_CONSOLE 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_GLSL_120", "    #define FXAA_GLSL_120 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_GLSL_130", "    #define FXAA_GLSL_130 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_HLSL_3", "    #define FXAA_HLSL_3 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_HLSL_4", "    #define FXAA_HLSL_4 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_HLSL_5", "    #define FXAA_HLSL_5 0", "#endif", "/*==========================================================================*/", "#ifndef FXAA_GREEN_AS_LUMA", "    //", "    // For those using non-linear color,", "    // and either not able to get luma in alpha, or not wanting to,", "    // this enables FXAA to run using green as a proxy for luma.", "    // So with this enabled, no need to pack luma in alpha.", "    //", "    // This will turn off AA on anything which lacks some amount of green.", "    // Pure red and blue or combination of only R and B, will get no AA.", "    //", "    // Might want to lower the settings for both,", "    //    fxaaConsoleEdgeThresholdMin", "    //    fxaaQualityEdgeThresholdMin", "    // In order to insure AA does not get turned off on colors", "    // which contain a minor amount of green.", "    //", "    // 1 = On.", "    // 0 = Off.", "    //", "    #define FXAA_GREEN_AS_LUMA 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_EARLY_EXIT", "    //", "    // Controls algorithm's early exit path.", "    // On PS3 turning this ON adds 2 cycles to the shader.", "    // On 360 turning this OFF adds 10ths of a millisecond to the shader.", "    // Turning this off on console will result in a more blurry image.", "    // So this defaults to on.", "    //", "    // 1 = On.", "    // 0 = Off.", "    //", "    #define FXAA_EARLY_EXIT 1", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_DISCARD", "    //", "    // Only valid for PC OpenGL currently.", "    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.", "    //", "    // 1 = Use discard on pixels which don't need AA.", "    //     For APIs which enable concurrent TEX+ROP from same surface.", "    // 0 = Return unchanged color on pixels which don't need AA.", "    //", "    #define FXAA_DISCARD 0", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_FAST_PIXEL_OFFSET", "    //", "    // Used for GLSL 120 only.", "    //", "    // 1 = GL API supports fast pixel offsets", "    // 0 = do not use fast pixel offsets", "    //", "    #ifdef GL_EXT_gpu_shader4", "        #define FXAA_FAST_PIXEL_OFFSET 1", "    #endif", "    #ifdef GL_NV_gpu_shader5", "        #define FXAA_FAST_PIXEL_OFFSET 1", "    #endif", "    #ifdef GL_ARB_gpu_shader5", "        #define FXAA_FAST_PIXEL_OFFSET 1", "    #endif", "    #ifndef FXAA_FAST_PIXEL_OFFSET", "        #define FXAA_FAST_PIXEL_OFFSET 0", "    #endif", "#endif", "/*--------------------------------------------------------------------------*/", "#ifndef FXAA_GATHER4_ALPHA", "    //", "    // 1 = API supports gather4 on alpha channel.", "    // 0 = API does not support gather4 on alpha channel.", "    //", "    #if (FXAA_HLSL_5 == 1)", "        #define FXAA_GATHER4_ALPHA 1", "    #endif", "    #ifdef GL_ARB_gpu_shader5", "        #define FXAA_GATHER4_ALPHA 1", "    #endif", "    #ifdef GL_NV_gpu_shader5", "        #define FXAA_GATHER4_ALPHA 1", "    #endif", "    #ifndef FXAA_GATHER4_ALPHA", "        #define FXAA_GATHER4_ALPHA 0", "    #endif", "#endif", "", "", "/*============================================================================", "                        FXAA QUALITY - TUNING KNOBS", "------------------------------------------------------------------------------", "NOTE the other tuning knobs are now in the shader function inputs!", "============================================================================*/", "#ifndef FXAA_QUALITY_PRESET", "    //", "    // Choose the quality preset.", "    // This needs to be compiled into the shader as it effects code.", "    // Best option to include multiple presets is to", "    // in each shader define the preset, then include this file.", "    //", "    // OPTIONS", "    // -----------------------------------------------------------------------", "    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)", "    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)", "    // 39       - no dither, very expensive", "    //", "    // NOTES", "    // -----------------------------------------------------------------------", "    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)", "    // 13 = about same speed as FXAA 3.9 and better than 12", "    // 23 = closest to FXAA 3.9 visually and performance wise", "    //  _ = the lowest digit is directly related to performance", "    // _  = the highest digit is directly related to style", "    //", "    #define FXAA_QUALITY_PRESET 12", "#endif", "", "", "/*============================================================================", "", "                           FXAA QUALITY - PRESETS", "", "============================================================================*/", "", "/*============================================================================", "                     FXAA QUALITY - MEDIUM DITHER PRESETS", "============================================================================*/", "#if (FXAA_QUALITY_PRESET == 10)", "    #define FXAA_QUALITY_PS 3", "    #define FXAA_QUALITY_P0 1.5", "    #define FXAA_QUALITY_P1 3.0", "    #define FXAA_QUALITY_P2 12.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 11)", "    #define FXAA_QUALITY_PS 4", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 3.0", "    #define FXAA_QUALITY_P3 12.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 12)", "    #define FXAA_QUALITY_PS 5", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 4.0", "    #define FXAA_QUALITY_P4 12.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 13)", "    #define FXAA_QUALITY_PS 6", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 4.0", "    #define FXAA_QUALITY_P5 12.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 14)", "    #define FXAA_QUALITY_PS 7", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 4.0", "    #define FXAA_QUALITY_P6 12.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 15)", "    #define FXAA_QUALITY_PS 8", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 2.0", "    #define FXAA_QUALITY_P6 4.0", "    #define FXAA_QUALITY_P7 12.0", "#endif", "", "/*============================================================================", "                     FXAA QUALITY - LOW DITHER PRESETS", "============================================================================*/", "#if (FXAA_QUALITY_PRESET == 20)", "    #define FXAA_QUALITY_PS 3", "    #define FXAA_QUALITY_P0 1.5", "    #define FXAA_QUALITY_P1 2.0", "    #define FXAA_QUALITY_P2 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 21)", "    #define FXAA_QUALITY_PS 4", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 22)", "    #define FXAA_QUALITY_PS 5", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 23)", "    #define FXAA_QUALITY_PS 6", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 24)", "    #define FXAA_QUALITY_PS 7", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 3.0", "    #define FXAA_QUALITY_P6 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 25)", "    #define FXAA_QUALITY_PS 8", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 2.0", "    #define FXAA_QUALITY_P6 4.0", "    #define FXAA_QUALITY_P7 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 26)", "    #define FXAA_QUALITY_PS 9", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 2.0", "    #define FXAA_QUALITY_P6 2.0", "    #define FXAA_QUALITY_P7 4.0", "    #define FXAA_QUALITY_P8 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 27)", "    #define FXAA_QUALITY_PS 10", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 2.0", "    #define FXAA_QUALITY_P6 2.0", "    #define FXAA_QUALITY_P7 2.0", "    #define FXAA_QUALITY_P8 4.0", "    #define FXAA_QUALITY_P9 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 28)", "    #define FXAA_QUALITY_PS 11", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 2.0", "    #define FXAA_QUALITY_P6 2.0", "    #define FXAA_QUALITY_P7 2.0", "    #define FXAA_QUALITY_P8 2.0", "    #define FXAA_QUALITY_P9 4.0", "    #define FXAA_QUALITY_P10 8.0", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_QUALITY_PRESET == 29)", "    #define FXAA_QUALITY_PS 12", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.5", "    #define FXAA_QUALITY_P2 2.0", "    #define FXAA_QUALITY_P3 2.0", "    #define FXAA_QUALITY_P4 2.0", "    #define FXAA_QUALITY_P5 2.0", "    #define FXAA_QUALITY_P6 2.0", "    #define FXAA_QUALITY_P7 2.0", "    #define FXAA_QUALITY_P8 2.0", "    #define FXAA_QUALITY_P9 2.0", "    #define FXAA_QUALITY_P10 4.0", "    #define FXAA_QUALITY_P11 8.0", "#endif", "", "/*============================================================================", "                     FXAA QUALITY - EXTREME QUALITY", "============================================================================*/", "#if (FXAA_QUALITY_PRESET == 39)", "    #define FXAA_QUALITY_PS 12", "    #define FXAA_QUALITY_P0 1.0", "    #define FXAA_QUALITY_P1 1.0", "    #define FXAA_QUALITY_P2 1.0", "    #define FXAA_QUALITY_P3 1.0", "    #define FXAA_QUALITY_P4 1.0", "    #define FXAA_QUALITY_P5 1.5", "    #define FXAA_QUALITY_P6 2.0", "    #define FXAA_QUALITY_P7 2.0", "    #define FXAA_QUALITY_P8 2.0", "    #define FXAA_QUALITY_P9 2.0", "    #define FXAA_QUALITY_P10 4.0", "    #define FXAA_QUALITY_P11 8.0", "#endif", "", "", "", "/*============================================================================", "", "                                API PORTING", "", "============================================================================*/", "#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)", "    #define FxaaBool bool", "    #define FxaaDiscard discard", "    #define FxaaFloat float", "    #define FxaaFloat2 vec2", "    #define FxaaFloat3 vec3", "    #define FxaaFloat4 vec4", "    #define FxaaHalf float", "    #define FxaaHalf2 vec2", "    #define FxaaHalf3 vec3", "    #define FxaaHalf4 vec4", "    #define FxaaInt2 ivec2", "    #define FxaaSat(x) clamp(x, 0.0, 1.0)", "    #define FxaaTex sampler2D", "#else", "    #define FxaaBool bool", "    #define FxaaDiscard clip(-1)", "    #define FxaaFloat float", "    #define FxaaFloat2 float2", "    #define FxaaFloat3 float3", "    #define FxaaFloat4 float4", "    #define FxaaHalf half", "    #define FxaaHalf2 half2", "    #define FxaaHalf3 half3", "    #define FxaaHalf4 half4", "    #define FxaaSat(x) saturate(x)", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_GLSL_100 == 1)", "  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)", "  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_GLSL_120 == 1)", "    // Requires,", "    //  #version 120", "    // And at least,", "    //  #extension GL_EXT_gpu_shader4 : enable", "    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)", "    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)", "    #if (FXAA_FAST_PIXEL_OFFSET == 1)", "        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)", "    #else", "        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)", "    #endif", "    #if (FXAA_GATHER4_ALPHA == 1)", "        // use #extension GL_ARB_gpu_shader5 : enable", "        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)", "        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)", "        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)", "        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)", "    #endif", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_GLSL_130 == 1)", '    // Requires "#version 130" or better', "    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)", "    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)", "    #if (FXAA_GATHER4_ALPHA == 1)", "        // use #extension GL_ARB_gpu_shader5 : enable", "        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)", "        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)", "        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)", "        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)", "    #endif", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_HLSL_3 == 1)", "    #define FxaaInt2 float2", "    #define FxaaTex sampler2D", "    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))", "    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_HLSL_4 == 1)", "    #define FxaaInt2 int2", "    struct FxaaTex { SamplerState smpl; Texture2D tex; };", "    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)", "    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)", "#endif", "/*--------------------------------------------------------------------------*/", "#if (FXAA_HLSL_5 == 1)", "    #define FxaaInt2 int2", "    struct FxaaTex { SamplerState smpl; Texture2D tex; };", "    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)", "    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)", "    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)", "    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)", "    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)", "    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)", "#endif", "", "", "/*============================================================================", "                   GREEN AS LUMA OPTION SUPPORT FUNCTION", "============================================================================*/", "#if (FXAA_GREEN_AS_LUMA == 0)", "    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }", "#else", "    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }", "#endif", "", "", "", "", "/*============================================================================", "", "                             FXAA3 QUALITY - PC", "", "============================================================================*/", "#if (FXAA_PC == 1)", "/*--------------------------------------------------------------------------*/", "FxaaFloat4 FxaaPixelShader(", "    //", "    // Use noperspective interpolation here (turn off perspective interpolation).", "    // {xy} = center of pixel", "    FxaaFloat2 pos,", "    //", "    // Used only for FXAA Console, and not used on the 360 version.", "    // Use noperspective interpolation here (turn off perspective interpolation).", "    // {xy_} = upper left of pixel", "    // {_zw} = lower right of pixel", "    FxaaFloat4 fxaaConsolePosPos,", "    //", "    // Input color texture.", "    // {rgb_} = color in linear or perceptual color space", "    // if (FXAA_GREEN_AS_LUMA == 0)", "    //     {__a} = luma in perceptual color space (not linear)", "    FxaaTex tex,", "    //", "    // Only used on the optimized 360 version of FXAA Console.", '    // For everything but 360, just use the same input here as for "tex".', "    // For 360, same texture, just alias with a 2nd sampler.", "    // This sampler needs to have an exponent bias of -1.", "    FxaaTex fxaaConsole360TexExpBiasNegOne,", "    //", "    // Only used on the optimized 360 version of FXAA Console.", '    // For everything but 360, just use the same input here as for "tex".', "    // For 360, same texture, just alias with a 3nd sampler.", "    // This sampler needs to have an exponent bias of -2.", "    FxaaTex fxaaConsole360TexExpBiasNegTwo,", "    //", "    // Only used on FXAA Quality.", "    // This must be from a constant/uniform.", "    // {x_} = 1.0/screenWidthInPixels", "    // {_y} = 1.0/screenHeightInPixels", "    FxaaFloat2 fxaaQualityRcpFrame,", "    //", "    // Only used on FXAA Console.", "    // This must be from a constant/uniform.", "    // This effects sub-pixel AA quality and inversely sharpness.", "    //   Where N ranges between,", "    //     N = 0.50 (default)", "    //     N = 0.33 (sharper)", "    // {x__} = -N/screenWidthInPixels", "    // {_y_} = -N/screenHeightInPixels", "    // {_z_} =  N/screenWidthInPixels", "    // {__w} =  N/screenHeightInPixels", "    FxaaFloat4 fxaaConsoleRcpFrameOpt,", "    //", "    // Only used on FXAA Console.", "    // Not used on 360, but used on PS3 and PC.", "    // This must be from a constant/uniform.", "    // {x__} = -2.0/screenWidthInPixels", "    // {_y_} = -2.0/screenHeightInPixels", "    // {_z_} =  2.0/screenWidthInPixels", "    // {__w} =  2.0/screenHeightInPixels", "    FxaaFloat4 fxaaConsoleRcpFrameOpt2,", "    //", "    // Only used on FXAA Console.", "    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.", "    // This must be from a constant/uniform.", "    // {x__} =  8.0/screenWidthInPixels", "    // {_y_} =  8.0/screenHeightInPixels", "    // {_z_} = -4.0/screenWidthInPixels", "    // {__w} = -4.0/screenHeightInPixels", "    FxaaFloat4 fxaaConsole360RcpFrameOpt2,", "    //", "    // Only used on FXAA Quality.", "    // This used to be the FXAA_QUALITY_SUBPIX define.", "    // It is here now to allow easier tuning.", "    // Choose the amount of sub-pixel aliasing removal.", "    // This can effect sharpness.", "    //   1.00 - upper limit (softer)", "    //   0.75 - default amount of filtering", "    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)", "    //   0.25 - almost off", "    //   0.00 - completely off", "    FxaaFloat fxaaQualitySubpix,", "    //", "    // Only used on FXAA Quality.", "    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.", "    // It is here now to allow easier tuning.", "    // The minimum amount of local contrast required to apply algorithm.", "    //   0.333 - too little (faster)", "    //   0.250 - low quality", "    //   0.166 - default", "    //   0.125 - high quality", "    //   0.063 - overkill (slower)", "    FxaaFloat fxaaQualityEdgeThreshold,", "    //", "    // Only used on FXAA Quality.", "    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.", "    // It is here now to allow easier tuning.", "    // Trims the algorithm from processing darks.", "    //   0.0833 - upper limit (default, the start of visible unfiltered edges)", "    //   0.0625 - high quality (faster)", "    //   0.0312 - visible limit (slower)", "    // Special notes when using FXAA_GREEN_AS_LUMA,", "    //   Likely want to set this to zero.", "    //   As colors that are mostly not-green", "    //   will appear very dark in the green channel!", "    //   Tune by looking at mostly non-green content,", "    //   then start at zero and increase until aliasing is a problem.", "    FxaaFloat fxaaQualityEdgeThresholdMin,", "    //", "    // Only used on FXAA Console.", "    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.", "    // It is here now to allow easier tuning.", "    // This does not effect PS3, as this needs to be compiled in.", "    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.", "    //   Due to the PS3 being ALU bound,", "    //   there are only three safe values here: 2 and 4 and 8.", "    //   These options use the shaders ability to a free *|/ by 2|4|8.", "    // For all other platforms can be a non-power of two.", "    //   8.0 is sharper (default!!!)", "    //   4.0 is softer", "    //   2.0 is really soft (good only for vector graphics inputs)", "    FxaaFloat fxaaConsoleEdgeSharpness,", "    //", "    // Only used on FXAA Console.", "    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.", "    // It is here now to allow easier tuning.", "    // This does not effect PS3, as this needs to be compiled in.", "    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.", "    //   Due to the PS3 being ALU bound,", "    //   there are only two safe values here: 1/4 and 1/8.", "    //   These options use the shaders ability to a free *|/ by 2|4|8.", "    // The console setting has a different mapping than the quality setting.", "    // Other platforms can use other values.", "    //   0.125 leaves less aliasing, but is softer (default!!!)", "    //   0.25 leaves more aliasing, and is sharper", "    FxaaFloat fxaaConsoleEdgeThreshold,", "    //", "    // Only used on FXAA Console.", "    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.", "    // It is here now to allow easier tuning.", "    // Trims the algorithm from processing darks.", "    // The console setting has a different mapping than the quality setting.", "    // This only applies when FXAA_EARLY_EXIT is 1.", "    // This does not apply to PS3,", "    // PS3 was simplified to avoid more shader instructions.", "    //   0.06 - faster but more aliasing in darks", "    //   0.05 - default", "    //   0.04 - slower and less aliasing in darks", "    // Special notes when using FXAA_GREEN_AS_LUMA,", "    //   Likely want to set this to zero.", "    //   As colors that are mostly not-green", "    //   will appear very dark in the green channel!", "    //   Tune by looking at mostly non-green content,", "    //   then start at zero and increase until aliasing is a problem.", "    FxaaFloat fxaaConsoleEdgeThresholdMin,", "    //", "    // Extra constants for 360 FXAA Console only.", "    // Use zeros or anything else for other platforms.", "    // These must be in physical constant registers and NOT immedates.", "    // Immedates will result in compiler un-optimizing.", "    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)", "    FxaaFloat4 fxaaConsole360ConstDir", ") {", "/*--------------------------------------------------------------------------*/", "    FxaaFloat2 posM;", "    posM.x = pos.x;", "    posM.y = pos.y;", "    #if (FXAA_GATHER4_ALPHA == 1)", "        #if (FXAA_DISCARD == 0)", "            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);", "            #if (FXAA_GREEN_AS_LUMA == 0)", "                #define lumaM rgbyM.w", "            #else", "                #define lumaM rgbyM.y", "            #endif", "        #endif", "        #if (FXAA_GREEN_AS_LUMA == 0)", "            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);", "            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));", "        #else", "            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);", "            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));", "        #endif", "        #if (FXAA_DISCARD == 1)", "            #define lumaM luma4A.w", "        #endif", "        #define lumaE luma4A.z", "        #define lumaS luma4A.x", "        #define lumaSE luma4A.y", "        #define lumaNW luma4B.w", "        #define lumaN luma4B.z", "        #define lumaW luma4B.x", "    #else", "        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);", "        #if (FXAA_GREEN_AS_LUMA == 0)", "            #define lumaM rgbyM.w", "        #else", "            #define lumaM rgbyM.y", "        #endif", "        #if (FXAA_GLSL_100 == 1)", "          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));", "        #else", "          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));", "        #endif", "    #endif", "/*--------------------------------------------------------------------------*/", "    FxaaFloat maxSM = max(lumaS, lumaM);", "    FxaaFloat minSM = min(lumaS, lumaM);", "    FxaaFloat maxESM = max(lumaE, maxSM);", "    FxaaFloat minESM = min(lumaE, minSM);", "    FxaaFloat maxWN = max(lumaN, lumaW);", "    FxaaFloat minWN = min(lumaN, lumaW);", "    FxaaFloat rangeMax = max(maxWN, maxESM);", "    FxaaFloat rangeMin = min(minWN, minESM);", "    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;", "    FxaaFloat range = rangeMax - rangeMin;", "    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);", "    FxaaBool earlyExit = range < rangeMaxClamped;", "/*--------------------------------------------------------------------------*/", "    if(earlyExit)", "        #if (FXAA_DISCARD == 1)", "            FxaaDiscard;", "        #else", "            return rgbyM;", "        #endif", "/*--------------------------------------------------------------------------*/", "    #if (FXAA_GATHER4_ALPHA == 0)", "        #if (FXAA_GLSL_100 == 1)", "          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));", "        #else", "          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));", "          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));", "        #endif", "    #else", "        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));", "        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));", "    #endif", "/*--------------------------------------------------------------------------*/", "    FxaaFloat lumaNS = lumaN + lumaS;", "    FxaaFloat lumaWE = lumaW + lumaE;", "    FxaaFloat subpixRcpRange = 1.0/range;", "    FxaaFloat subpixNSWE = lumaNS + lumaWE;", "    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;", "    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;", "/*--------------------------------------------------------------------------*/", "    FxaaFloat lumaNESE = lumaNE + lumaSE;", "    FxaaFloat lumaNWNE = lumaNW + lumaNE;", "    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;", "    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;", "/*--------------------------------------------------------------------------*/", "    FxaaFloat lumaNWSW = lumaNW + lumaSW;", "    FxaaFloat lumaSWSE = lumaSW + lumaSE;", "    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);", "    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);", "    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;", "    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;", "    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;", "    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;", "/*--------------------------------------------------------------------------*/", "    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;", "    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;", "    FxaaBool horzSpan = edgeHorz >= edgeVert;", "    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;", "/*--------------------------------------------------------------------------*/", "    if(!horzSpan) lumaN = lumaW;", "    if(!horzSpan) lumaS = lumaE;", "    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;", "    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;", "/*--------------------------------------------------------------------------*/", "    FxaaFloat gradientN = lumaN - lumaM;", "    FxaaFloat gradientS = lumaS - lumaM;", "    FxaaFloat lumaNN = lumaN + lumaM;", "    FxaaFloat lumaSS = lumaS + lumaM;", "    FxaaBool pairN = abs(gradientN) >= abs(gradientS);", "    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));", "    if(pairN) lengthSign = -lengthSign;", "    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);", "/*--------------------------------------------------------------------------*/", "    FxaaFloat2 posB;", "    posB.x = posM.x;", "    posB.y = posM.y;", "    FxaaFloat2 offNP;", "    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;", "    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;", "    if(!horzSpan) posB.x += lengthSign * 0.5;", "    if( horzSpan) posB.y += lengthSign * 0.5;", "/*--------------------------------------------------------------------------*/", "    FxaaFloat2 posN;", "    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;", "    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;", "    FxaaFloat2 posP;", "    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;", "    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;", "    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;", "    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));", "    FxaaFloat subpixE = subpixC * subpixC;", "    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));", "/*--------------------------------------------------------------------------*/", "    if(!pairN) lumaNN = lumaSS;", "    FxaaFloat gradientScaled = gradient * 1.0/4.0;", "    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;", "    FxaaFloat subpixF = subpixD * subpixE;", "    FxaaBool lumaMLTZero = lumaMM < 0.0;", "/*--------------------------------------------------------------------------*/", "    lumaEndN -= lumaNN * 0.5;", "    lumaEndP -= lumaNN * 0.5;", "    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;", "    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;", "    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;", "    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;", "    FxaaBool doneNP = (!doneN) || (!doneP);", "    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;", "    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;", "/*--------------------------------------------------------------------------*/", "    if(doneNP) {", "        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "        doneN = abs(lumaEndN) >= gradientScaled;", "        doneP = abs(lumaEndP) >= gradientScaled;", "        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;", "        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;", "        doneNP = (!doneN) || (!doneP);", "        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;", "        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;", "/*--------------------------------------------------------------------------*/", "        #if (FXAA_QUALITY_PS > 3)", "        if(doneNP) {", "            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "            doneN = abs(lumaEndN) >= gradientScaled;", "            doneP = abs(lumaEndP) >= gradientScaled;", "            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;", "            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;", "            doneNP = (!doneN) || (!doneP);", "            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;", "            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;", "/*--------------------------------------------------------------------------*/", "            #if (FXAA_QUALITY_PS > 4)", "            if(doneNP) {", "                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                doneN = abs(lumaEndN) >= gradientScaled;", "                doneP = abs(lumaEndP) >= gradientScaled;", "                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;", "                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;", "                doneNP = (!doneN) || (!doneP);", "                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;", "                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;", "/*--------------------------------------------------------------------------*/", "                #if (FXAA_QUALITY_PS > 5)", "                if(doneNP) {", "                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                    doneN = abs(lumaEndN) >= gradientScaled;", "                    doneP = abs(lumaEndP) >= gradientScaled;", "                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;", "                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;", "                    doneNP = (!doneN) || (!doneP);", "                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;", "                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;", "/*--------------------------------------------------------------------------*/", "                    #if (FXAA_QUALITY_PS > 6)", "                    if(doneNP) {", "                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                        doneN = abs(lumaEndN) >= gradientScaled;", "                        doneP = abs(lumaEndP) >= gradientScaled;", "                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;", "                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;", "                        doneNP = (!doneN) || (!doneP);", "                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;", "                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;", "/*--------------------------------------------------------------------------*/", "                        #if (FXAA_QUALITY_PS > 7)", "                        if(doneNP) {", "                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                            doneN = abs(lumaEndN) >= gradientScaled;", "                            doneP = abs(lumaEndP) >= gradientScaled;", "                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;", "                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;", "                            doneNP = (!doneN) || (!doneP);", "                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;", "                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;", "/*--------------------------------------------------------------------------*/", "    #if (FXAA_QUALITY_PS > 8)", "    if(doneNP) {", "        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "        doneN = abs(lumaEndN) >= gradientScaled;", "        doneP = abs(lumaEndP) >= gradientScaled;", "        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;", "        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;", "        doneNP = (!doneN) || (!doneP);", "        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;", "        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;", "/*--------------------------------------------------------------------------*/", "        #if (FXAA_QUALITY_PS > 9)", "        if(doneNP) {", "            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "            doneN = abs(lumaEndN) >= gradientScaled;", "            doneP = abs(lumaEndP) >= gradientScaled;", "            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;", "            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;", "            doneNP = (!doneN) || (!doneP);", "            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;", "            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;", "/*--------------------------------------------------------------------------*/", "            #if (FXAA_QUALITY_PS > 10)", "            if(doneNP) {", "                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                doneN = abs(lumaEndN) >= gradientScaled;", "                doneP = abs(lumaEndP) >= gradientScaled;", "                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;", "                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;", "                doneNP = (!doneN) || (!doneP);", "                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;", "                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;", "/*--------------------------------------------------------------------------*/", "                #if (FXAA_QUALITY_PS > 11)", "                if(doneNP) {", "                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                    doneN = abs(lumaEndN) >= gradientScaled;", "                    doneP = abs(lumaEndP) >= gradientScaled;", "                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;", "                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;", "                    doneNP = (!doneN) || (!doneP);", "                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;", "                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;", "/*--------------------------------------------------------------------------*/", "                    #if (FXAA_QUALITY_PS > 12)", "                    if(doneNP) {", "                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));", "                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));", "                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;", "                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;", "                        doneN = abs(lumaEndN) >= gradientScaled;", "                        doneP = abs(lumaEndP) >= gradientScaled;", "                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;", "                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;", "                        doneNP = (!doneN) || (!doneP);", "                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;", "                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;", "/*--------------------------------------------------------------------------*/", "                    }", "                    #endif", "/*--------------------------------------------------------------------------*/", "                }", "                #endif", "/*--------------------------------------------------------------------------*/", "            }", "            #endif", "/*--------------------------------------------------------------------------*/", "        }", "        #endif", "/*--------------------------------------------------------------------------*/", "    }", "    #endif", "/*--------------------------------------------------------------------------*/", "                        }", "                        #endif", "/*--------------------------------------------------------------------------*/", "                    }", "                    #endif", "/*--------------------------------------------------------------------------*/", "                }", "                #endif", "/*--------------------------------------------------------------------------*/", "            }", "            #endif", "/*--------------------------------------------------------------------------*/", "        }", "        #endif", "/*--------------------------------------------------------------------------*/", "    }", "/*--------------------------------------------------------------------------*/", "    FxaaFloat dstN = posM.x - posN.x;", "    FxaaFloat dstP = posP.x - posM.x;", "    if(!horzSpan) dstN = posM.y - posN.y;", "    if(!horzSpan) dstP = posP.y - posM.y;", "/*--------------------------------------------------------------------------*/", "    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;", "    FxaaFloat spanLength = (dstP + dstN);", "    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;", "    FxaaFloat spanLengthRcp = 1.0/spanLength;", "/*--------------------------------------------------------------------------*/", "    FxaaBool directionN = dstN < dstP;", "    FxaaFloat dst = min(dstN, dstP);", "    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;", "    FxaaFloat subpixG = subpixF * subpixF;", "    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;", "    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;", "/*--------------------------------------------------------------------------*/", "    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;", "    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);", "    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;", "    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;", "    #if (FXAA_DISCARD == 1)", "        return FxaaTexTop(tex, posM);", "    #else", "        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);", "    #endif", "}", "/*==========================================================================*/", "#endif", "", "void main() {", "  gl_FragColor = FxaaPixelShader(", "    vUv,", "    vec4(0.0),", "    tDiffuse,", "    tDiffuse,", "    tDiffuse,", "    resolution,", "    vec4(0.0),", "    vec4(0.0),", "    vec4(0.0),", "    0.75,", "    0.166,", "    0.0833,", "    0.0,", "    0.0,", "    0.0,", "    vec4(0.0)", "  );", "", "  // TODO avoid querying texture twice for same texel", "  gl_FragColor.a = texture2D(tDiffuse, vUv).a;", "}"].join("\n")
};
Zr = new THREE.OrthographicCamera(-1,1,1,-1,0,1);
Kr = new THREE.Scene
    , $r = new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);
$r.frustumCulled = !1,
Kr.add($r);
var en = new THREE.Color
    , tn = function() {
    function e(t, i, n, o) {
        classCallCheck(this, e),
        this.clear = !0,
        this.clearColor = new THREE.Color(0,0,0),
        this.clearAlpha = 1,
        this.clearDepthStencil = !0,
        this.textureID = void 0 !== i ? i : "tDiffuse",
        this.resolutionID = void 0 !== n ? n : "resolution",
        this.resolutionScaler = void 0 !== o ? o : 1,
        t instanceof THREE.ShaderMaterial ? (this.uniforms = t.uniforms,
        this.material = t) : t && (this.uniforms = THREE.UniformsUtils.clone(t.uniforms),
        this.material = new THREE.ShaderMaterial({
            defines: Object.assign({}, t.defines),
            uniforms: this.uniforms,
            vertexShader: t.vertexShader || "\n\tvarying vec2 vUv;\n\tvoid main() {\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t}\n",
            fragmentShader: t.fragmentShader
        }))
    }
    return e.prototype.setSize = function(e, t) {
        this.uniforms[this.resolutionID] && this.uniforms[this.resolutionID].value.set(this.resolutionScaler / e, this.resolutionScaler / t)
    }
    ,
    e.prototype.render = function(e, t, i, r, n) {
        this.uniforms[this.textureID] && i && (this.uniforms[this.textureID].value = i.texture),
        this.uniforms.time && (this.uniforms.time.value += r,
        this.uniforms.time.value > 10 && (this.uniforms.time.value = 0));
        var o = e.getClearAlpha()
            , s = e.autoClear;
        e.autoClear = !1,
        this.clear && (en.copy(e.getClearColor()),
        e.setClearColor(this.clearColor, this.clearAlpha)),
        $r.material = this.material,
        e.setRenderTarget(void 0 !== t ? t : null),
        this.clear && e.clear(!0, this.clearDepthStencil, this.clearDepthStencil),
        e.render(Kr, Zr),
        this.clear && e.setClearColor(en, o),
        e.autoClear = s
    }
    ,
    e
}();
rn = {
    minFilter: THREE.LinearFilter,
    magFilter: THREE.LinearFilter,
    format: THREE.RGBAFormat,
    stencilBuffer: !1,
    generateMipmaps: !1
};
function nn(e, t, i) {
    var r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3]
        , n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 8
        , o = new THREE.WebGLMultisampleRenderTarget(t,i,rn);
    return o.texture.name = e + ".mrt",
    o.stencilBuffer = r,
    o.samples = Math.min(5, n),
    o
}
function on(e, t, i) {
    var r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3]
        , n = new THREE.WebGLRenderTarget(t,i,rn);
    return n.texture.name = e + ".rt",
    n.stencilBuffer = r,
    n
}
function sn(e, t, i) {
    return {
        vertexShader: "\n\t\t\t#include <common>\n\t\t\t#include <skinning_pars_vertex>\n\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\tvoid main() {\n\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t#include <begin_vertex>\n\t\t\t\t#include <skinning_vertex>\n\t\t\t\t#include <project_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t}\n\t\t",
        fragmentShader: "\n\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\tvoid main() {\n\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\tgl_FragColor = vec4(" + e.toFixed(1) + ", " + t.toFixed(1) + ", " + i.toFixed(1) + ", 1.0);\n\t\t\t}\n\t\t"
    }
}
var an = sn(0, 0, 0);
ln = new Map;
function un(e, t) {
    var i = e.isInstancedMesh + "_" + t.skinning
        , r = void 0;
    return ln.has(i) ? r = ln.get(i) : ((r = new THREE.ShaderMaterial(an)).skinning = t.skinning,
    ln.set(i, r)),
    r
}
function cn(e, t) {
    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    e.depthTest = t.depthTest,
    e.depthWrite = t.depthWrite,
    e.colorWrite = t.colorWrite,
    e.colorWrite && !i && (e.colorWrite = !(t.transparent && !t.depthWrite)),
    e.side = t.side
}
function hn(e, t) {
    if (!e)
        return null;
    var i = e[t];
    return i ? "[object Object]" === toString.call(i) ? i.skip ? "skip" : void 0 !== i.value ? i.value : 1 : i : null
}
function pn(e, t) {
    return "BackgroundCubeMaterial" == t.name || "BackgroundMaterial" == t.name || "sky" === e.name || !0 === e.isSky
}
var dn = function() {
    function e(t, i, n, o) {
        classCallCheck(this, e),
        this._mrt = nn("SceneBuffer", t, i, n, o),
        this._rt = on("SceneBuffer", t, i, n),
        this._depthBindType = null,
        this.useMRT = !1
    }
    return e.prototype.setDepthTexture = function(e) {
        return this._rt.depthTexture !== e && (this._rt.depthTexture = e,
        this._rt.webglDepthRenderbuffer = null,
        this._rt.dispose(),
        !0)
    }
    ,
    e.prototype.setDepthRenderBuffer = function(e, t) {
        return (this._rt.webglDepthRenderbuffer !== t || this._mrt.webglDepthRenderbuffer !== e) && (this._rt.depthTexture = null,
        this._rt.webglDepthRenderbuffer = t,
        this._mrt.webglColorRenderbuffer = null,
        this._mrt.webglDepthRenderbuffer = e,
        this._rt.dispose(),
        this._mrt.dispose(),
        !0)
    }
    ,
    e.prototype.setColorDepthRenderBuffer = function(e, t) {
        return (this._mrt.webglColorRenderbuffer !== e || this._mrt.webglDepthRenderbuffer !== t) && (this._mrt.webglColorRenderbuffer = e,
        this._mrt.webglDepthRenderbuffer = t,
        this._mrt.dispose(),
        !0)
    }
    ,
    e.prototype.setSize = function(e, t) {
        this._mrt.setSize(e, t),
        this._rt.setSize(e, t)
    }
    ,
    e.prototype.render = function(e, t, i) {
        var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
            , n = e.autoClear;
        e.autoClear = !1,
        e.setRenderTarget(this.useMRT ? this._mrt : this._rt),
        r && e.clear(),
        e.render(t, i),
        e.autoClear = n
    }
    ,
    e.prototype.getSchemeTexture = function() {
        return this.useMRT ? this._mrt.texture : this._rt.texture
    }
    ,
    e.prototype.getSchemeBuffer = function() {
        return this.useMRT ? this._mrt : this._rt
    }
    ,
    e.prototype.dispose = function() {
        this._mrt.dispose(),
        this._rt.dispose()
    }
    ,
    e
}();
fn = {
    _USE_ROUGHNESSMAP: !1
};
mn = {
    roughness: {
        value: 1
    },
    roughnessMap: {
        value: null
    }
};
gn = "\n        varying vec3 vNormal;\n        varying vec2 vUv;\n\n        #include <common>\n        #include <morphtarget_pars_vertex>\n        #include <skinning_pars_vertex>\n        // #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n\n            vUv = uv;\n\n            #include <beginnormal_vertex>\n            #include <morphnormal_vertex>\n            #include <skinbase_vertex>\n            #include <skinnormal_vertex>\n\n            // @THREE-Modification\n            // normal instanced\n            #ifdef INSTANCED\n\n                mat4 instanceMat = compose( instancePosition, instanceQuaternion, instanceScale );\n                mat3 im = mat3( instanceMat );\n                objectNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n                objectNormal = im * objectNormal;\n\n            #endif\n\n            #include <defaultnormal_vertex>\n\n            vNormal = normalize( transformedNormal );\n\n            #include <begin_vertex>\n\n            // @THREE-Modification\n            // position instanced\n            #ifdef INSTANCED\n                transformed.xyz = ( instanceMat * vec4( transformed, 1.0 ) ).xyz;\n            #endif\n\n            #include <morphtarget_vertex>\n            #include <skinning_vertex>\n            #include <project_vertex>\n            // #include <logdepthbuf_vertex>\n            #include <clipping_planes_vertex>\n\n        }\n    ";
vn = "\n        uniform float roughness;\n\n        #ifdef _USE_ROUGHNESSMAP\n            uniform sampler2D roughnessMap;\n        #endif\n\n        varying vec3 vNormal;\n        varying vec2 vUv;\n\n        #include <packing>\n        // #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n\n            #include <clipping_planes_fragment>\n            // #include <logdepthbuf_fragment>\n\n            vec3 normal = normalize( vNormal );\n\n            #ifdef DOUBLE_SIDED\n\t\t        normal = normal * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t        #endif\n\n            float roughnessFactor = roughness;\n\n            #ifdef _USE_ROUGHNESSMAP\n                roughnessFactor *= texture2D( roughnessMap, vUv ).g;\n            #endif\n\n            gl_FragColor = vec4( packNormalToRGB( normal ), clamp(1. - roughnessFactor, 0., 1.) );\n\n        }\n    ";
yn = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this._rt = new THREE.WebGLRenderTarget(t,i,{
            minFilter: THREE.NearestFilter,
            magFilter: THREE.NearestFilter,
            format: THREE.RGBAFormat,
            type: THREE.HalfFloatType,
            generateMipmaps: !1
        }),
        this._rt.depthTexture = new THREE.DepthTexture(t,i),
        this._rt.depthTexture.format = THREE.DepthStencilFormat,
        this._rt.depthTexture.type = THREE.UnsignedInt248Type,
        this._rt.depthTexture.generateMipmaps = !1,
        this.ignoreTransparent = !0
    }
    return e.prototype._checkStrategyInited = function(e) {
        return e.materialManager.hasStrategy("GBuffer")
    }
    ,
    e.prototype._initStrategy = function(e) {
        var t = this;
        e.materialManager.addStrategy("GBuffer", (function(e, i, r, n, o, s) {
            return t.ignoreTransparent && o.transparent || pn(this, o) || o.isSpriteMaterial || this._gBufferIgnore || t.ignoreTransparent && o.alphaTest > 0 ? null : _n.getNormalGlossinessMaterial(this, o)
        }
        ))
    }
    ,
    e.prototype.setSize = function(e, t) {
        this._rt.setSize(e, t)
    }
    ,
    e.prototype.render = function(e, t, i, r) {
        this._checkStrategyInited(e) || this._initStrategy(e),
        this.ignoreTransparent = r;
        var n = e.getClearColor().getHex()
            , o = e.getClearAlpha()
            , s = e.autoClear;
        e.autoClear = !1,
        e.setClearColor(7829503, 0),
        e.materialManager.setMode("GBuffer");
        var a = t.autoUpdate
            , l = t.background
            , u = e.shadowMap.enable;
        t.autoUpdate = !1,
        t.background = null,
        e.shadowMap.enable = !1,
        e.initRenderList = !1,
        e.renderCustom1 = !1,
        e.setRenderTarget(this._rt),
        e.clear(),
        e.render(t, i),
        t.autoUpdate = a,
        t.background = l,
        e.shadowMap.enable = u,
        e.initRenderList = !0,
        e.renderCustom1 = !0,
        e.materialManager.setMode(0),
        e.autoClear = s,
        e.setClearColor(n, o)
    }
    ,
    e.prototype.getNormalGlossinessTexture = function() {
        return this._rt.texture
    }
    ,
    e.prototype.getDepthTexture = function() {
        return this._rt.depthTexture
    }
    ,
    e.prototype.dispose = function() {
        this._rt.dispose()
    }
    ,
    e
}();
bn = {};
_n = new (function() {
    function e() {
        classCallCheck(this, e),
        this._normalGlossinessMaterials = new Map
    }
    return e.prototype.getNormalGlossinessMaterial = function(e, t) {
        bn.instancing = e.isInstancedMesh,
        bn.useRoughnessMap = !!t.roughnessMap && void 0 === e._gBufferRoughness,
        bn.skinning = t.skinning,
        bn.morphTargets = t.morphTargets,
        bn.morphNormals = t.morphNormals,
        bn.side = t.side,
        bn.instanced = t.defines && ("" === t.defines.INSTANCED || t.defines.INSTANCED);
        var i = void 0
            , r = bn.instancing + "_" + bn.useRoughnessMap + "_" + bn.skinning + "_" + bn.morphTargets + "_" + bn.morphNormals + "_" + bn.side + "_" + bn.instanced;
        this._normalGlossinessMaterials.has(r) ? i = this._normalGlossinessMaterials.get(r) : ((i = new THREE.ShaderMaterial({
            defines: Object.assign({}, fn),
            uniforms: THREE.UniformsUtils.clone(mn),
            vertexShader: gn,
            fragmentShader: vn
        })).skinning = t.skinning,
        i.morphTargets = t.morphTargets,
        i.morphNormals = t.morphNormals,
        i.side = t.side,
        i.defines._USE_ROUGHNESSMAP = !!bn.useRoughnessMap && "",
        bn.instanced && (i.defines.INSTANCED = ""),
        this._normalGlossinessMaterials.set(r, i));
        var n = .5;
        return void 0 !== e._gBufferRoughness ? n = e._gBufferRoughness : void 0 !== t.roughness && (n = t.roughness),
        i.uniforms.roughness.value = n,
        i.uniforms.roughnessMap.value = t.roughnessMap,
        i.uniformsNeedUpdate = !0,
        i
    }
    ,
    e
}());
xn = {
    defines: {
        DEPTH_PACKING: 1,
        KERNEL_SIZE: 64,
        EPSILON: 1e-6
    },
    uniforms: {
        normalTex: {
            value: null
        },
        depthTex: {
            value: null
        },
        noiseTex: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2
        },
        noiseTexSize: {
            value: new THREE.Vector2(4,4)
        },
        projection: {
            value: new THREE.Matrix4
        },
        projectionInv: {
            value: new THREE.Matrix4
        },
        kernel: {
            value: null
        },
        radius: {
            value: .2
        },
        power: {
            value: 1
        },
        bias: {
            value: .004
        },
        intensity: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["precision highp sampler2D;", "#include <packing>", "varying vec2 vUv;", "uniform sampler2D normalTex;", "uniform sampler2D depthTex;", "uniform vec2 texSize;", "uniform sampler2D noiseTex;", "uniform vec2 noiseTexSize;", "uniform mat4 projection;", "uniform mat4 projectionInv;", "uniform vec3 kernel[KERNEL_SIZE];", "uniform float radius;", "uniform float power;", "uniform float bias;", "uniform float intensity;", "float getDepth( const in vec2 screenPosition ) {", "#if DEPTH_PACKING == 1", "return unpackRGBAToDepth( texture2D( depthTex, screenPosition ) );", "#elif DEPTH_PACKING == 2", "return texture2D( depthTex, screenPosition ).w;", "#else", "return texture2D( depthTex, screenPosition ).x;", "#endif", "}", "vec3 getViewNormal( const in vec2 screenPosition ) {", "return unpackRGBToNormal( texture2D( normalTex, screenPosition ).xyz );", "}", "float ssaoEstimator(in mat3 kernelBasis, in vec3 originPos, in vec3 N) {", "float occlusion = 0.0;", "for (int i = 0; i < KERNEL_SIZE; i++) {", "vec3 samplePos = kernel[i];", "samplePos = kernelBasis * samplePos;", "samplePos = samplePos * radius + originPos;", "vec4 texCoord = projection * vec4(samplePos, 1.0);", "texCoord.xy /= texCoord.w;", "texCoord.xy = texCoord.xy * 0.5 + 0.5;", "float sampleDepth = getDepth(texCoord.xy);", "float z = sampleDepth * 2.0 - 1.0;", "#ifdef ALCHEMY", "vec4 projectedPos = vec4(texCoord.xy * 2.0 - 1.0, z, 1.0);", "vec4 p4 = projectionInv * projectedPos;", "p4.xyz /= p4.w;", "vec3 cDir = p4.xyz - originPos;", "float vv = dot(cDir, cDir);", "float vn = dot(cDir, N);", "float radius2 = radius * radius;", "vn = max(vn + p4.z * bias, 0.0);", "float f = max(radius2 - vv, 0.0) / radius2;", "occlusion += f * f * f * max(vn / (0.01 + vv), 0.0);", "#else", "if (projection[3][3] == 0.0) {", "z = projection[3][2] / (z * projection[2][3] - projection[2][2]);", "} else {", "z = (z - projection[3][2]) / projection[2][2];", "}", "float factor = step(samplePos.z, z - bias);", "float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - z));", "occlusion += rangeCheck * factor;", "#endif", "}", "occlusion = 1.0 - occlusion / float(KERNEL_SIZE);", "return pow(occlusion, power);", "}", "void main() {", "float centerDepth = getDepth( vUv );", "if( centerDepth >= ( 1.0 - EPSILON ) ) {", "\tdiscard;", "}", "vec3 N = getViewNormal( vUv );", "vec2 noiseTexCoord = texSize / vec2(noiseTexSize) * vUv;", "vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;", "vec3 T = normalize(rvec - N * dot(rvec, N));", "vec3 BT = normalize(cross(N, T));", "mat3 kernelBasis = mat3(T, BT, N);", "float z = centerDepth * 2.0 - 1.0;", "vec4 projectedPos = vec4(vUv * 2.0 - 1.0, z, 1.0);", "vec4 p4 = projectionInv * projectedPos;", "vec3 position = p4.xyz / p4.w;", "float ao = ssaoEstimator(kernelBasis, position, N);", "ao = clamp(1.0 - (1.0 - ao) * intensity, 0.0, 1.0);", "gl_FragColor = vec4(vec3(ao), 1.0);", "}"].join("\n")
};
En = {
    defines: {
        NORMALTEX_ENABLED: 1,
        DEPTHTEX_ENABLED: 1,
        DEPTH_PACKING: 1
    },
    uniforms: {
        tDiffuse: {
            value: null
        },
        textureSize: {
            value: new THREE.Vector2
        },
        direction: {
            value: 0
        },
        blurSize: {
            value: 1
        },
        depthTex: {
            value: null
        },
        normalTex: {
            value: null
        },
        projection: {
            value: new THREE.Matrix4
        },
        depthRange: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["#include <packing>", "varying vec2 vUv;", "uniform vec2 textureSize;", "uniform float blurSize;", "uniform sampler2D tDiffuse;", "uniform int direction;", "#if NORMALTEX_ENABLED == 1", "uniform sampler2D normalTex;", "vec3 getViewNormal( const in vec2 screenPosition ) {", "return unpackRGBToNormal( texture2D( normalTex, screenPosition ).xyz );", "}", "#endif", "#if DEPTHTEX_ENABLED == 1", "uniform sampler2D depthTex;", "uniform mat4 projection;", "uniform float depthRange;", "float getDepth( const in vec2 screenPosition ) {", "#if DEPTH_PACKING == 1", "return unpackRGBAToDepth( texture2D( depthTex, screenPosition ) );", "#elif DEPTH_PACKING == 2", "return texture2D( depthTex, screenPosition ).w;", "#else", "return texture2D( depthTex, screenPosition ).x;", "#endif", "}", "float getLinearDepth(vec2 coord) {", "float depth = getDepth(coord) * 2.0 - 1.0;", "return projection[3][2] / (depth * projection[2][3] - projection[2][2]);", "}", "#endif", "void main() {", "float kernel[5];", "kernel[0] = 0.122581;", "kernel[1] = 0.233062;", "kernel[2] = 0.288713;", "kernel[3] = 0.233062;", "kernel[4] = 0.122581;", "vec2 off = vec2(0.0);", "if (direction == 0) {", "off[0] = blurSize / textureSize.x;", "}", "else {", "off[1] = blurSize / textureSize.y;", "}", "float sum = 0.0;", "float weightAll = 0.0;", "#if NORMALTEX_ENABLED == 1", "vec3 centerNormal = getViewNormal(vUv);", "#endif", "#if DEPTHTEX_ENABLED == 1", "float centerDepth = getLinearDepth(vUv);", "#endif", "for (int i = 0; i < 5; i++) {", "vec2 coord = clamp(vUv + vec2(float(i) - 2.0) * off, vec2(0.0), vec2(1.0));", "float w = kernel[i];", "#if NORMALTEX_ENABLED == 1", "vec3 normal = getViewNormal(coord);", "w *= clamp(dot(normal, centerNormal), 0.0, 1.0);", "#endif", "#if DEPTHTEX_ENABLED == 1", "float d = getLinearDepth(coord);", "w *= (1.0 - smoothstep(0.0, 1.0, abs(centerDepth - d) / depthRange));", "#endif", "weightAll += w;", "sum += w * texture2D(tDiffuse, coord).r;", "}", "gl_FragColor = vec4(vec3(sum / weightAll), 1.0);", "}"].join("\n")
};
function wn(e) {
    return e.replace(/^\S/, (function(e) {
        return e.toUpperCase()
    }
    ))
}
function Tn(e, t) {
    if ("[object Object]" !== t.toString())
        return t;
    for (var i in t)
        t.hasOwnProperty(i) && (e || (e = {}),
        e[i] = Tn(e[i], t[i]));
    return e
}
var Mn = {
    minFilter: THREE.LinearFilter,
    magFilter: THREE.LinearFilter,
    format: THREE.RGBAFormat,
    depthBuffer: !1,
    stencilBuffer: !1,
    generateMipmaps: !1
};
function Cn(e, t) {
    return new THREE.WebGLRenderTarget(e,t,Mn)
}
var Sn = new Map;
function jn(e) {
    for (var t = new Uint8Array(e * e * 4), i = 0, r = new THREE.Vector3, n = 0; n < e; n++)
        for (var o = 0; o < e; o++)
            r.set(2 * Math.random() - 1, 2 * Math.random() - 1, 0).normalize(),
            t[i++] = 255 * (.5 * r.x + .5),
            t[i++] = 255 * (.5 * r.y + .5),
            t[i++] = 0,
            t[i++] = 255;
    return t
}
function Pn(e, t) {
    for (var i = 0, r = 1 / t, n = e; n > 0; )
        i += r * (n % t),
        n = Math.floor(n / t),
        r /= t;
    return i
}
var Rn = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this._tempRenderTarget = Cn(t, i),
        this._tempRenderTarget2 = Cn(t, i),
        this._ssaoPass = new tn(xn,void 0,"texSize"),
        this._ssaoPass.material.depthTest = !1,
        this._ssaoPass.material.depthWrite = !1,
        this._blurPass = new tn(En,void 0,"textureSize"),
        this._blurPass.material.depthTest = !1,
        this._blurPass.material.depthWrite = !1,
        this._blurPass.material.transparent = !0,
        this._blurPass.material.blending = THREE.CustomBlending,
        this._blurPass.material.blendSrc = THREE.ZeroFactor,
        this._blurPass.material.blendDst = THREE.SrcColorFactor,
        this._blurPass.material.blendEquation = THREE.AddEquation,
        this._blurPass.material.blendSrcAlpha = THREE.ZeroFactor,
        this._blurPass.material.blendDstAlpha = THREE.SrcColorFactor,
        this._blurPass.material.blendEquationAlpha = THREE.AddEquation,
        this._kernels = {},
        this.setNoiseSize(4),
        this.setKernelSize(12),
        this.setParameter("radius", .2),
        this.setParameter("bias", .004),
        this.setParameter("power", 1),
        this.setParameter("intensity", .8),
        this.setParameter("blurSize", 1),
        this._ssaoPass.setSize(1 / t, 1 / i),
        this._blurPass.setSize(1 / t, 1 / i)
    }
    return e.prototype.setKernelSize = function(e, t) {
        t = void 0 !== t ? t : 0,
        this._kernels[e + "_" + t] || (this._kernels[e + "_" + t] = function(e, t, i) {
            var r = new Float32Array(3 * e);
            t = t || 0;
            for (var n = 0; n < e; n++) {
                var o = Pn(n + t, 2) * (i ? 1 : 2) * Math.PI
                    , s = Pn(n + t, 3) * Math.PI
                    , a = Math.random()
                    , l = Math.cos(o) * Math.sin(s) * a
                    , u = Math.cos(s) * a
                    , c = Math.sin(o) * Math.sin(s) * a;
                r[3 * n] = l,
                r[3 * n + 1] = u,
                r[3 * n + 2] = c
            }
            return r
        }(e, e * t, !0)),
        this._ssaoPass.material.defines.KERNEL_SIZE = e,
        this._ssaoPass.material.uniforms.kernel.value = this._kernels[e + "_" + t],
        this._ssaoPass.material.needsUpdate = !0
    }
    ,
    e.prototype.setNoiseSize = function(e) {
        var t = this._ssaoPass.material.uniforms.noiseTex.value;
        t ? (t.image.data = jn(e),
        t.image.width = e,
        t.image.height = e,
        t.needsUpdate = !0) : (t = function(e) {
            var t = new THREE.DataTexture(jn(e),e,e,THREE.RGBAFormat,THREE.UnsignedByteType,THREE.UVMapping,THREE.RepeatWrapping,THREE.RepeatWrapping);
            return t.needsUpdate = !0,
            t
        }(e),
        this._ssaoPass.material.uniforms.noiseTex.value = t),
        this._ssaoPass.material.uniforms.noiseTexSize.value.set(e, e)
    }
    ,
    e.prototype.setParameter = function(e, t) {
        "noiseTexSize" === e ? this.setNoiseSize(t) : "kernelSize" === e ? this.setKernelSize(t) : "blurSize" === e ? this._blurPass.material.uniforms.blurSize.value = t : this._ssaoPass.material.uniforms[e].value = t
    }
    ,
    e.prototype.setSize = function(e, t) {
        this._tempRenderTarget.setSize(e, t),
        this._tempRenderTarget2.setSize(e, t),
        this._ssaoPass.setSize(1 / e, 1 / t),
        this._blurPass.setSize(1 / e, 1 / t)
    }
    ,
    e.prototype.render = function(e, t, i, r, n, o) {
        this._ssaoPass.material.uniforms.normalTex.value = e,
        this._ssaoPass.material.uniforms.depthTex.value = t,
        this._ssaoPass.material.uniforms.projection.value.copy(r.projectionMatrix),
        this._ssaoPass.material.uniforms.projectionInv.value.getInverse(r.projectionMatrix),
        this._blurPass.material.uniforms.normalTex.value = e,
        this._blurPass.material.uniforms.depthTex.value = t,
        this._blurPass.material.uniforms.projection.value.copy(r.projectionMatrix),
        t === e ? (this._ssaoPass.material.defines.DEPTH_PACKING = 2,
        this._blurPass.material.defines.DEPTH_PACKING = 2) : t.isDepthTexture ? (this._ssaoPass.material.defines.DEPTH_PACKING = 0,
        this._blurPass.material.defines.DEPTH_PACKING = 0) : (this._ssaoPass.material.defines.DEPTH_PACKING = 1,
        this._blurPass.material.defines.DEPTH_PACKING = 1),
        this._ssaoPass.clearColor.setRGB(1, 1, 1),
        this._ssaoPass.clearAlpha = 1,
        this._ssaoPass.render(i, this._tempRenderTarget),
        this._blurPass.clearColor.setRGB(1, 1, 1),
        this._blurPass.clearAlpha = 1,
        this._blurPass.clear = !0,
        this._blurPass.material.uniforms.direction.value = 0,
        this._blurPass.material.transparent = !1,
        this._blurPass.render(i, this._tempRenderTarget2, this._tempRenderTarget),
        o ? (this._blurPass.clearColor.setRGB(0, 0, 0),
        this._blurPass.clearAlpha = 0) : this._blurPass.clear = !1,
        this._blurPass.material.uniforms.direction.value = 1,
        this._blurPass.material.transparent = !o,
        this._blurPass.material.blending = o ? THREE.NoBlending : THREE.CustomBlending,
        this._blurPass.render(i, void 0 !== n ? n : null, this._tempRenderTarget2)
    }
    ,
    e.prototype.dispose = function() {
        this._tempRenderTarget.dispose(),
        this._tempRenderTarget2.dispose(),
        this._ssaoPass.material.dispose(),
        this._blurPass.material.dispose()
    }
    ,
    e
}();
Dn = {
    defines: {},
    uniforms: {
        colorTex: {
            value: null
        },
        gBufferTexture1: {
            value: null
        },
        gBufferTexture2: {
            value: null
        },
        projection: {
            value: new THREE.Matrix4
        },
        projectionInv: {
            value: new THREE.Matrix4
        },
        maxRayDistance: {
            value: 200
        },
        pixelStride: {
            value: 16
        },
        pixelStrideZCutoff: {
            value: 50
        },
        screenEdgeFadeStart: {
            value: .9
        },
        eyeFadeStart: {
            value: .4
        },
        eyeFadeEnd: {
            value: .8
        },
        minGlossiness: {
            value: .2
        },
        zThicknessThreshold: {
            value: .1
        },
        jitterOffset: {
            value: 0
        },
        nearZ: {
            value: 0
        },
        viewportSize: {
            value: new THREE.Vector2(512,512)
        },
        maxMipmapLevel: {
            value: 5
        }
    },
    vertexShader: "\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",
    fragmentShader: "\n        #define MAX_ITERATION 20;\n\t\t#define MAX_BINARY_SEARCH_ITERATION 5;\n\n\t\tuniform sampler2D colorTex;\n\t\tuniform sampler2D gBufferTexture1;\n\t\tuniform sampler2D gBufferTexture2;\n\n\t\tuniform mat4 projection;\n\t\tuniform mat4 projectionInv;\n\t\t// uniform mat4 viewInverseTranspose;\n\n\t\tuniform float maxRayDistance;\n\n\t\tuniform float pixelStride;\n\t\t// ray origin Z at this distance will have a pixel stride of 1.0\n\t\tuniform float pixelStrideZCutoff;\n\n\t\t// distance to screen edge that ray hits will start to fade (0.0 -> 1.0)\n\t\tuniform float screenEdgeFadeStart;\n\n\t\t// ray direction's Z that ray hits will start to fade (0.0 -> 1.0)\n\t\tuniform float eyeFadeStart;\n\t\t// ray direction's Z that ray hits will be cut (0.0 -> 1.0)\n\t\tuniform float eyeFadeEnd;\n\n\t\t// Object larger than minGlossiness will have ssr effect\n\t\tuniform float minGlossiness;\n\t\tuniform float zThicknessThreshold;\n\n\t\tuniform float jitterOffset;\n\n\t\tuniform float nearZ;\n\t\tuniform vec2 viewportSize;\n\n        uniform float maxMipmapLevel;\n        \n        varying vec2 vUv;\n\n        float fetchDepth(sampler2D depthTexture, vec2 uv) {\n\t\t\tvec4 depthTexel = texture2D(depthTexture, uv);\n\t\t\treturn depthTexel.r * 2.0 - 1.0;\n\t\t}\n\n\t\tfloat linearDepth(float depth) {\n\t\t\treturn projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n\t\t}\n\n\t\tbool rayIntersectDepth(float rayZNear, float rayZFar, vec2 hitPixel) {\n\t\t    // Swap if bigger\n\t\t\tif (rayZFar > rayZNear) {\n\t\t\t\tfloat t = rayZFar; rayZFar = rayZNear; rayZNear = t;\n\t\t\t}\n\t\t\tfloat cameraZ = linearDepth(fetchDepth(gBufferTexture2, hitPixel));\n\t\t    // float cameraBackZ = linearDepth(fetchDepth(backDepthTex, hitPixel));\n\t\t    // Cross z\n\t\t\treturn rayZFar <= cameraZ && rayZNear >= cameraZ - zThicknessThreshold;\n\t\t}\n\n\t\t// Trace a ray in screenspace from rayOrigin (in camera space) pointing in rayDir (in camera space)\n\t\t//\n\t\t// With perspective correct interpolation\n\t\t//\n\t\t// Returns true if the ray hits a pixel in the depth buffer\n\t\t// and outputs the hitPixel (in UV space), the hitPoint (in camera space) and the number\n\t\t// of iterations it took to get there.\n\t\t//\n\t\t// Based on Morgan McGuire & Mike Mara's GLSL implementation:\n\t\t// http://casual-effects.blogspot.com/2014/08/screen-space-ray-tracing.html\n\t\tbool traceScreenSpaceRay(vec3 rayOrigin, vec3 rayDir, float jitter, out vec2 hitPixel, out vec3 hitPoint, out float iterationCount) {\n\t\t    // Clip to the near plane\n\t\t\tfloat rayLength = ((rayOrigin.z + rayDir.z * maxRayDistance) > -nearZ) ? (-nearZ - rayOrigin.z) / rayDir.z : maxRayDistance;\n\n\t\t\tvec3 rayEnd = rayOrigin + rayDir * rayLength;\n\n\t\t    // Project into homogeneous clip space\n\t\t\tvec4 H0 = projection * vec4(rayOrigin, 1.0);\n\t\t\tvec4 H1 = projection * vec4(rayEnd, 1.0);\n\n\t\t\tfloat k0 = 1.0 / H0.w, k1 = 1.0 / H1.w;\n\n\t\t    // The interpolated homogeneous version of the camera space points\n\t\t\tvec3 Q0 = rayOrigin * k0, Q1 = rayEnd * k1;\n\n\t\t    // Screen space endpoints\n\t\t    // PENDING viewportSize ?\n\t\t\tvec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * viewportSize;\n\t\t\tvec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * viewportSize;\n\n\t\t    // If the line is degenerate, make it cover at least one pixel to avoid handling\n\t\t    // zero-pixel extent as a special case later\n\t\t\tP1 += dot(P1 - P0, P1 - P0) < 0.0001 ? 0.01 : 0.0;\n\t\t\tvec2 delta = P1 - P0;\n\n\t\t    // Permute so that the primary iteration is in x to collapse\n\t\t    // all quadrant-specific DDA case later\n\t\t\tbool permute = false;\n\t\t\tif (abs(delta.x) < abs(delta.y)) {\n\t\t    // More vertical line\n\t\t\t\tpermute = true;\n\t\t\t\tdelta = delta.yx;\n\t\t\t\tP0 = P0.yx;\n\t\t\t\tP1 = P1.yx;\n\t\t\t}\n\t\t\tfloat stepDir = sign(delta.x);\n\t\t\tfloat invdx = stepDir / delta.x;\n\n\t\t    // Track the derivatives of Q and K\n\t\t\tvec3 dQ = (Q1 - Q0) * invdx;\n\t\t\tfloat dk = (k1 - k0) * invdx;\n\n\t\t\tvec2 dP = vec2(stepDir, delta.y * invdx);\n\n            // Calculate pixel stride based on distance of ray origin from camera.\n            // Since perspective means distant objects will be smaller in screen space\n            // we can use this to have higher quality reflections for far away objects\n            // while still using a large pixel stride for near objects (and increase performance)\n            // this also helps mitigate artifacts on distant reflections when we use a large\n            // pixel stride.\n\t\t\tfloat strideScaler = 1.0 - min(1.0, -rayOrigin.z / pixelStrideZCutoff);\n\t\t\tfloat pixStride = 1.0 + strideScaler * pixelStride;\n\n\t\t    // Scale derivatives by the desired pixel stride and the offset the starting values by the jitter fraction\n\t\t\tdP *= pixStride; dQ *= pixStride; dk *= pixStride;\n\n\t\t    // Track ray step and derivatives in a vec4 to parallelize\n\t\t\tvec4 pqk = vec4(P0, Q0.z, k0);\n\t\t\tvec4 dPQK = vec4(dP, dQ.z, dk);\n\n\t\t\tpqk += dPQK * jitter;\n\t\t\tfloat rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n\t\t\tfloat rayZNear;\n\n\t\t\tbool intersect = false;\n\n\t\t\tvec2 texelSize = 1.0 / viewportSize;\n\n\t\t\titerationCount = 0.0;\n\n\t\t\tfor (int i = 0; i < 20; i++) {\n\t\t\t\tpqk += dPQK;\n\n\t\t\t\trayZNear = rayZFar;\n\t\t\t\trayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n\n\t\t\t\thitPixel = permute ? pqk.yx : pqk.xy;\n\t\t\t\thitPixel *= texelSize;\n\n\t\t\t\tintersect = rayIntersectDepth(rayZNear, rayZFar, hitPixel);\n\n\t\t\t\titerationCount += 1.0;\n\n\t\t        // PENDING Right on all platforms?\n\t\t\t\tif (intersect) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t    // Binary search refinement\n\t\t    // FIXME If intersect in first iteration binary search may easily lead to the pixel of reflect object it self\n\t\t\tif (pixStride > 1.0 && intersect && iterationCount > 1.0) {\n\t\t        // Roll back\n\t\t\t\tpqk -= dPQK;\n\t\t\t\tdPQK /= pixStride;\n\n\t\t\t\tfloat originalStride = pixStride * 0.5;\n\t\t\t\tfloat stride = originalStride;\n\n\t\t\t\trayZNear = pqk.z / pqk.w;\n\t\t\t\trayZFar = rayZNear;\n\n\t\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\t\tpqk += dPQK * stride;\n\t\t\t\t\trayZNear = rayZFar;\n\t\t\t\t\trayZFar = (dPQK.z * -0.5 + pqk.z) / (dPQK.w * -0.5 + pqk.w);\n\t\t\t\t\thitPixel = permute ? pqk.yx : pqk.xy;\n\t\t\t\t\thitPixel *= texelSize;\n\n\t\t\t\t\toriginalStride *= 0.5;\n\t\t\t\t\tstride = rayIntersectDepth(rayZNear, rayZFar, hitPixel) ? -originalStride : originalStride;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tQ0.xy += dQ.xy * iterationCount;\n\t\t\tQ0.z = pqk.z;\n\t\t\thitPoint = Q0 / pqk.w;\n\n\t\t\treturn intersect;\n\t\t}\n\n\t\tfloat calculateAlpha(float iterationCount, float reflectivity, vec2 hitPixel, vec3 hitPoint, float dist, vec3 rayDir) {\n\t\t\tfloat alpha = clamp(reflectivity, 0.0, 1.0);\n\t\t    // Fade ray hits that approach the maximum iterations\n\t\t\talpha *= 1.0 - (iterationCount / float(20));\n\t\t    // Fade ray hits that approach the screen edge\n\t\t\tvec2 hitPixelNDC = hitPixel * 2.0 - 1.0;\n\t\t\tfloat maxDimension = min(1.0, max(abs(hitPixelNDC.x), abs(hitPixelNDC.y)));\n\t\t\talpha *= 1.0 - max(0.0, maxDimension - screenEdgeFadeStart) / (1.0 - screenEdgeFadeStart);\n\n\t\t    // Fade ray hits base on how much they face the camera\n\t\t\tfloat _eyeFadeStart = eyeFadeStart;\n\t\t\tfloat _eyeFadeEnd = eyeFadeEnd;\n\t\t\tif (_eyeFadeStart > _eyeFadeEnd) {\n\t\t\t\tfloat tmp = _eyeFadeEnd;\n\t\t\t\t_eyeFadeEnd = _eyeFadeStart;\n\t\t\t\t_eyeFadeStart = tmp;\n\t\t\t}\n\n\t\t\tfloat eyeDir = clamp(rayDir.z, _eyeFadeStart, _eyeFadeEnd);\n\t\t\talpha *= 1.0 - (eyeDir - _eyeFadeStart) / (_eyeFadeEnd - _eyeFadeStart);\n\n\t\t    // Fade ray hits based on distance from ray origin\n\t\t\talpha *= 1.0 - clamp(dist / maxRayDistance, 0.0, 1.0);\n\n\t\t\treturn alpha;\n        }\n        \n        void main() {\n\t\t\tvec4 normalAndGloss = texture2D(gBufferTexture1, vUv);\n\n\t\t    // Is empty\n\t\t\tif (dot(normalAndGloss.rgb, vec3(1.0)) == 0.0) {\n\t\t\t\tdiscard;\n\t\t\t}\n\n\t\t\tfloat g = normalAndGloss.a;\n\t\t\tif (g <= minGlossiness) {\n\t\t\t\tdiscard;\n\t\t\t}\n\n\t\t\tfloat reflectivity = (g - minGlossiness) / (1.0 - minGlossiness);\n\n\t\t\tvec3 N = normalAndGloss.rgb * 2.0 - 1.0;\n            // N = normalize((viewInverseTranspose * vec4(N, 0.0)).xyz);\n            N = normalize(N);\n\n\t\t    // Position in view\n\t\t\tvec4 projectedPos = vec4(vUv * 2.0 - 1.0, fetchDepth(gBufferTexture2, vUv), 1.0);\n\t\t\tvec4 pos = projectionInv * projectedPos;\n\t\t\tvec3 rayOrigin = pos.xyz / pos.w;\n\n\t\t\tvec3 rayDir = normalize(reflect(normalize(rayOrigin), N));\n\t\t\tvec2 hitPixel;\n\t\t\tvec3 hitPoint;\n\t\t\tfloat iterationCount;\n\n\t\t    // Get jitter\n\t\t\tvec2 uv2 = vUv * viewportSize;\n\t\t\tfloat jitter = fract((uv2.x + uv2.y) * 0.25) + jitterOffset;\n\n\t\t\tbool intersect = traceScreenSpaceRay(rayOrigin, rayDir, jitter, hitPixel, hitPoint, iterationCount);\n\n\t\t\tfloat dist = distance(rayOrigin, hitPoint);\n\n\t\t\tfloat alpha = calculateAlpha(iterationCount, reflectivity, hitPixel, hitPoint, dist, rayDir) * float(intersect);\n\n\t\t\tvec3 hitNormal = texture2D(gBufferTexture1, hitPixel).rgb * 2.0 - 1.0;\n            // hitNormal = normalize((viewInverseTranspose * vec4(hitNormal, 0.0)).xyz);\n            hitNormal = normalize(hitNormal);\n\n\t\t    // Ignore the pixel not face the ray\n\t\t    // TODO fadeout ?\n\t\t    // PENDING Can be configured?\n\t\t\tif (dot(hitNormal, rayDir) >= 0.0) {\n\t\t\t\tdiscard;\n\t\t\t}\n\n\t\t    // vec4 color = decodeHDR(texture2DLodEXT(colorTex, hitPixel, clamp(dist / maxRayDistance, 0.0, 1.0) * maxMipmapLevel));\n\n\t\t\tif (!intersect) {\n\t\t\t\tdiscard;\n\t\t\t}\n\n\t\t\tvec4 color = texture2D(colorTex, hitPixel);\n\t\t\tgl_FragColor = vec4(color.rgb * alpha, color.a);\n\n            // gl_FragColor = vec4(vec3(iterationCount / 2.0), 1.0);\n            // gl_FragColor = texture2D(colorTex, vUv);\n\t\t}\n    "
};
An = {
    defines: {
        NORMALTEX_ENABLED: 1,
        DEPTHTEX_ENABLED: 1,
        DEPTH_PACKING: 1
    },
    uniforms: {
        tDiffuse: {
            value: null
        },
        textureSize: {
            value: new THREE.Vector2
        },
        direction: {
            value: 0
        },
        blurSize: {
            value: 1
        },
        depthTex: {
            value: null
        },
        normalTex: {
            value: null
        },
        projection: {
            value: new THREE.Matrix4
        },
        depthRange: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["#include <packing>", "varying vec2 vUv;", "uniform vec2 textureSize;", "uniform float blurSize;", "uniform sampler2D tDiffuse;", "uniform int direction;", "#if NORMALTEX_ENABLED == 1", "uniform sampler2D normalTex;", "vec3 getViewNormal( const in vec2 screenPosition ) {", "return unpackRGBToNormal( texture2D( normalTex, screenPosition ).xyz );", "}", "#endif", "#if DEPTHTEX_ENABLED == 1", "uniform sampler2D depthTex;", "uniform mat4 projection;", "uniform float depthRange;", "float getDepth( const in vec2 screenPosition ) {", "#if DEPTH_PACKING == 1", "return unpackRGBAToDepth( texture2D( depthTex, screenPosition ) );", "#elif DEPTH_PACKING == 2", "return texture2D( depthTex, screenPosition ).w;", "#else", "return texture2D( depthTex, screenPosition ).x;", "#endif", "}", "float getLinearDepth(vec2 coord) {", "float depth = getDepth(coord) * 2.0 - 1.0;", "return projection[3][2] / (depth * projection[2][3] - projection[2][2]);", "}", "#endif", "void main() {", "float kernel[5];", "kernel[0] = 0.122581;", "kernel[1] = 0.233062;", "kernel[2] = 0.288713;", "kernel[3] = 0.233062;", "kernel[4] = 0.122581;", "vec2 off = vec2(0.0);", "if (direction == 0) {", "off[0] = blurSize / textureSize.x;", "}", "else {", "off[1] = blurSize / textureSize.y;", "}", "vec4 sum = vec4(0.0);", "float weightAll = 0.0;", "#if NORMALTEX_ENABLED == 1", "vec3 centerNormal = getViewNormal(vUv);", "#endif", "#if DEPTHTEX_ENABLED == 1", "float centerDepth = getLinearDepth(vUv);", "#endif", "for (int i = 0; i < 5; i++) {", "vec2 coord = clamp(vUv + vec2(float(i) - 2.0) * off, vec2(0.0), vec2(1.0));", "float w = kernel[i];", "#if NORMALTEX_ENABLED == 1", "vec3 normal = getViewNormal(coord);", "w *= clamp(dot(normal, centerNormal), 0.0, 1.0);", "#endif", "#if DEPTHTEX_ENABLED == 1", "float d = getLinearDepth(coord);", "w *= (1.0 - smoothstep(0.0, 1.0, abs(centerDepth - d) / depthRange));", "#endif", "weightAll += w;", "sum += w * texture2D(tDiffuse, coord);", "}", "gl_FragColor = sum / weightAll;", "}"].join("\n")
};
kn = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this._tempRenderTarget = Cn(t, i),
        this._tempRenderTarget2 = Cn(t, i),
        this._ssrPass = new tn(Dn,void 0,"viewportSize"),
        this._ssrPass.material.depthTest = !1,
        this._ssrPass.material.depthWrite = !1,
        this._blurPass = new tn(An,void 0,"textureSize"),
        this._blurPass.material.uniforms.blurSize.value = 2,
        this._blurPass.material.depthTest = !1,
        this._blurPass.material.depthWrite = !1,
        this._ssrPass.setSize(1 / t, 1 / i),
        this._blurPass.setSize(1 / t, 1 / i),
        this.jitter = !1
    }
    return e.prototype.setSize = function(e, t) {
        this._tempRenderTarget.setSize(e, t),
        this._tempRenderTarget2.setSize(e, t),
        this._ssrPass.setSize(1 / e, 1 / t),
        this._blurPass.setSize(1 / e, 1 / t)
    }
    ,
    e.prototype.render = function(e, t, i, r, n, o, s) {
        this._ssrPass.material.uniforms.colorTex.value = e,
        this._ssrPass.material.uniforms.gBufferTexture1.value = t,
        this._ssrPass.material.uniforms.gBufferTexture2.value = i,
        this._ssrPass.material.uniforms.projection.value.copy(n.projectionMatrix),
        this._ssrPass.material.uniforms.projectionInv.value.getInverse(n.projectionMatrix),
        this._ssrPass.material.uniforms.jitterOffset.value = this.jitter ? Math.random() : 0,
        this._blurPass.material.uniforms.normalTex.value = t,
        this._blurPass.material.uniforms.depthTex.value = i,
        this._blurPass.material.uniforms.projection.value.copy(n.projectionMatrix),
        i === t ? this._blurPass.material.defines.DEPTH_PACKING = 2 : i.isDepthTexture ? this._blurPass.material.defines.DEPTH_PACKING = 0 : this._blurPass.material.defines.DEPTH_PACKING = 1,
        this._ssrPass.clearColor.setRGB(0, 0, 0),
        this._ssrPass.clearAlpha = 1,
        this._ssrPass.render(r, this._tempRenderTarget),
        this._blurPass.clearColor.setRGB(0, 0, 0),
        this._blurPass.clearAlpha = 1,
        this._blurPass.clear = !0,
        this._blurPass.material.uniforms.direction.value = 0,
        this._blurPass.material.transparent = !1,
        this._blurPass.render(r, this._tempRenderTarget2, this._tempRenderTarget),
        s ? (this._blurPass.clearColor.setRGB(0, 0, 0),
        this._blurPass.clearAlpha = 1) : this._blurPass.clear = !1,
        this._blurPass.material.uniforms.direction.value = 1,
        this._blurPass.material.transparent = !s,
        this._blurPass.material.blending = s ? THREE.NoBlending : THREE.AdditiveBlending,
        this._blurPass.render(r, void 0 !== o ? o : null, this._tempRenderTarget2)
    }
    ,
    e.prototype.dispose = function() {
        this._tempRenderTarget.dispose(),
        this._tempRenderTarget2.dispose(),
        this._ssrPass.material.dispose(),
        this._blurPass.material.dispose()
    }
    ,
    e
}();
On = function() {
    function e() {
        classCallCheck(this, e),
        this._schemeBuffer,
        this._dirty = !0,
        this.enable = !1,
        this.$enable = !0
    }
    return e.prototype.isActive = function() {
        return this.enable && this.$enable
    }
    ,
    e.prototype.dispose = function() {}
    ,
    e.prototype.setSize = function(e, t) {}
    ,
    e.prototype.render = function(e, t, i, r, n) {}
    ,
    e.prototype.dirty = function() {
        this._dirty = !0
    }
    ,
    e
}();
Bn = 0
    , Fn = 1
    , Ln = 2
    , In = new THREE.Color
    , Nn = function() {
    function e(t, i, n, o) {
        classCallCheck(this, e),
        this.name = n,
        this._mrt = nn(n, t, i, void 0, o),
        this._rt = on(n, t, i),
        this._depthShareType = Bn,
        this.useMRT = !1,
        this.enableLayer1 = !1
    }
    return e.prototype._checkStrategyInited = function(e) {
        return e.materialManager.hasStrategy(this.name)
    }
    ,
    e.prototype._initStrategy = function(e) {}
    ,
    e.prototype.shareDepthTexture = function(e) {
        return this._depthShareType !== Fn && (this._rt.depthTexture = e,
        this._rt.dispose(),
        this._depthShareType = Fn,
        !0)
    }
    ,
    e.prototype.shareDepthRenderBuffer = function(e, t) {
        return (this._depthShareType !== Ln || this._mrt.webglDepthRenderbuffer !== e || this._rt.webglDepthRenderbuffer !== t) && (this._mrt.webglDepthRenderbuffer = e,
        this._rt.webglDepthRenderbuffer = t,
        this._mrt.dispose(),
        this._rt.dispose(),
        this._depthShareType = Ln,
        !0)
    }
    ,
    e.prototype.clearDepthShare = function() {
        return this._depthShareType !== Bn && (this._mrt.webglDepthRenderbuffer = null,
        this._rt.webglDepthRenderbuffer = null,
        this._mrt.dispose(),
        this._rt.dispose(),
        this._depthShareType = Bn,
        !0)
    }
    ,
    e.prototype.setSize = function(e, t) {
        this._mrt.setSize(e, t),
        this._rt.setSize(e, t)
    }
    ,
    e.prototype.render = function(e, t, i) {
        this._checkStrategyInited(e) || this._initStrategy(e),
        In.copy(e.getClearColor());
        var r = e.getClearAlpha()
            , n = e.autoClear;
        e.autoClear = !1,
        e.setClearColor(0, 0),
        e.materialManager.setMode(this.name),
        this.depthShared && (e.state.buffers.depth.setMask(!1),
        e.state.buffers.depth.setLocked(!0));
        var o = t.autoUpdate
            , s = t.background
            , a = e.shadowMap.enable;
        t.autoUpdate = !1,
        t.background = null,
        e.shadowMap.enable = !1,
        e.initRenderList = !1,
        e.renderCustom1 = !1,
        this.enableLayer1 && i.layers.enable(1),
        e.setRenderTarget(this.useMRT ? this._mrt : this._rt),
        e.clear(!0, !this.depthShared, !0),
        e.render(t, i),
        this.enableLayer1 && i.layers.disable(1),
        t.autoUpdate = o,
        t.background = s,
        e.shadowMap.enable = a,
        e.initRenderList = !0,
        e.renderCustom1 = !0,
        this.depthShared && e.state.buffers.depth.setLocked(!1),
        e.materialManager.setMode(0),
        e.autoClear = n,
        e.setClearColor(In, r)
    }
    ,
    e.prototype.setupRenderTarget = function(e) {
        e.setRenderTarget(this.useMRT ? this._mrt : this._rt)
    }
    ,
    e.prototype.getSchemeTexture = function() {
        return this.useMRT ? this._mrt.texture : this._rt.texture
    }
    ,
    e.prototype.dispose = function() {
        this._mrt.dispose(),
        this._rt.dispose()
    }
    ,
    _createClass(e, [{
        key: "depthShared",
        get: function() {
            return this._depthShareType !== Bn
        }
    }, {
        key: "depthShareType",
        get: function() {
            return this._depthShareType
        }
    }]),
    e
}();
Hn = 0
    , Un = function(e) {
    function t(i, n, o, a) {
        classCallCheck(this, t);
        var l = s(this, e.call(this, i, n, wn(o) + "Scheme_" + ++Hn, a));
        return l.marker = o,
        l
    }
    return o(t, e),
    t.prototype._initStrategy = function(e) {
        var t = this;
        e.materialManager.addStrategy(this.name, (function(e, i, r, n, o, s) {
            if (pn(this, o))
                return null;
            var a = hn(this.technique, t.marker);
            if ("skip" === a)
                return null;
            var l = void 0
                , u = !1;
            if (a) {
                if (!a.isMaterial)
                    return o;
                l = a,
                u = !0
            } else {
                if (t.depthShared)
                    return null;
                l = un(this, o)
            }
            return cn(l, o, u),
            l
        }
        ))
    }
    ,
    t
}(Nn);
zn = function(e) {
    function t(i, n, o, a) {
        var l;
        classCallCheck(this, t),
        l = Array.isArray(o) ? o.map((function(e) {
            return wn(e)
        }
        )).join("") : wn(o);
        var u = s(this, e.call(this, i, n, l, a));
        return u.marker = o,
        u
    }
    return o(t, e),
    t.prototype._initStrategy = function(e) {
        var t = this;
        Array.isArray(t.marker) ? e.materialManager.addStrategy(this.name, (function(e, i, r, n, o, s) {
            if (pn(this, o))
                return null;
            for (var a = void 0, l = 0, u = t.marker.length; l < u; l++) {
                var c = hn(this.technique, t.marker[l]);
                if (c && "skip" != c && "0" != c) {
                    a = c;
                    break
                }
                if (l === u - 1) {
                    a = c;
                    break
                }
            }
            if ("skip" === a)
                return null;
            if (a)
                return a.isMaterial ? a : "number" != typeof a || isNaN(a) || 1 === a ? o : Wn(o, a);
            if (t.depthShared)
                return null;
            var h = un(this, o);
            return cn(h, o),
            h
        }
        )) : e.materialManager.addStrategy(this.name, (function(e, i, r, n, o, s) {
            if (pn(this, o))
                return null;
            var a = hn(this.technique, t.marker);
            if ("skip" === a)
                return null;
            if (a)
                return a.isMaterial ? a : "number" != typeof a || isNaN(a) || 1 === a ? o : Wn(o, a);
            if (t.depthShared)
                return null;
            var l = un(this, o);
            return cn(l, o),
            l
        }
        ))
    }
    ,
    t
}(Un);
Vn = new Map;
function Wn(e, t) {
    var i = e.uuid + "_" + t
        , r = Vn.get(i);
    return r || (e.addEventListener("dispose", Gn),
    (r = e.clone()).isShaderMaterial && r.uniforms.strength ? r.uniforms.strength.value = t : (t < 1 ? e.transparent ? (r.opacity = t,
    r.defines && (r.defines.PREMULTIPLIED_ALPHA = !0),
    r.blending = THREE.CustomBlending,
    r.blendEquation = THREE.AddEquation,
    r.blendSrc = THREE.OneFactor,
    r.blendDst = THREE.ZeroFactor,
    r.blendSrcAlpha = THREE.ZeroFactor,
    r.blendDstAlpha = THREE.OneFactor) : r.color ? (r.color.r *= t,
    r.color.g *= t,
    r.color.b *= t) : console.warn("strengthMat is not transparent and does not have color attribute") : r.color ? (r.color.r *= t,
    r.color.g *= t,
    r.color.b *= t) : console.warn("strengthMat does not have color attribute"),
    r.envMap = null),
    Vn.set(i, r)),
    r
}
function Gn(e) {
    var t = e.target;
    t.removeEventListener("dispose", Gn);
    var i = [];
    Vn.forEach((function(e, r) {
        r.indexOf(t.uuid) > -1 && i.push(r)
    }
    )),
    i.forEach((function(e) {
        Vn.get(e).dispose(),
        Vn.delete(e)
    }
    ))
}
var qn = {
    shaderID: "luminosityHighPass",
    uniforms: {
        tDiffuse: {
            type: "t",
            value: null
        },
        luminosityThreshold: {
            type: "f",
            value: 1
        },
        smoothWidth: {
            type: "f",
            value: 1
        },
        defaultColor: {
            type: "c",
            value: new THREE.Color(0)
        },
        defaultOpacity: {
            type: "f",
            value: 0
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec3 defaultColor;", "uniform float defaultOpacity;", "uniform float luminosityThreshold;", "uniform float smoothWidth;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "vec3 luma = vec3( 0.299, 0.587, 0.114 );", "float v = dot( texel.xyz, luma );", "vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );", "float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );", "gl_FragColor = mix( outputColor, texel, alpha );", "}"].join("\n")
};
Xn = {
    defines: {
        KERNEL_RADIUS: 7,
        SIGMA: 7
    },
    uniforms: {
        colorTexture: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(.5,.5)
        },
        direction: {
            value: new THREE.Vector2(.5,.5)
        }
    },
    vertexShader: "varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",
    fragmentShader: "#include <common>        varying vec2 vUv;\n        uniform sampler2D colorTexture;\n        uniform vec2 texSize;        uniform vec2 direction;                float gaussianPdf(in float x, in float sigma) {            return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;        }        void main() {\n            vec2 invSize = 1.0 / texSize;            float fSigma = float(SIGMA);            float weightSum = gaussianPdf(0.0, fSigma);            vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;            for( int i = 1; i < KERNEL_RADIUS; i ++ ) {                float x = float(i);                float w = gaussianPdf(x, fSigma);                vec2 uvOffset = direction * invSize * x;                vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;                vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;                diffuseSum += (sample1 + sample2) * w;                weightSum += 2.0 * w;            }            gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n        }"
};
Jn = {
    defines: {
        NUM_MIPS: 5
    },
    uniforms: {
        blurTexture1: {
            value: null
        },
        blurTexture2: {
            value: null
        },
        blurTexture3: {
            value: null
        },
        blurTexture4: {
            value: null
        },
        blurTexture5: {
            value: null
        },
        dirtTexture: {
            value: null
        },
        bloomStrength: {
            value: 1
        },
        bloomFactors: {
            value: null
        },
        bloomTintColors: {
            value: null
        },
        bloomRadius: {
            value: 0
        }
    },
    vertexShader: "varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",
    fragmentShader: "varying vec2 vUv;        uniform sampler2D blurTexture1;        uniform sampler2D blurTexture2;        uniform sampler2D blurTexture3;        uniform sampler2D blurTexture4;        uniform sampler2D blurTexture5;        uniform sampler2D dirtTexture;        uniform float bloomStrength;        uniform float bloomRadius;        uniform float bloomFactors[NUM_MIPS];        uniform vec3 bloomTintColors[NUM_MIPS];                float lerpBloomFactor(const in float factor) {             float mirrorFactor = 1.2 - factor;            return mix(factor, mirrorFactor, bloomRadius);        }                void main() {            gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +                                                 lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +                                                 lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +                                                 lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +                                                 lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );        }"
};
Yn = new THREE.Vector2(1,0);
Qn = new THREE.Vector2(0,1);
Zn = function(e) {
    function t(i, n, o, a) {
        classCallCheck(this, t);
        var l = s(this, e.call(this));
        l.strength = 1.5,
        l.radius = .4,
        l.threshold = .2,
        l._schemeBuffer = new zn(i,n,o || "glow",a),
        l.renderTargetsHorizontal = [],
        l.renderTargetsVertical = [],
        l.nMips = 5;
        var u = 0
            , c = Math.round(i / 2)
            , h = Math.round(n / 2);
        for (l.renderTargetBright = Cn(c, h),
        l.renderTargetBright.texture.name = "GlowPass.bright",
        u = 0; u < l.nMips; u++) {
            var p = Cn(c, h);
            p.texture.name = "GlowPass.h" + u,
            l.renderTargetsHorizontal.push(p);
            var d = Cn(c, h);
            d.texture.name = "GlowPass.v" + u,
            l.renderTargetsVertical.push(d),
            c = Math.round(c / 2),
            h = Math.round(h / 2)
        }
        l.highPass = new tn(qn),
        l.highPass.clearAlpha = 0,
        l.highPass.uniforms.luminosityThreshold.value = l.threshold,
        l.highPass.uniforms.smoothWidth.value = .01,
        l.separableBlurPasses = [];
        var f = [3, 5, 7, 9, 11];
        for (c = Math.round(i / 2),
        h = Math.round(n / 2),
        u = 0; u < l.nMips; u++) {
            var m = new tn(Xn);
            m.clearAlpha = 0,
            m.material.defines.KERNEL_RADIUS = f[u],
            m.material.defines.SIGMA = f[u],
            m.uniforms.texSize.value.set(c, h),
            l.separableBlurPasses.push(m),
            c = Math.round(c / 2),
            h = Math.round(h / 2)
        }
        l.compositePass = new tn(Jn),
        l.compositePass.clearAlpha = 0,
        l.compositePass.material.defines.NUM_MIPS = 5,
        l.compositePass.uniforms.blurTexture1.value = l.renderTargetsVertical[0].texture,
        l.compositePass.uniforms.blurTexture2.value = l.renderTargetsVertical[1].texture,
        l.compositePass.uniforms.blurTexture3.value = l.renderTargetsVertical[2].texture,
        l.compositePass.uniforms.blurTexture4.value = l.renderTargetsVertical[3].texture,
        l.compositePass.uniforms.blurTexture5.value = l.renderTargetsVertical[4].texture,
        l.compositePass.uniforms.bloomStrength.value = l.strength,
        l.compositePass.uniforms.bloomRadius.value = .1;
        return l.compositePass.uniforms.bloomFactors.value = [1, .8, .6, .4, .2],
        l.bloomTintColors = [new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1)],
        l.compositePass.uniforms.bloomTintColors.value = l.bloomTintColors,
        l.copyPass = new tn(Yr),
        l.copyPass.clearAlpha = 0,
        l.copyPass.clear = !1,
        l.copyPass.uniforms.opacity.value = 1,
        l.copyPass.material.blending = THREE.CustomBlending,
        l.copyPass.material.blendSrc = THREE.SrcAlphaFactor,
        l.copyPass.material.blendDst = THREE.OneFactor,
        l.copyPass.material.blendEquation = THREE.AddEquation,
        l.copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        l.copyPass.material.blendDstAlpha = THREE.OneFactor,
        l.copyPass.material.blendEquationAlpha = THREE.AddEquation,
        l.copyPass.material.depthTest = !1,
        l.copyPass.material.depthWrite = !1,
        l.copyPass.material.transparent = !0,
        l
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose();
        for (var e = 0; e < this.renderTargetsHorizontal.length; e++)
            this.renderTargetsHorizontal[e].dispose();
        for (e = 0; e < this.renderTargetsVertical.length; e++)
            this.renderTargetsVertical[e].dispose();
        this.renderTargetBright.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t);
        var i = Math.round(e / 2)
            , r = Math.round(t / 2);
        this.renderTargetBright.setSize(i, r);
        for (var n = 0; n < this.nMips; n++)
            this.renderTargetsHorizontal[n].setSize(i, r),
            this.renderTargetsVertical[n].setSize(i, r),
            this.separableBlurPasses[n].uniforms.texSize.value.set(i, r),
            i = Math.round(i / 2),
            r = Math.round(r / 2)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        if (this._dirty) {
            this._schemeBuffer.useMRT = n,
            this._schemeBuffer.render(e, t, i),
            this.highPass.uniforms.tDiffuse.value = this._schemeBuffer.getSchemeTexture(),
            this.highPass.uniforms.luminosityThreshold.value = this.threshold,
            this.highPass.render(e, this.renderTargetBright);
            for (var o = this.renderTargetBright, s = 0; s < this.nMips; s++)
                this.separableBlurPasses[s].uniforms.colorTexture.value = o.texture,
                this.separableBlurPasses[s].uniforms.direction.value.copy(Yn),
                this.separableBlurPasses[s].render(e, this.renderTargetsHorizontal[s]),
                this.separableBlurPasses[s].uniforms.colorTexture.value = this.renderTargetsHorizontal[s].texture,
                this.separableBlurPasses[s].uniforms.direction.value.copy(Qn),
                this.separableBlurPasses[s].render(e, this.renderTargetsVertical[s]),
                o = this.renderTargetsVertical[s];
            this.compositePass.uniforms.bloomStrength.value = this.strength,
            this.compositePass.uniforms.bloomRadius.value = this.radius,
            this.compositePass.uniforms.bloomTintColors.value = this.bloomTintColors,
            this.compositePass.render(e, this.renderTargetsHorizontal[0]),
            this._dirty = !1
        }
        this.copyPass.render(e, r, this.renderTargetsHorizontal[0])
    }
    ,
    t
}(On);
Kn = {
    uniforms: {
        tDiffuse1: {
            value: null
        },
        tDiffuse2: {
            value: null
        },
        mixRatio: {
            value: .5
        },
        opacity: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform float opacity;", "uniform float mixRatio;", "uniform sampler2D tDiffuse1;", "uniform sampler2D tDiffuse2;", "varying vec2 vUv;", "void main() {", "vec4 texel1 = texture2D( tDiffuse1, vUv );", "vec4 texel2 = texture2D( tDiffuse2, vUv );", "gl_FragColor = opacity * mix( texel1, texel2, mixRatio );", "}"].join("\n")
};
$n = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        v: {
            value: 1 / 512
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float v;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n")
};
eo = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        h: {
            value: 1 / 512
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float h;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n")
};
to = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        a.strength = 1,
        a.blendRate = .7,
        a.blurSize = 1,
        a._schemeBuffer = new zn(i,n,"lineBloom",o),
        a.renderTargetsHorizontal = [],
        a.renderTargetsVertical = [],
        a.nMips = 6;
        for (var l = i, u = n, c = 0; c < a.nMips; c++) {
            var h = Cn(l, u);
            h.texture.name = "LineBloomPass.h" + c,
            a.renderTargetsHorizontal.push(h);
            var p = Cn(l, u);
            p.texture.name = "LineBloomPass.v" + c,
            a.renderTargetsVertical.push(p),
            l = Math.round(l / 2),
            u = Math.round(u / 2)
        }
        return a._downSamplePass = new tn(io),
        a._brightPass = new tn(ro),
        a._blurXPass = new tn(eo),
        a._blurYPass = new tn($n),
        a._blendPass = new tn(Kn),
        a._copyPass = new tn(Yr),
        a._copyPass.clearAlpha = 0,
        a._copyPass.clear = !1,
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.material.blending = THREE.CustomBlending,
        a._copyPass.material.blendSrc = THREE.OneFactor,
        a._copyPass.material.blendDst = THREE.OneFactor,
        a._copyPass.material.blendEquation = THREE.AddEquation,
        a._copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        a._copyPass.material.blendDstAlpha = THREE.OneFactor,
        a._copyPass.material.blendEquationAlpha = THREE.AddEquation,
        a._copyPass.material.depthTest = !1,
        a._copyPass.material.depthWrite = !1,
        a._copyPass.material.transparent = !0,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose();
        for (var e = 0; e < this.renderTargetsHorizontal.length; e++)
            this.renderTargetsHorizontal[e].dispose();
        for (e = 0; e < this.renderTargetsVertical.length; e++)
            this.renderTargetsVertical[e].dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t);
        for (var i = e, r = t, n = 0; n < this.nMips; n++)
            this.renderTargetsHorizontal[n].setSize(i, r),
            this.renderTargetsVertical[n].setSize(i, r),
            i = Math.round(i / 2),
            r = Math.round(r / 2)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        if (this._dirty) {
            this._schemeBuffer.useMRT = n,
            this._schemeBuffer.render(e, t, i),
            this._downSamplePass.uniforms.tDiffuse.value = this._schemeBuffer.getSchemeTexture(),
            this._downSamplePass.uniforms.texSize.value.set(this.renderTargetsHorizontal[0].width, this.renderTargetsHorizontal[0].height),
            this._downSamplePass.render(e, this.renderTargetsHorizontal[1]),
            this._brightPass.render(e, this.renderTargetsVertical[1], this.renderTargetsHorizontal[1]);
            for (var o = 2; o < this.nMips; o++)
                this._downSamplePass.uniforms.texSize.value.set(this.renderTargetsVertical[o - 1].width, this.renderTargetsVertical[o - 1].height),
                this._downSamplePass.render(e, this.renderTargetsVertical[o], this.renderTargetsVertical[o - 1]);
            for (var s = 0; s < this.nMips - 1; s++)
                this._blurXPass.uniforms.h.value = 2 * this.blurSize / this.renderTargetsHorizontal[s].width,
                this._blurXPass.render(e, this.renderTargetsHorizontal[s], this.renderTargetsVertical[s + 1]);
            for (var a = 0; a < this.nMips - 1; a++)
                this._blurYPass.uniforms.v.value = 2 * this.blurSize / this.renderTargetsVertical[a].height,
                this._blurYPass.render(e, this.renderTargetsVertical[a], this.renderTargetsHorizontal[a]);
            for (var l = this.nMips - 2; l >= 0; l--)
                this._blendPass.uniforms.tDiffuse1.value = this.renderTargetsVertical[l].texture,
                this._blendPass.uniforms.tDiffuse2.value = this.renderTargetsVertical[l + 1].texture,
                this._blendPass.uniforms.mixRatio.value = this.blendRate,
                this._blendPass.uniforms.opacity.value = this.strength,
                this._blendPass.render(e, this.renderTargetsHorizontal[l]);
            this._dirty = !1
        }
        this._copyPass.render(e, r, this.renderTargetsHorizontal[0])
    }
    ,
    t
}(On);
io = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(512,512)
        }
    },
    vertexShader: "\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}\n    ",
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 texSize;\n\t\t\n\t\tvoid main() {\n    \t\tvec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / texSize.xyxy;\n\t\t\tgl_FragColor = (texture2D(tDiffuse, vUv + d.xy) +\n\t\t\t\ttexture2D(tDiffuse, vUv + d.zy) +\n\t\t\t\ttexture2D(tDiffuse, vUv + d.xw) +\n\t\t\t\ttexture2D(tDiffuse, vUv + d.zw)) * 0.25;\n\t\t}\n\t"
};
ro = {
    uniforms: {
        tDiffuse: {
            value: null
        },
        scale: {
            value: 4
        }
    },
    vertexShader: "\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}\n    ",
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float scale;\n\t\t\n\t\tvoid main() {\n\t\t\tgl_FragColor = texture2D(tDiffuse, vUv) * scale;\n\t\t}\n\t"
};
no = {
    uniforms: {
        scene: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(1,1)
        },
        Stride: {
            value: 10
        }
    },
    vertexShader: "\n\tvarying vec2 vUv;\n\tvoid main() {\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t}\n    ",
    fragmentShader: "\n\t#define WT9_0 1.0\n\t#define WT9_1 0.8\n\t#define WT9_2 0.6\n\t#define WT9_3 0.4\n\t#define WT9_4 0.2\n\t#define WT9_NORMALIZE 5.2\n\tvarying vec2 vUv;\n\tuniform sampler2D scene;\n\tuniform vec2 texSize;\n\tuniform float Stride;\n\tvoid main() {\n\t\tfloat TexelIncrement =0.25 * Stride /texSize.x;\n\n\t\tfloat colour = texture2D(scene,vec2(vUv.x + TexelIncrement, vUv.y) ).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +4.0 * TexelIncrement, vUv.y)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tTexelIncrement =0.5 * Stride /texSize.x;\n\t\tcolour += texture2D(scene,vec2(vUv.x + TexelIncrement, vUv.y) ).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +4.0 * TexelIncrement, vUv.y)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tTexelIncrement =0.75 * Stride /texSize.x;\n\t\tcolour += texture2D(scene,vec2(vUv.x + TexelIncrement, vUv.y) ).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +4.0 * TexelIncrement, vUv.y)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tTexelIncrement =Stride /texSize.x;\n\t\tcolour += texture2D(scene,vec2(vUv.x + TexelIncrement, vUv.y) ).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x +4.0 * TexelIncrement, vUv.y)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tfloat col = 1.0-colour*0.25;\n\n\t\tgl_FragColor = vec4(col,col,col,col);\n\t}\n    "
};
oo = {
    uniforms: {
        blurX: {
            value: null
        },
        scene: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(1,1)
        },
        Stride: {
            value: 10
        },
        Glowness: {
            value: 2
        },
        GlowColor: {
            value: new THREE.Vector4(1,0,0,1)
        }
    },
    vertexShader: "\n\tvarying vec2 vUv;\n\tvoid main() {\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t}\n\t",
    fragmentShader: "\n\t#define WT9_0 1.0\n\t#define WT9_1 0.8\n\t#define WT9_2 0.6\n\t#define WT9_3 0.4\n\t#define WT9_4 0.2\n\t#define WT9_NORMALIZE 5.2\n\tvarying vec2 vUv;\n\tuniform vec2 texSize;\n\tuniform float Stride;\n\tuniform float Glowness;\n\tuniform vec4 GlowColor;\n\tuniform sampler2D blurX;\n\tuniform sampler2D scene;\n\tvoid main() {\n\n\t\tfloat TexelIncrement = 0.25 * Stride / texSize.y;\n\n\t\tfloat colour = texture2D(blurX, vec2(vUv.x , vUv.y+TexelIncrement)).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y +2.0 * TexelIncrement)).x* (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+3.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+4.0 * TexelIncrement)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 1.0 * TexelIncrement)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).x* (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 4.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tTexelIncrement = 0.5 * Stride / texSize.y;\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+TexelIncrement)).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y +2.0 * TexelIncrement)).x* (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+3.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+4.0 * TexelIncrement)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 1.0 * TexelIncrement)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).x* (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 4.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tTexelIncrement = 0.75 * Stride / texSize.y;\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+TexelIncrement)).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y +2.0 * TexelIncrement)).x* (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+3.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+4.0 * TexelIncrement)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 1.0 * TexelIncrement)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).x* (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 4.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tTexelIncrement = Stride / texSize.y;\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+TexelIncrement)).x * (0.8/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y +2.0 * TexelIncrement)).x* (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+3.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y+4.0 * TexelIncrement)).x * (WT9_4/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y)).x * (WT9_0/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 1.0 * TexelIncrement)).x * (WT9_1/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).x * (WT9_2/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).x* (WT9_3/WT9_NORMALIZE);\n\t\tcolour += texture2D(blurX, vec2(vUv.x , vUv.y- 4.0 * TexelIncrement)).x * (WT9_3/WT9_NORMALIZE);\n\n\t\tvec4 glo = (0.25 * Glowness * colour) * GlowColor;\n\t\tvec4 OldCol = texture2D(scene, vec2(vUv.x , vUv.y));\n\t\t\n\t\tgl_FragColor = vec4(OldCol.x*glo.xyz,1);\n\t}\n\t"
};
so = sn(1, 1, 1);
ao = new Map;
var lo = 0
    , uo = function(e) {
    function t(i, n, o, a) {
        classCallCheck(this, t);
        var l = s(this, e.call(this, i, n, wn(o) + "Scheme_" + ++lo, a));
        return l.marker = o,
        l
    }
    return o(t, e),
    t.prototype._initStrategy = function(e) {
        var t = this;
        e.materialManager.addStrategy(this.name, (function(e, i, r, n, o, s) {
            if (pn(this, o))
                return null;
            var a = hn(this.technique, t.marker);
            if ("skip" === a)
                return null;
            var l = void 0
                , u = !1;
            if (a)
                l = a.isMaterial ? a : function(e, t) {
                    var i = e.isInstancedMesh + "_" + t.skinning
                        , r = void 0;
                    return ao.has(i) ? r = ao.get(i) : ((r = new THREE.ShaderMaterial(so)).skinning = t.skinning,
                    ao.set(i, r)),
                    r
                }(this, o),
                u = !0;
            else {
                if (t.depthShared)
                    return null;
                l = un(this, o)
            }
            return cn(l, o, u),
            l
        }
        ))
    }
    ,
    t
}(Nn);
co = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        return a.color = new THREE.Vector4(1,0,0,1),
        a.strength = 2,
        a.stride = 10,
        a._schemeBuffer = new uo(i,n,"innerGlow",o),
        a.tempRenderTarget = Cn(i, n),
        a.tempRenderTarget.texture.name = "InnerGlowPass.temp",
        a.resultRenderTarget = Cn(i, n),
        a.resultRenderTarget.texture.name = "InnerGlowPass.result",
        a._blurXPass = new tn(no),
        a._blurXPass.uniforms.texSize.value.set(i, n),
        a._blurYPass = new tn(oo),
        a._blurYPass.uniforms.texSize.value.set(i, n),
        a._copyPass = new tn(Yr),
        a._copyPass.clear = !1,
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.uniforms.tDiffuse.value = a.resultRenderTarget.texture,
        a._copyPass.material.blending = THREE.CustomBlending,
        a._copyPass.material.blendSrc = THREE.SrcAlphaFactor,
        a._copyPass.material.blendDst = THREE.OneFactor,
        a._copyPass.material.blendEquation = THREE.AddEquation,
        a._copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        a._copyPass.material.blendDstAlpha = THREE.OneFactor,
        a._copyPass.material.blendEquationAlpha = THREE.AddEquation,
        a._copyPass.material.depthTest = !1,
        a._copyPass.material.depthWrite = !1,
        a._copyPass.material.transparent = !0,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose(),
        this.tempRenderTarget.dispose(),
        this.resultRenderTarget.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t),
        this.tempRenderTarget.setSize(e, t),
        this.resultRenderTarget.setSize(e, t),
        this._blurXPass.uniforms.texSize.value.set(e, t),
        this._blurYPass.uniforms.texSize.value.set(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._dirty && (this._schemeBuffer.useMRT = n,
        this._schemeBuffer.render(e, t, i),
        this._blurXPass.uniforms.scene.value = this._schemeBuffer.getSchemeTexture(),
        this._blurXPass.uniforms.Stride.value = this.stride,
        this._blurXPass.render(e, this.tempRenderTarget),
        this._blurYPass.uniforms.blurX.value = this.tempRenderTarget.texture,
        this._blurYPass.uniforms.scene.value = this._schemeBuffer.getSchemeTexture(),
        this._blurYPass.uniforms.Stride.value = this.stride,
        this._blurYPass.uniforms.Glowness.value = this.strength,
        this._blurYPass.uniforms.GlowColor.value.copy(this.color),
        this._blurYPass.render(e, this.resultRenderTarget),
        this._dirty = !1),
        this._copyPass.render(e, void 0 !== r ? r : null)
    }
    ,
    t
}(On);
ho = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        return a._schemeBuffer = new Un(i,n,"radialBlur",o),
        a.resultRenderTarget = Cn(i, n),
        a.resultRenderTarget.texture.name = "RadialBlurPass.result",
        a._blurPass = new tn(po),
        a._copyPass = new tn(Yr),
        a._copyPass.clear = !1,
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.uniforms.tDiffuse.value = a.resultRenderTarget.texture,
        a._copyPass.material.blending = THREE.CustomBlending,
        a._copyPass.material.blendSrc = THREE.OneFactor,
        a._copyPass.material.blendDst = THREE.OneFactor,
        a._copyPass.material.blendEquation = THREE.AddEquation,
        a._copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        a._copyPass.material.blendDstAlpha = THREE.OneFactor,
        a._copyPass.material.blendEquationAlpha = THREE.AddEquation,
        a._copyPass.material.depthTest = !1,
        a._copyPass.material.depthWrite = !1,
        a._copyPass.material.transparent = !0,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose(),
        this.resultRenderTarget.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t),
        this.resultRenderTarget.setSize(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._dirty && (this._schemeBuffer.useMRT = n,
        this._schemeBuffer.render(e, t, i),
        this._blurPass.uniforms.blurMap.value = this._schemeBuffer.getSchemeTexture(),
        this._blurPass.render(e, this.resultRenderTarget),
        this._dirty = !1),
        this._copyPass.render(e, void 0 !== r ? r : null)
    }
    ,
    t
}(On);
po = {
    uniforms: {
        blurMap: {
            value: null
        },
        BlurStart: {
            value: 1
        },
        BlurWidth: {
            value: -.1
        },
        direction: {
            value: new THREE.Vector2(0,1)
        },
        Intensity: {
            value: 10
        },
        GlowGamma: {
            value: .8
        },
        CX: {
            value: .5
        },
        CY: {
            value: .5
        }
    },
    vertexShader: "\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}\n    ",
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D blurMap;\n\t\tuniform float BlurStart;\n\t\tuniform float BlurWidth;\n\t\tuniform vec2 direction;\n\t\tuniform float Intensity;\n\t\tuniform float GlowGamma;\n\t\tuniform float CX;\n\t\tuniform float CY;\n\n\t\tvoid main() {\n\t\t\tvec2 texCoord = vUv;\n\t\t\tvec2 ctrPt = vec2(CX,CY);\n\t\t\tvec4 blurred = texture2D(blurMap, texCoord);\n\t\t\tvec2 resCoord = vec2(0.0);\n\t\t\tfor(float i=0.0; i<31.0; i++) {\n\t\t\t\tfloat scale = BlurStart + BlurWidth*((31.0-i)/(31.0-1.0));\n\t\t\t\tvec2 tmp = texCoord*scale;\n\t\t\t\tresCoord = mix(texCoord, tmp, direction);\n\t\t\t\tvec4 tmpc = texture2D(blurMap, resCoord )*(i/31.0)*(i/31.0);\n\t\t\t\tblurred += tmpc/31.0;\n\t\t\t}\n\n\t\t\tblurred.r = pow(blurred.r,GlowGamma);\n\t\t\tblurred.g = pow(blurred.g,GlowGamma);\n\t\t\tblurred.b = pow(blurred.b,GlowGamma);\n\t\t\tblurred.rgb *= Intensity;\n\t\t\tblurred.rgb = clamp(blurred.rgb, 0.0, 1.0);\n\n\t\t\tvec4 origTex = texture2D(blurMap, texCoord  );\n\t\t\tvec4 blurResult=origTex+blurred;\n\t\t\t//blurResult *= 2;\n\n\t\t\tvec2 dir=texCoord - ctrPt;\n\t\t\tfloat dist = sqrt( dir.x*dir.x + dir.y*dir.y );\n\t\t\tfloat t = dist * 1.0;\n\t\t\tt =  clamp(t, 0.0, 1.0);//We need 0 <= t <= 1\n\n\t\t\tgl_FragColor = blurResult*t;\n\t\t}\n\t"
};
fo = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        return a._schemeBuffer = new Un(i,n,"radialBlur2",o),
        a.resultRenderTarget = Cn(i, n),
        a.resultRenderTarget.texture.name = "RadialBlur2Pass.result",
        a._blurPass = new tn(mo),
        a._copyPass = new tn(Yr),
        a._copyPass.clear = !1,
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.uniforms.tDiffuse.value = a.resultRenderTarget.texture,
        a._copyPass.material.blending = THREE.CustomBlending,
        a._copyPass.material.blendSrc = THREE.OneFactor,
        a._copyPass.material.blendDst = THREE.OneFactor,
        a._copyPass.material.blendEquation = THREE.AddEquation,
        a._copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        a._copyPass.material.blendDstAlpha = THREE.OneFactor,
        a._copyPass.material.blendEquationAlpha = THREE.AddEquation,
        a._copyPass.material.depthTest = !1,
        a._copyPass.material.depthWrite = !1,
        a._copyPass.material.transparent = !0,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose(),
        this.resultRenderTarget.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t),
        this.resultRenderTarget.setSize(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._dirty && (this._schemeBuffer.useMRT = n,
        this._schemeBuffer.render(e, t, i),
        this._blurPass.uniforms.blurMap.value = this._schemeBuffer.getSchemeTexture(),
        this._blurPass.render(e, this.resultRenderTarget),
        this._dirty = !1),
        this._copyPass.render(e, void 0 !== r ? r : null)
    }
    ,
    t
}(On);
mo = {
    uniforms: {
        blurMap: {
            value: null
        },
        BlurStart: {
            value: 1
        },
        BlurWidth: {
            value: -.1
        },
        Intensity: {
            value: 10
        },
        GlowGamma: {
            value: .8
        },
        CX: {
            value: .5
        },
        CY: {
            value: .5
        }
    },
    vertexShader: "\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}\n    ",
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D blurMap;\n\t\tuniform float BlurStart;\n\t\tuniform float BlurWidth;\n\t\tuniform float CX;\n\t\tuniform float CY;\n\t\tuniform float Intensity;\n\t\tuniform float GlowGamma;\n\t\t\n\t\tvoid main() {\n\t\t\tvec2 texCoord = vUv;\n\t\t\tvec2 ctrPt = vec2(CX,CY);\n\t\t\tvec4 blurred = texture2D(blurMap, texCoord );\n\t\t\n\t\t\tfor(float i=0.0; i<31.0; i++) {\n\t\t\t\tfloat scale = BlurStart + BlurWidth*((31.0-i)/(31.0-1.0));\n\t\t\t\tvec2 tmp = (texCoord - ctrPt)*scale + ctrPt;\n\t\t\t\tvec4 tmpc = texture2D(blurMap, tmp )*(i/31.0)*(i/31.0);\n\t\t\n\t\t\t\tblurred += tmpc/31.0;\n\t\t\n\t\t\t}\n\t\t\n\t\t\tblurred.r = pow(blurred.r,GlowGamma);\n\t\t\tblurred.g = pow(blurred.g,GlowGamma);\n\t\t\tblurred.b = pow(blurred.b,GlowGamma);\n\t\t\tblurred.rgb *= Intensity;\n\t\t\tblurred.rgb = clamp(blurred.rgb, 0.0, 1.0);\n\t\t\n\t\t\tvec4 origTex = texture2D(blurMap, texCoord  );\n\t\t\tvec4 blurResult=origTex+blurred;\n\t\t\t//blurResult *= 2;\n\t\t\n\t\t\tvec2 dir=texCoord - ctrPt;\n\t\t\tfloat dist = sqrt( dir.x*dir.x + dir.y*dir.y );\n\t\t\tfloat t = dist * 1.0;\n\t\t\tt =  clamp(t, 0.0, 1.0);//We need 0 <= t <= 1\n\t\t\n\t\t\tgl_FragColor = blurResult*t;\n\t\t}\n\t"
};
go = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        return a._schemeBuffer = new Un(i,n,"radialOffset",o),
        a.resultRenderTarget = Cn(i, n),
        a.resultRenderTarget.texture.name = "RadialOffsetPass.result",
        a._blurPass = new tn(vo),
        a._copyPass = new tn(Yr),
        a._copyPass.clear = !1,
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.uniforms.tDiffuse.value = a.resultRenderTarget.texture,
        a._copyPass.material.blending = THREE.CustomBlending,
        a._copyPass.material.blendSrc = THREE.OneFactor,
        a._copyPass.material.blendDst = THREE.OneFactor,
        a._copyPass.material.blendEquation = THREE.AddEquation,
        a._copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        a._copyPass.material.blendDstAlpha = THREE.OneFactor,
        a._copyPass.material.blendEquationAlpha = THREE.AddEquation,
        a._copyPass.material.depthTest = !1,
        a._copyPass.material.depthWrite = !1,
        a._copyPass.material.transparent = !0,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose(),
        this.resultRenderTarget.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t),
        this.resultRenderTarget.setSize(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._dirty && (this._schemeBuffer.useMRT = n,
        this._schemeBuffer.render(e, t, i),
        this._blurPass.uniforms.tex0.value = this._schemeBuffer.getSchemeTexture(),
        this._blurPass.render(e, this.resultRenderTarget),
        this._dirty = !1),
        this._copyPass.render(e, void 0 !== r ? r : null)
    }
    ,
    t
}(On);
vo = {
    uniforms: {
        tex0: {
            value: null
        },
        BlurStart: {
            value: 1
        },
        BlurWidth: {
            value: -.1
        },
        Intensity: {
            value: 3
        },
        GlowGamma: {
            value: 1
        },
        CX: {
            value: .5
        },
        CY: {
            value: .5
        }
    },
    vertexShader: "\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}\n    ",
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D tex0;\n\t\tuniform float BlurStart;\n\t\tuniform float BlurWidth;\n\t\tuniform float CX;\n\t\tuniform float CY;\n\t\tuniform float Intensity;\n\t\tuniform float GlowGamma;\n\t\t\n\t\t\n\t\tvoid main() {\n\t\t\tvec2 uv = vUv;\n\t\t\tvec2 ctrPt = vec2(CX, CY);\n\t\t\n\t\t\tfloat scale = BlurStart + BlurWidth * 1.0;\n\t\t\tvec2 tmp = (uv - ctrPt) * scale + ctrPt;\n\n\t\t\tvec4 blurred = texture2D(tex0, tmp);\n\t\t\tblurred.rgb = pow(blurred.rgb, vec3(GlowGamma));\n\t\t\tblurred.rgb *= Intensity;\n\t\t\tblurred.rgb = clamp(blurred.rgb, 0.0, 1.0);\n\t\t\t\n\t\t\tvec2 dir = uv - ctrPt;\n\t\t\tfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\n\t\t\n\t\t\tgl_FragColor = blurred * clamp(dist, 0.0, 1.0);\n\t\t}\n\t"
};
yo = {
    uniforms: {
        colorMap: {
            value: null
        },
        maskMap: {
            value: null
        },
        darkFactor: {
            value: .5
        },
        brightFactor: {
            value: 1
        }
    },
    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
    fragmentShader: ["uniform sampler2D colorMap;", "uniform sampler2D maskMap;", "uniform float darkFactor;", "uniform float brightFactor;", "varying vec2 vUv;", "void main() {", "float mask = texture2D( maskMap, vUv ).a;", "vec4 color = texture2D( colorMap, vUv );", "color.rgb = color.rgb * (1.0 - mask) * darkFactor + color.rgb * mask * brightFactor;", "gl_FragColor = color;", "}"].join("\n")
};
bo = sn(1, 1, 1);
_o = new Map;
var xo = 0
    , Eo = function(e) {
    function t(i, n, o, a) {
        classCallCheck(this, t);
        var l = s(this, e.call(this, i, n, wn(o) + "Scheme_" + ++xo, a));
        return l.marker = o,
        l
    }
    return o(t, e),
    t.prototype.shareDepthTexture = function(e) {}
    ,
    t.prototype.shareDepthRenderBuffer = function(e, t) {}
    ,
    t.prototype.clearDepthShare = function() {}
    ,
    t.prototype._initStrategy = function(e) {
        var t = this;
        e.materialManager.addStrategy(this.name, (function(e, i, r, n, o, s) {
            if (pn(this, o))
                return null;
            var a = hn(this.technique, t.marker);
            if ("skip" === a)
                return null;
            var l = void 0;
            return a ? (cn(l = a.isMaterial ? a : function(e, t) {
                var i = e.isInstancedMesh + "_" + t.skinning
                    , r = void 0;
                return _o.has(i) ? r = _o.get(i) : ((r = new THREE.ShaderMaterial(bo)).skinning = t.skinning,
                _o.set(i, r)),
                r
            }(this, o), o, !0),
            l) : null
        }
        ))
    }
    ,
    t
}(Nn);
wo = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        return a.darkFactor = .5,
        a.brightFactor = 1,
        a._schemeBuffer = new Eo(i,n,"focusRegion",o),
        a.resultRenderTarget = Cn(i, n),
        a.resultRenderTarget.texture.name = "FocusRegionPass.result",
        a._blendPass = new tn(yo),
        a._copyPass = new tn(Yr),
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.uniforms.tDiffuse.value = a.resultRenderTarget.texture,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose(),
        this.resultRenderTarget.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t),
        this.resultRenderTarget.setSize(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._dirty && (this._schemeBuffer.useMRT = n,
        this._schemeBuffer.render(e, t, i),
        this._dirty = !1),
        this._blendPass.uniforms.colorMap.value = r.texture,
        this._blendPass.uniforms.maskMap.value = this._schemeBuffer.getSchemeTexture(),
        this._blendPass.uniforms.darkFactor.value = this.darkFactor,
        this._blendPass.uniforms.brightFactor.value = this.brightFactor,
        this._blendPass.render(e, this.resultRenderTarget),
        this._copyPass.render(e, r)
    }
    ,
    t
}(On);
To = sn(0, 1, 1);
Mo = new Map;
var Co = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this, i, n, "OutlineScheme_" + o));
        return a._edgeColorString = o,
        a.enableLayer1 = !0,
        a
    }
    return o(t, e),
    t.prototype._initStrategy = function(e) {
        var t = this;
        e.materialManager.addStrategy(this.name, (function(e, i, r, n, o, s) {
            if (!this.userData.forceOutline && !r.layers.test(this.layers))
                return null;
            var a = "outline_0x" + t._edgeColorString
                , l = hn(this.technique, a);
            return l && "skip" !== l ? this.technique[a].isMaterial ? this.technique[a] : function(e, t) {
                var i = e.isInstancedMesh + "_" + t.skinning
                    , r = void 0;
                return Mo.has(i) ? r = Mo.get(i) : ((r = new THREE.ShaderMaterial(To)).side = THREE.DoubleSide,
                r.skinning = t.skinning,
                Mo.set(i, r)),
                r
            }(this, o) : null
        }
        ))
    }
    ,
    t
}(Nn);
So = {
    uniforms: {
        maskTexture: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(.5,.5)
        },
        edgeColor: {
            value: new THREE.Color(1,1,1)
        }
    },
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D maskTexture;\n\t\tuniform vec2 texSize;\n\t\tuniform vec3 edgeColor;\n\t\t\n\t\tvoid main() {\n\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\tvec4 c1 = texture2D(maskTexture, vUv + uvOffset.xy);\n\t\t\tvec4 c2 = texture2D(maskTexture, vUv - uvOffset.xy);\n\t\t\tvec4 c3 = texture2D(maskTexture, vUv + uvOffset.yw);\n\t\t\tvec4 c4 = texture2D(maskTexture, vUv - uvOffset.yw);\n\t\t\tfloat b1 = max(c1.b, c2.b);\n\t\t\tfloat b2 = max(c3.b, c4.b);\n\t\t\tfloat a = max(b1, b2);\n\t\t\tgl_FragColor = vec4(edgeColor, a);\n\t\t}\n\t"
};
jo = {
    defines: {
        MAX_RADIUS: 4
    },
    uniforms: {
        colorTexture: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(.5,.5)
        },
        direction: {
            value: new THREE.Vector2(.5,.5)
        },
        kernelRadius: {
            value: 1
        }
    },
    fragmentShader: "\n\t\t#include <common>\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D colorTexture;\n\t\tuniform vec2 texSize;\n\t\tuniform vec2 direction;\n\t\tuniform float kernelRadius;\n\t\t\n\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\treturn 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n\t\t}\n\t\tvoid main() {\n\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\tvec4 diffuseColor = texture2D(colorTexture, vUv);\n\t\t\tvec4 diffuseSum = diffuseColor * weightSum;\n\t\t\tvec2 delta = direction * invSize * kernelRadius / float(MAX_RADIUS);\n\t\t\tvec2 uvOffset = delta;\n\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\tuvOffset += delta;\n\t\t\t}\n\t\t\tvec4 color = diffuseSum / weightSum;\n\t\t\tgl_FragColor = color;\n\t\t}\n\t"
};
Po = {
    uniforms: {
        maskTexture: {
            value: null
        },
        edgeTexture1: {
            value: null
        },
        edgeTexture2: {
            value: null
        },
        edgeStrength: {
            value: 1
        },
        edgeGlow: {
            value: 1
        }
    },
    fragmentShader: "\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D maskTexture;\n\t\tuniform sampler2D edgeTexture1;\n\t\tuniform sampler2D edgeTexture2;\n\t\tuniform float edgeStrength;\n\t\tuniform float edgeGlow;\n\t\t\n\t\tvoid main() {\n\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\tvec4 finalColor = edgeStrength * edgeValue;\n\t\t\tfloat a = finalColor.a * (1.0 - maskColor.b);\n\t\t\tgl_FragColor = vec4(finalColor.rgb, a);\n\t\t}\n\t"
};
Ro = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        a.edgeColor = (new THREE.Color).setHex(void 0 !== o ? o : 16777215),
        a.edgeGlow = 0,
        a.edgeThickness = 1,
        a.edgeStrength = 1.5,
        a.downSampleRatio = 2,
        a._schemeBuffer = new Co(i,n,a.edgeColor.getHexString());
        var l = Math.round(i / a.downSampleRatio)
            , u = Math.round(n / a.downSampleRatio);
        return a.renderTargetMaskDownSampleBuffer = Cn(l, u),
        a.renderTargetMaskDownSampleBuffer.texture.name = "OutlinePass.depthDownSample",
        a.renderTargetBlurBuffer1 = Cn(l, u),
        a.renderTargetBlurBuffer1.texture.name = "OutlinePass.blur1",
        a.renderTargetBlurBuffer2 = Cn(Math.round(l / 2), Math.round(u / 2)),
        a.renderTargetBlurBuffer2.texture.name = "OutlinePass.blur2",
        a.renderTargetEdgeBuffer1 = Cn(l, u),
        a.renderTargetEdgeBuffer1.texture.name = "OutlinePass.edge1",
        a.renderTargetEdgeBuffer2 = Cn(Math.round(l / 2), Math.round(u / 2)),
        a.renderTargetEdgeBuffer2.texture.name = "OutlinePass.edge2",
        a._copyPass = new tn(Yr),
        a._copyPass.clearAlpha = 0,
        a._copyPass.uniforms.opacity.value = 1,
        a._copyPass.material.blending = THREE.NoBlending,
        a._copyPass.material.depthTest = !1,
        a._copyPass.material.depthWrite = !1,
        a._copyPass.material.transparent = !0,
        a._edgeDetectionPass = new tn(So),
        a._edgeDetectionPass.clearAlpha = 0,
        a._edgeDetectionPass.textureID = "maskTexture",
        a._blur1Pass = new tn(jo),
        a._blur1Pass.clearAlpha = 0,
        a._blur1Pass.textureID = "colorTexture",
        a._blur1Pass.uniforms.texSize.value.set(l, u),
        a._blur1Pass.material.defines.MAX_RADIUS = 4,
        a._blur1Pass.uniforms.kernelRadius.value = 1,
        a._blur2Pass = new tn(jo),
        a._blur2Pass.clearAlpha = 0,
        a._blur2Pass.textureID = "colorTexture",
        a._blur2Pass.uniforms.texSize.value.set(Math.round(l / 2), Math.round(u / 2)),
        a._blur2Pass.material.defines.MAX_RADIUS = 4,
        a._blur2Pass.uniforms.kernelRadius.value = 4,
        a._overlayPass = new tn(Po),
        a._overlayPass.clear = !1,
        a._overlayPass.material.blending = THREE.NormalBlending,
        a._overlayPass.material.depthTest = !1,
        a._overlayPass.material.depthWrite = !1,
        a._overlayPass.material.transparent = !0,
        a._overlayPass.uniforms.edgeTexture1.value = a.renderTargetEdgeBuffer1.texture,
        a._overlayPass.uniforms.edgeTexture2.value = a.renderTargetEdgeBuffer2.texture,
        a
    }
    return o(t, e),
    t.prototype.dispose = function() {
        this._schemeBuffer.dispose(),
        this.renderTargetMaskDownSampleBuffer.dispose(),
        this.renderTargetBlurBuffer1.dispose(),
        this.renderTargetBlurBuffer2.dispose(),
        this.renderTargetEdgeBuffer1.dispose(),
        this.renderTargetEdgeBuffer2.dispose()
    }
    ,
    t.prototype.setSize = function(e, t) {
        this._schemeBuffer.setSize(e, t);
        var i = Math.round(e / this.downSampleRatio)
            , r = Math.round(t / this.downSampleRatio);
        this.renderTargetMaskDownSampleBuffer.setSize(i, r),
        this.renderTargetBlurBuffer1.setSize(i, r),
        this.renderTargetEdgeBuffer1.setSize(i, r),
        this._blur1Pass.uniforms.texSize.value.set(i, r),
        i = Math.round(i / 2),
        r = Math.round(r / 2),
        this.renderTargetBlurBuffer2.setSize(i, r),
        this.renderTargetEdgeBuffer2.setSize(i, r),
        this._blur2Pass.uniforms.texSize.value.set(i, r)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._dirty && (this._schemeBuffer.useMRT = n,
        this._schemeBuffer.render(e, t, i),
        this._copyPass.uniforms.tDiffuse.value = this._schemeBuffer.getSchemeTexture(),
        this._copyPass.render(e, this.renderTargetMaskDownSampleBuffer),
        this._edgeDetectionPass.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height),
        this._edgeDetectionPass.uniforms.edgeColor.value.copy(this.edgeColor),
        this._edgeDetectionPass.render(e, this.renderTargetEdgeBuffer1, this.renderTargetMaskDownSampleBuffer),
        this._blur1Pass.uniforms.kernelRadius.value = this.edgeThickness,
        this._blur1Pass.uniforms.direction.value.set(1, 0),
        this._blur1Pass.render(e, this.renderTargetBlurBuffer1, this.renderTargetEdgeBuffer1),
        this._blur1Pass.uniforms.direction.value.set(0, 1),
        this._blur1Pass.render(e, this.renderTargetEdgeBuffer1, this.renderTargetBlurBuffer1),
        this.edgeGlow > 0 && (this._blur2Pass.uniforms.direction.value.set(1, 0),
        this._blur2Pass.render(e, this.renderTargetBlurBuffer2, this.renderTargetEdgeBuffer1),
        this._blur2Pass.uniforms.direction.value.set(0, 1),
        this._blur2Pass.render(e, this.renderTargetEdgeBuffer2, this.renderTargetBlurBuffer2)),
        this._overlayPass.uniforms.maskTexture.value = this._schemeBuffer.getSchemeTexture(),
        this._overlayPass.uniforms.edgeStrength.value = this.edgeStrength,
        this._overlayPass.uniforms.edgeGlow.value = this.edgeGlow,
        this._dirty = !1),
        this._overlayPass.render(e, void 0 !== r ? r : null)
    }
    ,
    t.prototype.dirty = function() {
        this._dirty = !0
    }
    ,
    t
}(On);
Do = function(e, t) {
    for (var i = 0, r = 1 / t, n = e; n > 0; )
        i += r * (n % t),
        n = Math.floor(n / t),
        r /= t;
    return i
};
function Ao(e, t, i) {
    this._samplingSize = i || 30;
    for (var r = [], n = 0; n < this._samplingSize; n++)
        r.push([Do(n, 2), Do(n, 3)]);
    this._haltonSequence = r,
    this._prevFrame = new THREE.WebGLRenderTarget(e,t,{
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBAFormat
    }),
    this._output = new THREE.WebGLRenderTarget(e,t,{
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBAFormat
    }),
    this._frame = 0,
    this.quadCamera = new THREE.OrthographicCamera(-1,1,1,-1,0,1),
    this.quadScene = new THREE.Scene,
    this.quad = new THREE.Mesh(new THREE.PlaneGeometry(2,2),new THREE.ShaderMaterial({
        uniforms: THREE.UniformsUtils.clone(Kn.uniforms),
        vertexShader: Kn.vertexShader,
        fragmentShader: Kn.fragmentShader,
        depthTest: !1,
        depthWrite: !1
    })),
    this.quadScene.add(this.quadCamera),
    this.quadScene.add(this.quad)
}
Ao.prototype = Object.assign(Ao.prototype, {
    constructor: Ao,
    setSize: function(e, t) {
        this._prevFrame.setSize(e, t),
        this._output.setSize(e, t)
    },
    setSamplingSize: function(e) {
        this._samplingSize = e || 30;
        for (var t = [], i = 0; i < this._samplingSize; i++)
            t.push([Do(i, 2), Do(i, 3)]);
        this._haltonSequence = t,
        this._frame = 0
    },
    getSamplingSize: function() {
        return this._samplingSize
    },
    start: function() {
        this._frame = 0
    },
    finished: function() {
        return this._frame >= this._samplingSize
    },
    frame: function() {
        return this._frame
    },
    jitterProjection: function(e, t, i) {
        var r = this._haltonSequence[this._frame];
        r || console.error("THREE.SuperSampler: try to jitter camera after finished!", this._frame, this._haltonSequence.length),
        e.setViewOffset && e.setViewOffset(t, i, .5 * (2 * r[0] - 1), .5 * (2 * r[1] - 1), t, i)
    },
    sample: function(e, t) {
        var i = 0 === this._frame;
        this.quad.material.uniforms.tDiffuse1.value = t,
        this.quad.material.uniforms.tDiffuse2.value = this._prevFrame.texture,
        this.quad.material.uniforms.mixRatio.value = i ? 0 : .9,
        this.quad.material.uniforms.opacity.value = 1;
        var r = e.getClearColor().getHex()
            , n = e.getClearAlpha();
        e.setClearColor(0, 0),
        e.setRenderTarget(this._output),
        e.clear(),
        e.render(this.quadScene, this.quadCamera),
        e.setClearColor(r, n);
        var o = this._prevFrame;
        return this._prevFrame = this._output,
        this._output = o,
        this._frame++,
        this._prevFrame
    },
    output: function() {
        return this._prevFrame
    },
    dispose: function() {
        this._prevFrame.dispose(),
        this._output.dispose(),
        this.quadScene.remove(this.quadCamera),
        this.quadScene.remove(this.quad),
        this.quad.material.dispose()
    }
});
var ko = {
    temporalSuperSampling: {
        enable: !1,
        size: 30
    },
    postEffect: {
        enable: !0,
        bloom: {
            enable: !1,
            strength: .14,
            radius: .4,
            threshold: .7
        },
        screenSpaceAmbientOcclusion: {
            enable: !1,
            radius: .2,
            quality: "medium",
            intensity: .8,
            temporalFilter: !0,
            ignoreTransparent: !1
        },
        screenSpaceReflection: {
            enable: !1,
            maxRayDistance: 200,
            pixelStride: 16,
            pixelStrideZCutoff: 50,
            screenEdgeFadeStart: .9,
            eyeFadeStart: .4,
            eyeFadeEnd: .8,
            minGlossiness: .2,
            temporalFilter: !0
        },
        colorCorrection: {
            enable: !0,
            exposure: 0,
            brightness: 0,
            contrast: 1.1,
            saturation: 1.1,
            gamma: 1
        },
        dof: {
            enable: !1,
            focalDepth: 1,
            focalLength: 24,
            fstop: .9,
            maxblur: 1,
            threshold: .9,
            gain: 1,
            bias: .5,
            dithering: 1e-4
        },
        vignette: {
            enable: !1,
            type: "color",
            color: 0,
            offset: 1
        },
        vignetting: {
            enable: !1,
            color: 0,
            offset: 1
        },
        blurEdge: {
            enable: !1,
            offset: 1
        },
        film: {
            enable: !1,
            grayscale: !0,
            noiseIntensity: .35,
            scanlinesIntensity: .5,
            scanlinesCount: 2048
        },
        chromaticAberration: {
            enable: !1,
            chromaFactor: .025
        },
        blur: {
            enable: !1,
            bounds: [[0, 0, 1, 1]],
            radius: 5
        },
        FXAA: {
            enable: !1
        },
        MSAA: {
            enable: !0
        }
    }
};
Oo = function() {
    function e() {
        classCallCheck(this, e),
        this.needSwapBuffer = !0
    }
    return e.prototype.setSize = function(e, t) {}
    ,
    e.prototype.render = function(e, t, i, r, n) {
        console.error("Effect: .render() must be implemented in derived pass.")
    }
    ,
    e.prototype.dispose = function() {}
    ,
    e
}();
Bo = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this));
        return a._pass = i,
        void 0 !== n && void 0 !== o && a.setSize(n, o),
        a
    }
    return o(t, e),
    t.prototype.setSize = function(e, t) {
        this._pass.setSize(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this._pass.render(e, t, i, r, n)
    }
    ,
    t.prototype.dispose = function() {
        this._pass.material.dispose()
    }
    ,
    t
}(Oo);
Fo = new THREE.Vector2(1,0);
Lo = new THREE.Vector2(0,1);
Io = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        o.needSwapBuffer = !1,
        o.strength = .14,
        o.radius = .4,
        o.threshold = .6,
        o.renderTargetsHorizontal = [],
        o.renderTargetsVertical = [],
        o.nMips = 5;
        var a = 0
            , l = Math.round(i / 2)
            , u = Math.round(n / 2);
        for (o.renderTargetBright = Cn(l, u),
        o.renderTargetBright.texture.name = "BloomEffect.bright",
        a = 0; a < o.nMips; a++) {
            var c = Cn(l, u);
            c.texture.name = "BloomEffect.h" + a,
            o.renderTargetsHorizontal.push(c);
            var h = Cn(l, u);
            h.texture.name = "BloomEffect.v" + a,
            o.renderTargetsVertical.push(h),
            l = Math.round(l / 2),
            u = Math.round(u / 2)
        }
        o.highPass = new tn(qn),
        o.highPass.clearAlpha = 0,
        o.highPass.uniforms.luminosityThreshold.value = o.threshold,
        o.highPass.uniforms.smoothWidth.value = .01,
        o.separableBlurPasses = [];
        var p = [3, 5, 7, 9, 11];
        for (l = Math.round(i / 2),
        u = Math.round(n / 2),
        a = 0; a < o.nMips; a++) {
            var d = new tn(Xn);
            d.clearAlpha = 0,
            d.material.defines.KERNEL_RADIUS = p[a],
            d.material.defines.SIGMA = p[a],
            d.uniforms.texSize.value.set(l, u),
            o.separableBlurPasses.push(d),
            l = Math.round(l / 2),
            u = Math.round(u / 2)
        }
        o.compositePass = new tn(Jn),
        o.compositePass.clearAlpha = 0,
        o.compositePass.material.defines.NUM_MIPS = 5,
        o.compositePass.uniforms.blurTexture1.value = o.renderTargetsVertical[0].texture,
        o.compositePass.uniforms.blurTexture2.value = o.renderTargetsVertical[1].texture,
        o.compositePass.uniforms.blurTexture3.value = o.renderTargetsVertical[2].texture,
        o.compositePass.uniforms.blurTexture4.value = o.renderTargetsVertical[3].texture,
        o.compositePass.uniforms.blurTexture5.value = o.renderTargetsVertical[4].texture,
        o.compositePass.uniforms.bloomStrength.value = o.strength,
        o.compositePass.uniforms.bloomRadius.value = .1;
        return o.compositePass.uniforms.bloomFactors.value = [1, .8, .6, .4, .2],
        o.bloomTintColors = [new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1), new THREE.Vector3(1,1,1)],
        o.compositePass.uniforms.bloomTintColors.value = o.bloomTintColors,
        o.copyPass = new tn(Yr),
        o.copyPass.clear = !1,
        o.copyPass.uniforms.opacity.value = 1,
        o.copyPass.material.blending = THREE.CustomBlending,
        o.copyPass.material.blendSrc = THREE.SrcAlphaFactor,
        o.copyPass.material.blendDst = THREE.OneFactor,
        o.copyPass.material.blendEquation = THREE.AddEquation,
        o.copyPass.material.blendSrcAlpha = THREE.ZeroFactor,
        o.copyPass.material.blendDstAlpha = THREE.OneFactor,
        o.copyPass.material.blendEquationAlpha = THREE.AddEquation,
        o.copyPass.material.depthTest = !1,
        o.copyPass.material.depthWrite = !1,
        o.copyPass.material.transparent = !0,
        o
    }
    return o(t, e),
    t.prototype.setSize = function(e, t) {
        var i = Math.round(e / 2)
            , r = Math.round(t / 2);
        this.renderTargetBright.setSize(i, r);
        for (var n = 0; n < this.nMips; n++)
            this.renderTargetsHorizontal[n].setSize(i, r),
            this.renderTargetsVertical[n].setSize(i, r),
            this.separableBlurPasses[n].uniforms.texSize.value.set(i, r),
            i = Math.round(i / 2),
            r = Math.round(r / 2)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this.highPass.uniforms.luminosityThreshold.value = this.threshold,
        this.highPass.render(e, this.renderTargetBright, i);
        for (var o = this.renderTargetBright, s = 0; s < this.nMips; s++)
            this.separableBlurPasses[s].uniforms.colorTexture.value = o.texture,
            this.separableBlurPasses[s].uniforms.direction.value.copy(Fo),
            this.separableBlurPasses[s].render(e, this.renderTargetsHorizontal[s]),
            this.separableBlurPasses[s].uniforms.colorTexture.value = this.renderTargetsHorizontal[s].texture,
            this.separableBlurPasses[s].uniforms.direction.value.copy(Lo),
            this.separableBlurPasses[s].render(e, this.renderTargetsVertical[s]),
            o = this.renderTargetsVertical[s];
        this.compositePass.uniforms.bloomStrength.value = this.strength,
        this.compositePass.uniforms.bloomRadius.value = this.radius,
        this.compositePass.uniforms.bloomTintColors.value = this.bloomTintColors,
        this.compositePass.render(e, this.renderTargetsHorizontal[0]),
        this.copyPass.render(e, i, this.renderTargetsHorizontal[0])
    }
    ,
    t.prototype.dispose = function() {
        this.renderTargetBright.dispose(),
        this.renderTargetsHorizontal.forEach((function(e) {
            return e.dispose()
        }
        )),
        this.renderTargetsVertical.forEach((function(e) {
            return e.dispose()
        }
        ))
    }
    ,
    t
}(Oo);
No = {
    defines: {
        USE_VIGNETTE_TEXTURE: !1
    },
    uniforms: {
        tDiffuse: {
            value: null
        },
        vignetteOffset: {
            value: 1
        },
        vignetteColor: {
            value: new THREE.Color(0)
        },
        vignetteTexture: {
            value: null
        }
    },
    vertexShader: "\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",
    fragmentShader: "\n\t    uniform sampler2D tDiffuse;\n\n\t\tuniform float vignetteOffset;\n        uniform vec3 vignetteColor;\n        \n        #ifdef USE_VIGNETTE_TEXTURE\n            uniform sampler2D vignetteTexture;\n        #endif\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 color = texture2D(tDiffuse, vUv);\n            vec2 uv = (vUv - vec2(0.5)) * vec2(vignetteOffset);\n            \n            vec3 color2 = vignetteColor;\n\n            #ifdef USE_VIGNETTE_TEXTURE\n                color2 *= texture2D(vignetteTexture, vUv).rgb;\n            #endif\n\n\t\t\tcolor.rgb = mix(color.rgb, color2, clamp(dot(uv, uv), 0.0, 1.0));\n\t\t\tgl_FragColor = color;\n\n\t\t}\n    "
};
Ho = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        return o.type = "color",
        o.color = new THREE.Color(0),
        o.offset = 1,
        o.tempRenderTarget = Cn(i / 2, n / 2),
        o.tempRenderTarget2 = Cn(i / 2, n / 2),
        o.effectHBlur = new tn(eo),
        o.effectVBlur = new tn($n),
        o.effectHBlur.uniforms.h.value = 4 / i,
        o.effectVBlur.uniforms.v.value = 4 / n,
        o.blendPass = new tn(No),
        o
    }
    return o(t, e),
    t.prototype.setSize = function(e, t) {
        this.tempRenderTarget.setSize(e / 2, t / 2),
        this.tempRenderTarget2.setSize(e / 2, t / 2),
        this.effectHBlur.uniforms.h.value = 4 / e,
        this.effectVBlur.uniforms.v.value = 4 / t
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        "color" === this.type ? (this.blendPass.uniforms.vignetteOffset.value = this.offset,
        this.blendPass.uniforms.vignetteColor.value.copy(this.color),
        this.blendPass.material.defines.USE_VIGNETTE_TEXTURE && (this.blendPass.material.defines.USE_VIGNETTE_TEXTURE = !1,
        this.blendPass.material.needsUpdate = !0)) : "blur" === this.type && (this.effectHBlur.render(e, this.tempRenderTarget2, i),
        this.effectVBlur.render(e, this.tempRenderTarget, this.tempRenderTarget2),
        this.blendPass.uniforms.vignetteOffset.value = this.offset,
        this.blendPass.uniforms.tDiffuse.value = i.texture,
        this.blendPass.uniforms.vignetteTexture.value = this.tempRenderTarget.texture,
        this.blendPass.uniforms.vignetteColor.value.setRGB(1, 1, 1),
        this.blendPass.material.defines.USE_VIGNETTE_TEXTURE || (this.blendPass.material.defines.USE_VIGNETTE_TEXTURE = !0,
        this.blendPass.material.needsUpdate = !0)),
        this.blendPass.render(e, t, i)
    }
    ,
    t.prototype.dispose = function() {
        this.tempRenderTarget.dispose(),
        this.tempRenderTarget2.dispose()
    }
    ,
    t
}(Oo);
Uo = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        return o.color = new THREE.Color(0),
        o.offset = 1,
        o.tempRenderTarget = Cn(i / 2, n / 2),
        o.blendPass = new tn(No),
        o.blendPass.material.defines.USE_VIGNETTE_TEXTURE = !1,
        o
    }
    return o(t, e),
    t.prototype.setSize = function(e, t) {
        this.tempRenderTarget.setSize(e / 2, t / 2)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this.blendPass.uniforms.vignetteOffset.value = this.offset,
        this.blendPass.uniforms.vignetteColor.value.copy(this.color),
        this.blendPass.render(e, t, i)
    }
    ,
    t.prototype.dispose = function() {
        this.tempRenderTarget.dispose()
    }
    ,
    t
}(Oo);
zo = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        return o.offset = 1,
        o.tempRenderTarget = Cn(i / 2, n / 2),
        o.tempRenderTarget2 = Cn(i / 2, n / 2),
        o.effectHBlur = new tn(eo),
        o.effectVBlur = new tn($n),
        o.effectHBlur.uniforms.h.value = 4 / i,
        o.effectVBlur.uniforms.v.value = 4 / n,
        o.blendPass = new tn(No),
        o.blendPass.material.defines.USE_VIGNETTE_TEXTURE = !0,
        o
    }
    return o(t, e),
    t.prototype.setSize = function(e, t) {
        this.tempRenderTarget.setSize(e / 2, t / 2),
        this.tempRenderTarget2.setSize(e / 2, t / 2),
        this.effectHBlur.uniforms.h.value = 4 / e,
        this.effectVBlur.uniforms.v.value = 4 / t
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        this.effectHBlur.render(e, this.tempRenderTarget2, i),
        this.effectVBlur.render(e, this.tempRenderTarget, this.tempRenderTarget2),
        this.blendPass.uniforms.vignetteOffset.value = this.offset,
        this.blendPass.uniforms.tDiffuse.value = i.texture,
        this.blendPass.uniforms.vignetteTexture.value = this.tempRenderTarget.texture,
        this.blendPass.uniforms.vignetteColor.value.setRGB(1, 1, 1),
        this.blendPass.render(e, t, i)
    }
    ,
    t.prototype.dispose = function() {
        this.tempRenderTarget.dispose(),
        this.tempRenderTarget2.dispose()
    }
    ,
    t
}(Oo);
Vo = {
    defines: {
        USE_MASKMAP: 0
    },
    uniforms: {
        tDiffuse: {
            value: null
        },
        bounds: {
            value: new THREE.Vector4(0,0,1,1)
        },
        filletXRadius: {
            value: new THREE.Vector4
        },
        filletYRadius: {
            value: new THREE.Vector4
        },
        blendTexture: {
            value: null
        },
        maskMap: {
            value: null
        }
    },
    vertexShader: "\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",
    fragmentShader: "\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform sampler2D blendTexture;\n\n\t\tuniform vec4 bounds;\n\n\t\tuniform vec4 filletXRadius;\n\t\tuniform vec4 filletYRadius;\n\n\t\tuniform sampler2D maskMap;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvec4 color = texture2D(tDiffuse, vUv);\n\t\t\tvec3 color2 = texture2D(blendTexture, vUv).rgb;\n\t\t\t\n\t\t\tvec2 blurCenter = (bounds.xy + bounds.zw) * 0.5;\n\t\t\tvec2 blurSize = bounds.zw - bounds.xy;\n\n\t\t\tvec2 uv = vUv.xy;\n\t\t\tuv.y = 1.0 - uv.y;\n\n\t\t\tvec2 blurCoords = (uv - blurCenter) / blurSize;\n\n\t\t\t#if USE_MASKMAP\n\t\t\t\tblurCoords = abs(blurCoords);\n\n\t\t\t\tvec2 newUv = (uv - bounds.xy) / blurSize;\n\t\t\t\tnewUv.y = 1. - newUv.y;\n\n\t\t\t\tfloat blend = texture2D(maskMap, newUv).r;\n\t\t\t\tblend *= step(blurCoords.x, 0.5) * step(blurCoords.y, 0.5);\n\t\t\t#else\n\t\t\t\tvec2 filletRadius = vec2(0.);\n\n\t\t\t\tif (blurCoords.x > 0. && blurCoords.y < 0.) {\n\t\t\t\t\tfilletRadius.x = filletXRadius[1];\n\t\t\t\t\tfilletRadius.y = filletYRadius[1];\n\t\t\t\t} else if (blurCoords.x < 0. && blurCoords.y < 0.) {\n\t\t\t\t\tfilletRadius.x = filletXRadius[0];\n\t\t\t\t\tfilletRadius.y = filletYRadius[0];\n\t\t\t\t} else if (blurCoords.x < 0. && blurCoords.y > 0.) {\n\t\t\t\t\tfilletRadius.x = filletXRadius[2];\n\t\t\t\t\tfilletRadius.y = filletYRadius[2];\n\t\t\t\t} else if (blurCoords.x > 0. && blurCoords.y > 0.) {\n\t\t\t\t\tfilletRadius.x = filletXRadius[3];\n\t\t\t\t\tfilletRadius.y = filletYRadius[3];\n\t\t\t\t}\n\n\t\t\t\tblurCoords = abs(blurCoords);\n\n\t\t\t\tvec2 coreRange = 0.5 - filletRadius;\n\n\t\t\t\tfloat rx = blurCoords.x - coreRange.x;\n\t\t\t\tfloat ry = blurCoords.y - coreRange.y;\n\n\t\t\t\tfloat blend = step(blurCoords.x, 0.5) * step(blurCoords.y, 0.5) \n\t\t\t\t\t* (\n\t\t\t\t\t\t1.0 - step(coreRange.x, blurCoords.x)\n\t\t\t\t\t\t* step(coreRange.y, blurCoords.y)\n\t\t\t\t\t\t* step(filletRadius.x * filletRadius.x * filletRadius.y * filletRadius.y, rx * rx * filletRadius.y * filletRadius.y + ry * ry * filletRadius.x * filletRadius.x)\n\t\t\t\t\t);\n\t\t\t#endif\n\n\t\t\tcolor.rgb = mix(color.rgb, color2, blend);\n\t\t\tgl_FragColor = color;\n\t\t}\n    "
};
Wo = {
    defines: {
        SAMPLERS: 9
    },
    uniforms: {
        tDiffuse: {
            value: null
        },
        resolution: {
            value: new THREE.Vector2(1 / 1024,1 / 512)
        },
        direction: {
            value: new THREE.Vector2(1,0)
        }
    },
    vertexShader: "\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",
    fragmentShader: "\n        uniform sampler2D tDiffuse;\n        uniform vec2 resolution;\n        uniform vec2 direction;\n        varying vec2 vUv;\n\n        #if (SAMPLERS == 5) \n            vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n                vec4 color = vec4(0.0);\n                vec2 off1 = vec2(1.3333333333333333) * direction;\n                color += texture2D(image, uv) * 0.29411764705882354;\n                color += texture2D(image, uv + (off1 * resolution)) * 0.35294117647058826;\n                color += texture2D(image, uv - (off1 * resolution)) * 0.35294117647058826;\n                return color; \n            }\n        #endif\n        #if (SAMPLERS == 9)\n            vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n                vec4 color = vec4(0.0);\n                vec2 off1 = vec2(1.3846153846) * direction;\n                vec2 off2 = vec2(3.2307692308) * direction;\n                color += texture2D(image, uv) * 0.2270270270;\n                color += texture2D(image, uv + (off1 * resolution)) * 0.3162162162;\n                color += texture2D(image, uv - (off1 * resolution)) * 0.3162162162;\n                color += texture2D(image, uv + (off2 * resolution)) * 0.0702702703;\n                color += texture2D(image, uv - (off2 * resolution)) * 0.0702702703;\n                return color;\n            }\n        #endif\n        #if (SAMPLERS == 13)\n            vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n                vec4 color = vec4(0.0);\n                vec2 off1 = vec2(1.411764705882353) * direction;\n                vec2 off2 = vec2(3.2941176470588234) * direction;\n                vec2 off3 = vec2(5.176470588235294) * direction;\n                color += texture2D(image, uv) * 0.1964825501511404;\n                color += texture2D(image, uv + (off1 * resolution)) * 0.2969069646728344;\n                color += texture2D(image, uv - (off1 * resolution)) * 0.2969069646728344;\n                color += texture2D(image, uv + (off2 * resolution)) * 0.09447039785044732;\n                color += texture2D(image, uv - (off2 * resolution)) * 0.09447039785044732;\n                color += texture2D(image, uv + (off3 * resolution)) * 0.010381362401148057;\n                color += texture2D(image, uv - (off3 * resolution)) * 0.010381362401148057;\n                return color;\n            }\n        #endif\n\n        void main() {\n            gl_FragColor = blur(tDiffuse, vUv, resolution, direction);\n        }\n    "
};
Go = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        return o.tempRenderTarget = Cn(i, n),
        o.tempRenderTarget2 = Cn(i, n),
        o.tempRenderTarget3 = Cn(i, n),
        o.tempRenderTarget4 = Cn(i, n),
        o.blurPass = new tn(Wo),
        o.blendPass = new tn(Vo),
        o.blendPass.uniforms.blendTexture.value = o.tempRenderTarget.texture,
        o.blendWithMapPass = new tn(Vo),
        o.blendWithMapPass.material.defines.USE_MASKMAP = 1,
        o.blendWithMapPass.uniforms.blendTexture.value = o.tempRenderTarget.texture,
        o.bounds = [[0, 0, 1, 1]],
        o.radius = 5,
        o
    }
    return o(t, e),
    t.prototype.setSize = function(e, t) {
        this.tempRenderTarget.setSize(e, t),
        this.tempRenderTarget2.setSize(e, t),
        this.tempRenderTarget3.setSize(e, t),
        this.tempRenderTarget4.setSize(e, t)
    }
    ,
    t.prototype.render = function(e, t, i, r, n) {
        for (var o = this, s = this.tempRenderTarget3.width, a = this.tempRenderTarget3.height, l = 2 + 2 * Math.floor(this.radius / 2), u = 0; u < l; u++) {
            this.blurPass.uniforms.resolution.value.set(1 / s, 1 / a);
            var c = this.radius * (u + 1) / l;
            u % 2 == 0 ? (this.blurPass.uniforms.direction.value.set(c, 0),
            this.blurPass.render(e, this.tempRenderTarget2, 0 === u ? i : this.tempRenderTarget)) : (this.blurPass.uniforms.direction.value.set(0, c),
            this.blurPass.render(e, this.tempRenderTarget, this.tempRenderTarget2))
        }
        var h = i
            , p = this.tempRenderTarget3
            , d = void 0;
        this.bounds.forEach((function(i, r) {
            var n, s = void 0, a = Object.prototype.toString.call(i[4]);
            "[object String]" == a ? ((s = o.blendWithMapPass).uniforms.filletXRadius.value.set(0, 0, 0, 0),
            s.uniforms.filletYRadius.value.set(0, 0, 0, 0),
            s.uniforms.maskMap.value = (n = i[4],
            Sn.has(n) || Sn.set(n, (new THREE.TextureLoader).load(n)),
            Sn.get(n))) : "[object Number]" == a ? ((s = o.blendPass).uniforms.filletXRadius.value.set(i[4], i[6], i[8], i[10]),
            s.uniforms.filletYRadius.value.set(i[5], i[7], i[9], i[11]),
            s.uniforms.maskMap.value = null) : ((s = o.blendPass).uniforms.filletXRadius.value.set(0, 0, 0, 0),
            s.uniforms.filletYRadius.value.set(0, 0, 0, 0),
            s.uniforms.maskMap.value = null),
            s.uniforms.bounds.value.fromArray(i),
            s.render(e, r === o.bounds.length - 1 ? t : p, h),
            d = h,
            h = p,
            p = 0 === r ? o.tempRenderTarget4 : d
        }
        ))
    }
    ,
    t.prototype.dispose = function() {
        this.tempRenderTarget.dispose(),
        this.tempRenderTarget2.dispose(),
        this.tempRenderTarget3.dispose(),
        this.tempRenderTarget4.dispose()
    }
    ,
    t
}(Oo);
_bufferShareManager = function() {
    function e() {
        classCallCheck(this, e),
        this._defaultSharedMRB = null,
        this._defaultSharedRB = null,
        this._inputColorTexture = null,
        this._inputDepthTexture = null,
        this._inputColorRenderbuffer = null,
        this._inputDepthRenderbuffer = null,
        this._inited = !1
    }
    return e.prototype.begin = function(e) {
        this._inited || (this._defaultSharedMRB = e.createRenderbuffer(),
        this._defaultSharedRB = e.createRenderbuffer(),
        this._inited = !0)
    }
    ,
    e.prototype.setupSceneBuffer = function(e) {
        this._inputDepthTexture ? e.setDepthTexture(this._inputDepthTexture) : this._inputColorRenderbuffer && this._inputDepthRenderbuffer ? e.setColorDepthRenderBuffer(this._inputColorRenderbuffer, this._inputDepthRenderbuffer) : e.setDepthRenderBuffer(this._defaultSharedMRB, this._defaultSharedRB)
    }
    ,
    e.prototype.setupPasses = function(e) {
        var t = this
            , i = !1;
        return e.forEach((function(e) {
            e.isActive() && (t._inputDepthTexture ? e._schemeBuffer.shareDepthTexture(t._inputDepthTexture) : t._inputColorRenderbuffer && t._inputDepthRenderbuffer ? e._schemeBuffer.shareDepthRenderBuffer(t._inputDepthRenderbuffer, t._defaultSharedRB) && (i = !0) : e._schemeBuffer.__shareDepthRenderBuffer ? e._schemeBuffer.shareDepthRenderBuffer(t._defaultSharedMRB, t._defaultSharedRB) && (i = !0) : e._schemeBuffer.clearDepthShare() && (i = !0))
        }
        )),
        i
    }
    ,
    e.prototype.clearInputs = function() {
        this._inputColorTexture = null,
        this._inputDepthTexture = null,
        this._inputColorRenderbuffer = null,
        this._inputDepthRenderbuffer = null
    }
    ,
    e.prototype.setInputTextures = function(e, t) {
        this._inputColorTexture = e,
        this._inputDepthTexture = t,
        this._inputColorRenderbuffer = null,
        this._inputDepthRenderbuffer = null
    }
    ,
    e.prototype.setInputRenderbuffers = function(e, t) {
        this._inputColorTexture = null,
        this._inputDepthTexture = null,
        this._inputColorRenderbuffer = e,
        this._inputDepthRenderbuffer = t
    }
    ,
    e.prototype.getInputColorTexture = function() {
        return this._inputColorTexture
    }
    ,
    e.prototype.supportMSAA = function() {
        return !this._inputDepthTexture && (!!this._inputDepthRenderbuffer || null)
    }
    ,
    e.prototype.needSwap = function() {
        return this._inputColorTexture || this._inputDepthTexture || this._inputColorRenderbuffer || this._inputDepthRenderbuffer
    }
    ,
    e.prototype.needClear = function() {
        return !(this._inputColorRenderbuffer && this._inputDepthRenderbuffer || this._inputColorTexture)
    }
    ,
    e.prototype.dispose = function() {}
    ,
    e
}();
MainRenderer = function() {
    function e(t, i) {
        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        classCallCheck(this, e);
        var o = void 0 !== n.stencil && n.stencil
            , s = void 0 !== n.maxSamplers ? n.maxSamplers : 8;
        this._tempRenderTarget1 = Cn(t, i),
        this._tempRenderTarget2 = Cn(t, i),
        this._sceneBuffer = new dn(t,i,o,s),
        this._superSampler = new Ao(t,i,30),
        this._gBuffer = new yn(t,i),
        this._bufferShareManager = new _bufferShareManager,
        this._ssaoPrePass = new Rn(t,i),
        this._ssaoKernalSize = 12,
        this._ssrPrePass = new kn(t,i),
        this._copyPass = new tn(Yr),
        this._copyPass.material.depthWrite = !1,
        this._copyPass.clearAlpha = 0,
        this._colorEffect = new Bo(new tn(Gr)),
        this._dofEffect = new Bo(new tn(qr,"tColor")),
        this._dofEffect._pass.uniforms.tDepth.value = this._gBuffer.getDepthTexture(),
        this._vignetteEffect = new Ho(t,i),
        this._vignettingEffect = new Uo(t,i),
        this._blurEdgeEffect = new zo(t,i),
        this._bloomEffect = new Io(t,i),
        this._filmEffect = new Bo(new tn(Xr)),
        this._chromaticAberrationEffect = new Bo(new tn(Jr)),
        this._fxaaEffect = new Bo(new tn(Qr),t,i),
        this._rectBlurEffect = new Go(t,i),
        this._effects = new Map([["colorCorrection", this._colorEffect], ["dof", this._dofEffect], ["vignette", this._vignetteEffect], ["vignetting", this._vignettingEffect], ["blurEdge", this._blurEdgeEffect], ["bloom", this._bloomEffect], ["film", this._filmEffect], ["chromaticAberration", this._chromaticAberrationEffect], ["FXAA", this._fxaaEffect], ["blur", this._rectBlurEffect]]),
        this._effectList1 = ["colorCorrection", "dof", "vignette", "vignetting", "blurEdge", "bloom"],
        this._effectList2 = ["chromaticAberration", "FXAA", "blur", "film"],
        this._glowPass = new Zn(t,i,"glow",s),
        this._middleGlowPass = new Zn(t,i,"middleGlow",s),
        this._smallGlowPass = new Zn(t,i,"smallGlow",s),
        this._combineGlowPass = new Zn(t,i,["glow", "middleGlow", "smallGlow"],s),
        this._combineGlowPass.$enable = !1,
        this._lineBloomPass = new to(t,i,s),
        this._innerGlowPass = new co(t,i,s),
        this._radialBlurPass = new ho(t,i,s),
        this._radialBlur2Pass = new fo(t,i,s),
        this._radialOffsetPass = new go(t,i,s),
        this._focusRegionPass = new wo(t,i,s),
        this._overLayPasses = new Map([["Glow", this._glowPass], ["MiddleGlow", this._middleGlowPass], ["SmallGlow", this._smallGlowPass], ["CombineGlow", this._combineGlowPass], ["LineBloom", this._lineBloomPass], ["InnerGlow", this._innerGlowPass], ["RadialBlur", this._radialBlurPass], ["RadialBlur2", this._radialBlur2Pass], ["RadialOffset", this._radialOffsetPass], ["FocusRegion", this._focusRegionPass]]),
        this._outlinePasses = new Map,
        this._config = Tn({}, ko),
        this.setConfig({}),
        this.width = t,
        this.height = i,
        this.supportTransparent = !1,
        this.schemeAutoMSAA = !0,
        this.autoClearDepthStencil = !0,
        this._needPreSetupRenderTarget = !0,
        this.onlyAO = !1,
        this.onlySSR = !1,
        this.enableOutlines = !0,
        this.enableOverlays = !0
    }
    return e.prototype.setConfig = function(e) {
        this._config = Tn(this._config, e),
        this._superSampler.setSamplingSize(this._config.temporalSuperSampling.size);
        var t = void 0;
        t = this._config.postEffect.bloom,
        this._bloomEffect.strength = t.strength,
        this._bloomEffect.radius = t.radius,
        this._bloomEffect.threshold = t.threshold,
        t = this._config.postEffect.screenSpaceAmbientOcclusion,
        this._ssaoPrePass.setParameter("radius", t.radius),
        this._ssaoPrePass.setParameter("bias", t.radius / 50),
        this._ssaoPrePass.setParameter("intensity", t.intensity),
        this._ssaoKernalSize = {
            low: 6,
            medium: 12,
            high: 32,
            ultra: 64
        }[t.quality] || 12,
        this._ssaoPrePass.setKernelSize(this._ssaoKernalSize),
        t = this._config.postEffect.screenSpaceReflection,
        this._ssrPrePass._ssrPass.uniforms.maxRayDistance.value = t.maxRayDistance,
        this._ssrPrePass._ssrPass.uniforms.pixelStride.value = t.pixelStride,
        this._ssrPrePass._ssrPass.uniforms.pixelStrideZCutoff.value = t.pixelStrideZCutoff,
        this._ssrPrePass._ssrPass.uniforms.screenEdgeFadeStart.value = t.screenEdgeFadeStart,
        this._ssrPrePass._ssrPass.uniforms.eyeFadeStart.value = t.eyeFadeStart,
        this._ssrPrePass._ssrPass.uniforms.eyeFadeEnd.value = t.eyeFadeEnd,
        this._ssrPrePass._ssrPass.uniforms.minGlossiness.value = t.minGlossiness,
        t = this._config.postEffect.colorCorrection,
        this._colorEffect._pass.uniforms.exposure.value = t.exposure,
        this._colorEffect._pass.uniforms.brightness.value = t.brightness,
        this._colorEffect._pass.uniforms.contrast.value = t.contrast,
        this._colorEffect._pass.uniforms.saturation.value = t.saturation,
        this._colorEffect._pass.uniforms.gamma.value = t.gamma,
        t = this._config.postEffect.dof,
        this._dofEffect._pass.uniforms.focalDepth.value = t.focalDepth,
        this._dofEffect._pass.uniforms.focalLength.value = t.focalLength,
        this._dofEffect._pass.uniforms.fstop.value = t.fstop,
        this._dofEffect._pass.uniforms.maxblur.value = t.maxblur,
        this._dofEffect._pass.uniforms.threshold.value = t.threshold,
        this._dofEffect._pass.uniforms.gain.value = t.gain,
        this._dofEffect._pass.uniforms.bias.value = t.bias,
        this._dofEffect._pass.uniforms.dithering.value = t.dithering,
        t = this._config.postEffect.vignette,
        this._vignetteEffect.type = t.type,
        Array.isArray(t.color) ? this._vignetteEffect.color.fromArray(t.color) : this._vignetteEffect.color.setHex(t.color),
        this._vignetteEffect.offset = t.offset,
        (t = this._config.postEffect.vignetting) && (Array.isArray(t.color) ? this._vignettingEffect.color.fromArray(t.color) : this._vignettingEffect.color.setHex(t.color),
        this._vignettingEffect.offset = t.offset),
        (t = this._config.postEffect.blurEdge) && (this._blurEdgeEffect.offset = t.offset),
        t = this._config.postEffect.film,
        this._filmEffect._pass.uniforms.grayscale.value = t.grayscale,
        this._filmEffect._pass.uniforms.nIntensity.value = t.noiseIntensity,
        this._filmEffect._pass.uniforms.sIntensity.value = t.scanlinesIntensity,
        this._filmEffect._pass.uniforms.sCount.value = t.scanlinesCount,
        t = this._config.postEffect.chromaticAberration,
        this._chromaticAberrationEffect._pass.uniforms.uChromaFactor.value = t.chromaFactor,
        t = this._config.postEffect.blur,
        this._rectBlurEffect.bounds = t.bounds,
        this._rectBlurEffect.radius = t.radius,
        this.dirty()
    }
    ,
    e.prototype.enable = function(e) {
        if (e.indexOf("outline") > -1) {
            var t = e.split("_")
                , i = t[1];
            if (e = t[0],
            this._outlinePasses.has(i))
                this._outlinePasses.get(i).enable = !0;
            else {
                var r = new Ro(this.width,this.height,i);
                r.enable = !0,
                this._outlinePasses.set(i, r)
            }
        } else
            e = wn(e),
            this._overLayPasses.has(e) && (this._overLayPasses.get(e).enable = !0),
            "Glow" !== e && "MiddleGlow" !== e && "SmallGlow" !== e || (this._overLayPasses.get("CombineGlow").enable = this._overLayPasses.get("Glow").enable || this._overLayPasses.get("MiddleGlow").enable || this._overLayPasses.get("SmallGlow").enable)
    }
    ,
    e.prototype.disable = function(e) {
        if (e.indexOf("outline") > -1) {
            var t = e.split("_")
                , i = t[1];
            if (e = t[0],
            this._outlinePasses.has(i))
                this._outlinePasses.get(i).enable = !1
        } else
            e = wn(e),
            this._overLayPasses.has(e) && (this._overLayPasses.get(e).enable = !1),
            "Glow" !== e && "MiddleGlow" !== e && "SmallGlow" !== e || (this._overLayPasses.get("CombineGlow").enable = this._overLayPasses.get("Glow").enable || this._overLayPasses.get("MiddleGlow").enable || this._overLayPasses.get("SmallGlow").enable)
    }
    ,
    e.prototype.getPass = function(e) {
        return e = wn(e),
        this._overLayPasses.has(e) ? this._overLayPasses.get(e) : null
    }
    ,
    e.prototype.clearInputs = function() {
        this._bufferShareManager.clearInputs(),
        this.dirty()
    }
    ,
    e.prototype.setInputTextures = function(e, t) {
        this._bufferShareManager.setInputTextures(e, t),
        this.dirty()
    }
    ,
    e.prototype.setInputRenderbuffers = function(e, t) {
        this._bufferShareManager.setInputRenderbuffers(e, t),
        this.dirty()
    }
    ,
    e.prototype.shareDepthRenderBuffer = function(e, t) {
        if (t) {
            var i = this.getPass(t);
            i ? e ? i._schemeBuffer.__shareDepthRenderBuffer = !0 : delete i._schemeBuffer.__shareDepthRenderBuffer : console.warn("AdvancedRenderer: shareDepthRenderBuffer pass <" + t + "> can not find.")
        } else
            this._overLayPasses.forEach((function(t) {
                e ? t._schemeBuffer.__shareDepthRenderBuffer = !0 : delete t._schemeBuffer.__shareDepthRenderBuffer
            }
            ));
        this.dirty()
    }
    ,
    e.prototype.setSize = function(e, t) {
        this._sceneBuffer.setSize(e, t),
        this._tempRenderTarget1.setSize(e, t),
        this._tempRenderTarget2.setSize(e, t),
        this._gBuffer.setSize(e, t),
        this._superSampler.setSize(e, t),
        this._ssaoPrePass.setSize(e, t),
        this._ssrPrePass.setSize(e, t),
        this._effects.forEach((function(i) {
            return i.setSize(e, t)
        }
        )),
        this._overLayPasses.forEach((function(i) {
            return i.setSize(e, t)
        }
        )),
        this._outlinePasses.forEach((function(i) {
            return i.setSize(e, t)
        }
        )),
        this.width = e,
        this.height = t,
        this._needPreSetupRenderTarget = !0,
        this.dirty()
    }
    ,
    e.prototype.render = function(e, t, i, r) {
        var n = this
            , o = this._config.temporalSuperSampling.enable
            , s = this._config.postEffect.enable
            , a = e.capabilities.isWebGL2;
        if (s || o || this._bufferShareManager.needSwap()) {
            var l = this._bufferShareManager.supportMSAA();
            null === l && (l = a && s && this._config.postEffect.MSAA.enable);
            var u = void 0
                , c = void 0;
            if (o && this._superSampler.finished())
                u = this._superSampler.output();
            else {
                o && this._superSampler.jitterProjection(i, this.width, this.height),
                this._bufferShareManager.begin(e.getContext()),
                this._bufferShareManager.setupSceneBuffer(this._sceneBuffer);
                var h = this._bufferShareManager.setupPasses(this._overLayPasses);
                (this._needPreSetupRenderTarget || h) && (this._overLayPasses.forEach((function(t, i) {
                    t.isActive() && 2 === t._schemeBuffer.depthShareType && t._schemeBuffer.setupRenderTarget(e)
                }
                )),
                this._needPreSetupRenderTarget = !1),
                this._sceneBuffer.useMRT = l,
                c = this._sceneBuffer.getSchemeBuffer();
                var p = this._bufferShareManager.getInputColorTexture();
                p && (this._copyPass.uniforms[this._copyPass.textureID].value = p,
                this._copyPass.clear = !0,
                this._copyPass.clearDepthStencil = this.autoClearDepthStencil,
                this._copyPass.material.transparent = !1,
                this._copyPass.render(e, c),
                this._copyPass.clearDepthStencil = !0),
                this._sceneBuffer.render(e, t, i, this._bufferShareManager.needClear()),
                s && ((this._config.postEffect.screenSpaceAmbientOcclusion.enable || this._config.postEffect.screenSpaceReflection.enable || this._config.postEffect.dof.enable) && this._gBuffer.render(e, t, i, this._config.postEffect.screenSpaceAmbientOcclusion.ignoreTransparent),
                this._config.postEffect.screenSpaceAmbientOcclusion.enable && (o && this._config.postEffect.screenSpaceAmbientOcclusion.temporalFilter && this._ssaoPrePass.setKernelSize(this._ssaoKernalSize, this._superSampler.frame()),
                this._ssaoPrePass.render(this._gBuffer.getNormalGlossinessTexture(), this._gBuffer.getDepthTexture(), e, i, c, this.onlyAO)),
                this._config.postEffect.screenSpaceReflection.enable && (o && this._config.postEffect.screenSpaceReflection.temporalFilter ? (this._ssrPrePass.jitter = !!this._superSampler.frame(),
                this._ssrPrePass._blurPass.material.uniforms.blurSize.value = 1 + this._superSampler.frame() / this._superSampler.getSamplingSize()) : (this._ssrPrePass.jitter = !1,
                this._ssrPrePass._blurPass.material.uniforms.blurSize.value = 2),
                this._ssrPrePass.render(c.texture, this._gBuffer.getNormalGlossinessTexture(), this._gBuffer.getDepthTexture(), e, i, c, this.onlySSR))),
                o ? (u = this._superSampler.sample(e, c.texture),
                i.clearViewOffset()) : u = c
            }
            this._copyPass.clear = !0,
            this._copyPass.material.transparent = !1,
            this._copyPass.render(e, this._tempRenderTarget2, u);
            var d = this._tempRenderTarget2
                , f = this._tempRenderTarget1
                , m = function(t) {
                if (n._config.postEffect[t].enable) {
                    var r = n._effects.get(t);
                    if ("dof" == t && (r._pass.uniforms.znear.value = i.near,
                    r._pass.uniforms.zfar.value = i.far),
                    r.render(e, f, d, .01667),
                    r.needSwapBuffer) {
                        var o = d;
                        d = f,
                        f = o
                    }
                }
            };
            this._effectList1.forEach(m),
            this.enableOverlays && this._overLayPasses.forEach((function(r) {
                r.isActive() && r.render(e, t, i, d, l)
            }
            )),
            this.enableOutlines && this._outlinePasses.forEach((function(r) {
                r.isActive() && r.render(e, t, i, d, l)
            }
            )),
            this._effectList2.forEach(m),
            this._copyPass.clear = e.autoClear,
            this._copyPass.material.transparent = this.supportTransparent,
            this._copyPass.render(e, r || void 0, d)
        } else {
            e.setRenderTarget(r || null),
            e.render(t, i);
            var g = this.schemeAutoMSAA && a;
            this.enableOverlays && this._overLayPasses.forEach((function(r) {
                r.isActive() && (r._schemeBuffer.clearDepthShare(),
                r.render(e, t, i, void 0, g))
            }
            )),
            this.enableOutlines && this._outlinePasses.forEach((function(r) {
                r.isActive() && r.render(e, t, i, void 0, g)
            }
            ))
        }
    }
    ,
    e.prototype.dirty = function(e) {
        this._config.temporalSuperSampling.enable && this._superSampler.start(),
        e ? "Outline" === (e = wn(e)) ? this._outlinePasses.forEach((function(e) {
            return e.dirty()
        }
        )) : this._overLayPasses.has(e) && this._overLayPasses.get(e).dirty() : (this._overLayPasses.forEach((function(e) {
            return e.dirty()
        }
        )),
        this._outlinePasses.forEach((function(e) {
            return e.dirty()
        }
        )))
    }
    ,
    e.prototype.dispose = function() {
        this._tempRenderTarget1.dispose(),
        this._tempRenderTarget2.dispose(),
        this._sceneBuffer.dispose(),
        this._superSampler.dispose(),
        this._gBuffer.dispose(),
        this._bufferShareManager.dispose(),
        this._ssaoPrePass.dispose(),
        this._ssrPrePass.dispose(),
        this._copyPass.material.dispose(),
        this._overLayPasses.forEach((function(e) {
            return e.dispose()
        }
        )),
        this._outlinePasses.forEach((function(e) {
            return e.dispose()
        }
        )),
        this._effects.forEach((function(e) {
            return e.dispose()
        }
        ))
    }
    ,
    e.prototype.getActiveOverlayPasses = function() {
        return this.enableOverlays ? Array.from(this._overLayPasses.values()).filter((function(e) {
            return e.isActive()
        }
        )) : []
    }
    ,
    e.prototype.getOutlinePasses = function() {
        return this._outlinePasses
    }
    ,
    e.prototype.disableAllOverlayPasses = function() {
        this._overLayPasses.forEach((function(e) {
            return e.$enable = !1
        }
        ))
    }
    ,
    _createClass(e, [{
        key: "combineGlow",
        set: function(e) {
            this._overLayPasses.get("CombineGlow").$enable = e,
            this._overLayPasses.get("Glow").$enable = !e,
            this._overLayPasses.get("MiddleGlow").$enable = !e,
            this._overLayPasses.get("SmallGlow").$enable = !e
        },
        get: function() {
            return this._overLayPasses.get("CombineGlow").$enable
        }
    }]),
    e
}();
Jo = new THREE.Vector3
    , Yo = new THREE.Vector3
    , Qo = {
    vertexShader: "\n        #include <skinning_pars_vertex>\n        void main() {\n            #include <skinbase_vertex>\n            #include <begin_vertex>\n            #include <skinning_vertex>\n            #include <project_vertex>\n        }\n    ",
    fragmentShader: "\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    "
};
Zo = new THREE.ShaderMaterial(Qo);
Ko = new THREE.ShaderMaterial(Qo);
Ko.skinning = !0;
var $o = new THREE.Color
    , es = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.camera = new THREE.OrthographicCamera;
        var n = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBAFormat
        };
        this.tempRenderTarget = new THREE.WebGLRenderTarget(t,i,n),
        this.radius = .1,
        this.renderTargetsHorizontal = [],
        this.renderTargetsVertical = [],
        this.nMips = 5;
        for (var o = Math.round(t / 2), s = Math.round(i / 2), a = 0; a < this.nMips; a++) {
            var l = new THREE.WebGLRenderTarget(o,s,n);
            l.texture.name = "AOBaker.h" + a,
            l.texture.generateMipmaps = !1,
            this.renderTargetsHorizontal.push(l);
            var u = new THREE.WebGLRenderTarget(o,s,n);
            u.texture.name = "AOBaker.v" + a,
            u.texture.generateMipmaps = !1,
            this.renderTargetsVertical.push(u),
            o = Math.round(o / 2),
            s = Math.round(s / 2)
        }
        this.separableBlurMaterials = [];
        var c = [3, 5, 7, 9, 11];
        o = Math.round(t / 2),
        s = Math.round(i / 2);
        for (var h = 0; h < this.nMips; h++)
            this.separableBlurMaterials.push(this.getSeperableBlurMaterial(c[h])),
            this.separableBlurMaterials[h].uniforms.texSize.value = new THREE.Vector2(o,s),
            o = Math.round(o / 2),
            s = Math.round(s / 2);
        this.compositeMaterial = this.getCompositeMaterial(this.nMips),
        this.compositeMaterial.uniforms.blurTexture1.value = this.renderTargetsVertical[0].texture,
        this.compositeMaterial.uniforms.blurTexture2.value = this.renderTargetsVertical[1].texture,
        this.compositeMaterial.uniforms.blurTexture3.value = this.renderTargetsVertical[2].texture,
        this.compositeMaterial.uniforms.blurTexture4.value = this.renderTargetsVertical[3].texture,
        this.compositeMaterial.uniforms.blurTexture5.value = this.renderTargetsVertical[4].texture,
        this.compositeMaterial.uniforms.bloomRadius.value = .1,
        this.compositeMaterial.needsUpdate = !0;
        this.compositeMaterial.uniforms.bloomFactors.value = [.5, .7, .8, .9, 1],
        this._camera = new THREE.OrthographicCamera(-1,1,1,-1,0,1),
        this.scene = new THREE.Scene,
        this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),
        this.quad.frustumCulled = !1,
        this.scene.add(this.quad)
    }
    return e.prototype.bake = function(e, t, i, r) {
        i && this.fit(i, r),
        e.materialManager.hasStrategy("AOBaker") || e.materialManager.addStrategy("AOBaker", (function(e, t, i, r, n, o) {
            return this.userData.ground ? null : n.skinning ? Ko : Zo
        }
        ));
        var n = e.autoClear;
        e.autoClear = !1,
        $o.copy(e.getClearColor());
        var o = e.getClearAlpha();
        e.setClearColor(new THREE.Color(1,1,1), 1),
        e.materialManager.setMode("AOBaker");
        var s = t.autoUpdate
            , a = t.background
            , l = e.shadowMap.enable;
        t.autoUpdate = !1,
        t.background = null,
        e.shadowMap.enable = !1,
        e.setRenderTarget(this.tempRenderTarget),
        e.clear(),
        e.render(t, this.camera),
        t.autoUpdate = s,
        t.background = a,
        e.shadowMap.enable = l,
        e.materialManager.setMode(0);
        for (var u = this.tempRenderTarget, c = 0; c < this.nMips; c++)
            this.quad.material = this.separableBlurMaterials[c],
            this.separableBlurMaterials[c].uniforms.colorTexture.value = u.texture,
            this.separableBlurMaterials[c].uniforms.direction.value = new THREE.Vector2(1,0),
            e.setRenderTarget(this.renderTargetsHorizontal[c]),
            e.clear(),
            e.render(this.scene, this._camera),
            this.separableBlurMaterials[c].uniforms.colorTexture.value = this.renderTargetsHorizontal[c].texture,
            this.separableBlurMaterials[c].uniforms.direction.value = new THREE.Vector2(0,1),
            e.setRenderTarget(this.renderTargetsVertical[c]),
            e.clear(),
            e.render(this.scene, this._camera),
            u = this.renderTargetsVertical[c];
        this.quad.material = this.compositeMaterial,
        this.compositeMaterial.uniforms.bloomRadius.value = 1 - this.radius,
        e.setRenderTarget(this.tempRenderTarget),
        e.clear(),
        e.render(this.scene, this._camera),
        e.setClearColor($o, o),
        e.autoClear = n
    }
    ,
    e.prototype.fit = function(e, t) {
        var i = e.getCenter(Jo)
            , r = e.getSize(Yo);
        this.camera.position.set(i.x, i.y + r.y, i.z),
        this.camera.rotation.set(-Math.PI / 2, 0, 0),
        this.camera.matrixAutoUpdate = !1,
        this.camera.updateMatrix(),
        this.camera.matrix.premultiply(t),
        this.camera.near = r.y / 3,
        this.camera.far = 2 * r.y,
        this.camera.left = -r.x / 2 + .075,
        this.camera.right = r.x / 2 - .075,
        this.camera.top = r.z / 2 - .075,
        this.camera.bottom = -r.z / 2 + .075,
        this.camera.updateProjectionMatrix(),
        r.x = 1024,
        r.z = 1024,
        this.tempRenderTarget.setSize(r.x, r.z);
        for (var n = Math.round(r.x / 2), o = Math.round(r.z / 2), s = 0; s < this.nMips; s++)
            this.renderTargetsHorizontal[s].setSize(n, o),
            this.renderTargetsVertical[s].setSize(n, o),
            this.separableBlurMaterials[s].uniforms.texSize.value = new THREE.Vector2(n,o),
            n = Math.round(n / 2),
            o = Math.round(o / 2)
    }
    ,
    e.prototype.dispose = function() {
        this.tempRenderTarget.dispose();
        for (var e = 0; e < this.renderTargetsHorizontal.length; e++)
            this.renderTargetsHorizontal[e].dispose();
        for (var t = 0; t < this.renderTargetsVertical.length; t++)
            this.renderTargetsVertical[t].dispose()
    }
    ,
    e.prototype.getSeperableBlurMaterial = function(e) {
        return new THREE.ShaderMaterial({
            defines: {
                KERNEL_RADIUS: e,
                SIGMA: e
            },
            uniforms: {
                colorTexture: {
                    value: null
                },
                texSize: {
                    value: new THREE.Vector2(.5,.5)
                },
                direction: {
                    value: new THREE.Vector2(.5,.5)
                }
            },
            vertexShader: "varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",
            fragmentShader: "#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"
        })
    }
    ,
    e.prototype.getCompositeMaterial = function(e) {
        return new THREE.ShaderMaterial({
            defines: {
                NUM_MIPS: e
            },
            uniforms: {
                blurTexture1: {
                    value: null
                },
                blurTexture2: {
                    value: null
                },
                blurTexture3: {
                    value: null
                },
                blurTexture4: {
                    value: null
                },
                blurTexture5: {
                    value: null
                },
                bloomFactors: {
                    value: null
                },
                bloomRadius: {
                    value: 0
                }
            },
            vertexShader: "varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",
            fragmentShader: "\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\t\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat factor0 = lerpBloomFactor(bloomFactors[0]);\n\t\t\t\t\tfloat factor1 = lerpBloomFactor(bloomFactors[1]);\n\t\t\t\t\tfloat factor2 = lerpBloomFactor(bloomFactors[2]);\n\t\t\t\t\tfloat factor3 = lerpBloomFactor(bloomFactors[3]);\n\t\t\t\t\tfloat factor4 = lerpBloomFactor(bloomFactors[4]);\n\t\t\t\t\tgl_FragColor = (factor0 * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\t\t\t\t\tfactor1 * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\t\t\t\t\tfactor2 * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\t\t\t\t\tfactor3 * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\t\t\t\t\tfactor4 * texture2D(blurTexture5, vUv)) / (factor0 + factor1 + factor2 + factor3 + factor4);\n\t\t\t\t}\t\n\t\t\t"
        })
    }
    ,
    _createClass(e, [{
        key: "ao",
        get: function() {
            return this.tempRenderTarget.texture
        }
    }]),
    e
}();
CombinedObject = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.setupTextureAnimations = function() {
        nr.hasTextureAnimation(this.node) && this.addControl(new nr, "texAnimControl")
    }
    ,
    t.prototype.setupUserData = function(t) {
        e.prototype.setupUserData.call(this, t),
        this.node.userData.isCombinedObject = !0
    }
    ,
    t.prototype.setupResources = function(t) {
        if (e.prototype.setupResources.call(this, t),
        this.loaded) {
            for (var i = this; i && i.isCombinedObject; )
                i = i.parent;
            var r = i.style._inheritThemeName;
            r && i.loaded && i.applyTheme(r, !1, !0)
        }
    }
    ,
    t.prototype._notifyLoadingObjects = function() {}
    ,
    t.prototype.loadResource = function() {
        e.prototype.loadResource.call(this, !0)
    }
    ,
    t.prototype.unloadResource = function() {
        e.prototype.unloadResource.call(this, !0)
    }
    ,
    t.prototype.isChildOfType = function(e) {
        for (var t = e.split("|"), i = this._parent; i; i = i._parent)
            for (var r = 0; r < t.length; r++) {
                if (i["is" + t[r]])
                    return !0
            }
        return !1
    }
    ,
    _createClass(t, [{
        key: "isCombinedObject",
        get: function() {
            return !0
        }
    }]),
    t
}(BaseObject);
Floor = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._height = 3,
        n._initBoxSize = null,
        n.miscObject = null,
        n.wallObject = null,
        n.roofObject = null,
        n.ceilingObject = null,
        n._marker = null,
        n._navigation = null,
        n._groundAOBaker = null,
        n._baked = !1,
        n._showObjectsInParentLevels = !1,
        n
    }
    return o(t, e),
    t.prototype.isBlockMouseOffEvent = function(e) {
        return !!this.isChildOf(e)
    }
    ,
    t.prototype.destroy = function() {
        this._groundAOBaker && (this.plan.node.traverse((function(e) {
            var t = e.material;
            t && (t.aoMap = null,
            t.needsUpdate = !0)
        }
        )),
        this._groundAOBaker.dispose(),
        this._groundAOBaker = null),
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype.synTransform = function(e) {
        this.setupUserData(e),
        this.parent || this.setupParent(e),
        e.skipSetupParent = !0,
        this.setupTranslation(e)
    }
    ,
    t.prototype.setupFromURL = function(e) {
        var t = this.app.confirmURL(e.url);
        this._url = t,
        this._setup(e)
    }
    ,
    t.prototype.customSetup = function(e) {
        this._height = e.height || this._height,
        this._initBoxSize = e.initBoxSize,
        this._showObjectsInParentLevels = Utils.parseValue(e.alwaysShowInsideObjs, this._showObjectsInParentLevels)
    }
    ,
    t.prototype.loadResource = function() {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        if (e.prototype.loadResource.call(this, t),
        !t) {
            var i = [this.roof, this.wall, this.plan, this.ceiling];
            i.forEach((function(e) {
                e && e.loadResource()
            }
            )),
            this.doors.forEach((function(e) {
                e.loadResource()
            }
            )),
            this.things.forEach((function(e) {
                e.isWindow && e.loadResource()
            }
            ));
            var r = this.misc;
            r && r.traverse((function(e) {
                e.node.isDoorOrWin && e.loadResource()
            }
            )),
            this.rooms.forEach((function(e) {
                e.loadResource(!1)
            }
            ))
        }
    }
    ,
    t.prototype.unloadResource = function() {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        if (t)
            e.prototype.unloadResource.call(this, t);
        else {
            e.prototype.unloadResource.call(this, !1);
            var i = [this.roof, this.wall, this.plan, this.ceiling];
            i.forEach((function(e) {
                e && e.unloadResource()
            }
            )),
            this.doors.forEach((function(e) {
                e.unloadResource()
            }
            )),
            this.things.forEach((function(e) {
                e.isWindow && e.unloadResource()
            }
            ));
            var r = this.misc;
            r && r.traverse((function(e) {
                e.node.isDoorOrWin && e.unloadResource()
            }
            )),
            this.rooms.forEach((function(e) {
                e.unloadResource(!1)
            }
            ))
        }
    }
    ,
    t.prototype.setupResources = function(t) {
        e.prototype.setupResources.call(this, t),
        this._ceilingNode = t.ceilingNode || this._ceilingNode,
        this._roofNode = t.roofNode || this._roofNode,
        this._floorNode = t.floorNode || this._floorNode,
        this._ceilingNode && (this.ceiling.node = this._ceilingNode),
        this._roofNode && (this.roof.node = this._roofNode),
        this._floorNode && (this.plan.node = this._floorNode)
    }
    ,
    t.prototype._getChildVisibles = function() {
        var e = this.children.concat([this.roof, this.ceiling, this.plan])
            , t = [];
        return e.forEach((function(e) {
            e && t.push(e.visible)
        }
        )),
        t
    }
    ,
    t.prototype._onGetChild = function() {
        return this.children.concat([this.roof, this.ceiling, this.plan])
    }
    ,
    t.prototype._getDoors = function(e) {
        for (var t = [], i = 0; i < this.doors.length; i++) {
            var r = this.doors[i];
            r[e] && t.push(r)
        }
        return t
    }
    ,
    t.prototype._createMarker = function(e) {
        var t = (e = e || {}).connectorName || /connector/
            , i = e.markerName || /marker/
            , r = this.attachPoints.query(t)
            , n = this.attachPoints.query(i);
        if (0 != r.length || 0 != n.length) {
            var o = r[0]
                , s = n[0];
            e.type = "Marker",
            e.parent = this,
            Utils.isNull(e.size) ? THING.Utils.error("floor's marker must provide size to show") : Utils.isNull(e.canvas) && Utils.isNull(e.url) ? THING.Utils.error("floor's marker must provide 'canvas' or 'url' to show") : (s && (e.position = s.position),
            o ? e.lineToPosition = o.position : e.lineColor && THING.Utils.error("Please make sure connector is avaliable for showing connection line of marker"),
            this._marker = this.app.create(e))
        }
    }
    ,
    t.prototype.setupChildVisibleAsParent = function(e, t) {
        this.visible || this._showObjectsInParentLevels || (e.visible = !1)
    }
    ,
    t.prototype.traverseRoofs = function(e) {
        this.roof && e(this.roof);
        for (var t = this.rooms, i = 0; i < t.length; i++) {
            var r = t[i].roof;
            r && e(r)
        }
    }
    ,
    t.prototype.showAllRoofs = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this.roof && (this.roof.visible = e);
        for (var t = this.rooms, i = 0; i < t.length; i++) {
            var r = t[i].roof;
            r && (r.visible = e)
        }
    }
    ,
    t.prototype.showAllCeilings = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
            , t = this.ceiling;
        t && (t.visible = e);
        for (var i = this.rooms, r = 0; r < i.length; r++)
            i[r].ceiling.visible = e
    }
    ,
    t.prototype.showMarker = function(e) {
        this._marker || this._createMarker(e),
        Utils.isBoolean(e) ? this._marker.visible = e : this._marker.setParams(e)
    }
    ,
    t.prototype.getRoomFromLocalPosition = function(e) {
        return this.getRoomFromWorldPosition(this.selfToWorld(e))
    }
    ,
    t.prototype.getRoomFromWorldPosition = function(e) {
        for (var t = this.rooms, i = 0; i < t.length; i++) {
            var r = t[i];
            if (r.getRayCastPosition(e))
                return r
        }
        return null
    }
    ,
    t.prototype.bake = function(e) {
        var t = this.plan;
        if (t) {
            for (var i = t.node.getMeshes(), r = 0; r < i.length; r++)
                if (i[r]instanceof THREE.Water)
                    return;
            if (s = this.wall) {
                var n = this;
                if (null === e) {
                    if (!this._baked)
                        return;
                    var o = function(e) {
                        e.isShaderMaterial || (Utils.revertValue(e, "aoMap"),
                        Utils.revertValue(e, "aoMapIntensity"),
                        e.needsUpdate = !0)
                    };
                    t.node.traverseMaterials(o),
                    this.rooms.forEach((function(e) {
                        var t = e.plan;
                        t && t.node.traverseMaterials(o)
                    }
                    )),
                    this._baked = !1
                } else {
                    var s;
                    if (e = e || {},
                    !(s = this.wall))
                        return;
                    var a = Utils.parseValue(e.intensity, 1.4);
                    this._groundAOBaker || (this._groundAOBaker = new es);
                    var l = s.getLocalBoundingBox(!0, !0).toBox();
                    this._initBoxSize && l.max.addVectors(l.min, Utils.parseVector3(this._initBoxSize).addScalar(.15)),
                    this._groundAOBaker.bake(this.app.renderer, s.node, l, this.node.matrixWorld);
                    var u = function(e, t) {
                        t.isShaderMaterial || (Utils.backupValue(t, "aoMap"),
                        Utils.backupValue(t, "aoMapIntensity"),
                        t.aoMap = n._groundAOBaker.ao,
                        t.aoMapIntensity = a,
                        t.needsUpdate = !0)
                    };
                    t.style._cloneAndModifyMaterial((function(e, t, i) {
                        u(0, t)
                    }
                    ), !0, (function(e) {
                        return !!e.isShaderMaterial || !e._mustClone && !(!e._isCloned() || !e._getOriginal())
                    }
                    )),
                    this.rooms.forEach((function(e) {
                        var t = e.plan;
                        t && t.style._cloneAndModifyMaterial((function(e, t, i) {
                            u(0, t)
                        }
                        ))
                    }
                    )),
                    this._baked = !0
                }
            }
        }
    }
    ,
    t.prototype.canNavigation = function() {
        return !0
    }
    ,
    t.prototype._getLinkableObjects = function() {
        var t = this.rooms;
        return t = t.concat(e.prototype._getLinkableObjects.call(this))
    }
    ,
    t.prototype._getLinkableDoors = function() {
        var t = this.elevatorDoors;
        return t = (t = t.concat(this.stairDoors)).concat(e.prototype._getLinkableDoors.call(this))
    }
    ,
    t.prototype._setupNavigationGraph = function(e, t) {
        var i = this._getLinkableDoors();
        if (t) {
            e[t.id] = e[t.id] || {};
            for (var r = 0; r < i.length; r++) {
                var n = i[r];
                e[n.id] = e[n.id] || {};
                var o = {
                    startPosition: t.position,
                    endPosition: n.position
                };
                if (!n._room) {
                    var s = this._navigation.getRoomID(n.position);
                    -1 !== s && (n._room = this._navigation._objects[s])
                }
                o.startRoom = t.room,
                o.endRoom = n._room;
                var a = this.getFindingPathLength(o);
                -1 != a && (e[t.id][n.id] = e[n.id][t.id] = a)
            }
        } else {
            if (!this._doorCache) {
                this._doorCache = {};
                for (var l = 0, u = i.length; l < u; l++)
                    for (var c = i[l], h = 0, p = i.length; h < p; h++)
                        if (l !== h) {
                            var d = i[h];
                            if (!d)
                                break;
                            this._doorCache[c.id] = this._doorCache[c.id] || {},
                            this._doorCache[d.id] = this._doorCache[d.id] || {};
                            var f = {
                                startPosition: d.position,
                                endPosition: c.position
                            }
                                , m = this.getFindingPathLength(f);
                            -1 != m && (this._doorCache[d.id][c.id] = this._doorCache[c.id][d.id] = m)
                        }
            }
            for (var g in this._doorCache) {
                var v = this._doorCache[g];
                for (var y in v)
                    e[g] = e[g] || {},
                    e[g][y] = this._doorCache[g][y]
            }
        }
        for (var b = 0; b < i.length; b++) {
            var _ = i[b]
                , x = _.owner;
            x && (e[_.id] = e[_.id] || {},
            e[x.id] = e[x.id] || {},
            e[x.id][_.id] = e[_.id][x.id] = 1)
        }
    }
    ,
    t.prototype.onBeforeCapture = function() {
        var e = this.plan;
        if (e) {
            var t = function(e) {
                var t = e.material;
                t && (Utils.backupValue(t, "aoMap"),
                t.aoMap = null,
                t.needsUpdate = !0)
            };
            e.node.traverseAll((function(e) {
                t(e)
            }
            )),
            this.rooms.forEach((function(e) {
                var i = e.plan;
                i && i.node.traverseAll((function(e) {
                    t(e)
                }
                ))
            }
            ))
        }
    }
    ,
    t.prototype.onAfterCapture = function() {
        var e = this.plan;
        if (e) {
            var t = function(e) {
                var t = e.material;
                t && (Utils.revertValue(t, "aoMap"),
                t.needsUpdate = !0)
            };
            e.node.traverseAll((function(e) {
                t(e)
            }
            )),
            this.rooms.forEach((function(e) {
                var i = e.plan;
                i && i.node.traverseAll((function(e) {
                    t(e)
                }
                ))
            }
            ))
        }
    }
    ,
    t.prototype.showThings = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Floor] Please use '.things.visible=true/false' to replace '.showThings'"),
        this.things.visible = e
    }
    ,
    t.prototype.showDoors = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Floor] Please use '.things.visible=true/false' to replace '.showThings'"),
        this.doors.visible = e
    }
    ,
    t.prototype.hideMarker = function() {
        THING.Utils.warn("[Floor] Please use '.showMarker(false)' to replace '.hideMarker'"),
        this.showMarker(!1)
    }
    ,
    t.prototype.setMarker = function(e) {
        THING.Utils.warn("[Floor] Please use '.showMarker(params)' to replace '.setMarker'"),
        this.showMarker(e)
    }
    ,
    t.prototype.showRoof = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Floor] Please use '.showAllRoofs()' to replace '.showRoof()'"),
        this.showAllRoofs(e)
    }
    ,
    t.prototype.showCeiling = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Floor] Please use '.showAllCeilings()' to replace '.showCeiling()'"),
        this.showAllCeilings(e)
    }
    ,
    _createClass(t, [{
        key: "isFloor",
        get: function() {
            return !0
        }
    }, {
        key: "isOutdoors",
        get: function() {
            for (var e = this._parent; e; e = e._parent)
                if (e.isBuilding && !e.hasFacades())
                    return !0;
            return !1
        }
    }, {
        key: "building",
        get: function() {
            return this.parents.query(".Building")[0]
        }
    }, {
        key: "indexOfBuilding",
        get: function() {
            return this.indexOfParent(!0)
        }
    }, {
        key: "levelNumber",
        get: function() {
            return this.indexOfParent(!0) + 1
        }
    }, {
        key: "things",
        get: function() {
            return this.query(".Thing", !1)
        }
    }, {
        key: "doors",
        get: function() {
            return this.query(".Door", !1)
        }
    }, {
        key: "elevatorDoors",
        get: function() {
            return this.doors.query(".ElevatorDoor", !1)
        }
    }, {
        key: "stairDoors",
        get: function() {
            return this.doors.query(".StairDoor", !1)
        }
    }, {
        key: "stairs",
        get: function() {
            return this.query(".Stair", !1)
        }
    }, {
        key: "rooms",
        get: function() {
            return this.query(".Room", !1)
        }
    }, {
        key: "misc",
        get: function() {
            return this.miscObject || (this.miscObject = this.query(".CombinedObject").query("[userData/type=CombineMiscParent]")[0]),
            this.miscObject
        }
    }, {
        key: "plan",
        get: function() {
            return this.floorObject || (this.floorObject = this.query(".CombinedObject").query("[userData/type=CombineFloorParent]")[0]),
            this.floorObject
        }
    }, {
        key: "wall",
        get: function() {
            return this.wallObject || (this.wallObject = this.query(".CombinedObject").query("[userData/type=CombineWallParent]")[0]),
            this.wallObject
        }
    }, {
        key: "roof",
        get: function() {
            return this.roofObject || (this.roofObject = this.query(".CombinedObject").query("[userData/type=CombineRoofParent]")[0]),
            this.roofObject
        }
    }, {
        key: "ceiling",
        get: function() {
            return this.ceilingObject || (this.ceilingObject = this.query(".CombinedObject").query("[userData/type=CombineCeilingParent]")[0]),
            this.ceilingObject
        }
    }, {
        key: "marker",
        get: function() {
            return this._marker
        }
    }, {
        key: "height",
        get: function() {
            return this._height
        }
    }, {
        key: "showObjectsInParentLevels",
        get: function() {
            return this._showObjectsInParentLevels
        }
    }, {
        key: "isFloorPlan",
        get: function() {
            return THING.Utils.warn("[Floor] Please use '.isFloor' to replace '.isFloorPlan'"),
            !0
        }
    }, {
        key: "levelNum",
        get: function() {
            return THING.Utils.warn("[Floor] Please use '.levelNumber' to replace '.levelNum'"),
            this.levelNumber
        }
    }]),
    t
}(BaseObject);
rs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.name = "Outdoors",
        n._floorNode = null,
        n
    }
    return o(t, e),
    t.prototype.destroy = function() {
        this._floorNode = null,
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype.setupChildVisibleAsParent = function() {}
    ,
    t.prototype.setup = function(e) {
        this.setupID(e),
        this.setupParent(e),
        this.parent.outdoors = this,
        this.setupUserData(e)
    }
    ,
    t.prototype.setPolygonOffset = function(e) {
        var t = this._floorNode;
        t && new BaseObject(this.app)._init(t).style.setPolygonOffset(e)
    }
    ,
    _createClass(t, [{
        key: "floorNode",
        set: function(e) {
            this._floorNode = e
        },
        get: function() {
            return this._floorNode
        }
    }, {
        key: "canNotQueryFromSelector",
        get: function() {
            return !0
        }
    }, {
        key: "isOutdoors",
        get: function() {
            return !0
        }
    }]),
    t
}(Floor);
Group = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._style = null,
        this._id = "",
        this._name = "",
        this._queryID = THING.Math.generateUUID(),
        this._userData = {},
        this._angles = [0, 0, 0],
        this._events = {},
        this._tags = [],
        this._groups = [],
        this._children = new Selector(this.app)
    }
    return e.prototype.isGroup = function() {
        return !0
    }
    ,
    e.prototype.setup = function(e) {
        this._id = e.id || "",
        this._name = e.name || "",
        this._tags = e.tags || []
    }
    ,
    e.prototype.destroy = function() {
        this.app.objectManager.destroy(this);
        var e = this;
        this._children.forEach((function(t) {
            var i = t.groups.indexOf(e);
            for (var r in -1 !== i && t.groups.splice(i, 1),
            e._events) {
                var n = e._events[r];
                for (var o in n)
                    t.off(o)
            }
        }
        ))
    }
    ,
    e.prototype.destroyAll = function() {
        this.destroy(),
        this._children.destroyAll()
    }
    ,
    e.prototype.hasAttribute = function(e) {
        return Utils.hasAttribute(this, e)
    }
    ,
    e.prototype.getAttribute = function(e) {
        return Utils.getAttribute(this, e)
    }
    ,
    e.prototype.setAttribute = function(e, t) {
        return Utils.setAttribute(this, e, t)
    }
    ,
    e.prototype.setAttributes = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        for (var i in e = e || {})
            (t || Utils.isUndefined(this[i])) && this.setAttribute(i, e[i])
    }
    ,
    e.prototype.add = function(e) {
        var t = this;
        if (e instanceof Selector)
            e.forEach((function(e) {
                t.add(e)
            }
            ));
        else
            for (var i in this._children.add(e),
            -1 === e.groups.indexOf(this) && e.groups.push(this),
            this._children.forEach((function(e) {
                e.groups.sort((function(e, t) {
                    return t.children.length - e.children.length
                }
                ))
            }
            )),
            this._events) {
                var r = this._events[i];
                for (var n in r) {
                    var o = r[n];
                    this.on(i, o.selector, o.userData, o.callback, null, o.priority)
                }
            }
    }
    ,
    e.prototype.remove = function(e) {
        var t = this;
        if (e instanceof Selector)
            e.forEach((function(e) {
                t.remove(e)
            }
            ));
        else {
            this._children.remove(e);
            var i = e.groups.indexOf(this);
            for (var r in -1 !== i && e.groups.splice(i, 1),
            this._events) {
                var n = this._events[r];
                for (var o in n) {
                    var s = n[o];
                    this.off(r, s.selector, s.tag)
                }
            }
        }
    }
    ,
    e.prototype._transform = function(e) {
        var t = new THREE.Group;
        t.position.copy(Utils.parseVector3(this.position)),
        this.app.scene.add(t),
        t.updateMatrixWorld();
        for (var i = [], r = 0; r < this._children.length; r++) {
            var n = this._children[r];
            i.push(n.node.parent),
            n.node.attachToParent(t, this.app.scene)
        }
        e(t),
        t.updateWorldMatrix(!1, !1);
        for (r = 0; r < this._children.length; r++) {
            (n = this._children[r]).node.attachToParent(i[r], this.app.scene),
            n.static && n.node._synMatrixWorld()
        }
        this.app.scene.remove(t)
    }
    ,
    e.prototype.translate = function(e) {
        this._transform((function(t) {
            t.translateX(e[0]),
            t.translateY(e[1]),
            t.translateZ(e[2])
        }
        ))
    }
    ,
    e.prototype.translateX = function(e) {
        this.translate([e, 0, 0])
    }
    ,
    e.prototype.translateY = function(e) {
        this.translate([0, e, 0])
    }
    ,
    e.prototype.translateZ = function(e) {
        this.translate([0, 0, e])
    }
    ,
    e.prototype.query = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = new Selector(this.app,this._children);
        return i.select(e),
        t && this._children.forEach((function(t) {
            i.add(t.query(e))
        }
        )),
        i
    }
    ,
    e.prototype._parseEvent = function(e, t, i, r, n) {
        var o = Utils.parseEvent(e, t, i, r, n);
        o._callback = o.callback;
        var s = this;
        return o.callback = function(e) {
            o._callback && o._callback.call(s, e)
        }
        ,
        o.tag = o.tag || "",
        o.tag += "_" + this._queryID,
        o
    }
    ,
    e.prototype._updateEvents = function(e) {
        this._events[e.eventType] = this._events[e.eventType] || [],
        this._events[e.eventType][e.tag] = e
    }
    ,
    e.prototype._removeEvents = function(e) {
        var t = this._events[e.eventType];
        t && delete t[e.tag]
    }
    ,
    e.prototype.on = function(e, t, i, r, n, o) {
        var s = this._parseEvent(t, i, r, n, o);
        return s.eventType = e,
        this._updateEvents(s),
        this.children.on(e, s.selector, s.userData, s.callback, s.tag, s.priority),
        this
    }
    ,
    e.prototype.off = function(e, t, i) {
        var r = this._parseEvent(t, null, i);
        return r.eventType = e,
        this._removeEvents(r),
        this.children.off(e, r.selector, r.tag),
        this
    }
    ,
    e.prototype.one = function(e, t, i, r, n, o) {
        var s = this._parseEvent(t, i, r, n, o);
        return s.eventType = e,
        this._updateEvents(s),
        this.children.one(e, s.selector, s.userData, s.callback, s.tag, s.priority),
        this
    }
    ,
    e.prototype._getAvgVector3 = function(e) {
        if (!this._children.length)
            return [0, 0, 0];
        var t = new THREE.Vector3;
        return this._children.forEach((function(i) {
            var r = Utils.parseVector3(i[e]);
            t.add(r)
        }
        )),
        t.divideScalar(this._children.length),
        t.toArray()
    }
    ,
    _createClass(e, [{
        key: "type",
        get: function() {
            return "Group"
        }
    }, {
        key: "style",
        get: function() {
            return this._children.style
        }
    }, {
        key: "id",
        set: function(e) {
            this._id = e
        },
        get: function() {
            return this._id
        }
    }, {
        key: "name",
        set: function(e) {
            this._name = e
        },
        get: function() {
            return this._name
        }
    }, {
        key: "queryID",
        set: function(e) {
            this._queryID = e
        },
        get: function() {
            return this._queryID
        }
    }, {
        key: "userData",
        set: function(e) {
            this._userData = e
        },
        get: function() {
            return this._userData
        }
    }, {
        key: "tags",
        set: function(e) {
            this._tags = e
        },
        get: function() {
            return this._tags
        }
    }, {
        key: "groups",
        get: function() {
            return this._groups
        }
    }, {
        key: "position",
        set: function(e) {
            var t = Utils.parseVector3(e)
                , i = this;
            this._transform((function(e) {
                e._setWorldPosition(t, i.app.root.static)
            }
            ))
        },
        get: function() {
            return this._getAvgVector3("position")
        }
    }, {
        key: "angles",
        set: function(e) {
            var t = THING.Math.subVector(this._angles, e);
            this._angles = e;
            var i = Utils.parseEuler(t);
            this._transform((function(e) {
                e.quaternion.setFromEuler(i)
            }
            ))
        },
        get: function() {
            return this._angles
        }
    }, {
        key: "parents",
        get: function() {
            var e = new THING.Selector(this.app,[]);
            return this._children.forEach((function(t) {
                e.add(t.parents)
            }
            )),
            e
        }
    }, {
        key: "children",
        get: function() {
            return this._children
        }
    }, {
        key: "visible",
        set: function(e) {
            this.children.visible = e
        }
    }, {
        key: "pickable",
        set: function(e) {
            this.children.pickable = e
        }
    }, {
        key: "boundingBox",
        get: function() {
            for (var e = new THREE.Box3, t = 0; t < this.children.length; t++) {
                var i = this.children[t];
                e.union(i.box)
            }
            var r = new THREE.Vector3;
            e.getCenter(r);
            var n = new THREE.Vector3;
            e.getSize(n);
            var o = this;
            return {
                min: e.min.toArray(),
                max: e.max.toArray(),
                center: r.toArray(),
                size: n.toArray(),
                radius: n.length(),
                getWorldPosition: function(e) {
                    var t = Utils.parseValue(e.yAngle, 0)
                        , i = Utils.parseValue(e.xAngle, 0)
                        , r = Utils.parseValue(e.distance || e.radius, n.length())
                        , s = e.radiusFactor;
                    s && (r = n.length() * s);
                    var a = (new THREE.Vector3).getDirectionFromAngles(t, i, r);
                    return o.selfToWorld(a)
                }
            }
        }
    }]),
    e
}();
os = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.app = t,
        this.nodes = [],
        this.scene = this.app.scene,
        this.outdoors = this.app.outdoors,
        this.objectPool = this.app.objectPool,
        this.worldNode = new THREE.Object3D,
        this.campus = null,
        this.baseURL = null,
        this.curLoadGLTFIndex = 0,
        this.splitLoadedGLTFCount = 0,
        this.allLoadedGLTFCount = 0,
        this.sliceRootNodeArray = [],
        this.sceneJsonData = null,
        this.states = null,
        this.loadSpeed = .1,
        this.isCamFitScene = !0,
        i && (i.position && (this.campusPosition = i.position),
        i.rotation && (this.campusRotation = i.rotation),
        void 0 !== i.isCamFitScene && null !== i.isCamFitScene && (this.isCamFitScene = i.isCamFitScene),
        void 0 !== i.isDelayLoadFloorPlan && null !== i.isDelayLoadFloorPlan && (this.isDelayLoadFloorPlan = i.isDelayLoadFloorPlan),
        i.campus && (this.campus = i.campus))
    }
    return e.prototype.load = function(e) {
        var t = this;
        return this.baseURL = e,
        this.scene.add(this.worldNode),
        new Promise((function(e, i) {
            t.loadSceneJson().then((function(i) {
                t.parseObjects().then((function() {
                    e(t.campus)
                }
                ))
            }
            )).then((function() {
                e(t.campus)
            }
            )).catch((function(e) {
                i(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadSceneJson = function() {
        var e = this;
        return new Promise((function(t, i) {
            new THREE.FileLoader(e.app.loadingManager).load(e.baseURL + "/scene.json", (function(i) {
                var r = JSON.parse(i);
                e.sceneJsonData = r,
                t(r)
            }
            ), (function(e) {}
            ), (function(e) {
                i("cant not load file: scene.json")
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parseObjects = function() {
        var e = this.sceneJsonData
            , t = this;
        return new Promise((function(i, r) {
            t.parse(e).then((function() {
                t.sliceRootNodeArray = [],
                i()
            }
            )).catch((function(e) {
                r(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parse = function(e) {
        var t = this;
        return new Promise((function(i, r) {
            t.parseWorld(e),
            i()
        }
        ))
    }
    ,
    e.prototype.parseWorld = function(e) {
        var t = this.worldNode;
        if (null == this.campus && (this.campus = this.app.objectManager.create({
            type: "Campus",
            name: "Campus",
            node: t
        }),
        this.app.scene.add(this.campus.node)),
        this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        e.outdoors && this.parseOutdoors(e.outdoors, t),
        e.buildings) {
            var i = e.buildings;
            for (var r in i) {
                var n = i[r]
                    , o = new THREE.Vector3(0,0,0)
                    , s = r
                    , a = void 0;
                n.name && (s = n.name),
                n.id && (a = n.id);
                var l = new THREE.Object3D
                    , u = this.app.objectManager.create({
                    type: "Building",
                    name: s,
                    id: a,
                    parent: this.campus,
                    node: l
                });
                if (u.app = this.app,
                u.node.position.x = o.x,
                u.node.position.y = o.y,
                u.node.position.z = o.z,
                n.plans && this.parseFloorPlans(n.plans, u),
                n.facades) {
                    var c = n.facades;
                    for (var h in c)
                        this.createThing(c[h], u, "Facade")
                }
                if (n.facadegroups) {
                    var p = n.facadegroups;
                    for (var d in p)
                        n = p[d],
                        this.createGroup(n, u, "Facade")
                }
                if (n.groups) {
                    p = n.groups;
                    for (var d in p) {
                        n = p[d];
                        this.createGroup(n, u)
                    }
                }
            }
        }
    }
    ,
    e.prototype.parseOutdoors = function(e) {
        var t = new THREE.Object3D;
        this.outdoors = this.app.objectManager.create({
            type: "Outdoors",
            name: "Outdoors",
            parent: this.campus,
            node: t
        }),
        this.app.outdoors || (this.app.outdoors = this.outdoors,
        this.app.currentParentObject = this.outdoors),
        this.processFloorPlanData(e, this.outdoors)
    }
    ,
    e.prototype.processFloorPlanData = function(e, t) {
        t.app = this.app,
        e.placements && this.parseThings(e.placements, t),
        e.videoprobes && this.parseThings(e.videoprobes, t),
        e.groups && this.parseGroups(e.groups, t),
        e.doororwindows && this.parseDoorWins(e.doororwindows, t),
        e.rooms && this.parseRooms(e.rooms, t)
    }
    ,
    e.prototype.parseRooms = function(e, t) {
        for (var i = 0; i < e.length; i++) {
            var r = e[i]
                , n = null;
            r.name && (n = r.name);
            var o = new THREE.Object3D("room_temp")
                , s = null
                , a = r.properties;
            if (a)
                for (var l in s = {},
                a) {
                    var u = a[l];
                    s[l] = u
                }
            var c = null
                , h = null
                , p = null
                , d = {};
            if (r.area && (h = r.area,
            d.area = h),
            r.circumference && (p = r.circumference,
            d.circumference = p),
            r.center) {
                var f = r.center;
                (c = new THREE.Vector3).set(f[0], f[1], -f[2]),
                d.center = c
            }
            this.app.objectManager.create({
                type: "Room",
                name: n,
                node: o,
                id: undefined,
                parent: t,
                properties: s,
                auxiliaryInfo: d
            })
        }
    }
    ,
    e.prototype.parseDoorWins = function(e, t) {
        new THREE.Group("doors");
        for (var i in e) {
            var r = e[i]
                , n = i
                , o = void 0;
            r.name && (n = r.name),
            r.id && (o = r.id);
            var s = new THREE.Object3D("doororwin_temp")
                , a = null;
            if (r.properties) {
                var l = r.properties;
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            }
            this.app.objectManager.create({
                type: "Door",
                name: n,
                node: s,
                id: o,
                parent: t,
                properties: a
            })
        }
    }
    ,
    e.prototype.parseGroups = function(e, t) {
        for (var i in e) {
            var r = e[i];
            (r.name || r.properties) && this.createGroup(r, t)
        }
    }
    ,
    e.prototype.createGroup = function(e, t) {
        var i, r, n, o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Thing", s = new THREE.Object3D("group_temp");
        e.id && (i = e.id),
        e.name && (r = e.name);
        var a = e.properties;
        if (a)
            for (var l in n = {},
            a) {
                var u = a[l];
                n[l] = u
            }
        var c = this.app.objectManager.create({
            type: o,
            name: r,
            id: i,
            node: s,
            parent: t,
            properties: n
        });
        return c
    }
    ,
    e.prototype.parseFloorPlans = function(e, t) {
        var i = [];
        for (var r in e) {
            var n = e[r]
                , o = n.id
                , s = "";
            n.name && (s = n.name);
            var a = new THREE.Object3D
                , l = this.app.objectManager.create({
                type: "Floor",
                name: s,
                id: o,
                node: a,
                parent: t
            });
            a.name = "floorPlan",
            t.node.add(l.node),
            this.processFloorPlanData(n, l),
            i.push(l)
        }
        return i
    }
    ,
    e.prototype.parseThings = function(e, t, i) {
        for (var r in e) {
            var n = e[r];
            (n.name || n.properties) && this.createThing(n, t, i)
        }
    }
    ,
    e.prototype.createThing = function(e, t, i) {
        var r, n, o, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "Thing";
        e.id && (r = e.id),
        e.name && (n = e.name);
        var a = e.properties;
        if (a)
            for (var l in o = {},
            a) {
                var u = a[l];
                o[l] = u
            }
        var c = new THREE.Object3D("temp_cannotuse")
            , h = this.app.objectManager.create({
            type: s,
            name: n,
            node: c,
            id: r,
            parent: t,
            properties: o
        });
        return h
    }
    ,
    e
}();
ss = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this.app = t,
        this.resourceUrl = null,
        this.relativeResourceUrl = null,
        this.sceneJson = null,
        this.scale = 1,
        this.curFloorPlan = null,
        this.tempTexture = null,
        this.indexJson = i,
        this.sceneJsonUri = "scene.json",
        this.defaultWallTextureUri = "Textures/RoomWall.jpg",
        this.defaultWallEdgeTextureUri = "Textures/WallEdge.jpg",
        this.defaultFloorTextureUri = "Textures/FloorDefault.jpg",
        this.defaultCeilingTextureUri = "Textures/CeilingDefault.jpg",
        this.defaultRoofTextureUri = "Textures/RoofDefault.jpg",
        this.defaultWallTexture = null,
        this.defaultCeilingTexture = null,
        this.defaultFloorTexture = null,
        this.defaultRoofTexture = null,
        this.defaultWallEdgeTexture = null,
        this.worldNode = new THREE.Object3D("world"),
        this.isCamFitScene = !0,
        this.campus = null,
        this.outdoorsVisible = !0,
        this.campusVisible = !0,
        this.enableUseHighestVersionResource = !0;
        this.worldNode;
        if (i && (i.position && (this.campusPosition = i.position),
        i.rotation && (this.campusRotation = i.rotation),
        void 0 !== i.isCamFitScene && null !== i.isCamFitScene && (this.isCamFitScene = i.isCamFitScene),
        i.scale && (this.campusScale = i.scale),
        void 0 !== i.outdoorsVisible && (this.outdoorsVisible = i.outdoorsVisible),
        void 0 !== i.campusVisible && (this.campusVisible = i.campusVisible),
        i.campus && (this.campus = i.campus),
        void 0 !== i.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = i.enableUseHighestVersionResource,
        json2mesh.DefaultSetting.enableUseHighestVersionResource = this.enableUseHighestVersionResource)),
        this.campus && (this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        this.campusScale && (this.campus.scale = this.campusScale)),
        i && i.default) {
            var o = i.default;
            o.sceneJson && (this.sceneJson = "export.json"),
            o.wallTexture && (this.defaultWallTextureUri = o.wallTexture),
            o.wallEdgeTexture && (this.defaultWallEdgeTextureUri = o.wallEdgeTexture),
            o.floorTexture && (this.defaultFloorTextureUri = o.floorTexture),
            o.ceilingTexture && (this.defaultCeilingTextureUri = o.ceilingTexture),
            o.roofTexture && (this.defaultRoofTextureUri = o.roofTexture)
        }
        n.loaderResourceUrl && (this.resourceUrl = n.loaderResourceUrl),
        null != this.app.options.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = this.app.options.enableUseHighestVersionResource,
        json2mesh.DefaultSetting.enableUseHighestVersionResource = this.enableUseHighestVersionResource),
        this.app.options.resourceLibraryUrl && (this.resourceUrl = this.app.options.resourceLibraryUrl),
        this.indexJson && this.indexJson.resourceLibrary && (this.relativeResourceUrl = this.indexJson.resourceLibrary)
    }
    return e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.exportJsonString = function(e) {
        for (var t = e.outdoors, i = e.buildings, r = [], n = [], o = 0; o < t.things.length; o++) {
            var s = t.things[o];
            r.push({
                id: s.id,
                name: s.name
            })
        }
        for (o = 0; o < t.rooms.length; o++) {
            var a = t.rooms[o];
            n.push({
                id: a.id,
                name: a.name
            })
        }
        var l = [];
        for (o = 0; o < i.length; o++) {
            for (var u = i[o], c = [], h = 0; h < u.floors.length; h++) {
                for (var p = u.floors[h], d = [], f = [], m = 0; m < p.things.length; m++) {
                    var g = p.things[m];
                    d.push({
                        id: g.id,
                        name: g.name
                    })
                }
                for (m = 0; m < p.rooms.length; m++) {
                    a = p.rooms[m];
                    f.push({
                        id: a.id,
                        name: a.name
                    })
                }
                c.push({
                    id: p.id,
                    name: p.name,
                    placements: d,
                    rooms: f
                })
            }
            l.push({
                id: u.id,
                name: u.name,
                plans: c
            })
        }
        return {
            id: e.id,
            name: e.name,
            outdoors: {
                id: t.id,
                name: t.name,
                placements: r,
                rooms: n
            },
            buildings: l
        }
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if ("String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node)
        }
        return this.relativeResourceUrl && (this.resourceUrl = this.sceneURL + this.relativeResourceUrl),
        new Promise((function(e, i) {
            t.updateProgress(.1),
            t.loadSceneJson().then((function(i) {
                t.sceneJson = JSON.parse(i),
                t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                t.updateProgress(.15);
                var r = new json2mesh.UBuilderSceneSimpleLoader;
                t.resourceUrl && (r.resourceManager.baseTextureUrl = t.resourceUrl + "/texture/",
                r.resourceManager.baseModelUrl = t.resourceUrl + "/model/"),
                r.load({
                    json: t.sceneJson,
                    customModeBaseUrl: t.sceneURL + "/"
                }).then((function(i) {
                    t.parseWorld(i),
                    t.updateProgress(.2),
                    t.updateProgress(1),
                    e(t.campus)
                }
                ))
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadSceneJson = function() {
        var e = this;
        return new Promise((function(t, i) {
            new THREE.FileLoader(e.app.loadingManager).load(e.sceneURL.appendURL(e.sceneJsonUri), (function(e) {
                t(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.updateProgress = function(e) {
        this.app.mainUI.updateLoadingProcess({
            object: this.campus,
            progress: e
        })
    }
    ,
    e.prototype.createTextureLoaderPromise = function(e) {
        var t = this;
        return new Promise((function(i, r) {
            (new THREE.TextureLoader).load(t.sceneURL + "/" + e, (function(e) {
                i(e)
            }
            ), (function(t) {
                THING.Utils.log(e + " " + t.loaded / t.total * 100 + "% loaded")
            }
            ), (function(t) {
                THING.Utils.log(e + "load error")
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadDefaultTexture = function() {
        var e = this;
        return new Promise((function(t, i) {
            var r = e.createTextureLoaderPromise(e.defaultWallTextureUri)
                , n = e.createTextureLoaderPromise(e.defaultWallEdgeTextureUri)
                , o = e.createTextureLoaderPromise(e.defaultFloorTextureUri)
                , s = e.createTextureLoaderPromise(e.defaultRoofTextureUri)
                , a = e.createTextureLoaderPromise(e.defaultCeilingTextureUri);
            Promise.all([r, n, o, s, a]).then((function(e) {
                DefaultResource.wallTexture = e[0],
                DefaultResource.wallEdgeTexture = e[1],
                DefaultResource.floorTexture = e[2],
                DefaultResource.ceilinngTexture = e[3],
                DefaultResource.roofTexture = e[4],
                t()
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parseWorld = function(e) {
        null === this.campus ? (this.campus = this.app.objectManager.create({
            uuid: e.id,
            id: e.userID,
            type: "Campus",
            name: "Campus",
            node: this.worldNode
        }),
        this.campus.visible = this.campusVisible,
        this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        this.campusScale && (this.campus.scale = this.campusScale)) : (this.campus.uuid = e.id,
        e.userID && (this.campus.id = e.userID));
        for (var t = 0; t < e.buildings.length; t++) {
            var i = e.buildings[t];
            this.parseBuilding(i)
        }
        if (e.outdoors) {
            var r = new THREE.Object3D("outdoors");
            r.name = "plan",
            this.outdoors = this.app.objectManager.create({
                uuid: e.outdoors.id,
                id: e.outdoors.userID,
                type: "Outdoors",
                name: e.outdoors.name,
                parent: this.campus,
                node: r
            }),
            this.outdoors.visible = this.outdoorsVisible,
            this.parseFloorPlan(e.outdoors, this.outdoors)
        }
    }
    ,
    e.prototype.parseBuilding = function(e) {
        var t = new THREE.Object3D("building");
        t.name = "building";
        var i = this.app.objectManager.create({
            uuid: e.id,
            id: e.userID,
            type: "Building",
            name: e.name,
            parent: this.campus,
            node: t,
            properties: e.properties
        });
        i.localPosition = e.position;
        for (var r = e.floorplans, n = e.facades, o = e.facadeGroups, s = 0; s < n.length; s++) {
            var a = n[s];
            this.app.objectManager.create({
                type: "Facade",
                id: a.userID,
                name: a.name,
                uuid: a.id,
                node: a.delayObject,
                parent: i,
                properties: a.properties
            })
        }
        for (s = 0; s < o.length; s++)
            a = o[s],
            this.app.objectManager.create({
                type: "Facade",
                uuid: a.id,
                id: a.userID,
                name: a.name,
                node: a.delayObject,
                parent: i,
                properties: a.properties
            });
        for (var l = 0; l < r.length; l++) {
            var u = r[l]
                , c = new THREE.Object3D("floorplan");
            c.name = "plan";
            var h = this.app.objectManager.create({
                id: u.userID,
                uuid: u.id,
                type: "Floor",
                name: u.name,
                properties: u.properties,
                node: c,
                parent: i
            });
            h.localPosition = u.position,
            this.parseFloorPlan(u, h),
            0 !== i.facades.length && (h.visible = !1)
        }
    }
    ,
    e.prototype.placementInitCallback = function(e) {
        this.app.objectManager.create({
            id: e.id,
            name: e.name,
            node: e.mesh,
            parent: plan,
            animations: e.resource.animations,
            properties: e.properties
        })
    }
    ,
    e.prototype.parseOutdoors = function(e) {}
    ,
    e.prototype.parseFloorPlan = function(e, t) {
        for (var i = 0; i < e.walls.length; i++)
            for (var r = e.walls[i], n = 0; n < r.doorOrWindows.length; n++) {
                var o = r.doorOrWindows[n]
                    , s = "Door";
                if (o.jsonData && o.jsonData.type && (s = o.jsonData.type),
                o.mesh) {
                    var a = this.app.objectManager.create({
                        type: "Door",
                        uuid: o.id,
                        id: o.userID,
                        name: o.name,
                        node: o.delayObject,
                        parent: t,
                        animations: o.resource.animations,
                        properties: o.properties
                    });
                    if (o.isOpen && a.open(),
                    a.animationClips)
                        for (n = 0; n < a.animationClips.length; n++) {
                            var l = a.animationClips[n];
                            if ("_defaultAnim_" === l.name) {
                                a.playAnimation({
                                    name: l.name,
                                    loop: !0,
                                    speed: .15
                                });
                                break
                            }
                        }
                } else
                    o.initCompleteCallback = function(e) {
                        e.jsonData && e.jsonData.type && e.jsonData.type;
                        var i = b.app.objectManager.create({
                            type: "Door",
                            uuid: e.id,
                            id: e.userID,
                            name: e.name,
                            node: e.mesh,
                            parent: t,
                            animations: e.resource.animations,
                            properties: e.properties
                        });
                        if (t.miscNode.add(i.node),
                        e.isOpen && i.open(),
                        i.animationClips)
                            for (var r = 0; r < i.animationClips.length; r++) {
                                var n = i.animationClips[r];
                                if ("_defaultAnim_" === n.name) {
                                    i.playAnimation({
                                        name: n.name,
                                        loop: !0,
                                        speed: .15
                                    });
                                    break
                                }
                            }
                    }
            }
        var u = new THREE.Object3D("combineFloor");
        for (i = 0; i < e.combineFloors.length; i++) {
            var c = e.combineFloors[i];
            u.add(c)
        }
        t.node.add(u),
        t.floorNode = u;
        var h = new THREE.Object3D("combineCeiling");
        for (i = 0; i < e.combineCeilings.length; i++) {
            var p = e.combineCeilings[i];
            h.add(p)
        }
        t.node.add(h),
        t.ceilingNode = h;
        var d = new THREE.Object3D("combineRoof");
        for (i = 0; i < e.combineRoofs.length; i++) {
            var f = e.combineRoofs[i];
            d.add(f)
        }
        t.node.add(d),
        t.roofNode = d;
        var m = new THREE.Object3D("combinePlacement");
        for (i = 0; i < e.combinePlacements.length; i++) {
            var g = e.combinePlacements[i];
            m.add(g)
        }
        t.node.add(m),
        t.miscNode = m;
        for (var v = new THREE.Object3D("combineWall"), y = 0; y < e.combineStraightManualWalls.length; y++) {
            r = e.combineStraightManualWalls[y];
            v.add(r)
        }
        for (y = 0; y < e.combineModelWalls.length; y++) {
            r = e.combineModelWalls[y];
            v.add(r)
        }
        for (y = 0; y < e.combineDoorOrWins.length; y++) {
            g = e.combineDoorOrWins[y];
            v.add(g)
        }
        t.node.add(v),
        t.wallNode = v;
        for (i = 0; i < e.groups.length; i++) {
            g = e.groups[i],
            s = "Thing";
            g.jsonData && g.jsonData.type && (s = g.jsonData.type);
            a = this.app.objectManager.create({
                uuid: g.id,
                id: g.userID,
                name: g.name,
                node: g.delayObject,
                belongRoomUserID: g.belongRoomUserID,
                type: s,
                parent: t,
                properties: g.properties
            })
        }
        var b = this;
        for (i = 0; i < e.placements.length; i++) {
            g = e.placements[i],
            s = "Thing";
            if (g.jsonData && g.jsonData.type && (s = g.jsonData.type),
            g.mesh) {
                if ((a = this.app.objectManager.create({
                    uuid: g.id,
                    id: g.userID,
                    name: g.name,
                    type: s,
                    belongRoomUserID: g.belongRoomUserID,
                    node: g.delayObject,
                    parent: t,
                    url: g.resource.getModelUrl(),
                    animations: g.resource.animations,
                    properties: g.properties
                })).bundleID = g.resource.modelID,
                a.bundleName = g.resource.modelName,
                g.isPlayAnim && a.containAnimation(g.animClip)) {
                    var _ = {
                        name: g.animClip,
                        loop: !1,
                        speed: .15
                    };
                    g.hasSkin && (_.loop = !0),
                    a.playAnimation(_)
                }
            } else
                g.initCompleteCallback = function(e) {
                    s = "Thing",
                    e.jsonData && e.jsonData.type && (s = e.jsonData.type);
                    var i = b.app.objectManager.create({
                        uuid: e.id,
                        id: e.userID,
                        belongRoomUserID: e.belongRoomUserID,
                        name: e.name,
                        node: e.mesh,
                        parent: t,
                        type: s,
                        url: e.resource.getModelUrl(),
                        animations: e.resource.animations,
                        properties: e.properties
                    });
                    if (i.bundleID = e.resource.modelID,
                    i.bundleName = e.resource.modelName,
                    t.miscNode.add(i.node),
                    e.isPlayAnim && i.containAnimation(e.animClip)) {
                        var r = {
                            name: e.animClip,
                            loop: !1,
                            speed: .15
                        };
                        e.hasSkin && (r.loop = !0),
                        i.playAnimation(r)
                    }
                }
        }
        for (i = 0; i < e.videoprobes.length; i++) {
            if ((g = e.videoprobes[i]).mesh)
                a = this.app.objectManager.create({
                    id: g.userID,
                    name: g.name,
                    uuid: g.id,
                    belongRoomUserID: g.belongRoomUserID,
                    node: g.delayObject,
                    parent: t,
                    url: g.resource.getModelUrl(),
                    animations: g.resource.animations,
                    properties: g.properties
                });
            else
                g.initCompleteCallback = function(e) {
                    var i = b.app.objectManager.create({
                        id: e.userID,
                        name: e.name,
                        uuid: e.id,
                        belongRoomUserID: e.belongRoomUserID,
                        node: e.mesh,
                        parent: t,
                        url: e.resource.getModelUrl(),
                        animations: e.resource.animations,
                        properties: e.properties
                    });
                    t.miscNode.add(i.node)
                }
        }
        for (i = 0; i < e.rooms.length; i++) {
            var x = e.rooms[i];
            c = this.app.objectManager.create({
                type: "Room",
                name: x.name,
                node: x.mesh,
                uuid: x.id,
                id: x.userID,
                ceilingNode: x.ceiling.mesh,
                roofNode: x.roof.mesh,
                floorNode: x.floor.mesh,
                parent: t,
                properties: x.properties
            })
        }
        for (i = 0; i < e.curvelines.length; i++) {
            var E = e.curvelines[i];
            this.parseCurveLines(E, t)
        }
        for (i = 0; i < e.pipelines.length; i++) {
            E = e.pipelines[i];
            this.parsePipeLines(E, t)
        }
    }
    ,
    e.prototype.parsePipeLines = function(e, t) {
        var i = {
            type: "PolygonLine",
            name: e.name,
            points: e.points,
            id: e.userID,
            uuid: e.id,
            parent: t,
            style: {}
        };
        e.color && (i.style.color = "#" + e.color.getHexString());
        var r = this;
        if (e.resource)
            e.initCompleteCallback = function(t) {
                i.image = t.resource.getTextureUrl();
                var n = r.app.objectManager.create(i);
                n.node.position.set(e.position.x, e.position.y, e.position.z),
                e.sectionType && "Triangle" === e.sectionType && (n.pathRadialSegments = 3,
                n._updateByPoints()),
                e.radius && (n.width = e.radius)
            }
        else {
            var n = r.app.objectManager.create(i);
            n.node.position.set(e.position.x, e.position.y, e.position.z),
            e.sectionType && "Triangle" === e.sectionType && (n.pathRadialSegments = 3,
            n._updateByPoints()),
            e.radius && (n.width = e.radius)
        }
    }
    ,
    e.prototype.parseCurveLines = function(e, t) {
        var i = {
            type: "RouteLine",
            parent: t,
            name: e.name,
            uuid: e.id,
            id: e.userID,
            points: e.points,
            arrowFlag: !1,
            style: {}
        }
            , r = this;
        if (e.color && (i.style.color = "#" + e.color.getHexString()),
        e.resource)
            e.initCompleteCallback = function(t) {
                if (t.resource.texture) {
                    var n = t.resource.texture.clone();
                    n.rotation = Math.PI / 2,
                    i.image = n
                }
                var o = r.app.objectManager.create(i);
                null !== e.width && (o.width = e.width),
                o.node.position.set(e.position.x, e.position.y, e.position.z)
            }
        else {
            var n = r.app.objectManager.create(i);
            null !== e.width && (n.width = e.width),
            n.node.position.set(e.position.x, e.position.y, e.position.z)
        }
    }
    ,
    e
}();
as = function e(t, i, n, o) {
    classCallCheck(this, e),
    this.positionArray = t.geometry.getAttribute("position").array.slice();
    var s = t.geometry.getAttribute("normal");
    s ? this.normalArray = s.array.slice() : THING.Utils.warn("not has normal");
    var a = t.geometry.getAttribute("uv");
    a && (this.uvArray = a.array);
    var l = t.geometry.getAttribute("uv2");
    l && (this.uv2Array = l.array);
    var u = t.geometry.getAttribute("color");
    u && (this.colorArray = u.array),
    this.indexArray = t.geometry.index.array,
    this.material = t.material;
    for (var c = this.positionArray, h = this.normalArray, p = 0; p < c.length; ) {
        for (var d = o.length - 1; d > -1; d--) {
            var f = i[d]
                , m = n[d]
                , g = o[d];
            c[p] *= f.x,
            c[p + 1] *= f.y,
            c[p + 2] *= f.z;
            var v = new THREE.Vector3(c[p],c[p + 1],c[p + 2]);
            if ((v = v.applyQuaternion(m)).x += g.x,
            v.y += g.y,
            v.z += g.z,
            c[p] = v.x,
            c[p + 1] = v.y,
            c[p + 2] = v.z,
            h) {
                var y = new THREE.Vector3(h[p],h[p + 1],h[p + 2]);
                y = y.applyQuaternion(m),
                h[p] = y.x,
                h[p + 1] = y.y,
                h[p + 2] = y.z
            }
        }
        p += 3
    }
    this.vertexCount = this.positionArray.length / 3,
    this.indexCount = this.indexArray.length
};
ls = function() {
    function e(t) {
        classCallCheck(this, e),
        this.bundeObj = t,
        this.materialMap = new Map,
        this.combineBundleMeshs = []
    }
    return e.prototype.combine = function() {
        this._combine(this.bundeObj, [], [], [])
    }
    ,
    e.prototype._combine = function(e, t, i, r) {
        if (t.push(e.scale),
        r.push(e.position),
        i.push(e.quaternion),
        e instanceof THREE.Mesh) {
            var n = new as(e,t,i,r);
            0 !== n.vertexCount && (this.combineBundleMeshs.push(n),
            void 0 === this.materialMap.get(n.material) && this.materialMap.set(n.material, []),
            this.materialMap.get(n.material).push(n))
        }
        if (0 !== e.children.length)
            for (var o = 0; o < e.children.length; o++) {
                var s = i.slice()
                    , a = t.slice()
                    , l = r.slice();
                this._combine(e.children[o], a, s, l)
            }
    }
    ,
    e
}();
us = function e() {
    classCallCheck(this, e),
    this.positions = [],
    this.scales = [],
    this.quaternions = []
};
cs = function() {
    function e(t) {
        classCallCheck(this, e),
        this.vertexCount = 0,
        this.indexCount = 0,
        this.material = t,
        this.bundeMeshs = [],
        this.transformations = [],
        this.maxCount = 65534,
        this.combineMesh = null
    }
    return e.prototype.isExceed = function(e) {
        return this.vertexCount + e > this.maxCount
    }
    ,
    e.prototype.add = function(e, t) {
        if (this.isExceed(e.vertexCount))
            return THING.Utils.error("combine exceed vertex count "),
            !1;
        this.vertexCount += e.vertexCount,
        this.indexCount += e.indexCount,
        this.bundeMeshs.push(e),
        this.transformations.push(t)
    }
    ,
    e.prototype.build = function() {
        for (var e = this.bundeMeshs, t = this.indexCount, i = this.vertexCount, r = new Float32Array(3 * i), n = new Float32Array(3 * i), o = new Float32Array(2 * i), s = new Float32Array(4 * i), a = new Float32Array(2 * i), l = new Uint16Array(t), u = 0, c = 0, h = 0, p = 0, d = 0, f = new THREE.BufferGeometry, m = 0; m < e.length; m++) {
            for (var g = e[m], v = this.transformations[m], y = v.positions, b = v.scales, _ = v.quaternions, x = g.indexArray, E = 0; E < x.length; E++)
                l[E + p] = u / 3 + x[E];
            p += x.length;
            var w = g.positionArray;
            for (E = 0; E < w.length; ) {
                for (var T = new THREE.Vector3(w[E],w[E + 1],w[E + 2]), M = y.length - 1; M > -1; M--) {
                    var C = y[M]
                        , S = b[M]
                        , j = _[M];
                    T.x *= S.x,
                    T.y *= S.y,
                    T.z *= S.z,
                    (T = T.applyQuaternion(j)).x += C.x,
                    T.y += C.y,
                    T.z += C.z
                }
                r[E + u] = T.x,
                r[E + u + 1] = T.y,
                r[E + u + 2] = T.z,
                E += 3
            }
            u += w.length;
            var P = g.normalArray;
            for (E = 0; E < P.length; ) {
                var R = new THREE.Vector3(P[E],P[E + 1],P[E + 2]);
                for (M = _.length - 1; M > -1; M--) {
                    j = _[M];
                    R = R.applyQuaternion(j)
                }
                n[E + c] = R.x,
                n[E + c + 1] = R.y,
                n[E + c + 2] = R.z,
                E += 3
            }
            c += P.length;
            var D = g.uvArray;
            if (D)
                for (E = 0; E < D.length; E++)
                    o[E + h] = D[E];
            var A = g.uv2Array;
            if (A)
                for (E = 0; E < A.length; E++)
                    a[E + h] = A[E];
            D && (h += D.length);
            var k = g.colorArray;
            if (k) {
                for (E = 0; E < k.length; E++)
                    s[E + d] = k[E];
                d += k.length
            }
        }
        f.addAttribute("position", new THREE.BufferAttribute(r,3)),
        f.addAttribute("normal", new THREE.BufferAttribute(n,3)),
        f.addAttribute("uv", new THREE.BufferAttribute(o,2)),
        0 !== a.length && f.addAttribute("uv2", new THREE.BufferAttribute(a,2)),
        0 !== s.length && f.addAttribute("color", new THREE.BufferAttribute(s,4)),
        f.setIndex(new THREE.BufferAttribute(l,1));
        var O = new THREE.Mesh(f,this.material);
        this.material.defines && this.material.defines.USE_ALPHAINDEX && delete this.material.defines.USE_ALPHAINDEX,
        O.name = "combine",
        this.combineMesh = O
    }
    ,
    e
}();
hs = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.combineBundleObjectMap = {},
        this.processorMap = new Map,
        this.floorMaterialMap = new Map,
        this.processors = []
    }
    return e.prototype.combineModels = function() {
        var e = this.app.modelResource.models
            , t = []
            , i = this;
        for (var r in e)
            t.push(new Promise((function(t, n) {
                var o = performance.now()
                    , s = new ls(e[r].node);
                i.combineBundleObjectMap[r] = s,
                s.combine(),
                performance.now() - o > .1 ? setTimeout((function() {
                    t()
                }
                ), 10) : t()
            }
            )));
        return Promise.all(t)
    }
    ,
    e.prototype.getModelObject = function(e) {
        var t = this.combineBundleObjectMap[e];
        return t || null
    }
    ,
    e.prototype.addPlacement = function(e, t, i, r, n) {
        var o = this.floorMaterialMap.get(e);
        o || (o = new Map,
        this.floorMaterialMap.set(e, o));
        var s = this.processorMap.get(e);
        s || (this.processorMap.set(e, []),
        s = this.processorMap.get(e));
        var a = new us;
        a.positions = i,
        a.scales = r,
        a.quaternions = n,
        this.combineBundleObjectMap[t].materialMap.forEach((function(e, t, i) {
            for (var r = e, n = t, l = 0; l < r.length; l++) {
                var u = r[l]
                    , c = o.get(n);
                c && !c.isExceed(u.vertexCount) || (c = new cs(n),
                o.set(n, c),
                s.push(c)),
                c.add(u, a)
            }
        }
        ))
    }
    ,
    e.prototype.getCombineProcessors = function(e, t, i, r) {
        var n = []
            , o = new Map;
        for (var s in e) {
            var a = e[s];
            if (!a.uid && !a.name) {
                var l = this.app.modelResource.bundleIDArray[a.bIdx]
                    , u = (this.app.modelResource.get(l).node,
                new THREE.Vector3(0,0,0))
                    , c = new us;
                if (a.pos) {
                    var h = a.pos.split(" ");
                    u.x = parseFloat(h[0]),
                    u.y = parseFloat(h[1]),
                    u.z = -parseFloat(h[2])
                }
                var p = new THREE.Vector3(1,1,1);
                if (a.scl) {
                    var d = a.scl.split(" ");
                    p.x = parseFloat(d[0]),
                    p.y = parseFloat(d[1]),
                    p.z = parseFloat(d[2])
                }
                var f = new THREE.Quaternion(0,0,0,1);
                if (a.rot) {
                    var m = a.rot.split(" ");
                    f.x = parseFloat(m[0]),
                    f.y = parseFloat(m[1]),
                    f.z = -parseFloat(m[2]),
                    f.w = -parseFloat(m[3])
                }
                var g = t.slice()
                    , v = i.slice()
                    , y = r.slice();
                y.push(f),
                v.push(p),
                g.push(u),
                c.positions = g,
                c.scales = v,
                c.quaternions = y,
                this.combineBundleObjectMap[l].materialMap.forEach((function(e, t, i) {
                    for (var r = e, s = t, a = 0; a < r.length; a++) {
                        var l = r[a]
                            , u = o.get(s);
                        u && !u.isExceed(l.vertexCount) || (u = new cs(s),
                        o.set(s, u),
                        n.push(u)),
                        u.add(l, c)
                    }
                }
                ))
            }
        }
        return n
    }
    ,
    e
}();
ps = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.nodes = [],
        this.scene = this.app.scene,
        this.objectPool = this.app.objectPool,
        this.worldNode = new THREE.Object3D,
        this.app.scene.add(this.worldNode),
        this.baseURL = t.sceneURL,
        this.curLoadGLTFIndex = 0,
        this.splitLoadedGLTFCount = 0,
        this.allLoadedGLTFCount = 0,
        this.sliceRootNodeArray = [],
        this.sceneJsonData = null,
        this.states = null,
        this.combineManager = new hs(this.app),
        this.combineProcessorMap = new Map,
        this.loadSpeed = .1
    }
    return e.prototype.load = function() {
        var e = this;
        return new Promise((function(t, i) {
            e.loadSceneJson().then((function(t) {
                return t.camInfo && (e.parseCamInfo(t.camInfo),
                e.app.camera.update()),
                e.sceneJsonData = JSON.parse(t),
                e.loadStructureJson()
            }
            )).then((function(t) {
                var i = e.getSortedStructureGLTFs(t);
                return new Promise((function(t, r) {
                    e.loadStructure(i, (function() {
                        e.parseObjects().then((function() {
                            t(e.worldNode)
                        }
                        ))
                    }
                    ))
                }
                ))
            }
            )).then((function() {
                t(e.worldNode)
            }
            )).catch((function(e) {
                i(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadSceneJson = function(e) {
        var t = this;
        return e && (t.sceneURL = e),
        new Promise((function(e, i) {
            t.sceneJsonData ? e(t.sceneJsonData) : new THREE.FileLoader(t.app.loadingManager).load(t.sceneURL.appendURL(t.sceneJsonUri), (function(t) {
                e(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadStructureJson = function() {
        var e = this;
        return new Promise((function(t, i) {
            (new THREE.FileLoader).load(e.baseURL + "/structure.json", (function(e) {
                var i = JSON.parse(e);
                t(i)
            }
            ), (function() {}
            ), (function(e) {
                i("cant not load file: structure.json")
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadStructure = function(e, t, i) {
        this.splitLoadedGLTFCount = 0;
        var r = this
            , n = 0;
        if (0 == e.length)
            t && t();
        else
            for (var o = r.curLoadGLTFIndex; o < e.length && (0 == n || n % 10 != 0); o++) {
                n++,
                r.curLoadGLTFIndex++;
                var s = new THREE.GLTFLoader(r.app.loadingManager);
                s.setCrossOrigin("anonymous"),
                s.load(r.baseURL + "/" + e[o].path, (function(n) {
                    var o = n.scene.children[0].children[0];
                    r.nodes[o.name] = o,
                    r.sliceRootNodeArray.push(o),
                    o.traverse((function(e) {
                        r.nodes[e.name] = e
                    }
                    )),
                    r.splitLoadedGLTFCount++,
                    r.allLoadedGLTFCount++,
                    10 === r.splitLoadedGLTFCount && r.loadStructure(e, t, i),
                    r.app.scene.add(o),
                    r.allLoadedGLTFCount == e.length && t && t()
                }
                ), (function() {}
                ), (function(t) {
                    i && i("load " + r.baseURL + "/" + e[o].path + " failed")
                }
                ))
            }
    }
    ,
    e.prototype.parseObjects = function() {
        var e = this.sceneJsonData
            , t = this;
        return e.bIdList ? new Promise((function(i, r) {
            t.parseBundleList(e.bIdList).then((function() {
                return t.parse(e)
            }
            )).then((function() {
                t.sliceRootNodeArray = [],
                i()
            }
            )).catch((function(e) {
                r(e)
            }
            ))
        }
        )) : new Promise((function(i, r) {
            t.parse(e).then((function() {
                t.sliceRootNodeArray = [],
                i()
            }
            )).catch((function(e) {
                r(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.getSortedStructureGLTFs = function(e) {
        var t = []
            , i = []
            , r = []
            , n = e.outdoors
            , o = e.buildings;
        for (var s in n) {
            var a = n[s];
            t.push(a)
        }
        for (var l = 0; l < t.length; l++) {
            var u = t[l];
            if (0 != i.length)
                for (var c = 0; c < i.length; c++) {
                    var h = i[c];
                    if (u.size < h.size) {
                        i.splice(c, 0, u);
                        break
                    }
                    if (c == i.length - 1) {
                        i.push(u);
                        break
                    }
                }
            else
                i.push(t[l])
        }
        for (var s in t = [],
        o)
            t.push(o[s]);
        for (l = 0; l < t.length; l++) {
            u = t[l];
            if (0 != r.length)
                for (c = 0; c < r.length; c++) {
                    h = r[c];
                    if (u.size < h.size) {
                        r.splice(c, 0, u);
                        break
                    }
                    if (c == r.length - 1) {
                        r.push(u);
                        break
                    }
                }
            else
                r.push(t[l])
        }
        return i.concat(r)
    }
    ,
    e.prototype._nestingLoopYield = function(e, t, i) {
        var r = this
            , n = e.next();
        if (n.done)
            return t && t(),
            n.value;
        var o = n.value;
        n.done;
        o instanceof Promise ? o.then((function(n) {
            return r._nestingLoopYield(e, t, i)
        }
        )).catch((function(e) {
            i(e)
        }
        )) : this._nestingLoopYield(e, t, i)
    }
    ,
    e.prototype.parse = function(e) {
        var t = this;
        return this.combineManager.combineModels().then((function() {
            return new Promise((function(i, r) {
                if (e.objects) {
                    var n = e.objects
                        , o = null;
                    for (var s in n) {
                        o = n[s];
                        break
                    }
                    t._nestingLoopYield(t.parseWorld(o), (function() {
                        i()
                    }
                    ))
                }
                if (e.camInfo) {
                    var a = e.camInfo;
                    t.parseCamInfo(a)
                }
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.parseWorld = function(e) {
        var t = g.mark(y)
            , i = this.worldNode;
        if (e.plan && this.parseOutdoors(e.plan, i),
        e.bds) {
            var r = e.bds;
            for (var n in r) {
                var o = r[n]
                    , s = new THREE.Vector3(0,0,0);
                if (o.pos) {
                    var a = o.pos.split(" ");
                    s.x = parseFloat(a[0]),
                    s.y = parseFloat(a[1]),
                    s.z = -parseFloat(a[2])
                }
                var l = new THREE.Object3D
                    , u = this.app.objectManager.create({
                    type: "Building",
                    name: n,
                    node: l
                });
                if (u.name = n,
                u.app = this.app,
                u.id = n,
                i.add(l),
                o.plans)
                    this.parseFloorPlans(o.plans, u);
                if (o.facades) {
                    var c = o.facades;
                    for (var h in c) {
                        var p = this.createThing(c[h], u, null, "Facade")
                            , d = p.node.position;
                        d.x += s.x,
                        d.y += s.y,
                        d.z += s.z,
                        p.node.position.set(d.x, d.y, d.z)
                    }
                }
                if (o.groups) {
                    var f = o.groups;
                    for (var m in f) {
                        o = f[m];
                        this.createGroup(o, u)
                    }
                }
            }
        }
        var v = this;
        function y(e) {
            var i, r, n, o, s, a, l, u, c;
            return g.wrap((function(t) {
                for (; ; )
                    switch (t.prev = t.next) {
                    case 0:
                        i = v.loadSpeed,
                        r = 10,
                        n = e.keys(),
                        o = Array.isArray(n),
                        s = 0,
                        n = o ? n : n[Symbol.iterator]();
                    case 3:
                        if (!o) {
                            t.next = 9;
                            break
                        }
                        if (!(s >= n.length)) {
                            t.next = 6;
                            break
                        }
                        return t.abrupt("break", 24);
                    case 6:
                        a = n[s++],
                        t.next = 13;
                        break;
                    case 9:
                        if (!(s = n.next()).done) {
                            t.next = 12;
                            break
                        }
                        return t.abrupt("break", 24);
                    case 12:
                        a = s.value;
                    case 13:
                        l = a,
                        u = e.get(l),
                        c = 0;
                    case 16:
                        if (!(c < u.length)) {
                            t.next = 22;
                            break
                        }
                        return t.next = 19,
                        new Promise((function(e, t) {
                            var n = performance.now();
                            u[c].build();
                            var o = u[c].combineMesh;
                            l.node.add(o),
                            performance.now() - n > i ? setTimeout((function() {
                                e()
                            }
                            ), r) : e()
                        }
                        ));
                    case 19:
                        c++,
                        t.next = 16;
                        break;
                    case 22:
                        t.next = 3;
                        break;
                    case 24:
                    case "end":
                        return t.stop()
                    }
            }
            ), t, this)
        }
        return y(this.combineProcessorMap)
    }
    ,
    e.prototype.parseOutdoors = function(e, t) {
        var i, r;
        for (var n in e) {
            r = e[n],
            i = n;
            break
        }
        var o = this.app.outdoors;
        this.worldNode.add(o.node),
        this.processFloorPlanData(i, r, o)
    }
    ,
    e.prototype.processFloorPlanData = function(e, t, i) {
        i.name = e,
        i.app = this.app,
        i.id = e;
        var r = new THREE.Vector3(0,0,0);
        if (t.pos) {
            var n = t.pos.split(" ");
            r.x = parseFloat(n[0]),
            r.y = parseFloat(n[1]),
            r.z = -parseFloat(n[2])
        }
        var o = t.cwalls;
        if (o) {
            var s = new THREE.Group;
            for (var a in s.name = "combinewall",
            o) {
                var l = o[a].gltfid
                    , u = this.nodes[l];
                u && s.add(u)
            }
            i.node.add(s),
            s.updateMatrixWorld(),
            i.wallNode = s
        }
        var c = t.croofs;
        if (c) {
            var h = new THREE.Group;
            for (var a in h.name = "combineroof",
            c) {
                l = c[a].gltfid;
                var p = this.nodes[l];
                p && h.add(p)
            }
            i.node.add(h),
            i.roofNode = h
        }
        var d = t.cceilings;
        if (d) {
            var f = new THREE.Group;
            for (var a in f.name = "combineceiling",
            d) {
                l = d[a].gltfid;
                var m = this.nodes[l];
                m && f.add(m)
            }
            i.node.add(f),
            i.ceilNode = f
        }
        if (v = t.cfloors) {
            var g = new THREE.Group;
            for (var a in g.name = "combinefloor",
            v) {
                var v;
                if (l = (v = v[a]).gltfid) {
                    var y = this.nodes[l];
                    y && g.add(y)
                }
            }
            i.node.add(g),
            i.floorNode = g
        }
        var b = new THREE.Group;
        b.name = "combinePlacement",
        i.miscNode = b,
        i.node.add(b);
        var _ = t.cplcs;
        if (_)
            for (var a in _) {
                l = _[a].gltfid;
                var x = this.nodes[l];
                x && (b.add(x),
                x.updateMatrixWorld())
            }
        if (t.plcs) {
            var E = this.combineManager.getCombineProcessors(t.plcs, [r], [new THREE.Vector3(1,1,1)], [new THREE.Quaternion(0,0,0,1)]);
            this.combineProcessorMap.set(i, E),
            this.parseThings(t.plcs, i, r)
        }
        t.routes && this.parseStructureThing(t.routes, i),
        t.pipelines && this.parseStructureThing(t.pipelines, i),
        t.curvelines && this.parseStructureThing(t.curvelines, i),
        t.arrowlines && this.parseStructureThing(t.arrowlines, i),
        t.arrowdatalines && this.parseStructureThing(t.arrowdatalines, i),
        t.leakwaterlines && this.parseStructureThing(t.leakwaterlines, i),
        t.vps && this.parseThings(t.vps, i, r),
        t.groups && this.parseGroups(t.groups, i, [new THREE.Vector3(1,1,1)], [new THREE.Quaternion(0,0,0,1)], [r], r),
        t.dws && this.parseDoorWins(t.dws, i, r)
    }
    ,
    e.prototype.parseDoorWins = function(e, t, i) {
        for (var r in e) {
            var n = e[r]
                , o = r;
            n.uid && (o = n.uid);
            var s = null;
            if (n.gltfid) {
                var a = n.gltfid;
                this.nodes[a] && ((s = this.nodes[a]).position.x += i.x,
                s.position.y += i.y,
                s.position.z += i.z,
                t.node.add(s))
            }
            var l = null;
            if (n.prop) {
                var u = n.prop;
                for (var c in l = {},
                u) {
                    var h = u[c];
                    l[c] = h
                }
            }
            this.app.objectManager.create({
                type: "Door",
                name: o,
                node: s,
                parent: t,
                properties: l
            })
        }
    }
    ,
    e.prototype.parseGroups = function(e, t, i, r, n, o) {
        for (var s in e) {
            var a = e[s];
            a.uid ? this.createGroup(a, t) : this.combineGroup(a, t, i, r, n, o)
        }
    }
    ,
    e.prototype.createGroup = function(e, t) {
        var i, r, n = this.instanceGroup(e);
        e.id && e.id,
        e.uid && (i = e.uid);
        var o = e.prop;
        if (o)
            for (var s in r = {},
            o) {
                var a = o[s];
                r[s] = a
            }
        return this.app.objectManager.create({
            type: "Thing",
            name: i,
            node: n,
            parent: t,
            properties: r
        })
    }
    ,
    e.prototype.parseFloorPlans = function(e, t) {
        var i = [];
        for (var r in e) {
            var n = e[r]
                , o = new THREE.Object3D
                , s = this.app.objectManager.create({
                type: "Floor",
                name: r,
                node: o,
                parent: t
            });
            s.id = r,
            o.name = "floorPlan",
            t.node.add(s.node),
            this.processFloorPlanData(r, n, s),
            s._parent = t,
            i.push(s)
        }
        return i
    }
    ,
    e.prototype.parseBundleList = function(e) {
        this.app.modelResource.bundleIDArray = e;
        var t = 0
            , i = this;
        return new Promise((function(r, n) {
            0 != e.length ? e.forEach((function(o) {
                var s = new THREE.GLTFLoader(i.app.loadingManager);
                s.setCrossOrigin("anonymous"),
                s.load(i.baseURL + "/" + o + "/scene.gltf", (function(n) {
                    t++,
                    i.app.modelResource.set(o, n.scene.children[0].children[0]),
                    t == e.length && r()
                }
                ), (function() {}
                ), (function(e) {
                    n("can not load " + i.baseURL + "/" + o + "/scene.gltf")
                }
                ))
            }
            )) : r()
        }
        ))
    }
    ,
    e.prototype.combineGroup = function(e, t, i, r, n, o) {
        var s = e
            , a = new THREE.Vector3(0,0,0);
        if (s.pos) {
            var l = s.pos.split(" ");
            a.x = parseFloat(l[0]),
            a.y = parseFloat(l[1]),
            a.z = -parseFloat(l[2])
        }
        var u = new THREE.Vector3(1,1,1);
        if (s.scl) {
            var c = s.scl.split(" ");
            u.x = parseFloat(c[0]),
            u.y = parseFloat(c[1]),
            u.z = parseFloat(c[2])
        }
        var h, p, d, f = new THREE.Quaternion(0,0,0,1);
        if (s.rot) {
            c = s.rot.split(" ");
            f.x = parseFloat(c[0]),
            f.y = parseFloat(c[1]),
            f.z = -parseFloat(c[2]),
            f.w = -parseFloat(c[3])
        }
        if (n ? (h = i.slice(),
        d = r.slice(),
        p = n.slice()) : (h = [],
        p = [],
        d = []),
        h.push(u),
        p.push(a),
        d.push(f),
        s.plcs) {
            var m = this.combineManager.getCombineProcessors(s.plcs, p, h, d)
                , g = this.combineProcessorMap.get(t);
            g && (m = g.concat(m)),
            this.combineProcessorMap.set(t, m)
        }
        if (s.groups)
            for (var v in s.groups)
                this.combineGroup(s.groups[v], t, h, d, p, o)
    }
    ,
    e.prototype.instanceGroup = function(e) {
        var t = new THREE.Vector3(0,0,0);
        if (e.pos) {
            var i = e.pos.split(" ");
            t.x = parseFloat(i[0]),
            t.y = parseFloat(i[1]),
            t.z = -parseFloat(i[2])
        }
        var r = new THREE.Vector3(1,1,1);
        if (e.scl) {
            var n = e.scl.split(" ");
            r.x = parseFloat(n[0]),
            r.y = parseFloat(n[1]),
            r.z = parseFloat(n[2])
        }
        var o = new THREE.Quaternion(0,0,0,1);
        if (e.rot) {
            n = e.rot.split(" ");
            o.x = parseFloat(n[0]),
            o.y = parseFloat(n[1]),
            o.z = -parseFloat(n[2]),
            o.w = -parseFloat(n[3])
        }
        var s = new THREE.Group;
        if (e.plcs)
            for (var a in e.plcs) {
                var l = this.instanceChildOfGroup(e.plcs[a]);
                s.add(l)
            }
        if (e.groups)
            for (var a in e.groups) {
                l = this.instanceGroup(e.plcs[a]);
                s.add(l)
            }
        return s.scale.copy(r),
        s.setRotationFromQuaternion(o),
        s.position.copy(t),
        s
    }
    ,
    e.prototype.instanceChildOfGroup = function(e) {
        var t = this.app.modelResource.bundleIDArray[e.bIdx]
            , i = this.app.modelResource.get(t).node.clone();
        if (e.pos) {
            var r = e.pos.split(" ");
            i.position.x = parseFloat(r[0]),
            i.position.y = parseFloat(r[1]),
            i.position.z = -parseFloat(r[2])
        }
        if (e.rot) {
            r = e.rot.split(" ");
            var n = new THREE.Quaternion;
            n.x = parseFloat(r[0]),
            n.y = parseFloat(r[1]),
            n.z = -parseFloat(r[2]),
            n.w = -parseFloat(r[3]),
            i.setRotationFromQuaternion(n)
        }
        return i
    }
    ,
    e.prototype.parseThings = function(e, t, i) {
        for (var r in e) {
            var n = e[r];
            (n.uid || n.prop) && this.createThing(n, t, i)
        }
    }
    ,
    e.prototype.createThing = function(e, t, i) {
        var r, n, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "Thing";
        e.id && e.id,
        e.uid && (r = e.uid);
        var s = e.prop;
        if (s)
            for (var a in n = {},
            s) {
                var l = s[a];
                n[a] = l
            }
        var u = this.app.modelResource.bundleIDArray[e.bIdx]
            , c = this.app.modelResource.get(u).node
            , h = c.clone();
        if (e.pos) {
            var p = e.pos.split(" ")
                , d = new THREE.Vector3(parseFloat(p[0]),parseFloat(p[1]),-parseFloat(p[2]));
            i && (d.x += i.x,
            d.y += i.y,
            d.z += i.z),
            h.position.x = d.x,
            h.position.y = d.y,
            h.position.z = d.z
        }
        if (e.rot) {
            p = e.rot.split(" ");
            var f = new THREE.Quaternion;
            f.x = parseFloat(p[0]),
            f.y = parseFloat(p[1]),
            f.z = -parseFloat(p[2]),
            f.w = -parseFloat(p[3]),
            h.setRotationFromQuaternion(f)
        }
        if (e.scl) {
            p = e.scl.split(" ");
            var m = new THREE.Vector3;
            m.x = parseFloat(p[0]),
            m.y = parseFloat(p[1]),
            m.z = -parseFloat(p[2]),
            h.scale.x = m.x,
            h.scale.y = m.y,
            h.scale.z = m.z
        }
        var g = this.app.objectManager.create({
            type: o,
            name: r,
            node: h,
            parent: t,
            properties: n
        });
        return g
    }
    ,
    e.prototype.parseStructureThing = function(e, t, i) {
        for (var r in e) {
            var n = e[r];
            if (n.gltfid) {
                var o = new Thing(this.app);
                o.name = r,
                o.app = this.app,
                n.id && (o.id = n.id),
                n.uid && (o.name = n.uid);
                var s = n.gltfid;
                if (this.nodes[s]) {
                    var a = this.nodes[s];
                    o.node = a,
                    t.add(o),
                    i && (a.position.x = i.x,
                    a.position.y = i.y,
                    a.position.z = i.z)
                }
            }
        }
    }
    ,
    e
}();
ds = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.app = t,
        this.nodes = [],
        this.outdoors = this.app.outdoors,
        this.objectPool = this.app.objectPool,
        this.worldNode = new THREE.Object3D,
        this.worldNode.name = "world",
        this.campus = null,
        this.baseURL = null,
        this.sceneJsonUri = "scene.json",
        this.curLoadGLTFIndex = 0,
        this.splitLoadedGLTFCount = 0,
        this.allLoadedGLTFCount = 0,
        this.sliceRootNodeArray = [],
        this.sceneJsonData = null,
        this.states = null,
        this.combineManager = new hs(this.app),
        this.loadSpeed = .1,
        this.isCamFitScene = !0,
        this.loadStageWeight = [.1, .1, .3, .5],
        this.loadedProgress = 0,
        this.curStageLoadProgress = 0,
        this.isDelayLoadFloorPlan = !1,
        this.envMap = null,
        this.appFirstTimeLoad = !1,
        this.outdoors ? this.appFirstTimeLoad = !1 : this.appFirstTimeLoad = !0,
        i && (i.position && (this.campusPosition = i.position),
        i.rotation && (this.campusRotation = i.rotation),
        void 0 !== i.isCamFitScene && null !== i.isCamFitScene && (this.isCamFitScene = i.isCamFitScene),
        void 0 !== i.isDelayLoadFloorPlan && null !== i.isDelayLoadFloorPlan && (this.isDelayLoadFloorPlan = i.isDelayLoadFloorPlan),
        i.campus && (this.campus = i.campus));
        var n = this.worldNode;
        null == this.campus && (this.campus = this.app.objectManager.create({
            type: "Campus",
            name: "Campus",
            node: n
        }),
        this.app.scene.add(this.campus.node)),
        this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        this.scene = this.campus.node
    }
    return e.prototype.updateProgress = function(e) {
        this.app.mainUI.updateLoadingProcess({
            object: this.campus,
            progress: e
        })
    }
    ,
    e.prototype.loadSkybox = function() {
        if (this.sceneJsonData.skybox) {
            for (var e = this.sceneJsonData.skybox, t = 0; t < e.length; t++) {
                var i = e[t];
                i = this.baseURL + i,
                e[t] = i
            }
            var r = this;
            return new Promise((function(t, i) {
                (new THREE.CubeTextureLoader).load(e, (function(e) {
                    e.flipY = !0,
                    r.envMap = e,
                    t()
                }
                ), null, (function() {
                    THING.Utils.warn("load skybox fail"),
                    t()
                }
                ))
            }
            ))
        }
        return new Promise((function(e, t) {
            e()
        }
        ))
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if ("String" === e.constructor.name)
            this.baseURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.baseURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node)
        }
        return new Promise((function(e, i) {
            t.loadSceneJson().then((function(e) {
                return e.camInfo && t.isCamFitScene && t.parseCamInfo(e.camInfo),
                t.sceneJsonData = JSON.parse(e),
                t.updateProgress(.1),
                t.loadSkybox().then((function() {
                    return t.loadStructureJson()
                }
                ))
            }
            )).then((function(e) {
                t.updateProgress(.2);
                var i = t.getSortedStructureGLTFs(e);
                return new Promise((function(e, r) {
                    t.updateProgress(.3),
                    t.loadStructure(i, (function() {
                        t.updateProgress(.7),
                        t.parseObjects().then((function() {
                            t.updateProgress(.8),
                            e(t.campus)
                        }
                        ))
                    }
                    ))
                }
                ))
            }
            )).then((function() {
                t.updateProgress(1),
                e(t.campus)
            }
            )).catch((function(e) {
                i(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadSceneJson = function(e) {
        var t = this;
        return e && (t.sceneURL = e),
        new Promise((function(e, i) {
            t.sceneJsonData ? e(t.sceneJsonData) : new THREE.FileLoader(t.app.loadingManager).load(t.sceneURL.appendURL(t.sceneJsonUri), (function(t) {
                e(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadStructureJson = function() {
        var e = this;
        return new Promise((function(t, i) {
            (new THREE.FileLoader).load(e.baseURL + "/structure.json", (function(e) {
                var i = JSON.parse(e);
                t(i)
            }
            ), (function() {}
            ), (function(e) {
                i("cant not load file: structure.json")
            }
            ))
        }
        ))
    }
    ,
    e.prototype.addEnvMap = function(e) {
        var t = this;
        this.envMap && e.traverse((function(e) {
            e.material && (e.material.opacity < 1 && !e.material.transparent && (e.material.transparent = !0,
            e.material.needsUpdate = !0),
            e.material.transparent && (e.material.metalness = 1,
            e.material.roughness = 0,
            e.material.envMap = t.envMap,
            e.material.envMapIntensity = 2,
            e.material.refractionRatio = 1,
            e.material.needsUpdate = !0),
            e.material.isMeshStandardMaterial && (e.material.envMap = t.envMap,
            e.material.envMapIntensity = 1,
            e.material.refractionRatio = 1,
            e.material.needsUpdate = !0))
        }
        ))
    }
    ,
    e.prototype.loadStructure = function(e, t, i) {
        this.splitLoadedGLTFCount = 0;
        var r = this
            , n = 0;
        if (0 == e.length)
            t && t();
        else
            for (var o = r.curLoadGLTFIndex; o < e.length && (0 == n || n % 10 != 0); o++) {
                n++,
                r.curLoadGLTFIndex++;
                var s = new thingjs.GLTFLoader;
                s.setCrossOrigin("anonymous");
                var a = e[o];
                s.load(r.baseURL + "/" + a.path, (function(n) {
                    var o = n.scene.children[0].children[0];
                    r.nodes[o.name] = o,
                    r.sliceRootNodeArray.push(o),
                    o.traverse((function(e) {
                        r.nodes[e.name] = e
                    }
                    )),
                    r.splitLoadedGLTFCount++,
                    r.allLoadedGLTFCount++,
                    10 === r.splitLoadedGLTFCount && r.loadStructure(e, t, i),
                    (void 0 === a.show || a.show) && r.scene.add(o),
                    r.addEnvMap(o),
                    o.updateMatrixWorld(),
                    r.scene.updateMatrixWorld(!0),
                    r.allLoadedGLTFCount == e.length && t && t()
                }
                ), (function() {}
                ), (function(t) {
                    i ? i("load " + r.baseURL + "/" + e[o].path + " failed") : THING.Utils.error("load " + r.baseURL + "/" + a.path + " failed"),
                    THING.Utils.error(t)
                }
                ))
            }
    }
    ,
    e.prototype.parseObjects = function() {
        var e = this.sceneJsonData
            , t = this;
        return e.models ? new Promise((function(i, r) {
            t.parseBundleList(e.models).then((function() {
                return t.parse(e)
            }
            )).then((function() {
                t.sliceRootNodeArray = [],
                i()
            }
            )).catch((function(e) {
                r(e)
            }
            ))
        }
        )) : new Promise((function(i, r) {
            t.parse(e).then((function() {
                t.sliceRootNodeArray = [],
                i()
            }
            )).catch((function(e) {
                r(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.getSortedStructureGLTFs = function(e) {
        var t = []
            , i = []
            , r = []
            , n = e.outdoors
            , o = e.buildings;
        for (var s in n) {
            var a = n[s];
            t.push(a)
        }
        for (var l = 0; l < t.length; l++) {
            var u = t[l];
            if (0 != i.length)
                for (var c = 0; c < i.length; c++) {
                    var h = i[c];
                    if (u.size < h.size) {
                        i.splice(c, 0, u);
                        break
                    }
                    if (c == i.length - 1) {
                        i.push(u);
                        break
                    }
                }
            else
                i.push(t[l])
        }
        for (var s in t = [],
        o)
            t.push(o[s]);
        for (l = 0; l < t.length; l++) {
            u = t[l];
            if (0 != r.length)
                for (c = 0; c < r.length; c++) {
                    h = r[c];
                    if (u.size < h.size) {
                        r.splice(c, 0, u);
                        break
                    }
                    if (c == r.length - 1) {
                        r.push(u);
                        break
                    }
                }
            else
                r.push(t[l])
        }
        return i.concat(r)
    }
    ,
    e.prototype._nestingLoopYield = function(e, t, i) {
        var r = this
            , n = e.next();
        if (n.done)
            return t && t(),
            n.value;
        var o = n.value;
        n.done;
        o instanceof Promise ? o.then((function(n) {
            return r._nestingLoopYield(e, t, i)
        }
        )).catch((function(e) {
            i(e)
        }
        )) : this._nestingLoopYield(e, t, i)
    }
    ,
    e.prototype.parse = function(e) {
        var t = this;
        return this.combineManager.combineModels().then((function() {
            return new Promise((function(i, r) {
                var n = t.parseWorld(e);
                if (n ? t._nestingLoopYield(n, (function() {
                    i()
                }
                ), (function(e) {
                    r(e)
                }
                )) : i(),
                e.camInfo && t.isCamFitScene) {
                    var o = e.camInfo;
                    t.parseCamInfo(o)
                }
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.parseWorld = function(e) {
        var t = g.mark(E);
        if (e.outdoors && this.parseOutdoors(e.outdoors),
        e.buildings) {
            var i = e.buildings;
            for (var r in i) {
                var n = i[r]
                    , o = new THREE.Vector3(0,0,0)
                    , s = r
                    , a = void 0;
                n.id && (a = n.id),
                n.name && (s = n.name);
                var l = n.properties
                    , u = null;
                if (l)
                    for (var c in u = {},
                    l) {
                        var h = l[c];
                        u[c] = h
                    }
                if (n.position) {
                    var p = n.position;
                    o.x = p[0],
                    o.y = p[1],
                    o.z = -p[2]
                }
                var d = new THREE.Object3D
                    , f = this.app.objectManager.create({
                    type: "Building",
                    name: s,
                    id: a,
                    properties: u,
                    parent: this.campus,
                    node: d
                });
                if (f.app = this.app,
                f.node.position.x = o.x,
                f.node.position.y = o.y,
                f.node.position.z = o.z,
                n.facades) {
                    var m = n.facades;
                    for (var v in m)
                        this.createThing(m[v], f, null, "Facade")
                }
                if (n.facadegroups) {
                    var y = n.facadegroups;
                    for (var b in y) {
                        var _ = y[b];
                        this.createGroup(_, f, "Facade")
                    }
                }
                if (n.plans)
                    this.parseFloorPlans(n.plans, f)
            }
        }
        var x = this;
        function E(e) {
            var i, r, n, o, s, a, l, u, c;
            return g.wrap((function(t) {
                for (; ; )
                    switch (t.prev = t.next) {
                    case 0:
                        i = x.loadSpeed,
                        r = 10,
                        n = e.keys(),
                        o = Array.isArray(n),
                        s = 0,
                        n = o ? n : n[Symbol.iterator]();
                    case 3:
                        if (!o) {
                            t.next = 9;
                            break
                        }
                        if (!(s >= n.length)) {
                            t.next = 6;
                            break
                        }
                        return t.abrupt("break", 24);
                    case 6:
                        a = n[s++],
                        t.next = 13;
                        break;
                    case 9:
                        if (!(s = n.next()).done) {
                            t.next = 12;
                            break
                        }
                        return t.abrupt("break", 24);
                    case 12:
                        a = s.value;
                    case 13:
                        l = a,
                        u = e.get(l),
                        c = 0;
                    case 16:
                        if (!(c < u.length)) {
                            t.next = 22;
                            break
                        }
                        return t.next = 19,
                        new Promise((function(e, t) {
                            var n = performance.now();
                            u[c].build();
                            var o = u[c].combineMesh;
                            l.miscNode.add(o),
                            performance.now() - n > i ? setTimeout((function() {
                                e()
                            }
                            ), r) : e()
                        }
                        ));
                    case 19:
                        c++,
                        t.next = 16;
                        break;
                    case 22:
                        t.next = 3;
                        break;
                    case 24:
                    case "end":
                        return t.stop()
                    }
            }
            ), t, this)
        }
        if (this.isDelayLoadFloorPlan) {
            var w = new Map
                , T = this.combineManager.processorMap.get(this.outdoors);
            T && w.set(this.outdoors, T);
            var M = this.combineManager.processorMap.keys()
                , C = Array.isArray(M)
                , S = 0;
            for (M = C ? M : M[Symbol.iterator](); ; ) {
                var j;
                if (C) {
                    if (S >= M.length)
                        break;
                    j = M[S++]
                } else {
                    if ((S = M.next()).done)
                        break;
                    j = S.value
                }
                var P = j;
                P != this.outdoors && (P.isLoaded = !1)
            }
            return E(w)
        }
        return E(this.combineManager.processorMap)
    }
    ,
    e.prototype.parseOutdoors = function(e) {
        var t = new THREE.Object3D;
        this.outdoors = this.app.objectManager.create({
            type: "Outdoors",
            name: "Outdoors",
            parent: this.campus,
            node: t
        }),
        this.app.outdoors || (this.app.outdoors = this.outdoors,
        this.app.currentParentObject = this.outdoors),
        this.processFloorPlanData(e, this.outdoors)
    }
    ,
    e.prototype.processFloorPlanData = function(e, t) {
        t.app = this.app;
        var i = new THREE.Vector3(0,0,0);
        if (e.position) {
            var r = e.position;
            i.x = r[0],
            i.y = r[1],
            i.z = -r[2]
        }
        t.node.position.x = i.x,
        t.node.position.y = i.y,
        t.node.position.z = i.z,
        t.node.updateMatrixWorld(),
        t.node.updateMatrix(),
        this.parseStructure(e, t),
        e.placements && (this.parseCombineProcessors(t, e.placements, [], [], []),
        this.parseThings(e.placements, t, i)),
        e.videoprobes && this.parseThings(e.videoprobes, t, i),
        e.groups && this.parseGroups(e.groups, t, [], [], [], i),
        e.doororwindows && this.parseDoorWins(e.doororwindows, t, i),
        e.rooms && this.parseRooms(e.rooms, t),
        e.routes && this.parseStructureThing(e.routes, t),
        e.pipelines && this.parseStructureThing(e.pipelines, t),
        e.curvelines && this.parseStructureThing(e.curvelines, t),
        e.arrowlines && this.parseStructureThing(e.arrowlines, t),
        e.arrowdatalines && this.parseStructureThing(e.arrowdatalines, t),
        e.leakwaterlines && this.parseStructureThing(e.leakwaterlines, t)
    }
    ,
    e.prototype.parseRooms = function(e, t) {
        for (var i = 0; i < e.length; i++) {
            var r = e[i]
                , n = null;
            r.name && (n = r.name),
            e.id && e.id;
            var o = null
                , s = r.gltfid;
            s && this.nodes[s] && (o = this.nodes[s]);
            var a = null
                , l = r.properties;
            if (l)
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            var h = null
                , p = null
                , d = null;
            r.floor && (s = r.floor.gltfid,
            this.nodes[s] && (d = this.nodes[s])),
            r.ceiling && (s = r.ceiling.gltfid,
            this.nodes[s] && (h = this.nodes[s])),
            r.roof && (s = r.roof.gltfid,
            this.nodes[s] && (p = this.nodes[s]));
            var f = r.isShown;
            if (f) {
                var m = "false" !== (f = f.toLowerCase());
                o.visible = m
            }
            var g = null
                , v = null
                , y = null
                , b = {};
            if (r.area && (v = r.area,
            b.area = v),
            r.circumference && (y = r.circumference,
            b.circumference = y),
            r.center) {
                var _ = r.center;
                (g = new THREE.Vector3).set(_[0], _[1], -_[2]),
                b.center = g
            }
            this.app.objectManager.create({
                type: "Room",
                name: n,
                node: o,
                ceilingNode: h,
                roofNode: p,
                floorNode: d,
                parent: t,
                properties: a,
                auxiliaryInfo: b
            })
        }
    }
    ,
    e.prototype.parseCombineProcessors = function(e, t, i, r, n) {
        for (var o in t) {
            var s = t[o];
            if (!s.name && !s.properties) {
                var a = this.app.modelResource.bundleIDArray[s.model].uri;
                a || (a = this.app.modelResource.bundleIDArray[s.model].id);
                var l = new THREE.Vector3(0,0,0);
                if (s.position) {
                    var u = s.position;
                    l.x = u[0],
                    l.y = u[1],
                    l.z = -u[2]
                }
                var c = new THREE.Vector3(1,1,1);
                if (s.scale) {
                    var h = s.scale;
                    c.x = h[0],
                    c.y = h[1],
                    c.z = h[2]
                }
                var p = new THREE.Quaternion(0,0,0,1);
                if (s.rotation) {
                    var d = s.rotation;
                    p.x = d[0],
                    p.y = d[1],
                    p.z = -d[2],
                    p.w = -d[3]
                }
                var f = i.slice()
                    , m = r.slice()
                    , g = n.slice();
                g.push(p),
                m.push(c),
                f.push(l),
                this.combineManager.addPlacement(e, a, f, m, g)
            }
        }
    }
    ,
    e.prototype.parseStructure = function(e, t) {
        t.node.updateMatrixWorld();
        var i = t.node.position
            , r = new THREE.Vector3;
        t.parent && !t.isOutdoors && (r = t.parent.node.position);
        var n = new THREE.Vector3(r.x + i.x,r.y + i.y,r.z + i.z);
        if (e.structure) {
            var o = (e = e.structure).walls;
            if (o) {
                var s = new THREE.Group;
                for (var a in s.name = "structurnWall",
                o) {
                    var l = o[a].gltfid
                        , u = this.nodes[l];
                    u.traverse((function(e) {
                        e.material && (e.material.defines = e.material.defines || {},
                        e.material.defines.WALL_AO = !0,
                        e.material.metalness = .2,
                        e.material.roughness = .8,
                        e.material.needsUpdate = !0)
                    }
                    )),
                    u && s.add(u)
                }
                t.node.add(s),
                s.position.set(-n.x, -n.y, -n.z),
                t.wallNode = s
            }
            var c = e.roofs;
            if (c) {
                var h = new THREE.Group;
                for (var a in h.name = "structurnRoof",
                c) {
                    l = c[a].gltfid;
                    var p = this.nodes[l];
                    p && h.add(p)
                }
                t.node.add(h),
                h.position.set(-n.x, -n.y, -n.z),
                t.roofNode = h
            }
            var d = e.ceilings;
            if (d) {
                var f = new THREE.Group;
                for (var a in f.name = "structureCeiling",
                d) {
                    l = d[a].gltfid;
                    var m = this.nodes[l];
                    m && f.add(m)
                }
                t.node.add(f),
                f.position.set(-n.x, -n.y, -n.z),
                t.ceilNode = f
            }
            if (v = e.floors) {
                var g = new THREE.Group;
                for (var a in g.name = "structureFloor",
                v) {
                    var v;
                    if (l = (v = v[a]).gltfid) {
                        var y = this.nodes[l];
                        y.traverse((function(e) {
                            e.material && (e.material.roughness = .9,
                            e.material.needsUpdate = !0)
                        }
                        )),
                        y && g.add(y)
                    }
                }
                t.node.add(g),
                g.position.set(-n.x, -n.y, -n.z),
                t.floorNode = g
            }
            var b = new THREE.Group;
            b.name = "structurePlacement",
            t.miscNode = b,
            t.node.add(b),
            t.floorNode || (t.floorNode = b),
            b.updateMatrixWorld(),
            b.updateMatrix(),
            b.position.set(0, 0, 0);
            var _ = e.placements;
            if (_)
                for (var a in _) {
                    l = _[a].gltfid;
                    var x = this.nodes[l];
                    x && b.add(x)
                }
            e.routes && this.parseStructureThing(e.routes, t),
            e.pipelines && this.parseStructureThing(e.pipelines, t),
            e.curvelines && this.parseStructureThing(e.curvelines, t),
            e.arrowlines && this.parseStructureThing(e.arrowlines, t),
            e.arrowdatalines && this.parseStructureThing(e.arrowdatalines, t),
            e.leakwaterlines && this.parseStructureThing(e.leakwaterlines, t)
        }
    }
    ,
    e.prototype.parseDoorWins = function(e, t, i) {
        new THREE.Group("doors");
        for (var r in e) {
            var n = e[r]
                , o = r;
            n.name && (o = n.name);
            var s = null;
            if (n.gltfid) {
                var a = n.gltfid;
                this.nodes[a] && (s = this.nodes[a],
                t.node.add(s))
            }
            var l = null;
            if (n.properties) {
                var u = n.properties;
                for (var c in l = {},
                u) {
                    var h = u[c];
                    l[c] = h
                }
            }
            this.app.objectManager.create({
                type: "Door",
                name: o,
                node: s,
                parent: t,
                properties: l
            })
        }
    }
    ,
    e.prototype.parseGroups = function(e, t, i, r, n, o) {
        for (var s in e) {
            var a = e[s];
            a.name || a.properties ? this.createGroup(a, t) : this.combineGroup(a, t, i, r, n, o)
        }
    }
    ,
    e.prototype.createGroup = function(e, t) {
        var i, r, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Thing", o = this.instanceGroup(e);
        e.id && e.id,
        e.name && (i = e.name);
        var s = e.properties;
        if (s)
            for (var a in r = {},
            s) {
                var l = s[a];
                r[a] = l
            }
        var u = this.app.objectManager.create({
            type: n,
            name: i,
            node: o,
            parent: t,
            properties: r
        });
        return u
    }
    ,
    e.prototype.parseFloorPlans = function(e, t) {
        for (var i = [], r = 0; r < e.length; r++) {
            var n = e[r]
                , o = n.id
                , s = "";
            n.name && (s = n.name);
            var a = new THREE.Object3D
                , l = this.app.objectManager.create({
                type: "Floor",
                name: s,
                id: o,
                node: a,
                parent: t
            });
            a.name = "floorPlan",
            0 != t.facades.length && (l.node.visible = !1),
            t.node.add(l.node),
            t.node.updateMatrixWorld(),
            t.node.updateMatrix(),
            this.processFloorPlanData(n, l),
            i.push(l)
        }
        return i
    }
    ,
    e.prototype.parseBundleList = function(e) {
        this.app.modelResource.bundleIDArray = e;
        var t = 0
            , i = this;
        return new Promise((function(r, n) {
            0 !== e.length ? e.forEach((function(o) {
                if (u = o.uri) {
                    var s = new thingjs.GLTFLoader;
                    s.setCrossOrigin("anonymous"),
                    s.load(i.baseURL + "/" + u, (function(n) {
                        t++;
                        var o = null;
                        -1 !== n.asset.generator.indexOf("Unity") ? (o = n.scene.children[0].children[0],
                        i.app.modelResource.set(u, o, n.animations)) : (o = n.scene.children[0],
                        i.app.modelResource.set(u, o, n.animations)),
                        i.addEnvMap(o),
                        t === e.length && r()
                    }
                    ), (function() {}
                    ), (function(e) {
                        n("can not load " + i.baseURL + "/" + u)
                    }
                    ))
                } else {
                    var a = o.id
                        , l = o.version
                        , u = "http://model.3dmomoda.com/models/" + a + "/" + l + "/gltf/"
                        , c = new THREE.FileLoader;
                    c.setResponseType("json"),
                    c.load(u + "index.json", (function(o) {
                        var s = o.gltfFiles[0]
                            , l = new thingjs.GLTFLoader;
                        l.setCrossOrigin("anonymous"),
                        l.load(u + s, (function(n) {
                            t++,
                            i.app.modelResource.set(a, n.scene.children[0], n.animations),
                            t === e.length && r()
                        }
                        ), (function() {}
                        ), (function(e) {
                            n("can not load " + i.baseURL + "/" + u)
                        }
                        ))
                    }
                    ))
                }
            }
            )) : r()
        }
        ))
    }
    ,
    e.prototype.combineGroup = function(e, t, i, r, n, o) {
        var s = e
            , a = new THREE.Vector3(0,0,0);
        if (s.position) {
            var l = s.position;
            a.x = l[0],
            a.y = l[1],
            a.z = -l[2]
        }
        var u = new THREE.Vector3(1,1,1);
        if (s.scale) {
            var c = s.scale;
            u.x = c[0],
            u.y = c[1],
            u.z = c[2]
        }
        var h, p = new THREE.Quaternion(0,0,0,1);
        if (s.rotation) {
            var c = s.rotation;
            p.x = c[0],
            p.y = c[1],
            p.z = -c[2],
            p.w = -c[3]
        }
        if (n ? (h = i.slice(),
        c = r.slice(),
        l = n.slice()) : (h = [],
        l = [],
        c = []),
        h.push(u),
        l.push(a),
        c.push(p),
        s.placements && this.parseCombineProcessors(t, s.placements, l, h, c),
        s.groups)
            for (var d in s.groups)
                this.combineGroup(s.groups[d], t, h, c, l, o)
    }
    ,
    e.prototype.instanceGroup = function(e) {
        var t = new THREE.Vector3(0,0,0);
        if (e.position) {
            var i = e.position;
            t.x = i[0],
            t.y = i[1],
            t.z = -i[2]
        }
        var r = new THREE.Vector3(1,1,1);
        if (e.scale) {
            var n = e.scale;
            r.x = n[0],
            r.y = n[1],
            r.z = n[2]
        }
        var o = new THREE.Quaternion(0,0,0,1);
        if (e.rotation) {
            n = e.rotation;
            o.x = n[0],
            o.y = n[1],
            o.z = -n[2],
            o.w = -n[3]
        }
        var s = new THREE.Group;
        if (e.placements)
            for (var a in e.placements) {
                var l = this.instanceChildOfGroup(e.placements[a]);
                s.add(l)
            }
        if (e.groups)
            for (var a in e.groups) {
                l = this.instanceGroup(e.groups[a]);
                s.add(l)
            }
        return s.scale.copy(r),
        s.setRotationFromQuaternion(o),
        s.position.copy(t),
        s
    }
    ,
    e.prototype.instanceChildOfGroup = function(e) {
        var t = this.app.modelResource.bundleIDArray[e.model].uri;
        t || (t = this.app.modelResource.bundleIDArray[e.model].id);
        var i = this.app.modelResource.get(t).node.clone();
        if (e.scale) {
            var r = e.scale;
            i.scale.x = r[0],
            i.scale.y = r[1],
            i.scale.z = r[2]
        }
        if (e.rotation) {
            r = e.rotation;
            var n = new THREE.Quaternion;
            n.x = r[0],
            n.y = r[1],
            n.z = -r[2],
            n.w = -r[3],
            i.setRotationFromQuaternion(n)
        }
        if (e.position) {
            r = e.position;
            i.position.x = r[0],
            i.position.y = r[1],
            i.position.z = -r[2]
        }
        return i
    }
    ,
    e.prototype.parseThings = function(e, t, i) {
        for (var r in e) {
            var n = e[r];
            (n.name || n.properties || n.type) && this.createThing(n, t, i)
        }
    }
    ,
    e.prototype.createThing = function(e, t, i) {
        var r, n, o, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "Thing";
        e.id && (r = e.id);
        var a = e.type || s;
        e.name && (n = e.name);
        var l = e.properties;
        if (l)
            for (var u in o = {},
            l) {
                var c = l[u];
                o[u] = c
            }
        var h = this.app.modelResource.bundleIDArray[e.model].uri;
        h || (h = this.app.modelResource.bundleIDArray[e.model].id);
        var p = this.app.modelResource.get(h).node
            , d = p.clone()
            , f = this.app.modelResource.get(h).animations;
        if (e.position) {
            var m = e.position
                , g = new THREE.Vector3(m[0],m[1],-m[2]);
            d.position.x = g.x,
            d.position.y = g.y,
            d.position.z = g.z
        }
        if (e.rotation) {
            var v = e.rotation
                , y = new THREE.Quaternion;
            y.x = v[0],
            y.y = v[1],
            y.z = -v[2],
            y.w = -v[3],
            d.setRotationFromQuaternion(y)
        }
        if (e.scale) {
            var b = e.scale
                , _ = new THREE.Vector3;
            _.x = b[0],
            _.y = b[1],
            _.z = b[2],
            d.scale.x = _.x,
            d.scale.y = _.y,
            d.scale.z = _.z
        }
        var x = e.isShown;
        if (x) {
            var E = "false" !== (x = x.toLowerCase());
            d.visible = E
        }
        var w = this.app.objectManager.create({
            type: a,
            id: r,
            name: n,
            node: d,
            parent: t,
            animations: f,
            properties: o
        });
        return w
    }
    ,
    e.prototype.parseStructureThing = function(e, t, i) {
        for (var r in e) {
            var n = e[r];
            if (n.gltfid) {
                var o = new Thing(this.app);
                o.name = r,
                o.app = this.app,
                n.id && (o.id = n.id),
                n.name && (o.name = n.name);
                var s = n.gltfid;
                if (this.nodes[s]) {
                    var a = this.nodes[s];
                    t.node.add(a),
                    o.node = a,
                    t.add(o),
                    i && (a.position.x = i.x,
                    a.position.y = i.y,
                    a.position.z = i.z)
                }
            }
        }
    }
    ,
    e.prototype.delayLoadFloorPlan = function(e) {
        var t = g.mark(r)
            , i = this;
        function r(r) {
            var n, o, s;
            return g.wrap((function(t) {
                for (; ; )
                    switch (t.prev = t.next) {
                    case 0:
                        n = i.loadSpeed,
                        o = 10,
                        s = 0;
                    case 3:
                        if (!(s < r.length)) {
                            t.next = 9;
                            break
                        }
                        return t.next = 6,
                        new Promise((function(t, i) {
                            var a = performance.now();
                            r[s].build();
                            var l = r[s].combineMesh;
                            e.miscNode.add(l),
                            performance.now() - a > n ? setTimeout((function() {
                                t()
                            }
                            ), o) : t()
                        }
                        ));
                    case 6:
                        s++,
                        t.next = 3;
                        break;
                    case 9:
                    case "end":
                        return t.stop()
                    }
            }
            ), t, this)
        }
        var n = null
            , o = null;
        return e.isLoaded || (n = this.combineManager.processorMap.get(e),
        o = r(n)),
        new Promise((function(t, r) {
            o ? i._nestingLoopYield(o, (function() {
                e.isLoaded = !0,
                t()
            }
            ), (function(e) {
                r(e)
            }
            )) : e.isLoaded ? THING.Utils.warn("floorplan " + e.id + " has been loaded!") : r()
        }
        ))
    }
    ,
    e
}();
fs = function(e) {
    function t(i, n) {
        return classCallCheck(this, t),
        s(this, e.call(this, i, n))
    }
    return o(t, e),
    t.prototype.parseDoorWins = function(e, t, i) {
        new THREE.Group("doors");
        for (var r in e) {
            var n = e[r];
            n.type || (n.type = "Door"),
            this.createThing(n, t, i)
        }
    }
    ,
    t
}(ds);
ms = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.nodes = [],
        this.scene = this.app.scene,
        this.objectPool = this.app.objectPool,
        this.rootNode = null,
        this.campus = null,
        this.sceneURL = null,
        this.sceneJsonData = null,
        this.loadedSceneGLTF = null,
        this.worldNode = new THREE.Object3D,
        this.fitCamInfo = null
    }
    return e.prototype.parse = function(e) {
        for (var t in e)
            if ("objects" == t) {
                var i = e.objects;
                for (var r in i) {
                    var n = i[r];
                    this.parseWorld(n);
                    break
                }
            } else if ("camInfo" == t) {
                var o = e[t];
                this.fitCamInfo = o
            } else
                THING.Utils.log("unkown other parser: " + t)
    }
    ,
    e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.parseWorld = function(e) {
        var t = this.worldNode;
        if (null == this.campus && (this.campus = this.app.objectManager.create({
            type: "Campus",
            name: "Campus",
            node: t
        }),
        this.campus.node.name = "campus",
        this.app.scene.add(this.campus.node)),
        e.plan && this.parseOutdoors(e.plan),
        e.bds) {
            var i = e.bds;
            this.parseBuildings(i)
        }
    }
    ,
    e.prototype.parseOutdoors = function(e) {
        var t = null;
        for (var i in e) {
            t = e[i];
            break
        }
        var r = new THREE.Object3D;
        this.outdoors = this.app.objectManager.create({
            type: "Outdoors",
            name: "Outdoors",
            parent: this.campus,
            node: r
        });
        var n = this.outdoors
            , o = t.gltfid;
        if (o && this.nodes[o]) {
            var s = this.nodes[o];
            THREE.SceneUtils.detach(s, s.parent, this.app.scene),
            THREE.SceneUtils.attach(s, this.app.scene, n.node),
            n.node.updateMatrixWorld()
        }
        this.parseFloorPlan(t, n)
    }
    ,
    e.prototype.parseBuildings = function(e) {
        for (var t in e) {
            var i = e[t]
                , r = null;
            if (i.gltfid) {
                var n = i.gltfid;
                this.nodes[n] && (r = this.nodes[n])
            }
            var o = this.app.objectManager.create({
                type: "Building",
                name: t,
                parent: this.campus,
                node: r
            });
            i.plans && this.parseFloorPlans(i.plans, o),
            i.facades && this.parseFacades(i.facades, o)
        }
    }
    ,
    e.prototype.parseFloorPlans = function(e, t) {
        for (var i in e) {
            var r = null
                , n = e[i]
                , o = n.gltfid;
            o && this.nodes[o] && (r = this.nodes[o]);
            var s = this.app.objectManager.create({
                type: "Floor",
                name: i,
                node: r,
                parent: t
            });
            this.parseFloorPlan(n, s)
        }
    }
    ,
    e.prototype.parseFloorPlan = function(e, t) {
        e.plcs && this.parseThings(e.plcs, t),
        e.vps && this.parseThings(e.vps, t),
        e.dws && this.parseDoorWins(e.dws, t),
        e.routes && this.parseThings(e.routes, t),
        e.pipelines && this.parseThings(e.pipelines, t),
        e.curvelines && this.parseThings(e.curvelines, t),
        e.arrowlines && this.parseThings(e.arrowlines, t),
        e.arrowdatalines && this.parseThings(e.arrowdatalines, t),
        e.leakwaterlines && this.parseThings(e.leakwaterlines, t);
        var i = e.cplcs;
        if (i)
            for (var r in i) {
                var n = i[r].gltfid
                    , o = this.nodes[n];
                if (o) {
                    t.miscNode = o.parent;
                    break
                }
            }
        var s = e.cwalls;
        if (s)
            for (var r in s) {
                n = s[r].gltfid;
                var a = this.nodes[n];
                if (a) {
                    t.wallNode = a.parent;
                    break
                }
            }
        var l = e.croofs;
        if (l)
            for (var r in l) {
                n = l[r].gltfid;
                var u = this.nodes[n];
                if (u) {
                    t.roofNode = u.parent;
                    break
                }
            }
        var c = e.cceilings;
        if (c)
            for (var r in c) {
                n = c[r].gltfid;
                var h = this.nodes[n];
                if (h) {
                    t.ceilingNode = h.parent;
                    break
                }
            }
        if (p = e.cfloors)
            for (var r in p) {
                var p;
                if (n = (p = p[r]).gltfid) {
                    var d = this.nodes[n];
                    if (d) {
                        t.floorNode = d.parent;
                        break
                    }
                }
            }
        var f = e.groups;
        f && this.parseGroup(f, t)
    }
    ,
    e.prototype.parseGroup = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.uid && (n = r.uid);
            var o = r.type || "Thing"
                , s = null
                , a = r.gltfid;
            a && this.nodes[a] && (s = this.nodes[a]);
            var l = null
                , u = r.prop;
            if (u)
                for (var c in l = {},
                u) {
                    var h = u[c];
                    l[c] = h
                }
            this.app.objectManager.create({
                type: o,
                name: n,
                node: s,
                parent: t,
                properties: l
            }),
            r.plcs && this.parseThings(r.plcs, t)
        }
    }
    ,
    e.prototype.parseFacades = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.uid && (n = r.uid);
            var o = null
                , s = r.gltfid;
            s && this.nodes[s] && (o = this.nodes[s]);
            var a = null
                , l = r.prop;
            if (l)
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            var h = r.isShown;
            if (h) {
                var p = "false" !== (h = h.toLowerCase());
                o.visible = p
            }
            this.app.objectManager.create({
                type: "Facade",
                name: n,
                node: o,
                parent: t,
                properties: a
            });
            t.node.add(o)
        }
    }
    ,
    e.prototype.parseThings = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.uid && (n = r.uid);
            var o = null
                , s = r.gltfid;
            s && this.nodes[s] && (o = this.nodes[s]);
            var a = null
                , l = r.prop;
            if (l)
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            var h = r.isShown;
            if (h) {
                var p = "false" !== (h = h.toLowerCase());
                o.visible = p
            }
            this.app.objectManager.create({
                type: "Thing",
                name: n,
                node: o,
                parent: t,
                properties: a
            })
        }
    }
    ,
    e.prototype.parseDoorWins = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.uid && (n = r.uid);
            var o = null;
            if (r.gltfid) {
                var s = r.gltfid;
                this.nodes[s] && (o = this.nodes[s])
            }
            var a = null;
            if (r.prop) {
                var l = r.prop;
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            }
            this.app.objectManager.create({
                type: "Door",
                name: n,
                node: o,
                parent: t,
                properties: a
            })
        }
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if ("String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node)
        }
        return new Promise((function(e, i) {
            t.loadGLTF().then((function(e) {
                return t.loadedSceneGLTF = e,
                e.scene.traverse((function(e) {
                    t.nodes[e.name] = e
                }
                )),
                t.parseSceneJson()
            }
            )).then((function(i) {
                t.fitCamInfo ? t.parseCamInfo(t.fitCamInfo) : t.campus.node && t.app.camera.fit(t.campus),
                e(t.campus)
            }
            )).catch((function() {
                t.campus.node.add(t.loadedSceneGLTF.scene.children[0]),
                t.campus && t.app.camera.fit(t.campus),
                e(t.campus)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadGLTF = function() {
        var e = this;
        return new Promise((function(t, i) {
            var r = new THREE.GLTFLoader(e.app.loadingManager);
            r.setCrossOrigin("anonymous"),
            r.load(e.sceneURL + "/Unity2GLTF.gltf", (function(e) {
                t(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parseSceneJson = function() {
        var e = this;
        return new Promise((function(t, i) {
            new THREE.FileLoader(e.app.loadingManager).load(e.sceneURL + "/scene.json", (function(i) {
                var r = JSON.parse(i);
                for (var n in e.sceneJsonData = r,
                r)
                    if ("objects" == n) {
                        var o = r.objects;
                        for (var s in o) {
                            var a = o[s];
                            e.parseWorld(a);
                            break
                        }
                    } else if ("camInfo" == n) {
                        var l = r[n];
                        e.fitCamInfo = l
                    } else
                        THING.Utils.log("unkown other parser: " + n);
                t(r)
            }
            ), (function() {}
            ), (function() {
                THING.Utils.error("not find file scene.json "),
                i()
            }
            ))
        }
        ))
    }
    ,
    e
}();
gs = "FacadeMain";
vs = "Ground";
ys = "Thing";
bs = "Tree";
_s = "Objects";
xs = "FloorFloor";
Es = "FloorRoof";
ws = "FloorCeiling";
Ts = "FloorManualWall";
Ms = "Door";
function Cs() {}
Cs.addTHINGJSObjectSfStyle = function(e, t) {
    if (e) {
        var i = e.userData;
        i && i._styleTag_ && (t = i._styleTag_),
        t && Cs.addNodeSfStyle(e.node, t)
    }
}

Cs.addThingJsObjectSfStyle = function(e, t) {
    if (e) {
        var i = e.properties;
        i && i._styleTag_ && (t = i._styleTag_),
        t && Cs.addNodeSfStyle(e.mesh, t)
    }
}

Cs.addJson2meshObjectSfStyle = function(e, t) {
    if (e) {
        var i = e.properties;
        i && i._styleTag_ && (t = i._styleTag_),
        t && Cs.addNodeSfStyle(e.mesh, t)
    }
}

Cs.addPlacementGroupSfStyle = function(e, t) {
    var i = e.placements;
    if (i)
        for (var r = 0; r < i.length; r++) {
            var n = i[r]
                , o = n.resource.modelID
                , s = ys;
            this.isTree(o) ? s = bs : this.isWall(o) && (s = "Outdoors" === t ? vs : Ts),
            Cs.addJson2meshObjectSfStyle(n, s)
        }
    var a = e.groups;
    if (a)
        for (var l = 0; l < a.length; l++) {
            var u = a[l];
            this.addPlacementGroupSfStyle(u)
        }
}

Cs.addNodeSfStyle = function(e, t) {
    if (e) {
        var i = Cs.getMeshes(e);
        i && i.length > 0 && i.forEach((function(e) {
            e._sfStyle = t
        }
        ))
    }
}

Cs.addBatchCombinePlacementStyle = function(e, t, i) {
    var r = null
        , n = t.properties;
    n ? n._styleTag_ && (r = n._styleTag_) : r = "Outdoors" === t.parent.type ? Cs.isTree(i) ? bs : Cs.isWall(i) ? vs : _s : Cs.isTree(i) ? bs : Cs.isWall(i) ? Ts : _s,
    Cs.addNodeSfStyle(e.node, r)
}

Cs.addBatchPlacementStyle = function(e, t, i) {
    var r = null
        , n = t.properties;
    n ? n._styleTag_ && (r = n._styleTag_) : r = "Outdoors" === t.parent.type ? Cs.isTree(i) ? bs : Cs.isWall(i) ? vs : ys : Cs.isTree(i) ? bs : Cs.isWall(i) ? Ts : ys,
    Cs.addNodeSfStyle(e.node, r)
}

Cs.getMeshes = function(e) {
    var t = [];
    return e.traverse((function(e) {
        e.isMesh && t.push(e)
    }
    )),
    t
}

Cs.isWall = function(e) {
    return !!Ss[e]
}

Cs.isTree = function(e) {
    return !!js[e]
}
;
var Ss = {
    BC4ACD398A9640859A6B386E1BF9231D: {
        id: "BC4ACD398A9640859A6B386E1BF9231D",
        type: "Wall",
        size: [.8, 2.999, .8],
        version: "5"
    },
    "25DFE916055244849463F89A03DA97CD": {
        id: "25DFE916055244849463F89A03DA97CD",
        type: "Wall",
        size: [.845, 3.099, .849],
        version: "5"
    }
};
js = {
    "3629A959F80C4D0EA31D1E26524735B8": {
        id: "3629A959F80C4D0EA31D1E26524735B8",
        type: "Placement",
        size: [8.1, 9.60776, 8.7],
        version: "7"
    },
    BB23ED379CFB4A0AB14BD124EC2995BE: {
        id: "BB23ED379CFB4A0AB14BD124EC2995BE",
        type: "Placement",
        size: [.64347, 1.34912, .8],
        version: "7"
    },
    A7D96546FA744C38A949DFC6FEE43B6A: {
        id: "A7D96546FA744C38A949DFC6FEE43B6A",
        type: "Placement",
        size: [.6, 1.1, .6],
        version: "7"
    },
    FA5766D2AA074128ABB5D4CA3FF45B36: {
        id: "FA5766D2AA074128ABB5D4CA3FF45B36",
        type: "Placement",
        size: [.4, .61599, .39999],
        version: "6"
    },
    "8EC4FF7178E64C538B215D69684E4F92": {
        id: "8EC4FF7178E64C538B215D69684E4F92",
        type: "Placement",
        size: [.4, .5, .4],
        version: "6"
    },
    "449c02c5e8f84a2aa32f58ed53aa24b9": {
        id: "449c02c5e8f84a2aa32f58ed53aa24b9",
        type: "Placement",
        size: [.23118, .5986, .24155],
        version: "1"
    },
    c26acc8a9f804d8da2f49aba46283ac3: {
        id: "c26acc8a9f804d8da2f49aba46283ac3",
        type: "Placement",
        size: [7.85544, 7.80654, 7.44832],
        version: "2"
    },
    "07b2d180e1ea42de98723fe147f6750a": {
        id: "07b2d180e1ea42de98723fe147f6750a",
        type: "Placement",
        size: [10.3207, 9.84333, 10.0598],
        version: "3"
    },
    "2c969242db5f4da58442182ccbda7471": {
        id: "2c969242db5f4da58442182ccbda7471",
        type: "Placement",
        size: [7.20139, 25.1363, 6.56474],
        version: "4"
    },
    D26DB25C34C94CAABF24FED40F1A9719: {
        id: "D26DB25C34C94CAABF24FED40F1A9719",
        type: "Placement",
        size: [8.24071, 19.2, 7.6],
        version: "6"
    },
    "ebafecf0-cc89-42dc-b847-0f841a31bdca": {
        id: "ebafecf0-cc89-42dc-b847-0f841a31bdca",
        type: "Placement",
        size: [4.94077, 5.83847, 4.78861],
        version: "9"
    },
    "4EF86FC4FFA44013AC4F45E8CD0D343F": {
        id: "4EF86FC4FFA44013AC4F45E8CD0D343F",
        type: "Placement",
        size: [5.66699, 7.4, 6.233],
        version: "6"
    },
    "9C27FD900C4443FBA1151C9DF767D19A": {
        id: "9C27FD900C4443FBA1151C9DF767D19A",
        type: "Placement",
        size: [7.50716, 8.2, 7.87936],
        version: "6"
    },
    "6b768c2d-3c2f-4954-a625-ef4b57f72a47": {
        id: "6b768c2d-3c2f-4954-a625-ef4b57f72a47",
        type: "Placement",
        size: [6.32989, 7.49752, 5.72546],
        version: "8"
    },
    "9fc66d5b-a213-4fc6-9fc6-f759aa88716a": {
        id: "9fc66d5b-a213-4fc6-9fc6-f759aa88716a",
        type: "Placement",
        size: [4.5, 9.4, 4.4],
        version: "4"
    },
    "963de658-70b6-49e7-bb0e-504ad603fe27": {
        id: "963de658-70b6-49e7-bb0e-504ad603fe27",
        type: "Placement",
        size: [1.4073, 4.03187, 1.37224],
        version: "5"
    },
    "d5b06cf7-2a31-4252-8d7c-02d48815ed18": {
        id: "d5b06cf7-2a31-4252-8d7c-02d48815ed18",
        type: "Placement",
        size: [7.3, 7.4, 6.1],
        version: "4"
    },
    "f9058709-ee84-41f6-8260-fbb734dc9483": {
        id: "f9058709-ee84-41f6-8260-fbb734dc9483",
        type: "Placement",
        size: [4.3, 7.2, 4],
        version: "4"
    },
    "be7d0bfc-ce60-4132-8a88-afd1301c82b3": {
        id: "be7d0bfc-ce60-4132-8a88-afd1301c82b3",
        type: "Placement",
        size: [4.41539, 7.57112, 4.49063],
        version: "5"
    },
    "95bd04fe237f42e0adeabb78028c8ee7": {
        id: "95bd04fe237f42e0adeabb78028c8ee7",
        type: "Placement",
        size: [4.41539, 7.57112, 4.49063],
        version: "1"
    },
    "1d2827ffd12b4ac1a2035fa81646a450": {
        id: "1d2827ffd12b4ac1a2035fa81646a450",
        type: "Placement",
        size: [12.63521, 15.81749, 13.21056],
        version: "3"
    }
};
Ps = function() {
    function e() {
        classCallCheck(this, e),
        this.world = null,
        this.styleTable = {
            outdoors: {},
            buildings: {}
        }
    }
    return e.prototype.clear = function() {
        this.world = null,
        this.styleTable = {
            outdoors: {},
            buildings: {}
        }
    }
    ,
    e.prototype.parseWorld = function(e) {
        this._parseObject(e)
    }
    ,
    e.prototype._parseObject = function(e) {
        if (e.registerBuildCallbackListener(this.objectBuildedCallback, {
            loader: this
        }),
        e.isContainer)
            for (var t = 0; t < e.children.length; t++) {
                var i = e.children[t];
                this._parseObject(i)
            }
    }
    ,
    e.prototype.objectBuildedCallback = function(e, t) {
        var i = t.loader;
        "Facade" === e.type || "FacadeGroup" === e.type ? i.facadeBuildCallback(e, t) : "Placement" === e.type || "PlacementGround" === e.type ? i.placementBuildCallback(e, t) : "DoorOrWindow" === e.type ? i.doorOrWindowBuildCallback(e, t) : "VideoProbe" === e.type ? i.videoProbeBuildCallback(e, t) : "Room" === e.type ? i.roomBuildCallback(e, t) : "PlacementGroup" === e.type ? i.groupBuildCallback(e, t) : -1 !== e.type.indexOf("Combine") && i.combinedObjectBuildCallback(e, t)
    }
    ,
    e.prototype.parseBuilding = function(e) {
        this.parseFacades(e);
        for (var t = e.floorplans, i = 0; i < t.length; i++) {
            var r = t[i];
            this.parseFloorPlan(r)
        }
    }
    ,
    e.prototype.parseFacades = function(e) {
        for (var t = e.facades, i = e.facadeGroups, r = 0; r < t.length; r++) {
            t[r].registerBuildCallbackListener(this.facadeBuildCallback, {
                loader: this
            })
        }
        for (var n = 0; n < i.length; n++) {
            i[n].registerBuildCallbackListener(this.facadeBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.facadeBuildCallback = function(e, t) {
        t.loader;
        var i = void 0
            , r = e.properties;
        r && (i = r._styleTag_);
        var n = Cs.getMeshes(e.mesh);
        n && n.length > 0 && n.forEach((function(e) {
            e._sfStyle = i || gs
        }
        ))
    }
    ,
    e.prototype.parseFloorPlan = function(e) {
        this.parseDoorOrWindows(e),
        this.parseCombineFloors(e),
        this.parseCombineCeilings(e),
        this.parseCombineRoofs(e),
        this.parseCombinePlacements(e),
        this.parseCombineStraightManualWalls(e),
        this.parseCombineModelWalls(e),
        this.parseCombineDoorOrWindows(e),
        this.parseGroups(e),
        this.parsePlacements(e),
        this.parseRooms(e),
        this.parseVideoProbes(e),
        this.parsePlacementGround(e),
        this.parseCombinePlacementWalls(e)
    }
    ,
    e.prototype.parsePlacementGround = function(e) {
        for (var t = 0; t < e.placementGrounds.length; t++) {
            e.placementGrounds[t].registerBuildCallbackListener(this.placementBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.parseCombineFloors = function(e) {
        for (var t = 0; t < e.combineFloorObjects.length; t++) {
            var i = e.combineFloorObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombineFloor")
        }
    }
    ,
    e.prototype.parseCombineCeilings = function(e) {
        for (var t = 0; t < e.combineCeilingObjects.length; t++) {
            var i = e.combineCeilingObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombineCeiling")
        }
    }
    ,
    e.prototype.parseCombineRoofs = function(e) {
        for (var t = 0; t < e.combineRoofObjects.length; t++) {
            var i = e.combineRoofObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombineRoof")
        }
    }
    ,
    e.prototype.parseCombinePlacements = function(e) {
        for (var t = 0; t < e.combinePlacementObjects.length; t++) {
            var i = e.combinePlacementObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombinePlacement")
        }
    }
    ,
    e.prototype.parseCombineStraightManualWalls = function(e) {
        for (var t = 0; t < e.combineStraightManualWallObjects.length; t++) {
            var i = e.combineStraightManualWallObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombineStraightManualWall")
        }
    }
    ,
    e.prototype.parseCombineModelWalls = function(e) {
        for (var t = 0; t < e.combineModelWallObjects.length; t++) {
            var i = e.combineModelWallObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombineModelWall")
        }
    }
    ,
    e.prototype.parseCombinePlacementWalls = function(e) {
        for (var t = 0; t < e.combinePlacementWallObjects.length; t++) {
            var i = e.combinePlacementWallObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombinePlacementWall")
        }
    }
    ,
    e.prototype.parseCombineDoorOrWindows = function(e) {
        for (var t = 0; t < e.combineDoorOrWindowObjects.length; t++) {
            var i = e.combineDoorOrWindowObjects[t];
            this.registerCombineObjectBuildCallback(i, "CombineDoorOrWindow")
        }
    }
    ,
    e.prototype.parsePlacements = function(e) {
        for (var t = 0; t < e.placements.length; t++) {
            e.placements[t].registerBuildCallbackListener(this.placementBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.placementBuildCallback = function(e, t) {
        t.loader;
        var i = e.resource.modelID
            , r = ys;
        Cs.isTree(i) ? r = bs : Cs.isWall(i) && (r = "Outdoors" === e.parent.type ? vs : Ts),
        Cs.addThingJsObjectSfStyle(e, r)
    }
    ,
    e.prototype.parseDoorOrWindows = function(e) {
        for (var t = 0; t < e.doorOrWindows.length; t++) {
            e.doorOrWindows[t].registerBuildCallbackListener(this.doorOrWindowBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.doorOrWindowBuildCallback = function(e, t) {
        t.loader;
        e.isWindow ? Cs.addThingJsObjectSfStyle(e, e.parent instanceof json2mesh.Outdoors ? _s : ys) : Cs.addThingJsObjectSfStyle(e, e.parent instanceof json2mesh.Outdoors ? _s : Ms)
    }
    ,
    e.prototype.parseGroups = function(e) {
        for (var t = 0; t < e.groups.length; t++) {
            e.groups[t].registerBuildCallbackListener(this.groupBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.groupBuildCallback = function(e, t) {
        t.loader;
        var i = e.parent.type;
        Cs.addPlacementGroupSfStyle(e, i)
    }
    ,
    e.prototype.parseRooms = function(e) {
        for (var t = 0; t < e.rooms.length; t++) {
            e.rooms[t].registerBuildCallbackListener(this.roomBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.roomBuildCallback = function(e, t) {
        t.loader;
        "Outdoors" === e.parent.type ? Cs.addThingJsObjectSfStyle(e.floor, vs) : (Cs.addThingJsObjectSfStyle(e.ceiling, ws),
        Cs.addThingJsObjectSfStyle(e.roof, Es),
        Cs.addThingJsObjectSfStyle(e.floor, xs))
    }
    ,
    e.prototype.parseVideoProbes = function(e) {
        for (var t = 0; t < e.videoprobes.length; t++) {
            e.videoprobes[t].registerBuildCallbackListener(this.videoProbeBuildCallback, {
                loader: this
            })
        }
    }
    ,
    e.prototype.videoProbeBuildCallback = function(e, t) {
        t.loader;
        Cs.addThingJsObjectSfStyle(e, ys)
    }
    ,
    e.prototype.registerCombineObjectBuildCallback = function(e, t) {
        e.registerBuildCallbackListener(this.combinedObjectBuildCallback, {
            loader: this,
            typeName: t
        })
    }
    ,
    e.prototype.combinedObjectBuildCallback = function(e, t) {
        var i = e
            , r = e.type;
        t.loader;
        if ("CombineFloor" === r)
            Cs.addThingJsObjectSfStyle(i, e.parent instanceof json2mesh.Outdoors ? vs : xs);
        else if ("CombineCeiling" === r)
            Cs.addThingJsObjectSfStyle(i, ws);
        else if ("CombineRoof" === r)
            Cs.addThingJsObjectSfStyle(i, Es);
        else if ("CombinePlacement" === r) {
            var n = e.resource.modelID
                , o = _s;
            Cs.isTree(n) ? o = bs : Cs.isWall(n) && (o = "Outdoors" !== e.parent.type ? Ts : vs),
            Cs.addThingJsObjectSfStyle(i, o)
        } else if ("CombineStraightManualWall" === r)
            Cs.addThingJsObjectSfStyle(i, e.parent instanceof json2mesh.Outdoors ? vs : Ts);
        else if ("CombineModelWall" === r)
            Cs.addThingJsObjectSfStyle(i, e.parent instanceof json2mesh.Outdoors ? vs : Ts);
        else if ("CombineDoorOrWindow" === r)
            Cs.addThingJsObjectSfStyle(i, e.parent instanceof json2mesh.Outdoors ? _s : Ms);
        else if ("CombinePlacementWall" === r)
            Cs.addThingJsObjectSfStyle(i, e.parent instanceof json2mesh.Outdoors ? vs : Ts);
        else if ("CombinePlacementGroup" === r) {
            var s = _s;
            Cs.addThingJsObjectSfStyle(i, s)
        } else {
            var a = _s;
            Cs.addThingJsObjectSfStyle(i, a)
        }
    }
    ,
    e
}();
Rs = function() {
    function e(t) {
        classCallCheck(this, e),
        t.config && (this.config = t.config),
        this.events = [],
        t.events && (this.events = t.events),
        this.app = t.app,
        this.creators = []
    }
    return e.prototype.clear = function() {
        for (var e = 0; e < this.creators.length; e++) {
            this.creators[e].clear()
        }
        this.events = [],
        this.app = null,
        this.creators = [],
        this.config = []
    }
    ,
    e.prototype.setConfig = function(e) {
        this.config = e
    }
    ,
    e.prototype.createTjsObject = function(e, t) {
        var i = new (this.config.getClass(e.type))({
            json2meshObject: e,
            app: this.app,
            thingjsParent: t,
            events: this.events,
            config: this.config
        });
        return this.creators.push(i),
        i.create()
    }
    ,
    e.prototype.createTjsFacadeObject = function(e, t) {
        var i = new (this.config.getClass("Facade"))({
            json2meshObject: e,
            json2meshBuilding: e,
            app: this.app,
            thingjsParent: t,
            events: this.events,
            config: this.config
        });
        return this.creators.push(i),
        i.create()
    }
    ,
    e
}();
Ds = function() {
    function e(t) {
        classCallCheck(this, e),
        this.json2meshObject = t.json2meshObject,
        this.app = t.app,
        this.thingjsParent = t.thingjsParent,
        this.createType = null,
        this.thingjsObject = null,
        this.config = t.config,
        this._createdCallbacks = [],
        this._createdCallbackParams = [],
        this._buildedCallbacks = [],
        this._buildedCallbackParams = [],
        t.events && this.initEvents(t.events)
    }
    return e.prototype.clear = function() {
        this.json2meshObject = null,
        this.app = null,
        this.thingjsParent = null,
        this.createType = null,
        this.thingjsObject = null,
        this.config = null,
        this._createdCallbacks = [],
        this._createdCallbackParams = [],
        this._buildedCallbacks = [],
        this._buildedCallbackParams = []
    }
    ,
    e.prototype.initEvents = function(e) {
        for (var t = 0; t < e.length; t++) {
            e[t].init(this)
        }
    }
    ,
    e.prototype.create = function() {
        var e = this._getCreateParams();
        return this.thingjsObject = this.config.getCreatedThingjsObject(this.json2meshObject.id),
        this.thingjsObject ? this._initCreatedThingjsObjectParams(e) : this.thingjsObject = this.app.objectManager.create(e),
        this.thingjsObject.localPosition = this._getThingjsLocalPosition(),
        this.thingjsObject.scale = this.json2meshObject.scale,
        this.thingjsObject.node.quaternion.set(this.json2meshObject.rotation[0], this.json2meshObject.rotation[1], this.json2meshObject.rotation[2], this.json2meshObject.rotation[3]),
        this.json2meshObject.registerBuildCallbackListener(this._callback, {
            creator: this,
            uuid: this.thingjsObject.uuid
        }),
        this.json2meshObject.camInfo && (this.thingjsObject.userData.camInfo = this.json2meshObject.camInfo),
        this._notifyCreatedCompleteListeners(),
        this._registerChangeTypeEvent(),
        this.thingjsObject
    }
    ,
    e.prototype._registerChangeTypeEvent = function() {
        var e = this;
        this.thingjsObject.one("classtypechange", (function(t) {
            e._changeTypeCallback(t)
        }
        ))
    }
    ,
    e.prototype._changeTypeCallback = function(e) {
        this.thingjsObject = e.newObject
    }
    ,
    e.prototype._getThingjsLocalPosition = function() {
        return this.json2meshObject.position
    }
    ,
    e.prototype._initCreatedThingjsObjectParams = function(e) {
        this.thingjsObject.uuid = e.uuid,
        this.thingjsObject.id = e.id,
        this.thingjsObject.name = e.name
    }
    ,
    e.prototype.registerCreatedCallbackListener = function(e, t) {
        this._createdCallbacks.push(e),
        this._createdCallbackParams.push(t)
    }
    ,
    e.prototype._notifyCreatedCompleteListeners = function() {
        for (var e = 0; e < this._createdCallbacks.length; e++) {
            (0,
            this._createdCallbacks[e])(this, this._createdCallbackParams[e])
        }
    }
    ,
    e.prototype.registerBuildedCallbackListener = function(e, t) {
        this._buildedCallbacks.push(e),
        this._buildedCallbackParams.push(t)
    }
    ,
    e.prototype._notifyBuildedCompleteListeners = function() {
        for (var e = 0; e < this._buildedCallbacks.length; e++) {
            (0,
            this._buildedCallbacks[e])(this, this._buildedCallbackParams[e])
        }
    }
    ,
    e.prototype._getCreateParams = function() {
        var e = {};
        e.uuid = this.json2meshObject.id,
        null !== this.json2meshObject.userID && (e.id = this.json2meshObject.userID),
        null !== this.json2meshObject.name && (e.name = this.json2meshObject.name),
        null !== this.json2meshObject.properties && (e.properties = this.json2meshObject.properties),
        null !== this.thingjsParent && void 0 !== this.thingjsParent && (e.parent = this._getParent(this.thingjsParent, this.createType));
        var t = this.createType;
        return this.json2meshObject.jsonData && this.json2meshObject.jsonData.type && (t = this.json2meshObject.jsonData.type),
        e.type = t,
        e.loaded = !1,
        e.node = new THREE.Object3D,
        e.node.name = t,
        this.json2meshObject.resource && this.json2meshObject.resource.getModelUrl && (e.url = this.json2meshObject.resource.getModelUrl()),
        e.initBoxSize = this.getJson2MeshObjectSize(),
        e
    }
    ,
    e.prototype._callback = function(e, t) {
        var i = t.creator;
        i._processCallback();
        var r = i.thingjsObject;
        i._notifyBuildedCompleteListeners(),
        r.setupResources({
            loaded: !0
        }),
        t.thingjsObject = r
    }
    ,
    e.prototype._processCallback = function() {
        var e = this.json2meshObject
            , t = this.thingjsObject;
        e.mesh && (e.mesh.position.set(0, 0, 0),
        e.mesh.quaternion.set(0, 0, 0, 1),
        e.mesh.scale.set(1, 1, 1),
        t._addNodeBySceneLoad(e.mesh))
    }
    ,
    e.prototype._createCube = function() {
        var e = new THREE.BoxGeometry(1,1,1)
            , t = new THREE.MeshBasicMaterial({
            color: 65280
        });
        return new THREE.Mesh(e,t)
    }
    ,
    e.prototype._getParent = function(e, t) {
        return null == t && (t = "Thing"),
        "Ground" === e.type ? "CombinedObject" === t || "BatchObject" === t ? e : e.parent : e
    }
    ,
    e.prototype._isNullOrUndefined = function(e) {
        return null == e
    }
    ,
    e.prototype.getJson2MeshObjectSize = function() {
        return this.json2meshObject.size
    }
    ,
    e
}();
As = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Campus",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var e = this._getCreateParams();
        return this.thingjsObject = this.config.getCreatedThingjsObject(this.json2meshObject.id),
        this.thingjsObject ? this._initCreatedThingjsObjectParams(e) : this.thingjsObject = this.app.objectManager.create(e),
        this.json2meshObject.registerBuildCallbackListener(this._callback, {
            creator: this,
            uuid: this.thingjsObject.uuid
        }),
        this.json2meshObject.camInfo && (this.thingjsObject.userData.camInfo = this.json2meshObject.camInfo),
        this._notifyCreatedCompleteListeners(),
        this._registerChangeTypeEvent(),
        this.config.campus = this.thingjsObject,
        this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.loaded = !0,
        t
    }
    ,
    t.prototype._initCreatedThingjsObjectParams = function(e) {
        this.thingjsObject.uuid = this.json2meshObject.id,
        this.json2meshObject.userID && (this.thingjsObject.id = this.json2meshObject.userID),
        this.thingjsObject._initBoxSize = e.initBoxSize
    }
    ,
    t
}(Ds);
ks = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Building",
        n
    }
    return o(t, e),
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.loaded = !0,
        t.structShow = this.json2meshObject.structShow,
        t
    }
    ,
    t.prototype.create = function() {
        return e.prototype.create.call(this),
        this.thingjsObject
    }
    ,
    t
}(Ds);
Os = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Floor",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        return e.prototype.create.call(this),
        this._createCombineObjectParent("CombineWallParent"),
        this._createCombineObjectParent("CombineMiscParent"),
        this._createCombineObjectParent("CombineRoofParent"),
        this._createCombineObjectParent("CombineCeilingParent"),
        this._createCombineObjectParent("CombineFloorParent"),
        this.thingjsObject
    }
    ,
    t.prototype._hidePlanObjs = function(e) {
        if (!e.showObjectsInParentLevels) {
            for (var t = e._children, i = 0; i < t.length; i++) {
                var r = t[i];
                if (r.isCombinedObject && "CombineMiscParent" === r.userData.type)
                    for (var n = r._children, o = 0; o < n.length; o++) {
                        var s = n[o];
                        s.isCombinedObject && ("CombinePlacement" === s.userData.json2meshType && (s.visible = !1))
                    }
            }
            for (var a = 0; a < e.children.length; a++) {
                var l = e.children[a];
                l.isDoor || "Room" === l.type || ("Thing" === l.type && l.isWindow || (l.visible = !1))
            }
        }
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.height = this.json2meshObject.height,
        t.alwaysShowInsideObjs = this.json2meshObject.alwaysShowInsideObjs,
        t.initBoxSize = this.json2meshObject.size,
        t
    }
    ,
    t.prototype._createCombineObjectParent = function(e) {
        var t = this.app.objectManager.create({
            node: new THREE.Object3D,
            loaded: !0,
            parent: this._getParent(this.thingjsObject, "CombinedObject"),
            type: "CombinedObject"
        });
        t.userData.type = e,
        t.userData.isCombineParent = !0
    }
    ,
    t.prototype._callback = function(e, t) {
        for (var i = t.creator, r = i.thingjsObject, n = r._children, o = 0; o < n.length; o++) {
            var s = n[o];
            s.isCombinedObject && (s.loaded || s.setupResources({}))
        }
        r.loaded || r.setupResources({}),
        i._notifyBuildedCompleteListeners()
    }
    ,
    t
}(Ds);
Bs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.json2meshObject.jsonData && n.json2meshObject.jsonData.type ? n.createType = n.json2meshObject.jsonData.type : n.createType = "Thing",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this);
        t.bundleID = this.json2meshObject.resource.modelID,
        t.bundleName = this.json2meshObject.resource.modelName,
        this._setVisible();
        var i = this.json2meshObject.resource.type;
        return "CustomResource" != i && "CustomModelResource" != i || (this.thingjsObject.node.userData.isCustomResource = !0),
        this.thingjsObject
    }
    ,
    t.prototype._setVisible = function() {
        var e = this.thingjsObject;
        "Floor" !== e.parent.type || e.parent.showObjectsInParentLevels || (e.visible = !1)
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.belongRoomUserID = this.json2meshObject.belongRoomUserID,
        t.hideByScene = !this.json2meshObject.visible,
        t.url = this.json2meshObject.resource.getModelUrl(),
        t
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        var r = i.thingjsObject;
        if (r.node.name = t.name || "",
        r._hideByScene = !t.visible,
        r.setupAnimations({
            model: t.resource.downloadModelRoot
        }),
        t.isPlayAnim && r.containAnimation(t.animClip)) {
            var n = {
                name: t.animClip,
                loop: !1,
                speed: 1
            };
            "_defaultAnim_" === t.animClip && (n.loop = !0),
            r.playAnimation(n)
        }
    }
    ,
    t
}(Ds);
Fs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Ground",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        return e.prototype.create.call(this),
        this.thingjsObject.name = this.json2meshObject.id,
        this._createCombineObjectParent("CombineWallParent"),
        this._createCombineObjectParent("CombineMiscParent"),
        this._createCombineObjectParent("CombineFloorParent"),
        this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.height = this.json2meshObject.height,
        t.alwaysShowInsideObjs = this.json2meshObject.alwaysShowInsideObjs,
        t.loaded = !0,
        t
    }
    ,
    t.prototype._createCombineObjectParent = function(e) {
        var t = this.app.objectManager.create({
            node: new THREE.Object3D,
            loaded: !0,
            parent: this._getParent(this.thingjsObject, "CombinedObject"),
            type: "CombinedObject"
        });
        t.userData.type = e,
        t.userData.isCombineParent = !0
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        var r = i.creator
            , n = i.thingjsObject;
        n.wall.setupResources({}),
        r._setupResourcesToChildren(n.wall),
        n.plan.setupResources({}),
        r._setupResourcesToChildren(n.plan),
        n.misc.setupResources({}),
        r._setupResourcesToChildren(n.misc)
    }
    ,
    t.prototype._setupResourcesToChildren = function(e) {
        for (var t = 0; t < e.children.length; t++) {
            e.children[t].setupResources({})
        }
    }
    ,
    t
}(Ds);
Ls = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "CombinedObject",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        return e.prototype.create.call(this).userData.json2meshType = this.json2meshObject.type,
        this.thingjsObject
    }
    ,
    t.prototype.getJson2MeshObjectSize = function() {
        return null
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i),
        i.creator._checkCombineParentObjectLoaded()
    }
    ,
    t.prototype._checkCombineParentObjectLoaded = function() {
        for (var e = this.thingjsParent, t = 0; t < e._children.length; t++) {
            if (!e._children[t].loaded)
                return
        }
        e.setupResources({}),
        this._checkParentOfCombineParentObjectsLoaded(e.parent)
    }
    ,
    t.prototype._checkParentOfCombineParentObjectsLoaded = function(e) {
        for (var t = e.query(".CombinedObject", !1), i = 0; i < t.length; i++) {
            var r = t[i];
            if ("CombineMiscParent" !== r.userData.type && !r.loaded)
                return
        }
        e.setupResources({})
    }
    ,
    t
}(Ds);
Is = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.wall,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
Ns = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.ceiling,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
Hs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.misc,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        return e.prototype.create.call(this).node.isDoorOrWin = !0,
        this.thingjsObject
    }
    ,
    t
}(Ls);
Us = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.plan,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
zs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.wall,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
Vs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.misc,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
Ws = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.roof,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
Gs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Room",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        e.prototype.create.call(this);
        return this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return this.json2meshObject.floor && (t.floorHideByScene = !this.json2meshObject.floor.visible),
        this.json2meshObject.ceiling && (t.ceilingHideByScene = !this.json2meshObject.ceiling.visible),
        this.json2meshObject.roof && (t.roofHideByScene = !this.json2meshObject.roof.visible),
        t.holes = this._getRoomHoles(),
        t.points = this._getRoomPoints(),
        t
    }
    ,
    t.prototype._getRoomPoints = function() {
        for (var e = [], t = 0; t < this.json2meshObject.points.length; t++) {
            var i = this.json2meshObject.points[t];
            e.push(new THREE.Vector3(i[0],i[1],i[2]))
        }
        return e
    }
    ,
    t.prototype._getRoomHoles = function() {
        for (var e = [], t = 0; t < this.json2meshObject.holes.length; t++) {
            for (var i = this.json2meshObject.holes[t], r = [], n = 0; n < i.length; n++) {
                var o = i[n];
                r.push(new THREE.Vector3(o[0],o[1],o[2]))
            }
            e.push(r)
        }
        return e
    }
    ,
    t.prototype._processCallback = function() {
        var e = this.thingjsObject
            , t = this.json2meshObject;
        t.floor && t.floor.visible && (e._floorNode = t.floor.mesh,
        e._addNodeBySceneLoad(t.floor.mesh)),
        t.ceiling && t.ceiling.visible && (e._ceilingNode = t.ceiling.mesh,
        e._addNodeBySceneLoad(t.ceiling.mesh)),
        t.roof && t.roof.visible && (e._addNodeBySceneLoad(t.roof.mesh),
        e._roofNode = t.roof.mesh),
        e.setRelativePoints(t.points)
    }
    ,
    t
}(Ds);
qs = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t
}(Bs);
Xs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.json2meshObject.jsonData && n.json2meshObject.jsonData.type ? n.createType = n.json2meshObject.jsonData.type : n.createType = "Thing",
        n.json2meshObject.enableCreateMesh = !1,
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this);
        return "Floor" !== t.parent.type || t.parent.showObjectsInParentLevels || (t.visible = !1),
        this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.belongRoomUserID = this.json2meshObject.belongRoomUserID,
        t.hideByScene = !this.json2meshObject.visible,
        t.initBoxSize = this.json2meshObject.size,
        t
    }
    ,
    t.prototype._callback = function(e, t) {
        var i = t.creator
            , r = i.thingjsObject;
        i.thingjsObject = r,
        r.setupResources({
            loaded: !0
        }),
        t.thingjsObject = r,
        i._notifyBuildedCompleteListeners(),
        r._hideByScene = !e.visible,
        r.setupTextureAnimations()
    }
    ,
    t
}(Ds);
Js = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Door",
        n.json2meshObject.isWindow && (n.createType = "Thing"),
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this);
        return t.node.isDoorOrWin = !0,
        t.isWindow = this.json2meshObject.isWindow,
        t.userData.isWindow = this.json2meshObject.isWindow,
        this.thingjsObject
    }
    ,
    t.prototype._setVisible = function() {}
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        var r = i.thingjsObject;
        if (r.node.quaternion.set(t.rotation[0], t.rotation[1], t.rotation[2], t.rotation[3]),
        r.localPosition = i.creator._getThingjsLocalPosition(),
        t.isWindow || t.isOpen && r.open(),
        r.animationNames)
            for (var n = 0; n < r.animationNames.length; n++) {
                var o = r.animationNames[n];
                if ("_defaultAnim_" === o) {
                    r.playAnimation({
                        name: o,
                        loop: !0,
                        speed: 1
                    });
                    break
                }
            }
    }
    ,
    t
}(Bs);
Ys = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "RouteLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this);
        return null !== this.json2meshObject.width && (t.width = this.json2meshObject.width),
        "Ground" === this.thingjsParent.type || t.parent.showObjectsInParentLevels || (t.visible = !1),
        t.scrollSpeed = -10,
        t.rotateScrollDirection = !0,
        this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.hideByScene = !this.json2meshObject.visible,
        t.arrowFlag = !1,
        t
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        for (var r = [], n = new THREE.Vector3(t.position[0],t.position[1],t.position[2]), o = 0; o < t.points.length; o++) {
            var s = new THREE.Vector3(t.points[o][0],t.points[o][1],t.points[o][2]);
            s.add(n),
            r.push(s)
        }
        var a = i.thingjsObject;
        if (a.addPoints(r, THING.SpaceType.Local),
        t.resource && t.resource.texture) {
            var l = t.resource.cloneFlipYToFalse();
            l.anisotropy = a.app.renderer.capabilities.getMaxAnisotropy(),
            a._uvRotation = Math.PI / 2,
            a._synUvTransform(),
            a.synPathTexture(l)
        }
        if (t.color) {
            var u = new THREE.Color(t.color[0],t.color[1],t.color[2]);
            a.style.color = "#" + u.getHexString()
        }
        if (void 0 !== t.enableMaterialAnimation && (a.imageScroll = t.enableMaterialAnimation),
        void 0 !== t.materialAnimationSpeed && (a.imageScrollSpeed = -t.materialAnimationSpeed),
        void 0 !== t.textureTiling) {
            var c = t.textureTiling;
            c[1] *= a.width,
            a.imageRepeat = c
        }
        t.textureOffset,
        Cs.addTHINGJSObjectSfStyle(a, _s)
    }
    ,
    t
}(Ds);
Qs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "PolygonLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this);
        return this.json2meshObject.sectionType && ("Triangle" === this.json2meshObject.sectionType && (t.pathRadialSegments = 3,
        t._updateByPoints()),
        "Square" === this.json2meshObject.sectionType && (t.pathRadialSegments = 4,
        t.pathStartRad = Math.PI / 4,
        t._updateByPoints())),
        this.json2meshObject.radius && (t.width = this.json2meshObject.radius),
        "Ground" === this.thingjsParent.type || t.parent.showObjectsInParentLevels || (t.visible = !1),
        this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.hideByScene = !this.json2meshObject.visible,
        t
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        for (var r = [], n = new THREE.Vector3(t.position[0],t.position[1],t.position[2]), o = 0; o < t.points.length; o++) {
            var s = new THREE.Vector3(t.points[o][0],t.points[o][1],t.points[o][2]);
            s.add(n),
            r.push(s)
        }
        var a = i.thingjsObject;
        if (a.addPoints(r, THING.SpaceType.Local),
        t.resource && t.resource.texture) {
            var l = t.resource.cloneFlipYToFalse();
            l.anisotropy = a.app.renderer.capabilities.getMaxAnisotropy(),
            a.synPathTexture(l)
        }
        if (t.color) {
            var u = new THREE.Color(t.color[0],t.color[1],t.color[2]);
            a.style.color = "#" + u.getHexString()
        } else
            a.style.color = "#ffffff";
        if (void 0 !== t.enableMaterialAnimation && (a.imageScroll = t.enableMaterialAnimation),
        void 0 !== t.materialAnimationSpeed && (a.imageScrollSpeed = t.materialAnimationSpeed),
        void 0 !== t.textureTiling) {
            var c = 1.1 * a.width * 2 * Math.PI / t.textureTiling[0];
            a.imageRepeat = [c, c]
        }
        t.textureOffset,
        Cs.addTHINGJSObjectSfStyle(a, _s)
    }
    ,
    t
}(Ds);
Zs = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.json2meshBuilding = i.json2meshBuilding,
        n.createType = "Facade",
        n.shouldCombineJson2meshObjects = [],
        n.shouldNotCombineJson2meshObjects = [],
        n.combineFacade = null,
        n.notCombineFacades = [],
        n
    }
    return o(t, e),
    t.prototype.clear = function() {
        e.prototype.clear.call(this),
        this.json2meshBuilding = null,
        this.shouldCombineJson2meshObjects = [],
        this.shouldNotCombineJson2meshObjects = [],
        this.combineFacade = null,
        this.notCombineFacades = []
    }
    ,
    t.prototype.create = function() {
        var e = this.json2meshBuilding
            , t = this._getFacadeRelation(e);
        return this.shouldCombineJson2meshObjects = t.facades,
        this.shouldNotCombineJson2meshObjects = t.children,
        t.children && t.facades && (this.thingjsObject = this._createCombineFacade(t, this.thingjsParent),
        this._createFacadeChildren(t, this.thingjsObject)),
        this._notifyCreatedCompleteListeners(),
        this.thingjsObject
    }
    ,
    t.prototype._createCombineFacade = function(e, t) {
        var i = e.facades
            , r = new THREE.Object3D
            , n = this.app.objectManager.create({
            type: "Facade",
            loaded: !1,
            node: r,
            parent: t
        });
        this.combineFacade = n;
        for (var o = new THREE.Box3, s = 0; s < i.length; s++) {
            var a = i[s];
            a.size;
            o.union(a._box3);
            var l = this.app.objectManager.create({
                uuid: a.id,
                type: "CombinedObject",
                node: new THREE.Object3D,
                loaded: !1,
                parent: n
            });
            l.userData.isCombinedObject = !0,
            a.registerBuildCallbackListener(this._facadeBuildCallback, {
                loader: this,
                tjsObject: l,
                relation: e,
                parent: n
            })
        }
        return n._initBox3 = o,
        n
    }
    ,
    t.prototype._createFacadeChildren = function(e, t) {
        for (var i = e.children, r = t._initBox3 || new THREE.Box3, n = 0; n < i.length; n++) {
            var o = i[n]
                , s = void 0;
            "FacadeGroup" === o.type ? (s = this._createFacadeGroup(o, t, e),
            r.union(s._initBox3),
            delete s._initBox3) : (s = this._createFacade(o, t, e),
            r.union(o._box3)),
            this.notCombineFacades.push(s)
        }
        var a = new THREE.Vector3;
        r.getSize(a),
        t._initBoxSize = a.toArray(),
        delete t._initBox3
    }
    ,
    t.prototype._createFacadeGroup = function(e, t, i) {
        for (var r = new THREE.Box3, n = this.app.objectManager.create({
            type: "Facade",
            uuid: e.id,
            id: e.userID,
            name: e.name,
            node: new THREE.Object3D,
            parent: t,
            loaded: !1,
            properties: e.properties
        }), o = 0; o < e.children.length; o++) {
            var s = e.children[o];
            "FacadeGroup" === s.type ? this._createFacadeGroup(s, n, i) : (r.union(s._box3),
            this._createFacade(s, n, i))
        }
        var a = new THREE.Vector3;
        return r.getSize(a),
        n._initBoxSize = a.toArray(),
        n._initBox3 = r,
        e.registerBuildCallbackListener(this._facadeChildBuildCallback, {
            loader: this,
            tjsObject: n,
            relation: i,
            parent: t
        }),
        n
    }
    ,
    t.prototype._createFacade = function(e, t, i) {
        var r = this.app.objectManager.create({
            type: "Facade",
            uuid: e.id,
            id: e.userID,
            name: e.name,
            node: new THREE.Object3D,
            parent: t,
            loaded: !1,
            url: e.resource.getModelUrl(),
            properties: e.properties,
            initBoxSize: e.size
        });
        r.localPosition = e.position || [0, 0, 0],
        r.scale = e.scale || [1, 1, 1];
        var n = e.rotation || [0, 0, 0, 1];
        return r.node.quaternion.set(n[0], n[1], n[2], n[3]),
        e.registerBuildCallbackListener(this._facadeChildBuildCallback, {
            loader: this,
            tjsObject: r,
            relation: i,
            parent: t
        }),
        r
    }
    ,
    t.prototype.parseJson2meshObject = function(e, t) {
        var i = this.creatorManager.createTjsObject(e, t)
            , r = e.children;
        if (r)
            for (var n = 0; n < r.length; n++) {
                var o = r[n];
                this.parseJson2meshObject(o, i)
            }
        return i
    }
    ,
    t.prototype._getFacadeRelation = function(e) {
        var t = e.typeToChildren.Facade
            , i = e.typeToChildren.FacadeGroup;
        if (!t && !i)
            return {};
        var r = []
            , n = [];
        if (t)
            for (var o = 0; o < t.length; o++) {
                var s = t[o];
                this._isFacadeShouldBeChild(s) ? r.push(s) : n.push(s)
            }
        if (i)
            for (var a = 0; a < i.length; a++) {
                var l = i[a];
                this._isFacadeShouldBeChild(l) ? r.push(l) : n.push(l)
            }
        return {
            facades: n,
            children: r
        }
    }
    ,
    t.prototype._isFacadeShouldBeChild = function(e) {
        return !this._isNullOrUndefined(e.name) || (!this._isNullOrUndefined(e.userID) || !this._isNullOrUndefined(e.properties))
    }
    ,
    t.prototype._facadeChildBuildCallback = function(e, t) {
        var i = t.tjsObject
            , r = t.loader
            , n = t.relation
            , o = t.parent;
        i.localPosition = e.position,
        i.quaternion = e.rotation,
        i.scale = e.scale,
        e.mesh.position.set(0, 0, 0),
        e.mesh.quaternion.set(0, 0, 0, 1),
        e.mesh.scale.set(1, 1, 1),
        i._addNodeBySceneLoad(e.mesh),
        i.setupResources({
            loaded: !0
        }),
        r._checkFacadeBuildedComplete(n, o)
    }
    ,
    t.prototype._checkFacadeBuildedComplete = function(e, t) {
        for (var i = e.facades, r = e.children, n = !0, o = 0; o < i.length; o++) {
            if (!i[o].isBuilded) {
                n = !1;
                break
            }
        }
        for (var s = 0; s < r.length; s++) {
            if (!r[s].isBuilded) {
                n = !1;
                break
            }
        }
        n && (t.setupResources({}),
        this._notifyBuildedCompleteListeners())
    }
    ,
    t.prototype._facadeBuildCallback = function(e, t) {
        var i = t.tjsObject
            , r = t.loader
            , n = t.relation
            , o = t.parent;
        i._addNodeBySceneLoad(e.mesh);
        var s = e.mesh.getMeshes();
        s && s.length > 0 && s.forEach((function(e) {
            e._sfStyle = gs
        }
        )),
        i.setupResources({
            loaded: !0
        }),
        r._checkFacadeBuildedComplete(n, o)
    }
    ,
    t
}(Ds);
Ks = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "RouteLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        e.prototype.create.call(this);
        return this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.arrowFlag = !0,
        t
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i)
    }
    ,
    t
}(Ys);
$s = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "RouteLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        e.prototype.create.call(this);
        return this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.arrowFlag = !0,
        t
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        var r = i.creator.thingjsObject;
        t.pointUserIDs && (r.userData.pointUserIDs = t.pointUserIDs),
        t.pointProperteis && (r.userData.pointProperteis = t.pointProperteis)
    }
    ,
    t
}(Ks);
ea = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "PolygonLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        e.prototype.create.call(this);
        return this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        return e.prototype._getCreateParams.call(this)
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        var r = i.creator.thingjsObject;
        t.alarmLength && (r.userData.alarmLength = t.alarmLength)
    }
    ,
    t
}(Qs);
ta = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "RouteLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        e.prototype.create.call(this);
        return this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        return e.prototype._getCreateParams.call(this)
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i)
    }
    ,
    t
}(Ys);
ia = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.wall,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
ra = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Thing",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        return e.prototype.create.call(this)
    }
    ,
    t.prototype._getCreateParams = function() {
        return e.prototype._getCreateParams.call(this)
    }
    ,
    t.prototype._setVisible = function() {
        var e = this.thingjsObject;
        "Floor" !== this.thingjsParent.type || this.thingjsParent.showObjectsInParentLevels || (e.visible = !1)
    }
    ,
    t.prototype._getParent = function(e, t) {
        return e
    }
    ,
    t
}(Bs);
na = function() {
    function e() {
        classCallCheck(this, e),
        this.convertFontSizeFactor = 16 / 26 * .1,
        this.sharpness = 1,
        this.context = null,
        this.lineSpacing = .2,
        this.textSpacing = .1,
        this.fontSize = null,
        this.orgFontSize = null,
        this.saveData = null
    }
    return e.prototype.save = function() {
        var e = {};
        e.sharpness = this.sharpness,
        e.convertFontSizeFactor = this.convertFontSizeFactor,
        e.sharpness = this.sharpness,
        e.lineSpacing = this.lineSpacing,
        e.textSpacing = this.textSpacing,
        e.fontSize = this.fontSize,
        e.orgFontSize = this.orgFontSize,
        this.saveData = e,
        this.context.save()
    }
    ,
    e.prototype.restore = function() {
        this.sharpness = this.saveData.sharpness,
        this.convertFontSizeFactor = this.saveData.convertFontSizeFactor,
        this.sharpness = this.saveData.sharpness,
        this.lineSpacing = this.saveData.lineSpacing,
        this.textSpacing = this.saveData.textSpacing,
        this.fontSize = this.saveData.fontSize,
        this.orgFontSize = this.saveData.orgFontSize,
        this.context.restore()
    }
    ,
    e.prototype.setupContext = function(e) {
        var t = la.parseColor(e.fontColor);
        this.context.font = this.fontSize + "px " + e.fontType,
        this.context.fillStyle = t.toHexString(),
        this.context.textAlign = "start",
        this.context.textBaseline = "alphabetic"
    }
    ,
    e.prototype.setOrgFontSize = function(e) {
        this.orgFontSize = e,
        this.fontSize = this._convertFontSize(e)
    }
    ,
    e.prototype._convertFontSize = function(e) {
        return this.sharpness * e * .195 / this.convertFontSizeFactor
    }
    ,
    e.prototype.setupDecorations = function(e) {
        for (var t = 0; t < e.length; t++) {
            var i = e[t];
            this._setupSingleDecoration(i)
        }
    }
    ,
    e.prototype._setupSingleDecoration = function(e) {
        if ("color" === e.key)
            this.context.fillStyle = e.value;
        else if ("b" === e.key) {
            var t = this.context.font;
            t = "bolder " + t,
            this.context.font = t
        } else if ("size" === e.key) {
            for (var i = this.context.font.split(" "), r = "", n = 0; n < i.length; n++) {
                -1 !== i[n].indexOf("px") && (this.fontSize = this._convertFontSize(e.value),
                i[n] = this.fontSize + "px"),
                r += " " + i[n]
            }
            this.context.font = r
        } else if ("i" === e.key) {
            var o = this.context.font;
            o = "italic " + o,
            this.context.font = o
        }
    }
    ,
    e.prototype.measureTextWidth = function(e) {
        return this.context.measureText(e).width
    }
    ,
    e.prototype.letterSpacingText = function(e, t, i) {
        var r = this.context
            , n = this.fontSize * this.textSpacing
            , o = e.split("")
            , s = r.textAlign || "left"
            , a = r.measureText(e).width + n * (o.length - 1);
        "center" === s ? t -= a / 2 : "right" === s && (t -= a),
        r.textAlign = "left",
        o.forEach((function(e) {
            var o = r.measureText(e).width;
            r.fillText(e, t, i),
            t = t + o + n
        }
        )),
        r.textAlign = s
    }
    ,
    e
}();
oa = function() {
    function e(t) {
        classCallCheck(this, e),
        this.factor = null,
        this.decorationFactor = 1,
        this.brush = null
    }
    return e.prototype.calCanvasSize = function(e, t) {
        this.brush.sharpness = 1;
        e.style.fontType;
        var i = t.fontSize;
        this.brush.setOrgFontSize(i);
        var r = (i = this.brush.fontSize) / 72 * 96
            , n = Math.max(64, THING.Math.roundUpPowerOf2(r));
        this.brush.setupContext(t),
        this.calRichTextSize(e, i);
        var o = e.richTextSize
            , s = o.height
            , a = o.width
            , l = Math.max(n, THING.Math.roundUpPowerOf2(a))
            , u = Math.max(n, THING.Math.roundUpPowerOf2(s))
            , c = {};
        c.width = Math.max(l, u),
        c.height = Math.max(l, u),
        e.canvasSize = c,
        e.planHeight = c.height * this.brush.convertFontSizeFactor
    }
    ,
    e.prototype.calRichTextSize = function(e) {
        for (var t = -1, i = 0, r = 0; r < e.textRows.length; r++) {
            var n = e.textRows[r];
            this._calRowSize(n);
            var o = n.size;
            o.width > t && (t = o.width),
            i += o.height,
            r !== e.textRows.length - 1 && (i += o.height * this.brush.lineSpacing)
        }
        e.richTextSize = {
            width: t,
            height: i
        }
    }
    ,
    e.prototype._calRowSize = function(e) {
        for (var t = e.texts, i = 0, r = -1, n = 0; n < t.length; n++) {
            var o = t[n];
            this.brush.save(),
            this.brush.setupDecorations(o.decorations),
            this._calTextWidth(o),
            i += o.width,
            this._calTextHeight(o);
            var s = o.height;
            s > r && (r = s),
            this.brush.restore()
        }
        -1 === r && (r = this.brush.fontSize),
        e.size = {
            width: i,
            height: r
        }
    }
    ,
    e.prototype._calTextWidth = function(e) {
        for (var t = e.content.split(""), i = this.brush.fontSize, r = 0, n = 0; n < t.length; n++) {
            var o = t[n];
            r += this.brush.measureTextWidth(o),
            n !== t.length - 1 && (r += i * this.brush.textSpacing)
        }
        return e.width = r,
        r
    }
    ,
    e.prototype._calTextHeight = function(e) {
        e.height = this.brush.fontSize
    }
    ,
    e
}();
sa = function() {
    function e(t) {
        classCallCheck(this, e),
        this.calculater = t,
        this.fontSize = null,
        this.brush = null
    }
    return e.prototype.setContext = function(e) {
        this.brush.context = e
    }
    ,
    e.prototype.calCanvasSize = function(e, t) {
        this.calculater.calCanvasSize(e, t)
    }
    ,
    e.prototype.calRichTextSize = function(e) {
        this.calculater.calRichTextSize(e)
    }
    ,
    e.prototype.draw = function(e, t, i, r) {
        this.brush.sharpness = 2,
        this.brush.setOrgFontSize(r.fontSize),
        this.fontSize = this.brush.fontSize,
        this.brush.setupContext(r),
        this.calculater.calRichTextSize(e);
        var n = (i - e.richTextSize.height) / 2;
        e.textRows.length > 0 && (n += .84 * e.textRows[0].size.height);
        for (var o = t / 2, s = n, a = 0; a < e.textRows.length; a++) {
            var l = e.textRows[a]
                , u = l.size;
            0 !== a && (s += .84 * u.height),
            this._drawRow(l, o - .5 * u.width, s),
            s += u.height * (.16 + this.brush.lineSpacing)
        }
    }
    ,
    e.prototype._drawRow = function(e, t, i) {
        for (var r = 0, n = 0; n < e.texts.length; n++) {
            var o = e.texts[n];
            0 !== n && (r += e.texts[n - 1].width),
            this._drawText(o, t + r, i)
        }
    }
    ,
    e.prototype._drawText = function(e, t, i) {
        this.brush.save(),
        this.brush.setupDecorations(e.decorations),
        this.brush.letterSpacingText(e.content, t, i),
        this.brush.restore()
    }
    ,
    e
}();
aa = function(e) {
    var t = "[object " + e + "]";
    return function(e) {
        return toString.call(e) == t
    }
};
la = {
    isNull: function(e) {
        return null == e
    },
    isArray: aa("Array"),
    isObject: aa("Object"),
    isString: aa("String"),
    isNumber: aa("Number"),
    isBlank: function(e) {
        if (!la.isNull(e) && la.isString(e))
            for (var t = 0; t < e.length; t++)
                if (" " != e[t] && "\t" != e[t])
                    return !1;
        return !0
    },
    parseColor: function(e, t) {
        if (!this.isNull(e)) {
            if (e.isColor)
                return e;
            if (la.isArray(e))
                return new THREE.Color(e[0],e[1],e[2]);
            if (la.isNumber(e))
                return (i = new THREE.Color).setHex(e),
                i;
            if (la.isString(e)) {
                if (la.isBlank(e))
                    return new THREE.Color(0,0,0);
                if ("#" == e[0])
                    return la.parseColor(parseInt(e.substr(1), 16));
                var i = new THREE.Color
                    , r = THREE.Color.NAMES[e.toLowerCase()];
                if (void 0 !== r)
                    return i.setHex(r);
                if (!isNaN(e))
                    return la.parseColor(THING.Math.toInteger(e))
            }
        }
        return t ? la.parseColor(t) : t
    }
};
ua = new oa
    , ca = new sa(ua);
ha = new na;
ca.brush = ha,
ua.brush = ha;
var da = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "_UbuilderRichTextRegion",
        n
    }
    return o(t, e),
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        t.localPosition = this.json2meshObject.position,
        t.text = this.json2meshObject.text,
        t.textRows = this.json2meshObject.textRows;
        var i = this.json2meshObject.fontSize;
        return t.style = {
            fontColor: this.json2meshObject.color,
            fontSize: i
        },
        t.drawer = ca,
        t
    }
    ,
    t.prototype.create = function() {
        return e.prototype.create.call(this),
        "FloorPlan" === this.json2meshObject.parent.type && (this.thingjsObject.visible = !1),
        this.thingjsObject
    }
    ,
    t
}(Ds), fa = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "PolygonLine",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this);
        return this.json2meshObject.pathRadialSegments && (t.pathRadialSegments = this.json2meshObject.pathRadialSegments,
        4 === this.json2meshObject.pathRadialSegments && (t.pathStartRad = -Math.PI / 4),
        t._updateByPoints()),
        this.json2meshObject.radius && (t.width = this.json2meshObject.radius),
        "Ground" === this.thingjsParent.type || t.parent.showObjectsInParentLevels || (t.visible = !1),
        this.thingjsObject
    }
    ,
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.hideByScene = !this.json2meshObject.visible,
        t
    }
    ,
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i);
        for (var r = [], n = new THREE.Vector3(t.position[0],t.position[1],t.position[2]), o = 0; o < t.points.length; o++) {
            var s = new THREE.Vector3(t.points[o][0],t.points[o][1],t.points[o][2]);
            s.add(n),
            r.push(s)
        }
        var a = i.thingjsObject;
        if (a.addPoints(r, THING.SpaceType.Local),
        t.resource && t.resource.texture) {
            var l = t.resource.cloneFlipYToFalse();
            l.anisotropy = a.app.renderer.capabilities.getMaxAnisotropy(),
            a.synPathTexture(l)
        }
        if (t.color) {
            var u = new THREE.Color(t.color[0],t.color[1],t.color[2]);
            a.style.color = "#" + u.getHexString()
        } else
            a.style.color = "#ffffff";
        if (void 0 !== t.enableMaterialAnimation && (a.imageScroll = t.enableMaterialAnimation),
        void 0 !== t.materialAnimationSpeed && (a.imageScrollSpeed = t.materialAnimationSpeed),
        void 0 !== t.textureTiling) {
            var c = 1.1 * a.width * 2 * Math.PI / t.textureTiling[0];
            a.imageRepeat = [c, c]
        }
        t.textureOffset,
        Cs.addTHINGJSObjectSfStyle(a, _s)
    }
    ,
    t
}(Ds), ma = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "RouteLine",
        n
    }
    return o(t, e),
    t.prototype._getCreateParams = function() {
        var t = e.prototype._getCreateParams.call(this);
        return t.arrowFlag = this.json2meshObject.arrowVisible,
        t
    }
    ,
    t
}($s), ga = function() {
    function e() {
        classCallCheck(this, e),
        this._map = {
            World: As,
            Building: ks,
            FloorPlan: Os,
            Placement: Bs,
            Outdoors: Fs,
            CombineStraightManualWall: Is,
            CombineCeiling: Ns,
            CombineDoorOrWindow: Hs,
            CombineFloor: Us,
            CombineModelWall: zs,
            CombinePlacement: Vs,
            CombinePlacementGroup: Vs,
            CombineRoof: Ws,
            CombinePlacementWall: ia,
            Room: Gs,
            VideoProbe: qs,
            PlacementGroup: Xs,
            DoorOrWindow: Js,
            CurveLine: Ys,
            PipeLine: Qs,
            Facade: Zs,
            FacadeGroup: Zs,
            ArrowLine: Ks,
            ArrowDataLine: $s,
            LeakWaterLine: ea,
            RouteLine: ta,
            PlacementGround: ra,
            Text3D: da,
            GeneralPolygonLine: fa,
            GeneralRouteLine: ma
        },
        this._createdThingjsObjectMap = {},
        this.campus = null
    }
    return e.prototype.getClass = function(e) {
        return this._map[e]
    }
    ,
    e.prototype.addCreatedThingjsObject = function(e, t) {
        this._createdThingjsObjectMap[e.id] = t
    }
    ,
    e.prototype.getCreatedThingjsObject = function(e) {
        return this._createdThingjsObjectMap[e]
    }
    ,
    e
}(), va = {
    changeParentToRoom: function(e) {
        var t = e.json2meshObject;
        e.app;
        if (t.belongRoomUserID && "FloorPlan" === t.parent.type) {
            var i = this.allRooms[t.belongRoomUserID];
            e.thingjsParent = i
        }
    },
    getThingjsObjectInRoomLocalPosition: function(e, t, i) {
        if (i) {
            var r = i.parent.selfToWorld(e.position);
            return r = t.worldToLocal(r)
        }
        return e.position
    }
}, ya = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return va.changeParentToRoom(n),
        n
    }
    return o(t, e),
    t.prototype._getThingjsLocalPosition = function() {
        var e = null;
        return "Room" === this.thingjsParent.type && (e = this.thingjsParent),
        va.getThingjsObjectInRoomLocalPosition(this.json2meshObject, this.thingjsObject, e)
    }
    ,
    t
}(Bs), ba = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return va.changeParentToRoom(n),
        n
    }
    return o(t, e),
    t.prototype._getThingjsLocalPosition = function() {
        var e = null;
        return "Room" === this.thingjsParent.type && (e = this.thingjsParent),
        va.getThingjsObjectInRoomLocalPosition(this.json2meshObject, this.thingjsObject, e)
    }
    ,
    t
}(Xs), _a = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Room",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this)
            , i = this.app.objectManager.create({
            node: new THREE.Object3D,
            parent: this._getParent(t, "CombinedObject"),
            type: "CombinedObject"
        });
        i.userData.type = "CombineMiscParent",
        i.userData.isCombineParent = !0
    }
    ,
    t
}(Gs), xa = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return va.changeParentToRoom(n),
        "Room" === n.thingjsParent.type && (n.thingjsParent = n.thingjsParent.misc,
        n.thingjsParent.loaded = !1),
        n
    }
    return o(t, e),
    t.prototype._getThingjsLocalPosition = function() {
        var e = null;
        return "Room" === this.thingjsParent.parent.type && (e = this.thingjsParent.parent),
        va.getThingjsObjectInRoomLocalPosition(this.json2meshObject, this.thingjsObject, e)
    }
    ,
    t.prototype._checkParentOfCombineParentObjectsLoaded = function(e) {}
    ,
    t
}(Vs), Ea = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return va.changeParentToRoom(n),
        n
    }
    return o(t, e),
    t.prototype._getThingjsLocalPosition = function() {
        var e = null;
        return "Room" === this.thingjsParent.type && (e = this.thingjsParent),
        va.getThingjsObjectInRoomLocalPosition(this.json2meshObject, this.thingjsObject, e)
    }
    ,
    t
}(qs), wa = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._map.Placement = ya,
        n._map.PlacementGroup = ba,
        n._map.Room = _a,
        n._map.CombinePlacement = xa,
        n._map.VideoProbe = Ea,
        n
    }
    return o(t, e),
    t
}(ga), Ta = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.prototype.init = function(e) {}
    ,
    e.prototype.onFire = function(e) {}
    ,
    e
}(), Ma = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerCreatedCallbackListener(this.onFire, {
            event: this
        }),
        t.registerBuildedCallbackListener(this._buildCallback, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        if ("Building" !== i.type && "Campus" !== i.type && "CombinedObject" !== i.type && "Room" !== i.type && "RouteLine" !== i.type && "PolygonLine" !== i.type && "Ground" !== i.type)
            if ("Facade" === i.type) {
                var o = e.json2meshBuilding;
                n._addFacadeBoxNode(o, i)
            } else
                n._addBoxNode(r, i)
    }
    ,
    t.prototype._addFacadeBoxNode = function(e, t) {
        var i = this._getFacadesBoundingBox(e)
            , r = new THREE.Vector3
            , n = new THREE.Vector3;
        i.getSize(r),
        i.getCenter(n);
        var o = new THREE.BoxBufferGeometry(1,1,1)
            , s = new THREE.MeshBasicMaterial;
        s.visible = !1;
        var a = new THREE.Mesh(o,s);
        a.scale.set(r.x, r.y, r.z),
        t.setBoxNode(a),
        a.position.set(n.x, n.y, n.z)
    }
    ,
    t.prototype._getFacadesBoundingBox = function(e) {
        var t = new THREE.Box3
            , i = new THREE.Object3D
            , r = e.typeToChildren.Facade
            , n = e.typeToChildren.FacadeGroup;
        if (r)
            for (var o = 0; o < r.length; o++) {
                var s = r[o];
                i.add(this._createBoxMesh(s))
            }
        if (n)
            for (var a = 0; a < n.length; a++) {
                var l = n[a];
                i.add(this._createBoxMesh(l))
            }
        return t.setFromObject(i),
        t
    }
    ,
    t.prototype._createBoxMesh = function(e) {
        var t = new THREE.BoxBufferGeometry(1,1,1)
            , i = new THREE.MeshBasicMaterial
            , r = new THREE.Mesh(t,i);
        return r.scale.set(e.size[0], e.size[1], e.size[2]),
        r.quaternion.set(e.rotation[0], e.rotation[1], e.rotation[2], e.rotation[3]),
        r.position.set(e.position[0], e.position[1], e.position[2]),
        r.position.y = (e.position[1] + e.size[1]) / 2,
        r
    }
    ,
    t.prototype._addBoxNode = function(e, t) {
        var i = new THREE.Vector3(e.center[0],e.center[1],e.center[2])
            , r = new THREE.BoxBufferGeometry(1,1,1)
            , n = new THREE.MeshBasicMaterial;
        n.visible = !1;
        var o = new THREE.Mesh(r,n)
            , s = new THREE.Vector3(e.size[0],e.size[1],e.size[2]);
        s.divide(t.node.scale),
        o.scale.set(0 === s.x ? .001 : s.x, 0 === s.y ? .001 : s.y, 0 === s.z ? .001 : s.z),
        t.setBoxNode(o),
        "Building" === t.type || "Floor" === t.type ? o.position.set(i.x, i.y, i.z) : o.position.set(0, e.size[1] / 2, 0)
    }
    ,
    t.prototype._buildCallback = function(e, t) {
        for (var i = e.thingjsObject, r = (e.json2meshObject,
        i.node), n = 0; n < r.children.length; n++) {
            var o = r.children[n];
            if (o.userData.asBoundingBox) {
                o.visible = !1;
                break
            }
        }
    }
    ,
    t
}(Ta), Ca = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.app = i.app,
        n
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        if ("CombinePlacement" === r.type) {
            i._removeNodeBySceneLoad(r.mesh);
            var o = r.objects
                , s = r.transformations
                , a = r.resource.modelID;
            r.resource.model.updateMatrixWorld();
            for (var l = e.app.create({
                type: "BatchObject",
                nodeOverride: !1,
                node: r.resource.model,
                initBatchNum: o.length,
                parent: i
            }), u = 0; u < o.length; u++) {
                var c = o[u]
                    , h = n.calMatrixs(s[u])
                    , p = new THREE.Vector3
                    , d = new THREE.Vector3
                    , f = new THREE.Quaternion;
                h.decompose(p, f, d);
                var m = p.toArray()
                    , g = d.toArray()
                    , v = new THREE.Euler;
                v.setFromQuaternion(f);
                var y = v.toArray();
                y[0] *= 180 / Math.PI,
                y[1] *= 180 / Math.PI,
                y[2] *= 180 / Math.PI;
                l.createSubObject({
                    parent: i,
                    id: c.id,
                    localPosition: m,
                    scale: g,
                    angles: y
                })
            }
            Cs.addBatchCombinePlacementStyle(l, r, a)
        }
    }
    ,
    t.prototype.calMatrixs = function(e) {
        for (var t = new THREE.Matrix4, i = e.positions.length - 1; i > -1; i--) {
            var r = e.positions[i]
                , n = e.quaternions[i]
                , o = e.scales[i]
                , s = new THREE.Vector3(r[0],r[1],r[2])
                , a = new THREE.Quaternion(n[0],n[1],n[2],n[3])
                , l = new THREE.Vector3(o[0],o[1],o[2])
                , u = new THREE.Matrix4;
            u.compose(s, a, l),
            t.premultiply(u)
        }
        return t
    }
    ,
    t
}(Ta), Sa = function(e) {
    function t() {
        return classCallCheck(this, t),
        s(this, e.call(this))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        e.thingjsObject;
        var i = e.json2meshObject
            , r = t.event;
        "Room" === i.type ? r._createRoomWater(e) : "CombineFloor" !== i.type && "CombineCeiling" !== i.type && "CombineRoof" !== i.type || r._createCombineFloorWater(e)
    }
    ,
    t.prototype._createRoomWater = function(e) {
        var t = e.json2meshObject
            , i = e.thingjsObject;
        if (t.floor && this._checkIsWater(t.floor.resource)) {
            var r = t.floor.mesh.position
                , n = t.floor.mesh.quaternion
                , o = this._createWater(e, t.floor.mesh);
            i.node.remove(t.floor.mesh),
            o.userData.json2meshType = t.type,
            t.floor.mesh = o.node,
            i._floorNode = o.node,
            i.add(o),
            o.node.position.copy(r),
            o.node.quaternion.copy(n),
            t.mesh.children[0] = o.node
        }
        if (t.ceiling && this._checkIsWater(t.ceiling.resource)) {
            var s = t.ceiling.mesh.position
                , a = t.ceiling.mesh.quaternion
                , l = this._createWater(e, t.ceiling.mesh);
            l.userData.json2meshType = t.type,
            i.node.remove(t.ceiling.mesh),
            t.ceiling.mesh = l.node,
            i._ceilingNode = l.node,
            i.add(l),
            l.node.position.copy(s),
            t.mesh.children[1] = l.node,
            l.node.position.copy(s),
            l.node.quaternion.copy(a)
        }
        if (t.roof && this._checkIsWater(t.roof.resource)) {
            var u = t.roof.mesh.position
                , c = t.roof.mesh.quaternion
                , h = this._createWater(e, t.roof.mesh);
            t.roof.mesh = h.node,
            i._roofNode = h.node,
            i.node.remove(t.roof.mesh),
            i.add(h),
            h.node.position.copy(u),
            t.mesh.children[2] = h.node,
            h.node.position.copy(u),
            h.node.quaternion.copy(c)
        }
    }
    ,
    t.prototype._createCombineFloorWater = function(e) {
        var t = e.json2meshObject
            , i = e.thingjsObject;
        if (this._checkIsWater(t.resource)) {
            var r = this._createWater(e, t.mesh);
            r.scale.y *= -1,
            i.node.remove(t.mesh),
            i.add(r),
            r.node.position.copy(t.mesh.position),
            r.node.quaternion.copy(t.mesh.quaternion)
        }
    }
    ,
    t.prototype._checkIsWater = function(e) {
        return !(!e || "bundle" !== e.ext || "test0000000003" !== e.id && "test0000000004" !== e.id)
    }
    ,
    t.prototype._createWater = function(e, t) {
        var i = e.app.objectManager.create({
            type: "Water",
            style: {
                waterColor: "#1D282C",
                waterScale: .3,
                flowXDirection: 2,
                flowYDirection: 1
            },
            geometry: t.geometry
        });
        return i.water.position.set(0, 0, 0),
        i.water.quaternion.set(0, 0, 0, 1),
        i
    }
    ,
    t
}(Ta), ja = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this._buildCallback, {
            event: this
        })
    }
    ,
    t.prototype._buildCallback = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        i.node;
        "Building" === r.type && "Facade" === i.type ? n._processFacade(e, t) : r.resource && r.resource.indexJson && (i._extensionsFile = r.resource.indexJson.extensionsfile || null)
    }
    ,
    t.prototype._processFacade = function(e, t) {
        for (var i = e.thingjsObject, r = (e.json2meshObject,
        e.shouldNotCombineJson2meshObjects), n = 0; n < r.length; n++) {
            var o = r[n]
                , s = i.query("##" + o.id)[0];
            o.resource && o.resource.indexJson && (s._extensionsFile = o.resource.indexJson.extensionsfile || null)
        }
    }
    ,
    t
}(Ta), Pa = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        n.resourceManager = i.resourceManager,
        n.localUseStaticImageResources = {};
        var o = n;
        return n.useStaticImageKey = "useStaticImage",
        n.manualUseStaticImage = "manualUseStaticImage",
        n.skipManualObjects = void 0 !== THING[n.manualUseStaticImage] && !THING[n.manualUseStaticImage],
        THING.onValueChange = function(e) {
            e.type === o.useStaticImageKey ? o.onUseStaticImageChange(e.value) : e.type === o.manualUseStaticImage && o.onManualUseStaticImageChange(e.value)
        }
        ,
        n
    }
    return o(t, e),
    t.prototype.onUseStaticImageChange = function(e) {
        for (var t = 0; t < this.resourceManager.textures.length; t++) {
            var i = this.resourceManager.textures[t];
            void 0 === this.localUseStaticImageResources[i.id] && (i.useStaticImage = e)
        }
        for (var r = 0; r < this.resourceManager.models.length; r++) {
            var n = this.resourceManager.models[r];
            void 0 === this.localUseStaticImageResources[n.id] && (n.useStaticImage = e)
        }
    }
    ,
    t.prototype.onManualUseStaticImageChange = function(e) {
        for (var t = 0; t < this.resourceManager.textures.length; t++) {
            var i = this.resourceManager.textures[t];
            void 0 === this.localUseStaticImageResources[i.id] && (i.useStaticImage = e)
        }
    }
    ,
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerCreatedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        if ("Facade" === i.type) {
            var o = e.json2meshBuilding;
            n.processFacades(o.typeToChildren.Facade),
            n.processFacadeGroups(o.typeToChildren.FacadeGroup)
        } else
            "PlacementGroup" === r.type ? n.processGroup(r) : "CombineStraightManualWall" === r.type || "CombineFloor" === r.type || "CombineRoof" === r.type || "CombineCeiling" === r.type || "Ceiling" === r.type || "Floor" === r.type || "Roof" === r.type ? n.skipManualObjects && n.processJson2meshObject(r, !1) : n.processJson2meshObject(r)
    }
    ,
    t.prototype.processFacades = function(e) {
        if (e)
            for (var t = 0; t < e.length; t++) {
                var i = e[t];
                this.processJson2meshObject(i)
            }
    }
    ,
    t.prototype.processFacadeGroups = function(e) {
        if (e)
            for (var t = 0; t < e.length; t++) {
                var i = e[t];
                this.processGroup(i)
            }
    }
    ,
    t.prototype.processGroup = function(e, t, i) {
        void 0 === i && (i = this.getLocalUseStaticImageSetting(e));
        for (var r = 0; r < e.groups.length; r++) {
            var n = e.groups[r];
            this.processGroup(n, t, i)
        }
        for (var o = 0; o < e.placements.length; o++) {
            var s = e.placements[o];
            s.resource && this.processJson2meshObject(s, t, i)
        }
    }
    ,
    t.prototype.processJson2meshObject = function(e, t, i) {
        if (void 0 === i && (i = this.getLocalUseStaticImageSetting(e)),
        void 0 === t && (t = THING[this.useStaticImageKey]),
        e.resources)
            for (var r = 0; r < e.resources.length; r++) {
                var n = e.resources[r];
                if (void 0 !== this.localUseStaticImageResources[n.id])
                    return;
                void 0 === i ? void 0 !== t && (n.useStaticImage = t) : (n.useStaticImage = i,
                void 0 !== !this.localUseStaticImageResources[n.id] && (this.localUseStaticImageResources[n.id] = i))
            }
    }
    ,
    t.prototype.getLocalUseStaticImageSetting = function(e) {
        if (e.lowerCaseProperties) {
            if ("true" === e.lowerCaseProperties._usestaticimage_)
                return !0;
            if ("false" === e.lowerCaseProperties._usestaticimage_)
                return !1
        }
    }
    ,
    t.prototype.getGlobalUseStaticImageSetting = function() {
        if (void 0 !== THING[this.useStaticImageKey])
            return THING[this.useStaticImageKey]
    }
    ,
    t
}(Ta), Ra = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.resourceManager = i.resourceManager,
        n.processGlobalSetting(),
        n
    }
    return o(t, e),
    t.prototype.processGlobalSetting = function() {
        if (THING.useStaticImage) {
            for (var e = 0; e < this.resourceManager.textures.length; e++) {
                this.resourceManager.textures[e].useStaticImage = true
            }
            for (var t = 0; t < this.resourceManager.models.length; t++) {
                this.resourceManager.models[t].useStaticImage = true
            }
        }
    }
    ,
    t.prototype.init = function(e) {}
    ,
    t
}(Ta), Da = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return va.allRooms = {},
        n
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerCreatedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject;
        t.event;
        "Room" === i.type && r.userID && (va.allRooms[r.userID] = i)
    }
    ,
    t
}(Ta), Aa = function(e) {
    function t() {
        classCallCheck(this, t);
        var i = s(this, e.call(this));
        return i.tag = "model-wall",
        i
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        e.thingjsObject;
        var i = e.json2meshObject
            , r = t.event;
        if ("CombineModelWall" === i.type) {
            var n = r.getMeshes(i.mesh);
            n && n.length > 0 && n.forEach((function(e) {
                e._cls = r.tag
            }
            ))
        }
    }
    ,
    t.prototype.getMeshes = function(e) {
        var t = [];
        return e.traverse((function(e) {
            e.isMesh && t.push(e)
        }
        )),
        t
    }
    ,
    t
}(Ta), ka = l();

!function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.app = i.app,
        n
    }
    o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject;
        t.event;
        if ("CombineDoorOrWindow" === r.type) {
            i._removeNodeBySceneLoad(r.mesh);
            var n = r.objects;
            r.transformations,
            r.resource.modelID;
            r.resource.model.updateMatrixWorld();
            for (var o = e.app.create({
                type: "BatchObject",
                nodeOverride: !1,
                node: r.resource.model,
                initBatchNum: n.length,
                parent: i
            }), s = 0; s < n.length; s++) {
                var a = n[s]
                    , l = a.rotation
                    , u = new THREE.Quaternion(l[0],l[1],l[2],l[3])
                    , c = a.position
                    , h = a.scale
                    , p = new THREE.Euler;
                p.setFromQuaternion(u);
                var d = p.toArray();
                d[0] *= 180 / Math.PI,
                d[1] *= 180 / Math.PI,
                d[2] *= 180 / Math.PI;
                o.createSubObject({
                    parent: i,
                    id: a.id,
                    localPosition: c,
                    scale: h,
                    angles: d
                })
            }
            Cs.addThingJsObjectSfStyle(o, "Outdoors" === r.parent.type ? _s : Ms)
        }
    }
    ,
    t.prototype.calMatrixs = function(e) {
        for (var t = new THREE.Matrix4, i = e.positions.length - 1; i > -1; i--) {
            var r = e.positions[i]
                , n = e.quaternions[i]
                , o = e.scales[i]
                , s = new THREE.Vector3(r[0],r[1],r[2])
                , a = new THREE.Quaternion(n[0],n[1],n[2],n[3])
                , l = new THREE.Vector3(o[0],o[1],o[2])
                , u = new THREE.Matrix4;
            u.compose(s, a, l),
            t.premultiply(u)
        }
        return t
    }
}(Ta);
var Oa = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.thingjsParent = n.thingjsParent.misc,
        n.thingjsParent.loaded = !1,
        n
    }
    return o(t, e),
    t
}(Ls);
Ba = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t
}(Ds);
Fa = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i),
        i.thingjsObject.setupTextureAnimations()
    }
    ,
    t
}(Vs);
La = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype._callback = function(t, i) {
        e.prototype._callback.call(this, t, i),
        i.thingjsObject.setupTextureAnimations()
    }
    ,
    t
}(Us);
Ia = function(e) {
    function t() {
        classCallCheck(this, t);
        var i = s(this, e.call(this));
        return i._map.BatchCombinePlacement = Oa,
        i._map.BatchPlacement = Ba,
        i._map.CombinePlacement = Fa,
        i._map.CombineFloor = La,
        i
    }
    return o(t, e),
    t
}(ga);
Na = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.createType = "Room",
        n
    }
    return o(t, e),
    t.prototype.create = function() {
        var t = e.prototype.create.call(this)
            , i = this.app.objectManager.create({
            node: new THREE.Object3D,
            parent: this._getParent(t, "CombinedObject"),
            type: "CombinedObject"
        });
        return i.userData.type = "CombineMiscParent",
        i.userData.isCombineParent = !0,
        this.thingjsObject
    }
    ,
    t
}(Gs);
Ha = function(e) {
    function t() {
        classCallCheck(this, t);
        var i = s(this, e.call(this));
        return i._map.Room = Na,
        i
    }
    return o(t, e),
    t
}(Ia);
Ua = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype._facadeChildBuildCallback = function(e, t) {
        var i = t.tjsObject
            , r = t.loader
            , n = t.relation
            , o = t.parent;
        i.localPosition = e.position,
        i.quaternion = e.rotation,
        i.scale = e.scale,
        e.mesh.position.set(0, 0, 0),
        e.mesh.quaternion.set(0, 0, 0, 1),
        e.mesh.scale.set(1, 1, 1),
        i._addNodeBySceneLoad(e.mesh),
        i.setupResources({
            loaded: !0
        }),
        r._checkFacadeBuildedComplete(n, o)
    }
    ,
    t
}(Zs);
za = function(e) {
    function t() {
        classCallCheck(this, t);
        var i = s(this, e.call(this));
        return i._map.Facade = Ua,
        i
    }
    return o(t, e),
    t
}(Ha);
Va = new (function() {
    function e(t) {
        classCallCheck(this, e),
        this._versionMap = {
            0: {
                0: Ia,
                1: Ia,
                2: Ia,
                3: Ia,
                4: Ha,
                5: Ha,
                6: za
            }
        },
        this._smallVersionLibs = [[0, 1, 2, 3, 4, 5, 6]],
        this._bigVersions = [0]
    }
    return e.prototype.getConfig = function(e, t) {
        if (null == e) {
            e = this._bigVersions[this._bigVersions.length - 1];
            var i = this._smallVersionLibs[e];
            return t = i[i.length - 1],
            this._versionMap[e][t]
        }
        if (null == t) {
            var r = this._smallVersionLibs[e];
            return t = r[r.length - 1],
            this._versionMap[e][t]
        }
        var n = this._smallVersionLibs[e];
        if (!(e > this._bigVersions[this._bigVersions.length - 1]))
            return t > n[n.length - 1] ? this._versionMap[e][n.length - 1]() : this._versionMap[e][t];
        console.error("maxLoader not support version " + e + "." + t)
    }
    ,
    e
}());
Wa = function() {
    function e(t) {
        classCallCheck(this, e),
        this.campus = null,
        this.app = t,
        this.enableProxima = !1,
        this.enableDynamicLoad = !1,
        this.creatorManager = null,
        this.enableBatchObject = !1,
        this.resourceManager = null,
        this.events = []
    }
    return e.prototype.setCampus = function(e) {
        this.campus = e
    }
    ,
    e.prototype.parseWorld = function(e, t) {
        this.resourceManager = t,
        this.initEvents(),
        this.initCreatorManager(e);
        var i = this.parseJson2meshObject(e);
        return this.processHideObjects(i),
        i
    }
    ,
    e.prototype.initCreatorManager = function(e) {
        var t = null;
        t = this.enableProxima ? new wa(this.app) : new ga(this.app),
        null !== this.campus && t.addCreatedThingjsObject(e, this.campus),
        this.creatorManager = new Rs({
            app: this.app,
            config: t,
            events: this.events
        })
    }
    ,
    e.prototype.initEvents = function() {
        var e = this.events;
        this.enableDynamicLoad && e.push(new Ma),
        this.enableBatchObject && e.push(new Ca({
            app: this.app
        })),
        this.enableProxima && e.push(new Da(this.app)),
        e.push(new Sa),
        e.push(new ja),
        e.push(new Aa),
        e.push(new Ra({
            app: this.app,
            resourceManager: this.resourceManager
        })),
        e.push(new Pa({
            app: this.app,
            resourceManager: this.resourceManager
        }))
    }
    ,
    e.prototype.parseJson2meshObject = function(e, t) {
        var i = this.creatorManager.createTjsObject(e, t);
        if ("Building" === e.type && this.parseFacades(e, i),
        this.shouldParseChildren(e)) {
            var r = e.children;
            if (r)
                for (var n = 0; n < r.length; n++) {
                    var o = r[n];
                    "Facade" !== o.type && "FacadeGroup" !== o.type && "Floor" !== o.type && "Ceiling" !== o.type && "Roof" !== o.type && this.parseJson2meshObject(o, i)
                }
        }
        return i
    }
    ,
    e.prototype.shouldParseChildren = function(e) {
        return !!e.isContainer
    }
    ,
    e.prototype.parseFacades = function(e, t) {
        var i = e.typeToChildren.Facade
            , r = e.typeToChildren.FacadeGroup;
        (i || r) && this.creatorManager.createTjsFacadeObject(e, t)
    }
    ,
    e.prototype.processHideObjects = function(e) {
        for (var t = e.buildings, i = 0; i < t.length; i++) {
            var r = t[i]
                , n = r.floors;
            if (r.facade && !r.structShow)
                for (var o = 0; o < n.length; o++) {
                    n[o].visible = !1
                }
            else
                for (var s = 0; s < n.length; s++) {
                    var a = n[s];
                    this.hidePlanObjs(a)
                }
        }
    }
    ,
    e.prototype.hidePlanObjs = function(e) {
        if (!e.showObjectsInParentLevels) {
            for (var t = e.query(".CombinedObject", !1), i = 0; i < t.length; i++) {
                var r = t[i];
                if ("CombineMiscParent" === r.userData.type)
                    for (var n = r.query(".CombinedObject", !1), o = 0; o < n.length; o++) {
                        var s = n[o];
                        "CombinePlacement" !== s.userData.json2meshType && "CombinePlacementGroup" !== s.userData.json2meshType || (s.visible = !1)
                    }
            }
            for (var a = 0; a < e.children.length; a++) {
                var l = e.children[a];
                l.isDoor || "Room" === l.type || ("Thing" === l.type && l.isWindow || (l.visible = !1))
            }
        }
    }
    ,
    e.prototype.clear = function() {
        this.creatorManager.clear(),
        this.campus = null,
        this.app = null,
        this.enableProxima = !1,
        this.enableDynamicLoad = !1,
        this.creatorManager = null,
        this.enableBatchObject = !1,
        this.resourceManager = null,
        this.events = []
    }
    ,
    e
}();
Ga = (function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t.app,
        this.sceneUrl = t.sceneUrl,
        this.configJson = null
    }
    e.prototype.load = function(e) {
        e.effectsetting && (this.configJson = e.effectsetting,
        this.loadSkybox())
    }
    ,
    e.prototype.loadSkybox = function() {
        if ("string" == typeof this.app.skyBox && this.configJson.skybox) {
            var e = this.configJson.skybox
                , t = {
                negx: e.left,
                negy: e.down,
                negz: e.back,
                posx: e.right,
                posy: e.up,
                posz: e.front
            };
            this.app.skyBox = t
        }
    }
}(),
function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this.app = t,
        this.resourceUrl = null,
        this.relativeResourceUrl = null,
        this.sceneJson = null,
        this.scale = 1,
        this.curFloorPlan = null,
        this.tempTexture = null,
        this.indexJson = i,
        this.sceneJsonUri = "scene.json",
        this.defaultWallTextureUri = "Textures/RoomWall.jpg",
        this.defaultWallEdgeTextureUri = "Textures/WallEdge.jpg",
        this.defaultFloorTextureUri = "Textures/FloorDefault.jpg",
        this.defaultCeilingTextureUri = "Textures/CeilingDefault.jpg",
        this.defaultRoofTextureUri = "Textures/RoofDefault.jpg",
        this.defaultWallTexture = null,
        this.defaultCeilingTexture = null,
        this.defaultFloorTexture = null,
        this.defaultRoofTexture = null,
        this.defaultWallEdgeTexture = null,
        this.worldNode = new THREE.Object3D("world"),
        this.isCamFitScene = !0,
        this.campus = null,
        this.outdoorsVisible = !0,
        this.campusVisible = !0,
        this.enableUseHighestVersionResource = !0,
        this.enableDownloadSceneJsonCache = !0,
        this.enableDynamicLoad = !1,
        this.enableProxima = !1,
        this.enableBatchObject = !1,
        this._json2meshLoadedCallbacks = [],
        this.effectSettingLoader = null,
        this.app.options._json2meshObjectLoaded && this.registerJson2meshLoadedListener(this.app.options._json2meshObjectLoaded);
        this.worldNode;
        if (i && (i.position && (this.campusPosition = i.position),
        i.rotation && (this.campusRotation = i.rotation),
        void 0 !== i.isCamFitScene && null !== i.isCamFitScene && (this.isCamFitScene = i.isCamFitScene),
        i.scale && (this.campusScale = i.scale),
        void 0 !== i.outdoorsVisible && (this.outdoorsVisible = i.outdoorsVisible),
        void 0 !== i.campusVisible && (this.campusVisible = i.campusVisible),
        i.campus && (this.campus = i.campus),
        i.enableDynamicLoadScene && (this.enableDynamicLoad = i.enableDynamicLoadScene),
        i.enableProxima && (this.enableProxima = i.enableProxima),
        i.enableBatchObject && (this.enableBatchObject = i.enableBatchObject),
        void 0 !== i.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = i.enableUseHighestVersionResource),
        void 0 !== i.enableDownloadSceneJsonCache && (this.enableDownloadSceneJsonCache = i.enableDownloadSceneJsonCache),
        i.startDownloadResourcesCallback && (this.startDownloadResourcesCallback = i.startDownloadResourcesCallback)),
        this.campus && (this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        this.campusScale && (this.campus.scale = this.campusScale)),
        i.default) {
            var o = i.default;
            o.sceneJson && (this.sceneJson = "export.json"),
            o.wallTexture && (this.defaultWallTextureUri = o.wallTexture),
            o.wallEdgeTexture && (this.defaultWallEdgeTextureUri = o.wallEdgeTexture),
            o.floorTexture && (this.defaultFloorTextureUri = o.floorTexture),
            o.ceilingTexture && (this.defaultCeilingTextureUri = o.ceilingTexture),
            o.roofTexture && (this.defaultRoofTextureUri = o.roofTexture)
        }
        n.loaderResourceUrl && (this.resourceUrl = n.loaderResourceUrl),
        void 0 !== this.app.options.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = this.app.options.enableUseHighestVersionResource),
        void 0 !== this.app.options.enableBatchObject && this.app.options.enableBatchObject && (json2mesh.DefaultSetting.enableCombinePlacementToBuildMesh = !1,
        this.enableBatchObject = this.app.options.enableBatchObject),
        this.app.options.resourceLibraryUrl && (this.resourceUrl = this.app.options.resourceLibraryUrl),
        this.indexJson.resourceLibrary && (this.relativeResourceUrl = this.indexJson.resourceLibrary),
        this.enableDownloadSceneJsonCache || (this.sceneJsonUri += "?_t=" + (new Date).getTime()),
        this.json2meshToThingjsParser = null
    }
    return e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if (t.json2meshToThingjsParser = new Wa(t.app),
        t.enableProxima && (t.json2meshToThingjsParser.enableProxima = !0,
        json2mesh.DefaultSetting.enableCombinePlacementsByRoom = !0),
        t.enableBatchObject && (t.json2meshToThingjsParser.enableBatchObject = t.enableBatchObject),
        "String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node,
            this.json2meshToThingjsParser.setCampus(this.campus)),
            i.json && (this.sceneJson = i.json)
        }
        return this.relativeResourceUrl && (0 === this.relativeResourceUrl.indexOf("./") ? this.resourceUrl = this.sceneURL + this.relativeResourceUrl.replace("./", "/") : this.resourceUrl = this.relativeResourceUrl),
        new Promise((function(e, i) {
            t.updateProgress(.1),
            t.loadSceneJson().then((function(i) {
                t.sceneJson || (t.sceneJsonString = i,
                t.sceneJson = JSON.parse(i)),
                t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                t.updateProgress(.1);
                var r = new json2mesh.UBuilderSceneLoader;
                void 0 !== t.app.options.loadingSceneMaxResourcesUnitDownloadNumber && r.setResourcesUnitDownloadNumber(t.app.options.loadingSceneMaxResourcesUnitDownloadNumber),
                void 0 !== t.app.options.loadingSceneAwaitToNextBuildTime && (r.dynamicBuildManager.awaitToNextBuildTime = t.app.options.loadingSceneAwaitToNextBuildTime),
                t.enableDynamicLoad && (r.enableRequestWorld = !1,
                t.json2meshToThingjsParser.enableDynamicLoad = !0),
                t.resourceUrl && (r.resourceManager.baseTextureUrl = t.resourceUrl + "/texture/",
                r.resourceManager.baseModelUrl = t.resourceUrl + "/model/"),
                r.resourceManager.enableUserHighestVersionResource = t.enableUseHighestVersionResource,
                t.loader = r,
                r.load({
                    json: t.sceneJson,
                    customModeBaseUrl: t.sceneURL + "/",
                    bigVersion: t.indexJson.bigVersion,
                    smallVersion: t.indexJson.smallVersion
                }).then((function(i) {
                    t._notifyJson2meshLoadedListeners(i);
                    var n = new Ps;
                    n.parseWorld(i),
                    n.clear(),
                    t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                    t.campus.visible = t.campusVisible,
                    t.campusRotation && t.campus.node.quaternion.set(t.campusRotation.x, t.campusRotation.y, t.campusRotation.z, t.campusRotation.w),
                    t.campusPosition && (t.campus.position = t.campusPosition),
                    t.campusScale && (t.campus.scale = t.campusScale),
                    t.startDownloadResourcesCallback && t.startDownloadResourcesCallback(r.resourceManager.models, r.resourceManager.textures),
                    t.campus = t.json2meshToThingjsParser.parseWorld(i, r.resourceManager),
                    t.enableDynamicLoad ? (t.loadExtraData(t.campus),
                    t.updateProgress(1),
                    e(t.campus)) : r.startToBuild((function(i) {
                        t.updateProgress(.1 + .9 * i),
                        1 === i && (t.updateProgress(1),
                        t.loadExtraData(t.campus),
                        e(t.campus))
                    }
                    ))
                }
                ))
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadExtraData = function(e) {
        this.sceneJson.extraData && (e.extraData = this.sceneJson.extraData)
    }
    ,
    e.prototype.loadSceneJson = function(e) {
        var t = this;
        return e && (t.sceneURL = e),
        new Promise((function(e, i) {
            t.sceneJson ? e(t.sceneJson) : new THREE.FileLoader(t.app.loadingManager).load(t.sceneURL.appendURL(t.sceneJsonUri), (function(t) {
                e(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.updateProgress = function(e) {
        this.app.mainUI.updateLoadingProcess({
            object: this.campus,
            progress: e
        })
    }
    ,
    e.prototype.startToDownloadRequestResources = function(e) {
        this.loader.resourceManager.startToDownloadRequestResources(e)
    }
    ,
    e.prototype.addResourceDownloadRequest = function(e) {
        this.loader.resourceManager.addResourceDownloadRequest(e)
    }
    ,
    e.prototype.clearAllResources = function() {
        this.clear()
    }
    ,
    e.prototype.clearAllObjects = function() {
        this.loader.clearAllObjects(),
        this.world = null
    }
    ,
    e.prototype.clear = function() {
        this.loader.clearAllResources(),
        this.json2meshToThingjsParser.clear(),
        this.resourceUrl = null,
        this.relativeResourceUrl = null,
        this.sceneJson = null,
        this.scale = 1,
        this.curFloorPlan = null,
        this.tempTexture = null,
        this.indexJson = null,
        this.sceneJsonUri = null,
        this.defaultWallTextureUri = null,
        this.defaultWallEdgeTextureUri = null,
        this.defaultFloorTextureUri = null,
        this.defaultCeilingTextureUri = null,
        this.defaultRoofTextureUri = null,
        this.defaultWallTexture = null,
        this.defaultCeilingTexture = null,
        this.defaultFloorTexture = null,
        this.defaultRoofTexture = null,
        this.defaultWallEdgeTexture = null,
        this.worldNode = new THREE.Object3D("world"),
        this.isCamFitScene = !0,
        this.campus = null,
        this.outdoorsVisible = !0,
        this.campusVisible = !0,
        this.enableUseHighestVersionResource = !0,
        this.enableDownloadSceneJsonCache = !0,
        this.enableDynamicLoad = !1,
        this.enableProxima = !1,
        this.enableBatchObject = !1
    }
    ,
    e.prototype.requestToBuild = function(e) {
        this.loader.requestToBuild(e)
    }
    ,
    e.prototype.startToBuild = function(e) {
        return this.loader.startToBuild(e)
    }
    ,
    e.prototype.disposeObject = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.loader.disposeObject(e, t)
    }
    ,
    e.prototype.findObjectByID = function(e) {
        return this.world.findObjectByID(e)
    }
    ,
    e.prototype.registerJson2meshLoadedListener = function(e) {
        this._json2meshLoadedCallbacks.push(e)
    }
    ,
    e.prototype._notifyJson2meshLoadedListeners = function(e) {
        for (var t = 0; t < this._json2meshLoadedCallbacks.length; t++) {
            (0,
            this._json2meshLoadedCallbacks[t])(e)
        }
    }
    ,
    e
}());
qa = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.nodes = [],
        this.scene = this.app.scene,
        this.objectPool = this.app.objectPool,
        this.rootNode = null,
        this.campus = null,
        this.sceneURL = null,
        this.sceneJsonData = null,
        this.loadedSceneGLTF = null,
        this.worldNode = new THREE.Object3D,
        this.fitCamInfo = null
    }
    return e.prototype.parse = function(e) {
        if (this.parseWorld(e),
        e.camInfo) {
            var t = e.camInfo;
            this.fitCamInfo = t
        }
    }
    ,
    e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.parseWorld = function(e) {
        var t = this.worldNode;
        if (null == this.campus && (this.campus = this.app.objectManager.create({
            type: "Campus",
            name: "Campus",
            node: t
        }),
        this.campus.node.name = "campus",
        this.app.scene.add(this.campus.node)),
        e.outdoors && this.parseOutdoors(e.outdoors),
        e.buildings) {
            var i = e.buildings;
            this.parseBuildings(i)
        }
    }
    ,
    e.prototype.parseOutdoors = function(e) {
        var t = e
            , i = new THREE.Object3D;
        this.outdoors = this.app.objectManager.create({
            type: "Outdoors",
            name: "Outdoors",
            parent: this.campus,
            node: i
        });
        var r = this.outdoors;
        this.app.outdoors || (this.app.outdoors = this.outdoors,
        this.app.currentParentObject = this.outdoors);
        var n = t.gltfid;
        if (n && this.nodes[n]) {
            var o = this.nodes[n];
            THREE.SceneUtils.detach(o, o.parent, this.app.scene),
            THREE.SceneUtils.attach(o, this.app.scene, r.node),
            r.node.updateMatrixWorld()
        }
        this.parseFloorPlan(t, r)
    }
    ,
    e.prototype.parseBuildings = function(e) {
        for (var t in e) {
            var i = e[t]
                , r = t;
            i.name && (r = i.name);
            var n = null;
            if (i.gltfid) {
                var o = i.gltfid;
                this.nodes[o] && (n = this.nodes[o])
            }
            var s = this.app.objectManager.create({
                type: "Building",
                name: r,
                parent: this.campus,
                node: n
            });
            i.plans && this.parseFloorPlans(i.plans, s),
            i.facades && this.parseFacades(i.facades, s)
        }
    }
    ,
    e.prototype.parseFloorPlans = function(e, t) {
        for (var i in e) {
            var r = null
                , n = e[i]
                , o = i;
            n.name && (o = n.name);
            var s = n.gltfid;
            s && this.nodes[s] && (r = this.nodes[s]);
            var a = this.app.objectManager.create({
                type: "Floor",
                name: o,
                node: r,
                parent: t
            });
            this.parseFloorPlan(n, a)
        }
    }
    ,
    e.prototype.parseFloorPlan = function(e, t) {
        e.placements && this.parseThings(e.placements, t),
        e.videoprobes && this.parseThings(e.videoprobes, t),
        e.doororwindows && this.parseDoorWins(e.doororwindows, t),
        e.routes && this.parseThings(e.routes, t),
        e.pipelines && this.parseThings(e.pipelines, t),
        e.curvelines && this.parseThings(e.curvelines, t),
        e.arrowlines && this.parseThings(e.arrowlines, t),
        e.arrowdatalines && this.parseThings(e.arrowdatalines, t),
        e.leakwaterlines && this.parseThings(e.leakwaterlines, t),
        e.rooms && this.parseRooms(e.rooms, t),
        this.parseStructure(e, t);
        var i = e.groups;
        i && this.parseGroup(i, t)
    }
    ,
    e.prototype.parseRooms = function(e, t) {
        for (var i = 0; i < e.length; i++) {
            var r = e[i]
                , n = null;
            r.name && (n = r.name);
            var o = null
                , s = r.gltfid;
            s && this.nodes[s] && (o = this.nodes[s]);
            var a = null
                , l = r.properties;
            if (l)
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            var h = null
                , p = null
                , d = null;
            r.floor && (s = r.floor.gltfid,
            this.nodes[s] && (d = this.nodes[s])),
            r.ceiling && (s = r.ceiling.gltfid,
            this.nodes[s] && (h = this.nodes[s])),
            r.roof && (s = r.roof.gltfid,
            this.nodes[s] && (p = this.nodes[s]));
            var f = null
                , m = null
                , g = null
                , v = {};
            if (r.area && (m = r.area,
            v.area = m),
            r.circumference && (g = r.circumference,
            v.circumference = g),
            r.center) {
                var y = r.center;
                (f = new THREE.Vector3).set(y[0], y[1], -y[2]),
                v.center = f
            }
            var b = r.isShown;
            if (b) {
                var _ = "false" !== (b = b.toLowerCase());
                o.visible = _
            }
            this.app.objectManager.create({
                type: "Room",
                name: n,
                node: o,
                ceilingNode: h,
                roofNode: p,
                floorNode: d,
                parent: t,
                properties: a,
                auxiliaryInfo: v
            })
        }
    }
    ,
    e.prototype.parseStructure = function(e, t) {
        if (e.structure) {
            var i = (e = e.structure).placements;
            if (i)
                for (var r in i) {
                    var n = i[r].gltfid
                        , o = this.nodes[n];
                    if (o) {
                        t.miscNode = o.parent;
                        break
                    }
                }
            var s = e.walls;
            if (s)
                for (var r in s) {
                    n = s[r].gltfid;
                    var a = this.nodes[n];
                    if (a) {
                        t.wallNode = a.parent;
                        break
                    }
                }
            var l = e.roofs;
            if (l)
                for (var r in l) {
                    n = l[r].gltfid;
                    var u = this.nodes[n];
                    if (u) {
                        t.roofNode = u.parent;
                        break
                    }
                }
            var c = e.ceilings;
            if (c)
                for (var r in c) {
                    n = c[r].gltfid;
                    var h = this.nodes[n];
                    if (h) {
                        t.ceilingNode = h.parent;
                        break
                    }
                }
            if (p = e.floors)
                for (var r in p) {
                    var p;
                    if (n = (p = p[r]).gltfid) {
                        var d = this.nodes[n];
                        if (d) {
                            t.floorNode = d.parent;
                            break
                        }
                    }
                }
        }
    }
    ,
    e.prototype.parseGroup = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.name && (n = r.name);
            var o = null
                , s = r.gltfid;
            s && this.nodes[s] && (o = this.nodes[s]);
            var a = null
                , l = r.properties;
            if (l)
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            this.app.objectManager.create({
                type: "Thing",
                name: n,
                node: o,
                parent: t,
                properties: a
            }),
            r.placements && this.parseThings(r.placements, t)
        }
    }
    ,
    e.prototype.parseFacades = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.name && (n = r.name);
            var o = null
                , s = r.gltfid;
            s && this.nodes[s] && (o = this.nodes[s]);
            var a = null
                , l = r.properties;
            if (l)
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            var h = r.isShown;
            if (h) {
                var p = "false" !== (h = h.toLowerCase());
                o.visible = p
            }
            this.app.objectManager.create({
                type: "Facade",
                name: n,
                node: o,
                parent: t,
                properties: a
            });
            t.node.add(o)
        }
    }
    ,
    e.prototype.parseThings = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = r.name || i
                , o = r.type || "Thing"
                , s = null
                , a = r.gltfid;
            a && this.nodes[a] && (s = this.nodes[a]);
            var l = null
                , u = r.properties;
            if (u)
                for (var c in l = {},
                u) {
                    var h = u[c];
                    l[c] = h
                }
            var p = r.isShown;
            if (p) {
                var d = "false" !== (p = p.toLowerCase());
                s.visible = d
            }
            this.app.objectManager.create({
                type: o,
                name: n,
                node: s,
                parent: t,
                properties: l
            })
        }
    }
    ,
    e.prototype.parseDoorWins = function(e, t) {
        for (var i in e) {
            var r = e[i]
                , n = i;
            r.name && (n = r.name);
            var o = null;
            if (r.gltfid) {
                var s = r.gltfid;
                this.nodes[s] && (o = this.nodes[s])
            }
            var a = null;
            if (r.properties) {
                var l = r.properties;
                for (var u in a = {},
                l) {
                    var c = l[u];
                    a[u] = c
                }
            }
            this.app.objectManager.create({
                type: "Door",
                name: n,
                node: o,
                parent: t,
                properties: a
            })
        }
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if ("String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node)
        }
        return new Promise((function(e, i) {
            t.loadGLTF().then((function(e) {
                return t.loadedSceneGLTF = e,
                e.scene.traverse((function(e) {
                    t.nodes[e.name] = e
                }
                )),
                t.parseSceneJson()
            }
            )).then((function(i) {
                t.fitCamInfo ? t.parseCamInfo(t.fitCamInfo) : t.campus.node && t.app.camera.fit(t.campus),
                e(t.campus)
            }
            )).catch((function() {
                t.campus.node.add(t.loadedSceneGLTF.scene.children[0]),
                t.campus && t.app.camera.fit(t.campus),
                e(t.campus)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadGLTF = function() {
        var e = this;
        return new Promise((function(t, i) {
            var r = new THREE.GLTFLoader(e.app.loadingManager);
            r.setCrossOrigin("anonymous"),
            r.load(e.sceneURL + "/Unity2GLTF.gltf", (function(e) {
                t(e)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.parseSceneJson = function() {
        var e = this;
        return new Promise((function(t, i) {
            new THREE.FileLoader(e.app.loadingManager).load(e.sceneURL + "/scene.json", (function(i) {
                var r = JSON.parse(i);
                e.sceneJsonData = r,
                e.parseWorld(r),
                t(r)
            }
            ), (function() {}
            ), (function() {
                THING.Utils.error("not find file scene.json "),
                i()
            }
            ))
        }
        ))
    }
    ,
    e
}();
Xa = function(e) {
    function t(i, n, o) {
        return classCallCheck(this, t),
        s(this, e.call(this, i, n, o))
    }
    return o(t, e),
    t.prototype.load = function(e) {
        var t = this;
        if (t.json2meshToThingjsParser = new Wa(t.app),
        t.enableProxima && (t.json2meshToThingjsParser.enableProxima = !0,
        json2mesh.DefaultSetting.enableCombinePlacementsByRoom = !0),
        t.enableBatchObject && (t.json2meshToThingjsParser.enableBatchObject = t.enableBatchObject),
        "String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node,
            this.json2meshToThingjsParser.setCampus(this.campus)),
            i.json && (this.sceneJson = i.json)
        }
        return this.relativeResourceUrl && (0 === this.relativeResourceUrl.indexOf("./") ? this.resourceUrl = this.sceneURL + this.relativeResourceUrl.replace("./", "/") : this.resourceUrl = this.relativeResourceUrl),
        new Promise((function(e, i) {
            t.updateProgress(.1),
            t.loadSceneJson().then((function(i) {
                t.sceneJson || (t.sceneJsonString = i,
                t.sceneJson = JSON.parse(i)),
                t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                t.updateProgress(.1);
                var r = new json2mesh.UBuilderSceneLoader;
                void 0 !== t.app.options.loadingSceneMaxResourcesUnitDownloadNumber && r.setResourcesUnitDownloadNumber(t.app.options.loadingSceneMaxResourcesUnitDownloadNumber),
                void 0 !== t.app.options.loadingSceneAwaitToNextBuildTime && (r.dynamicBuildManager.awaitToNextBuildTime = t.app.options.loadingSceneAwaitToNextBuildTime),
                t.enableDynamicLoad && (r.enableRequestWorld = !1,
                t.json2meshToThingjsParser.enableDynamicLoad = !0);
                var n = "https://www.thingjs.com/";
                t.resourceUrl && (r.resourceManager.baseTextureUrl = t.resourceUrl + "/texture/",
                r.resourceManager.baseModelUrl = t.resourceUrl + "/model/",
                n = t.resourceUrl + "/"),
                t.loader = r,
                r.load({
                    json: t.sceneJson,
                    bigVersion: t.indexJson.bigVersion,
                    smallVersion: t.indexJson.smallVersion,
                    customModeBaseUrl: n
                }).then((function(i) {
                    t._notifyJson2meshLoadedListeners(i),
                    (new Ps).parseWorld(i),
                    t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                    t.campus.visible = t.campusVisible,
                    t.campusRotation && t.campus.node.quaternion.set(t.campusRotation.x, t.campusRotation.y, t.campusRotation.z, t.campusRotation.w),
                    t.campusPosition && (t.campus.position = t.campusPosition),
                    t.campusScale && (t.campus.scale = t.campusScale),
                    t.startDownloadResourcesCallback && t.startDownloadResourcesCallback(r.resourceManager.models, r.resourceManager.textures),
                    t.campus = t.json2meshToThingjsParser.parseWorld(i, r.resourceManager),
                    t.enableDynamicLoad ? (t.loadExtraData(t.campus),
                    t.updateProgress(1),
                    e(t.campus)) : r.startToBuild((function(i) {
                        t.updateProgress(.1 + .9 * i),
                        1 === i && (t.updateProgress(1),
                        t.loadExtraData(t.campus),
                        e(t.campus))
                    }
                    ))
                }
                ))
            }
            ))
        }
        ))
    }
    ,
    t
}(Ga);
Ja = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this._buildCallback, {
            event: this
        })
    }
    ,
    t.prototype._buildCallback = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject;
        "Facade" !== i.type && (i.localPosition = r.position,
        i.scale = r.scale,
        r.rotation && i.node.quaternion.set(r.rotation[0], r.rotation[1], r.rotation[2], r.rotation[3]))
    }
    ,
    t
}(Ta);
Ya = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.app = i.app,
        n
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        if ("BatchCombinePlacement" === r.type) {
            var o = r.objects;
            if (0 === o.length)
                return;
            i.node.remove(r.mesh);
            var s = r.transformations
                , a = r.resource.modelID;
            r.resource.model.updateMatrixWorld();
            for (var l = e.app.create({
                type: "BatchObject",
                nodeOverride: !1,
                node: r.resource.model,
                initBatchNum: o.length,
                parent: i
            }), u = 0; u < o.length; u++) {
                var c = o[u]
                    , h = n.calMatrixs(s[u])
                    , p = new THREE.Vector3
                    , d = new THREE.Vector3
                    , f = new THREE.Quaternion;
                h.decompose(p, f, d);
                var m = p.toArray()
                    , g = d.toArray()
                    , v = new THREE.Euler;
                v.setFromQuaternion(f);
                var y = v.toArray();
                y[0] *= 180 / Math.PI,
                y[1] *= 180 / Math.PI,
                y[2] *= 180 / Math.PI;
                var b = n.getSubObjectParams(c);
                b.localPosition = m,
                b.scale = g,
                b.angles = y,
                b.parent = i;
                l.createSubObject(b)
            }
            Cs.addBatchCombinePlacementStyle(l, r, a)
        }
    }
    ,
    t.prototype.getSubObjectParams = function(e) {
        var t = {
            uuid: e.id
        };
        return null !== e.userID && (t.id = e.userID),
        null !== e.name && (t.name = e.name),
        null !== e.properties && (t.properties = e.properties),
        t
    }
    ,
    t.prototype.calMatrixs = function(e) {
        for (var t = new THREE.Matrix4, i = e.positions.length - 1; i > -1; i--) {
            var r = e.positions[i]
                , n = e.quaternions[i]
                , o = e.scales[i]
                , s = new THREE.Vector3(r[0],r[1],r[2])
                , a = new THREE.Quaternion(n[0],n[1],n[2],n[3])
                , l = new THREE.Vector3(o[0],o[1],o[2])
                , u = new THREE.Matrix4;
            u.compose(s, a, l),
            t.premultiply(u)
        }
        return t
    }
    ,
    t
}(Ta);
Qa = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.app = i.app,
        n
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this.onFire, {
            event: this
        })
    }
    ,
    t.prototype.onFire = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        if ("BatchPlacement" === r.type) {
            var o = r.objects;
            if (0 === o.length)
                return;
            i.node.remove(r.mesh);
            var s = r.transformations
                , a = r.resource.modelID;
            r.resource.model.updateMatrixWorld();
            for (var l = e.app.create({
                type: "BatchObject",
                nodeOverride: !1,
                node: r.resource.model,
                initBatchNum: o.length,
                parent: i
            }), u = 0; u < o.length; u++) {
                var c = o[u]
                    , h = n.calMatrixs(s[u])
                    , p = new THREE.Vector3
                    , d = new THREE.Vector3
                    , f = new THREE.Quaternion;
                h.decompose(p, f, d);
                var m = p.toArray()
                    , g = d.toArray()
                    , v = new THREE.Euler;
                v.setFromQuaternion(f);
                var y = v.toArray();
                y[0] *= 180 / Math.PI,
                y[1] *= 180 / Math.PI,
                y[2] *= 180 / Math.PI;
                var b = n.getSubObjectParams(c);
                b.localPosition = m,
                b.scale = g,
                b.angles = y,
                b.parent = i;
                l.createSubObject(b)
            }
            Cs.addBatchPlacementStyle(l, r, a)
        }
    }
    ,
    t.prototype.getSubObjectParams = function(e) {
        var t = {
            uuid: e.id
        };
        return null !== e.userID && (t.id = e.userID),
        null !== e.name && (t.name = e.name),
        null !== e.properties && (t.properties = e.properties),
        t
    }
    ,
    t.prototype.getMeshes = function(e) {
        var t = [];
        return e.traverse((function(e) {
            e.isMesh && t.push(e)
        }
        )),
        t
    }
    ,
    t.prototype.addSfStyle = function(e, t) {
        var i = this.getMeshes(e);
        if (i && i.length > 0)
            for (var r = 0; r < i.length; r++) {
                i[r]._sfStyle = t
            }
    }
    ,
    t.prototype.isTree = function(e) {
        return !!treeModels[e]
    }
    ,
    t.prototype.calMatrixs = function(e) {
        for (var t = new THREE.Matrix4, i = e.positions.length - 1; i > -1; i--) {
            var r = e.positions[i]
                , n = e.quaternions[i]
                , o = e.scales[i]
                , s = new THREE.Vector3(r[0],r[1],r[2])
                , a = new THREE.Quaternion(n[0],n[1],n[2],n[3])
                , l = new THREE.Vector3(o[0],o[1],o[2])
                , u = new THREE.Matrix4;
            u.compose(s, a, l),
            t.premultiply(u)
        }
        return t
    }
    ,
    t
}(Ta);
Za = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerCreatedCallbackListener(this._createdCallback, {
            event: this
        })
    }
    ,
    t.prototype._createdCallback = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject
            , n = t.event;
        r.resource && r.resource.registerBuildCallbackListener(n._resourceBuildedCallback, {
            event: this,
            tjsObject: i
        })
    }
    ,
    t.prototype._resourceBuildedCallback = function(e, t) {
        var i = t.tjsObject;
        e.indexJson && (i._extensionsFile = e.indexJson.extensionsfile || null)
    }
    ,
    t
}(Ta);
Ka = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.enableBuildMaxPlacemenetBatch = !0,
        n
    }
    return o(t, e),
    t.prototype.parseWorld = function(e, t, i, r) {
        this.resourceManager = t,
        this.initEvents(),
        this.initCreatorManager(e, i, r);
        var n = this.parseJson2meshObject(e);
        return this.processHideObjects(n),
        n
    }
    ,
    t.prototype.initCreatorManager = function(e, t, i) {
        var r = new (Va.getConfig(t, i))(this.app);
        null !== this.campus && r.addCreatedThingjsObject(e, this.campus),
        this.creatorManager = new Rs({
            app: this.app,
            config: r,
            events: this.events
        })
    }
    ,
    t.prototype.initEvents = function() {
        var e = this.events;
        this.enableDynamicLoad && e.push(new Ma),
        e.push(new Qa({
            app: this.app
        })),
        e.push(new Ya({
            app: this.app
        })),
        e.push(new Sa),
        e.push(new ja),
        e.push(new Ra({
            app: this.app,
            resourceManager: this.resourceManager
        })),
        e.push(new Pa({
            app: this.app,
            resourceManager: this.resourceManager
        })),
        e.push(new Za)
    }
    ,
    t
}(Wa);
$a = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerCreatedCallbackListener(this._createdCallback, {
            event: this
        })
    }
    ,
    t.prototype._createdCallback = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject;
        i.loadMode = r.loadMode
    }
    ,
    t
}(Ta);
el = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this.app = t,
        this.resourceUrl = null,
        this.relativeResourceUrl = null,
        this.sceneJson = null,
        this.scale = 1,
        this.curFloorPlan = null,
        this.tempTexture = null,
        this.indexJson = i,
        this.sceneJsonUri = "scene.json",
        this.defaultWallTextureUri = "Textures/RoomWall.jpg",
        this.defaultWallEdgeTextureUri = "Textures/WallEdge.jpg",
        this.defaultFloorTextureUri = "Textures/FloorDefault.jpg",
        this.defaultCeilingTextureUri = "Textures/CeilingDefault.jpg",
        this.defaultRoofTextureUri = "Textures/RoofDefault.jpg",
        this.defaultWallTexture = null,
        this.defaultCeilingTexture = null,
        this.defaultFloorTexture = null,
        this.defaultRoofTexture = null,
        this.defaultWallEdgeTexture = null,
        this.worldNode = new THREE.Object3D("world"),
        this.isCamFitScene = !0,
        this.campus = null,
        this.outdoorsVisible = !0,
        this.campusVisible = !0,
        this.enableUseHighestVersionResource = !0,
        this.enableDownloadSceneJsonCache = !0,
        this.enableDynamicLoad = !1,
        this.enableProxima = !1,
        this.enableBatchObject = !1,
        this._jsonloadedCallbacks = [];
        this.worldNode;
        (i && (i.position && (this.campusPosition = i.position),
        i.rotation && (this.campusRotation = i.rotation),
        void 0 !== i.isCamFitScene && null !== i.isCamFitScene && (this.isCamFitScene = i.isCamFitScene),
        i.scale && (this.campusScale = i.scale),
        void 0 !== i.outdoorsVisible && (this.outdoorsVisible = i.outdoorsVisible),
        void 0 !== i.campusVisible && (this.campusVisible = i.campusVisible),
        i.campus && (this.campus = i.campus),
        void 0 !== i.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = i.enableUseHighestVersionResource,
        json2mesh.DefaultSetting.enableUseHighestVersionResource = this.enableUseHighestVersionResource),
        void 0 !== i.enableDownloadSceneJsonCache && (this.enableDownloadSceneJsonCache = i.enableDownloadSceneJsonCache),
        i.enableDynamicLoadScene && (this.enableDynamicLoad = i.enableDynamicLoadScene),
        i.enableProxima && (this.enableProxima = i.enableProxima),
        i.startDownloadResourcesCallback && (this.startDownloadResourcesCallback = i.startDownloadResourcesCallback)),
        this.campus && (this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        this.campusScale && (this.campus.scale = this.campusScale)),
        i.default) && (i.default.sceneJson && (this.sceneJson = "export.json"));
        void 0 !== this.app.options.enableBatchObject && this.app.options.enableBatchObject && (json2mesh.DefaultSetting.enableBatchObject = !0,
        this.enableBatchObject = this.app.options.enableBatchObject),
        n.loaderResourceUrl && (this.resourceUrl = n.loaderResourceUrl),
        this.app.options.resourceLibraryUrl && (this.resourceUrl = this.app.options.resourceLibraryUrl),
        this.indexJson.resourceLibrary && (this.relativeResourceUrl = this.indexJson.resourceLibrary),
        this.enableDownloadSceneJsonCache || (this.sceneJsonUri += "?_t=" + (new Date).getTime()),
        this.json2meshToThingjsParser = null,
        this.LoaderClass = json2mesh.Max2TjsLoader,
        this.app.level.options = {
            autoBakeFloor: !1
        },
        this.app.options._sceneloaded && this.registerSceneJsonLoadedListener(this.app.options._sceneloaded),
        this.enableBatchMaxPlacement = !0,
        void 0 !== this.app.options.enableBatchMaxPlacement && (this.enableBatchMaxPlacement = this.app.options.enableBatchMaxPlacement)
    }
    return e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if (t.json2meshToThingjsParser = new Ka(t.app),
        t.enableProxima && (t.json2meshToThingjsParser.enableProxima = !0,
        json2mesh.DefaultSetting.enableCombinePlacementsByRoom = !0),
        t.json2meshToThingjsParser.events.push(new Ja),
        t.json2meshToThingjsParser.events.push(new $a),
        "String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node,
            this.json2meshToThingjsParser.setCampus(this.campus)),
            i.json && (this.sceneJson = i.json)
        }
        return this.relativeResourceUrl && (0 === this.relativeResourceUrl.indexOf("./") ? this.resourceUrl = this.sceneURL + this.relativeResourceUrl.replace("./", "/") : this.resourceUrl = this.relativeResourceUrl),
        new Promise((function(e, i) {
            t.updateProgress(.1),
            t.loadSceneJson().then((function(i) {
                t.sceneJson || (t.sceneJsonString = i,
                t.sceneJson = JSON.parse(i)),
                t._notifySceneJsonLoadedListeners(t.sceneJson),
                t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                t.updateProgress(.1);
                var r = new t.LoaderClass;
                t.enableDynamicLoad && (r.enableRequestWorld = !1,
                t.json2meshToThingjsParser.enableDynamicLoad = !0),
                t.resourceUrl && (r.resourceManager.baseTextureUrl = t.resourceUrl + "/texture/",
                r.resourceManager.baseModelUrl = t.resourceUrl + "/model/"),
                t.loader = r,
                t.world = r.load({
                    enableBatchPlacement: t.enableBatchMaxPlacement,
                    json: t.sceneJson,
                    customModeBaseUrl: t.sceneURL + "/",
                    bigVersion: t.indexJson.bigVersion,
                    smallVersion: t.indexJson.smallVersion
                });
                var n = t.world;
                (new Ps).parseWorld(n),
                t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                t.campus && (t.campus.visible = t.campusVisible),
                t.campusRotation && t.campus.node.quaternion.set(t.campusRotation.x, t.campusRotation.y, t.campusRotation.z, t.campusRotation.w),
                t.campusPosition && (t.campus.position = t.campusPosition),
                t.campusScale && (t.campus.scale = t.campusScale),
                t.startDownloadResourcesCallback && t.startDownloadResourcesCallback(r.resourceManager.models, r.resourceManager.textures),
                t.campus = t.json2meshToThingjsParser.parseWorld(n, r.resourceManager, t.indexJson.bigVersion, t.indexJson.smallVersion),
                t.enableDynamicLoad ? (t.loadExtraData(t.campus),
                t.updateProgress(1),
                e(t.campus)) : r.startToBuild((function(i) {
                    t.updateProgress(.1 + .9 * i),
                    1 === i && (t.updateProgress(1),
                    t.loadExtraData(t.campus),
                    e(t.campus))
                }
                ))
            }
            ))
        }
        ))
    }
    ,
    e.prototype.setTransformInfo = function(e) {}
    ,
    e.prototype.loadExtraData = function(e) {
        this.sceneJson.extraData && (e.extraData = this.sceneJson.extraData)
    }
    ,
    e.prototype.loadSceneJson = function(e) {
        var t = this;
        return e && (t.sceneURL = e),
        new Promise((function(e, i) {
            t.sceneJson ? e(t.sceneJson) : new THREE.FileLoader(t.app.loadingManager).load(t.sceneURL.appendURL(t.sceneJsonUri), (function(t) {
                e(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.updateProgress = function(e) {
        this.app.mainUI.updateLoadingProcess({
            object: this.campus,
            progress: e
        })
    }
    ,
    e.prototype.startToDownloadRequestResources = function(e) {
        this.loader.startToDownloadRequestResources(e)
    }
    ,
    e.prototype.addResourceDownloadRequest = function(e) {
        this.loader.resourceManager.addResourceDownloadRequest(e)
    }
    ,
    e.prototype.clearAllResources = function() {
        this.loader.resourceManager.disposeModels(),
        this.loader.resourceManager.disposeTextures()
    }
    ,
    e.prototype.clearAllObjects = function() {
        this.world.clear()
    }
    ,
    e.prototype.requestToBuild = function(e) {
        this.loader.requestToBuild(e)
    }
    ,
    e.prototype.startToBuild = function(e) {
        return this.loader.startToBuild(e)
    }
    ,
    e.prototype.disposeObject = function(e) {
        this.loader.disposeObject(e)
    }
    ,
    e.prototype.findObjectByID = function(e) {
        return this.world.findObjectByID(e)
    }
    ,
    e.prototype.registerSceneJsonLoadedListener = function(e) {
        this._jsonloadedCallbacks.push(e)
    }
    ,
    e.prototype._notifySceneJsonLoadedListeners = function(e) {
        for (var t = 0; t < this._jsonloadedCallbacks.length; t++) {
            (0,
            this._jsonloadedCallbacks[t])(e)
        }
    }
    ,
    e
}();
tl = function(e) {
    function t(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this, i, n, o));
        return a.LoaderClass = json2mesh.Bim2TjsLoader,
        a
    }
    return o(t, e),
    t
}(el);
il = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.init = function(t) {
        e.prototype.init.call(this, t),
        t.registerBuildedCallbackListener(this._buildCallback, {
            event: this
        })
    }
    ,
    t.prototype._buildCallback = function(e, t) {
        var i = e.thingjsObject
            , r = e.json2meshObject;
        "Facade" !== i.type && r.dataVersion && 5 === r.dataVersion.mode && (i.localPosition = r.position,
        i.scale = r.scale,
        r.rotation && i.node.quaternion.set(r.rotation[0], r.rotation[1], r.rotation[2], r.rotation[3]))
    }
    ,
    t
}(Ta);
rl = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.ubuilderToThingjsParser = new Wa(this.app),
        this.maxToThingjsParser = new Ka(this.app),
        this.campus = null,
        this.app = t,
        this.enableProxima = !1,
        this.enableDynamicLoad = !1,
        this.creatorManager = null,
        this.enableBatchObject = !1,
        this.resourceManager = null
    }
    return e.prototype.parseWorld = function(e, t) {
        this.resourceManager = t,
        this.ubuilderToThingjsParser.resourceManager = t,
        this.maxToThingjsParser.resourceManager = t,
        this.ubuilderToThingjsParser.enableProxima = this.enableProxima,
        this.maxToThingjsParser.enableProxima = this.enableProxima,
        this.ubuilderToThingjsParser.enableBatchObject = this.enableBatchObject,
        this.maxToThingjsParser.enableBatchObject = this.enableBatchObject,
        this.ubuilderToThingjsParser.enableDynamicLoad = this.enableDynamicLoad,
        this.maxToThingjsParser.enableDynamicLoad = this.enableDynamicLoad,
        this.ubuilderToThingjsParser.initEvents(),
        this.maxToThingjsParser.initEvents(),
        this.maxToThingjsParser.events.push(new il),
        this.ubuilderToThingjsParser.initCreatorManager(e),
        this.maxToThingjsParser.initCreatorManager(e);
        var i = this.parseJson2meshObject(e);
        return this.processHideObjects(i),
        i
    }
    ,
    e.prototype.parseJson2meshObject = function(e, t) {
        var i = null;
        3 === e.dataVersion.mode ? i = this.ubuilderToThingjsParser : 5 === e.dataVersion.mode ? i = this.maxToThingjsParser : console.error("not support mode");
        var r = i.creatorManager.createTjsObject(e, t);
        if ("Building" === e.type && i.parseFacades(e, r),
        i.shouldParseChildren(e)) {
            var n = e.children;
            if (n)
                for (var o = 0; o < n.length; o++) {
                    var s = n[o];
                    "Facade" !== s.type && "FacadeGroup" !== s.type && "Floor" !== s.type && "Ceiling" !== s.type && "Roof" !== s.type && ("FloorPlan" === e.type || "Outdoors" === e.type ? i.parseJson2meshObject(s, r) : this.parseJson2meshObject(s, r))
                }
        }
        return r
    }
    ,
    e.prototype.setCampus = function(e) {
        this.ubuilderToThingjsParser.setCampus(e),
        this.maxToThingjsParser.setCampus(e)
    }
    ,
    e.prototype.processHideObjects = function(e) {
        for (var t = e.buildings, i = 0; i < t.length; i++) {
            var r = t[i]
                , n = r.floors;
            if (r.facade && !r.structShow)
                for (var o = 0; o < n.length; o++) {
                    n[o].visible = !1
                }
            else
                for (var s = 0; s < n.length; s++) {
                    var a = n[s];
                    this.hidePlanObjs(a)
                }
        }
    }
    ,
    e.prototype.hidePlanObjs = function(e) {
        if (!e.showObjectsInParentLevels) {
            for (var t = e.query(".CombinedObject", !1), i = 0; i < t.length; i++) {
                var r = t[i];
                if ("CombineMiscParent" === r.userData.type)
                    for (var n = r.query(".CombinedObject", !1), o = 0; o < n.length; o++) {
                        var s = n[o];
                        "CombinePlacement" !== s.userData.json2meshType && "CombinePlacementGroup" !== s.userData.json2meshType || (s.visible = !1)
                    }
            }
            for (var a = 0; a < e.children.length; a++) {
                var l = e.children[a];
                l.isDoor || "Room" === l.type || ("Thing" === l.type && l.isWindow || (l.visible = !1))
            }
        }
    }
    ,
    e.prototype.clear = function() {
        this.ubuilderToThingjsParser.clear(),
        this.maxToThingjsParser.clear(),
        this.app = null,
        this.enableProxima = !1,
        this.enableDynamicLoad = !1,
        this.creatorManager = null,
        this.enableBatchObject = !1,
        this.resourceManager = null
    }
    ,
    e
}();
nl = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this.app = t,
        this.resourceUrl = null,
        this.relativeResourceUrl = null,
        this.sceneJson = null,
        this.scale = 1,
        this.curFloorPlan = null,
        this.tempTexture = null,
        this.indexJson = i,
        this.sceneJsonUri = "scene.json",
        this.defaultWallTextureUri = "Textures/RoomWall.jpg",
        this.defaultWallEdgeTextureUri = "Textures/WallEdge.jpg",
        this.defaultFloorTextureUri = "Textures/FloorDefault.jpg",
        this.defaultCeilingTextureUri = "Textures/CeilingDefault.jpg",
        this.defaultRoofTextureUri = "Textures/RoofDefault.jpg",
        this.defaultWallTexture = null,
        this.defaultCeilingTexture = null,
        this.defaultFloorTexture = null,
        this.defaultRoofTexture = null,
        this.defaultWallEdgeTexture = null,
        this.worldNode = new THREE.Object3D("world"),
        this.isCamFitScene = !0,
        this.campus = null,
        this.outdoorsVisible = !0,
        this.campusVisible = !0,
        this.enableUseHighestVersionResource = !0,
        this.enableDownloadSceneJsonCache = !0,
        this.enableDynamicLoad = !1,
        this.enableProxima = !1,
        this.enableBatchObject = !1,
        this.effectSettingLoader = null;
        this.worldNode;
        if (i && (i.position && (this.campusPosition = i.position),
        i.rotation && (this.campusRotation = i.rotation),
        void 0 !== i.isCamFitScene && null !== i.isCamFitScene && (this.isCamFitScene = i.isCamFitScene),
        i.scale && (this.campusScale = i.scale),
        void 0 !== i.outdoorsVisible && (this.outdoorsVisible = i.outdoorsVisible),
        void 0 !== i.campusVisible && (this.campusVisible = i.campusVisible),
        i.campus && (this.campus = i.campus),
        i.enableDynamicLoadScene && (this.enableDynamicLoad = i.enableDynamicLoadScene),
        i.enableProxima && (this.enableProxima = i.enableProxima),
        i.enableBatchObject && (this.enableBatchObject = i.enableBatchObject),
        void 0 !== i.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = i.enableUseHighestVersionResource,
        json2mesh.DefaultSetting.enableUseHighestVersionResource = this.enableUseHighestVersionResource),
        void 0 !== i.enableDownloadSceneJsonCache && (this.enableDownloadSceneJsonCache = i.enableDownloadSceneJsonCache),
        i.startDownloadResourcesCallback && (this.startDownloadResourcesCallback = i.startDownloadResourcesCallback)),
        this.campus && (this.campusRotation && this.campus.node.quaternion.set(this.campusRotation.x, this.campusRotation.y, this.campusRotation.z, this.campusRotation.w),
        this.campusPosition && (this.campus.position = this.campusPosition),
        this.campusScale && (this.campus.scale = this.campusScale)),
        i.default) {
            var o = i.default;
            o.sceneJson && (this.sceneJson = "export.json"),
            o.wallTexture && (this.defaultWallTextureUri = o.wallTexture),
            o.wallEdgeTexture && (this.defaultWallEdgeTextureUri = o.wallEdgeTexture),
            o.floorTexture && (this.defaultFloorTextureUri = o.floorTexture),
            o.ceilingTexture && (this.defaultCeilingTextureUri = o.ceilingTexture),
            o.roofTexture && (this.defaultRoofTextureUri = o.roofTexture)
        }
        n.loaderResourceUrl && (this.resourceUrl = n.loaderResourceUrl),
        void 0 !== this.app.options.enableUseHighestVersionResource && (this.enableUseHighestVersionResource = this.app.options.enableUseHighestVersionResource,
        json2mesh.DefaultSetting.enableUseHighestVersionResource = this.enableUseHighestVersionResource),
        void 0 !== this.app.options.enableBatchObject && this.app.options.enableBatchObject && (json2mesh.DefaultSetting.enableCombinePlacementToBuildMesh = !1,
        this.enableBatchObject = this.app.options.enableBatchObject),
        this.app.options.resourceLibraryUrl && (this.resourceUrl = this.app.options.resourceLibraryUrl),
        this.indexJson.resourceLibrary && (this.relativeResourceUrl = this.indexJson.resourceLibrary),
        this.enableDownloadSceneJsonCache || (this.sceneJsonUri += "?_t=" + (new Date).getTime()),
        this.json2meshToThingjsParser = null,
        this.enableBatchMaxPlacement = !0,
        void 0 !== this.app.options.enableBatchMaxPlacement && (this.enableBatchMaxPlacement = this.app.options.enableBatchMaxPlacement)
    }
    return e.prototype.parseCamInfo = function(e) {
        var t = e.eye
            , i = e.target
            , r = t.split(" ")
            , n = i.split(" ")
            , o = [Number(r[0]), Number(r[1]), Number(r[2])];
        o[2] = -o[2];
        var s = [Number(n[0]), Number(n[1]), Number(n[2])];
        s[2] = -s[2],
        this.app.camera.position = o,
        this.app.camera.target = s
    }
    ,
    e.prototype.load = function(e) {
        var t = this;
        if (t.json2meshToThingjsParser = new rl(t.app),
        t.enableProxima && (t.json2meshToThingjsParser.enableProxima = !0,
        json2mesh.DefaultSetting.enableCombinePlacementsByRoom = !0),
        t.enableBatchObject && (t.json2meshToThingjsParser.enableBatchObject = t.enableBatchObject),
        "String" === e.constructor.name)
            this.sceneURL = e;
        else if ("Object" === e.constructor.name) {
            var i = e;
            this.sceneURL = i.url,
            i.campus && (this.campus = i.campus,
            this.worldNode = this.campus.node,
            this.json2meshToThingjsParser.setCampus(this.campus)),
            i.json && (this.sceneJson = i.json)
        }
        return this.relativeResourceUrl && (0 === this.relativeResourceUrl.indexOf("./") ? this.resourceUrl = this.sceneURL + this.relativeResourceUrl.replace("./", "/") : this.resourceUrl = this.relativeResourceUrl),
        new Promise((function(e, i) {
            t.updateProgress(.1),
            t.loadSceneJson().then((function(i) {
                t.sceneJson || (t.sceneJsonString = i,
                t.sceneJson = JSON.parse(i)),
                t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                t.updateProgress(.1);
                var r = new json2mesh.MixTjsLoader;
                void 0 !== t.app.options.loadingSceneMaxResourcesUnitDownloadNumber && r.setResourcesUnitDownloadNumber(t.app.options.loadingSceneMaxResourcesUnitDownloadNumber),
                void 0 !== t.app.options.loadingSceneAwaitToNextBuildTime && (r.dynamicBuildManager.awaitToNextBuildTime = t.app.options.loadingSceneAwaitToNextBuildTime),
                t.enableDynamicLoad && (r.enableRequestWorld = !1,
                t.json2meshToThingjsParser.enableDynamicLoad = !0),
                t.resourceUrl && (r.resourceManager.baseTextureUrl = t.resourceUrl + "/texture/",
                r.resourceManager.baseModelUrl = t.resourceUrl + "/model/"),
                t.loader = r,
                r.load({
                    json: t.sceneJson,
                    customModeBaseUrl: t.sceneURL + "/",
                    version: 0,
                    enableBatchPlacement: t.enableBatchMaxPlacement
                }).then((function(i) {
                    var n = new Ps;
                    n.parseWorld(i),
                    n.clear(),
                    t.sceneJson.camInfo && t.isCamFitScene && t.parseCamInfo(t.sceneJson.camInfo),
                    t.campus.visible = t.campusVisible,
                    t.campusRotation && t.campus.node.quaternion.set(t.campusRotation.x, t.campusRotation.y, t.campusRotation.z, t.campusRotation.w),
                    t.campusPosition && (t.campus.position = t.campusPosition),
                    t.campusScale && (t.campus.scale = t.campusScale),
                    t.startDownloadResourcesCallback && t.startDownloadResourcesCallback(r.resourceManager.models, r.resourceManager.textures),
                    t.campus = t.json2meshToThingjsParser.parseWorld(i, r.resourceManager),
                    t.enableDynamicLoad ? (t.loadExtraData(t.campus),
                    t.updateProgress(1),
                    e(t.campus)) : r.startToBuild((function(i) {
                        t.updateProgress(.1 + .9 * i),
                        1 === i && (t.updateProgress(1),
                        t.loadExtraData(t.campus),
                        e(t.campus))
                    }
                    ))
                }
                ))
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadExtraData = function(e) {
        this.sceneJson.extraData && (e.extraData = this.sceneJson.extraData)
    }
    ,
    e.prototype.loadSceneJson = function(e) {
        var t = this;
        return e && (t.sceneURL = e),
        new Promise((function(e, i) {
            t.sceneJson ? e(t.sceneJson) : new THREE.FileLoader(t.app.loadingManager).load(t.sceneURL.appendURL(t.sceneJsonUri), (function(t) {
                e(t)
            }
            ))
        }
        ))
    }
    ,
    e.prototype.updateProgress = function(e) {
        this.app.mainUI.updateLoadingProcess({
            object: this.campus,
            progress: e
        })
    }
    ,
    e.prototype.startToDownloadRequestResources = function(e) {
        this.loader.resourceManager.startToDownloadRequestResources(e)
    }
    ,
    e.prototype.addResourceDownloadRequest = function(e) {
        this.loader.resourceManager.addResourceDownloadRequest(e)
    }
    ,
    e.prototype.clearAllResources = function() {
        this.clear()
    }
    ,
    e.prototype.clearAllObjects = function() {
        this.world.clear(),
        this.world = null
    }
    ,
    e.prototype.clear = function() {
        this.loader.clearAllResources(),
        this.json2meshToThingjsParser.clear(),
        this.resourceUrl = null,
        this.relativeResourceUrl = null,
        this.sceneJson = null,
        this.scale = 1,
        this.curFloorPlan = null,
        this.tempTexture = null,
        this.indexJson = null,
        this.sceneJsonUri = null,
        this.defaultWallTextureUri = null,
        this.defaultWallEdgeTextureUri = null,
        this.defaultFloorTextureUri = null,
        this.defaultCeilingTextureUri = null,
        this.defaultRoofTextureUri = null,
        this.defaultWallTexture = null,
        this.defaultCeilingTexture = null,
        this.defaultFloorTexture = null,
        this.defaultRoofTexture = null,
        this.defaultWallEdgeTexture = null,
        this.worldNode = new THREE.Object3D("world"),
        this.isCamFitScene = !0,
        this.campus = null,
        this.outdoorsVisible = !0,
        this.campusVisible = !0,
        this.enableUseHighestVersionResource = !0,
        this.enableDownloadSceneJsonCache = !0,
        this.enableDynamicLoad = !1,
        this.enableProxima = !1,
        this.enableBatchObject = !1
    }
    ,
    e.prototype.requestToBuild = function(e) {
        this.loader.requestToBuild(e)
    }
    ,
    e.prototype.startToBuild = function(e) {
        return this.loader.startToBuild(e)
    }
    ,
    e.prototype.disposeObject = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.loader.disposeObject(e, t)
    }
    ,
    e.prototype.findObjectByID = function(e) {
        return this.world.findObjectByID(e)
    }
    ,
    e
}();
ol = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.supportVersion = {
            1: 1,
            2: 1,
            3: 0
        },
        this.versionLib = {
            1: {
                0: {
                    0: ms
                },
                1: {
                    0: qa
                }
            },
            2: {
                0: {
                    0: ps
                },
                1: {
                    0: ds,
                    1: fs
                }
            },
            3: {
                0: {
                    0: Ga,
                    1: Ga,
                    2: Ga,
                    3: Ga,
                    4: Ga,
                    5: Ga
                },
                1: {
                    0: Xa,
                    2: Xa,
                    3: Xa,
                    4: Xa,
                    5: Xa
                }
            },
            5: {
                0: {
                    0: el,
                    1: el,
                    2: el,
                    3: el,
                    4: el,
                    5: el,
                    6: el
                }
            },
            6: {
                0: {
                    0: tl,
                    1: tl
                }
            },
            7: {
                0: {
                    0: nl
                }
            }
        }
    }
    return e.prototype.getLoader = function(e, t) {
        if (e) {
            var i = e.version
                , r = 0
                , n = 0
                , o = 0;
            if (i) {
                var s = i.split(".");
                r = parseInt(s[0]),
                n = parseInt(s[1]),
                o = parseInt(s[2])
            }
            var a = this._getFitVersion(r, n, o);
            if (!a)
                return void THING.Utils.error("can not load " + i + " data,please check data or update thingjs!");
            a.bigVersion === n && a.smallVersion === o || THING.Utils.warn("can not load " + i + " data,try to use " + r + "." + a.bigVersion + "." + a.smallVersion + " to load data or update thingjs to load " + i + " data");
            var l = this.versionLib[r][a.bigVersion][a.smallVersion];
            if (e.bigVersion = a.bigVersion,
            e.smallVersion = a.smallVersion,
            1 === r)
                h = new l(this.app);
            else if (2 === r)
                switch (n) {
                case 1:
                    var u = {}
                        , c = e.position;
                    c && (u.position = c),
                    e.rotation && (u.rotation = e.rotation),
                    e.campus && (u.campus = e.campus),
                    u.isCamFitScene = Utils.parseValue(e.isCamFitScene, !0),
                    u.isDelayLoadFloorPlan = Utils.parseValue(e.isDelayLoadFloorPlan, !1),
                    h = new l(this.app,u);
                    break;
                default:
                    h = new l(this.app)
                }
            else
                h = new l(this.app,e,t);
            return h
        }
        var h = new ms(this.app);
        return h
    }
    ,
    e.prototype._getFitVersion = function(e, t, i) {
        if (!this.versionLib[e])
            return null;
        var r = this.versionLib[e]
            , n = r[t];
        return n || (n = r[t = this._getClosestVersion(t, r)]) ? (n[i] || (i = this._getClosestVersion(i, n)),
        n[i] ? {
            bigVersion: t,
            smallVersion: i
        } : null) : null
    }
    ,
    e.prototype._getClosestVersion = function(e, t) {
        for (var i = null; null == i; ) {
            if (e < 0)
                return;
            t[--e] && (i = e)
        }
        return i
    }
    ,
    e
}();
sl = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e._processUrl = function(e, t) {
        var i = [];
        if (Utils.isArray(t))
            for (var r = 0; r < t.length; r++) {
                var n = t[r];
                0 == n.indexOf("/") && e ? i.push(e + n) : -1 === n.indexOf("http://") && -1 === n.indexOf("https://") || i.push(n)
            }
        else
            Utils.isString(t) && (e && t.indexOf("/") ? i = e + t : -1 === t.indexOf("http://") && -1 === t.indexOf("https://") || (i = t));
        return i
    }
    ,
    e.generateEnvMapUrl = function(t, i, r) {
        var n = void 0;
        if (Utils.isArray(i) || Utils.isString(i)) {
            var o = t.confirmURL(Utils.parseCubeTextureUrls_v2(i));
            n = (Utils.isArray(o) && o.length,
            o)
        } else if (Utils.isObject(i)) {
            var s = t.confirmURL(Utils.parseCubeTextureUrls_v2(i))
                , a = !1;
            Utils.isArray(s) ? a = !!s.filter((function(e) {
                return -1 !== e.indexOf("http://") || -1 !== e.indexOf("https://")
            }
            )).length : Utils.isString(s) && (a = !(-1 === s.indexOf("http://") && -1 === s.indexOf("https://"))),
            a || (r || (r = t.query(".Campus")[0]),
            Utils.isObject(r) && (s = e._processUrl(r.url, s))),
            n = s
        }
        return n
    }
    ,
    e._generateSkyBoxUrl = function(t, i, r) {
        var n = void 0;
        if (Utils.isArray(i) || Utils.isString(i))
            n = t.confirmURL(Utils.parseCubeTextureUrls_v2(i));
        else if (Utils.isObject(i)) {
            var o = t.confirmURL(Utils.parseCubeTextureUrls_v2(i))
                , s = !1;
            Utils.isArray(o) ? s = !!o.filter((function(e) {
                return -1 !== e.indexOf("http://") || -1 !== e.indexOf("https://")
            }
            )).length : Utils.isString(o) && (s = !(-1 === o.indexOf("http://") && -1 === o.indexOf("https://"))),
            s || (r || (r = t.query(".Campus")[0]),
            Utils.isObject(r) && (o = e._processUrl(r.url, o))),
            n = o
        }
        return n
    }
    ,
    e.parseLight = function(e, t) {
        Utils.isObject(e) && Utils.isObject(t) && (e.lighting = t,
        t.shadowObjectMaxSize && (e.query(".LightGroup")[0].shadowObjectMaxSize = t.shadowObjectMaxSize))
    }
    ,
    e.parsePostEffect = function(e, t) {
        if (Utils.isObject(e) && Utils.isObject(t)) {
            var i = t.vignette;
            if (i && i.enable) {
                i.enable = !1;
                var r = i.type;
                "blur" === r ? t.blurEdge = {
                    enable: !0,
                    offset: i.offset
                } : "color" === r && (t.vignetting = {
                    enable: !0,
                    offset: i.offset,
                    color: i.color
                })
            }
            var n = {
                postEffect: t
            };
            e.postEffect = n
        }
    }
    ,
    e.parseSkyBox = function(t, i, r) {
        if (Utils.isObject(t) && i) {
            var n = e._generateSkyBoxUrl(t, i, r);
            n && (t.skyBox = n)
        }
    }
    ,
    e.parseBackground = function(t, i, r) {
        Utils.isObject(t) && i && !e.isBackgroundSetted(t) && (t.background = i.background,
        (Utils.isNumber(i.background) || i.background) && t.trigger("skyboxchange", {
            skyBox: null
        }))
    }
    ,
    e.parseEnvMapBeforeLoadCampus = function(e, t, i, r) {
        if (Utils.isObject(e) && t && Utils.isObject(i) && (r || (r = e.query(".Campus")[0]),
        Utils.isObject(r))) {
            var n = new Qi(e);
            r._envMapResources = n.load(t, i.resourceLibrary)
        }
    }
    ,
    e.parseEnvMapAfterLoadCampus = function(e, t) {
        if (Utils.isObject(e)) {
            if (!t)
                t = e.query(".Campus")[0];
            if (Utils.isObject(t))
                (t._envMapResources || t.getEnvMapResources()) && t.query("*").forEach((function(e) {
                    e.setupEnvMap(e.isFacade)
                }
                ))
        }
    }
    ,
    e.parseCameraConfig = function(e, t) {
        if (Utils.isObject(e) && Utils.isObject(t))
            for (var i in t)
                t[i] && (e.camera[i] = t[i])
    }
    ,
    e.getOutdoorsEnv = function(t, i) {
        return t.options && (t.options.env || null === t.options.env) ? t.options.env : e.isSkyBoxSetted(t) ? t.options.userParameters.skyBox : t.skyBox && "Dark" !== t.skyBox ? t.skyBox : i.environment ? i.environment : null
    }
    ,
    e.getIndoorsEnv = function(e, t) {
        return t.environmentInside ? t.environmentInside : null
    }
    ,
    e.getSkyBox = function(t, i) {
        var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (e.isSkyBoxSetted(t)) {
            var n = t.options.userParameters;
            return n.skyBox
        }
        return "Dark" === t.skyBox && i.skybox || r ? i.skybox : null
    }
    ,
    e.isSkyBoxSetted = function(e) {
        return !!(e.options && e.options.userParameters && e.options.userParameters.skyBox)
    }
    ,
    e.isBackgroundSetted = function(e) {
        return !!(e.options && e.options.userParameters && e.options.userParameters.background)
    }
    ,
    e
}();
TjsConfigParse = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.parse = function(t, i, r, n) {
        if (Utils.isObject(t) && Utils.isObject(i) && Utils.isObject(r) && Utils.isObject(n) && (e.config = n._effectConfig = Utils.cloneObject(i, !1),
        e.indexJson = Utils.cloneObject(r, !1),
        e.enableParse)) {
            if (i.theme && THING.ThemeLoader) {
                var o = n.url.appendURL(i.theme.slice(2));
                t.on("load", (function() {
                    t.loadBundle(o, {
                        campus: n,
                        name: "default"
                    })
                }
                ))
            } else {
                if (sl.parseLight(t, i.light),
                sl.parsePostEffect(t, i.post),
                !r.skipEnvMap) {
                    var s = []
                        , a = sl.getOutdoorsEnv(t, i);
                    if (a) {
                        var l = sl.generateEnvMapUrl(t, a, n);
                        Utils.isArray(l) && l.length <= 2 ? s = l : s[0] = l
                    }
                    if (!e.skipInDoorEnvMap && s.length < 2) {
                        var u = sl.getIndoorsEnv(t, i);
                        if (u) {
                            var c = sl.generateEnvMapUrl(t, u, n);
                            s[1] = c
                        }
                    }
                    null !== a && sl.parseEnvMapBeforeLoadCampus(t, s, r, n)
                }
                sl.parseBackground(t, i)
            }
            if (!r.skipSkyBox) {
                var h = sl.getSkyBox(t, i);
                sl.parseSkyBox(t, h, n)
            }
            e.enableCameraParse && sl.parseCameraConfig(t, i.camera)
        }
    }
    ,
    e.parseAfterLoad = function(t) {
        var i = t.app
            , r = (t.loadSkyBox,
        t.target)
            , n = e.config
            , o = e.indexJson;
        Utils.isObject(i) && Utils.isObject(n) && Utils.isObject(o) && e.skipEnvMap && sl.parseEnvMapAfterLoadCampus(i, r)
    }
    ,
    e
}();
TjsConfigParse.KEY = 3,
TjsConfigParse.enableParse = !0,
TjsConfigParse.enableCameraParse = !0,
TjsConfigParse.skipInDoorEnvMap = !0;
var AllConfigParse = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.parse = function(t, i, r, n) {
        if (e.enableParse && Utils.isObject(t) && Utils.isObject(i) && Utils.isObject(r) && Utils.isObject(n)) {
            if (e.config = n._effectConfig = Utils.cloneObject(i, !1),
            e.indexJson = Utils.cloneObject(r, !1),
            i.theme && THING.ThemeLoader) {
                var o = n.url.appendURL(i.theme.slice(2));
                t.on("complete", (function() {
                    t.loadBundle(o, {
                        campus: n,
                        name: "default"
                    })
                }
                ))
            } else {
                if (sl.parseLight(t, i.light),
                sl.parsePostEffect(t, i.effectConfig),
                !r.skipEnvMap) {
                    var s = []
                        , a = sl.getOutdoorsEnv(t, i);
                    if (a) {
                        var l = sl.generateEnvMapUrl(t, a, n);
                        Utils.isArray(l) && l.length <= 2 ? s = l : s[0] = l
                    }
                    if (!e.skipInDoorEnvMap && s.length < 2) {
                        var u = sl.getIndoorsEnv(t, i);
                        if (u) {
                            var c = sl.generateEnvMapUrl(t, u, n);
                            s[1] = c
                        }
                    }
                    null !== a && sl.parseEnvMapBeforeLoadCampus(t, s, r, n)
                }
                if (!r.skipSkyBox) {
                    var h = sl.getSkyBox(t, i);
                    sl.parseSkyBox(t, h, n)
                }
            }
            e.enableCameraParse && sl.parseCameraConfig(t, i.camera)
        }
    }
    ,
    e.parseAfterLoad = function(t) {
        var i = t.app
            , r = t.loadSkyBox
            , n = void 0 !== r && r
            , o = t.target
            , s = e.config
            , a = e.indexJson;
        if (Utils.isObject(i) && Utils.isObject(s) && Utils.isObject(a)) {
            sl.parseEnvMapAfterLoadCampus(i, o);
            var l = sl.getSkyBox(i, s, n);
            sl.parseSkyBox(i, l)
        }
    }
    ,
    e
}();
AllConfigParse.enableParse = !0,
AllConfigParse.enableCameraParse = !0,
AllConfigParse.skipInDoorEnvMap = !1;
var SceneEffectConfigParse = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.parse = function(e, t, i, r) {
        var n = i ? i.version : null;
        if (n) {
            var o = n.split(".")
                , s = parseInt(o[0]);
            5 === s || 6 === s || 7 === s ? AllConfigParse.parse(e, t, i, r) : s === TjsConfigParse.KEY && TjsConfigParse.parse(e, t, i, r)
        }
    }
    ,
    e.parseAfterLoad = function(e) {
        var t = e.app
            , i = e.loadSkyBox
            , r = void 0 !== i && i
            , n = e.target
            , o = TjsConfigParse.indexJson || AllConfigParse.indexJson
            , s = o ? o.version : null;
        if (s) {
            var a = s.split(".")
                , l = parseInt(a[0]);
            5 === l || 6 === l || 7 === l ? AllConfigParse.parseAfterLoad({
                app: t,
                loadSkyBox: r,
                target: n
            }) : l === TjsConfigParse.KEY && TjsConfigParse.parseAfterLoad({
                app: t,
                loadSkyBox: r,
                target: n
            })
        }
    }
    ,
    e
}();
cl = !1
    , hl = void 0
    , CampusLoader = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.waitingLoadCampuses = [],
        this.loadingCampus = !1
    }
    return e.prototype._loadViewPointFile = function(e) {
        var t = this.app.sceneManager
            , i = Utils.parseValue(e.enableDeafultViewPointFile, t.enableDeafultViewPointFile)
            , r = e.defaultViewPointFileName || t.defaultViewPointFileName;
        if (i && r) {
            var n = e.url.appendURL(r)
                , o = this;
            (new THREE.FileLoader).load(n, (function(e) {
                o.app.viewPointManger.loadJSON(e)
            }
            ))
        }
    }
    ,
    e.prototype._runScript = function(e) {
        var t;
        (t = Utils.isString(e) ? e : function(e) {
            return ee ? ee.decodeString(e) : ""
        }(e)) && wt(t)
    }
    ,
    e.prototype.loadFromUBuilder = function(e, t, i, r, n) {
        var o = this
            , s = r.position
            , a = r.rotation || r.angles
            , l = r.scale
            , u = Utils.parseValue(r.outdoorsVisible || r.visible, !0)
            , c = Utils.parseValue(r.campusVisible || r.visible, !0)
            , h = Utils.parseValue(r.isCamFitScene, !0)
            , p = Utils.parseValue(r.isDelayLoadFloorPlan, !1)
            , d = r.splitLoadSpeed
            , f = Utils.parseValue(r.disableCache, !1)
            , m = Utils.parseValue(r.dynamic, !1)
            , g = Utils.parseValue(r.enableProxima, !1)
            , v = Utils.parseValue(r.enableBatchObject, !1)
            , y = Utils.parseValue(r.skipEnvMap, !1)
            , b = Utils.parseValue(r.skipSkyBox, !1)
            , _ = r.onBeforeLoad;
        s && (i.position = s),
        a && (i.rotation = Utils.parseQuaternion(a)),
        l && (i.scale = l),
        void 0 !== u && (i.outdoorsVisible = u),
        void 0 !== c && (i.campusVisible = c),
        i.isCamFitScene = h,
        i.isDelayLoadFloorPlan = p,
        i.enableDownloadSceneJsonCache = !f,
        i.isDynamicLoadScene = Utils.parseValue(m, i.isDynamicLoadScene),
        i.enableDynamicLoadScene = i.isDynamicLoadScene,
        i.enableProxima = Utils.parseValue(g, i.enableProxima),
        i.enableBatchObject = Utils.parseValue(v, i.enableBatchObject),
        i.skipEnvMap = Utils.parseValue(y, i.skipEnvMap),
        i.skipSkyBox = Utils.parseValue(b, i.skipSkyBox);
        var x = new ol(this.app).getLoader(i, r);
        e._builder = x,
        x.loadSpeed = d;
        var E = i.camInfo;
        E && (x.fitCamInfo = E),
        this.app.root._staticEnableFlag.lock(!1, "loadFromUBuilder"),
        e.trigger("beforeloadcampus"),
        x.loadSceneJson(t).then((function(r) {
            var l = JSON.parse(r)
                , u = l.thingjsconfig || {};
            SceneEffectConfigParse.parse(x.app, u, i, e),
            _ && _({
                sceneData: l
            }),
            x.load({
                campus: e,
                json: l,
                url: t
            }).then((function(e) {
                var t = x.sceneJson ? x.sceneJson : i
                    , r = x.sceneJsonString;
                e.setSceneJSONData(t, r),
                e.position = e.position || s,
                e.angles = e.angles || a,
                n && n(),
                o.app.root._staticEnableFlag.unlock("loadFromUBuilder")
            }
            ))
        }
        ))
    }
    ,
    e.prototype.loadFromCampusBuildier = function(e, t, i, r, n) {
        CampusBuilderOnlineLoader.init({
            app: this.app
        }),
        CampusBuilderOnlineLoader.getLoader().load(e, t, i, r, n)
    }
    ,
    e.prototype._loadCampusFinished = function(e, t) {
        e._processModel(),
        this._loadViewPointFile(t),
        this.app._lightGroup.setConfig({}),
        this._removeTypeMap(t),
        THING.Utils.log("ThingJS: " + THING.VERSION)
    }
    ,
    e.prototype._convertOutdoorsToGround = function(e) {
        if (e.outdoors) {
            var t = e.outdoors.node;
            t.userData = {},
            t.removeBySelf();
            var i = e.outdoors.id
                , r = e.outdoors.uuid
                , n = this.app.create({
                type: "Ground",
                id: i,
                uuid: r,
                node: t,
                visible: e.outdoors.visible,
                parent: e.outdoors.parent
            });
            e.outdoors.query("*", !1).not(".CombinedObject").forEach((function(t) {
                e.add(t)
            }
            )),
            e.outdoors.query(".CombinedObject", !1).forEach((function(e) {
                n.add(e)
            }
            )),
            e.outdoors.node = new THREE.Group,
            e.outdoors._children.clear(),
            e.outdoors.destroy(),
            e.outdoors = n
        }
    }
    ,
    e.prototype._loadFinished = function(e, t) {
        var i = this
            , r = t.complete;
        if (t.complete = function(e) {
            e.object._synEffectRefCounts(),
            i._loadCampusFinished(e.object, t),
            r && r.call(e.object, e)
        }
        ,
        i._convertOutdoorsToGround(e),
        e.setupID(t),
        e instanceof Campus ? (t.parent = t.parent || this.app.root,
        e._setup(t)) : e instanceof Buliding && e._setup(t),
        e._originalSceneString) {
            var n = Utils._getStringMD5Code(e._originalSceneString);
            (hl = function(e) {
                var t = te.a;
                if (t) {
                    var i = t.sd5;
                    if (i && -1 === i.indexOf(e))
                        return !1
                }
                return !0
            }(n)) || e.destroy()
        }
    }
    ,
    e.prototype.load = function(e, t) {
        var i = this
            , r = this.app.confirmURL(t.url)
            , n = r.appendURL("index.json");
        Utils.parseValue(t.disableCache, !1) && (n = n.appendRandomSuffix()),
        (t.fileloader || new THREE.FileLoader).load(n, (function(n) {
            var o = JSON.parse(n);
            if (ae) {
                var s = new Version(o.version);
                s.major < 4 || s.major > 4 ? i.waitingLoadCampuses.push({
                    owner: e,
                    url: r,
                    indexJson: o,
                    params: t
                }) : i.loadCampus(e, r, o, t)
            } else
                i.waitingLoadCampuses.push({
                    owner: e,
                    url: r,
                    indexJson: o,
                    params: t
                })
        }
        ), (function() {}
        ), (function() {
            var n = t.error || t.errorCallback;
            n && n({
                url: r
            }),
            new ol(i.app).getLoader().load({
                campus: e,
                url: r
            }).then((function(e) {
                i._loadFinished(e, t)
            }
            ))
        }
        )),
        e.setupParent(t),
        t.skipSetupParent = !0
    }
    ,
    e.prototype._setupTypeMap = function(e) {
        var t = e.typeMap;
        if (t)
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                Utils.addCastType(r.type, r.condition, r.params)
            }
    }
    ,
    e.prototype._removeTypeMap = function(e) {
        var t = e.typeMap;
        if (t)
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                Utils.removeCastType(r.type, r.condition, r.params)
            }
    }
    ,
    e.prototype.loadCampus = function(e, t, i, r) {
        var n = this
            , o = function(e, t) {
            e.trigger("afterload"),
            n._loadFinished(e, t),
            n.loadingCampus = !1,
            e.loaded = !0,
            setTimeout((function() {
                n.app.trigger("campusready", {
                    object: e
                })
            }
            ), 500)
        };
        i.resourceLibrary = r.loadResourceUrl || i.resourceLibrary,
        i.enableUseHighestVersionResource = r.enableUseHighestVersionResource,
        i.startDownloadResourcesCallback = function(e, t) {
            var i = n.app.onLoadModelResourceCallback;
            i && i(e, t)
        }
        ,
        this.loadingCampus = !0,
        json2mesh.DefaultSetting.enableFloorLightMap = Utils.parseValue(r.enableFloorLightMap, !1),
        r.indexJson = i,
        e.trigger(EventType.BeforeLoad, r),
        this.app.loadingProgressBar.prepare(),
        this._setupTypeMap(r),
        e.loading = !0;
        var s = new Version(i.version);
        e._version = s,
        s.major < 4 || s.major > 4 ? this.loadFromUBuilder(e, t, i, r, (function() {
            o(e, r)
        }
        )) : this.loadFromCampusBuildier(e, t, i, r, (function() {
            o(e, r)
        }
        ))
    }
    ,
    e.prototype.update = function() {
        if (ae && !this.loadingCampus)
            if (we = we || _TextKeyEncoder.toStr([96, 201, 170, 234, 66, 62, 13, 241, 82, 4, 65, 42, 195, 156, 129, 103, 23, 224, 109, 153, 106]),
            THING[we] || fe) {
                for (var e = 0; e < this.waitingLoadCampuses.length; e++) {
                    var t = this.waitingLoadCampuses[e];
                    this.loadCampus(t.owner, t.url, t.indexJson, t.params),
                    this.waitingLoadCampuses.splice(e, 1)
                }
                void 0 !== hl && (hl ? this.app.trigger("sceneMD5CheckSuccessed") : this.app.trigger("sceneMD5CheckFailed"),
                hl = void 0)
            } else if (!cl) {
                var i = {
                    t: (new Date).toUTCString(),
                    v: Math.random()
                }
                    , r = JSON.stringify(i)
                    , n = {
                    "Content-type": "application/x-www-form-urlencoded"
                }
                    , o = _TextKeyEncoder.toStr([96, 201, 174, 231, 66, 51, 32, 235, 92, 3, 108, 33, 253, 138, 129, 102, 17, 202, 118, 180, 116, 65, 157, 101, 253, 161])
                    , s = THING[o] || {};
                for (var a in s)
                    n[a] = s[a];
                be(r, n),
                cl = !0
            }
    }
    ,
    e.prototype._buildCampusStructure = function(e, t) {
        t.app = this.app,
        t.type = e.type,
        t.name = e.name ? e.name : e.id,
        t.id = e.id ? e.id : e.uuid,
        t.uuid = e.uuid,
        t.userData = e.userData,
        t.children = [],
        t.getAttribute = function(e) {
            return Utils.getAttribute(this, e)
        }
        ,
        t.getPath = function() {
            for (var e = this.id, t = this.parent; t && t.parent && t.parent.parent; )
                e = t.id + "/" + e,
                t = t.parent;
            return e
        }
        ,
        t._traverseObjects = function(e, t) {
            for (var i = 0; i < this.children.length; i++) {
                var r = this.children[i];
                Utils.isFunction(e) ? e(r) : Utils.isArray(e) && e.push(r),
                t && r._traverseObjects(e, t)
            }
        }
        ,
        t.query = function(e) {
            var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                , i = [];
            this._traverseObjects(i, t);
            var r = new Selector(this.app,i);
            return r.select(e),
            r
        }
        ;
        var i = 0;
        e instanceof THING.Floor && (i = 1);
        for (var r = i; r < e.children.length; r++) {
            var n = e.children[r]
                , o = {
                id: n.id,
                parent: t
            };
            t.children.push(o),
            this._buildCampusStructure(n, o)
        }
    }
    ,
    e.prototype._peekJSONBySimpleLoader = function(e, t, i) {
        var r = i.complete
            , n = i.errorCallback || i.error
            , o = this;
        t.load(e).then((function(t) {
            var i = {
                url: e,
                id: t.id,
                children: []
            };
            o._buildCampusStructure(t, i),
            t.destroy(),
            r && r(i)
        }
        )).catch((function(e) {
            THING.Utils.error(e),
            n && n()
        }
        ))
    }
    ,
    e.prototype.peekJSON = function(e, t) {
        t = t || {};
        var i = (e = this.app.confirmURL(e)).appendURL("index.json");
        Utils.parseValue(t.disableCache, !1) && (i = i.appendRandomSuffix());
        var r = t.fileloader || new THREE.FileLoader
            , n = this;
        r.load(i, (function(i) {
            var r = JSON.parse(i)
                , o = new Version(r.version);
            4 == o.major || (3 == o.major ? n._peekJSONBySimpleLoader(e, new ss(n.app), t) : n._peekJSONBySimpleLoader(e, new os(n.app), t))
        }
        ), (function() {}
        ), (function() {
            n._peekJSONBySimpleLoader(e, new os(n.app), t)
        }
        ))
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    e
}();
Building = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._graph = null,
        n._expanded = !1,
        n._structShow = !1,
        n
    }
    return o(t, e),
    t.prototype._canAcceptMouseEvent = function(e) {
        var t = e.type;
        return !!D[t]
    }
    ,
    t.prototype.canAcceptEvent = function(t) {
        if (e.prototype.canAcceptEvent.call(this, t))
            return this;
        var i = t.object;
        if (i && i.isChildOf(this)) {
            if (i.isFloor && this._canAcceptMouseEvent(t))
                return this;
            if (i.isFacade && this._canAcceptMouseEvent(t))
                return this;
            if (i.parent) {
                if (i.parent.isFloor && this._canAcceptMouseEvent(t))
                    return this;
                if (i.parent.isFacade && this._canAcceptMouseEvent(t))
                    return this
            }
        }
        return null
    }
    ,
    t.prototype._addFromCampus = function(e) {
        if (e.buildings.length) {
            this.floors.destroy();
            var t = e.buildings[0].floors
                , i = this;
            t.forEach((function(e) {
                i.add(e)
            }
            ))
        }
    }
    ,
    t.prototype.loadResource = function() {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        t ? e.prototype.loadResource.call(this, t) : this.floors.forEach((function(e) {
            e.loadResource(!1)
        }
        ))
    }
    ,
    t.prototype.unloadResource = function() {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        t ? e.prototype.unloadResource.call(this, t) : this.floors.forEach((function(e) {
            e.unloadResource()
        }
        ))
    }
    ,
    t.prototype.setupElevators = function() {
        var e = {};
        for (var t in this.query(".ElevatorDoor").forEach((function(t) {
            var i = t.userData._ELEVATOR_;
            e[i] || (e[i] = []),
            e[i].push(t)
        }
        )),
        e) {
            var i = e[t];
            this.app.create({
                type: "Elevator",
                name: t,
                parent: this,
                doors: i
            })
        }
    }
    ,
    t.prototype.setupStairs = function() {
        this.query("[type=stairway]").forEach((function(e) {
            e.floorNode.visible = !1
        }
        ));
        var e = {};
        for (var t in this.query(".StairDoor").forEach((function(t) {
            var i = t.userData._STAIR_;
            e[i] = e[i] || [],
            e[i].push(t)
        }
        )),
        e) {
            var i = e[t];
            this.app.create({
                type: "Stair",
                name: t,
                parent: this,
                doors: i
            })
        }
    }
    ,
    t.prototype.canNavigation = function() {
        return !0
    }
    ,
    t.prototype.customSetup = function(e) {
        this._structShow = Utils.parseValue(e.structShow, this._structShow)
    }
    ,
    t.prototype.setupNavigationObjects = function() {
        this.setupElevators(),
        this.setupStairs()
    }
    ,
    t.prototype.setupGraph = function(e, t) {
        var i = this.floors
            , r = i.indexOf(e.floor);
        i.splice(r, 1);
        var n = i.indexOf(t.floor);
        i.splice(n, 1);
        var o = {};
        return e.floor._setupNavigationGraph(o, e),
        i.forEach((function(e) {
            e._setupNavigationGraph(o)
        }
        )),
        t.floor._setupNavigationGraph(o, t),
        this._graph = new Graph(o),
        this._graph
    }
    ,
    t.prototype.destroy = function() {
        this._graph = null,
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype.hasAnyFacadesVisible = function() {
        for (var e = this.facades, t = 0; t < e.length; t++)
            if (e[t].visible)
                return !0;
        return !1
    }
    ,
    t.prototype.hasFacades = function() {
        return 0 !== this.facades.length
    }
    ,
    t.prototype.showAllRoofs = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this.floors.forEach((function(t) {
            t.showAllRoofs(e)
        }
        ))
    }
    ,
    t.prototype.expandFloors = function(e) {
        e = e || {},
        this.expandCmd || (this.expandCmd = this.app.commandManager.create({
            type: "ExpandObjects"
        })),
        e.objects = this.floors.objects,
        e.hideRoof = Utils.parseValue(e.hideRoof, !0),
        this.expandCmd.setParam(e),
        this.expandCmd.execute(),
        this._expanded = !0
    }
    ,
    t.prototype.unexpandFloors = function(e) {
        e = e || {},
        this.expandCmd && (e.hideRoof && (e.hideRoof = !e.hideRoof),
        this.expandCmd.setParam(e),
        this.expandCmd.undo(),
        this._expanded = !1)
    }
    ,
    t.prototype.showFacades = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Building] Please use '.facades.visible=true/false' to replace '.showFacades()'"),
        this.facades.visible = e
    }
    ,
    t.prototype.showFloors = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Building] Please use '.floors.visible=true/false' to replace '.showFloors()'"),
        this.floors.visible = e
    }
    ,
    t.prototype.showRoof = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        THING.Utils.warn("[Building] Please use '.showAllRoofs()' to replace '.showRoof()'"),
        this.showAllRoofs(e)
    }
    ,
    _createClass(t, [{
        key: "isBuilding",
        get: function() {
            return !0
        }
    }, {
        key: "structShow",
        get: function() {
            return this._structShow
        }
    }, {
        key: "expanded",
        get: function() {
            return this._expanded
        }
    }, {
        key: "facade",
        get: function() {
            return this.query(".Facade", !1)[0]
        }
    }, {
        key: "facades",
        get: function() {
            return this.query(".Facade", !1)
        }
    }, {
        key: "elevators",
        get: function() {
            return this.query(".Elevator", !1)
        }
    }, {
        key: "stairs",
        get: function() {
            return this.query(".Stair", !1)
        }
    }, {
        key: "floors",
        get: function() {
            return this.query(".Floor", !1)
        }
    }, {
        key: "things",
        get: function() {
            return this.query(".Thing", !1)
        }
    }]),
    t
}(BaseObject);
Room = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._ceilingNode = null,
        n._ceilingObject = null,
        n._roofNode = null,
        n._roofObject = null,
        n._floorNode = null,
        n._floorObject = null,
        n._auxiliaryInfo = null,
        n._textRegion = null,
        n._holes = [],
        n._points = [],
        n
    }
    return o(t, e),
    t.prototype._toPoints = function(e) {
        return e.map((function(e) {
            return e.isVector3 ? e.toArray() : e
        }
        ))
    }
    ,
    t.prototype._toHoles = function(e) {
        return e.map((function(e) {
            return e.map((function(e) {
                return e.isVector3 ? e.toArray() : e
            }
            ))
        }
        ))
    }
    ,
    t.prototype.setup = function(t) {
        var i;
        (e.prototype.setup.call(this, t),
        this._holes = t.holes || [],
        this._points = t.points || [],
        this._holes = this._toHoles(this._holes),
        this._points = this._toPoints(this._points),
        this._ceilingNode = t.ceilingNode || this._ceilingNode,
        this._roofNode = t.roofNode || this._roofNode,
        this._auxiliaryInfo = t.auxiliaryInfo || this._auxiliaryInfo,
        this._floorNode = t.floorNode || this._floorNode,
        t.floorHideByScene && this._floorNode) && ((i = this._floorNode.parent) && (this.app.resourceManager.remove(this._floorNode),
        this._floorNode = new THREE.Group,
        i.add(this._floorNode)));
        t.roofHideByScene && this._roofNode && ((i = this._roofNode.parent) && (this.app.resourceManager.remove(this._roofNode),
        this._roofNode = new THREE.Group,
        i.add(this._roofNode)))
    }
    ,
    t.prototype.setupResources = function(t) {
        e.prototype.setupResources.call(this, t),
        this._ceilingNode = t.ceilingNode || this._ceilingNode,
        this._roofNode = t.roofNode || this._roofNode,
        this._floorNode = t.floorNode || this._floorNode,
        this._ceilingNode && this.ceiling && (this._ceilingNode.visible = this.ceiling.visible,
        this.ceiling.node = this._ceilingNode),
        this._roofNode && this.roof && (this._roofNode.visible = this.roof.visible,
        this.roof.node = this._roofNode),
        this._floorNode && this.plan && (this._floorNode.visible = this.plan.visible,
        this.plan.node = this._floorNode)
    }
    ,
    t.prototype.getFloorMesh = function() {
        var e = this._floorNode;
        if (!e)
            return null;
        var t = e.getMeshes();
        return t.length ? t[0] : null
    }
    ,
    t.prototype.getRoomHeight = function() {
        return 3
    }
    ,
    t.prototype.showGrid = function(t, i, r, n, o) {
        var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : .01;
        e.prototype.showGrid.call(this, t, i, r, n, o, s);
        var a = Utils.parseVector3(this.labelPosition);
        this._grid._setWorldPosition(a, this.static)
    }
    ,
    t.prototype.getLabelPosition = function(e) {
        var t = this.getFloorMesh();
        if (!t)
            return null;
        var i = t.getLabelPosition(e, "xz") || t.getLabelPosition(e, "xy");
        return i ? i.toArray() : null
    }
    ,
    t.prototype.getAvaliablePositions = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
        if (!Utils.isNumber(e))
            return null;
        var r = [];
        if (Utils.isArray(t[0]))
            for (var n = 0; n < e; n++) {
                var o = t[n];
                r.push(o)
            }
        else
            for (n = 0; n < e; n++)
                r.push(t);
        var s = this.getFloorMesh();
        if (!s)
            return null;
        var a = s.getAvaliableLabelPosition(r, "xz", i);
        if (!a || a.length < e) {
            var l = s.getAvaliableLabelPosition(r, "xy", i);
            l && l.length > a.length && (a = l)
        }
        for (n = 0; n < a.length; n++)
            a[n] = a[n].toArray();
        return a
    }
    ,
    t.prototype.getRayCastPosition = function(e) {
        if (!(e = Utils.parseVector3(e)))
            return null;
        var t = this.getFloorMesh();
        if (!t)
            return null;
        var i = t.getRayCastPosition(e);
        return i ? i.toArray() : null
    }
    ,
    t.prototype.getPoints = function(e) {}
    ,
    t.prototype._synTextRegion = function() {
        if (this._textRegion) {
            var e = this._textRegion.position;
            if (this.style._volumeNode) {
                var t = new THREE.Vector3;
                this.style._volumeNode.getWorldPosition(t),
                e[1] = t.y
            } else
                e[1] = this.position[1];
            e[1] += .01,
            this._textRegion.position = e
        }
    }
    ,
    t.prototype.getNavigationMesh = function() {
        var e = this._floorNode;
        if (!e)
            return null;
        if (!this.area)
            return null;
        var t = e.getMeshes();
        return t.length ? t[0] : null
    }
    ,
    t.prototype._getChildVisibles = function() {
        var e = this.children.concat([this.roof, this.ceiling, this.plan])
            , t = [];
        return e.forEach((function(e) {
            e && t.push(e.visible)
        }
        )),
        t
    }
    ,
    t.prototype._onGetChild = function() {
        return this.children.concat([this.roof, this.ceiling, this.plan])
    }
    ,
    t.prototype.setRelativePoints = function(e) {
        e && (this._points = e.slice(0))
    }
    ,
    t.prototype._getLinkableDoors = function() {
        var t = e.prototype._getLinkableDoors.call(this);
        return t.add(this.doors),
        t
    }
    ,
    t.prototype.showCeiling = function(e) {
        THING.Utils.warn("[Room] Please use '.ceiling.visible=true/false' to replace '.showCeiling()'"),
        this.ceiling.visible = e
    }
    ,
    t.prototype.showRoof = function(e) {
        THING.Utils.warn("[Room] Please use '.roof.visible=true/false' to replace '.showRoof()'"),
        this.roof.visible = e
    }
    ,
    t.prototype.showFloor = function(e) {
        THING.Utils.warn("[Room] Please use '.floorNode.visible=true/false' to replace '.showFloor()'"),
        this.floorNode.visible = e
    }
    ,
    t.prototype.showRoof = function(e) {
        THING.Utils.warn("[Room] Please use '.roof.visible=true/false' to replace '.showRoof()'"),
        this.roof.visible = e
    }
    ,
    t.prototype.setFloor = function(e) {
        THING.Utils.warn("[Room] Please use '.floorNode.style.' to replace '.setFloor()'"),
        e = e || {};
        var t = this.floorNode.style
            , i = e.color;
        i && (t.color = i);
        var r = e.opacity;
        r && (t.opacity = r)
    }
    ,
    t.prototype.getAvaliableFloorPos = function(e, t) {
        return THING.Utils.warn("[Room] Please use '.floor.getAvaliablePositions()' to replace '.getAvaliableFloorPos()'"),
        this.getAvaliablePositions(e, t)
    }
    ,
    _createClass(t, [{
        key: "isRoom",
        get: function() {
            return !0
        }
    }, {
        key: "labelPosition",
        get: function() {
            var e = this.getLabelPosition(null);
            if (e)
                return e;
            var t = this._auxiliaryInfo;
            return t && t.center ? t.center.toArray() : null
        }
    }, {
        key: "perimeter",
        get: function() {
            var e = this.points;
            return THING.Math.getPerimeter(e)
        }
    }, {
        key: "area",
        get: function() {
            var e = this.points;
            return THING.Math.getArea(e)
        }
    }, {
        key: "ceiling",
        get: function() {
            return !this._ceilingObject && this._ceilingNode && (this._ceilingObject = new CombinedObject(this.app)._init(this._ceilingNode),
            this._ceilingObject._parent = this),
            this._ceilingObject
        }
    }, {
        key: "roof",
        get: function() {
            return !this._roofObject && this._roofNode && (this._roofObject = new CombinedObject(this.app)._init(this._roofNode),
            this._roofObject._parent = this),
            this._roofObject
        }
    }, {
        key: "plan",
        get: function() {
            this._floorObject || this.getFloorMesh() && (this._floorObject = new CombinedObject(this.app)._init(this.getFloorMesh()),
            this._floorObject._parent = this);
            return this._floorObject
        }
    }, {
        key: "misc",
        get: function() {
            return this.miscObject || (this.miscObject = this.query(".CombinedObject").query("[userData/type=CombineMiscParent]")[0]),
            this.miscObject
        }
    }, {
        key: "floor",
        get: function() {
            return this.parents.query(".Floor")[0]
        }
    }, {
        key: "points",
        get: function() {
            var e, t = this;
            if (this._points.length)
                e = this._points.map((function(e) {
                    return t.selfToWorld(e)
                }
                ));
            else {
                var i = this.getFloorMesh();
                if (!i)
                    return null;
                e = i.getPoints(),
                this.holes.forEach((function(t) {
                    t.forEach((function(t) {
                        for (var i = 0; i < e.length; i++) {
                            var r = e[i];
                            THING.Math.equalsVector(t, r) && e.splice(i--, 1)
                        }
                    }
                    ))
                }
                ))
            }
            for (var r = 0; r < e.length - 1; r++)
                THING.Math.equalsVector(e[r], e[r + 1]) && e.splice(r--, 1);
            return e
        }
    }, {
        key: "things",
        get: function() {
            var e = this.parent;
            if (!e)
                return new Selector(this.app,[]);
            for (var t = [], i = e.things, r = 0; r < i.length; r++) {
                var n = i[r];
                this.getRayCastPosition(n.position) && t.push(n)
            }
            return this._children.forEach((function(e) {
                e.isBatchSubObject && t.push(e)
            }
            )),
            new Selector(this.app,t,!0).buildReturnObject(t).add(this.query(".Thing"))
        }
    }, {
        key: "doors",
        get: function() {
            for (var e = this.floor.doors, t = [], i = 0; i < e.length; i++)
                for (var r = e[i], n = new THREE.Vector3, o = Utils.parseVector3(r.position), s = [Utils.parseVector3(r.forward)], a = 0; a < s.length; a++) {
                    var l = s[a];
                    if (l.multiplyScalar(1),
                    n.addVectors(o, l),
                    this.getRayCastPosition(n) || (l.multiplyScalar(-1),
                    n.addVectors(o, l),
                    this.getRayCastPosition(n))) {
                        t.push(r);
                        break
                    }
                }
            return new Selector(this.app,t).buildReturnObject(t)
        }
    }, {
        key: "textRegion",
        get: function() {
            return this._textRegion || (this._textRegion = this.app.create({
                type: "TextRegion",
                text: this.name,
                parent: this,
                position: this.labelPosition,
                angles: [-90, 0, 0]
            }),
            this._textRegion.translateY(.1),
            this._textRegion.renderOrder = 1),
            this._synTextRegion(),
            this._textRegion
        },
        set: function(e) {
            e ? (this._textRegion = e,
            this._synTextRegion()) : (this._textRegion.destroy(),
            this._textRegion = null)
        }
    }, {
        key: "holes",
        get: function() {
            var e = [];
            if (this._holes) {
                var t = this;
                this._holes.forEach((function(i) {
                    var r = [];
                    i.forEach((function(e) {
                        r.push(t.selfToWorld(e))
                    }
                    )),
                    e.push(r)
                }
                ))
            }
            return e
        }
    }, {
        key: "floorIndex",
        get: function() {
            return THING.Utils.warn("[Room] Please use '.floor.indexOfParent()' to replace '.floorIndex()'"),
            this.floor.indexOfParent()
        }
    }, {
        key: "center",
        get: function() {
            return THING.Utils.warn("[Room] Please use '.labelPosition' to replace '.center' or if you want to use .boundingBox.center to get center of boundingBox?"),
            this.labelPosition
        }
    }, {
        key: "floorNode",
        get: function() {
            return THING.Utils.warn("[Room] Please use '.plan' to replace '.floorNode'"),
            this.plan
        }
    }]),
    t
}(BaseObject);
ml = document.createElement("canvas");
ml.width = 256,
ml.height = 1;
var gl = ml.getContext("2d");
function vl(e, t) {
    var i = gl.createLinearGradient(0, 0, 256, 0);
    for (var r in e)
        i.addColorStop(+r, e[r]);
    gl.fillStyle = i,
    gl.fillRect(0, 0, 256, 1);
    var n = new Uint8Array(gl.getImageData(0, 0, 256, 1).data.buffer);
    return void 0 !== t ? t.image = {
        data: n,
        width: 256,
        height: 1
    } : t = new THREE.DataTexture(n,256,1),
    t.magFilter = t.minFilter = THREE.LinearFilter,
    t.needsUpdate = !0,
    t
}
var yl = new Map
    , bl = new Map
    , _l = new Map
    , xl = new Map
    , El = !1
    , ThemeManager = function() {
    function e() {
        classCallCheck(this, e)
    }
    return e.start = function(e) {
        El || (e.on("update", (function() {
            xl.forEach((function(e) {
                e.forEach((function(e) {
                    return e.matrix.elements[7] -= e.speed
                }
                ))
            }
            ))
        }
        )),
        El = !0)
    }
    ,
    e.register = function(e, t) {
        yl.set(e, t),
        bl.set(e, function(e) {
            var t = {};
            for (var i in e) {
                var r = i.split("-")
                    , n = r[0];
                t[n] || (t[n] = {});
                var o = r[1];
                void 0 === o || t[n][o] || (t[n][o] = {});
                var s = r[2];
                void 0 !== s && (t[n][o][s] = {})
            }
            return t
        }(t.class)),
        _l.set(e, function(e) {
            var t = new Map;
            for (var i in e) {
                var r = e[i].colormap;
                if (r) {
                    var n = void 0;
                    t.has(i) && (n = t.get(i)),
                    t.set(i, vl(r, n))
                }
            }
            return t
        }(t.class)),
        xl.set(e, function(e) {
            var t = new Map;
            for (var i in e) {
                if (e[i].useScrollTex) {
                    var r = e[i].scrollSpeed;
                    r = void 0 !== r ? r : .003,
                    t.set(i, {
                        matrix: new THREE.Matrix3,
                        speed: r
                    })
                }
            }
            return t
        }(t.class))
    }
    ,
    e.findStyle = function(e, t, i) {
        if (!yl.has(e) || !bl.has(e))
            return THING.Utils.warn("StyleManager: style '" + e + "' not registed."),
            null;
        if (i && i._sfStyle) {
            var r = i._sfStyle;
            return {
                style: yl.get(e).class[r],
                colormap: _l.get(e).get(r),
                scroll: xl.get(e).has(r) ? xl.get(e).get(r).matrix : null
            }
        }
        if (t && i) {
            var n = function(e, t, i) {
                var r = t.type
                    , n = "";
                if (!e[r])
                    for (var o in e)
                        THING.Utils.instanceOf(t, o) && (r = o);
                if (!e[r])
                    return "";
                for (var s in e[r]) {
                    var a = t.tags;
                    if ("Facade" === r && t.building && (a = t.building.tags),
                    a.indexOf(s) > -1 && "" !== s) {
                        n = s;
                        break
                    }
                }
                if (!e[r][n])
                    return r;
                for (var l in e[r][n])
                    if (i.name === l)
                        return r + "-" + n + "-" + i.name;
                return r + ("" !== n ? "-" + n : "")
            }(bl.get(e), t, i);
            return {
                style: yl.get(e).class[n],
                colormap: _l.get(e).get(n),
                scroll: xl.get(e).has(n) ? xl.get(e).get(n).matrix : null
            }
        }
        return yl.get(e)
    }
    ,
    e
}();
function Tl(e, t) {
    var i = e.getMatrixFromRoot(t)
        , r = e.geometry;
    if (r && r.isBufferGeometry && !r.getAttribute("uv3")) {
        for (var n = r.getAttribute("position"), o = new THREE.BufferAttribute(new Float32Array(2 * n.count),2), s = new THREE.Vector3, a = -1 / 0, l = 1 / 0, u = 0; u < n.count; u++)
            s.fromArray(n.array, 3 * u).applyMatrix4(i),
            o.array[2 * u + 0] = .5,
            o.array[2 * u + 1] = s.y,
            a = Math.max(a, s.y),
            l = Math.min(l, s.y);
        for (var c = a - l, h = 0; h < n.count; h++)
            o.array[2 * h + 1] = o.array[2 * h + 1] / c;
        r.addAttribute("uv3", o)
    }
}
var BaseStyle = function() {
    function e(t) {
        classCallCheck(this, e),
        this.obj = t,
        this._opacity = null,
        this._color = null,
        this._wireframe = !1,
        this._image = "",
        this._doubleSide = !1,
        this._uvAnimationParams = null,
        this._emissive = null,
        this._emissiveScrollImage = null,
        this._environmentImage = null,
        this._highlight = null,
        this._highlightIntensity = null,
        this._inheritThemeName = null,
        this._themeName = null,
        this._alwaysOnTop = !1,
        this._renderOrder = 0,
        this._defaultOutlineColor = null,
        this._outlineColor = null,
        this._glow = !1,
        this._innerGlow = !1,
        this._focusRegion = !1,
        this._edgeColor = null,
        this._edgeIncludeChildren = !0,
        this._edgeWireframes = new Map,
        this._boundingBoxNode = null,
        this._orientedBoundingBoxNode = null,
        this._axisNode = null,
        this._vertexNormalNode = null,
        this._synStyle = null
    }
    return e.prototype._syn = function() {
        var e = this._synStyle;
        e && (delete this._synStyle,
        e.execute(this.obj))
    }
    ,
    e.prototype._setSynValue = function(e, t) {
        if (!this.obj || !this.obj.app)
            return !1;
        var i = this.obj.dataToRecover;
        return i && (i.style[e] = t),
        !this.obj.loaded && (this._synStyle || (this._synStyle = this.obj.app.commandManager.create({
            type: "SetObjectStyle",
            object: this.obj
        })),
        this._synStyle.setAttribute(e, t),
        !0)
    }
    ,
    e.prototype._getSynValue = function(e) {
        return this._synStyle ? this.obj.loaded ? null : this._synStyle.getAttribute(e) : null
    }
    ,
    e.prototype._traverse = function(e) {
        var t = [];
        this.obj.children.forEach((function(e) {
            t.push(e.node)
        }
        )),
        this.obj.node.traverseBranch((function(i) {
            if (-1 !== t.indexOf(i))
                return !1;
            i.userData.skipStyle || e(i)
        }
        ))
    }
    ,
    e.prototype._onEnter = function() {}
    ,
    e.prototype._onLeave = function() {}
    ,
    e.prototype._changeMaterial = function(e) {
        this._traverse((function(t) {
            if (t.material) {
                var i = t.material;
                Utils.isArray(i) ? t.material = i.map((function(i) {
                    return e(i, t)
                }
                )) : t.material = e(i, t)
            }
        }
        ))
    }
    ,
    e.prototype._cloneAndModifyMaterial = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = arguments[2];
        i = i || function(e) {
            return !t || !(!e._isCloned() || !e._getOriginal())
        }
        ,
        this._changeMaterial((function(t, r) {
            if (i(t))
                return e && e(t._getPrevMaterial(), t, r),
                t;
            var n = t._pushAndCloneSelf();
            return e && e(n._getPrevMaterial(), n, r),
            n
        }
        ))
    }
    ,
    e.prototype.revertMaterial = function() {
        var e = this
            , t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        this._changeMaterial((function(i) {
            var r = t ? i._getOriginal() : i._getPrevMaterial();
            return r ? (Utils.parseValue(THING.needDisposeMaterial, !0) && e.obj.app.materialDisposeManager.push(i),
            r) : (Utils.revertValue(i, "opacity"),
            Utils.revertValue(i, "color"),
            Utils.revertValue(i, "depthTest"),
            Utils.revertValue(i, "depthWrite"),
            Utils.revertValue(i, "onBeforeRender"),
            Utils.revertValue(i, "wireframe"),
            Utils.revertValue(i, "wireframeMap"),
            Utils.revertValue(i, "map"),
            i)
        }
        ))
    }
    ,
    e.prototype._applyMaterial = function(e, t, i) {
        var r = this._getThemeName()
            , n = void 0
            , o = void 0;
        if (r) {
            var s = ThemeManager.findStyle(r, this.obj, i);
            s && s.style && (void 0 === s.style.enable || s.style.enable) && (n = s,
            o = ThemeManager.findStyle(r))
        }
        if (n && n.style.reflection && n.style.reflection.enable) {
            var a = n.style.reflection;
            t.metalness = a.metalness,
            t.roughness = a.roughness,
            t.specularFactor = void 0 !== a.specularFactor ? a.specularFactor : 1
        } else
            t.metalness = e.metalness,
            t.roughness = e.roughness,
            t.specularFactor = 1;
        n && n.style.fresnel ? (t.fresnelPower = n.style.fresnel.power,
        t.fresnelInverse = n.style.fresnel.inverse) : (t.fresnelPower = 0,
        t.fresnelInverse = !1),
        (this._emissiveScrollImage || n && n.style.useScrollTex) && Tl(i, this.obj.node),
        this._applyMaterialOpacity(e, t, n),
        this._applyMaterialColor(e, t, n),
        this._applyMaterialEmissive(e, t, n),
        this._applyMaterialEmissiveScrollImage(e, t, n, o),
        this._applyMaterialImage(e, t, n, o),
        this._applyMaterialEnvironmentImage(e, t, n, o),
        this._highlight && (t.highlightColor.copy(this._highlight),
        t.highlightIntensity = Utils.isNull(this._highlightIntensity) ? .5 : this._highlightIntensity)
    }
    ,
    e.prototype._applyMaterialOpacity = function(e, t, i) {
        var r = void 0;
        r = e.isShaderMaterial && e.uniforms.opacity ? e.uniforms.opacity.value : e.opacity,
        null !== this._opacity && void 0 !== this._opacity && (r *= this._opacity),
        i && void 0 !== i.style.opacity && (r *= i.style.opacity),
        t.isShaderMaterial && t.uniforms.opacity ? t.uniforms.opacity.value = r : t.opacity = r,
        e.alphaTest && (t.alphaTest = r * e.alphaTest);
        var n = t.transparent;
        t.transparent = e.transparent || r < 1,
        t.transparent != n && (t.needsUpdate = !0)
    }
    ,
    e.prototype._applyMaterialColor = function(e, t, i) {
        null !== this._color && void 0 !== this._color ? (t.color && t.color.copy(this._color),
        t.colorMapping && (t.needsUpdate = !0),
        t.colorMapping = null,
        t.colorMappingIntensity = 1) : (t.color && e.color && (i && i.style.color && i.style.color.enable ? t.color.set(i.style.color.value) : t.color.copy(e.color)),
        i && (void 0 === i.style.useColormap || i.style.useColormap) ? (t.colorMapping || (t.needsUpdate = !0),
        t.colorMapping = i.colormap,
        t.colorMappingIntensity = void 0 !== i.style.colormapIntensity ? i.style.colormapIntensity : 1) : (t.colorMapping && (t.needsUpdate = !0),
        t.colorMapping = null,
        t.colorMappingIntensity = 1))
    }
    ,
    e.prototype._applyMaterialEmissive = function(e, t, i) {
        null !== this._emissive && void 0 !== this._emissive ? t.emissive && (t.emissive.copy(this._emissive),
        t.emissiveIntensity = 1) : t.emissive && e.emissive && (i && i.style.useScrollTex ? (t.emissive.set(i.style.scrollColor),
        t.emissiveIntensity = 1) : (t.emissive.copy(e.emissive),
        t.emissiveIntensity = e.emissiveIntensity || 0)),
        i && i.style.colorImage && i.style.colorImage.enable && !i.style.useScrollTex && (t.emissiveIntensity = 0)
    }
    ,
    e.prototype._applyMaterialEmissiveScrollImage = function(e, t, i, r) {
        var n = this.obj.app;
        if (null !== this._emissiveScrollImage && void 0 !== this._emissiveScrollImage)
            void 0 !== t.emissiveMap && (t.emissiveMap || (t.needsUpdate = !0),
            t.emissiveMap = n.resourceManager.loadTexture(this._emissiveScrollImage, (function() {}
            ), {
                repeat: !0,
                premultiplyAlpha: !0
            }),
            t.defines = t.defines || {},
            t.defines.USE_ALPHA_UV3 = !0,
            t.defines.USE_EMISSIVETRANSFORM = !0,
            t.defines.USE_SIDE_EMISSIVE = !0,
            t.uvTransform2 = function(e) {
                Sl || (e.on("update", jl),
                Sl = !0);
                return Cl
            }(n),
            n.rendererManager.autoDirty = !0,
            t.needsUpdate = !0);
        else if (void 0 !== t.emissiveMap && void 0 !== e.emissiveMap)
            if (i && i.style.useScrollTex) {
                t.emissiveMap || (t.needsUpdate = !0);
                var o = i.style.scrollTex;
                r && r.resourcePrefix && (o = r.resourcePrefix.appendURL(i.style.scrollTex)),
                t.emissiveMap = n.resourceManager.loadTexture(o, (function() {}
                ), {
                    repeat: !0,
                    premultiplyAlpha: !0
                }),
                t.defines = t.defines || {},
                t.defines.USE_ALPHA_UV3 = !0,
                t.defines.USE_EMISSIVETRANSFORM = !0,
                t.defines.USE_SIDE_EMISSIVE = !0,
                t.uvTransform2 = i.scroll,
                n.rendererManager.autoDirty = !0,
                t.needsUpdate = !0
            } else
                !!t.emissiveMap != !!e.emissiveMap && (t.needsUpdate = !0),
                t.emissiveMap = e.emissiveMap,
                t.uvTransform2 = null,
                t.defines && (t.defines.USE_ALPHA_UV3 && (delete t.defines.USE_ALPHA_UV3,
                t.needsUpdate = !0),
                t.defines.USE_EMISSIVETRANSFORM && (delete t.defines.USE_EMISSIVETRANSFORM,
                t.needsUpdate = !0),
                t.defines.USE_SIDE_EMISSIVE && (delete t.defines.USE_SIDE_EMISSIVE,
                t.needsUpdate = !0))
    }
    ,
    e.prototype._applyMaterialImage = function(e, t, i, r) {
        var n = this
            , o = this.obj.app;
        if (this._image)
            void 0 !== t.map && (t.map || (t.needsUpdate = !0),
            t.map = this.obj.app.resourceManager.loadTexture(this._image, (function() {
                n.obj && (o.needUpdate = !0)
            }
            ), {
                repeat: !0,
                flipY: !e.map || e.map.flipY
            }));
        else if (void 0 !== t.map && void 0 !== e.map)
            if (i && i.style.image) {
                t.map || (t.needsUpdate = !0);
                var s = i.style.image;
                r && r.resourcePrefix && (s = r.resourcePrefix.appendURL(i.style.image)),
                t.map = this.obj.app.resourceManager.loadTexture(s, (function() {
                    n.obj && (o.needUpdate = !0)
                }
                ), {
                    repeat: !0
                })
            } else
                i && i.style.colorImage && i.style.colorImage.enable ? (t.map || (t.needsUpdate = !0),
                t.map = this.obj.app.resourceManager.textureLoader.loadTextureFromColor(i.style.colorImage.color)) : (!!t.map != !!e.map && (t.needsUpdate = !0),
                t.map = e.map)
    }
    ,
    e.prototype._applyMaterialEnvironmentImage = function(e, t, i, r) {
        var n = this
            , o = this.obj.app;
        if (this._environmentImage)
            void 0 !== t.envMap && (t.needsUpdate = !0,
            Array.isArray(this._environmentImage) ? t.envMap = this.obj.app.resourceManager.loadCubeTexture(this._environmentImage, (function() {
                t.envMapIntensity = 1.3,
                n.obj && (o.needUpdate = !0)
            }
            )) : t.envMap = this.obj.app.resourceManager.loadTexture(this._environmentImage, (function() {
                t.envMapIntensity = 1.3,
                n.obj && (o.needUpdate = !0)
            }
            ), {
                mapping: THREE.EquirectangularReflectionMapping
            }));
        else if (void 0 !== t.envMap && void 0 !== e.envMap)
            if (i && i.style.reflection && i.style.reflection.enable) {
                t.needsUpdate = !0;
                var s = void 0
                    , a = void 0;
                r && void 0 !== r.resourcePrefix && void 0 !== r.enviroment ? r.enviroment.type && "image" === r.enviroment.type ? s = r.resourcePrefix && !r.enviroment.noPrefix ? r.resourcePrefix.appendURL(r.enviroment.value) : r.enviroment.value : a = r.enviroment.type && "skybox" === r.enviroment.type ? r.enviroment.value.map((function(e) {
                    return r.resourcePrefix && !r.enviroment.noPrefix ? r.resourcePrefix.appendURL(e) : e
                }
                )) : [s = r.resourcePrefix ? r.resourcePrefix.appendURL(r.enviroment) : r.enviroment, s, s, s, s, s] : a = [s = o.baseURL.appendURL("/images/reflect1.jpg"), s, s, s, s, s],
                t.envMap = a ? this.obj.app.resourceManager.loadCubeTexture(a, (function() {
                    t.envMapIntensity = 1.5,
                    n.obj && (o.needUpdate = !0)
                }
                )) : this.obj.app.resourceManager.loadTexture(s, (function() {
                    t.envMapIntensity = 1.5,
                    n.obj && (o.needUpdate = !0)
                }
                ), {
                    mapping: THREE.EquirectangularReflectionMapping
                })
            } else
                t.needsUpdate = !0,
                t.envMapIntensity = e.envMapIntensity,
                t.envMap = e.envMap
    }
    ,
    e.prototype._applyTheme = function(e, t) {
        var i = this;
        if (!this._skipApplyTheme) {
            var r = this.obj.app;
            (t || this._themeName !== e) && (this._themeName = e || null,
            this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, t, r) {
                i._applyMaterial(e, t, r)
            }
            )),
            this.removeEdgeWireframe(),
            null == this._themeName ? (this._setEffectRefCounts("smallGlow", !1),
            this._setEffectRefCounts("middleGlow", !1)) : this._traverse((function(e) {
                if (e.geometry) {
                    var t = ThemeManager.findStyle(i._themeName, i.obj, e);
                    if (t) {
                        var n = t.style;
                        if (n && (void 0 === n.enable || n.enable)) {
                            n.glow ? 2 == n.glow ? (r.effectManager.removeEffect(e, "smallGlow"),
                            e._cachedTechnique && e._cachedTechnique.middleGlow ? r.effectManager.setEffect(e, "middleGlow", 1, "skip" == e._cachedTechnique.middleGlow) : r.effectManager.removeEffect(e, "middleGlow")) : (r.effectManager.setEffect(e, "smallGlow"),
                            r.effectManager.removeEffect(e, "middleGlow")) : (r.effectManager.removeEffect(e, "smallGlow"),
                            r.effectManager.removeEffect(e, "middleGlow"));
                            var o = n.wireframe.enable
                                , s = n.wireframe.color
                                , a = n.wireframe.glow
                                , l = void 0 !== n.wireframe.opacity ? n.wireframe.opacity : .99;
                            o && i._setEdgeWireframe(e, a, s, l)
                        }
                    }
                }
            }
            )),
            this.obj.static && this.obj.node._synMatrixWorld(),
            r.needUpdate = !0)
        }
    }
    ,
    e.prototype._getThemeName = function() {
        if (this.obj.isCombinedObject) {
            for (var e = this.obj; e && e.isCombinedObject; )
                e = e.parent;
            return e.style._themeName
        }
        return this._themeName
    }
    ,
    e.prototype.isNeedRevertMaterials = function() {
        return !this.isNeedCloneMaterials()
    }
    ,
    e.prototype.isNeedCloneMaterials = function() {
        return !Utils.isNull(this._opacity) || (!Utils.isNull(this._color) || (!Utils.isNull(this._emissive) || (!Utils.isNull(this._highlight) || (!!this._emissiveScrollImage || (!!this._alwaysOnTop || (!!this._wireframe || (!!this._image || (!!this._environmentImage || (!!this._uvAnimationParams || !!this._getThemeName())))))))))
    }
    ,
    e.prototype.setOpacity = function(e) {
        var t = this
            , i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        Utils.isNumber(e) && (e = THING.Math.clamp(e, 0, 1)),
        Utils.isNull(this._opacity) && Utils.isNull(e) || e != this._opacity && (1 == e && Utils.isNull(this._opacity) || (this._opacity = e,
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            var n = t._getThemeName()
                , o = void 0;
            if (n) {
                var s = ThemeManager.findStyle(n, t.obj, r);
                s && s.style && (void 0 === s.style.enable || s.style.enable) && (o = s)
            }
            t._applyMaterialOpacity(e, i, o)
        }
        ), i),
        this.obj.isCombinedObject ? this.obj.node.traverse((function(e) {
            e.isEdgeWireframe && e.parent && (null !== t._opacity && void 0 !== t._opacity ? e.material.opacity = e.material._initOpacity * t._opacity : e.material.opacity = e.material._initOpacity)
        }
        )) : this._edgeWireframes.forEach((function(e) {
            e.isObject3D && (null !== t._opacity && void 0 !== t._opacity ? e.material.opacity = e.material._initOpacity * t._opacity : e.material.opacity = e.material._initOpacity,
            e.material.transparent = e.material.opacity < 1)
        }
        ))))
    }
    ,
    e.prototype.setColor = function(e) {
        var t = this
            , i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (e) {
            if (!(e = Utils.parseColor(e)))
                return;
            this._color = e
        } else {
            if (!this.color)
                return;
            this._color = null
        }
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            var n = t._getThemeName()
                , o = void 0;
            if (n) {
                var s = ThemeManager.findStyle(n, t.obj, r);
                s && s.style && (void 0 === s.style.enable || s.style.enable) && (o = s)
            }
            t._applyMaterialColor(e, i, o)
        }
        ), i),
        this.obj.isCombinedObject ? this.obj.node.traverse((function(e) {
            e.isEdgeWireframe && e.parent && (null !== t._color && void 0 !== t._color ? e.material.color.copy(t._color) : e.material.color.set(e.material._initColor))
        }
        )) : this._edgeWireframes.forEach((function(e) {
            e.isObject3D && (null !== t._color && void 0 !== t._color ? e.material.color.copy(t._color) : e.material.color.set(e.material._initColor))
        }
        ))
    }
    ,
    e.prototype.setEmissive = function(e) {
        var t = this
            , i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (e) {
            if (!(e = Utils.parseColor(e)))
                return;
            this._emissive = e
        } else {
            if (!this.emissive)
                return;
            this._emissive = null
        }
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            var n = t._getThemeName()
                , o = void 0;
            if (n) {
                var s = ThemeManager.findStyle(n, t.obj, r);
                s && s.style && (void 0 === s.style.enable || s.style.enable) && (o = s)
            }
            t._applyMaterialEmissive(e, i, o)
        }
        ), i)
    }
    ,
    e.prototype.setHighlight = function(e) {
        var t = this
            , i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (e) {
            if (!(e = Utils.parseColor(e)))
                return;
            this._highlight = e
        } else {
            if (!this.highlight)
                return;
            this._highlight = null
        }
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            i.highlightColor && (null !== t._highlight ? (i.highlightColor.copy(t._highlight),
            i.highlightIntensity = Utils.isNull(t._highlightIntensity) ? .5 : t._highlightIntensity) : (e.highlightColor ? i.highlightColor.copy(e.highlightColor) : i.highlightColor.setRGB(0, 0, 0),
            i.highlightIntensity = 0))
        }
        ), i)
    }
    ,
    e.prototype.setHighlightIntensity = function(e) {
        var t = this
            , i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        Utils.isNumber(e) && (e = THING.Math.clamp(e, 0, 1)),
        Utils.isNull(this._highlightIntensity) && Utils.isNull(e) || e != this._highlightIntensity && (.5 == e && Utils.isNull(this._highlightIntensity) || (this._highlightIntensity = e,
        this._highlight && this._cloneAndModifyMaterial((function(e, i, r) {
            void 0 !== i.highlightIntensity && (i.highlightIntensity = Utils.isNull(t._highlightIntensity) ? .5 : t._highlightIntensity)
        }
        ), i)))
    }
    ,
    e.prototype.setEmissiveScrollImage = function(e) {
        var t = this
            , i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (e) {
            if (e = this.obj.app.confirmURL(e),
            this._emissiveScrollImage == e)
                return;
            this._emissiveScrollImage = e
        } else {
            if (!this._emissiveScrollImage)
                return;
            this._emissiveScrollImage = null
        }
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            var n = t._getThemeName()
                , o = void 0
                , s = void 0;
            if (n) {
                var a = ThemeManager.findStyle(n, t.obj, r);
                a && a.style && (void 0 === a.style.enable || a.style.enable) && (o = a,
                s = ThemeManager.findStyle(n))
            }
            Tl(r, t.obj.node),
            t._applyMaterialEmissiveScrollImage(e, i, o, s)
        }
        ), i)
    }
    ,
    e.prototype.setEnvironmentImage = function(e) {
        var t = this;
        if (Utils.isString(e) && (e.indexOf(".png") > -1 || e.indexOf(".jpg") > -1)) {
            if (e = this.obj.app.confirmURL(e),
            this._environmentImage === e)
                return;
            this._environmentImage = e
        } else {
            var i = this.obj.app.confirmURL(Utils.parseCubeTextureUrls(e));
            if (i) {
                if (Array.isArray(this._environmentImage) && this._environmentImage[0] === i[0] && this._environmentImage[1] === i[1] && this._environmentImage[2] === i[2] && this._environmentImage[3] === i[3] && this._environmentImage[4] === i[4] && this._environmentImage[5] === i[5])
                    return;
                this._environmentImage = i
            } else {
                if (!this._environmentImage)
                    return;
                this._environmentImage = null
            }
        }
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            var n = t._getThemeName()
                , o = void 0
                , s = void 0;
            if (n) {
                var a = ThemeManager.findStyle(n, t.obj, r);
                a && a.style && (void 0 === a.style.enable || a.style.enable) && (o = a,
                s = ThemeManager.findStyle(n))
            }
            t._applyMaterialEnvironmentImage(e, i, o, s)
        }
        ))
    }
    ,
    e.prototype.setOutlineColor = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (Utils.isNull(e))
            this._outlineColor && (this._setEffectRefCounts("outline_0x" + this._outlineColor.getHexString(), !1),
            this.obj.node.traverse((function(e) {
                e.layers.disable(1),
                delete e.userData.forceOutline
            }
            )),
            this._outlineColor = null),
            this._defaultOutlineColor && this._setEffectRefCounts("outline_0x" + this._defaultOutlineColor.getHexString(), !0);
        else {
            this._outlineColor && this._setEffectRefCounts("outline_0x" + this._outlineColor.getHexString(), !1);
            e = Utils.parseColor(e);
            this._outlineColor = e,
            this._setEffectRefCounts("outline_0x" + e.getHexString(), !0),
            t && (this.obj.node.ensureParentsVisible(!0),
            this.obj.node.visible = !0),
            this.obj.node.traverse((function(e) {
                (t || e.ensureVisible()) && (e.isSprite || (e.layers.enable(1),
                t && (e.visible = !0,
                e.userData.forceOutline = !0)))
            }
            ))
        }
        this.obj.app.needEffectUpdate = !0
    }
    ,
    e.prototype.setDefaultOutlineColor = function(e) {
        var t = Utils.parseColor(e);
        t ? (this._defaultOutlineColor = t,
        this.outlineColor || this._setEffectRefCounts("outline_0x" + t.getHexString(), !0),
        this.obj.app.needEffectUpdate = !0) : (this._defaultOutlineColor = null,
        this._clearAllOutlineColor(),
        this._outlineColor && (this.outlineColor = this._outlineColor))
    }
    ,
    e.prototype.setSkipBoundingBox = function(e) {
        this.obj.dirty = !0,
        this.obj.node.skipBoundingBox(e),
        this.obj.parents.forEach((function(e) {
            e.boundingBoxControl.dirty = !0
        }
        )),
        this.obj.dirty = !0
    }
    ,
    e.prototype._setNodesAttribute = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        this._traverse((function(r) {
            !r.isRenderable() && i || (r.userData[e] = t)
        }
        ))
    }
    ,
    e.prototype._setAlwaysOnTop = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if ((this.alwaysOnTop != e || t) && this.obj.node.parent)
            if (this._alwaysOnTop = e,
            e) {
                this._cloneAndModifyMaterial((function(e, t, i) {
                    t.transparent = !0
                }
                )),
                Utils.backupValue(this.obj.node, "parent");
                var i = new THREE.MeshStandardMaterial({
                    transparent: !0,
                    opacity: 1e-4
                })
                    , r = new THREE.Mesh(new THREE.Geometry,i);
                r.name = "AlwaysOnTopRootMesh",
                r.frustumCulled = !1,
                r.renderOrder = THING.BaseStyle.cRenderOrderValueMask - 1,
                r.onAfterRender = function(e) {
                    "GBuffer" !== e.materialManager.getMode() && e.clearDepth()
                }
                ,
                this.obj.node.parent.add(r),
                this.obj.node.attachToParent(r, this.obj.app.scene, !0),
                this._traverse((function(e) {
                    e.renderOrder += THING.BaseStyle.cRenderOrderValueMask
                }
                ))
            } else {
                this.isNeedRevertMaterials() ? this.revertMaterial() : this._changeMaterial((function(e, t) {
                    return Utils.revertValue(e, "transparent"),
                    e
                }
                ));
                var n = Utils.getValue(this.obj.node, "parent", !0);
                if (n) {
                    var o = this.obj.node.parent;
                    o.removeBySelf(),
                    n.add(this.obj.node),
                    this._traverse((function(e) {
                        e.renderOrder -= THING.BaseStyle.cRenderOrderValueMask
                    }
                    ))
                }
            }
    }
    ,
    e.prototype.setAlwaysOnTop = function(e) {
        this._setSynValue("alwaysOnTop", e) || this._setAlwaysOnTop(e)
    }
    ,
    e.prototype.setBoundingBox = function(e, t) {
        if (e) {
            if (!this._boundingBoxNode) {
                this.obj.dirty = !0;
                var i = this.obj.getLocalBoundingBox().toBox();
                this._boundingBoxNode = new THREE.Box3Helper(i,16777215),
                this._boundingBoxNode.frustumCulled = !1,
                this._boundingBoxNode.name = this.obj.name + "_BoundingBox",
                this._boundingBoxNode.skipBoundingBox(!0)
            }
            this._boundingBoxNode.material.color = Utils.parseColor(t),
            this.obj.node.add(this._boundingBoxNode),
            this._boundingBoxNode.updateMatrixWorld(),
            this.obj.tickable = !0
        } else
            this.obj.app.resourceManager.remove(this._boundingBoxNode),
            this._boundingBoxNode = null;
        this._boundingBoxNode && (this._boundingBoxNode.visible = e)
    }
    ,
    e.prototype.setOrientedBoundingBox = function(e, t) {
        if (e) {
            if (!this._orientedBoundingBoxNode) {
                this.obj.dirty = !0;
                var i = this.obj.getLocalBoundingBox().toBox();
                this._orientedBoundingBoxNode = new THREE.Box3Helper(i,16777215),
                this._orientedBoundingBoxNode.frustumCulled = !1,
                this._orientedBoundingBoxNode.name = this.obj.name + "_OrientedBoundingBox",
                this._orientedBoundingBoxNode.skipBoundingBox(!0)
            }
            var r = this._orientedBoundingBoxNode.material;
            r.color = Utils.parseColor(t, r.color),
            this.obj.node.add(this._orientedBoundingBoxNode),
            this._orientedBoundingBoxNode.updateMatrixWorld(),
            this.obj.tickable = !0
        } else
            this.obj.app.resourceManager.remove(this._orientedBoundingBoxNode),
            this._orientedBoundingBoxNode = null;
        this._orientedBoundingBoxNode && (this._orientedBoundingBoxNode.visible = e)
    }
    ,
    e.prototype.setVertexNormalHelper = function(e) {
        if (e) {
            this.obj.node.updateMatrixWorld();
            var t = new THREE.Matrix4;
            t.getInverse(this.obj.node.matrixWorld),
            this._vertexNormalNode = new THREE.Group,
            this._vertexNormalNode.name = this.obj.name + "_VertexNormal",
            this._vertexNormalNode.applyMatrix4(t);
            var i = this;
            this.obj.node.traverse((function(e) {
                if (e.isMesh && e.geometry) {
                    var t = new THREE.VertexNormalsHelper(e,1,16711680);
                    i._vertexNormalNode.add(t)
                }
            }
            )),
            this.obj.node.add(this._vertexNormalNode)
        } else
            this.obj.app.resourceManager.remove(this._vertexNormalNode),
            this._vertexNormalNode = null
    }
    ,
    e.prototype.setAxisHelper = function(e) {
        if (e != this.axisHelper)
            if (e) {
                this._axisNode = new THREE.AxesHelper(this.obj.boundingBox.radius),
                this._axisNode.name = this.obj.name + "_Axis";
                var t = this._axisNode.material;
                t.depthTest = !1,
                t.transparent = !0;
                var i = new THREE.Vector3;
                this.obj.node.getWorldScale(i),
                this._axisNode.scale.set(1 / i.x, 1 / i.y, 1 / i.z),
                this._axisNode.skipBoundingBox(!0),
                this.obj.node.add(this._axisNode)
            } else
                this.obj.app.resourceManager.remove(this._axisNode),
                this._axisNode = null
    }
    ,
    e.prototype._setEffectRefCounts = function(e, t, i) {
        var r = this.obj.app.effectManager;
        t ? this._traverse((function(t) {
            t.userData && t.userData.skipOutline && e.indexOf("outline") > -1 || t.isLineSegments || r.setEffect(t, e)
        }
        )) : this._traverse((function(t) {
            !i && t._cachedTechnique && t._cachedTechnique[e] ? r.setEffect(t, e, 1, "skip" == t._cachedTechnique[e]) : r.removeEffect(t, e)
        }
        ))
    }
    ,
    e.prototype._clearAllOutlineColor = function() {
        var e = this.obj.app.effectManager;
        this._traverse((function(t) {
            if (t.technique)
                for (var i in t.technique)
                    t.technique[i] && i.indexOf("outline") > -1 && e.removeEffect(t, i)
        }
        ))
    }
    ,
    e.prototype.setGlow = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this._glow = e,
        this._setEffectRefCounts("middleGlow", e, t)
    }
    ,
    e.prototype.setInnerGlow = function(e, t) {
        this._innerGlow = e,
        this._setEffectRefCounts("innerGlow", e, t)
    }
    ,
    e.prototype.setLineBloom = function(e) {
        this._lineBloom = e,
        this._setEffectRefCounts("lineBloom", e)
    }
    ,
    e.prototype.setRadialBlur = function(e) {
        this._lineBloom = e,
        this._setEffectRefCounts("radialBlur", e)
    }
    ,
    e.prototype.setRadialBlur2 = function(e) {
        this._lineBloom = e,
        this._setEffectRefCounts("radialBlur2", e)
    }
    ,
    e.prototype.setRadialOffset = function(e) {
        this._lineBloom = e,
        this._setEffectRefCounts("radialOffset", e)
    }
    ,
    e.prototype.setFocusRegion = function(e) {
        this._focusRegion = e,
        this._setEffectRefCounts("focusRegion", e)
    }
    ,
    e.prototype.setEdgeWireframe = function(e) {
        var t = this
            , i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , r = arguments[2];
        this._edgeColor = Utils.parseColor(e),
        this.removeEdgeWireframe(),
        null != e && this._traverse((function(e) {
            t._setEdgeWireframe(e, i, t._edgeColor, r)
        }
        ))
    }
    ,
    e.prototype._setEdgeWireframe = function(e, t, i) {
        var r = this
            , n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
        e.updateMatrixWorld();
        var o = this.obj.app.edgesGeometriesManager.getByObject(e, this.obj);
        if (null !== o)
            if (o.isBufferGeometry)
                this._createEdgeWireframe(o, i, t, n, e);
            else {
                var s = o.then((function(o) {
                    s._break || r._createEdgeWireframe(o, i, t, n, e)
                }
                ));
                s.catch((function(e) {
                    1 === e.code ? THING.Utils.warn(e.msg) : 0 !== e.code && THING.Utils.warn(e)
                }
                )),
                this._edgeWireframes.set(e, s)
            }
    }
    ,
    e.prototype._createEdgeWireframe = function(e, t, i, r, n) {
        var o = new THREE.LineSegments(e);
        return e.isInstancedBufferGeometry && (o.material = new THREE.MeshBasicMaterial({}),
        o.material.defines = o.material.defines || {},
        o.material.defines.INSTANCED = "",
        o.frustumCulled = !1),
        o.name = "wireframeNode" + t + i,
        o.userData.skipStyle = !0,
        o.renderOrder = n.renderOrder + .01,
        o.isEdgeWireframe = !0,
        o.scope = this.obj,
        this._edgeWireframes.set(n, o),
        n.add(o),
        this.obj.static && this.obj.node._synMatrixWorld(),
        o.material._initColor = t,
        null !== this._color && void 0 !== this._color ? o.material.color.copy(this._color) : o.material.color.set(t),
        o.material._initOpacity = r,
        null !== this._opacity && void 0 !== this._opacity ? o.material.opacity = r * this._opacity : o.material.opacity = r,
        o.material.transparent = o.material.opacity < 1,
        i ? this.obj.app.effectManager.setEffect(o, "smallGlow") : this.obj.app.effectManager.removeEffect(o, "smallGlow"),
        o
    }
    ,
    e.prototype.removeEdgeWireframe = function() {
        var e = this;
        this._edgeWireframes.forEach((function(t) {
            t.isObject3D ? (e.obj.app.effectManager.clearAllEffects(t),
            e.obj.app.resourceManager.remove(t)) : t._break = !0
        }
        )),
        this._edgeWireframes.clear()
    }
    ,
    e.prototype.setImage = function(e) {
        var t = this;
        if (e) {
            if (Utils.isString(e)) {
                var i = this.obj.app.confirmURL(e);
                if (this.image == i)
                    return;
                this._image = i
            } else if (e.width && e.height) {
                if (this.image == e)
                    return;
                this._image = e
            }
            if (!this._image)
                return
        } else {
            if (!this.image)
                return;
            this._image = ""
        }
        this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, i, r) {
            var n = t._getThemeName()
                , o = void 0
                , s = void 0;
            if (n) {
                var a = ThemeManager.findStyle(n, t.obj, r);
                a && a.style && (void 0 === a.style.enable || a.style.enable) && (o = a,
                s = ThemeManager.findStyle(n))
            }
            t._applyMaterialImage(e, i, o, s),
            t._applyMaterialEmissive(e, i, o)
        }
        ))
    }
    ,
    e.prototype.flipOutlineColor = function(e) {
        e = Utils.parseColor(e).getHex();
        var t = this.outlineColor;
        this.outlineColor = t && t == e ? null : e
    }
    ,
    e.prototype.setLightMap = function(e) {
        var t = (e = e || {}).intensity || 0
            , i = Utils.parseColor(e.color, new THREE.Color)
            , r = e.image;
        r && (r = this.obj.app.resourceManager.loadTexture(this.obj.app.confirmURL(r), void 0, {
            anisotropy: 16
        })),
        this._changeMaterial((function(e, n) {
            e.lightMap = r,
            e.lightMapIntensity = t,
            e.color.copy(i),
            e.needsUpdate = !0
        }
        ))
    }
    ,
    e.prototype.setMaterial = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = this;
        if (e) {
            var r = function() {
                e.completeWaitNumber > 0 && --e.completeWaitNumber || (e.complete && e.complete({
                    object: i.obj
                }),
                i.obj && (i.obj.app.needUpdate = !0))
            }
                , n = function(t, n, o) {
                o = o || {};
                var s = Utils.isString(o) ? o : o.url;
                if (s) {
                    e.completeWaitNumber++;
                    var a = (new THREE.TextureLoader).load(i.obj.app.confirmURL(s), (function() {
                        r()
                    }
                    ));
                    if (a.anisotropy = 16,
                    u = Utils.parseWrapType(o.wrap || o.wrapType))
                        a.wrapT = u,
                        a.wrapS = u;
                    else {
                        var l = t[n];
                        l && (a.wrapT = l.wrapT,
                        a.wrapS = l.wrapS)
                    }
                    "emissiveMap" === n && (a.premultiplyAlpha = !0),
                    t[n] = a
                } else
                    null === s && (t[n] = null);
                var u, c = o.texture;
                c ? (t[n] = c,
                (u = Utils.parseWrapType(o.wrap || o.wrapType)) && (c.wrapT = u,
                c.wrapS = u)) : null === c && (t[n] = null)
            }
                , o = function(e, t) {
                var o = Utils.parseColor(t.color);
                o && e.color.copy(o);
                var s = t.image;
                if (s) {
                    t.completeWaitNumber++;
                    var a = new THREE.TextureLoader;
                    a.setCrossOrigin("anonymous"),
                    (s = a.load(i.obj.app.confirmURL(s), (function() {
                        r()
                    }
                    ))).anisotropy = 16;
                    var l = Utils.parseWrapType(t.wrap || t.wrapType);
                    if (l)
                        s.wrapT = l,
                        s.wrapS = l;
                    else {
                        var u = e.map;
                        u && (s.wrapT = u.wrapT,
                        s.wrapS = u.wrapS)
                    }
                    e.map = s
                } else
                    null === s && (e.map = null);
                var c = t.map;
                c ? e.map = c : null === c && (e.map = null),
                n(e, "map", t.diffuseMap),
                n(e, "emissiveMap", t.emissiveMap),
                n(e, "roughnessMap", t.roughnessMap),
                n(e, "roughnessMap", t.roughnessMap),
                n(e, "roughnessMap", t.roughnessMap),
                n(e, "lightMap", t.lightMap),
                n(e, "bumpMap", t.bumpMap),
                n(e, "aoMap", t.aoMap),
                n(e, "alphaMap", t.alphaMap),
                n(e, "displacementMap", t.displacementMap);
                var h = t.envMap;
                h ? e.envMap = i.obj.app.resourceManager.loadCubeTexture(h, (function() {
                    i.obj && (i.obj.app.needUpdate = !0)
                }
                )) : null === h && (e.envMap = null),
                e.envMapIntensity = Utils.parseValue(t.envMapIntensity, e.envMapIntensity);
                var p = t.doubleSide;
                void 0 !== p && (e.side = p ? THREE.DoubleSide : THREE.FrontSide),
                e.blending = Utils.parseBlendingType(t.blending, e.blending),
                e.transparent = Utils.parseValue(t.transparent, e.transparent),
                e.opacity = Utils.parseValue(t.opacity, e.opacity);
                var d = Utils.parseColor(t.emissive);
                e.emissive && d && e.emissive.copy(d),
                e.metalness = Utils.parseValue(t.metalness, e.metalness),
                e.roughness = Utils.parseValue(t.roughness, e.roughness),
                e.depthWrite = Utils.parseValue(t.depthWrite, e.depthWrite),
                e.depthTest = Utils.parseValue(t.depthTest, e.depthTest),
                e.needsUpdate = !0
            };
            e.completeWaitNumber = 0;
            var s = e.index;
            this._cloneAndModifyMaterial((function(t, i, r) {
                s && Utils.isArray(r.material) && r.material.indexOf(i) !== s || o(i, e)
            }
            ), t),
            this._processWithChildFunction("setMaterial", e)
        } else
            this.revertMaterial()
    }
    ,
    e.prototype.setPolygonOffset = function(e) {
        e = e || {};
        var t = Utils.parseValue(e.polygonOffset, !1)
            , i = Utils.parseValue(e.polygonOffsetFactor, 0)
            , r = Utils.parseValue(e.polygonOffsetUnits, 0);
        this._changeMaterial((function(e, n) {
            return e.polygonOffset = t,
            e.polygonOffsetFactor = i,
            e.polygonOffsetUnits = r,
            e
        }
        ))
    }
    ,
    e.prototype.setWireframe = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this._wireframe = e,
        e ? this._cloneAndModifyMaterial((function(e, t, i) {
            Utils.backupValue(t, "wireframe"),
            Utils.backupValue(t, "map"),
            t.wireframe = !0,
            t.map = null,
            t.needsUpdate = !0
        }
        ), t) : this.isNeedRevertMaterials() ? this.revertMaterial() : this._changeMaterial((function(e, t) {
            return Utils.revertValue(e, "wireframe"),
            Utils.revertValue(e, "map"),
            e.needsUpdate = !0,
            e
        }
        ))
    }
    ,
    e.prototype.setRenderOrder = function(t) {
        var i = this;
        this._renderOrder = t || 0,
        this.beforeSetRenderOrder && this.beforeSetRenderOrder(t),
        this.obj._traverseSelfNodes((function(r) {
            r.isGroup || (i._alwaysOnTop ? r.renderOrder = e.cRenderOrderValueMask + t : "model-wall" === r._cls ? r.renderOrder = t + 1e-5 : r.isEdgeWireframe ? r.renderOrder = t + .01 : r.renderOrder = t)
        }
        )),
        this.obj.children.forEach((function(e) {
            e.skipStyle || e.inheritStyle && (e.style.renderOrder = t)
        }
        ))
    }
    ,
    e.prototype._setTextureUVAnimation = function(e) {
        var t = this;
        Utils.setValue(e, "updateMatrix", (function() {
            var i = t._uvAnimationParams
                , r = i.repeat || [1, 1]
                , n = i.center || [0, 0]
                , o = i.offset || [0, 0]
                , s = Utils.parseValue(i.rotation, 0);
            e.matrix.setUvTransform(o[0], o[1], r[0], r[1], s, n[0], n[1])
        }
        ), !0)
    }
    ,
    e.prototype.setUVAnimation = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (this._uvAnimationParams = e,
        this._uvAnimationParams) {
            t && this._cloneAndModifyMaterial((function() {}
            ));
            var i = this._uvAnimationParams;
            i.wrapType = Utils.parseWrapType(i.wrapType),
            i.offset = i.offset || [0, 0],
            i.baseOffset = i.offset.concat();
            var r = Utils.parseValue(i.rotation, 0);
            i.baseRotation = r,
            i.rotation = 0,
            i.offsetSpeed = i.speed || i.offsetSpeed,
            Utils.isNumber(i.offsetSpeed) && (i.offsetSpeed = [i.offsetSpeed, i.offsetSpeed]);
            var n = i.rotationSpeed || i.rotateSpeed;
            n && (i.rotationSpeed = n),
            (r || n) && (i.center = [.5, .5]),
            i.animation = Utils.parseValue(i.animation, !0);
            var o = this
                , s = this.obj.getControl("texAnimControl");
            this.obj.node.traverseTextures((function(e, t, r) {
                "envMap" != t && "colorMapping" != t && (s && s.$hasAnimation(r) || (r.__cloned || ((r = r.clone()).__cloned = !0,
                e[t] = r,
                r.needsUpdate = !0),
                i.wrapType && (Utils.setValue(r, "wrapS", i.wrapType),
                Utils.setValue(r, "wrapT", i.wrapType)),
                o._setTextureUVAnimation(r)))
            }
            )),
            this.obj.tickable = !0
        } else
            this.obj.node.traverseTextures((function(e, t, i) {
                Utils.revertValue(i, "wrapS"),
                Utils.revertValue(i, "wrapT"),
                Utils.revertValue(i, "updateMatrix")
            }
            )),
            this.revertMaterial()
    }
    ,
    e.prototype.getUVAnimation = function() {
        return this._uvAnimationParams
    }
    ,
    e.prototype.hasUVAnimation = function() {
        return !!this._uvAnimationParams
    }
    ,
    e.prototype.update = function(e) {
        var t = this._uvAnimationParams;
        if (t) {
            if (!t.animation)
                return !1;
            var i = t.baseOffset
                , r = t.offsetSpeed;
            i && r && (t.offset[0] += i[0] + e * r[0],
            t.offset[1] += i[1] + e * r[1]);
            var n = t.baseRotation
                , o = t.rotationSpeed;
            return o && (t.rotation += n + e * o),
            !0
        }
        return !1
    }
    ,
    e.prototype._getStyleValue = function(e) {
        var t = this._getSynValue(e);
        return t || this["_" + e]
    }
    ,
    e.prototype._getStyleColorValue = function(e) {
        var t = this._getStyleValue(e);
        return t ? Utils.parseColor(t).toHexString() : null
    }
    ,
    e.prototype._processAppUpdate = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        if (this.obj.visible) {
            var t = this.obj.app;
            e ? t.needUpdate = !0 : t.rendererManager && (t.rendererManager.needUpdate = !0)
        }
    }
    ,
    e.prototype._processWithValue = function(e, t, i) {
        var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
        e.call(this, i);
        var n = this.obj.onReplaceObejcts && this.obj.onReplaceObejcts(t, i);
        if (n && n.length > 0)
            for (var o = 0, s = n.length; o < s; o++) {
                var a = n[o];
                if (a.onProcessStyleValue && !a.onProcessStyleValue(t, i))
                    return;
                a.style[t] = i
            }
        else
            this.obj.children.forEach((function(e) {
                if (e.inheritStyle) {
                    if (e.onProcessStyleValue && !e.onProcessStyleValue(t, i))
                        return;
                    e.style[t] = i
                }
            }
            ));
        this._processAppUpdate(r)
    }
    ,
    e.prototype._processWithChildFunction = function(e, t) {
        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        this.obj.children.forEach((function(i) {
            if (i.inheritStyle) {
                var r = i.style[e];
                Utils.isFunction(r) && r.call(i.style, t)
            }
        }
        )),
        this._processAppUpdate(i)
    }
    ,
    e.prototype.isBaseStyle = function() {
        return !0
    }
    ,
    _createClass(e, [{
        key: "renderOrder",
        set: function(e) {
            this._setSynValue("renderOrder", e) || this._processWithValue(this.setRenderOrder, "renderOrder", e)
        },
        get: function() {
            return this._getStyleValue("renderOrder")
        }
    }, {
        key: "wireframe",
        set: function(e) {
            this._setSynValue("wireframe", e) || this._processWithValue(this.setWireframe, "wireframe", e, !1)
        },
        get: function() {
            return this._getStyleValue("wireframe")
        }
    }, {
        key: "opacity",
        set: function(e) {
            this._setSynValue("opacity", e) || this._processWithValue(this.setOpacity, "opacity", e)
        },
        get: function() {
            var e = this._getStyleValue("opacity");
            return Utils.isNull(e) ? 1 : e
        }
    }, {
        key: "color",
        set: function(e) {
            this._setSynValue("color", e) || this._processWithValue(this.setColor, "color", e, !1)
        },
        get: function() {
            return this._getStyleColorValue("color")
        }
    }, {
        key: "emissive",
        set: function(e) {
            this._setSynValue("emissive", e) || this._processWithValue(this.setEmissive, "emissive", e, !1)
        },
        get: function() {
            return this._getStyleColorValue("emissive")
        }
    }, {
        key: "highlight",
        set: function(e) {
            this._setSynValue("highlight", e) || this._processWithValue(this.setHighlight, "highlight", e, !1)
        },
        get: function() {
            return this._getStyleColorValue("highlight")
        }
    }, {
        key: "highlightIntensity",
        set: function(e) {
            this._setSynValue("highlightIntensity", e) || this._processWithValue(this.setHighlightIntensity, "highlightIntensity", e)
        },
        get: function() {
            var e = this._getStyleValue("highlightIntensity");
            return Utils.isNull(e) ? .5 : e
        }
    }, {
        key: "emissiveScrollImage",
        set: function(e) {
            this._setSynValue("emissiveScrollImage", e) || this._processWithValue(this.setEmissiveScrollImage, "emissiveScrollImage", e, !1)
        },
        get: function() {
            return this._getStyleValue("emissiveScrollImage")
        }
    }, {
        key: "environmentImage",
        set: function(e) {
            this._setSynValue("environmentImage", e) || this._processWithValue(this.setEnvironmentImage, "environmentImage", e, !1)
        },
        get: function() {
            return this._getStyleValue("environmentImage")
        }
    }, {
        key: "roughness",
        set: function(e) {
            this.setMaterial({
                roughness: e
            })
        }
    }, {
        key: "metalness",
        set: function(e) {
            this.setMaterial({
                metalness: e
            })
        }
    }, {
        key: "outlineColor",
        set: function(e) {
            this._setSynValue("outlineColor", e) || this._processWithValue(this.setOutlineColor, "outlineColor", e, !1)
        },
        get: function() {
            return this._getStyleColorValue("outlineColor")
        }
    }, {
        key: "defaultOutlineColor",
        set: function(e) {
            this._processWithValue(this.setDefaultOutlineColor, "defaultOutlineColor", e, !1)
        },
        get: function() {
            return this._getStyleColorValue("defaultOutlineColor")
        }
    }, {
        key: "skipBoundingBox",
        set: function(e) {
            this.setSkipBoundingBox(e)
        }
    }, {
        key: "skipOutline",
        set: function(e) {
            this._setNodesAttribute("skipOutline", e, !0),
            e && (this._outlineColor = null,
            this._defaultOutlineColor = null,
            this._clearAllOutlineColor())
        }
    }, {
        key: "skipStyle",
        set: function(e) {
            this.obj.node.traverse((function(t) {
                t.isRenderable() && (t.userData.skipStyle = e)
            }
            ))
        }
    }, {
        key: "skipEnvMap",
        set: function(e) {
            this._setNodesAttribute("skipEnvMap", e)
        }
    }, {
        key: "glow",
        set: function(e) {
            this._processWithValue(this.setGlow, "glow", e, !1)
        },
        get: function() {
            return this._getStyleValue("glow")
        }
    }, {
        key: "innerGlow",
        set: function(e) {
            this._processWithValue(this.setInnerGlow, "innerGlow", e, !1)
        },
        get: function() {
            return this._getStyleValue("innerGlow")
        }
    }, {
        key: "lineBloom",
        set: function(e) {
            this._processWithValue(this.setLineBloom, "lineBloom", e, !1)
        },
        get: function() {
            return this._getStyleValue("lineBloom")
        }
    }, {
        key: "radialBlur",
        set: function(e) {
            this._processWithValue(this.setRadialBlur, "radialBlur", e, !1)
        },
        get: function() {
            return this._getStyleValue("radialBlur")
        }
    }, {
        key: "radialBlur2",
        set: function(e) {
            this._processWithValue(this.setRadialBlur2, "radialBlur2", e, !1)
        },
        get: function() {
            return this._getStyleValue("radialBlur2")
        }
    }, {
        key: "radialOffset",
        set: function(e) {
            this._processWithValue(this.setRadialOffset, "radialOffset", e, !1)
        },
        get: function() {
            return this._getStyleValue("radialOffset")
        }
    }, {
        key: "focusRegion",
        set: function(e) {
            this._processWithValue(this.setFocusRegion, "focusRegion", e, !1)
        },
        get: function() {
            return this._getStyleValue("focusRegion")
        }
    }, {
        key: "vertexNormalHelper",
        set: function(e) {
            this._processWithValue(this.setVertexNormalHelper, "vertexNormalHelper", e)
        },
        get: function() {
            return this._getStyleValue("vertexNormalHelper")
        }
    }, {
        key: "axisHelper",
        set: function(e) {
            this._processWithValue(this.setAxisHelper, "axisHelper", e)
        },
        get: function() {
            return !!this._axisNode && this._axisNode.visible
        }
    }, {
        key: "edgeColor",
        set: function(e) {
            this._processWithValue(this.setEdgeWireframe, "edgeColor", e, !1)
        },
        get: function() {
            return this._getStyleColorValue("edgeColor")
        }
    }, {
        key: "boundingBox",
        set: function(e) {
            this.setBoundingBox(e, 16777215)
        },
        get: function() {
            return !!this._boundingBoxNode && this._boundingBoxNode.visible
        }
    }, {
        key: "boundingBoxColor",
        set: function(e) {
            this.setBoundingBox(!0, e)
        },
        get: function() {
            return this._boundingBoxNode ? this._boundingBoxNode.material.color.toHexString() : 0
        }
    }, {
        key: "orientedBoundingBox",
        set: function(e) {
            this.setOrientedBoundingBox(e)
        },
        get: function() {
            return !!this._orientedBoundingBoxNode && this._orientedBoundingBoxNode.visible
        }
    }, {
        key: "orientedBoundingBoxColor",
        set: function(e) {
            this.setOrientedBoundingBox(!0, e)
        },
        get: function() {
            return this._orientedBoundingBoxNode ? this._orientedBoundingBoxNode.material.color.toHexString() : 0
        }
    }, {
        key: "alwaysOnTop",
        set: function(e) {
            this.setAlwaysOnTop(e)
        },
        get: function() {
            return !!this._getStyleValue("alwaysOnTop")
        }
    }, {
        key: "image",
        set: function(e) {
            this.setImage(e)
        },
        get: function() {
            return this._getStyleValue("image")
        }
    }, {
        key: "doubleSide",
        set: function(e) {
            this._doubleSide = e,
            this.setMaterial({
                doubleSide: e
            })
        },
        get: function() {
            return this._getStyleValue("doubleSide")
        }
    }]),
    e
}();
BaseStyle.cRenderOrderValueMask = 1e6;
var Cl = new THREE.Matrix3
    , Sl = !1;
function jl() {
    Cl.elements[7] -= .003
}
var Pl = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t
}(BaseStyle);
Rl = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._textColor = Utils.parseColor("#1e90ff"),
        n._textSize = 26,
        n._textLineWidth = 65536,
        n._textLineHeight = 20,
        n._textType = "Arial",
        n._textAlign = "center",
        n._dropShadow = !0,
        n._dropShadowAlpha = 1,
        n._dropShadowAngle = 45,
        n._dropShadowBlur = 1,
        n._dropShadowColor = Utils.parseColor("#000000"),
        n._dropShadowDistance = 2,
        n._strokeMode = !1,
        n._skipApplyTheme = !0,
        n
    }
    return o(t, e),
    _createClass(t, [{
        key: "scale",
        get: function() {
            return this._scale
        }
    }, {
        key: "fontColor",
        set: function(e) {
            var t = Utils.parseColor(e);
            t.equals(this._textColor) || (this._textColor = t,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._textColor.toHexString()
        }
    }, {
        key: "fontSize",
        set: function(e) {
            e && this._textSize != e && (this._scale = e / 26,
            this._textSize = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._textSize
        }
    }, {
        key: "fontType",
        set: function(e) {
            this._textType != e && (this._textType = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._textType
        }
    }, {
        key: "fontAlign",
        set: function(e) {
            this._textAlign != e && (this._textAlign = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._textAlign
        }
    }, {
        key: "dropShadow",
        set: function(e) {
            this._dropShadow != e && (this._dropShadow = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._dropShadow
        }
    }, {
        key: "dropShadowAlpha",
        set: function(e) {
            this._dropShadowAlpha != e && (this._dropShadowAlpha = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._dropShadowAlpha
        }
    }, {
        key: "dropShadowAngle",
        set: function(e) {
            this._dropShadowAngle != e && (this._dropShadowAngle = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._dropShadowAngle
        }
    }, {
        key: "dropShadowBlur",
        set: function(e) {
            this._dropShadowBlur != e && (this._dropShadowBlur = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._dropShadowBlur
        }
    }, {
        key: "dropShadowColor",
        set: function(e) {
            var t = Utils.parseColor(e);
            t.equals(this._dropShadowBlur) || (this._dropShadowColor = t,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._dropShadowColor.toHexString()
        }
    }, {
        key: "dropShadowDistance",
        set: function(e) {
            this._dropShadowDistance != e && (this._dropShadowDistance = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._dropShadowDistance
        }
    }, {
        key: "textLineWidth",
        set: function(e) {
            this._textLineWidth != e && (this._textLineWidth = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._textLineWidth
        }
    }, {
        key: "textLineHeight",
        set: function(e) {
            this._textLineHeight != e && (this._textLineHeight = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._textLineHeight
        }
    }, {
        key: "strokeMode",
        set: function(e) {
            this._strokeMode != e && (this._strokeMode = e,
            this.obj.refreshTextMesh())
        },
        get: function() {
            return this._strokeMode
        }
    }]),
    t
}(Pl);
TextRegion = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._canvasText = new Re,
        n._text = "",
        n._factor = 16 / 26 * .1,
        n._keepSize = !1,
        n._useSpriteMaterial = !1,
        n._sizeAttenuation = !0,
        n._width = 0,
        n._height = 0,
        n._mesh = null,
        n._disableRefresh = !1,
        n
    }
    return o(t, e),
    t.prototype.isTextRegion = function() {
        return !0
    }
    ,
    t.prototype.createTextMesh = function() {
        var e = this._getCanvas()
            , t = new THREE.Texture(e);
        t.minFilter = THREE.LinearFilter,
        t.magFilter = THREE.LinearFilter,
        t.generateMipmaps = !0,
        t.needsUpdate = !0;
        var i, r = this._getPlanSize(e);
        if (this._useSpriteMaterial) {
            var n = new THREE.SpriteMaterial({
                map: t,
                transparent: !0,
                side: THREE.DoubleSide,
                depthWrite: !1
            });
            (i = new THREE.Sprite(n)).scale.set(r, r, 1)
        } else {
            var o = new THREE.PlaneGeometry(r,r);
            n = new THREE.MeshBasicMaterial({
                map: t,
                transparent: !0,
                side: THREE.DoubleSide,
                depthWrite: !1
            });
            i = new THREE.Mesh(o,n)
        }
        return i.userData.skipBoundingBox = !0,
        i.userData.skipOutline = !0,
        i.userData.skipEnvMap = !0,
        i.userData.noBlending = !0,
        i.technique = i.technique || {},
        i.technique.glow = "skip",
        i
    }
    ,
    t.prototype._getPlanSize = function(e) {
        return Math.max(e.width, e.height) * this._factor
    }
    ,
    t.prototype._getCanvas = function() {
        var e = this.style;
        return this._canvasText.createCanvas(this._text, {
            fontType: e.fontType,
            alignMode: e.fontAlign,
            fontSize: e.fontSize,
            fontColor: e.fontColor,
            textLineWidth: e.textLineWidth,
            textLineHeight: e.textLineHeight,
            strokeMode: e.strokeMode,
            dropShadow: e.dropShadow,
            dropShadowColor: e.dropShadowColor,
            dropShadowAngle: e.dropShadowAngle,
            dropShadowDistance: e.dropShadowDistance,
            scale: e.scale,
            dropShadowBlur: e.dropShadowBlur,
            dropShadowAlpha: e.dropShadowAlpha
        })
    }
    ,
    t.prototype.refreshTextMesh = function() {
        if (!this._disableRefresh) {
            var e = 0;
            this._mesh && (e = this._mesh.renderOrder),
            this.app.resourceManager.remove(this._mesh),
            this._mesh = this.createTextMesh(),
            this._mesh.renderOrder = e,
            this.node.add(this._mesh),
            this.static && this.node._synMatrixWorld();
            var t = this.getControl("TextRegionSizeAdjustmentControl");
            t && (t.node = this._mesh),
            this.synSize()
        }
    }
    ,
    t.prototype._beforeSetupStyle = function(e) {
        (e.style || {}).opacity || (this._disableRefresh = !0)
    }
    ,
    t.prototype._afterSetupStyle = function(e) {
        this._disableRefresh && (this._disableRefresh = !1,
        this.refreshTextMesh())
    }
    ,
    t.prototype.setupStyle = function(t) {
        this._sizeAttenuation = Utils.parseValue(t.sizeAttenuation, !0),
        this.loaded = !1,
        this._disableRefresh = !0,
        t.style = t.style || {};
        var i = t.style;
        i.fontColor = Utils.parseColor(t.textColor || t.fontColor || i.fontColor),
        i.fontSize = t.textSize || t.fontSize || i.fontSize,
        i.fontType = t.textType || t.fontType || i.fontType,
        i.textLineWidth = t.textLineWidth || t.fontLineWidth || i.textLineWidth,
        i.textLineHeight = t.textLineHeight || t.fontLineHeight || i.textLineHeight,
        i.strokeMode = t.storkeMode || i.strokeMode,
        this._text = t.text || t.fontText || this._text,
        this._factor = t.factor || this._factor,
        this._useSpriteMaterial = Utils.parseValue(t.useSpriteMaterial, !1),
        this._width = Utils.parseValue(t.width, this._width),
        this._height = Utils.parseValue(t.height, this._height),
        this.node.skipBoundingBox(!0),
        e.prototype.setupStyle.call(this, t),
        this.loaded = !0
    }
    ,
    t.prototype.synSize = function() {
        var e = this._mesh;
        e && this._width && this._height && (e.scale.set(this._width, this._height, 1),
        this.synIndependentWorldScale())
    }
    ,
    _createClass(t, [{
        key: "sizeAttenuation",
        get: function() {
            return this._sizeAttenuation
        }
    }, {
        key: "text",
        set: function(e) {
            this._text = e,
            this.refreshTextMesh()
        },
        get: function() {
            return this._text
        }
    }, {
        key: "keepSize",
        set: function(e) {
            if (this._keepSize != e)
                if (this._keepSize = e,
                e) {
                    var t = Utils.parseVector3(this.app.camera.position)
                        , i = 60 / this._mesh.getDistanceFromCamera(t);
                    this._useSpriteMaterial && (i *= this._mesh.scale.x);
                    var r = this._sizeAttenuation ? 60 : 960
                        , n = this._sizeAttenuation ? [i, i] : [this._width, this._height];
                    this.addControl(new SizeAdjustmentControl(n,this._mesh,r), "TextRegionSizeAdjustmentControl"),
                    this.synSize()
                } else
                    this.removeControl("TextRegionSizeAdjustmentControl")
        },
        get: function() {
            return this._keepSize
        }
    }, {
        key: "width",
        set: function(e) {
            this._width = e,
            this.synSize()
        },
        get: function() {
            return this._width
        }
    }, {
        key: "height",
        set: function(e) {
            this._height = e,
            this.synSize()
        },
        get: function() {
            return this._height
        }
    }, {
        key: "style",
        get: function() {
            return e.prototype._getStyle.call(this)
        },
        set: function(t) {
            e.prototype._setStyle.call(this, t)
        }
    }, {
        key: "textColor",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.fontColor" to replace ".fontColor"'),
            this.style.fontColor = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.fontColor" to replace ".fontColor"'),
            this.style.fontColor
        }
    }, {
        key: "dropShadow",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.dropShadow" to replace ".dropShadow"'),
            this.style.dropShadow = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.dropShadow" to replace ".dropShadow"'),
            this.style.dropShadow
        }
    }, {
        key: "dropShadowAlpha",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.dropShadowAlpha" to replace ".dropShadowAlpha"'),
            this.style.dropShadowAlpha = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.dropShadowAlpha" to replace ".dropShadowAlpha"'),
            this.style.dropShadowAlpha
        }
    }, {
        key: "dropShadowAngle",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.dropShadowAngle" to replace ".dropShadowAngle"'),
            this.style.dropShadowAngle = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.dropShadowAngle" to replace ".dropShadowAngle"'),
            this.style.dropShadowAngle
        }
    }, {
        key: "dropShadowBlur",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.dropShadowBlur" to replace ".dropShadowBlur"'),
            this.style.dropShadowBlur = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.dropShadowBlur" to replace ".dropShadowBlur"'),
            this.style.dropShadowBlur
        }
    }, {
        key: "dropShadowColor",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.dropShadowColor" to replace ".dropShadowColor"'),
            this.style.dropShadowColor = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.dropShadowColor" to replace ".dropShadowColor"'),
            this.style.dropShadowColor
        }
    }, {
        key: "dropShadowDistance",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.dropShadowDistance" to replace ".dropShadowDistance"'),
            this.style.dropShadowDistance = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.dropShadowDistance" to replace ".dropShadowDistance"'),
            this.style.dropShadowDistance
        }
    }, {
        key: "textSize",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.fontSize" to replace ".fontSize"'),
            this.style.fontSize = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.fontSize" to replace ".fontSize"'),
            this.style.fontSize
        }
    }, {
        key: "textLineWidth",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.textLineWidth" to replace ".textLineWidth"'),
            this.style.textLineWidth = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.textLineWidth" to replace ".textLineWidth"'),
            this.style.textLineWidth
        }
    }, {
        key: "textLineHeight",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.textLineHeight" to replace ".textLineHeight"'),
            this.style.textLineHeight = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.textLineHeight" to replace ".textLineHeight"'),
            this.style.textLineHeight
        }
    }, {
        key: "strokeMode",
        set: function(e) {
            THING.Utils.warn('[TextRegion]Please use ".style.strokeMode" to replace ".strokeMode"'),
            this.style.strokeMode = e
        },
        get: function() {
            return THING.Utils.warn('[TextRegion]Please use ".style.strokeMode" to replace ".strokeMode"'),
            this.style.strokeMode
        }
    }]),
    t
}(BaseObject);
Al = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._points = [],
        n
    }
    return o(t, e),
    t.prototype._updateByPoints = function() {}
    ,
    t.prototype._createPolygonVertices = function(e) {
        for (var t = [], i = 0; i < this._points.length; i++) {
            var r = this._points[i];
            t.push(new THREE.Vector3(r[0],r[2],r[1]))
        }
        THREE.ShapeUtils.isClockWise(t) || (t = t.reverse());
        var n = []
            , o = THREE.ShapeUtils.triangulateShape(t, []);
        for (i = 0; i < o.length; i++)
            n.push(new THREE.Face3(o[i][0],o[i][1],o[i][2]));
        for (i = 0; i < t.length; i++) {
            var s = t[i];
            if (!e) {
                var a = s.z;
                s.z = s.y,
                s.y = a
            }
        }
        return {
            vertices: t,
            faces: n
        }
    }
    ,
    t.prototype._createPolygonGeometry = function(e, t) {
        var i = new THREE.Geometry;
        return i.vertices = e,
        i.faces = t,
        i.genFaceVertexUVs(),
        i
    }
    ,
    t.prototype.clearPoints = function() {
        this._points = [],
        this._updateByPoints()
    }
    ,
    t.prototype.insertPoint = function(e, t) {
        this._points.splice(e, 0, this.worldToSelf(t)),
        this._updateByPoints()
    }
    ,
    t.prototype.setPoint = function(e, t) {
        return !(e >= this._points.length) && (!!t && (this._points[e] = this.worldToSelf(t),
        this._updateByPoints(),
        !0))
    }
    ,
    t.prototype.getPoint = function(e) {
        if (e >= this._points.length)
            return null;
        var t = this._points[e];
        return this.selfToWorld(t)
    }
    ,
    t.prototype.addPoint = function(e) {
        return this._points.push(this.worldToSelf(e)),
        this._updateByPoints(),
        this._points.length - 1
    }
    ,
    t.prototype._getPoints = function(e, t) {
        this.node.updateWorldMatrix(!0, !1);
        for (var i = [], r = 0; r < e.length; r++) {
            var n = e[r];
            t == SpaceType.Local ? n = this.localToSelf(n) : t == SpaceType.World && (n = this.worldToSelf(n, !this.inheritScale)),
            i.push(n)
        }
        return i
    }
    ,
    t.prototype.getPointsCenterPos = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "world"
            , i = this._getPoints(e, t);
        if (i.length < 2)
            return [0, 0, 0];
        for (var r = 0, n = [!0, !0, !0], o = i[0].concat(), s = 1; s < i.length; s++)
            for (var a = i[s], l = 0; l < 3; l++)
                if (!THING.Math.isFloatEquals(o[l], a[l])) {
                    n[l] = !1;
                    break
                }
        var u = 0
            , c = 1
            , h = 2;
        n[0] ? (u = 1,
        c = 0,
        h = 2) : n[1] ? (u = 0,
        c = 1,
        h = 2) : n[2] && (u = 0,
        c = 2,
        h = 1);
        var p = [];
        for (s = 0; s < i.length; s++) {
            r += (a = i[s])[c],
            p.push([a[u], a[h]])
        }
        var d = new polylabel([p]);
        return n[0] ? [r / i.length, d[0], d[1]] : n[1] ? [d[0], r / i.length, d[1]] : n[2] ? [d[0], d[1], r / i.length] : [0, 0, 0]
    }
    ,
    t.prototype.getCenterPointPos = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "world"
            , i = this._getPoints(e, t);
        if (i.length < 2)
            return [0, 0, 0];
        var r = Math.floor(i.length / 2) - 1;
        if (i.length % 2)
            return i[r + 1];
        var n = i[r].map((function(e, t) {
            return (e + i[r + 1][t]) / 2
        }
        ));
        return n
    }
    ,
    t.prototype.addPoints = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : SpaceType.World
            , i = this._getPoints(e, t);
        this._points = this._points.concat(i),
        this._updateByPoints()
    }
    ,
    t.prototype.removePoints = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
        this._points.splice(e, t),
        this._updateByPoints()
    }
    ,
    t.prototype.inside = function(e) {
        for (var t = this.planePoints, i = e[0], r = e[1], n = !1, o = 0, s = t.length, a = s - 1; o < s; a = o,
        o++) {
            var l = t[o][0]
                , u = t[o][1]
                , c = t[a][0]
                , h = t[a][1];
            if ((l === i && u === r || c === i && h === r) && (n = !n),
            u < r && h >= r || u >= r && h < r) {
                var p = l + (r - u) * (c - l) / (h - u);
                p === i && (n = !n),
                p > i && (n = !n)
            }
        }
        return !!n
    }
    ,
    t.prototype.clearPathPoints = function() {
        THING.Utils.warn("[PointsBase] Please use '.clearPoints()' to replace 'clearPathPoints()'"),
        this.clearPoints()
    }
    ,
    t.prototype.removePoint = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
        THING.Utils.warn("[LineBase] Please use '.removePoints' to replace '.removePoint'"),
        this.removePoints(e, t)
    }
    ,
    _createClass(t, [{
        key: "points",
        get: function() {
            for (var e = [], t = 0; t < this._points.length; t++) {
                var i = this.selfToWorld(this._points[t]);
                e.push(i)
            }
            return e
        }
    }, {
        key: "planePoints",
        get: function() {
            for (var e = [], t = 0; t < this._points.length; t++) {
                var i = this.selfToWorld(this._points[t]);
                e.push([i[0], i[2]])
            }
            return e
        }
    }, {
        key: "area",
        get: function() {
            for (var e = [], t = 0; t < this._points.length; t++) {
                var i = this.selfToWorld(this._points[t]);
                e.push(new THREE.Vector2(i[0],i[2]))
            }
            var r = THREE.ShapeUtils.area(e);
            return Math.abs(r)
        }
    }, {
        key: "centerPos",
        get: function() {
            return new polylabel([this.planePoints])
        }
    }, {
        key: "avgHeight",
        get: function() {
            if (!this._points.length)
                return 0;
            for (var e = 0, t = 0; t < this._points.length; t++) {
                e += this._points[t][1]
            }
            return e / this._points.length
        }
    }]),
    t
}(BaseObject);
PolygonRegion = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._lineMesh = null,
        n._areaMesh = null,
        n._textRegion = null,
        n
    }
    return o(t, e),
    t.prototype._updateTextPosition = function() {
        if (this._textRegion) {
            var e = this.centerPos;
            this._textRegion.position = [e[0], this.position.y, e[1]],
            this._textRegion.translateY(.01)
        }
    }
    ,
    t.prototype._updateByPoints = function() {
        if (!(this._points.length < 3)) {
            var e = new THREE.MeshBasicMaterial({
                color: this.style.regionColor,
                opacity: this.style.regionOpacity,
                transparent: !0,
                side: THREE.DoubleSide,
                depthWrite: !1
            })
                , t = this._createPolygonVertices()
                , i = this._createPolygonGeometry(t.vertices, t.faces);
            this.app.resourceManager.remove(this._areaMesh),
            this._areaMesh = new THREE.Mesh(i,e),
            this.node.add(this._areaMesh);
            var r = new THREE.LineBasicMaterial({
                color: this.style.lineColor,
                opacity: this.style.lineOpacity,
                transparent: !0
            });
            this.app.resourceManager.remove(this._lineMesh),
            (i = new THREE.Geometry).vertices = t.vertices,
            i.vertices.push(t.vertices[0]),
            this._lineMesh = new THREE.Line(i,r),
            this._lineMesh.userData.skipPick = !0,
            this.node.add(this._lineMesh)
        }
    }
    ,
    t.prototype._beforeSetupComplete = function(e) {
        var t = e.points || e.vertices;
        if (t) {
            if (!e.position && !e.localPosition) {
                var i = this.getPointsCenterPos(t);
                this.position = this.selfToWorld(i)
            }
            this.addPoints(t)
        }
        var r = e.fontText || e.text;
        r && (this.text = r),
        Utils.parseValue(e.alwaysOnTop, !0) && (this.style.alwaysOnTop = !0);
        var n = this.style;
        n.lineOpacity = Utils.parseValue(e.lineOpacity, n.lineOpacity),
        n.lineColor = Utils.parseColor(e.lineColor, n.lineColor),
        n.regionOpacity = Utils.parseValue(e.regionOpacity || e.opacity, n.regionOpacity),
        n.regionColor = Utils.parseColor(e.regionColor, n.regionColor)
    }
    ,
    _createClass(t, [{
        key: "textRegion",
        get: function() {
            if (!this._textRegion) {
                var e = {
                    type: "TextRegion",
                    parent: this
                };
                this._textRegion = this.app.create(e),
                this._textRegion._mesh.renderOrder = 1,
                this._textRegion.angleX = -90,
                this._textRegion.translateY(.1)
            }
            return this._textRegion
        }
    }, {
        key: "text",
        set: function(e) {
            this.textRegion.text = e,
            this._updateTextPosition()
        },
        get: function() {
            return this.textRegion.text
        }
    }, {
        key: "style",
        get: function() {
            return e.prototype._getStyle.call(this)
        },
        set: function(t) {
            e.prototype._setStyle.call(this, t)
        }
    }, {
        key: "lineColor",
        set: function(e) {
            THING.Utils.warn('[PolygonRegion]Please use ".style.lineColor" to replace ".lineColor"'),
            this.style.lineColor = e
        },
        get: function() {
            return THING.Utils.warn('[PolygonRegion]Please use ".style.lineColor" to replace ".lineColor"'),
            this.style.lineColor
        }
    }, {
        key: "regionColor",
        set: function(e) {
            THING.Utils.warn('[PolygonRegion]Please use ".style.regionColor" to replace ".regionColor"'),
            this.style.regionColor = e
        },
        get: function() {
            return THING.Utils.warn('[PolygonRegion]Please use ".style.regionColor" to replace ".regionColor"'),
            this.style.regionColor
        }
    }, {
        key: "regionOpacity",
        set: function(e) {
            THING.Utils.warn('[PolygonRegion]Please use ".style.regionOpacity" to replace ".regionOpacity"'),
            this.style.regionOpacity = e
        },
        get: function() {
            return this.style.regionOpacity
        }
    }]),
    t
}(Al);
Ol = null;
function Bl() {
    return Ol || (Ol = new THREE.Texture(SimpleHeatmap.getInstance().canvas())),
    Ol
}
var Heatmap = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.node = new THREE.Object3D,
        n._map = null,
        n._tex = null,
        n._params = {},
        n
    }
    return o(t, e),
    t.prototype._getMap = function() {
        return SimpleHeatmap.getInstance()
    }
    ,
    t.prototype._beforeSetup = function(e) {
        this._map = this._getMap();
        var t = this._tex = new THREE.Texture(this._map.canvas())
            , i = void 0 !== e.opacity ? e.opacity : 1
            , r = e.width || 10
            , n = e.height || 10
            , o = void 0;
        if (e.clipShape) {
            var s = e.clipShape.shape.map((function(e) {
                return (new THREE.Vector2).fromArray(e)
            }
            ))
                , a = new THREE.Shape(s);
            a.autoClose = !0,
            e.clipShape.holes && (a.holes = e.clipShape.holes.map((function(e) {
                return new THREE.Shape(e.map((function(e) {
                    return (new THREE.Vector2).fromArray(e)
                }
                )))
            }
            )));
            for (var l = (o = new THREE.ShapeBufferGeometry(a)).getAttribute("uv"), u = 0, c = l.array.length; u < c; u += 2) {
                var h = l.array[u + 0]
                    , p = l.array[u + 1];
                l.array[u + 0] = (h + r / 2) / r,
                l.array[u + 1] = (p + n / 2) / n
            }
        } else if (e.meshShape) {
            var d = e.meshShape
                , f = d.node.getMeshes();
            if (f.length >= 1) {
                if (f.length > 1) {
                    o = new THREE.BufferGeometry;
                    var m = f.map((function(e) {
                        return Ll(e, d.node.parent)
                    }
                    ));
                    !function(e) {
                        var t = e.length
                            , i = []
                            , r = e[0].attributes;
                        for (var n in r)
                            i.push({
                                key: n,
                                count: 1
                            });
                        for (var o = 1; o < t; o++) {
                            r = e[o].attributes;
                            for (var s = 0; s < i.length; s++) {
                                r[i[s].key] && i[s].count++
                            }
                        }
                        var a = new Set;
                        i.forEach((function(e) {
                            e.count === t && a.add(e.key)
                        }
                        ));
                        for (var l = 0; l < t; l++)
                            for (var u in r = e[l].attributes)
                                a.has(u) || delete r[u]
                    }(m),
                    (o = THREE.BufferGeometryUtils.mergeBufferGeometries(m)).computeBoundingBox()
                } else
                    o = Ll(f[0], d.node.parent);
                var g = o.boundingBox.getSize(new THREE.Vector3)
                    , v = o.boundingBox.min
                    , y = o.getAttribute("position")
                    , b = o.getAttribute("uv");
                b || (b = new THREE.BufferAttribute(new Float32Array(2 * y.count),2),
                o.setAttribute("uv", b));
                for (var _ = 0, x = b.array.length / 2; _ < x; _++) {
                    var E = y.array[3 * _ + 0]
                        , w = y.array[3 * _ + 2];
                    b.array[2 * _ + 0] = (E - v.x) / g.x,
                    b.array[2 * _ + 1] = (w - v.z) / g.z
                }
                e.width = g.x,
                e.height = g.z
            } else
                console.warn("Heatmap: can not find mesh of object shape.")
        } else
            o = new THREE.PlaneGeometry(r,n);
        var T = void 0;
        e.mosaic ? ((T = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.clone(Il.uniforms),
            vertexShader: Il.vertexShader,
            fragmentShader: Il.fragmentShader,
            transparent: !0,
            side: THREE.DoubleSide
        })).uniforms.opacity.value = i,
        T.uniforms.tDiffuse.value = t) : T = new THREE.MeshBasicMaterial({
            map: t,
            side: THREE.DoubleSide,
            transparent: !0,
            opacity: i
        }),
        this._material = T;
        var M = new THREE.Mesh(o,T);
        M.userData.skipEnvMap = !0,
        this.node.add(M),
        this._initParameter(e),
        this._refresh()
    }
    ,
    t.prototype._initParameter = function(e) {
        var t = this._params;
        t.areaWidth = e.width || 10,
        t.areaHeight = e.height || 10,
        t.mapSize = e.mapSize || 256,
        t.alpha = !!e.alpha,
        t.gradient = e.gradient || {
            .4: "blue",
            .6: "cyan",
            .7: "lime",
            .8: "yellow",
            1: "red"
        },
        t.minValue = void 0 !== e.minValue ? e.minValue : 10,
        t.maxValue = void 0 !== e.maxValue ? e.maxValue : 50,
        t.radius = e.radius || .8,
        t.blur = e.blur || .8,
        t.data = e.data || [],
        t.mosaicSize = e.mosaicSize || t.mapSize / 64
    }
    ,
    t.prototype.setParameter = function(e) {
        var t = this._params;
        t.mapSize = e.mapSize || t.mapSize,
        t.alpha = void 0 !== e.alpha ? e.alpha : t.alpha,
        t.gradient = e.gradient || t.gradient,
        t.minValue = e.minValue || t.minValue,
        t.maxValue = e.maxValue || t.maxValue,
        t.radius = e.radius || t.radius,
        t.blur = e.blur || t.blur,
        t.data = e.data || t.data,
        t.mosaicSize = e.mosaicSize || t.mosaicSize,
        this._refresh()
    }
    ,
    t.prototype.addData = function(e) {
        this._params.data.push(e),
        this._refresh()
    }
    ,
    t.prototype.setData = function(e) {
        this._params.data = e,
        this._refresh()
    }
    ,
    t.prototype.setAlpha = function(e) {
        this._params.alpha = e,
        this._refresh()
    }
    ,
    t.prototype.setRadius = function(e, t) {
        this._params.radius = e,
        void 0 !== t && (this._params.blur = t),
        this._refresh()
    }
    ,
    t.prototype.setGradient = function(e) {
        this._params.gradient = e,
        this._refresh()
    }
    ,
    t.prototype.randomData = function() {
        for (var e = this._params, t = [], i = 0; i < Math.round(e.areaWidth * e.areaHeight); i++)
            t.push([(Math.random() - .5) * e.areaWidth, (Math.random() - .5) * e.areaHeight, Math.pow(Math.random(), 3) * (e.maxValue - e.minValue) + e.minValue]);
        this.setData(t)
    }
    ,
    t.prototype._refresh = function() {
        var e = this._params
            , t = 1
            , i = 1
            , r = e.mapSize / e.areaWidth;
        e.areaWidth != e.areaHeight && (e.areaWidth > e.areaHeight ? (t = 1,
        i = e.areaHeight / e.areaWidth) : (t = e.areaWidth / e.areaHeight,
        i = 1,
        r = e.mapSize / e.areaHeight));
        var n = e.data.map((function(e) {
            return [1 * e[0], 1 * e[1], e[2]]
        }
        ))
            , o = Math.floor(e.mapSize * t)
            , s = Math.floor(e.mapSize * i);
        this._map.setCanvasSize(o, s).setAreaSize(1 * e.areaWidth, 1 * e.areaHeight).min(e.minValue).max(e.maxValue).alpha(e.alpha).gradient(e.gradient).radius(Math.floor(e.radius * r * 1), Math.floor(e.blur * r * 1)).data(n).draw(),
        this._tex.needsUpdate = !0,
        Bl().needsUpdate = !0,
        this.app.renderer.copyTextureToTexture(new THREE.Vector2, Bl(), this._tex),
        this._material.isShaderMaterial && (this._material.uniforms.texSize.value.set(o, s),
        this._material.uniforms.mosaicSize.value.set(e.mosaicSize, e.mosaicSize))
    }
    ,
    _createClass(t, [{
        key: "isHeatmap",
        get: function() {
            return THING.Utils.warn("[Heatmap] Please use 'instanceof THING.Heatmap' to replace '.isHeatmap'"),
            this instanceof THING.Heatmap
        }
    }]),
    t
}(BaseObject);
function Ll(e, t) {
    var i = e.geometry.isBufferGeometry ? e.geometry.clone() : (new THREE.BufferGeometry).fromGeometry(e.geometry);
    return i.applyMatrix4(e.getMatrixFromRoot(t)),
    i.computeBoundingBox(),
    i
}
var Il = {
    uniforms: {
        opacity: {
            value: 1
        },
        tDiffuse: {
            value: null
        },
        texSize: {
            value: new THREE.Vector2(640,640)
        },
        mosaicSize: {
            value: new THREE.Vector2(16,16)
        }
    },
    vertexShader: "\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\tvarying vec2 vUV;\n        void main() {\n\t\t\tvUV = uv;\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <fog_vertex>\n        }\n    ",
    fragmentShader: "\n\t\tuniform\tfloat opacity;\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\n        uniform sampler2D tDiffuse;\n\n        uniform vec2 texSize;\n        uniform vec2 mosaicSize;\n\n        varying vec2 vUV;\n\n        void main(void) {\n\t\t\tvec4 originColor = texture2D(tDiffuse, vUV);\n\n\t\t\tif (originColor.a < 0.0001) discard;\n\n\t\t\t#include <logdepthbuf_fragment>\n\n            vec2 xy = vec2(vUV.x * texSize.x, vUV.y * texSize.y);\n            \n            vec2 xyMosaic = vec2(floor(xy.x / mosaicSize.x) * mosaicSize.x, \n                    floor(xy.y / mosaicSize.y) * mosaicSize.y )\n                    + .5*mosaicSize;\n            \n            vec2 delXY = xyMosaic - xy;\n            float delL = length(delXY);\n            \n            vec2 uvMosaic = vec2(xyMosaic.x / texSize.x, xyMosaic.y / texSize.y);\n\n            float percent = smoothstep(0., 1., 1. - delL * 2.4 / mosaicSize.x) * 0.7 + 0.3;\n\n            vec4 centerColor = texture2D(tDiffuse, uvMosaic);\n            \n            vec4 resultColor = vec4(mix(originColor.rgb, centerColor.rgb, percent), centerColor.a * percent * opacity);\n            \n\t\t\tgl_FragColor = resultColor;\n\t\t\t\n\t\t\t#include <fog_fragment>\n        }\n    "
};
Heatmap.PointMosaicShader = Il;
var Nl = null;
function Hl() {
    return Nl || (Nl = new THREE.Texture(SimpleIDW.getInstance().canvas())),
    Nl
}
var IDWMap = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype._getMap = function() {
        return SimpleIDW.getInstance()
    }
    ,
    t.prototype._initParameter = function(e) {
        var t = this._params;
        t.areaWidth = Utils.parseValue(e.width, 10),
        t.areaHeight = Utils.parseValue(e.height, 10),
        t.mapSize = Utils.parseValue(e.mapSize, 256),
        t.alpha = Utils.parseValue(e.alpha, !1),
        t.gradient = Utils.parseValue(e.gradient, {
            .4: "blue",
            .6: "cyan",
            .7: "lime",
            .8: "yellow",
            1: "red"
        }),
        t.minValue = e.minValue,
        t.maxValue = e.maxValue,
        t.radius = e.radius,
        t.minEffectPointNumber = e.minEffectPointNumber,
        t.smooth = Utils.parseValue(e.smooth, !0),
        t.data = Utils.parseValue(e.data, []),
        t.exp = Utils.parseValue(e.exp, 2);
        var i = t.areaWidth > t.areaHeight ? t.areaWidth / 250 : t.areaHeight / 250;
        t.cellSize = Utils.parseValue(e.cellSize, i),
        t.opacity = Utils.parseValue(e.opacity, 1),
        t.mosaicSize = Utils.parseValue(e.mosaicSize, t.mapSize / 64),
        Utils.isNull(t.radius) && Utils.isNull(t.minEffectPointNumber) && (t.radius = 5 * i)
    }
    ,
    t.prototype._refresh = function() {
        var e = this._params
            , t = 1
            , i = 1
            , r = e.mapSize / e.areaWidth;
        e.areaWidth != e.areaHeight && (e.areaWidth > e.areaHeight ? (t = 1,
        i = e.areaHeight / e.areaWidth) : (t = e.areaWidth / e.areaHeight,
        i = 1,
        r = e.mapSize / e.areaHeight));
        var n = e.radius * r
            , o = Math.round(e.cellSize * r)
            , s = e.data.map((function(e) {
            return [1 * e[0], 1 * e[1], e[2]]
        }
        ))
            , a = e.data.map((function(e) {
            return e[2]
        }
        ));
        Utils.isNull(e.minValue) && (e.minValue = Math.min.apply(Math, a)),
        Utils.isNull(e.maxValue) && (e.maxValue = Math.max.apply(Math, a));
        var l = Math.floor(e.mapSize * t)
            , u = Math.floor(e.mapSize * i);
        this._map.setCanvasSize(l, u).setAreaSize(1 * e.areaWidth, 1 * e.areaHeight).min(e.minValue).max(e.maxValue).alpha(e.alpha).gradient(e.gradient).opacity(e.opacity).cellSize(o).exp(e.exp).smooth(e.smooth).radius(n).minEffectPointNumber(e.minEffectPointNumber).data(s)._redraw(),
        s && 0 !== s.length ? (this._tex.magFilter = THREE.NearestFilter,
        this._tex.minFilter = THREE.NearestFilter,
        this._tex.needsUpdate = !0,
        Hl().needsUpdate = !0,
        this.app.renderer.copyTextureToTexture(new THREE.Vector2, Hl(), this._tex),
        this._material.isShaderMaterial && (this._material.uniforms.texSize.value.set(l, u),
        this._material.uniforms.mosaicSize.value.set(e.mosaicSize, e.mosaicSize))) : this._tex.dispose()
    }
    ,
    t
}(Heatmap);
IDWGPUMap = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._params = {},
        n
    }
    return o(t, e),
    t.prototype._beforeSetup = function(e) {
        this._vs = "varying vec2 v_Uv;\n\n\t\tvoid main() {\n\n\t\t\tv_Uv = uv;\n\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t}",
        this._fs = "precision mediump float;\n\t\t// uniform vec3 points[300];\n\t\tuniform float idw_DistanceThreshold;\n\t\tuniform float idw_exponent;\n\t\tuniform float idw_linearFadeFactor;\n\t\tuniform float idw_minValue;\n\t\tuniform float idw_maxValue;\n\t\tuniform vec2 iResolution;\n\t\tuniform vec2 originPoint;\n\t\tuniform float pointTextureSize;\n\t\tuniform sampler2D pointTexture;\n\t\tuniform sampler2D colorRampTexture;\n\t\tuniform int NUM_POINTS;\n\t\tvarying vec2 v_Uv;\n\n\t\tfloat isoline(float val, float lg, float ref, float pas, float thickness) {\n\t\t\tfloat v = abs(mod(val - ref + pas * .5, pas) - pas * .5) / lg - .1 * thickness;\n\t\t\treturn smoothstep(.2, .8, v);\n\t\t}\n\n\t\tstruct Accumulator\n\t\t{\n\t\t\tfloat m_sumOfWeightedValues;\n\t\t\tfloat m_sumOfWeights;\n\t\t};\n\t\tfloat GetWeightedAverage(Accumulator acc)\n\t\t{\n\t\t\treturn acc.m_sumOfWeightedValues / acc.m_sumOfWeights;\n\t\t}\n\n\n\t\tvoid main() {\n\n\t\t\tfloat exactThreshold = 0.01; // if we are very close to a point then avoid a divide by zero and set to exact weight of the point\n\n\t\t\tAccumulator acc = Accumulator(0.0f,0.0f);\n\n\t\t\tvec2 fragCoord = v_Uv * iResolution.xy;\n\t\t\tfloat interpolatedValue = 0.;\n\t\t\t\n\t\t\tfor (int i = 0; i < NUM_POINTS; ++i) \n\t\t\t{\n\t\t\t\tfloat i_float = float(i);\n\t\t\t\tfloat j = i_float * 1.0;\n\t\t\t\tfloat x = mod( j, float( pointTextureSize ) );\n\t\t\t\tfloat y = floor( j / float( pointTextureSize ) );\n\n\t\t\t\tfloat dx = 1.0 / float( pointTextureSize );\n\t\t\t\tfloat dy = 1.0 / float( pointTextureSize );\n\n\t\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\t\tvec4 pointSampler = texture2D( pointTexture, vec2( dx * ( x + 0.5 ), y ) );\n\n\t\t\t\tfloat dist = max(exactThreshold, length(fragCoord.xy +originPoint - pointSampler.xz));  \n\t\t\t\tif (dist < idw_DistanceThreshold) \n\t\t\t\t{\n\n\t\t\t\t\tfloat weight = 1.0f / pow(dist, idw_exponent);\n\t\t\t\t\t//weight *= (1.0f - idw_linearFadeFactor * (dist / idw_DistanceThreshold));\n\n\t\t\t\t\tacc.m_sumOfWeights += weight;\n\t\t\t\t\tacc.m_sumOfWeightedValues += weight * pointSampler.w;\n\t\t\t\t}\n\t\t\t\t//interpolatedValue += pointSampler.w * inverseDistances[i];\n\t\t\t}\n\n\n\t\t\tinterpolatedValue = GetWeightedAverage(acc);\n\t\t\t//interpolatedValue = clamp(interpolatedValue, 0.0, 1.0);\n\t\t\t\n\t\t\t//float lg = 2.*length(vec2(dFdx(interpolatedValue), dFdy(interpolatedValue)));\n\t\t\t//float k1 = isoline(interpolatedValue, lg, .05, .2, 1.),\n\t\t\t//k2 = isoline(interpolatedValue, lg, .025, .05, .01);\n\t\t\t\n\t\t\t// paletize value\n\t\t\tinterpolatedValue = (interpolatedValue- idw_minValue) /(idw_maxValue -idw_minValue);\n\t\t\tvec3 col =texture2D(colorRampTexture,vec2(interpolatedValue,0.5)).rgb;\n\t\t\t\n\t\t\t// apply isoline to color\n\t\t\t//col *= (.3+(k1*.7));\n\t\t\t//col *= (.7+(k2*.3));\n\n\t\t\t//set isoline color\n\t\t\t//if(k1<=0.2){col =vec3(1.,0.,0.);}\n\t\t\t//else{\n\t\t\t//\tcol = mix(vec3(1.,0.,0.),col, (.3+(k1*.7)));\n\t\t\t//}\n\t\t\tgl_FragColor = vec4(col, 1.);\n\t\t}",
        this._initParameter(e);
        var t = this.areaWidth
            , i = this.areaHeight
            , r = void 0;
        if (e.clipShape) {
            var n = e.clipShape.shape.map((function(e) {
                return (new THREE.Vector2).fromArray(e)
            }
            ))
                , o = new THREE.Shape(n);
            o.autoClose = !0,
            e.clipShape.holes && (o.holes = e.clipShape.holes.map((function(e) {
                return new THREE.Shape(e.map((function(e) {
                    return (new THREE.Vector2).fromArray(e)
                }
                )))
            }
            )));
            for (var s = (r = new THREE.ShapeBufferGeometry(o)).getAttribute("uv"), a = 0, l = s.array.length; a < l; a += 2) {
                var u = s.array[a + 0]
                    , c = s.array[a + 1];
                s.array[a + 0] = (u + t / 2) / t,
                s.array[a + 1] = (c + i / 2) / i
            }
        } else if (e.meshShape) {
            var h = e.meshShape
                , p = h.node.getMeshes();
            if (p.length >= 1) {
                if (p.length > 1) {
                    r = new THREE.BufferGeometry;
                    var d = p.map((function(e) {
                        return getBufferGeometry(e, h.node.parent)
                    }
                    ));
                    alignAttributes(d),
                    (r = THREE.BufferGeometryUtils.mergeBufferGeometries(d)).computeBoundingBox()
                } else
                    r = getBufferGeometry(p[0], h.node.parent);
                var f = r.boundingBox.getSize(new THREE.Vector3)
                    , m = r.boundingBox.min
                    , g = r.getAttribute("position")
                    , v = r.getAttribute("uv");
                v || (v = new THREE.BufferAttribute(new Float32Array(2 * g.count),2),
                r.setAttribute("uv", v));
                for (var y = 0, b = v.array.length / 2; y < b; y++) {
                    var _ = g.array[3 * y + 0]
                        , x = g.array[3 * y + 2];
                    v.array[2 * y + 0] = (_ - m.x) / f.x,
                    v.array[2 * y + 1] = (x - m.z) / f.z
                }
                e.width = f.x,
                e.height = f.z
            } else
                console.warn("Heatmap: can not find mesh of object shape.")
        } else
            r = new THREE.PlaneGeometry(t,i);
        e.mosaic ? this._material = this._getMosaicMaterial() : this._material = this._getBasicMaterial();
        var E = new THREE.Mesh(r,this._material);
        E.userData.skipEnvMap = !0,
        this.node.add(E);
        var w = []
            , T = [];
        for (var M in this.gradient)
            T.push(parseFloat(M)),
            w.push(THING.Utils.parseColor(this.gradient[M]).toArray());
        this._gradientTexture = this._generateGradientTextureByGray(T, w),
        this.init(this.data, this.areaWidth, this.areaHeight, this.minValue, this.maxValue, this.radius, this._gradientTexture, this._cellNum, this.exp)
    }
    ,
    t.prototype._getMosaicMaterial = function() {
        return this._mosaicMateiral || (this._mosaicMateiral = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.clone(THING.Heatmap.PointMosaicShader.uniforms),
            vertexShader: THING.Heatmap.PointMosaicShader.vertexShader,
            fragmentShader: THING.Heatmap.PointMosaicShader.fragmentShader,
            transparent: !0,
            side: THREE.DoubleSide
        })),
        this._mosaicMateiral.uniforms.texSize.value.set(this._cellNum, this._cellNum),
        this._mosaicMateiral.uniforms.mosaicSize.value.set(this._mosaicSize, this._mosaicSize),
        this._mosaicMateiral.uniforms.opacity.value = this.opacity,
        this._mosaicMateiral.uniforms.tDiffuse.value = new THREE.Texture,
        this._mosaicMateiral
    }
    ,
    t.prototype._getBasicMaterial = function() {
        return this._basicMateiral || (this._basicMateiral = new THREE.MeshBasicMaterial({
            side: THREE.DoubleSide,
            transparent: !0
        })),
        this._basicMateiral.opacity = this.opacity,
        this._basicMateiral
    }
    ,
    t.prototype._initMinMaxValue = function() {
        var e = this.data.map((function(e) {
            return e[2]
        }
        ));
        (Utils.isNull(this.minValue) || this.minValue === 1 / 0) && (this.minValue = Math.min.apply(Math, e)),
        (Utils.isNull(this.maxValue) || this.maxValue === -1 / 0) && (this.maxValue = Math.max.apply(Math, e))
    }
    ,
    t.prototype._initParameter = function(e) {
        this.areaWidth = Utils.parseValue(e.width, 10),
        this.areaHeight = Utils.parseValue(e.height, 10),
        this.alpha = Utils.parseValue(e.alpha, !1),
        this.gradient = Utils.parseValue(e.gradient, {
            .4: "blue",
            .6: "cyan",
            .7: "lime",
            .8: "yellow",
            1: "red"
        }),
        this.minValue = e.minValue,
        this.maxValue = e.maxValue,
        this.data = Utils.parseValue(e.data, []),
        this._initMinMaxValue(),
        this._radius = e.radius,
        this.exp = Utils.parseValue(e.exp, 2);
        var t = this.areaWidth > this.areaHeight ? this.areaWidth : this.areaHeight
            , i = t / 512;
        this.cellSize = Utils.parseValue(e.cellSize, i),
        this._cellNum = Math.ceil(t / this.cellSize),
        this._opacity = Utils.parseValue(e.opacity, 1),
        this._mosaicSize = Utils.parseValue(e.mosaicSize, 4),
        this._mosaic = Utils.parseValue(e.mosaic, !1),
        Utils.isNull(this._radius) && (this._radius = 5 * this.cellSize)
    }
    ,
    t.prototype.init = function(e, t, i, r, n, o, s, a, l) {
        var u = "undefined" != typeof WebGL2RenderingContext && THING.App.current.renderer.getContext()instanceof WebGL2RenderingContext
            , c = this._putDataIntoTexture(e, u);
        this._setidwRenderTargets(c, e.length, t, i, r, n, -t / 2, -i / 2, o, s, a, l)
    }
    ,
    t.prototype.refresh = function() {
        this.init(this.data, this.areaWidth, this.areaHeight, this.minValue, this.maxValue, this.radius, this._gradientTexture, this._cellNum, this.exp)
    }
    ,
    t.prototype.setData = function(e) {
        e && (this.data = e,
        this._initMinMaxValue(),
        this.init(this.data, this.areaWidth, this.areaHeight, this.minValue, this.maxValue, this.radius, this._gradientTexture, this._cellNum, this.exp))
    }
    ,
    t.prototype._generateGradientTextureByGray = function(e, t, i, r, n) {
        this._canvas = document.createElement("canvas"),
        this._canvas.width = 256,
        this._canvas.height = 256;
        var o = this._canvas.getContext("2d");
        i = void 0 === i || i;
        var s = void 0;
        s = (r = r || !1) ? o.createLinearGradient(0, 0, 0, 256) : o.createLinearGradient(0, 0, 256, 0);
        for (var a = 0; a < e.length; a++) {
            var l;
            l = t[a] ? i ? new THREE.Color(t[a][0],t[a][1],t[a][2]).toHexString() : t[a] : i ? new THREE.Color(1,1,1).toHexString() : "rgb(255,255,255)",
            s.addColorStop(+e[a], l)
        }
        o.fillStyle = s,
        r ? o.fillRect(0, 0, 1, 256) : o.fillRect(0, 0, 256, 1);
        var u = void 0;
        return u = r ? new Uint8Array(o.getImageData(0, 0, 1, 256).data.buffer) : new Uint8Array(o.getImageData(0, 0, 256, 1).data.buffer),
        n ? n.image = r ? {
            data: u,
            width: 1,
            height: 256
        } : {
            data: u,
            width: 256,
            height: 1
        } : n = r ? new THREE.DataTexture(u,1,256) : new THREE.DataTexture(u,256,1),
        n.magFilter = n.minFilter = THREE.LinearFilter,
        n.needsUpdate = !0,
        n
    }
    ,
    t.prototype._putDataIntoTexture = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = Math.sqrt(e.length);
        i = this._nextPowerOfTwo(Math.ceil(i)),
        i = Math.max(4, i);
        for (var r = new Float32Array(i * i * 4), n = 0; n < e.length; n++)
            r[4 * n] = e[n][0],
            r[4 * n + 1] = 0,
            r[4 * n + 2] = e[n][1],
            r[4 * n + 3] = e[n][2];
        var o = new THREE.DataTexture(r,i,i);
        return t && (o.format = THREE.RGBAFormat),
        o.type = THREE.FloatType,
        o.magFilter = THREE.NearestFilter,
        o.minFilter = THREE.NearestFilter,
        o.generateMipmaps = !1,
        o.flipY = !1,
        o.needsUpdate = !0,
        o
    }
    ,
    t.prototype._setidwRenderTargets = function(e, t, i, r, n, o, s, a, l, u, c) {
        var h = arguments.length > 11 && void 0 !== arguments[11] ? arguments[11] : 2
            , p = new THREE.ShaderMaterial({
            uniforms: {
                idw_exponent: {
                    value: h
                },
                idw_DistanceThreshold: {
                    value: l
                },
                idw_linearFadeFactor: {
                    value: 0
                },
                idw_minValue: {
                    value: n
                },
                idw_maxValue: {
                    value: o
                },
                pointTexture: {
                    value: e
                },
                colorRampTexture: {
                    value: u
                },
                pointTextureSize: {
                    value: e.image.height
                },
                NUM_POINTS: {
                    value: t
                },
                iResolution: {
                    value: new THREE.Vector2(i,r)
                },
                originPoint: {
                    value: new THREE.Vector2(s,a)
                }
            },
            vertexShader: this._vs,
            fragmentShader: this._fs
        });
        if (this._ottScene)
            this._idwRenderTarget.setSize(c, c),
            this._ottScene.children[0].material = p;
        else {
            this._ottScene = new THREE.Scene,
            this._ottCamera = new THREE.OrthographicCamera(-1,1,1,-1,1,1e3);
            var d = new THREE.PlaneBufferGeometry(2,2);
            this._ottCamera.position.set(0, 0, 1);
            var f = new THREE.Mesh(d,p);
            f.scale.set(1, -1, 1),
            f.position.set(0, 0, -2),
            this._ottScene.add(f),
            this._idwRenderTarget = new THREE.WebGLRenderTarget(c,c,{
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                wrapS: THREE.ClampToEdgeWrapping,
                wrapT: THREE.ClampToEdgeWrapping,
                format: THREE.RGBAFormat,
                type: THREE.FloatType,
                generateMipmaps: !1
            })
        }
        p.needsUpdate = !0;
        var m = THING.App.current.renderer;
        m.clear(),
        m.setRenderTarget(this._idwRenderTarget),
        m.clear(),
        m.render(this._ottScene, this._ottCamera),
        this.mosaic ? (this._material.uniforms.texSize.value.set(c, c),
        this._material.uniforms.tDiffuse.value = this._idwRenderTarget.texture) : this._material.map = this._idwRenderTarget.texture,
        this._material.needsUpdate = !0,
        m.setRenderTarget(null),
        p.dispose()
    }
    ,
    t.prototype._nextPowerOfTwo = function(e) {
        return e--,
        e |= e >> 1,
        e |= e >> 2,
        e |= e >> 4,
        e |= e >> 8,
        e |= e >> 16,
        ++e
    }
    ,
    t.prototype.destroy = function() {
        e.prototype.destroy.call(this),
        this._ottScene.children = [],
        this._ottScene = null
    }
    ,
    _createClass(t, [{
        key: "mosaicSize",
        get: function() {
            return this._mosaicSize
        },
        set: function(e) {
            e !== this._mosaicSize && (this._mosaic && this._material.uniforms.mosaicSize.value.set(e, e),
            this._mosaicSize = e)
        }
    }, {
        key: "opacity",
        get: function() {
            return this._opacity
        },
        set: function(e) {
            this.mosaic ? this._mosaicMateiral.uniforms.opacity.value = e : this._material.opacity = e,
            this._opacity = e
        }
    }, {
        key: "mosaic",
        get: function() {
            return this._mosaic
        },
        set: function(e) {
            e !== this._mosaic && (this._mosaic = e,
            e ? (this._material = this._getMosaicMaterial(),
            this._material.uniforms.tDiffuse.value = this._idwRenderTarget.texture) : (this._material = this._getBasicMaterial(),
            this._material.map = this._idwRenderTarget.texture),
            this.node.children[0].material = this._material)
        }
    }, {
        key: "radius",
        get: function() {
            return this._radius
        },
        set: function(e) {
            this._radius = e,
            this.refresh()
        }
    }]),
    t
}(BaseObject);
LineBase = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.pathTexture = null,
        n.pathWidth = 1,
        n.pathCornerRadius = .3,
        n.pathCornerSplit = 10,
        n.pathScrollUV = !1,
        n.pathScrollSpeed = 1,
        n.pathPlayingTween = null,
        n.pathUp = new THREE.Vector3(0,1,0),
        n.pathPointList = null,
        n.pathGeometry = null,
        n.pathLine = null,
        n.pathMaterial = new THREE.MeshBasicMaterial({
            transparent: !0
        }),
        n._uvRepeat = [1, 1],
        n._uvOffset = [0, 0],
        n._uvRotation = 0,
        n
    }
    return o(t, e),
    t.prototype.synPathTexture = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.pathTexture = e,
        this.pathLine && (this.pathLine.material.map = this.pathTexture,
        this.pathLine.material.needsUpdate = !0,
        t && this.pathLine.material._prev_material && (this.pathLine.material._prev_material.map = this.pathTexture,
        this.pathLine.material._prev_material.needsUpdate = !0))
    }
    ,
    t.prototype._synUvTransform = function() {
        this.pathMaterial.uvTransform || (this.pathMaterial.uvTransform = new THREE.Matrix3),
        this.pathMaterial.uvTransform.setUvTransform(this._uvOffset[0], this._uvOffset[1], this._uvRepeat[0], this._uvRepeat[1], this._uvRotation, 0, 0)
    }
    ,
    t.prototype._setupPoints = function(e) {
        var t = e.points;
        if (t) {
            var i = e.spaceType
                , r = e.local;
            if (!i && r && (i = SpaceType.Local),
            t.forEach((function(e, i) {
                e.isVector3 && (t[i] = e.toArray())
            }
            )),
            !e.position && !e.localPosition) {
                var n = this.getCenterPointPos(t, i);
                this.position = this.selfToWorld(n)
            }
            this.addPoints(t, i)
        }
    }
    ,
    t.prototype._setupPathLine = function(e) {
        var t = this;
        this.scrollUV = Utils.parseValue(e.scrollUV, !1),
        this.uvRatio = e.uvRatio || 1,
        this.width = Utils.parseValue(e.width, this.width),
        this.side = Utils.parseValue(e.side, "both"),
        this.close = Utils.parseValue(e.close, !1);
        var i = Utils.parseValue(e.doubleSide, !0);
        this.pathMaterial.side = i ? THREE.DoubleSide : THREE.FrontSide,
        this.pathLine = new THREE.Mesh(this.pathGeometry,this.pathMaterial),
        this.pathMaterial.isMeshBasicMaterial && (this.pathLine.userData.skipEnvMap = !0),
        this.pathLine.addBeforeRenderFunction("pathUpdate", (function(e, i, r, n, o, s) {
            o.uvTransform || (o.uvTransform = new THREE.Matrix3),
            o.uvTransform.setUvTransform(t._uvOffset[0], t._uvOffset[1], t._uvRepeat[0], t._uvRepeat[1], t._uvRotation, 0, 0)
        }
        ));
        var r = e.image;
        r && (this.style.image = r)
    }
    ,
    t.prototype._addPathLine = function() {
        this.node.add(this.pathLine)
    }
    ,
    t.prototype._beforeSetupComplete = function(e) {
        this._setupPathLine(e),
        this._setupPoints(e),
        this._addPathLine(),
        e.imageRepeat && (this.imageRepeat = e.imageRepeat),
        e.imageScroll && (this.imageScroll = e.imageScroll),
        e.imageScrollSpeed && (this.imageScrollSpeed = e.imageScrollSpeed)
    }
    ,
    t.prototype._updateByPoints = function() {
        this.node.updateWorldMatrix(!0, !1),
        this._points.length >= 2 && this.pathPointList.set(this._points.map((function(e) {
            return (new THREE.Vector3).fromArray(e)
        }
        )), this.pathCornerRadius, this.pathCornerSplit, this.pathUp, this.close),
        this.pathGeometry && (this.pathGeometry.boundingBox = null,
        this.pathGeometry.boundingSphere = null)
    }
    ,
    t.prototype.updatePath = function(e) {
        if (this.pathScrollUV && this.pathMaterial) {
            var t = this.pathScrollSpeed * e;
            return this.rotateScrollDirection ? this._uvOffset[1] -= t : this._uvOffset[0] -= t,
            !0
        }
        return !1
    }
    ,
    t.prototype.update = function(t) {
        var i = e.prototype.update.call(this, t);
        return i |= this.updatePath(t)
    }
    ,
    t.prototype.play = function(e) {
        var t = (e = e || {}).time || 1e3
            , i = Utils.parseValue(e.startProgress, 0)
            , r = Utils.parseValue(e.endProgress, 1)
            , n = e.lerpType || LerpType.Linear.None
            , o = e.complete
            , s = this
            , a = {
            progress: i
        }
            , l = {
            progress: r
        };
        this.pathPlayingTween = new TWEEN.Tween(a).to(l, t).easing(n).onUpdate((function() {
            s.pathGeometry.update(s.pathPointList, {
                width: s.pathWidth,
                radius: s.pathWidth,
                arrow: !!s.arrowFlag,
                progress: this._object.progress
            }),
            s.app && s.app.rendererManager._mainRenderer.dirty()
        }
        )).onComplete((function() {
            o && o.call(s)
        }
        )).start()
    }
    ,
    t.prototype.stop = function() {
        this.pathPlayingTween && (this.pathPlayingTween.stop(),
        this.pathPlayingTween = null)
    }
    ,
    t.prototype.toJSON = function() {
        var t = e.prototype.toJSON.call(this);
        return t.image = this.image,
        t.scrollUV = this.scrollUV,
        t.points = this.points,
        t
    }
    ,
    t.prototype._setupResources = function(e) {
        this.pathLine && (this.pathLine.material = this.pathMaterial,
        this._addPathLine())
    }
    ,
    t.prototype.unloadResource = function() {
        e.prototype.unloadResource.call(this),
        this.clearPoints()
    }
    ,
    _createClass(t, [{
        key: "rotateScrollDirection",
        set: function(e) {
            this._uvRotation = e ? Math.PI / 2 : 0,
            this._synUvTransform()
        },
        get: function() {
            return 0 !== this._uvRotation
        }
    }, {
        key: "imageRepeat",
        set: function(e) {
            this._uvRepeat[0] = e[0],
            this._uvRepeat[1] = e[1],
            this._synUvTransform()
        },
        get: function() {
            return this._uvRepeat.slice(0)
        }
    }, {
        key: "imageScroll",
        set: function(e) {
            this.pathScrollUV = e,
            this.tickable = !0
        },
        get: function() {
            return this.pathScrollUV
        }
    }, {
        key: "imageScrollSpeed",
        set: function(e) {
            this.pathScrollSpeed = THING.Math.clamp(e, -99, 99)
        },
        get: function() {
            return this.pathScrollSpeed
        }
    }, {
        key: "isOutdoors",
        get: function() {
            for (var e = this._parent; e; e = e._parent)
                if (e.isBuilding)
                    return !1;
            return !0
        }
    }, {
        key: "useTexture",
        set: function(e) {
            var t = this.pathLine.material;
            t.map = e ? this.pathTexture : null,
            t.needsUpdate = !0
        },
        get: function() {
            return null !== this.pathLine.material.map
        }
    }, {
        key: "width",
        set: function(e) {
            this.pathWidth !== e && (this.pathWidth = e,
            this._updateByPoints())
        },
        get: function() {
            return this.pathWidth
        }
    }, {
        key: "cornerRadius",
        set: function(e) {
            this.pathCornerRadius !== e && (this.pathCornerRadius = e,
            this._updateByPoints())
        },
        get: function() {
            return this.pathCornerRadius
        }
    }, {
        key: "cornerSegments",
        set: function(e) {
            this.pathCornerSplit !== e && (this.pathCornerSplit = e,
            this._updateByPoints())
        },
        get: function() {
            return this.pathCornerSplit
        }
    }, {
        key: "length",
        get: function() {
            if (this._points.length <= 1)
                return 0;
            for (var e = 0, t = this._points[0], i = 1; i < this._points.length; i++) {
                var r = this._points[i];
                e += THING.Math.getDistance(r, t),
                t = r
            }
            return e
        }
    }, {
        key: "cornerSplit",
        set: function(e) {
            THING.Utils.warn("[LineBase] Please use '.cornerSegments' to replace '.cornerSplit'"),
            this.cornerSegments = e
        },
        get: function() {
            return THING.Utils.warn("[LineBase] Please use '.cornerSegments' to replace '.cornerSplit'"),
            this.cornerSegments
        }
    }, {
        key: "uvRatio",
        set: function(e) {
            this._uvRepeat[0] = 1 / e
        }
    }, {
        key: "scrollUV",
        set: function(e) {
            this.pathScrollUV = e,
            e && 0 == this.tickable && (this.tickable = !0)
        },
        get: function() {
            return this.pathScrollUV
        }
    }, {
        key: "scrollSpeed",
        set: function(e) {
            this.pathScrollSpeed = THING.Math.clamp(e / 10, -99, 99)
        },
        get: function() {
            return 10 * this.pathScrollSpeed
        }
    }]),
    t
}(Al);
Wl = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._points = []
    }
    return e.prototype.set = function(e, t, i, r) {
        this._points = e
    }
    ,
    _createClass(e, [{
        key: "vertices",
        get: function() {
            for (var e = [], t = 0; t < this._points.length; t++)
                e.push(Utils.parseVector3(this._points[t]));
            return e
        }
    }]),
    e
}();
Line = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.dotNode = null,
        n.pathGeometry = new THREE.BufferGeometry,
        n.pathGeometry.update = function(e, t) {}
        ,
        n.dotGeometry = null,
        n.dotMaterial = null,
        n.pathPointList = new Wl,
        n
    }
    return o(t, e),
    t.prototype._updateByPoints = function() {
        e.prototype._updateByPoints.call(this);
        var t = this.pathPointList.vertices;
        t.length && (this.pathGeometry.setFromPoints(t),
        this.pathLine.computeLineDistances(),
        this.dotGeometry && this.dotGeometry.setFromPoints(t),
        this.node.setFrustumCulled(!1))
    }
    ,
    t.prototype._setupPathLine = function(e) {
        var t, i = e.style || {}, r = e.lineOpacity || 1, n = Utils.parseValue(e.lineDashSize || i.lineDashSize, 0), o = Utils.parseValue(e.lineGapSize || i.lineGapSize, 0), s = e.lineWidth || 1, a = e.color || 255, l = this.pathPointList.vertices;
        t = n || o ? new THREE.LineDashedMaterial({
            color: a,
            opacity: r,
            dashSize: n,
            gapSize: o,
            linewidth: s,
            transparent: !0
        }) : new THREE.LineBasicMaterial({
            color: a,
            opacity: r,
            linewidth: s,
            transparent: !0
        }),
        this.pathGeometry.setFromPoints(l),
        this.pathLine = new THREE.Line(this.pathGeometry,t),
        this.pathLine.computeLineDistances();
        var u = e.dotColor || 16777215
            , c = e.dotSize;
        c && (this.dotGeometry = (new THREE.BufferGeometry).setFromPoints(l),
        this.dotMaterial = new THREE.PointsMaterial({
            color: u,
            size: c,
            sizeAttenuation: !1
        }),
        this.dotNode = new THREE.Points(this.dotGeometry,this.dotMaterial),
        this.node.add(this.dotNode))
    }
    ,
    t.prototype.showLines = function(e) {
        this.pathLine.visible = e
    }
    ,
    t.prototype.showPoints = function(e) {
        this.dotNode.visible = e
    }
    ,
    _createClass(t, [{
        key: "isLine",
        get: function() {
            return !0
        }
    }]),
    t
}(LineBase);
ql = function() {
    function e() {
        classCallCheck(this, e),
        this.pos = new THREE.Vector3,
        this.dir = new THREE.Vector3,
        this.right = new THREE.Vector3,
        this.up = new THREE.Vector3,
        this.dist = 0,
        this.widthScale = 1,
        this.sharp = !1
    }
    return e.prototype.lerpPathPoints = function(e, t, i) {
        this.pos.lerpVectors(e.pos, t.pos, i),
        this.dir.lerpVectors(e.dir, t.dir, i),
        this.up.lerpVectors(e.up, t.up, i),
        this.right.lerpVectors(e.right, t.right, i),
        this.dist = (t.dist - e.dist) * i + e.dist,
        this.widthScale = (t.widthScale - e.widthScale) * i + e.widthScale
    }
    ,
    e.prototype.copy = function(e) {
        this.pos.copy(e.pos),
        this.dir.copy(e.dir),
        this.up.copy(e.up),
        this.right.copy(e.right),
        this.dist = e.dist,
        this.widthScale = e.widthScale
    }
    ,
    e
}();
Xl = new THREE.Vector3
    , Jl = new THREE.Vector3
    , Yl = new THREE.Vector3
    , Ql = new THREE.Matrix4
    , Zl = new THREE.QuadraticBezierCurve3;
var Kl = function() {
    function e() {
        classCallCheck(this, e),
        this.array = [],
        this.count = 0
    }
    return e.prototype.set = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .1
            , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10
            , r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
            , n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        if ((e = e.slice(0)).length < 2)
            return console.warn("PathPointList: points length less than 2."),
            void (this.count = 0);
        n && !e[0].equals(e[e.length - 1]) && e.push((new THREE.Vector3).copy(e[0]));
        for (var o = 0, s = e.length; o < s; o++)
            if (0 === o)
                this._start(e[o], e[o + 1], r);
            else if (o === s - 1)
                if (n) {
                    this._corner(e[o], e[1], t, i, r);
                    var a = this.array[0].dist;
                    this.array[0].copy(this.array[this.count - 1]),
                    this.array[0].dist = a
                } else
                    this._end(e[o]);
            else
                this._corner(e[o], e[o + 1], t, i, r)
    }
    ,
    e.prototype.distance = function() {
        return this.count > 0 ? this.array[this.count - 1].dist : 0
    }
    ,
    e.prototype._getByIndex = function(e) {
        return this.array[e] || (this.array[e] = new ql),
        this.array[e]
    }
    ,
    e.prototype._start = function(e, t, i) {
        this.count = 0;
        var r = this._getByIndex(this.count);
        if (r.pos.copy(e),
        r.dir.subVectors(t, e),
        i)
            r.up.copy(i);
        else {
            var n = Number.MAX_VALUE
                , o = Math.abs(r.dir.x)
                , s = Math.abs(r.dir.y)
                , a = Math.abs(r.dir.z);
            o < n && (n = o,
            r.up.set(1, 0, 0)),
            s < n && (n = s,
            r.up.set(0, 1, 0)),
            a < n && r.up.set(0, 0, 1)
        }
        r.right.crossVectors(r.dir, r.up).normalize(),
        r.up.crossVectors(r.right, r.dir).normalize(),
        r.dist = 0,
        r.widthScale = 1,
        r.sharp = !1,
        r.dir.normalize(),
        this.count++
    }
    ,
    e.prototype._end = function(e) {
        var t = this.array[this.count - 1]
            , i = this._getByIndex(this.count);
        i.pos.copy(e),
        i.dir.subVectors(e, t.pos);
        var r = i.dir.length();
        i.dir.normalize(),
        i.up.copy(t.up);
        var n = Xl.crossVectors(t.dir, i.dir);
        if (n.length() > Number.EPSILON) {
            n.normalize();
            var o = Math.acos(Math.min(Math.max(t.dir.dot(i.dir), -1), 1));
            i.up.applyMatrix4(Ql.makeRotationAxis(n, o))
        }
        i.right.crossVectors(i.dir, i.up).normalize(),
        i.dist = t.dist + r,
        i.widthScale = 1,
        i.sharp = !1,
        this.count++
    }
    ,
    e.prototype._corner = function(e, t, i, r, n) {
        if (i > 0 && r > 0) {
            for (var o = function(e, t, i, r, n, o) {
                var s = Xl.subVectors(t, e)
                    , a = Jl.subVectors(i, t)
                    , l = s.length()
                    , u = a.length();
                s.normalize(),
                a.normalize();
                var c = Math.min(.999999 * (n ? l / 2 : l), r);
                o.v0.copy(t).sub(s.multiplyScalar(c)),
                o.v1.copy(t);
                var h = Math.min(u / 2 * .999999, r);
                return o.v2.copy(t).add(a.multiplyScalar(h)),
                o
            }(this.array[this.count - 1].pos, e, t, i, this.count - 1 == 0, Zl).getPoints(r), s = 0; s < r; s++)
                this._sharpCorner(o[s], o[s + 1], n, 0 === s ? 1 : 0);
            o[r].equals(t) || this._sharpCorner(o[r], t, n, 2)
        } else
            this._sharpCorner(e, t, n, 0, !0)
    }
    ,
    e.prototype._sharpCorner = function(e, t, i) {
        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
            , n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4]
            , o = this.array[this.count - 1]
            , s = this._getByIndex(this.count)
            , a = Xl.subVectors(e, o.pos)
            , l = Jl.subVectors(t, e)
            , u = a.length();
        if (a.normalize(),
        l.normalize(),
        s.pos.copy(e),
        1 === r ? s.dir.copy(a) : 2 === r ? s.dir.copy(l) : (s.dir.addVectors(a, l),
        s.dir.normalize()),
        i)
            1 === s.dir.dot(i) ? s.right.crossVectors(l, i).normalize() : s.right.crossVectors(s.dir, i).normalize(),
            s.up.crossVectors(s.right, s.dir).normalize();
        else {
            s.up.copy(o.up);
            var c = Yl.crossVectors(o.dir, s.dir);
            if (c.length() > Number.EPSILON) {
                c.normalize();
                var h = Math.acos(Math.min(Math.max(o.dir.dot(s.dir), -1), 1));
                s.up.applyMatrix4(Ql.makeRotationAxis(c, h))
            }
            s.right.crossVectors(s.dir, s.up).normalize()
        }
        s.dist = o.dist + u;
        var p = a.dot(l);
        s.widthScale = Math.min(1 / Math.sqrt((1 + p) / 2), 1.415) || 1,
        s.sharp = Math.abs(p - 1) > .05 && n,
        this.count++
    }
    ,
    e
}();
$l = function(e) {
    function t() {
        var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3
            , n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        return isNaN(i) ? o._initByData(i.pathPointList, i.options, i.usage, n) : o._initByMaxVertex(i, n),
        o
    }
    return o(t, e),
    t.prototype._initByMaxVertex = function(e, t) {
        this.setAttribute("position", new THREE.BufferAttribute(new Float32Array(3 * e),3).setUsage(THREE.DynamicDrawUsage)),
        this.setAttribute("normal", new THREE.BufferAttribute(new Float32Array(3 * e),3).setUsage(THREE.DynamicDrawUsage)),
        this.setAttribute("uv", new THREE.BufferAttribute(new Float32Array(2 * e),2).setUsage(THREE.DynamicDrawUsage)),
        t && this.setAttribute("uv2", new THREE.BufferAttribute(new Float32Array(2 * e),2).setUsage(THREE.DynamicDrawUsage)),
        this.drawRange.start = 0,
        this.drawRange.count = 0,
        this.setIndex(e > 65536 ? new THREE.Uint32BufferAttribute(3 * e,1) : new THREE.Uint16BufferAttribute(3 * e,1))
    }
    ,
    t.prototype._initByData = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = arguments[2]
            , r = arguments[3]
            , n = eu(e, t, r);
        n && 0 !== n.count ? (this.setAttribute("position", new THREE.BufferAttribute(new Float32Array(n.position),3).setUsage(i || THREE.StaticDrawUsage)),
        this.setAttribute("normal", new THREE.BufferAttribute(new Float32Array(n.normal),3).setUsage(i || THREE.StaticDrawUsage)),
        this.setAttribute("uv", new THREE.BufferAttribute(new Float32Array(n.uv),2).setUsage(i || THREE.StaticDrawUsage)),
        r && this.setAttribute("uv2", new THREE.BufferAttribute(new Float32Array(n.uv2),2).setUsage(i || THREE.StaticDrawUsage)),
        this.setIndex(n.position.length / 3 > 65536 ? new THREE.Uint32BufferAttribute(n.indices,1) : new THREE.Uint16BufferAttribute(n.indices,1))) : this._initByMaxVertex(2, r)
    }
    ,
    t.prototype.update = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = !!this.getAttribute("uv2")
            , r = eu(e, t, i);
        r ? (this._updateAttributes(r.position, r.normal, r.uv, i ? r.uv2 : null, r.indices),
        this.drawRange.count = r.count) : this.drawRange.count = 0
    }
    ,
    t.prototype._resizeAttribute = function(e, t) {
        for (var i = this.getAttribute(e); i.array.length < t; ) {
            var r = i.array.length
                , n = new THREE.BufferAttribute(new Float32Array(2 * r),i.itemSize,i.normalized);
            n.name = i.name,
            n.usage = i.usage,
            this.setAttribute(e, n),
            i = n
        }
    }
    ,
    t.prototype._resizeIndex = function(e) {
        for (var t = this.getIndex(); t.array.length < e; ) {
            var i = t.array.length
                , r = new THREE.BufferAttribute(2 * i > 65535 ? new Uint32Array(2 * i) : new Uint16Array(2 * i),1);
            r.name = t.name,
            r.usage = t.usage,
            this.setIndex(r),
            t = r
        }
    }
    ,
    t.prototype._updateAttributes = function(e, t, i, r, n) {
        this._resizeAttribute("position", e.length);
        var o = this.getAttribute("position");
        o.array.set(e, 0),
        o.updateRange.count = e.length,
        o.needsUpdate = !0,
        this._resizeAttribute("normal", t.length);
        var s = this.getAttribute("normal");
        s.array.set(t, 0),
        s.updateRange.count = t.length,
        s.needsUpdate = !0,
        this._resizeAttribute("uv", i.length);
        var a = this.getAttribute("uv");
        if (a.array.set(i, 0),
        a.updateRange.count = i.length,
        a.needsUpdate = !0,
        r) {
            this._resizeAttribute("uv2", r.length);
            var l = this.getAttribute("uv2");
            l.array.set(r, 0),
            l.updateRange.count = r.length,
            l.needsUpdate = !0
        }
        this._resizeIndex(n.length);
        var u = this.getIndex();
        u.set(n, 0),
        u.updateRange.count = n.length,
        u.needsUpdate = !0
    }
    ,
    t
}(THREE.BufferGeometry);
function eu(e, t) {
    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
        , r = t.width || .1
        , n = void 0 !== t.progress ? t.progress : 1
        , o = void 0 === t.arrow || t.arrow
        , s = void 0 !== t.side ? t.side : "both"
        , a = r / 2
        , l = "both" !== s ? r / 2 : r
        , u = e.distance()
        , c = n * u;
    if (0 == u)
        return null;
    var h = a / l
        , p = a / u
        , d = 0
        , f = []
        , m = []
        , g = []
        , v = []
        , y = []
        , b = 0
        , _ = new THREE.Vector3
        , x = new THREE.Vector3
        , E = new THREE.Vector3
        , w = new THREE.Vector3
        , T = new THREE.Vector3
        , M = new THREE.Vector3;
    function C(e) {
        var t = 0 === f.length
            , r = e.sharp && !t
            , n = e.dist / l
            , o = e.dist / u
            , c = e.dir
            , C = e.up
            , S = e.right;
        if ("left" !== s ? _.copy(S).multiplyScalar(a * e.widthScale) : _.set(0, 0, 0),
        "right" !== s ? x.copy(S).multiplyScalar(-a * e.widthScale) : x.set(0, 0, 0),
        _.add(e.pos),
        x.add(e.pos),
        r) {
            E.fromArray(f, f.length - 6).sub(x),
            w.fromArray(f, f.length - 3).sub(_);
            var j = E.length() - w.length()
                , P = void 0
                , R = void 0;
            j > 0 ? (P = E,
            R = x) : (P = w,
            R = _),
            T.copy(P).setLength(Math.abs(j)).add(R);
            var D = M.copy(R).sub(T).normalize().dot(c) * M.copy(R).sub(T).length() * 2;
            M.copy(c).setLength(D).add(T),
            j > 0 ? (f.push(T.x, T.y, T.z, _.x, _.y, _.z, x.x, x.y, x.z, _.x, _.y, _.z, M.x, M.y, M.z, _.x, _.y, _.z),
            b += 6,
            y.push(b - 6, b - 8, b - 7, b - 6, b - 7, b - 5, b - 4, b - 6, b - 5, b - 2, b - 4, b - 1),
            d += 12) : (f.push(x.x, x.y, x.z, T.x, T.y, T.z, x.x, x.y, x.z, _.x, _.y, _.z, x.x, x.y, x.z, M.x, M.y, M.z),
            b += 6,
            y.push(b - 6, b - 8, b - 7, b - 6, b - 7, b - 5, b - 6, b - 5, b - 3, b - 2, b - 3, b - 1),
            d += 12),
            m.push(C.x, C.y, C.z, C.x, C.y, C.z, C.x, C.y, C.z, C.x, C.y, C.z, C.x, C.y, C.z, C.x, C.y, C.z),
            g.push(n - h, 0, n - h, 1, n, 0, n, 1, n + h, 0, n + h, 1),
            i && v.push(o - p, 0, o - p, 1, o, 0, o, 1, o + p, 0, o + p, 1)
        } else
            f.push(x.x, x.y, x.z, _.x, _.y, _.z),
            m.push(C.x, C.y, C.z, C.x, C.y, C.z),
            g.push(n, 0, n, 1),
            i && v.push(o, 0, o, 1),
            b += 2,
            t || (y.push(b - 2, b - 4, b - 3, b - 2, b - 3, b - 1),
            d += 6)
    }
    var S = new THREE.Vector3;
    function j(e) {
        var t = e.dir
            , n = e.up
            , o = e.right
            , c = e.dist / l
            , h = e.dist / u;
        "left" !== s ? _.copy(o).multiplyScalar(2 * a) : _.set(0, 0, 0),
        "right" !== s ? x.copy(o).multiplyScalar(2 * -a) : x.set(0, 0, 0),
        S.copy(t).setLength(3 * a),
        _.add(e.pos),
        x.add(e.pos),
        S.add(e.pos),
        f.push(x.x, x.y, x.z, _.x, _.y, _.z, S.x, S.y, S.z),
        m.push(n.x, n.y, n.z, n.x, n.y, n.z, n.x, n.y, n.z),
        g.push(c, "both" !== s ? "right" !== s ? -2 : 0 : -.5, c, "both" !== s ? "left" !== s ? 2 : 0 : 1.5, c + 1.5, "both" !== s ? 0 : .5),
        i && v.push(h, "both" !== s ? "right" !== s ? -2 : 0 : -.5, h, "both" !== s ? "left" !== s ? 2 : 0 : 1.5, h + 1.5 * r / u, "both" !== s ? 0 : .5),
        b += 3,
        y.push(b - 1, b - 3, b - 2),
        d += 3
    }
    var P = void 0;
    if (c > 0)
        for (var R = 0; R < e.count; R++) {
            var D = e.array[R];
            if (D.dist > c) {
                var A = e.array[R - 1];
                P = new ql;
                var k = (c - A.dist) / (D.dist - A.dist);
                P.lerpPathPoints(A, D, k),
                C(P);
                break
            }
            C(D)
        }
    else
        P = e.array[0];
    return o && j(P = P || e.array[e.count - 1]),
    {
        position: f,
        normal: m,
        uv: g,
        uv2: v,
        indices: y,
        count: d
    }
}
var tu = function(e) {
    function t() {
        var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1e3
            , n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return classCallCheck(this, t),
        s(this, e.call(this, i, n))
    }
    return o(t, e),
    t.prototype._initByData = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = arguments[2]
            , r = arguments[3]
            , n = iu(e, t, r);
        n && 0 !== n.count ? (this.setAttribute("position", new THREE.BufferAttribute(new Float32Array(n.position),3).setUsage(i || THREE.StaticDrawUsage)),
        this.setAttribute("normal", new THREE.BufferAttribute(new Float32Array(n.normal),3).setUsage(i || THREE.StaticDrawUsage)),
        this.setAttribute("uv", new THREE.BufferAttribute(new Float32Array(n.uv),2).setUsage(i || THREE.StaticDrawUsage)),
        r && this.setAttribute("uv2", new THREE.BufferAttribute(new Float32Array(n.uv2),2).setUsage(i || THREE.StaticDrawUsage)),
        this.setIndex(n.position.length / 3 > 65536 ? new THREE.Uint32BufferAttribute(n.indices,1) : new THREE.Uint16BufferAttribute(n.indices,1))) : this._initByMaxVertex(2, r)
    }
    ,
    t.prototype.update = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = !!this.getAttribute("uv2")
            , r = iu(e, t, i);
        r ? (this._updateAttributes(r.position, r.normal, r.uv, i ? r.uv2 : null, r.indices),
        this.drawRange.count = r.count) : this.drawRange.count = 0
    }
    ,
    t
}($l);
function iu(e, t) {
    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
        , r = t.radius || .1
        , n = void 0 !== t.progress ? t.progress : 1
        , o = Math.max(2, t.radialSegments || 8)
        , s = t.startRad || 0
        , a = 2 * r * Math.PI
        , l = e.distance()
        , u = n * l;
    if (0 == u)
        return null;
    var c = 0
        , h = []
        , p = []
        , d = []
        , f = []
        , m = []
        , g = 0
        , v = new THREE.Vector3;
    function y(e, t, r) {
        for (var n = 0 === h.length, o = e.dist / a, u = e.dist / l, y = 0; y <= r; y++) {
            var b = y;
            b == r && (b = 0),
            v.copy(e.up).applyAxisAngle(e.dir, s + 2 * Math.PI * b / r).normalize(),
            h.push(e.pos.x + v.x * t * e.widthScale, e.pos.y + v.y * t * e.widthScale, e.pos.z + v.z * t * e.widthScale),
            p.push(v.x, v.y, v.z),
            d.push(o, y / r),
            i && f.push(u, y / r),
            g++
        }
        if (!n)
            for (var _ = g - 2 * (r + 1), x = g - (r + 1), E = 0; E < r; E++)
                m.push(x + E, _ + E, _ + E + 1, x + E, _ + E + 1, x + E + 1),
                c += 6
    }
    if (u > 0)
        for (var b = 0; b < e.count; b++) {
            var _ = e.array[b];
            if (_.dist > u) {
                var x = e.array[b - 1]
                    , E = new ql
                    , w = (u - x.dist) / (_.dist - x.dist);
                E.lerpPathPoints(x, _, w),
                y(E, r, o);
                break
            }
            y(_, r, o)
        }
    return {
        position: h,
        normal: p,
        uv: d,
        uv2: f,
        indices: m,
        count: c
    }
}
var RouteLine = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.arrowFlag = !0,
        n.side = "both",
        n.pathGeometry = new $l,
        n.pathPointList = new Kl,
        n
    }
    return o(t, e),
    t.prototype._updateByPoints = function() {
        e.prototype._updateByPoints.call(this),
        this.pathGeometry.update(this.pathPointList, {
            width: this.pathWidth,
            side: this.side,
            arrow: this.arrowFlag
        }),
        this.pathGeometry.computeBoundingSphere()
    }
    ,
    t.prototype.setup = function(t) {
        var i = Utils.parseValue(t.arrowFlag, t.arrowCap);
        this.arrowFlag = Utils.parseValue(i, !0),
        e.prototype.setup.call(this, t)
    }
    ,
    _createClass(t, [{
        key: "progress",
        set: function(e) {
            this.pathGeometry.update(this.pathPointList, {
                width: this.pathWidth,
                arrow: this.arrowFlag,
                side: this.side,
                progress: THING.Math.clamp(e, 0, 1)
            })
        }
    }, {
        key: "scrollUVRange",
        set: function(e) {
            var t = this.length / this.pathWidth;
            this.uvRatio = t * e
        }
    }, {
        key: "arrowCap",
        set: function(e) {
            this.arrowFlag = e,
            this.pathGeometry.update(this.pathPointList, {
                width: this.pathWidth,
                arrow: this.arrowFlag,
                side: this.side
            })
        },
        get: function() {
            return this.arrowFlag
        }
    }, {
        key: "isRouteLine",
        get: function() {
            return !0
        }
    }]),
    t
}(LineBase);
PolygonLine = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.pathWidth = .2,
        n.pathRadialSegments = 8,
        n.pathStartRad = 0,
        n.pathGeometry = new tu,
        n.pathPointList = new Kl,
        n.pathUp = void 0,
        n.pathMaterial = new THREE.MeshStandardMaterial({
            transparent: !0,
            roughness: .5,
            metalness: .5
        }),
        n
    }
    return o(t, e),
    t.prototype._setupPathLine = function(t) {
        t = t || {},
        e.prototype._setupPathLine.call(this, t)
    }
    ,
    t.prototype._updateByPoints = function() {
        e.prototype._updateByPoints.call(this),
        this.pathGeometry.update(this.pathPointList, {
            radius: this.pathWidth,
            radialSegments: this.pathRadialSegments,
            startRad: this.pathStartRad
        }),
        this.pathGeometry.computeBoundingSphere()
    }
    ,
    _createClass(t, [{
        key: "progress",
        set: function(e) {
            this.pathGeometry.update(this.pathPointList, {
                radius: this.pathWidth,
                radialSegments: this.pathRadialSegments,
                progress: THING.Math.clamp(e, 0, 1),
                startRad: this.pathStartRad
            })
        }
    }, {
        key: "scrollUVRange",
        set: function(e) {
            var t = this.length / (2 * this.pathWidth * Math.PI);
            this.uvRatio = t * e
        }
    }, {
        key: "isPolygonLine",
        get: function() {
            return !0
        }
    }]),
    t
}(LineBase);
Points = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._pointSize = 1,
        n._pointsMesh = null,
        n
    }
    return o(t, e),
    t.prototype._updateByPoints = function() {
        this.app.resourceManager.remove(this._pointsMesh);
        var e = (new THREE.BufferGeometry).setFromPoints(this._points)
            , t = new THREE.PointsMaterial({
            size: this._pointSize,
            sizeAttenuation: !1
        });
        this._pointsMesh = new THREE.Points(e,t),
        this.node.add(this._pointsMesh)
    }
    ,
    t.prototype._beforeSetupComplete = function(e) {
        this._pointSize = e.pointSize || this._pointSize;
        var t = e.points;
        t && this.addPoints(t)
    }
    ,
    t
}(Al);
su = function e() {
    classCallCheck(this, e),
    this.strId = "",
    this.fPPAfterImageValue = 0,
    this.listGroups = new Array;
    var t = new au;
    this.listGroups[0] = t,
    this._attr = "ParticleData"
};
su.prototype = {
    getAttr: function() {
        return this._attr
    }
};
var au = function e() {
    classCallCheck(this, e),
    this.strId = "",
    this.texture = new uu,
    this.fFixedTimeStep = .33,
    this.strUseMesh = "false",
    this.strMeshUrl = "BuildIn/Box",
    this.arrayMeshParams = new Array,
    this.arrayMeshParams.push(1),
    this.arrayMeshParams.push(1),
    this.arrayMeshParams.push(1),
    this.arrayMeshParams.push(1),
    this.arrayMeshParams.push(1),
    this.arrayMeshParams.push(1),
    this.strHasPerspective = "true",
    this.strIsColorize = "true",
    this.iBlendingMode = 1,
    this.strIsTransparent = "true",
    this.fAlphaTest = 0,
    this.strIsDepthWrite = "false",
    this.strIsDepthTest = "false",
    this.strIsFog = "false",
    this.strEnableTrail = "false",
    this.textureTrail = new uu,
    this.fTrailLife = .5,
    this.fTrailWidthStart = 1,
    this.fTrailWidthEnd = 1,
    this.fScale = window.innerHeight / 2,
    this.iMaxParticleCount = 500,
    this.vec4Quaternion = new THREE.Vector4(0,0,0,1),
    this.listEmitters = new Array;
    var t = new lu;
    this.listEmitters[0] = t
};
lu = function e() {
    classCallCheck(this, e),
    this.strId = "",
    this.iDistribution = 1,
    this.iParticleCount = 100,
    this.fDuration = -1,
    this.strIsStatic = "false",
    this.strIsLookAtCamera = "false",
    this.strIsLookAtCameraOnlyY = "false",
    this.fActiveMultiplier = 1,
    this.iDirection = 1,
    this.maxAge = new cu,
    this.position = new hu,
    this.velocity = new pu,
    this.acceleration = new du,
    this.drag = new fu,
    this.wiggle = new mu,
    this.rotation = new vu,
    this.trail = new gu,
    this.listColor = new Array;
    var t = new yu;
    this.listColor[0] = t,
    this.listOpacity = new Array;
    var i = new bu;
    this.listOpacity[0] = i,
    this.listSize = new Array;
    var n = new _u;
    this.listSize[0] = n,
    this.listAngle = new Array;
    var o = new xu;
    this.listAngle[0] = o
};
uu = function e() {
    classCallCheck(this, e),
    this.name = "32x32_star.png",
    this.url = "http://static.3dmomoda.com/textures/18092617nyspq5moaka1i2fhvs1hh66s.png",
    this.vec2Frames = new THREE.Vector2(1,1),
    this.iFrameCount = 1,
    this.iLoop = 1
};
cu = function e() {
    classCallCheck(this, e),
    this.fValue = 1,
    this.fSpread = 1
};
hu = function e() {
    classCallCheck(this, e),
    this.vec3Value = new THREE.Vector3(0,0,0),
    this.vec3Spread = new THREE.Vector3(0,0,0),
    this.vec3SpreadClamp = new THREE.Vector3(0,0,0),
    this.fRadius = 0,
    this.vec3RadiusScale = new THREE.Vector3(1,1,1),
    this.iDistribution = 1,
    this.strIsRandomise = "false"
};
pu = function e() {
    classCallCheck(this, e),
    this.vec3Value = new THREE.Vector3(0,10,0),
    this.vec3Spread = new THREE.Vector3(10,0,10),
    this.iDistribution = 1,
    this.strIsRandomise = "false"
};
du = function e() {
    classCallCheck(this, e),
    this.vec3Value = new THREE.Vector3(0,0,0),
    this.vec3Spread = new THREE.Vector3(0,0,0),
    this.iDistribution = 1,
    this.strIsRandomise = "false"
};
fu = function e() {
    classCallCheck(this, e),
    this.fValue = 0,
    this.fSpread = 0,
    this.strIsRandomise = "false"
};
mu = function e() {
    classCallCheck(this, e),
    this.fValue = 0,
    this.fSpread = 0
};
gu = function e() {
    classCallCheck(this, e),
    this.fValue = 0,
    this.fSpread = 0,
    this.fStep = 0,
    this.fStepSpread = 0
};
vu = function e() {
    classCallCheck(this, e),
    this.vec3Axis = new THREE.Vector3(0,0,0),
    this.vec3AxisSpread = new THREE.Vector3(0,0,0),
    this.fAngle = 0,
    this.fAngleSpread = 0,
    this.strIsStatic = "false",
    this.vec3Center = new THREE.Vector3(0,0,0),
    this.strIsRandomise = "false"
};
yu = function e() {
    classCallCheck(this, e),
    this.vec3Value = new THREE.Vector3(1,1,1),
    this.vec3Spread = new THREE.Vector3(0,0,0),
    this.strIsRandomise = "false"
};
bu = function e() {
    classCallCheck(this, e),
    this.fValue = 1,
    this.fSpread = 0,
    this.strIsRandomise = "false"
};
_u = function e() {
    classCallCheck(this, e),
    this.fValue = 1,
    this.fSpread = 0,
    this.strIsRandomise = "false"
};
xu = function e() {
    classCallCheck(this, e),
    this.fValue = 0,
    this.fSpread = 0,
    this.strIsRandomise = "false"
};
Eu = function() {
    var e = "[BufferGeometryHelper.js] : ";
    this.bEnableLog = !0,
    this.bufferGeometry = null,
    this.jsonLoader = new THREE.BufferGeometryLoader,
    this.objLoader = new THREE.OBJLoader,
    this.strMeshUrl = null;
    var i = this;
    this.init = function(r, n) {
        if (i.bEnableLog && THING.Utils.log(e + "[init];"),
        null != n && null != n) {
            if (null == r || null == r || "object" != (void 0 === r ? "undefined" : t(r)))
                return THING.Utils.error(e + "[init] : options == null;"),
                void n(null);
            if (null == r.strMeshUrl || null == r.strMeshUrl || "string" != typeof r.strMeshUrl)
                return THING.Utils.error(e + "[init] : options.strMeshUrl == null;"),
                void n(null);
            i.strMeshUrl = r.strMeshUrl,
            null != i.bufferGeometry && null != i.bufferGeometry && (i.bufferGeometry.dispose(),
            i.bufferGeometry = null);
            if (r.strMeshUrl.indexOf("BuildIn") >= 0) {
                var o = !1;
                return r.strMeshUrl.indexOf("Box") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a BoxBufferGeometry;"),
                o = !i.checkParams(r.params, 3),
                i.bufferGeometry = o ? new THREE.BoxBufferGeometry(1,1,1) : new THREE.BoxBufferGeometry(r.params[0],r.params[1],r.params[2])),
                r.strMeshUrl.indexOf("Cylinder") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a CylinderBufferGeometry;"),
                o = !i.checkParams(r.params, 4),
                i.bufferGeometry = o ? new THREE.CylinderBufferGeometry(1,1,1,6) : new THREE.CylinderBufferGeometry(r.params[0],r.params[1],r.params[2],r.params[3] <= 12 ? r.params[3] : 12)),
                r.strMeshUrl.indexOf("Cone") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a ConeBufferGeometry;"),
                o = !i.checkParams(r.params, 3),
                i.bufferGeometry = o ? new THREE.ConeBufferGeometry(1,1,6) : new THREE.ConeBufferGeometry(r.params[0],r.params[1],r.params[2] <= 12 ? r.params[2] : 12)),
                r.strMeshUrl.indexOf("Circle") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a CircleBufferGeometry;"),
                o = !i.checkParams(r.params, 2),
                i.bufferGeometry = o ? new THREE.CircleBufferGeometry(1,6) : new THREE.CircleBufferGeometry(r.params[0],r.params[1] <= 12 ? r.params[1] : 12)),
                r.strMeshUrl.indexOf("Dodecahedron") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a DodecahedronBufferGeometry;"),
                o = !i.checkParams(r.params, 2),
                i.bufferGeometry = o ? new THREE.DodecahedronBufferGeometry(1,0) : new THREE.DodecahedronBufferGeometry(r.params[0],r.params[1] <= 1 ? r.params[1] : 1)),
                r.strMeshUrl.indexOf("Icosahedron") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a IcosahedronBufferGeometry;"),
                o = !i.checkParams(r.params, 2),
                i.bufferGeometry = o ? new THREE.IcosahedronBufferGeometry(1,0) : new THREE.IcosahedronBufferGeometry(r.params[0],r.params[1] <= 1 ? r.params[1] : 1)),
                r.strMeshUrl.indexOf("Octahedron") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a OctahedronBufferGeometry;"),
                o = !i.checkParams(r.params, 2),
                i.bufferGeometry = o ? new THREE.OctahedronBufferGeometry(1,0) : new THREE.OctahedronBufferGeometry(r.params[0],r.params[1] <= 2 ? r.params[1] : 1)),
                r.strMeshUrl.indexOf("Plane") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a PlaneBufferGeometry;"),
                o = !i.checkParams(r.params, 2),
                i.bufferGeometry = o ? new THREE.PlaneBufferGeometry(1,0) : new THREE.PlaneBufferGeometry(r.params[0],r.params[1])),
                r.strMeshUrl.indexOf("Ring") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a RingBufferGeometry;"),
                o = !i.checkParams(r.params, 3),
                i.bufferGeometry = o ? new THREE.RingBufferGeometry(1,2,12,1) : new THREE.RingBufferGeometry(r.params[0],r.params[1],r.params[2] <= 12 ? r.params[2] : 12,1)),
                r.strMeshUrl.indexOf("Sphere") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a SphereBufferGeometry;"),
                o = !i.checkParams(r.params, 3),
                i.bufferGeometry = o ? new THREE.SphereBufferGeometry(1,8,8) : new THREE.SphereBufferGeometry(r.params[0],r.params[1] <= 12 ? r.params[1] : 12,r.params[2] <= 12 ? r.params[2] : 12)),
                r.strMeshUrl.indexOf("Tetrahedron") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a TetrahedronBufferGeometry;"),
                o = !i.checkParams(r.params, 2),
                i.bufferGeometry = o ? new THREE.TetrahedronBufferGeometry(1,0) : new THREE.TetrahedronBufferGeometry(r.params[0],r.params[1] <= 2 ? r.params[1] : 2)),
                r.strMeshUrl.indexOf("Torus") >= 0 && r.strMeshUrl.indexOf("TorusKnot") < 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a TorusBufferGeometry;"),
                o = !i.checkParams(r.params, 4),
                i.bufferGeometry = o ? new THREE.TorusBufferGeometry(1,1,8,8) : new THREE.TorusBufferGeometry(r.params[0],r.params[1],r.params[2] <= 12 ? r.params[2] : 12,r.params[3] <= 12 ? r.params[3] : 12)),
                r.strMeshUrl.indexOf("TorusKnot") >= 0 && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a TorusKnotBufferGeometry;"),
                o = !i.checkParams(r.params, 6),
                i.bufferGeometry = o ? new THREE.TorusKnotBufferGeometry(1,1,32,8,2,3) : new THREE.TorusKnotBufferGeometry(r.params[0],r.params[1],r.params[2] <= 32 ? r.params[2] : 32,r.params[3] <= 12 ? r.params[3] : 12,r.params[4] <= 12 ? r.params[4] : 12,r.params[5] <= 12 ? r.params[5] : 12)),
                void n(i.bufferGeometry)
            }
            var s = r.strMeshUrl.indexOf(".json");
            s >= 0 && s + ".json".length == r.strMeshUrl.length && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a .json file to BufferGeometry;"),
            i.jsonLoader.load(Globals.strParticleMeshRootPath + r.strMeshUrl, (function(t) {
                return null != t && null != t ? (i.bufferGeometry = t,
                void n(i.bufferGeometry)) : (THING.Utils.error(e + "[init] : failed load the .json file to BufferGeometry; strMeshUrl = " + r.strMeshUrl),
                void n(null))
            }
            )));
            var a = r.strMeshUrl.indexOf(".obj");
            a >= 0 && a + ".obj".length == r.strMeshUrl.length && (i.bEnableLog && THING.Utils.log(e + "[init] : it's a .obj file to BufferGeometry;"),
            i.objLoader.load(Globals.strParticleMeshRootPath + r.strMeshUrl, (function(t) {
                if (null != t && null != t && null != t.children) {
                    for (var o = null, s = 0, a = t.children.length; s < a; s++)
                        if (t.children[s]instanceof THREE.Mesh) {
                            o = t.children[s];
                            break
                        }
                    if (null != o) {
                        var l = (new THREE.BufferGeometry).fromGeometry(o.geometry);
                        return null != l && null != l ? (i.bufferGeometry = l,
                        void n(i.bufferGeometry)) : (THING.Utils.error(e + "[init] : failed transform the .obj file to BufferGeometry; strMeshUrl = " + r.strMeshUrl),
                        void n(null))
                    }
                    return THING.Utils.error(e + "[init] : failed load the .obj file to BufferGeometry; can not find a mesh; strMeshUrl = " + r.strMeshUrl),
                    void n(null)
                }
            }
            ), (function(e) {}
            ), (function(t) {
                THING.Utils.error(e + "[init] : failed load the .obj file to BufferGeometry; strMeshUrl = " + r.strMeshUrl + "; error = " + t),
                n(null)
            }
            )))
        } else
            THING.Utils.error(e + "[init] : onFinished == null;")
    }
    ,
    this.checkParams = function(i, r) {
        if (null == i || null == i || "object" != (void 0 === i ? "undefined" : t(i)))
            return THING.Utils.warn(e + "[checkParams] : params == null;"),
            !1;
        if (i.length < r)
            return THING.Utils.warn(e + "[checkParams] : params.length < " + r),
            !1;
        for (var n = 0; n < r; n++)
            if (null == i[n] || null == i[n] || "number" != typeof i[n])
                return THING.Utils.warn(e + "[checkParams] : error params[" + n + "];"),
                !1;
        return !0
    }
};
wu = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this._options = t,
        this._emitter = i,
        this._particleGroup = n,
        this._emitter || this.refresh()
    }
    return e.prototype.cloneOptions = function() {
        return Utils.cloneObject(this._options, !1, null, (function(e, t) {
            if (Utils.isFunction(e.clone))
                return e.clone()
        }
        ))
    }
    ,
    e.prototype.refresh = function() {
        this._emitter && (this._particleGroup._group.removeEmitter(this._emitter),
        this._emitter = null);
        var e = this.cloneOptions();
        this._particleGroup._options.useMesh ? this._emitter = new MSPE.Emitter(e) : this._emitter = new SPE.Emitter(e),
        this._particleGroup._group.addEmitter(this._emitter);
        var t = this._particleGroup._particleSystem.node
            , i = Utils.parseValue(t.userData.skipBoundingBox, !1);
        t.traverse((function(e) {
            e.userData.skipBoundingBox = i
        }
        ))
    }
    ,
    e.prototype.setAttributeOptions = function(e, t) {
        Utils.isUndefined(t) || "{}" === JSON.stringify(t) || Utils.isUndefined(this.options[e]) || (Utils.isObject(this.options[e]) ? Utils.mergeObject(this.options[e], t, !0) : this.options[e] = t,
        this.refresh())
    }
    ,
    _createClass(e, [{
        key: "options",
        set: function(e) {
            e && (Utils.mergeObject(this._options, e, !0),
            this.refresh())
        },
        get: function() {
            return this._options
        }
    }, {
        key: "maxAge",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("maxAge", e)
        }
    }, {
        key: "position",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("position", e)
        }
    }, {
        key: "radius",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("radius", e)
        }
    }, {
        key: "velocity",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("velocity", e)
        }
    }, {
        key: "acceleration",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("acceleration", e)
        }
    }, {
        key: "drag",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("drag", e)
        }
    }, {
        key: "wiggle",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("wiggle", e)
        }
    }, {
        key: "rotation",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("rotation", e)
        }
    }, {
        key: "color",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("color", e)
        }
    }, {
        key: "opacity",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("opacity", e)
        }
    }, {
        key: "size",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("size", e)
        }
    }, {
        key: "angle",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("angle", e)
        }
    }, {
        key: "type",
        set: function(e) {
            this.setAttributeOptions("type", e)
        }
    }, {
        key: "particleCount",
        set: function(e) {
            this.setAttributeOptions("particleCount", e)
        }
    }, {
        key: "duration",
        set: function(e) {
            this.setAttributeOptions("duration", e)
        }
    }, {
        key: "isStatic",
        set: function(e) {
            this.setAttributeOptions("isStatic", e)
        }
    }, {
        key: "isLookAtCamera",
        set: function(e) {
            this.setAttributeOptions("isLookAtCamera", e)
        }
    }, {
        key: "isLookAtCameraOnlyY",
        set: function(e) {
            this.setAttributeOptions("isLookAtCameraOnlyY", e)
        }
    }, {
        key: "activeMultiplier",
        set: function(e) {
            this.setAttributeOptions("activeMultiplier", e)
        }
    }, {
        key: "direction",
        set: function(e) {
            this.setAttributeOptions("direction", e)
        }
    }]),
    e
}();
Tu = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this._options = t,
        this._group = i,
        this._particleSystem = n,
        this._emitters = [],
        this._group || this.refresh()
    }
    return e.prototype.setAttributeOptions = function(e, t) {
        Utils.isUndefined(t) || "{}" === JSON.stringify(t) || Utils.isUndefined(this.options[e]) || (Utils.isObject(this.options[e]) ? Utils.mergeObject(this.options[e], t, !0) : this.options[e] = t,
        this.refresh())
    }
    ,
    e.prototype.cloneOptions = function() {
        var e = Utils.cloneObject(this._options, !1, (function(e) {
            return "texture" != e && "bufferGeometry" != e
        }
        ), (function(e, t) {
            if (Utils.isFunction(e.clone))
                return e.clone()
        }
        ))
            , t = this._options.vec4Quaternion;
        return t && (e.vec4Quaternion = t.clone()),
        e
    }
    ,
    e.prototype.refresh = function() {
        -1 === this._particleSystem._groups.indexOf(this) && this._particleSystem._groups.push(this);
        var e = {};
        this._group && this._group.mesh && (this._particleSystem.node.remove(this._group.mesh),
        e = Utils.cloneObject(this._group.mesh.userData));
        for (var t = 0; t < this._emitters.length; t++) {
            var i = this._emitters[t];
            this._group.removeEmitter(i._emitter)
        }
        var r = this.cloneOptions();
        r.useMesh ? (this._group = new MSPE.Group(r),
        this._group.mesh.userData = e) : (this._group = new SPE.Group(r),
        this._group.mesh.userData = e);
        for (t = 0; t < this._emitters.length; t++) {
            var n = this._emitters[t]
                , o = n.cloneOptions();
            for (var s in this._particleSystem._particleOptions) {
                var a = this._particleSystem._particleOptions[s];
                Utils.isNull(a) || (o[s] = a)
            }
            r.useMesh ? n._emitter = new MSPE.Emitter(o) : n._emitter = new SPE.Emitter(o),
            this._group.addEmitter(n._emitter)
        }
        var l = this._group.mesh;
        l && (this._particleSystem.node.add(l),
        l.setFrustumCulled(!1))
    }
    ,
    e.prototype.tick = function(e, t) {
        this._group.tick(e, t)
    }
    ,
    e.prototype.addEmitter = function(e) {
        return new wu(e,null,this)
    }
    ,
    e.prototype.removeEmitter = function(e) {
        for (var t = 0; t < this._emitters.length; t++)
            if (e == this._emitters[t]) {
                this._emitters.splice(t, 1),
                this._group.removeEmitter(e._emitter);
                break
            }
    }
    ,
    _createClass(e, [{
        key: "options",
        set: function(e) {
            e && (Utils.mergeObject(this._options, e, !0),
            this.refresh())
        },
        get: function() {
            return this._options
        }
    }, {
        key: "emitters",
        get: function() {
            return this._emitters
        }
    }, {
        key: "texture",
        set: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            this.setAttributeOptions("texture", e)
        }
    }, {
        key: "fixedTimeStep",
        set: function(e) {
            this.setAttributeOptions("fixedTimeStep", e)
        }
    }, {
        key: "hasPerspective",
        set: function(e) {
            this.setAttributeOptions("hasPerspective", e)
        }
    }, {
        key: "colorize",
        set: function(e) {
            this.setAttributeOptions("colorize", e)
        }
    }, {
        key: "blending",
        set: function(e) {
            this.setAttributeOptions("blending", e)
        }
    }, {
        key: "transparent",
        set: function(e) {
            this.setAttributeOptions("transparent", e)
        }
    }, {
        key: "alphaTest",
        set: function(e) {
            this.setAttributeOptions("alphaTest", e)
        }
    }, {
        key: "depthWrite",
        set: function(e) {
            this.setAttributeOptions("depthWrite", e)
        }
    }, {
        key: "depthTest",
        set: function(e) {
            this.setAttributeOptions("depthTest", e)
        }
    }, {
        key: "fog",
        set: function(e) {
            this.setAttributeOptions("fog", e)
        }
    }, {
        key: "scale",
        set: function(e) {
            this.setAttributeOptions("scale", e)
        }
    }, {
        key: "maxParticleCount",
        set: function(e) {
            this.setAttributeOptions("maxParticleCount", e)
        }
    }, {
        key: "useMesh",
        set: function(e) {
            this.setAttributeOptions("useMesh", e)
        }
    }, {
        key: "vec4Quaternion",
        set: function(e) {
            this.setAttributeOptions("vec4Quaternion", e)
        }
    }]),
    e
}();
ParticleSystem = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._groups = [],
        n._particleOptions = {},
        n._groupOptions = {},
        n._speed = 1,
        n
    }
    return o(t, e),
    t.prototype._beforeSetupComplete = function() {
        var e = this;
        this.style.beforeSetRenderOrder = function(t) {
            e.node.renderOrder = t
        }
    }
    ,
    t.prototype.loadFromURL = function(e, t) {
        var i = this;
        e.node || (e.node = new THREE.Group);
        var r = e.url
            , n = this.app.particleResource.get(r);
        n ? this.loadComplete(n, e, t) : this.app.particleResource.download(r, (function(r) {
            i.loadComplete(r, e, t)
        }
        ))
    }
    ,
    t.prototype.setupFromData = function(t) {
        var i = this
            , r = t.data;
        this.loadComplete(r, t, (function() {
            e.prototype.setupFromData.call(i, t)
        }
        ))
    }
    ,
    t.prototype.loadComplete = function(e, t, i) {
        this.setupParticleData(e, t, i),
        this.setupUserData(t)
    }
    ,
    t.prototype.customSetup = function(e) {
        this.tickable = !0
    }
    ,
    t.prototype.update = function(t) {
        t *= this._speed,
        e.prototype.update.call(this, t);
        for (var i = 0; i < this._groups.length; i++) {
            this._groups[i].tick(t, this.app.renderCamera)
        }
        return !0
    }
    ,
    t.prototype.parseEmitterOptions = function(e, t) {
        var i = new THREE.Vector3(e.position.vec3Value.x,e.position.vec3Value.y,e.position.vec3Value.z)
            , r = new THREE.Vector3(e.position.vec3Spread.x,e.position.vec3Spread.y,e.position.vec3Spread.z)
            , n = new THREE.Vector3(e.position.vec3SpreadClamp.x,e.position.vec3SpreadClamp.y,e.position.vec3SpreadClamp.z)
            , o = !1;
        o = "true" == e.position.strIsRandomise.valueOf();
        var s = new THREE.Vector3(e.velocity.vec3Value.x,e.velocity.vec3Value.y,e.velocity.vec3Value.z)
            , a = new THREE.Vector3(e.velocity.vec3Spread.x,e.velocity.vec3Spread.y,e.velocity.vec3Spread.z);
        e.velocity.strIsRandomise.valueOf();
        var l = new THREE.Vector3(e.acceleration.vec3Value.x,e.acceleration.vec3Value.y,e.acceleration.vec3Value.z)
            , u = new THREE.Vector3(e.acceleration.vec3Spread.x,e.acceleration.vec3Spread.y,e.acceleration.vec3Spread.z)
            , c = !1;
        c = "true" == e.acceleration.strIsRandomise.valueOf();
        var h = !1;
        h = "true" == e.strIsStatic.valueOf();
        var p = new THREE.Vector3(e.rotation.vec3Axis.x,e.rotation.vec3Axis.y,e.rotation.vec3Axis.z)
            , d = new THREE.Vector3(e.rotation.vec3AxisSpread.x,e.rotation.vec3AxisSpread.y,e.rotation.vec3AxisSpread.z)
            , f = new THREE.Vector3(e.rotation.vec3Center.x,e.rotation.vec3Center.y,e.rotation.vec3Center.z)
            , m = !1;
        m = "true" == e.rotation.strIsStatic.valueOf();
        var g = !1;
        g = "true" == e.rotation.strIsRandomise.valueOf();
        var v = new Array
            , y = new Array
            , b = new Array;
        if (e.listColor.length > 0)
            for (var _ = 0, x = e.listColor.length; _ < x; _++)
                v.push(new THREE.Color(e.listColor[_].vec3Value.x,e.listColor[_].vec3Value.y,e.listColor[_].vec3Value.z)),
                y.push(new THREE.Vector3(e.listColor[_].vec3Spread.x,e.listColor[_].vec3Spread.y,e.listColor[_].vec3Spread.z)),
                "true" == e.listColor[_].strIsRandomise.valueOf() ? b.push(!0) : b.push(!1);
        else
            v.push(new THREE.Color("white")),
            y.push(new THREE.Vector3(0,0,0)),
            b.push(!1);
        var E = new Array
            , w = new Array
            , T = new Array;
        if (e.listOpacity.length > 0)
            for (_ = 0,
            x = e.listOpacity.length; _ < x; _++)
                E.push(e.listOpacity[_].fValue),
                w.push(e.listOpacity[_].fSpread),
                "true" == e.listOpacity[_].strIsRandomise.valueOf() ? T.push(!0) : T.push(!1);
        else
            E.push(1),
            w.push(0),
            T.push(!1);
        var M = new Array
            , C = new Array
            , S = new Array;
        if (e.listSize.length > 0)
            for (_ = 0,
            x = e.listSize.length; _ < x; _++)
                M.push(e.listSize[_].fValue),
                C.push(e.listSize[_].fSpread),
                "true" == e.listSize[_].strIsRandomise.valueOf() ? S.push(!0) : S.push(!1);
        else
            M.push(1),
            C.push(0),
            S.push(!1);
        var j = new Array
            , P = new Array
            , R = new Array;
        if (e.listAngle.length > 0)
            for (_ = 0,
            x = e.listAngle.length; _ < x; _++)
                j.push(e.listAngle[_].fValue),
                P.push(e.listAngle[_].fSpread),
                "true" == e.listAngle[_].strIsRandomise.valueOf() ? S.push(!0) : R.push(!1);
        else
            j.push(0),
            P.push(0),
            R.push(!1);
        var D = {
            type: e.iDistribution,
            particleCount: e.iParticleCount,
            duration: e.fDuration <= 0 ? void 0 : e.fDuration,
            isStatic: h,
            isLookAtCamera: "true" == e.strIsLookAtCamera,
            isLookAtCameraOnlyY: "true" == e.strIsLookAtCameraOnlyY,
            activeMultiplier: e.fActiveMultiplier,
            direction: e.iDirection,
            maxAge: {
                value: e.maxAge.fValue,
                spread: e.maxAge.fSpread
            },
            position: {
                value: i,
                spread: r,
                spreadClamp: n,
                radius: e.position.fRadius,
                radiusScale: new THREE.Vector3(1,1,1),
                randomise: o
            },
            radius: {
                value: 5,
                spread: 0,
                scale: new THREE.Vector3(1,1,1),
                spreadClamp: new THREE.Vector3(2,2,2)
            },
            velocity: {
                value: s,
                spread: a,
                randomise: !1
            },
            acceleration: {
                value: l,
                spread: u,
                randomise: c
            },
            drag: {
                value: e.drag.fValue,
                spread: e.drag.fSpread
            },
            wiggle: {
                value: e.wiggle.fValue,
                spread: e.wiggle.fSpread
            },
            rotation: {
                axis: p,
                axisSpread: d,
                angle: e.rotation.fAngle,
                angleSpread: e.rotation.fAngleSpread,
                static: m,
                center: f,
                randomise: g
            },
            color: {
                value: v,
                spread: y,
                randomise: b
            },
            opacity: {
                value: E,
                spread: w,
                randomise: T
            },
            size: {
                value: M,
                spread: C,
                randomise: S
            },
            angle: {
                value: j,
                spread: P,
                randomise: R
            }
        }
            , A = this.app.renderer.capabilities.maxVaryings;
        for (var k in A > 15 && (D.trail = {
            value: e.trail.fValue,
            spread: e.trail.fSpread,
            step: e.trail.fStep,
            stepSpread: e.trail.fStepSpread
        }),
        this._particleOptions) {
            var O = this._particleOptions[k];
            Utils.isNull(O) || (D[k] = O)
        }
        return D
    }
    ,
    t.prototype.parseGroupOptions = function(e, t) {
        var i = this.app.calcRect()
            , r = {
            texture: {
                value: t,
                frames: e.texture.vec2Frames,
                frameCount: e.texture.iFrameCount,
                loop: e.texture.iLoop
            },
            fixedTimeStep: e.fFixedTimeStep,
            hasPerspective: "true" == e.strHasPerspective,
            colorize: "true" == e.strIsColorize,
            blending: e.iBlendingMode,
            transparent: "true" == e.strIsTransparent,
            alphaTest: e.fAlphaTest,
            depthWrite: "true" == e.strIsDepthWrite,
            depthTest: "true" == e.strIsDepthTest,
            fog: "true" == e.strIsFog,
            scale: i.height / 2,
            maxParticleCount: e.iMaxParticleCount,
            useMesh: "true" == e.strUseMesh
        }
            , n = e.vec4Quaternion;
        for (var o in n && (r.vec4Quaternion = new THREE.Quaternion(n.x,n.y,n.z,n.w)),
        this._groupOptions) {
            var s = this._groupOptions[o];
            Utils.isNull(s) || (r[o] = s)
        }
        return r
    }
    ,
    t.prototype.setupParticleEmitter = function(e, t, i) {
        var r = this.parseEmitterOptions(e, t)
            , n = new wu(r,null,i);
        i._emitters.push(n)
    }
    ,
    t.prototype.setupParticleEmitters = function(e, t) {
        for (var i = 0; i < e.listEmitters.length; i++) {
            var r = e.listEmitters[i];
            this.setupParticleEmitter(r, e, t)
        }
        this.static && this.node._synMatrixWorld()
    }
    ,
    t.prototype.createParticleGroup = function(e) {
        return new Tu(e,null,this)
    }
    ,
    t.prototype.setupParticleGroup = function(e, t) {
        var i = this
            , r = new THREE.TextureLoader;
        r.setCrossOrigin("anonymous");
        var n = e.texture.url;
        return n.startsWith("http://") || n.startsWith("https://") || (n.startsWith(".") || (n = "." + n),
        t && (t.startsWith("http://") || t.startsWith("https://") || t.startsWith(".") || (t = "." + t),
        n.startsWith(t) || (n = t.appendPath(n)))),
        new Promise((function(t, o) {
            r.load(n, (function(r) {
                var n = i.parseGroupOptions(e, r);
                if (n.useMesh) {
                    var o = new Eu;
                    o.bEnableLog = !1,
                    o.init({
                        strMeshUrl: e.strMeshUrl,
                        params: e.arrayMeshParams
                    }, (function(t) {
                        n.bufferGeometry = t;
                        var r = i.createParticleGroup(n);
                        i.setupParticleEmitters(e, r)
                    }
                    ))
                } else {
                    var s = i.createParticleGroup(n);
                    i.setupParticleEmitters(e, s)
                }
                t()
            }
            ))
        }
        ))
    }
    ,
    t.prototype.setupParticleData = function(e, t, i) {
        var r = this
            , n = new su;
        (n = e).__proto__ = su.prototype;
        for (var o = t.url || t.rootPath, s = [], a = 0; a < n.listGroups.length; a++) {
            var l = n.listGroups[a];
            s.push(this.setupParticleGroup(l, o))
        }
        Promise.all(s).then((function() {
            null != i && i(),
            r.refresh()
        }
        ))
    }
    ,
    t.prototype.refresh = function() {
        for (var e = 0; e < this._groups.length; e++) {
            this._groups[e].refresh()
        }
    }
    ,
    t.prototype.setParticleAttribute = function(e, t) {
        this._particleOptions[e] = t,
        this.refresh()
    }
    ,
    t.prototype.setGroupAttribute = function(e, t) {
        this._groupOptions[e] = t,
        this.refresh()
    }
    ,
    _createClass(t, [{
        key: "gravityPosition",
        set: function(e) {
            var t = Utils.parseVector3(e)
                , i = Utils.parseVector3(this.position)
                , r = new THREE.Vector3;
            r.subVectors(t, i).normalize();
            var n = new THREE.Quaternion;
            n.setFromUnitVectors(new THREE.Vector3(0,-1,0), r);
            for (var o = 0; o < this._groups.length; o++) {
                var s = this._groups[o];
                s.options.vec4Quaternion = new THREE.Vector4(n.x,n.y,n.z,n.w),
                s.refresh()
            }
        }
    }, {
        key: "speed",
        set: function(e) {
            this._speed = e
        },
        get: function() {
            return this._speed
        }
    }, {
        key: "groups",
        get: function() {
            return this._groups
        }
    }]),
    t
}(BaseObject);
Water = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._scale = 4,
        n._color = "#FFFFFF",
        n._flowDirection = new THREE.Vector2(1,1),
        n._textureWidth = 1024,
        n._textureHeight = 1024,
        n._normalMaps = [],
        n._normalMapsURL = [],
        n.water = null,
        n
    }
    return o(t, e),
    t.prototype._updateByPoints = function() {
        if (this._points.length) {
            this.app.resourceManager.remove(this.water);
            var e = this._createPolygonVertices(!0)
                , t = this._createPolygonGeometry(e.vertices, e.faces)
                , i = 0;
            if (e.vertices.length) {
                for (var r = 0; r < e.vertices.length; r++)
                    i += e.vertices[r].z;
                i /= e.vertices.length
            }
            this.water = new THREE.Water(t,{
                color: this._color,
                scale: this._scale,
                flowDirection: this._flowDirection,
                textureWidth: this._textureWidth,
                textureHeight: this._textureHeight,
                normalMap0: this._normalMaps[0],
                normalMap1: this._normalMaps[1]
            }),
            this.water.position.y = i,
            this.water.scale.y *= -1,
            this.water.rotation.x = -.5 * Math.PI,
            this.node.add(this.water)
        }
    }
    ,
    t.prototype._createByGeometry = function() {
        if (this.geometryInParam) {
            this.app.resourceManager.remove(this.water);
            var e = this.geometryInParam;
            this.water = new THREE.Water(e,{
                color: this._color,
                scale: this._scale,
                flowDirection: this._flowDirection,
                textureWidth: this._textureWidth,
                textureHeight: this._textureHeight,
                normalMap0: this._normalMaps[0],
                normalMap1: this._normalMaps[1]
            }),
            this.node.add(this.water)
        }
    }
    ,
    t.prototype._setupTextures = function(e) {
        for (var t = new THREE.TextureLoader, i = [e.normalMap0 || "images/water/Water_1_M_Normal.jpg", e.normalMap1 || "images/water/Water_2_M_Normal.jpg"], r = 0; r < i.length; r++) {
            var n = i[r];
            n && (this._normalMapsURL.push(n),
            this._normalMaps.push(t.load(this.app.confirmURL(n))))
        }
        this._textureWidth = 1024,
        this._textureHeight = 1024
    }
    ,
    t.prototype.customSetup = function(t) {
        e.prototype.customSetup.call(this, t),
        this._scale = Utils.parseValue(t.waterScale, 4),
        this._color = Utils.parseColor(t.waterColor, "#FFFFFF"),
        this._flowDirection = Utils.parseVector2(t.flowDirection, new THREE.Vector2(1,1)),
        this._setupTextures(t),
        t.geometry && (this.geometryInParam = t.geometry,
        this._createByGeometry());
        var i = t.points;
        i && this.addPoints(i)
    }
    ,
    t.prototype._afterSetupComplete = function(e) {
        e.position || e.localPosition || this.useBottomCenterOfBoundingBoxAsPosition()
    }
    ,
    t.prototype.toJSON = function() {
        var t = e.prototype.toJSON.call(this);
        t.waterScale = this._scale,
        t.waterColor = this._color,
        t.flowDirection = this._flowDirection,
        t.points = this.points;
        for (var i = 0; i < this._normalMapsURL.length; i++)
            t["normalMap" + i] = this._normalMapsURL[i];
        return t
    }
    ,
    t.prototype.setEffect = function(e) {
        THING.Utils.warn("[Water] Please use '.style.setEffect()' to replace '.setEffect()'"),
        this.style.setEffect(e)
    }
    ,
    _createClass(t, [{
        key: "isWater",
        get: function() {
            return !0
        }
    }]),
    t
}(Al);
Su = new THREE.Vector3
    , ju = new THREE.Vector3
    , Pu = new THREE.Matrix4
    , Ru = new THREE.Raycaster;
Ru.params.Line.threshold = 0;
var Du = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this));
        return n.geometry.addAttribute("position", new THREE.Float32BufferAttribute(new Array(24).fill(0),3)),
        n.geometry.addAttribute("color", new THREE.Float32BufferAttribute(new Array(24).fill(1),3)),
        n._camera = i,
        n
    }
    return o(t, e),
    t.prototype.update = function(e, t) {
        var i = this;
        e.forEach((function(e, r) {
            Su.set(e.x, e.y, 1).applyMatrix4(Pu.getInverse(i._camera.projectionMatrix)),
            Su.setLength(Math.min(Su.length(), t[r])),
            i.geometry.getAttribute("position").setXYZ(2 * r + 1, Su.x, Su.y, Su.z)
        }
        )),
        this.geometry.getAttribute("position").needsUpdate = !0,
        this.geometry.computeBoundingBox(),
        this.geometry.computeBoundingSphere()
    }
    ,
    t
}(THREE.LineSegments);
Au = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = new THREE.BufferGeometry
            , a = new THREE.MeshBasicMaterial({
            color: 61183,
            opacity: .1,
            transparent: !0,
            side: THREE.DoubleSide
        })
            , l = s(this, e.call(this, o, a));
        o.addAttribute("position", new THREE.Float32BufferAttribute(new Array(3 * n).fill(0),3));
        for (var u = [], c = 0; c < n - 2; c++)
            u.push(0, c + 1, c + 2);
        return o.setIndex(u),
        l._camera = i,
        l
    }
    return o(t, e),
    t.prototype.update = function(e, t) {
        var i = this;
        e.forEach((function(e, r) {
            Su.set(e.x, e.y, 1).applyMatrix4(Pu.getInverse(i._camera.projectionMatrix)),
            Su.setLength(Math.min(Su.length(), t[r])),
            i.geometry.getAttribute("position").setXYZ(r + 1, Su.x, Su.y, Su.z)
        }
        )),
        this.geometry.getAttribute("position").needsUpdate = !0,
        this.geometry.computeBoundingBox(),
        this.geometry.computeBoundingSphere()
    }
    ,
    t
}(THREE.Mesh);
ku = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.tickable = !0,
        n._camera = new THREE.PerspectiveCamera(30,16 / 9,1,20),
        n._camera.matrixAutoUpdate = !1,
        n._cameraFrustum = new THREE.Frustum,
        n._cameraHelper = new THREE.CameraHelper(n._camera),
        n._cameraHelper.visible = !1,
        n._cameraHelper.matrix = new THREE.Matrix4,
        n._outMesh = new Du(n._camera),
        n._outMesh.material.color.setHex(16777215),
        n._outMesh.visible = !1,
        n._horizontalScanningNum = 15,
        n._verticalScanningNum = 20,
        n._innerPlanes = [],
        n.node.add(n._cameraHelper),
        n.node.add(n._outMesh),
        n._innerScanning = !1,
        n._innerCounter = 0,
        n._scanning = !1,
        n._scanningObject = null,
        n._cache = {
            outer: [],
            inner: []
        },
        n._useCache = !1,
        n
    }
    return o(t, e),
    t.prototype._updateCameraMatrixAndFrustum = function() {
        var e = this._camera;
        e.matrixWorld.copy(this.node.matrixWorld),
        e.matrixWorldInverse.getInverse(this.node.matrixWorld),
        Pu.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
        this._cameraFrustum.setFromProjectionMatrix(Pu)
    }
    ,
    t.prototype.customSetup = function(e) {
        void 0 !== e.fov && (this._camera.fov = e.fov),
        void 0 !== e.aspect && (this._camera.aspect = e.aspect),
        void 0 !== e.near && (this._camera.near = e.near),
        void 0 !== e.far && (this._camera.far = e.far),
        void 0 !== e.debug && (this._cameraHelper.visible = e.debug),
        void 0 !== e.outerColor && this._outMesh.material.color.set(Utils.parseColor(e.outerColor)),
        void 0 !== e.innerScanning && (this._innerScanning = !!e.innerScanning),
        void 0 !== e.scanningNum && (this._horizontalScanningNum = e.scanningNum[0],
        this._verticalScanningNum = e.scanningNum[1]),
        this._camera.updateProjectionMatrix(),
        this.node.updateMatrixWorld(!0),
        this._updateCameraMatrixAndFrustum()
    }
    ,
    t.prototype.update = function(t) {
        return e.prototype.update.call(this, t),
        !this.visible || (this._updateCameraMatrixAndFrustum(),
        this._cameraHelper.visible && this._cameraHelper.update(),
        this._scanning && (this._innerCounter > this._verticalScanningNum ? (this._scanning = !1,
        this._innerCounter = 0,
        this._scanningObject = null,
        this._saveCache && localStorage.setItem(this.name + "_scanning_data", JSON.stringify(this._cache))) : (this._updateInnerPlane(this._innerCounter, this._scanningObject),
        this._innerCounter++)),
        this.static && this.node._synMatrixWorld(),
        !0)
    }
    ,
    t.prototype.destroy = function() {
        e.prototype.destroy.call(this),
        this.stop()
    }
    ,
    t.prototype.start = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = this
            , r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
            , n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (t && (this.node.updateMatrixWorld(!0),
        this._updateCameraMatrixAndFrustum()),
        this._useCache = r,
        this._saveCache = n,
        r) {
            var o = localStorage.getItem(this.name + "_scanning_data");
            o && (this._cache = JSON.parse(o, (function(e, t) {
                return null === t ? 1 / 0 : t
            }
            )))
        }
        var s = [new THREE.Vector2(-1,1), new THREE.Vector2(-1,-1), new THREE.Vector2(1,-1), new THREE.Vector2(1,1)]
            , a = void 0;
        return this._useCache && this._cache.outer.length > 0 ? a = this._cache.outer : (a = s.map((function(t) {
            Ru.setFromCamera(t, i._camera);
            var r = Ru.intersectObjects(e.getNodes(), !0);
            return r[0] ? r[0].distance : 1 / 0
        }
        )),
        this._cache.outer = a,
        this._saveCache && localStorage.setItem(this.name + "_scanning_data", JSON.stringify(this._cache))),
        this._outMesh.update(s, a),
        this._outMesh.visible = !0,
        this._innerScanning && (this._innerCounter = 0,
        this._scanning = !0,
        this._scanningObject = e || this.app.query(".Ground")),
        a
    }
    ,
    t.prototype.pause = function() {
        this._scanning && (this._scanning = !1,
        this._innerCounter = 0,
        this._scanningObject = null)
    }
    ,
    t.prototype.stop = function() {
        this._outMesh.visible = !1;
        for (var e = 0; e <= this._verticalScanningNum; e++)
            this._innerPlanes[e] && (this._innerPlanes[e].visible = !1);
        this._scanning = !1,
        this._innerCounter = 0,
        this._scanningObject = null
    }
    ,
    t.prototype._updateInnerPlane = function(e, t) {
        for (var i = this, r = 2 * e / this._verticalScanningNum - 1, n = [], o = 0; o <= this._horizontalScanningNum; o++) {
            var s = 2 * o / this._horizontalScanningNum - 1;
            n.push(new THREE.Vector2(s,r))
        }
        var a = void 0;
        this._useCache && this._cache.inner[e] ? a = this._cache.inner[e] : (a = n.map((function(e) {
            Ru.setFromCamera(e, i._camera);
            var r = Ru.intersectObjects(t.getNodes(), !0);
            return r[0] ? r[0].distance : 1 / 0
        }
        )),
        this._cache.inner[e] = a),
        this._innerPlanes[e] || (this._innerPlanes[e] = new Au(this._camera,this._horizontalScanningNum + 2),
        this.node.add(this._innerPlanes[e]),
        this._innerPlanes[e].visible = !1),
        this._innerPlanes[e].update(n, a),
        this._innerPlanes[e].visible = !0
    }
    ,
    t.prototype.test = function(e) {
        var t = this
            , i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "center"
            , r = e.objects.filter((function(e) {
            return t._cameraFrustum.intersectsBox(e.boundingBox.toBox())
        }
        ))
            , n = r.filter((function(e) {
            var n = Su.setFromMatrixPosition(t._camera.matrixWorld)
                , o = [];
            "center" === i ? o.push(e.boundingBox.center) : "corner" === i && (o = e.orientedBoundingBox.points);
            for (var s = !1, a = 0; a < o.length; a++) {
                var l = ju.fromArray(o[a]);
                Ru.set(n, l.sub(n).normalize());
                var u = Ru.intersectObjects(r.map((function(e) {
                    return e.node
                }
                )), !0);
                if (u.length > 0) {
                    if (u[0].object.isChildOf(e.node))
                        return !0
                } else
                    s = !0
            }
            return s
        }
        ));
        return n
    }
    ,
    t.prototype.testObject = function(e, i) {
        var r = this
            , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "center"
            , o = Su.setFromMatrixPosition(this._camera.matrixWorld)
            , s = [];
        "center" === n ? s.push(e.boundingBox.center) : "corner" === n && (s = e.orientedBoundingBox.points);
        for (var a = null, l = 0; l < s.length; l++) {
            var u = ju.fromArray(s[l]);
            Ru.set(o, u.sub(o).normalize());
            var c = i.objects.filter((function(e) {
                return r._cameraFrustum.intersectsBox(e.boundingBox.toBox())
            }
            ))
                , h = Ru.intersectObjects(c.map((function(e) {
                return e.node
            }
            )), !0);
            if (h.length > 0) {
                if (h[0].object.isChildOf(e.node))
                    return {
                        state: t.VISIBLE,
                        distance: h[0].distance,
                        point: h[0].point
                    };
                a = h[0]
            }
        }
        return a ? {
            state: t.OBSCURED,
            distance: a.distance,
            point: a.point
        } : {
            state: t.OUT,
            distance: -1,
            point: null
        }
    }
    ,
    t.prototype._setNodeVisible = function(e) {
        this.node.ensureVisible(e, this._autoSynVisible)
    }
    ,
    _createClass(t, [{
        key: "fov",
        set: function(e) {
            this._camera.fov = e,
            this._camera.updateProjectionMatrix(),
            this._updateCameraMatrixAndFrustum()
        },
        get: function() {
            return this._camera.fov
        }
    }, {
        key: "aspect",
        set: function(e) {
            this._camera.aspect = e,
            this._camera.updateProjectionMatrix(),
            this._updateCameraMatrixAndFrustum()
        },
        get: function() {
            return this._camera.aspect
        }
    }, {
        key: "near",
        set: function(e) {
            this._camera.near = e,
            this._camera.updateProjectionMatrix(),
            this._updateCameraMatrixAndFrustum()
        },
        get: function() {
            return this._camera.near
        }
    }, {
        key: "far",
        set: function(e) {
            this._camera.far = e,
            this._camera.updateProjectionMatrix(),
            this._updateCameraMatrixAndFrustum()
        },
        get: function() {
            return this._camera.far
        }
    }]),
    t
}(BaseObject);
ku.OUT = 0,
ku.VISIBLE = 1,
ku.OBSCURED = 2;
var Ou = {
    showHelper: !1,
    ambientLight: {
        intensity: .4,
        color: 16777215
    },
    hemisphereLight: {
        intensity: 0,
        color: 16777215,
        groundColor: 2236962
    },
    mainLight: {
        shadow: !1,
        shadowQuality: "high",
        shadowBias: 0,
        shadowNormalBias: 0,
        intensity: .5,
        color: 16777215,
        alpha: 30,
        beta: 30,
        distance: 0
    },
    secondaryLight: {
        shadow: !1,
        shadowQuality: "high",
        shadowBias: 0,
        shadowNormalBias: 0,
        intensity: 0,
        color: 16777215,
        alpha: 138,
        beta: 0,
        distance: 0
    },
    tertiaryLight: {
        shadow: !1,
        shadowQuality: "high",
        shadowBias: 0,
        shadowNormalBias: 0,
        intensity: 0,
        color: 16777215,
        alpha: 0,
        beta: 0,
        distance: 0
    }
};
Bu = {
    showHelper: !1,
    ambientLight: {
        intensity: 0
    },
    hemisphereLight: {
        intensity: 0
    },
    mainLight: {
        intensity: 0
    },
    secondaryLight: {
        intensity: 0
    },
    tertiaryLight: {
        intensity: 0
    }
};
Fu = new THREE.Sphere
    , Lu = new THREE.Vector3
    , Iu = new THREE.Vector3
    , Nu = new THREE.Matrix4
    , Hu = new THREE.Matrix4;
function Uu(e, t) {
    if (t == 1 / 0)
        return e.getLocalBoundingBox().toBox();
    var i = e.query("*").filter((function(e) {
        return !(e.getBoundingBox(!1, !0).radius > t)
    }
    ))
        , r = new THREE.Box3;
    i.forEach((function(e) {
        r.union(e.getBoundingBox(!1, !0).toBox())
    }
    ));
    var n = new THREE.Matrix4;
    return e.node.updateWorldMatrix(!0, !1),
    n.getInverse(e.node.matrixWorld),
    r.applyMatrix4(n),
    r
}
var zu = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.ambientLight = new THREE.AmbientLight,
        n.ambientLight.name = "ambient_light",
        n.node.add(n.ambientLight),
        n.hemisphereLight = new THREE.HemisphereLight(16777215,2236962,1),
        n.hemisphereLight.name = "hemisphere_light",
        n.node.add(n.hemisphereLight),
        n.mainLight = new THREE.DirectionalLight,
        n.mainLight.name = "main_light",
        n.mainLight.helper = new THREE.DirectionalLightHelper(n.mainLight),
        n.mainLight.helper.matrix = n.mainLight.matrix,
        n.node.add(n.mainLight),
        n.node.add(n.mainLight.target),
        n.node.add(n.mainLight.helper),
        n.secondaryLight = new THREE.DirectionalLight,
        n.secondaryLight.name = "secondary_light",
        n.secondaryLight.helper = new THREE.DirectionalLightHelper(n.secondaryLight),
        n.secondaryLight.helper.matrix = n.secondaryLight.matrix,
        n.node.add(n.secondaryLight),
        n.node.add(n.secondaryLight.target),
        n.node.add(n.secondaryLight.helper),
        n.tertiaryLight = new THREE.DirectionalLight,
        n.tertiaryLight.name = "tertiary_light",
        n.tertiaryLight.helper = new THREE.DirectionalLightHelper(n.tertiaryLight),
        n.tertiaryLight.helper.matrix = n.tertiaryLight.matrix,
        n.node.add(n.tertiaryLight),
        n.node.add(n.tertiaryLight.target),
        n.node.add(n.tertiaryLight.helper),
        n._config = JSON.parse(JSON.stringify(Ou)),
        n._shadowObjectMaxSize = 500,
        n
    }
    return o(t, e),
    t.prototype.customSetup = function(e) {
        var t = {};
        for (var i in Ou)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        this.setConfig(t),
        this.mainLight.helper.skipBoundingBox(!0),
        this.secondaryLight.helper.skipBoundingBox(!0),
        this.tertiaryLight.helper.skipBoundingBox(!0)
    }
    ,
    t.prototype.setConfig = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : JSON.parse(JSON.stringify(Ou))
            , t = arguments[1];
        Utils.mergeObject(this._config, e, !0);
        var i = this._config;
        this.node.updateMatrixWorld(!0);
        var r = Lu.set(0, 1, 0).transformDirection(this.node.matrixWorld).normalize();
        if (this.ambientLight.intensity = i.ambientLight.intensity,
        this.ambientLight.color.set(Utils.parseColor(i.ambientLight.color)),
        this.hemisphereLight.intensity = i.hemisphereLight.intensity,
        this.hemisphereLight.color.set(Utils.parseColor(i.hemisphereLight.color)),
        this.hemisphereLight.groundColor.set(Utils.parseColor(i.hemisphereLight.groundColor)),
        this.hemisphereLight.position.copy(r),
        this.app.isMobileDevice && (i.mainLight.castShadow = !1,
        i.secondaryLight.castShadow = !1,
        i.tertiaryLight.castShadow = !1),
        !t) {
            var n = this.parent ? this.parent : this.app.root;
            t = i.mainLight.shadow || i.secondaryLight.shadow || i.tertiaryLight.shadow ? Uu(n, this._shadowObjectMaxSize) : Uu(n, 1 / 0)
        }
        var o = t.getBoundingSphere(Fu);
        this._setDirectLight(this.mainLight, i.mainLight, o, i.showHelper, r),
        this._setDirectLight(this.secondaryLight, i.secondaryLight, o, i.showHelper, r),
        this._setDirectLight(this.tertiaryLight, i.tertiaryLight, o, i.showHelper, r),
        (this._config.mainLight.distance > 0 || this._config.secondaryLight.distance > 0 || this._config.tertiaryLight.distance > 0) && (this.tickable = !0),
        this.app.root.static && this.node._synMatrixWorld(),
        this.app.needUpdate = !0
    }
    ,
    t.prototype.getConfig = function() {
        return this._config
    }
    ,
    t.prototype.setDistance = function(e, t, i) {
        this._config.mainLight.distance = e || 0,
        this._config.secondaryLight.distance = t || 0,
        this._config.tertiaryLight.distance = i || 0,
        (this._config.mainLight.distance > 0 || this._config.secondaryLight.distance > 0 || this._config.tertiaryLight.distance > 0) && (this.tickable = !0)
    }
    ,
    t.prototype.update = function(e) {
        var t = this._config.mainLight.distance > 0 && this._config.mainLight.intensity > 0 && this._config.mainLight.shadow
            , i = this._config.secondaryLight.distance > 0 && this._config.secondaryLight.intensity > 0 && this._config.secondaryLight.shadow
            , r = this._config.tertiaryLight.distance > 0 && this._config.tertiaryLight.intensity > 0 && this._config.tertiaryLight.shadow;
        if (t || i || r) {
            var n = this.app.renderCamera
                , o = Lu.set(0, 1, 0).transformDirection(this.node.matrixWorld).normalize()
                , s = Nu.multiplyMatrices(Hu.getInverse(this.node.matrixWorld), n.matrixWorld);
            return t && (Gu.setFromProjectionMatrix(n.projectionMatrix, this._config.mainLight.distance),
            Gu.getBoundingSphere(Fu, s),
            this._setDirectLight(this.mainLight, this._config.mainLight, Fu, this._config.showHelper, o)),
            i && (Gu.setFromProjectionMatrix(n.projectionMatrix, this._config.secondaryLight.distance),
            Gu.getBoundingSphere(Fu, s),
            this._setDirectLight(this.secondaryLight, this._config.secondaryLight, Fu, this._config.showHelper, o)),
            r && (Gu.setFromProjectionMatrix(n.projectionMatrix, this._config.tertiaryLight.distance),
            Gu.getBoundingSphere(Fu, s),
            this._setDirectLight(this.tertiaryLight, this._config.tertiaryLight, Fu, this._config.showHelper, o)),
            this.app.root.static && this.node._synMatrixWorld(),
            !0
        }
        return !1
    }
    ,
    t.prototype._setDirectLight = function(e, t, i, r, n) {
        if (e.intensity = t.intensity,
        e.visible = t.intensity > 0,
        e.color.set(Utils.parseColor(t.color)),
        e.position.copy(Utils.parseVector3(THING.Math.directionFromAlphaBeta(t.alpha, t.beta))),
        e.position.normalize().multiplyScalar(i.radius || 1).add(i.center),
        e.target.position.copy(i.center),
        e.helper.visible = e.visible && r,
        e.helper.visible && this._updateHelper(e),
        e.castShadow = t.shadow && !this.app.isMobileDevice,
        e.castShadow) {
            var o = i.radius
                , s = e.shadow.camera;
            s.top = s.right = o,
            s.bottom = s.left = -o,
            s.near = .1,
            s.far = 2 * o,
            s.updateProjectionMatrix(),
            s.up.copy(n);
            var a = {
                low: 512,
                medium: 1024,
                high: 2048,
                ultra: 4096
            }[t.shadowQuality] || 1024;
            e.shadow.bias = t.shadowBias,
            e.shadow.normalBias = t.shadowNormalBias,
            e.shadow.radius = .1,
            e.shadow.mapSize.x === a && e.shadow.mapSize.y === a || (e.shadow.map && (e.shadow.map.dispose(),
            e.shadow.map = null),
            e.shadow.mapSize.set(a, a))
        }
    }
    ,
    t.prototype._updateHelper = function(e) {
        var t = e.helper;
        void 0 !== t.color ? (t.lightPlane.material.color.set(t.color),
        t.targetLine.material.color.set(t.color)) : (t.lightPlane.material.color.copy(t.light.color),
        t.targetLine.material.color.copy(t.light.color)),
        Nu.lookAt(Iu.subVectors(e.target.position, e.position), new THREE.Vector3, new THREE.Vector3(0,1,0)),
        t.lightPlane.quaternion.setFromRotationMatrix(Nu),
        t.targetLine.quaternion.setFromRotationMatrix(Nu),
        t.targetLine.scale.z = Iu.length()
    }
    ,
    t.prototype._setNodeVisible = function(e) {
        this.node.ensureVisible(e, this._autoSynVisible)
    }
    ,
    _createClass(t, [{
        key: "shadowObjectMaxSize",
        set: function(e) {
            this._shadowObjectMaxSize !== e && (this._shadowObjectMaxSize = e,
            this.setConfig({}))
        },
        get: function() {
            return this._shadowObjectMaxSize
        }
    }]),
    t
}(BaseObject);
Vu = new THREE.Matrix4
    , Wu = new THREE.Box3
    , Gu = new (function() {
    function e(t) {
        classCallCheck(this, e),
        t = t || {},
        this.vertices = {
            near: [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3],
            far: [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3]
        },
        void 0 !== t.projectionMatrix && this.setFromProjectionMatrix(t.projectionMatrix, t.maxFar || 1e4)
    }
    return e.prototype.setFromProjectionMatrix = function(e, t) {
        var i = 0 === e.elements[11];
        return Vu.getInverse(e),
        this.vertices.near[0].set(1, 1, -1),
        this.vertices.near[1].set(1, -1, -1),
        this.vertices.near[2].set(-1, -1, -1),
        this.vertices.near[3].set(-1, 1, -1),
        this.vertices.near.forEach((function(e) {
            e.applyMatrix4(Vu)
        }
        )),
        this.vertices.far[0].set(1, 1, 1),
        this.vertices.far[1].set(1, -1, 1),
        this.vertices.far[2].set(-1, -1, 1),
        this.vertices.far[3].set(-1, 1, 1),
        this.vertices.far.forEach((function(e) {
            e.applyMatrix4(Vu);
            var r = Math.abs(e.z);
            i ? e.z *= Math.min(t / r, 1) : e.multiplyScalar(Math.min(t / r, 1))
        }
        )),
        this.vertices
    }
    ,
    e.prototype.getBoundingSphere = function(e, t) {
        return Wu.makeEmpty(),
        this.vertices.near.forEach((function(e) {
            Wu.expandByPoint(e)
        }
        )),
        this.vertices.far.forEach((function(e) {
            Wu.expandByPoint(e)
        }
        )),
        Wu.getBoundingSphere(e),
        t && e.applyMatrix4(t),
        e
    }
    ,
    e
}());
qu = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._intensity = 1,
        n._castShadow = !1,
        n._light = null,
        n
    }
    return o(t, e),
    t.prototype._syn = function() {}
    ,
    t.prototype.customSetup = function(e) {
        this._intensity = e.intensity || 1,
        this._castShadow = e.castShadow || !1
    }
    ,
    t.prototype.toJSON = function() {
        return e.prototype.toJSON.call(this)
    }
    ,
    _createClass(t, [{
        key: "intensity",
        set: function(e) {
            this._intensity = e,
            this._syn()
        },
        get: function() {
            return this._intensity
        }
    }, {
        key: "castShadow",
        set: function(e) {
            this._castShadow = e,
            this._syn()
        },
        get: function() {
            return this._castShadow
        }
    }, {
        key: "lightColor",
        set: function(e) {
            var t = Utils.parseColor(e);
            t && (this._light.color = t)
        },
        get: function() {
            return this._light.color.toHexString()
        }
    }, {
        key: "shadowBias",
        set: function(e) {
            this._light.shadow.bias = e
        },
        get: function() {
            return this._light.shadow.bias
        }
    }, {
        key: "shadowNormalBias",
        set: function(e) {
            this._light.shadow.normalBias = e
        },
        get: function() {
            return this._light.shadow.normalBias
        }
    }]),
    t
}(BaseObject);
Xu = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._lightAngle = 30,
        n._distance = 5,
        n._penumbra = .5,
        n._helper = null,
        n
    }
    return o(t, e),
    t.prototype.destroy = function() {
        this._helper && this._helper.dispose(),
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype._syn = function() {
        this._light.angle = THING.Math.degToRad(this._lightAngle),
        this._light.intensity = this.intensity,
        this._light.penumbra = this.penumbra,
        this._light.castShadow = this.castShadow,
        this._light.distance = 0 === this.distance ? .001 : this.distance
    }
    ,
    t.prototype._afterSetupComplete = function(e) {
        var t = e.centerNodeName;
        t && (this.centerNodeName = t),
        this._lightAngle = e.lightAngle || this._lightAngle,
        this._distance = e.distance || this._distance,
        this._penumbra = e.penumbra || this._penumbra;
        var i = e.projectTexture;
        this._light = i ? new THREE.ProjectSpotLight : new THREE.SpotLight("#FFFFFF"),
        this._light.position.set(0, 0, 0),
        this._light.target.position.set(0, 0, 1),
        this.node.add(this._light),
        this.node.add(this._light.target);
        var r = e.target;
        r && this.lookAt(r);
        var n = e.helper;
        n && (this.helper = n),
        this._syn()
    }
    ,
    t.prototype._updateLightHelper = function() {
        var e = this._light.distance
            , t = e * Math.tan(this._light.angle);
        this._helper.cone.scale.set(t, t, e),
        this._helper.cone.material.color.copy(this._light.color)
    }
    ,
    t.prototype.update = function(t) {
        var i = e.prototype.update.call(this, t);
        return this._helper ? (this._updateLightHelper(),
        !0) : i
    }
    ,
    _createClass(t, [{
        key: "lightAngle",
        set: function(e) {
            this._lightAngle = e,
            this._syn()
        },
        get: function() {
            return this._lightAngle
        }
    }, {
        key: "distance",
        set: function(e) {
            this._distance = e,
            this._syn()
        },
        get: function() {
            return this._distance
        }
    }, {
        key: "penumbra",
        set: function(e) {
            this._penumbra = e,
            this._syn()
        },
        get: function() {
            return this._penumbra
        }
    }, {
        key: "helper",
        set: function(e) {
            e && !this._helper ? (this._helper = new THREE.SpotLightHelper(this._light),
            this._helper.matrix = this._light.matrix,
            this._helper.cone.quaternion.set(0, 0, 0, 1),
            this.node.add(this._helper),
            this.tickable = !0) : !e && this._helper && (this.node.remove(this._helper),
            this._helper.dispose(),
            this._helper = null)
        },
        get: function() {
            return !!this._helper
        }
    }]),
    t
}(qu);
Ju = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._distance = 0,
        n._decay = 2,
        n._helper = null,
        n
    }
    return o(t, e),
    t.prototype.destroy = function() {
        this._helper && this._helper.dispose(),
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype._syn = function() {
        this._light.intensity = this.intensity,
        this._light.castShadow = this.castShadow,
        this._light.distance = 0 === this.distance ? .001 : this.distance,
        this._light.shadow.camera.far = 0 === this.distance ? .001 : this.distance,
        this._light.decay = this._decay
    }
    ,
    t.prototype._afterSetupComplete = function(e) {
        this._distance = e.distance || this._distance,
        this._decay = e.decay || this._decay,
        this._light = new THREE.PointLight("#FFFFFF"),
        this._light.position.set(0, 0, 0),
        this.node.add(this._light);
        var t = e.helper;
        t && (this.helper = t),
        this._syn()
    }
    ,
    t.prototype._updateLightHelper = function() {
        this._helper.update()
    }
    ,
    t.prototype.update = function(t) {
        var i = e.prototype.update.call(this, t);
        return this._helper ? (this._updateLightHelper(),
        !0) : i
    }
    ,
    _createClass(t, [{
        key: "distance",
        set: function(e) {
            this._distance = e,
            this._syn()
        },
        get: function() {
            return this._distance
        }
    }, {
        key: "decay",
        set: function(e) {
            this._decay = e,
            this._syn()
        },
        get: function() {
            return this._decay
        }
    }, {
        key: "helper",
        set: function(e) {
            e && !this._helper ? (this._helper = new THREE.PointLightHelper(this._light,1),
            this._helper.matrix = this._light.matrix,
            this.node.add(this._helper),
            this.tickable = !0) : !e && this._helper && (this.node.remove(this._helper),
            this._helper.dispose(),
            this._helper = null)
        },
        get: function() {
            return !!this._helper
        }
    }]),
    t
}(qu);
Yu = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._image = "",
        n._texture = null,
        n._width = 10,
        n._scrollSpeed = 0,
        n._uStep = 0,
        n._resolution = new THREE.Vector2,
        n._updateResolutionFunc = n._updateResolution.bind(n),
        n._helpGeometry = new THREE.Geometry,
        n._meshline = new THREE.MeshLine,
        n._material = null,
        n._repeatX = 1,
        n._offsetX = 0,
        n._uvTransform = new THREE.Matrix3,
        n._synUvTransform(),
        n
    }
    return o(t, e),
    t.prototype._synUvTransform = function() {
        this._uvTransform.setUvTransform(this._offsetX, 0, this._repeatX, 1, 0, 0, 0)
    }
    ,
    t.prototype._updateResolution = function(e) {
        this._resolution.set(e.size[0], e.size[1])
    }
    ,
    t.prototype.customSetup = function(t) {
        e.prototype.customSetup.call(this, t);
        var i = t.image;
        i && (i.isTexture ? (this._image = i.name,
        this._texture = i) : (this._image = i,
        this._texture = this.app.resourceManager.loadTexture(i, void 0, {
            repeat: !0,
            anisotropy: 16
        }))),
        this._uStep = t.uStep || this._uStep;
        var r = t.points;
        r && this.addPoints(r),
        this._width = t.width || this._width,
        this.uvRatio = t.uvRatio || 1,
        this.scrollSpeed = t.scrollSpeed || this._scrollSpeed;
        var n = this.app.calcRect();
        this._resolution.set(n.width, n.height),
        this._material = new THREE.MeshLineMaterial({
            map: this._texture,
            useMap: !!this._texture,
            color: new THREE.Color(1,1,1),
            opacity: 1,
            resolution: this._resolution,
            sizeAttenuation: !1,
            lineWidth: this._width,
            near: this.app.renderCamera.near,
            far: this.app.renderCamera.far,
            side: THREE.DoubleSide
        }),
        this._material.extensions.derivatives = !this.app.renderer.capabilities.isWebGL2,
        this._material.uniforms.uvTransform = {
            type: "m3",
            value: this._uvTransform
        },
        this.app.on("resize", this._updateResolutionFunc);
        var o = new THREE.Mesh(this._meshline.geometry,this._material);
        this.node.add(o)
    }
    ,
    t.prototype.destroy = function() {
        e.prototype.destroy.call(this),
        this.app.off("resize", this._updateResolutionFunc)
    }
    ,
    t.prototype.update = function(t) {
        var i = e.prototype.update.call(this, t);
        return this._material ? (0 !== this._scrollSpeed && (this._offsetX += this._scrollSpeed * t,
        this._synUvTransform()),
        !0) : i
    }
    ,
    t.prototype._updateByPoints = function() {
        this._helpGeometry.vertices = this._points.map((function(e) {
            return (new THREE.Vector3).fromArray(e)
        }
        )),
        this._meshline.setGeometry(this._helpGeometry, void 0, this._uStep)
    }
    ,
    t.prototype.toJSON = function() {
        var t = e.prototype.toJSON.call(this);
        return t.image = this._image,
        t.scrollSpeed = this._scrollSpeed,
        t.points = this.points,
        t
    }
    ,
    _createClass(t, [{
        key: "uvRatio",
        set: function(e) {
            this._repeatX = e,
            this._synUvTransform()
        }
    }, {
        key: "width",
        set: function(e) {
            this._width = e,
            this._material && (this._material.uniforms.lineWidth.value = e)
        },
        get: function() {
            return this._width
        }
    }, {
        key: "scrollSpeed",
        set: function(e) {
            this._scrollSpeed = THING.Math.clamp(e, -99, 99),
            this.tickable = 0 !== this._scrollSpeed
        },
        get: function() {
            return this._scrollSpeed
        }
    }]),
    t
}(Al);
var Boundary = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._height = 10,
        n._geometry = new THREE.Geometry,
        n._material = new THREE.MeshBasicMaterial({
            side: THREE.DoubleSide,
            transparent: !0
        }),
        n._material.uvTransform = new THREE.Matrix3,
        n._scrollSpeed = [0, 0],
        n._uvRepeat = [1, 1],
        n._uvOffset = [0, 0],
        n._uvRotation = 0,
        n
    }
    return o(t, e),
    t.prototype.setScroll = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0
            , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        this._scrollSpeed = [e, t],
        this.tickable = !0
    }
    ,
    t.prototype._synUvTransform = function() {
        this._material.uvTransform || (this._material.uvTransform = new THREE.Matrix3),
        this._material.uvTransform.setUvTransform(this._uvOffset[0], this._uvOffset[1], this._uvRepeat[0], this._uvRepeat[1], this._uvRotation, 0, 0)
    }
    ,
    t.prototype.customSetup = function(t) {
        e.prototype.customSetup.call(this, t),
        this._height = t.height || this._height;
        var i = t.points;
        i && this.addPoints(i),
        this.color = t.color || 16777215,
        this.scroll = t.scroll || !1;
        var r = new THREE.Mesh(this._geometry,this._material);
        this.node.add(r),
        t.image ? this._material.map = this.app.resourceManager.loadTexture(t.image, void 0, {
            repeat: !0
        }) : this._material.map = function() {
            for (var e = new Uint8Array(512), t = 0; t < 128; t++)
                e[4 * t + 0] = 255,
                e[4 * t + 1] = 255,
                e[4 * t + 2] = 255,
                e[4 * t + 3] = 255 * (1 - t / 128);
            var i = new THREE.DataTexture(e,1,128,THREE.RGBAFormat);
            return i.needsUpdate = !0,
            i
        }()
    }
    ,
    t.prototype.destroy = function() {
        e.prototype.destroy.call(this),
        this.app.off("resize", this._updateResolutionFunc)
    }
    ,
    t.prototype.update = function(t) {
        var i = e.prototype.update.call(this, t);
        return 0 !== this._scrollSpeed[0] || 0 !== this._scrollSpeed[1] ? (this._uvOffset[0] += this._scrollSpeed[0] * t,
        this._uvOffset[1] += this._scrollSpeed[1] * t,
        this._synUvTransform(),
        !0) : i
    }
    ,
    t.prototype._updateByPoints = function() {
        var e = this
            , t = []
            , i = []
            , r = []
            , n = []
            , o = void 0
            , s = void 0
            , a = new THREE.Vector3
            , l = 0;
        this._points.forEach((function(r, n) {
            o = (new THREE.Vector3).fromArray(r),
            (s = (new THREE.Vector3).fromArray(r)).y += e._height,
            i.push(o, s),
            n > 0 && (l += o.distanceTo(a)),
            t.push(new THREE.Vector2(l / e._height,0), new THREE.Vector2(l / e._height,1)),
            a.copy(o)
        }
        ));
        for (var u = 0; u < i.length - 2; u += 2)
            r.push(new THREE.Face3(u + 1,u + 0,u + 2)),
            r.push(new THREE.Face3(u + 2,u + 3,u + 1)),
            n.push([t[u + 1], t[u + 0], t[u + 2]]),
            n.push([t[u + 2], t[u + 3], t[u + 1]]);
        this._geometry.vertices = i,
        this._geometry.faces = r,
        this._geometry.faceVertexUvs = [n],
        this._geometry.verticesNeedUpdate = !0,
        this._geometry.uvsNeedUpdate = !0,
        this._geometry.elementsNeedUpdate = !0,
        this._geometry.computeBoundingSphere(),
        this._geometry.computeFaceNormals()
    }
    ,
    t.prototype.toJSON = function() {
        var t = e.prototype.toJSON.call(this);
        return t.height = this._height,
        t.points = this.points,
        t
    }
    ,
    _createClass(t, [{
        key: "height",
        set: function(e) {
            this._height = e,
            this._updateByPoints()
        },
        get: function() {
            return this._height
        }
    }, {
        key: "color",
        set: function(e) {
            this._material.color.setHex(e)
        },
        get: function() {
            return this._material.color.getHex()
        }
    }, {
        key: "imageRepeat",
        set: function(e) {
            this._uvRepeat[0] = e[0],
            this._uvRepeat[1] = e[1],
            this._synUvTransform()
        },
        get: function() {
            return this._uvRepeat.slice(0)
        }
    }]),
    t
}(Al);
Zu = new THREE.Vector3
    , Element3DObjectControl = function() {
    function e(t, i, n) {
        classCallCheck(this, e),
        this.object = null,
        this.useSpriteMaterial = t,
        this.node = i,
        this.domElement = n,
        this.cssObject = null,
        this.pivotObject = null
    }
    return e.fixCSS3DOffset = function(e, t) {
        return [Math.round(1.5 * e), Math.round(1.5 * t)]
    }
    ,
    e.prototype.onUpdate = function(t) {
        var i = this.node
            , r = this.cssObject;
        i.updateMatrixWorld();
        var n = new THREE.Vector3
            , o = new THREE.Vector3
            , s = new THREE.Quaternion;
        i.matrixWorld.decompose(n, s, o),
        this.pivotObject.position.copy(n);
        var a = new THREE.Vector3;
        this.object._independentWorldScale ? a = this.object._independentWorldScale.clone() : this.object.node.getWorldScale(a);
        var l = i.userData.cssFactor || 1;
        this.cssObject.scale.copy(a),
        this.cssObject.scale.multiplyScalar(l / 30);
        var u = this.object.pivot;
        if (u) {
            var c = this.domElement.scrollWidth;
            this.domElement.threeDHeight && this.domElement.onAppended && this.domElement.scrollHeight != this.domElement.threeDHeight.slice(0, -2) - 0 && this.domElement.onAppended(),
            this.domElement.threeDHeight = this.domElement.scrollHeight + "px";
            var h, p, d = this.domElement.threeDHeight.slice(0, -2) - 0, f = c * this.cssObject.scale.x, m = d * this.cssObject.scale.y, g = Math.round((.5 - u[0]) * f), v = Math.round((u[1] - .5) * m), y = e.fixCSS3DOffset(g, v);
            y ? (h = y[0],
            p = y[1]) : (h = g,
            p = v),
            this.object._useSpriteMaterial ? (r.quaternion.copy(s),
            this.domElement.cacheLeft != h && (this.domElement.cacheLeft = h,
            this.domElement.style.left = h + "px"),
            this.domElement.cacheTop != p && (this.domElement.cacheTop = p,
            this.domElement.style.top = p + "px")) : (this.pivotObject.quaternion.copy(s),
            r.position.x = h,
            r.position.y = p,
            r.position.z = 0),
            f && m && (this.scaledWidth == f && this.scaledHeight == m || (this.scaledWidth = f,
            this.scaledHeight = m,
            this.node.getWorldScale(Zu),
            this.node.userData.boundingBoxSize = [f / Zu.x, m / Zu.y, 1],
            this.object.dirty = !0),
            this.pivotLeft == h && this.pivotTop == p || (this.pivotLeft = h,
            this.pivotTop = p,
            this.node.userData.boundingBoxPivot = [.5 + h / f, .5 + p / m, 0],
            this.object.dirty = !0))
        }
        return this.onVisible(this.object.node.ensureVisible()),
        !0
    }
    ,
    e.prototype.onAdd = function(e) {
        this.object = e,
        this.pivotObject = new THREE.Object3D,
        this.useSpriteMaterial ? this.cssObject = new THREE.CSS3DSprite(this.domElement) : this.cssObject = new THREE.CSS3DObject(this.domElement),
        this.pivotObject.add(this.cssObject),
        this.object.app.cssScene.add(this.pivotObject),
        this.onUpdate(),
        this.object.tickable = !0
    }
    ,
    e.prototype.onRemove = function() {
        this.pivotObject && (this.object.app.cssScene.remove(this.pivotObject),
        this.cssObject && (this.pivotObject.remove(this.cssObject),
        this.cssObject = null),
        this.pivotObject = null),
        this.object = null
    }
    ,
    e.prototype.onVisible = function(e) {
        this.cssObject.visible = e;
        var t = this.domElement.style;
        e ? "visible" != t.visibility && (t.visibility = "visible") : "hidden" != t.visibility && (t.visibility = "hidden")
    }
    ,
    e
}();
$u = new THREE.Vector3
    , ec = new THREE.Vector3
    , Marker = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._useShadow = !1,
        n._line = null,
        n._lineOffset = [0, 0, 0],
        n._factor = .01,
        n._initialSize = [1, 1],
        n._size = [1, 1],
        n._pivot = [.5, .5],
        n._useScaleMode = !1,
        n._useSpriteMaterial = !0,
        n._sizeAttenuation = !0,
        n._element = null,
        n._planeSprite = null,
        n._sprite = null,
        n._canvas = null,
        n._url = "",
        n
    }
    return o(t, e),
    t.prototype.updateConnectionLine = function() {
        if (!this._line)
            return !1;
        if (!this.parent)
            return !1;
        var e = THING.Math.addVector(this._lineOffset, this.position)
            , t = this._lineToObject ? this._lineToObject.position : this._lineToPosition;
        return this._line.setPoint(0, e),
        this._line.setPoint(1, t),
        !0
    }
    ,
    t.prototype._setupMaterial = function(e) {
        var t = e.canvas
            , i = e.image
            , r = e.url;
        t ? this.setCanvas(t) : i ? this.setImage(i) : void 0 !== r && (this._url = r)
    }
    ,
    t.prototype._setupSprite = function(e) {
        var t = this
            , i = !0
            , r = !0
            , n = 0
            , o = null;
        this.loaded = !1,
        this._useSpriteMaterial = Utils.parseValue(e.useSpriteMaterial, this._useSpriteMaterial);
        var s = e.element;
        if (s) {
            var a = s.cloneNode(!0)
                , l = Utils.parseSize(e)
                , u = this.app.events
                , c = {};
            Object.defineProperties(c, {
                pickedObj: {
                    get: function() {
                        return this.object
                    }
                }
            });
            var h = function(e, t) {
                e.button = t.button,
                e.buttons = t.buttons,
                e.altKey = t.altKey,
                e.ctrlKey = t.ctrlKey,
                e.shiftKey = t.shiftKey
            }
                , p = {
                picked: !1,
                x: 0,
                y: 0
            };
            this._element = a,
            this._element.onmousedown = function(e) {
                !1 !== t.app.picker.setPickedObject(t, c) && Utils.timer.setTimeout((function() {
                    u.skipFrameCount = t.app.currentFrameCount,
                    p.picked = !0,
                    p.x = e.x,
                    p.y = e.y
                }
                ))
            }
            ,
            this._element.onmouseup = function(e) {
                if (!1 !== t.app.picker.setPickedObject(t, c) && p.picked) {
                    if (p.picked = !1,
                    THING.Math.getDistance([p.x, p.y], [e.x, e.y]) > 1)
                        return;
                    r = !0,
                    1 === ++n ? o = Utils.timer.setTimeout((function() {
                        i ? (r = !1,
                        u.skipFrameCount = t.app.currentFrameCount + 1,
                        h(c, e),
                        c.object.trigger("singleclick", c),
                        t.app.trigger("singleclick", c)) : r = !0,
                        i = !0,
                        n = 0
                    }
                    ), 250) : o && (Utils.timer.clearTimeout(o),
                    n = 0)
                }
            }
            ,
            this._element.onclick = function(e) {
                !1 !== t.app.picker.setPickedObject(t, c) && Utils.timer.setTimeout((function() {
                    u.skipFrameCount = t.app.currentFrameCount,
                    h(c, e),
                    c.object.trigger("click", c),
                    t.app.trigger("click", c)
                }
                ))
            }
            ,
            this._element.ondblclick = function(e) {
                !1 !== t.app.picker.setPickedObject(t, c) && (Utils.timer.clearTimeout(o),
                n = 0,
                r ? Utils.timer.setTimeout((function() {
                    u.skipFrameCount = t.app.currentFrameCount,
                    h(c, e),
                    c.object.trigger("dblclick", c),
                    t.app.trigger("dblclick", c)
                }
                )) : r = !0)
            }
            ,
            this._element.onmousemove = function(e) {
                0 == e.buttons && e.stopPropagation(),
                t.app.picker.setPickedObject(t, c) && Utils.timer.setTimeout((function() {
                    u.skipFrameCount = t.app.currentFrameCount,
                    h(c, e),
                    c.object.trigger("mousemove", c),
                    t.app.trigger("mousemove", c)
                }
                ))
            }
            ,
            this._element.onmouseenter = function(e) {
                t.app.setCurrentHTMLMarker(t),
                t.app.picker.setPickedObject(t, c) && Utils.timer.setTimeout((function() {
                    u.skipFrameCount = t.app.currentFrameCount,
                    h(c, e),
                    c.object.trigger("mouseenter", c),
                    t.app.trigger("mouseenter", c)
                }
                ))
            }
            ,
            this._element.onmouseleave = function(e) {
                t.app.setCurrentHTMLMarker(null);
                var i = c.object;
                i && Utils.timer.setTimeout((function() {
                    u.skipFrameCount = t.app.currentFrameCount,
                    h(c, e),
                    i.trigger("mouseleave", c),
                    t.app.trigger("mouseleave", c)
                }
                ))
            }
            ,
            this._element.style.pointerEvents = "auto",
            this._element.style.cursor = "default";
            var d = new THREE.SpriteMaterial({
                colorWrite: !1,
                depthWrite: !1,
                transparent: !0
            });
            this._planeSprite = new THREE.Sprite(d),
            this._planeSprite.userData.cssFactor = l[0],
            this._planeSprite.userData.skipOutline = !0,
            this._planeSprite.userData.skipStyle = !0,
            this._planeSprite.userData.skipPick = !0,
            this.node.add(this._planeSprite),
            this.element3DObjectControl = new Element3DObjectControl(this._useSpriteMaterial,this._planeSprite,a),
            this.addControl(this.element3DObjectControl),
            this.loaded = !0
        } else {
            var f = void 0;
            this.bindParams = e,
            e.loadTextureComplete = function(t) {
                var i = t.material
                    , r = (i._userData || {}).bindMarkers;
                r && r.forEach((function(t) {
                    t._updateSpriteTexture(i.map),
                    t.synSize(e),
                    t.node.getMaterials().forEach((function(e) {
                        e.visible = !0
                    }
                    )),
                    t.loaded = !0,
                    t.calledComplete || (t.update(),
                    t._callComplete(t.bindParams)),
                    f && f(t),
                    delete t.bindParams
                }
                )),
                i._userData = {}
            }
            var m = this.app.spriteResource.getMaterial(e);
            if ((d = m.material)._userData = d._userData || {},
            d._userData.bindMarkers = d._userData.bindMarkers || [],
            d._userData.bindMarkers.push(this),
            d.isSpriteMaterial)
                this._sprite = new THREE.Sprite(d);
            else {
                var g = new THREE.PlaneBufferGeometry(this._size[0],this._size[1]);
                this._sprite = new THREE.Mesh(g,d)
            }
            if (m.needLoadTexture) {
                var v = Utils.parseValue(e.visible, !0);
                v && (this._sprite.setLayerVisible(!1),
                f = function(e) {
                    Utils.timer.setTimeout((function() {
                        e._sprite.setLayerVisible(v),
                        e.dirty = !0
                    }
                    ), 10)
                }
                )
            }
            this._sprite.renderOrder = 1,
            this._sprite.userData.skipOutline = !0,
            this._setupMaterial(e),
            this.node.add(this._sprite),
            this.synSize(e)
        }
        this.dirty = !0
    }
    ,
    t.prototype._setupLineNode = function(e) {
        if (this._lineToPosition = e.lineToPosition,
        this._lineToObject = e.lineToObject,
        void 0 !== this._lineToPosition || void 0 !== this._lineToObject) {
            var t = e.lineColor
                , i = this._lineToObject ? this._lineToObject.position : this._lineToPosition;
            this._line = this.app.create({
                type: "Line",
                parent: this,
                points: [this.position, i],
                color: t,
                style: {
                    lineOpacity: e.lineOpacity,
                    lineDashSize: e.lineDashSize,
                    lineGapSize: e.lineGapSize,
                    lineWidth: e.lineWidth
                }
            }),
            this.tickable = !0
        }
    }
    ,
    t.prototype._setupLocalPosition = function(e) {
        var t = this.parent;
        if (t) {
            var i = (e.offset || e.localPosition || [0, 0, 0]).concat();
            if (!Utils.parseValue(e.ignoreParentBoundingBox, !1)) {
                var r = t.getOrientedBox(!1)
                    , n = this.worldToLocal(r.center);
                i[0] += n[0],
                i[1] += n[1] + r.size[1] / 2,
                i[2] += n[2]
            }
            var o = Utils.parseValue(e.ignoreParentScale, !1);
            this.setLocalPosition(i, o)
        }
    }
    ,
    t.prototype.customSetup = function(e) {
        var t = this;
        this._sizeAttenuation = Utils.parseValue(e.sizeAttenuation, !0),
        this.setupTranslation(e),
        e.skipSetupTranslation = !0,
        this._setupSprite(e),
        this._setupLineNode(e),
        e.width && e.height ? this._useScaleMode = !1 : this._useScaleMode = !0,
        this._factor = e.factor || this._factor,
        this._initialSize = Utils.parseSize(e),
        this._size = this._initialSize.concat();
        var i = e.pivot;
        i && (this.pivot = i),
        this.one("load", (function(i) {
            var r = e.pivotPixel;
            r && (t.pivotPixel = r),
            t._useSpriteMaterial || t.node.getMaterials().forEach((function(e) {
                e.envMap = null,
                e.needsUpdate = !0
            }
            )),
            t.node.traverse((function(e) {
                e.userData.skipEnvMap = !0
            }
            ))
        }
        )),
        this.synSize(e),
        this._sizeAttenuation || this._sprite.skipBoundingBox(!0)
    }
    ,
    t.prototype._updatePivot = function(e) {
        if (this._sprite && !this._sprite.isSprite) {
            ec.set(.5 - e[0], e[1] - .5, 0);
            var t = this.node.userData.boundingBoxSize;
            this.node.userData.boundingBoxSize = null,
            this.node.userData.boundingBoxPivot = null;
            var i = this.getLocalBoundingBox(!1, !1)
                , r = i.toBox()
                , n = r.min
                , o = r.max
                , s = i.size;
            t && (s[0] == t[0] && s[1] == t[1] && s[2] == t[2] || (this.dirty = !0)),
            this.node.userData.boundingBoxSize = s,
            this.node.userData.boundingBoxPivot = [e[0], e[1], .5],
            $u.x = (o.x - n.x) * ec.x,
            $u.y = (o.y - n.y) * ec.y,
            $u.z = 0,
            this.node.localToWorld($u),
            this._sprite._setWorldPosition($u)
        }
    }
    ,
    t.prototype._afterSetupComplete = function(e) {
        var t = e.alwaysOnTop;
        t && (this.style.alwaysOnTop = t)
    }
    ,
    t.prototype._notifyCompleteEvent = function(e) {
        var t = this;
        Utils.timer.setTimeout((function() {
            t.trigger("load", {
                object: t
            }),
            t.trigger("complete", {
                object: t
            })
        }
        ), 1)
    }
    ,
    t.prototype._callComplete = function(t) {
        var i = this.pivot;
        .5 == i[0] && .5 == i[1] || this._updatePivot(i),
        "" !== this._url ? this.image || this.canvas ? (this.calledComplete = !0,
        e.prototype._callComplete.call(this, t)) : this.loaded = !1 : (this.calledComplete = !0,
        e.prototype._callComplete.call(this, t))
    }
    ,
    t.prototype._updateSpriteTexture = function(e, t) {
        return t && (this._sprite.material = this._sprite.material.clone()),
        this.app.picker.removePickingResources(this._sprite),
        this._sprite.material.map = e,
        this._sprite.material.needsUpdate = !0,
        this.loaded = !0,
        this.dirty = !0,
        this._sprite.material
    }
    ,
    t.prototype.destroy = function() {
        if (this.app.getCurrentHTMLMarker() == this && this.app.setCurrentHTMLMarker(null),
        this.app.spriteResource.unload(this.url),
        this._sprite) {
            var t = this._sprite.material;
            if (t && t._userData) {
                var i = t._userData.bindMarkers;
                if (i) {
                    var r = i.indexOf(this);
                    -1 !== r && i.splice(r, 1)
                }
            }
        } else if (this._canvas) {
            var n = this._canvas
                , o = n.getContext("2d");
            n.width = n.height = 0,
            o.fillRect(0, 0, 0, 0)
        }
        e.prototype.destroy.call(this)
    }
    ,
    t.prototype.update = function(t) {
        var i = e.prototype.update.call(this, t);
        return i |= this.updateConnectionLine()
    }
    ,
    t.prototype.synSize = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (this._sprite) {
            if (this._useScaleMode) {
                var t = e.texture || this._sprite.material.map;
                if (t) {
                    var i = t.image;
                    i && (this._size[0] = this._factor * i.width * this._initialSize[0],
                    this._size[1] = this._factor * i.height * this._initialSize[1])
                }
            }
        } else
            this._planeSprite && (this._planeSprite.userData.cssFactor = this._size[0]);
        if (this._keepSize) {
            var r = this.getControl("SizeAdjustmentControl");
            r && (r.size = this._size)
        } else
            this._sprite && (this._sprite.scale.set(this._size[0], this._size[1], 1),
            this.synIndependentWorldScale(!0, e.inheritScale));
        this.static && this.node._synMatrixWorld()
    }
    ,
    t.prototype._getIndependentControlRenderNode = function() {
        return this._sprite ? this._sprite : e.prototype._getIndependentControlRenderNode.call(this)
    }
    ,
    t.prototype.cloneSelf = function(e) {
        return e.localPosition = this.localPosition,
        e.size = this.size,
        this.url ? e.url = this.url : this.canvas ? e.canvas = this.canvas.clone() : this.image && (e.image = this.image.clone()),
        this.app.create(e)
    }
    ,
    t.prototype._updateCanvas = function(e) {
        if (!e)
            return !1;
        var t = this._sprite;
        if (!t)
            return !1;
        var i = t.material;
        if (!i)
            return !1;
        var r = i.map;
        return !!r && (r.image = e,
        r.needsUpdate = !0,
        this._canvas = e,
        this.synSize(),
        !0)
    }
    ,
    t.prototype.setCanvas = function(e) {
        if (e && this._sprite) {
            this.url ? this.app.spriteResource.unload(this.url) : this._sprite.material.map && (this._sprite.material.map.dispose(),
            this._sprite.material.map = null),
            this._url = "",
            this._canvas = e;
            var t = new THREE.Texture(e);
            t.needsUpdate = !0,
            this._updateSpriteTexture(t)
        }
    }
    ,
    t.prototype.setUrl = function(e) {
        if (e) {
            this.url && this.app.spriteResource.unload(this.url),
            this._canvas = null,
            this._url = e;
            var t = this
                , i = {
                url: e,
                alwaysOnTop: this.style.alwaysOnTop,
                useSpriteMaterial: this._useSpriteMaterial,
                loadTextureComplete: function(e) {
                    t.synSize({
                        texture: e.material.map
                    })
                },
                loadComplete: function(e) {
                    t._updateSpriteTexture(e.material.map, !0).visible = !0,
                    t.trigger("urlchange", {
                        image: e.material.map.image
                    })
                }
            }
                , r = this.app.spriteResource.getMaterial(i);
            if (r) {
                var n = this._updateSpriteTexture(r.material.map, !0);
                r.needLoadTexture && (n.visible = !1),
                this.synSize()
            }
        }
    }
    ,
    t.prototype.setImage = function(e) {
        e && (e.width && e.height ? (this._url = "",
        this._updateSpriteTexture(this.app.resourceManager.loadTexture(e), !0),
        this.synSize()) : THING.Utils.error("[Marker] set image failed, please make sure image has width and height attribute"))
    }
    ,
    t.prototype._setScale = function(t) {
        var i = THING.Math.scaleVector(t, [this._size[0], this._size[1], 1]);
        i = THING.Math.divideVector(i, this.node.scale.toArray()),
        e.prototype._setScale.call(this, i)
    }
    ,
    t.prototype._getScale = function() {
        var t = e.prototype._getScale.call(this)
            , i = THING.Math.divideVector(t, [this._size[0], this._size[1], 1]);
        return i = THING.Math.scaleVector(this.node.scale.toArray(), i)
    }
    ,
    t.prototype.setPivot = function(e) {
        if (e) {
            if (Utils.isNull(e[0]) || Utils.isNull(e[1]))
                return void THING.Utils.error("set pivot failed, due to value is not a number array");
            if (this._pivot[0] === e[0] && this._pivot[1] === e[1])
                return
        }
        this._pivot = e;
        var t = this._sprite;
        if (t && t.isSprite)
            e ? t.center.set(e[0], 1 - e[1]) : t.center.set(.5, .5);
        else if (!this.domElement)
            if (e) {
                var i = this;
                this.on("update", (function() {
                    i._updatePivot(e)
                }
                ), "Update-Marker-Pivot"),
                this._updatePivot(e),
                this.tickable = !0
            } else
                this.off("update", null, "Update-Marker-Pivot"),
                this.tickable = !1,
                this._sprite && this._sprite.position.set(0, 0, 0);
        this.dirty = !0
    }
    ,
    t.prototype.getPivot = function() {
        return this._pivot
    }
    ,
    t.prototype._updateKeepSize = function(t, i) {
        var r = this._sizeAttenuation ? 60 : 960;
        e.prototype._updateKeepSize.call(this, t, this._sprite, this._size, r) && this.synSize()
    }
    ,
    _createClass(t, [{
        key: "isMarker",
        get: function() {
            return !0
        }
    }, {
        key: "canvas",
        set: function(e) {
            this.setCanvas(e)
        },
        get: function() {
            return this._canvas
        }
    }, {
        key: "url",
        set: function(e) {
            this._url != e && this.setUrl(e)
        },
        get: function() {
            return this._url
        }
    }, {
        key: "image",
        set: function(e) {
            this.setImage(e)
        },
        get: function() {
            var e = this._sprite;
            if (!e)
                return null;
            var t = e.material;
            if (!t)
                return null;
            var i = t.map;
            return i ? i.image : null
        }
    }, {
        key: "texture",
        set: function(e) {
            e && (e.isTexture ? (this._updateSpriteTexture(e, !0),
            this.synSize()) : THING.Utils.error("[Marker] set texture failed, please make sure provide THREE.Texture as value"))
        }
    }, {
        key: "sizeAttenuation",
        get: function() {
            return this._sizeAttenuation
        }
    }, {
        key: "size",
        set: function(e) {
            Utils.isNumber(e) ? (this._size[0] = e,
            this._size[1] = e) : this._size = e,
            this._initialSize = this._size.concat(),
            this.synSize()
        },
        get: function() {
            return this._size
        }
    }, {
        key: "width",
        set: function(e) {
            this._initialSize[0] = e,
            this._size[0] = e,
            this._useScaleMode = !1,
            this.synSize()
        },
        get: function() {
            return this._size[0]
        }
    }, {
        key: "height",
        set: function(e) {
            this._initialSize[1] = e,
            this._size[1] = e,
            this._useScaleMode = !1,
            this.synSize()
        },
        get: function() {
            return this._size[1]
        }
    }, {
        key: "loaded",
        get: function() {
            return !!(this.image || this.canvas || this.element) && e.prototype.loaded
        },
        set: function(t) {
            e.prototype.loaded = t,
            t && (this.style._syn(),
            this.style.hasUVAnimation() && this.style.setUVAnimation(this.style.getUVAnimation()))
        }
    }, {
        key: "factor",
        set: function(e) {
            this._factor = e,
            this.synSize()
        },
        get: function() {
            return this._factor
        }
    }, {
        key: "element",
        get: function() {
            return this._element
        }
    }, {
        key: "line",
        get: function() {
            return this._line
        }
    }, {
        key: "lineOffset",
        set: function(e) {
            var t = Utils.parseValue(e, [0, 0, 0]);
            this._lineOffset = t.concat()
        },
        get: function() {
            return this._lineOffset.concat()
        }
    }, {
        key: "pivot",
        set: function(e) {
            this.setPivot(e)
        },
        get: function() {
            return this.getPivot()
        }
    }, {
        key: "pivotPixel",
        set: function(e) {
            var t = this
                , i = 0
                , r = 0
                , n = this.image
                , o = this.element;
            n ? (i = n.width,
            r = n.height) : o && (i = o.scrollWidth,
            r = o.scrollHeight),
            i && r ? this.pivot = [e[0] / i, e[1] / r] : o && (o.onAppended = function() {
                t.pivotPixel = e
            }
            )
        },
        get: function() {
            var e = this.pivot;
            if (!e)
                return null;
            var t = 0
                , i = 0
                , r = this.image
                , n = this.element;
            return r ? (t = r.width,
            i = r.height) : n && (t = n.scrollWidth,
            i = n.scrollHeight),
            t && i ? [Math.floor(e[0] * t), Math.floor(e[1] * i)] : null
        }
    }, {
        key: "domElement",
        get: function() {
            return this.element
        }
    }]),
    t
}(BaseObject);
WebView = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n.mixerPlane = null,
        n.domWidth = 0,
        n.domHeight = 0,
        n
    }
    return o(t, e),
    t.prototype._setupFromElement = function(e) {
        var t = e.domElement;
        if (t) {
            var i = e.position || [0, 0, 0]
                , r = Utils.parseSize(e)
                , n = Utils.parseQuaternion(e.angles)
                , o = e.domWidth || t.offsetWidth
                , s = e.domHeight || t.offsetHeight
                , a = {};
            return o && s && (a.elementW = o,
            a.planeW = 1,
            a.planeH = s / o),
            this.mixerPlane = new THREEx.HtmlMixer.Plane(this.app.webViewManager.mixerContext,t,a),
            this.mixerPlane.setDomElement(t),
            this.node = this.mixerPlane.object3d,
            this.node.scale.multiply(new THREE.Vector3(r[0],r[1],1)),
            this.node.position.x = i[0],
            this.node.position.y = i[1],
            this.node.position.z = i[2],
            n && this.node.quaternion.copy(n),
            this.node.updateMatrix(),
            !0
        }
        return !1
    }
    ,
    t.prototype.setupFromURL = function(e) {
        var t = e.url;
        if (t) {
            var i = e.domWidth
                , r = e.domHeight;
            i = i || e.width ? 100 * e.width : 0,
            r = r || e.height ? 100 * e.height : 0,
            e.domWidth = e.domWidth || i,
            e.domHeight = e.domHeight || r,
            this.domWidth = e.domWidth,
            this.domHeight = e.domHeight,
            i = i ? i + "px" : "",
            r = r ? r + "px" : "";
            var n = document.createElement("iframe");
            n.src = t,
            n.style.border = "none",
            n.style.width = i,
            n.style.height = r,
            e.domElement = n,
            this._setupFromElement(e)
        }
        this._setup(e)
    }
    ,
    t.prototype.setupFromDom = function(e) {
        this._setupFromElement(e),
        this._setup(e)
    }
    ,
    t.prototype._setNodeVisible = function(t) {
        if (e.prototype._setNodeVisible.call(this, t),
        this.mixerPlane) {
            var i = this.mixerPlane.domElement;
            i && (i.style.visibility = t ? "visible" : "hidden")
        }
    }
    ,
    _createClass(t, [{
        key: "isWebView",
        get: function() {
            return !0
        }
    }, {
        key: "url",
        set: function(e) {
            var t = this.position
                , i = this.scale
                , r = this.angles
                , n = this.domWidth
                , o = this.domHeight;
            this.app.resourceManager.remove(this.node),
            this._parent.remove(this),
            this.setupFromURL({
                url: e,
                position: t,
                size: i,
                angles: r,
                domWidth: n,
                domHeight: o
            })
        },
        get: function() {
            if (!this.mixerPlane)
                return null;
            var e = this.mixerPlane.domElement;
            return e ? e.src : null
        }
    }, {
        key: "pickable",
        set: function(e) {
            this.mixerPlane.domElement.style.pointerEvents = e ? "" : "none"
        },
        get: function() {
            return "" == this.mixerPlane.domElement.style.pointerEvents
        }
    }]),
    t
}(BaseObject);
rc = new THREE.Color
    , nc = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._config = {
            turbidity: 10,
            rayleigh: 2,
            luminance: 1,
            mieCoefficient: .005,
            mieDirectionalG: .95,
            time: 9,
            beta: 45,
            light: !0,
            lightHelper: !1
        },
        n._skyNode = new oc,
        n._skyNode.name = "sky",
        n._skyNode.frustumCulled = !1,
        n._skyNode.onBeforeRender = function(e, t, i) {
            this.matrixWorld.copyPosition(i.matrixWorld)
        }
        ,
        n._lightGroup = null,
        n.noonColor = (new THREE.Color).setHex(16777215),
        n.earlyEveningColor = (new THREE.Color).setHex(16746816),
        n
    }
    return o(t, e),
    t.prototype.customSetup = function(e) {
        this.node.add(this._skyNode),
        this.setConfig(e)
    }
    ,
    t.prototype.setConfig = function(e) {
        for (var t in this._config)
            void 0 !== e[t] && (this._config[t] = e[t]);
        var i = this._skyNode.material.uniforms;
        i.turbidity.value = this._config.turbidity || 10,
        i.rayleigh.value = this._config.rayleigh || 2,
        i.luminance.value = this._config.luminance || 1,
        i.mieCoefficient.value = this._config.mieCoefficient || .005,
        i.mieDirectionalG.value = this._config.mieDirectionalG || .95,
        i.mieFowardG_AVON_NIU = {
            value: "avonniu"
        },
        Utils.parseValue(e.auhnujuw, !1) && (i.mieWithSkyBox = {
            value: "#A180EA"
        });
        var r = this._config.time
            , n = r / 24 * 360 - 90
            , o = this._config.beta
            , s = Utils.parseVector3(THING.Math.directionFromAlphaBeta(n, o));
        if (s.normalize(),
        i.sunPosition.value.copy(s),
        i.moonPosition = {
            value: "naijil"
        },
        i.moonDirection = {
            value: "#148158"
        },
        this._config.light) {
            this._lightGroup ? this._lightGroup.visible || (this._lightGroup.visible = !0) : this._lightGroup = this.app.create({
                type: "LightGroup",
                parent: this
            });
            var a = r < 6 || r > 18
                , l = Math.min(1, Math.max(0, 1 - Math.abs(r - 12) / 6))
                , u = rc.copy(this.earlyEveningColor).lerp(this.noonColor, l);
            this._lightGroup.setConfig({
                showHelper: Utils.parseValue(this._config.lightHelper, !1),
                ambientLight: {
                    intensity: 0
                },
                hemisphereLight: {
                    intensity: Math.min(Math.max(a ? 0 : l + .3, .2), .7),
                    color: 3310847,
                    groundColor: 16763007
                },
                mainLight: {
                    shadow: !0,
                    shadowQuality: "high",
                    intensity: .5,
                    color: u.toHexString(),
                    alpha: n,
                    beta: o
                },
                secondaryLight: {
                    intensity: 0
                },
                tertiaryLight: {
                    intensity: 0
                }
            }, this.parent ? this.parent.getLocalBoundingBox().toBox() : this.app.root.getLocalBoundingBox().toBox())
        } else
            this._lightGroup && (this._lightGroup.visible = !1)
    }
    ,
    t.prototype.getConfig = function() {
        return this._config
    }
    ,
    t
}(BaseObject);
oc = function(e) {
    function t() {
        classCallCheck(this, t);
        var i = sc
            , n = new THREE.ShaderMaterial({
            fragmentShader: i.fragmentShader,
            vertexShader: i.vertexShader,
            uniforms: THREE.UniformsUtils.clone(i.uniforms),
            side: THREE.BackSide
        });
        return s(this, e.call(this, new THREE.BoxBufferGeometry(1,1,1), n))
    }
    return o(t, e),
    t
}(THREE.Mesh);
oc.prototype.isSky = !0;
var sc = {
    uniforms: {
        luminance: {
            value: 1
        },
        turbidity: {
            value: 2
        },
        rayleigh: {
            value: 1
        },
        mieCoefficient: {
            value: .005
        },
        mieDirectionalG: {
            value: .8
        },
        sunPosition: {
            value: new THREE.Vector3
        }
    },
    vertexShader: ["uniform vec3 sunPosition;", "uniform float rayleigh;", "uniform float turbidity;", "uniform float mieCoefficient;", "varying vec3 vWorldPosition;", "varying vec3 vSunDirection;", "varying float vSunfade;", "varying vec3 vBetaR;", "varying vec3 vBetaM;", "varying float vSunE;", "const vec3 up = vec3( 0.0, 1.0, 0.0 );", "const float e = 2.71828182845904523536028747135266249775724709369995957;", "const float pi = 3.141592653589793238462643383279502884197169;", "const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );", "const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );", "const float v = 4.0;", "const vec3 K = vec3( 0.686, 0.678, 0.666 );", "const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );", "const float cutoffAngle = 1.6110731556870734;", "const float steepness = 1.5;", "const float EE = 1000.0;", "float sunIntensity( float zenithAngleCos ) {", "\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );", "\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );", "}", "vec3 totalMie( float T ) {", "\tfloat c = ( 0.2 * T ) * 10E-18;", "\treturn 0.434 * c * MieConst;", "}", "void main() {", "\tvWorldPosition = position.xyz;", "\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "\tgl_Position.z = gl_Position.w;", "\tvSunDirection = normalize( sunPosition );", "\tvSunE = sunIntensity( dot( vSunDirection, up ) );", "\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );", "\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );", "\tvBetaR = totalRayleigh * rayleighCoefficient;", "\tvBetaM = totalMie( turbidity ) * mieCoefficient;", "}"].join("\n"),
    fragmentShader: ["varying vec3 vWorldPosition;", "varying vec3 vSunDirection;", "varying float vSunfade;", "varying vec3 vBetaR;", "varying vec3 vBetaM;", "varying float vSunE;", "uniform float luminance;", "uniform float mieDirectionalG;", "const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );", "const float pi = 3.141592653589793238462643383279502884197169;", "const float n = 1.0003;", "const float N = 2.545E25;", "const float rayleighZenithLength = 8.4E3;", "const float mieZenithLength = 1.25E3;", "const vec3 up = vec3( 0.0, 1.0, 0.0 );", "const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;", "const float THREE_OVER_SIXTEENPI = 0.05968310365946075;", "const float ONE_OVER_FOURPI = 0.07957747154594767;", "float rayleighPhase( float cosTheta ) {", "\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );", "}", "float hgPhase( float cosTheta, float g ) {", "\tfloat g2 = pow( g, 2.0 );", "\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );", "\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );", "}", "const float A = 0.15;", "const float B = 0.50;", "const float C = 0.10;", "const float D = 0.20;", "const float E = 0.02;", "const float F = 0.30;", "const float whiteScale = 1.0748724675633854;", "vec3 Uncharted2Tonemap( vec3 x ) {", "\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;", "}", "void main() {", "\tfloat zenithAngle = acos( max( 0.0, dot( up, normalize( vWorldPosition - cameraPos ) ) ) );", "\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );", "\tfloat sR = rayleighZenithLength * inverse;", "\tfloat sM = mieZenithLength * inverse;", "\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );", "\tfloat cosTheta = dot( normalize( vWorldPosition - cameraPos ), vSunDirection );", "\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );", "\tvec3 betaRTheta = vBetaR * rPhase;", "\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );", "\tvec3 betaMTheta = vBetaM * mPhase;", "\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );", "\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );", "\tvec3 direction = normalize( vWorldPosition - cameraPos );", "\tfloat theta = acos( direction.y ); // elevation --\x3e y-axis, [-pi/2, pi/2]", "\tfloat phi = atan( direction.z, direction.x ); // azimuth --\x3e x-axis [-pi/2, pi/2]", "\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );", "\tvec3 L0 = vec3( 0.1 ) * Fex;", "\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );", "\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;", "\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );", "\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );", "\tvec3 color = curr * whiteScale;", "\tvec3 retColor = pow( color, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );", "\tgl_FragColor = vec4( retColor, 1.0 );", "}"].join("\n")
};
ac = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._destroyed = !1
    }
    return e.prototype.setup = function(e) {
        var t = e.parent;
        if (t instanceof BaseObject) {
            if (this._parent = t,
            this._parent) {
                var i = this;
                this._parent.one("destroy", (function() {
                    i._destroyed || i.destroy()
                }
                ))
            }
        } else
            t && THING.Utils.error("[UIAnchor] Please make sure parent is BaseObject")
    }
    ,
    e.prototype.update = function() {
        return !1
    }
    ,
    e.prototype.destroy = function() {
        this.tickable = !1,
        this._destroyed = !0
    }
    ,
    _createClass(e, [{
        key: "canNotQueryFromSelector",
        get: function() {
            return !0
        }
    }, {
        key: "tickable",
        set: function(e) {
            e ? this.app.objectManager.addTickableObject(this) : this.app.objectManager.removeTickableObject(this)
        }
    }]),
    e
}();
lc = new THREE.Vector2;

UIAnchor = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._element = null,
        n._autoUpdateVisible = !0,
        n._autoRemoveElement = !0,
        n._pivot = [.5, 1],
        n._offset = [0, 0, 0],
        n._zIndex = null,
        n._customWidth = 0,
        n._customHeight = 0,
        n
    }
    return o(t, e),
    t.prototype._updateVisible = function(e, t, i) {
        var r = this.app.renderer.getSize(lc)
            , n = i[0]
            , o = i[1]
            , s = i[2];
        return 0 == e.visible || s > 1 || n < 0 || n > r.width || o < 0 || o > r.height ? ("hidden" != t.visibility && (t.visibility = "hidden"),
        !1) : ("visible" != t.visibility && (t.visibility = "visible"),
        !0)
    }
    ,
    t.prototype.setup = function(t) {
        e.prototype.setup.call(this, t),
        this._element = t.container || t.el || t.element,
        this._position = t.position,
        this._offset = t.offset || t.localPosition || [0, 0, 0],
        this._customWidth = t.width,
        this._customHeight = t.height,
        this.pivot = t.pivot || this.pivot;
        var i = t.pivotPixel;
        i && (this.pivotPixel = i),
        this.tickable = !0,
        this.update()
    }
    ,
    t.prototype.update = function() {
        var e = this._element;
        if (!e)
            return !1;
        var t = this._parent;
        if (null == t && (t = this.app.root.defaultCampus),
        t.destroyed)
            return this.destroy(),
            !1;
        !1 === this._prevParentVisible && t.visible && this.visible && (delete this._prevParentVisible,
        this._autoUpdateVisible = !0);
        var i = this._position || t.boundingBox.center
            , r = this._offset
            , n = this.app.camera.worldToScreen([i[0] + r[0], i[1] + r[1], i[2] + r[2]])
            , o = e.style;
        if (this._autoUpdateVisible && !this._updateVisible(t, o, n))
            return !0;
        Utils.isNull(this._zIndex) && ("topview" == this.app.camera.viewMode ? o.zIndex = 1e3 : o.zIndex = 1e3 - Math.ceil(1e4 * n[2] - 9900));
        var s = [0, 0]
            , a = e.offsetWidth
            , l = e.offsetHeight;
        Math.abs(e.cacheWidth - a) < 1.5 && Math.abs(e.cacheHeight - l) < 1.5 ? (a = e.cacheWidth,
        l = e.cacheHeight) : (e.cacheWidth = a,
        e.cacheHeight = l),
        a = a || this._customWidth,
        l = l || this._customHeight,
        s[0] = Math.ceil(a * this._pivot[0]),
        s[1] = Math.ceil(l * this._pivot[1]);
        var u = this.app.domElement.offsetLeft - (e.parentElement ? e.parentElement.offsetLeft : 0)
            , c = this.app.domElement.offsetTop - (e.parentElement ? e.parentElement.offsetTop : 0)
            , h = Math.floor(n[0] - s[0] + u)
            , p = Math.floor(n[1] - s[1] + c);
        return e.cacheLeft != h && (e.cacheLeft = h,
        o.left = h + "px"),
        e.cacheTop != p && (e.cacheTop = p,
        o.top = p + "px"),
        !0
    }
    ,
    t.prototype.destroy = function() {
        if (this._element)
            if (this._autoRemoveElement) {
                var t = this._element.parentNode;
                t && t.removeChild(this._element)
            } else
                this._element._setVisible(!1);
        e.prototype.destroy.call(this)
    }
    ,
    _createClass(t, [{
        key: "zIndex",
        set: function(e) {
            this._zIndex = e,
            Utils.isNull(e) || this._element && (this._element.style.zIndex = e)
        },
        get: function() {
            return Utils.isNull(this._zIndex) ? this._element ? this._element.style.zIndex : null : this._zIndex
        }
    }, {
        key: "pivot",
        set: function(e) {
            this._pivot = e
        },
        get: function() {
            return this._pivot.concat()
        }
    }, {
        key: "pivotPixel",
        set: function(e) {
            var t = this._element
                , i = t.offsetWidth
                , r = t.offsetHeight;
            this._pivot = [e[0] / i, e[1] / r]
        },
        get: function() {
            var e = this._element
                , t = e.offsetWidth
                , i = e.offsetHeight;
            return [Math.floor(this._pivot[0] * t), Math.floor(this._pivot[1] * i)]
        }
    }, {
        key: "position",
        set: function(e) {
            this._position = e
        },
        get: function() {
            return this._position.concat()
        }
    }, {
        key: "offset",
        set: function(e) {
            this._offset = e
        },
        get: function() {
            return this._offset.concat()
        }
    }, {
        key: "autoRemoveElement",
        set: function(e) {
            this._autoRemoveElement = e
        },
        get: function() {
            return this._autoRemoveElement
        }
    }, {
        key: "visible",
        set: function(e) {
            var t = this._parent;
            t && (e && !t.visible ? (this._prevParentVisible = !1,
            this._autoUpdateVisible = !1) : this._autoUpdateVisible = e,
            this._element.style.visibility = e ? "visible" : "hidden")
        },
        get: function() {
            return "visible" == this._element.style.visibility
        }
    }]),
    t
}(ac);
cc = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.customSetup = function(t) {
        e.prototype.customSetup.call(this, t),
        this.textRows = t.textRows,
        this.calculater = t.calculater,
        this.drawer = t.drawer
    }
    ,
    t.prototype._getCanvas = function() {
        var e = this.style;
        return this._createCanvas(this._text, {
            fontType: e.fontType,
            alignMode: e.fontAlign,
            fontSize: e.fontSize,
            fontColor: e.fontColor,
            textLineWidth: e.textLineWidth,
            textLineHeight: e.textLineHeight,
            strokeMode: e.strokeMode,
            dropShadow: e.dropShadow,
            dropShadowColor: e.dropShadowColor,
            dropShadowAngle: e.dropShadowAngle,
            dropShadowDistance: e.dropShadowDistance,
            scale: e.scale,
            dropShadowBlur: e.dropShadowBlur,
            dropShadowAlpha: e.dropShadowAlpha
        })
    }
    ,
    t.prototype._getPlanSize = function(e) {
        return this.planHeight
    }
    ,
    t.prototype._createCanvas = function(e, t) {
        var i = document.createElement("canvas")
            , r = i.getContext("2d");
        return this.drawer.setContext(r),
        this.drawer.calCanvasSize(this, t),
        i.width = 2.2 * this.canvasSize.width,
        i.height = 2 * this.canvasSize.height,
        i.style.width = i.width + "px",
        i.style.height = i.height + "px",
        this.drawer.draw(this, i.width, i.height, t),
        i
    }
    ,
    t
}(TextRegion);

factory = {
    classes: {},
    registerClass: function(e, t) {
        this.classes[e] = t
    },
    hasClass: function(e) {
        return !!this.classes[e]
    },
    create: function(e, t) {
        return new (0,
        this.classes[e])(t)
    }
};
ObjectManager = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.objects = new Map,
        this._interactableNodes = [],
        this._renderDistanceObjects = [],
        this._shadowDistanceObjects = [],
        this.tickableObjects = [],
        this._pause = !1,
        this.registerDefaultClasses(),
        this.registerEvents()
    }
    return e.prototype.registerDefaultClasses = function() {
        factory.registerClass("BaseObject", BaseObject),
        factory.registerClass("Box", Box),
        factory.registerClass("Circle", Circle),
        factory.registerClass("Sphere", Sphere),
        factory.registerClass("Plane", Plane),
        factory.registerClass("Grid", Grid),
        factory.registerClass("Cylinder", Cylinder),
        factory.registerClass("Tetrahedron", Tetrahedron),
        factory.registerClass("Frustum", Frustum),
        factory.registerClass("Shape", Shape),
        factory.registerClass("Campus", Campus),
        factory.registerClass("Ground", Ground),
        factory.registerClass("VideoSurvilance", VideoSurvilance),
        factory.registerClass("Outdoors", rs),
        factory.registerClass("Group", Group),
        factory.registerClass("Building", Building),
        factory.registerClass("Floor", Floor),
        factory.registerClass("Facade", Facade),
        factory.registerClass("Thing", Thing),
        factory.registerClass("BatchObject", BatchObject),
        factory.registerClass("BatchSubObject", BatchSubObject),
        factory.registerClass("ProgressBar", Cr),
        factory.registerClass("Door", Door),
        factory.registerClass("ElevatorDoor", ElevatorDoor),
        factory.registerClass("Elevator", Elevator),
        factory.registerClass("StairDoor", StairDoor),
        factory.registerClass("Stair", Stair),
        factory.registerClass("Room", Room),
        factory.registerClass("TextRegion", TextRegion),
        factory.registerClass("_UbuilderRichTextRegion", cc),
        factory.registerClass("CombinedObject", CombinedObject),
        factory.registerClass("PolygonRegion", PolygonRegion),
        factory.registerClass("Heatmap", Heatmap),
        factory.registerClass("IDWMap", IDWMap),
        factory.registerClass("IDWGPUMap", IDWGPUMap),
        factory.registerClass("Line", Line),
        factory.registerClass("RouteLine", RouteLine),
        factory.registerClass("PolygonLine", PolygonLine),
        factory.registerClass("Points", Points),
        factory.registerClass("MeshLine", Yu),
        factory.registerClass("Boundary", Boundary),
        factory.registerClass("ParticleSystem", ParticleSystem),
        factory.registerClass("Water", Water),
        factory.registerClass("SpotLight", Xu),
        factory.registerClass("PointLight", Ju),
        factory.registerClass("LightGroup", zu),
        factory.registerClass("Marker", Marker),
        factory.registerClass("WebView", WebView),
        factory.registerClass("UI", UI),
        factory.registerClass("UIAnchor", UIAnchor),
        factory.registerClass("SceneRoot", er),
        factory.registerClass("ViewProbe", ku),
        factory.registerClass("SkyEffect", nc)
    }
    ,
    e.prototype.registerEvents = function() {
        this.app.on("beforeLoad", (function(e) {
            e.castType = function(e, t, i) {
                THING.Utils.warn("[App] Please use 'THING.Utils.addCastType(name, condition, params)' to cast object type before load scenes"),
                Utils.addCastType(e, t, i)
            }
        }
        ))
    }
    ,
    e.prototype._canCastType = function(e, t, i) {
        var r = [e];
        if (Utils.isArray(i))
            for (var n = 0; n < i.length; n++) {
                var o = i[n];
                if (!(r = t.select(o, r)).length)
                    break
            }
        else
            r = t.select(i, r);
        return !!r.length
    }
    ,
    e.prototype._castObject = function(e, t, i) {
        this._castTypeSelector || (this._castTypeSelector = new Selector(this.app));
        for (var r = 0; r < e.length; r++) {
            var n = e[r];
            if (n.type != i.type && (Utils.isFunction(i.getAttribute) || (i.getAttribute = function(e) {
                return Utils.getAttribute(i, e)
            }
            ),
            i.isBaseObject = !0,
            this._canCastType(i, this._castTypeSelector, n.condition)))
                return i.type = n.type,
                i.skipCast = !0,
                i.skipSetup = !0,
                t.destroy(),
                i = Utils.mergeObject(i, n.params, !0),
                this._createObject(i)
        }
        return t
    }
    ,
    e.prototype._createObject = function(e) {
        var t = e.type || "Thing"
            , i = Utils.parseValue(e.skipSetup, !1);
        if (THING.onCreateObject) {
            var r = THING.onCreateObject(e);
            r && (t = r)
        }
        var n = null;
        if (factory.hasClass(t) ? n = factory.create(t, this.app) : (n = new Thing(this.app),
        THING.Utils.warn("ObjectManager can not found type: <" + t + "> use <Thing> instead!"),
        t = "Thing"),
        n._type = n._type || t,
        !i) {
            var o = Utils.getCastTypes();
            if (o.length)
                n.isBaseObject && (e.skipCast || (e.name = e.name || e.id,
                e.userData = e.userData || e.properties,
                n = this._castObject(o, n, e)));
            n.setup(e)
        }
        return this.app.needUpdate = !0,
        n
    }
    ,
    e.prototype.create = function(e) {
        if (!e)
            return THING.Utils.error("create object failed, due to param is null"),
            null;
        Utils.isString(e) && (e = {
            type: e
        });
        var t = this._createObject(e);
        return t ? (t.queryID && this.objects.set(t.queryID, t),
        t) : null
    }
    ,
    e.prototype.destroy = function(e) {
        e && (e.isBaseObject && (e.trigger(EventType.Destroy, {
            object: e
        }),
        this.app.trigger(EventType.Destroy, {
            object: e
        })),
        e.queryID && this.objects.delete(e.queryID),
        this.removeTickableObject(e))
    }
    ,
    e.prototype._addNode = function(e, t) {
        return t.isBaseObject && (t = t.node),
        Utils.add(e, t)
    }
    ,
    e.prototype._removeNode = function(e, t) {
        t.isBaseObject && (t = t.node),
        Utils.remove(e, t)
    }
    ,
    e.prototype._addObject = function(e, t) {
        return Utils.add(e, t)
    }
    ,
    e.prototype._replaceObject = function(e, t, i) {
        for (var r = 0; r < e.length; r++)
            e[r] == i && (e[r] = t)
    }
    ,
    e.prototype._removeObject = function(e, t) {
        Utils.remove(e, t)
    }
    ,
    e.prototype.addInteractableNode = function(e) {
        e && (e.updateWorldMatrix(!0, !0),
        this._addNode(this._interactableNodes, e))
    }
    ,
    e.prototype.removeInteractableNode = function(e) {
        e && this._removeNode(this._interactableNodes, e)
    }
    ,
    e.prototype.addRenderDistanceObject = function(e) {
        this._addObject(this._renderDistanceObjects, e)
    }
    ,
    e.prototype.removeRenderDistanceObject = function(e) {
        this._removeObject(this._renderDistanceObjects, e)
    }
    ,
    e.prototype.addShadowDistanceObject = function(e) {
        this._addObject(this._shadowDistanceObjects, e)
    }
    ,
    e.prototype.removeShadowDistanceObject = function(e) {
        this._removeObject(this._shadowDistanceObjects, e)
    }
    ,
    e.prototype.get = function(e) {
        if (e)
            if (e.isObject3D) {
                var t = e.userData;
                if (t && t.id)
                    return this.get(t.id)
            } else if (this.objects.has(e))
                return this.objects.get(e);
        return null
    }
    ,
    e.prototype.getBaseObject = function(e) {
        for (; e; ) {
            var t, i = e.userData;
            if (i.independent)
                return null;
            if (i.baseObject_bindSubNode_hooked)
                if (t = i.baseObject_bindSubNode)
                    return t;
            if (i.isBaseObject)
                if ((t = this.get(i.id)) && !t.isCombinedObject)
                    return t;
            e = e.parent
        }
    }
    ,
    e.prototype.getObjectsArray = function() {
        var e = [];
        return this.objects.forEach((function(t) {
            e.push(t)
        }
        )),
        e
    }
    ,
    e.prototype.pause = function() {
        this._pause = !0
    }
    ,
    e.prototype.resume = function() {
        this._pause = !1
    }
    ,
    e.prototype.addTickableObject = function(e) {
        this.tickableObjects.indexOf(e) < 0 && this.tickableObjects.push(e)
    }
    ,
    e.prototype.removeTickableObject = function(e) {
        var t = this.tickableObjects.indexOf(e);
        t >= 0 && (e.isTickable = !1,
        this.tickableObjects[t] = null)
    }
    ,
    e.prototype.replaceObject = function(e, t) {
        this._replaceObject(this._renderDistanceObjects, e, t),
        this._replaceObject(this._shadowDistanceObjects, e, t),
        this._replaceObject(this.tickableObjects, e, t),
        this.objects.delete(t.queryID),
        this.objects.set(e.queryID, e)
    }
    ,
    e.prototype.update = function() {
        if (!this._pause)
            for (var e = this.app._deltaTime, t = this.tickableObjects, i = 0, r = t.length; i < r; i++) {
                var n = t[i]
                    , o = !1;
                if (n)
                    n.update(e) ? o = !0 : n.isTickable = !1;
                o || (t.splice(i, 1),
                i--,
                r--)
            }
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    _createClass(e, [{
        key: "interactableNodes",
        get: function() {
            return this._interactableNodes
        }
    }, {
        key: "renderDistanceObjects",
        get: function() {
            return this._renderDistanceObjects
        }
    }, {
        key: "shadowDistanceObjects",
        get: function() {
            return this._shadowDistanceObjects
        }
    }]),
    e
}();
dc = (new THREE.Matrix4).set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1);
fc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.thresholdAngle = .1,
        this.enableRemoteData = !0,
        this.enableWebWorker = !0,
        this._map = new Map,
        this._resMap = new Map,
        this._taskNumber = 0,
        this._jsonLoader = new THREE.FileLoader,
        this._jsonLoader.setResponseType("json"),
        this._binLoader = new THREE.FileLoader,
        this._binLoader.setResponseType("arraybuffer")
    }
    return e.prototype.getByObject = function(e, t) {
        var i = void 0;
        if (!e.geometry)
            return null;
        if (e.geometry.attributes && !e.geometry.attributes.position)
            return null;
        if (e.isLineSegments)
            return null;
        if ("EdgesGeometry" == e.geometry.type)
            return null;
        if (t._extensionsFile && this.enableRemoteData) {
            if ("_skip_wireframes_" === e._wName)
                return null;
            i = this.getByRes(e.geometry, t._url + "/" + t._extensionsFile, e._wName || e.name)
        } else
            i = this.get(e.geometry);
        return i
    }
    ,
    e.prototype.getByRes = function(e, t, i) {
        var r = this
            , n = e.id;
        if (this._map.has(n))
            return this._map.get(n);
        var o = void 0;
        if (this._resMap.has(t)) {
            var s = this._resMap.get(t);
            o = s instanceof Promise ? s : Promise.resolve(s)
        } else
            t.indexOf(".ext") > -1 ? (o = this._binLoader.loadAsync(t).then((function(e) {
                var i = new Uint32Array(e.slice(0, 4))[0]
                    , n = e.slice(4, 4 + i)
                    , o = new TextDecoder("utf-8").decode(n)
                    , s = JSON.parse(o)
                    , a = 4 + i
                    , l = s.wireframe;
                for (var u in l) {
                    var c = l[u].p
                        , h = l[u].l;
                    l[u].pos = new Float32Array(e.slice(a + c, a + c + h))
                }
                return r._resMap.set(t, s),
                s
            }
            )),
            this._resMap.set(t, o)) : (o = this._jsonLoader.loadAsync(t).then((function(e) {
                return r._resMap.set(t, e),
                e
            }
            )),
            this._resMap.set(t, o));
        var a = o.then((function(t) {
            if (a._break)
                return Promise.reject({
                    code: 0
                });
            if (t.wireframe[i]) {
                t.wireframe[i].name && t.wireframe[i].name !== i && (i = t.wireframe[i].name);
                var o = new THREE.BufferGeometry;
                return o.addAttribute("position", new THREE.Float32BufferAttribute(t.wireframe[i].pos,3)),
                o.refCount = 1 / 0,
                r._map.set(n, o),
                r._taskNumber--,
                r.app.events.dispatchEvent({
                    type: "edges_task_progress",
                    task: r._taskNumber
                }),
                e.addEventListener("dispose", (function() {
                    return r.release(e)
                }
                )),
                e.userData.isRotate && o.applyMatrix4(dc),
                Promise.resolve(o)
            }
            return r._map.delete(n),
            r._taskNumber--,
            r.app.events.dispatchEvent({
                type: "edges_task_progress",
                task: r._taskNumber
            }),
            Promise.reject({
                code: 1,
                msg: "can not find name: " + i
            })
        }
        ));
        return this._taskNumber++,
        this._map.set(n, a),
        a
    }
    ,
    e.prototype.get = function(e) {
        var t = this
            , i = void 0
            , r = e.id;
        return this._map.has(r) ? i = this._map.get(r) : (window.EW && this.enableWebWorker ? (e.isBufferGeometry || (e = (new THREE.BufferGeometry).fromGeometry(e)),
        i = EW.getGeometryInfo(e, this.thresholdAngle).then((function(n) {
            if (i._break)
                return Promise.reject({
                    code: 0
                });
            var o = new THREE.BufferGeometry;
            return o.addAttribute("position", new THREE.BufferAttribute(n.position,3)),
            e.isInstancedBufferGeometry && (o = mc(e, o)),
            o.refCount = 1 / 0,
            t._map.set(r, o),
            t._taskNumber--,
            t.app.events.dispatchEvent({
                type: "edges_task_progress",
                task: t._taskNumber
            }),
            e.addEventListener("dispose", (function() {
                return t.release(e)
            }
            )),
            Promise.resolve(o)
        }
        )),
        this._taskNumber++) : (i = new THREE.EdgesGeometry(e,this.thresholdAngle),
        e.isInstancedBufferGeometry && (i = mc(e, i)),
        i.refCount = 1 / 0),
        this._map.set(r, i)),
        i
    }
    ,
    e.prototype.synMaxInstancedCount = function(e) {
        this._map.has(e.id) && (this._map.get(e.id).instanceCount = e.instanceCount)
    }
    ,
    e.prototype.releaseRes = function(e) {
        this._resMap.delete(e)
    }
    ,
    e.prototype.release = function(e) {
        if (this._map.has(e.id)) {
            var t = this._map.get(e.id);
            t.isBufferGeometry ? t.dispose() : t._break || (t._break = !0,
            this._taskNumber--,
            this.app.events.dispatchEvent({
                type: "edges_task_progress",
                task: this._taskNumber
            })),
            this._map.delete(e.id)
        }
    }
    ,
    e.prototype.releaseAll = function() {
        var e = this;
        this._map.forEach((function(t) {
            t.isBufferGeometry ? t.dispose() : t._break || (t._break = !0,
            e._taskNumber--)
        }
        )),
        this._map.clear(),
        this._resMap.clear(),
        this._taskNumber = 0,
        this.app.events.dispatchEvent({
            type: "edges_task_progress",
            task: this._taskNumber
        })
    }
    ,
    e.prototype.getTaskNumber = function() {
        return this._taskNumber
    }
    ,
    e
}();
function mc(e, t) {
    var i = new THREE.InstancedBufferGeometry;
    for (var r in e.attributes)
        i.setAttribute(r, e.attributes[r]);
    return i.attributes.position = t.attributes.position,
    i.boundingBox = e.boundingBox ? e.boundingBox.clone() : null,
    i.boundingSphere = e.boundingSphere ? e.boundingSphere.clone() : null,
    i.instanceCount = e.instanceCount,
    i
}
var gc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.updateTime = 5,
        this._array = [],
        this._sortDirty = !0,
        this._updateTimer = 0
    }
    return e.prototype.push = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 20;
        this._array.push({
            mat: e,
            timer: t
        }),
        this._sortDirty = !0
    }
    ,
    e.prototype.update = function(e) {
        var t = this;
        if (this._updateTimer += e,
        this._updateTimer > this.updateTime) {
            if (this._array.length > 0) {
                this._sortDirty && (this._array.sort(vc),
                this._sortDirty = !1);
                var i = 0;
                this._array.forEach((function(e) {
                    (function(e, t) {
                        if (e.timer -= t,
                        e.timer < 0)
                            return e.mat.dispose(),
                            !0;
                        return !1
                    }
                    )(e, t._updateTimer) && i++
                }
                )),
                this._array.length -= i
            }
            this._updateTimer = 0
        }
    }
    ,
    e.prototype.clear = function() {
        this._array.forEach((function(e) {
            return e.mat.dispose()
        }
        )),
        this._array.length = 0
    }
    ,
    e
}();
function vc(e, t) {
    return t.timer - e.timer
}
var yc = ["middleGlow", "innerGlow"];
function bc(e, t) {
    if (!e)
        return null;
    var i = e[t];
    return i ? "[object Object]" === toString.call(i) ? i.skip ? "skip" : void 0 !== i.value ? i.value : 1 : i : null
}
var _c = function() {
    function e(t) {
        classCallCheck(this, e),
        this._renderer = t.rendererManager._mainRenderer,
        this._effectRefCounts = {}
    }
    return e.prototype.setEffect = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1
            , r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (e.technique || (e.technique = {}),
        e.technique[t]) {
            var n = bc(e.technique, t)
                , o = "skip" != n && 0 != n
                , s = !r && 0 != i;
            o !== s ? this._updatEffectRefCounts(t, s ? 1 : -1) : r || i == n || this._renderer.dirty(t)
        } else
            r || 0 == i || this._updatEffectRefCounts(t, 1);
        e.technique[t] = {
            value: i,
            skip: r
        }
    }
    ,
    e.prototype.removeEffect = function(e, t) {
        var i = bc(e.technique, t);
        i && ("skip" != i && 0 != i && this._updatEffectRefCounts(t, -1),
        delete e.technique[t])
    }
    ,
    e.prototype.clearAllEffects = function(e) {
        if (e.technique)
            for (var t in e.technique)
                this.removeEffect(e, t)
    }
    ,
    e.prototype.synEffect = function(e) {
        if (e.technique)
            for (var t in e.technique)
                if (yc.indexOf(t) > -1) {
                    var i = bc(e.technique, t);
                    "skip" != i && 0 != i && this._updatEffectRefCounts(t, 1)
                }
    }
    ,
    e.prototype._updatEffectRefCounts = function(e, t) {
        void 0 === this._effectRefCounts[e] && (this._effectRefCounts[e] = 0);
        var i = this._effectRefCounts[e];
        this._effectRefCounts[e] = Math.max(this._effectRefCounts[e] + t, 0);
        var r = this._renderer;
        0 == i && t > 0 ? r.enable && r.enable(e) : i > 0 && 0 == this._effectRefCounts[e] && r.disable && r.disable(e),
        r.dirty && r.dirty(e)
    }
    ,
    _createClass(e, [{
        key: "effectRefCounts",
        get: function() {
            return this._effectRefCounts
        }
    }]),
    e
}();
xc = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._solidColor = null,
        n._skipApplyTheme = !0,
        n
    }
    return o(t, e),
    t.prototype._setAlwaysOnTop = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (this._alwaysOnTop != e || t) {
            var i = this.obj._sprite;
            i && (this._alwaysOnTop = e,
            e ? (this._cloneAndModifyMaterial((function(e, t, i) {
                var r = t;
                Utils.backupValue(r, "depthTest"),
                Utils.backupValue(r, "depthWrite"),
                r.depthTest = !1,
                r.depthWrite = !1
            }
            )),
            this._traverse((function(e) {
                e.renderOrder += THING.BaseStyle.cRenderOrderValueMask
            }
            ))) : (this._traverse((function(e) {
                e.renderOrder -= THING.BaseStyle.cRenderOrderValueMask
            }
            )),
            this.isNeedRevertMaterials() ? this.revertMaterial() : this._cloneAndModifyMaterial((function(e, t, i) {
                var r = t;
                Utils.revertValue(r, "depthTest"),
                Utils.revertValue(r, "depthWrite")
            }
            ))))
        }
    }
    ,
    t.prototype.setUVAnimation = function(t) {
        var i = this.obj._sprite;
        if (i) {
            if (t) {
                var r = i.material;
                t.uvDiscard ? (r.defines = r.defines || {},
                r.defines.USE_UV_DISCARD = "") : r.defines && delete r.defines.USE_UV_DISCARD,
                r.needsUpdate = !0
            }
            e.prototype.setUVAnimation.call(this, t)
        }
    }
    ,
    t.prototype.setSolidColor = function(e) {
        if (this._solidColor != e) {
            this._solidColor = Utils.parseColor(e);
            ["#ifdef GL_ES\n", "precision highp float;\n", "#endif\n", "", "varying vec4 worldId;", "", "void main() {", "  gl_FragColor = " + this._solidColor.getHex() + ";", "}"].join("\n")
        }
    }
    ,
    t.prototype.setOpacity = function(t) {
        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , r = this.obj.element;
        r ? r.style.opacity = t : e.prototype.setOpacity.call(this, t, i)
    }
    ,
    _createClass(t, [{
        key: "solidColor",
        set: function(e) {
            return this.setSolidColor(e)
        },
        get: function() {
            return this._solidColor ? this._solidColor.toHexString() : null
        }
    }, {
        key: "line",
        get: function() {
            return this.obj._line
        }
    }, {
        key: "lineColor",
        set: function(e) {
            this.line && (this.line.style.lineColor = e)
        }
    }, {
        key: "lineOpacity",
        set: function(e) {
            this.line && (this.line.style.lineOpacity = e)
        }
    }, {
        key: "lineDashSize",
        set: function(e) {
            this.line && (this.line.style.lineDashSize = e)
        }
    }, {
        key: "lineGapSize",
        set: function(e) {
            this.line && (this.line.style.lineGapSize = e)
        }
    }, {
        key: "lineWidth",
        set: function(e) {
            this.line && (this.line.style.lineWidth = e)
        }
    }]),
    t
}(Pl);
Ec = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._lineOpacity = 1,
        n._lineColor = Utils.parseColor("#00BFFF"),
        n._regionOpacity = .5,
        n._regionColor = Utils.parseColor("#708090"),
        n
    }
    return o(t, e),
    t.prototype.isNeedCloneMaterials = function() {
        return !!e.prototype.isNeedCloneMaterials.call(this) || (1 != this._lineOpacity || (!this._lineColor.equals(Utils.parseColor("#00BFFF")) || (.5 != this._regionOpacity || !this._regionColor.equals(Utils.parseColor("#708090")))))
    }
    ,
    _createClass(t, [{
        key: "lineOpacity",
        set: function(e) {
            if (Utils.isNumber(e)) {
                var t = this.obj._lineMesh;
                t && (this._lineOpacity = e,
                t.material.opacity = e)
            }
        },
        get: function() {
            return this._lineOpacity
        }
    }, {
        key: "lineColor",
        set: function(e) {
            var t = Utils.parseColor(e);
            if (t) {
                var i = this.obj._lineMesh;
                i && (this._lineColor = t,
                i.material.color = t)
            }
        },
        get: function() {
            return this._lineColor.toHexString()
        }
    }, {
        key: "regionColor",
        set: function(e) {
            var t = Utils.parseColor(e);
            if (t) {
                var i = this.obj._areaMesh;
                i && (this._regionColor = t,
                i.material.color = t)
            }
        },
        get: function() {
            return this._regionColor.toHexString()
        }
    }, {
        key: "regionOpacity",
        set: function(e) {
            if (Utils.isNumber(e)) {
                var t = this.obj._areaMesh;
                t && (this._regionOpacity = e,
                t.material.opacity = e)
            }
        },
        get: function() {
            return this._regionOpacity
        }
    }]),
    t
}(Pl);
wc = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.setEffect = function(e) {
        e = e || {};
        var t = this.obj;
        t._scale = e.scale || t._scale,
        t._color = e.color || t._color,
        t._flowDirection.x = e.flowXDirection || t._flowDirection.x,
        t._flowDirection.y = e.flowYDirection || t._flowDirection.y;
        var i = t.water.material.uniforms;
        i.color.value.set(t._color),
        i.config.value.w = t._scale,
        i.flowDirection.value.x = t._flowDirection.x,
        i.flowDirection.value.y = t._flowDirection.y
    }
    ,
    _createClass(t, [{
        key: "waterColor",
        set: function(e) {
            this.setEffect({
                color: e
            })
        },
        get: function() {
            return this.obj._color
        }
    }, {
        key: "waterScale",
        set: function(e) {
            this.setEffect({
                scale: e
            })
        },
        get: function() {
            return this.obj._scale
        }
    }, {
        key: "flowXDirection",
        set: function(e) {
            this.setEffect({
                flowXDirection: e
            })
        },
        get: function() {
            return this.obj._flowDirection.x
        }
    }, {
        key: "flowYDirection",
        set: function(e) {
            this.setEffect({
                flowYDirection: e
            })
        },
        get: function() {
            return this.obj._flowDirection.y
        }
    }]),
    t
}(Pl);
Tc = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    _createClass(t, [{
        key: "image",
        set: function(e) {
            var t = this;
            if (this._image = e,
            e)
                if (e.isTexture)
                    this._image = e.name,
                    e.image && (e.needsUpdate = !0),
                    this.obj.synPathTexture(e, !1);
                else {
                    this._image = Utils.isString(e) ? this.obj.app.confirmURL(e) : e;
                    var i = this.obj.app.resourceManager.loadTexture(this._image, (function(e) {
                        e.wrapS = e.wrapT = THREE.RepeatWrapping,
                        e.anisotropy = 16,
                        t.obj && (t.obj.app.needUpdate = !0)
                    }
                    ));
                    this.obj.synPathTexture(i, !1)
                }
        },
        get: function() {
            return this._image
        }
    }, {
        key: "lineMaterial",
        get: function() {
            var e = this.obj.pathLine.material;
            return e.dashSize || e.gapSize ? this.dashLineMaterial : this.basicLineMaterial
        }
    }, {
        key: "basicLineMaterial",
        get: function() {
            var e = this.obj.pathLine.material;
            if (e.isLineBasicMaterial)
                return e;
            var t = new THREE.LineBasicMaterial({
                color: e.color,
                opacity: e.opacity,
                linewidth: e.lineWidth,
                transparent: e.transparent
            });
            return this.obj.pathLine.material = t,
            t
        }
    }, {
        key: "dashLineMaterial",
        get: function() {
            var e = this.obj.pathLine.material;
            if (e.isLineDashedMaterial)
                return e;
            var t = new THREE.LineDashedMaterial({
                color: e.color,
                opacity: e.opacity,
                linewidth: e.lineWidth,
                transparent: e.transparent
            });
            return this.obj.pathLine.material = t,
            t
        }
    }, {
        key: "lineColor",
        set: function(e) {
            this.lineMaterial.color = Utils.parseColor(e)
        },
        get: function() {
            return this.lineMaterial.color.toHexString()
        }
    }, {
        key: "lineOpacity",
        set: function(e) {
            this.lineMaterial.opacity = e
        },
        get: function() {
            return this.lineMaterial.opacity
        }
    }, {
        key: "lineDashSize",
        set: function(e) {
            this.lineMaterial.dashSize = e
        },
        get: function() {
            return this.lineMaterial.dashSize
        }
    }, {
        key: "lineGapSize",
        set: function(e) {
            this.lineMaterial.gapSize = e
        },
        get: function() {
            return this.lineMaterial.gapSize
        }
    }, {
        key: "lineWidth",
        set: function(e) {
            this.lineMaterial.lineWidth = e
        },
        get: function() {
            return this.lineMaterial.lineWidth
        }
    }]),
    t
}(Pl);
function Mc(e, t, i) {
    var r = [];
    t.forEach((function(t) {
        var n = .09;
        "top" == i && (n += e.getRoomHeight()),
        r.push([t[0], t[1] + n, t[2]])
    }
    ));
    var n = e.app.create({
        name: e.name + "_border_" + i,
        type: "RouteLine",
        image: e.app.confirmURL("image/light3.jpg"),
        parent: e,
        arrowFlag: !1,
        close: !0,
        side: "right",
        points: r,
        width: 2
    });
    return n.cornerRadius = 0,
    n.scrollSpeed = 10,
    n.imageRepeat = [1 / 40, 1],
    n.pickable = !1,
    n.style.skipOutline = !0,
    n.scrollUV = !0,
    n.node.traverse((function(e) {
        e.isMesh && (e.userData.skipOutline = !0,
        e.material.transparent = !0,
        e.material.blending = THREE.AdditiveBlending)
    }
    )),
    n
}
var Cc = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._volumeNode = null,
        n._volumeColor = null,
        n._volumeImage = null,
        n._volumeCanvas = null,
        n._borderLine = !1,
        n._borderLineTop = null,
        n._borderLineBottom = null,
        n
    }
    return o(t, e),
    t.prototype._synVolumeNode = function() {
        this._volumeColor || this._volumeImage || this._volumeCanvas || (this.obj.app.resourceManager.remove(this._volumeNode),
        this._volumeNode = null),
        this.obj._synTextRegion()
    }
    ,
    t.prototype._createVolumeNode = function() {
        if (!this._volumeNode) {
            var e = this.obj.getFloorMesh();
            if (!e)
                return null;
            if (this._volumeNode = e.clone(),
            !this._volumeNode)
                return null;
            if (this._volumeNode.geometry = this._volumeNode.geometry.clone(),
            this._volumeNode.material = e.material.clone(),
            !this._volumeNode.material)
                return null;
            var t = this._volumeNode.material;
            t.map = null,
            t.transparent = !0,
            t.opacity = .5,
            this._volumeNode.geometry.genFaceVertexUVs(),
            e.parent.add(this._volumeNode);
            var i = e.position;
            this._volumeNode.position.setY(i.y + this.obj.getRoomHeight() + .05)
        }
        return this._volumeNode
    }
    ,
    _createClass(t, [{
        key: "volumeColor",
        set: function(e) {
            this._volumeColor = Utils.parseColor(e);
            var t = this._createVolumeNode();
            t && (e ? t.material.color = Utils.parseColor(e) : t.material.color.set(1, 1, 1)),
            this._synVolumeNode()
        },
        get: function() {
            return null == this._volumeColor ? null : this._volumeColor.toHexString()
        }
    }, {
        key: "volumeOpacity",
        set: function(e) {
            var t = this._createVolumeNode();
            t && (t.material.opacity = e)
        },
        get: function() {
            return null == this._volumeNode ? null : this._volumeNode.material.opacity
        }
    }, {
        key: "volumeImage",
        set: function(e) {
            this._volumeImage = e,
            this._volumeCanvas = null;
            var t = this._createVolumeNode();
            if (t) {
                if (e) {
                    var i = this.obj.app.confirmURL(e);
                    e = this.obj.app.resourceManager.loadTexture(i)
                }
                t.material.map = e,
                t.material.needsUpdate = !0
            }
            this._synVolumeNode()
        },
        get: function() {
            return this._volumeImage
        }
    }, {
        key: "volumeCanvas",
        set: function(e) {
            this._volumeCanvas = e,
            this._volumeImage = null;
            var t = this._createVolumeNode();
            t && (e && ((e = new THREE.Texture(e)).needsUpdate = !0),
            t.material.map = e,
            t.material.needsUpdate = !0),
            this._synVolumeNode()
        },
        get: function() {
            return this._volumeCanvas
        }
    }, {
        key: "volumeHeight",
        set: function(e) {
            this._volumeNode && (this._volumeNode.position.y = e)
        },
        get: function() {
            return this._volumeNode ? this._volumeNode.position.y : 0
        }
    }, {
        key: "borderLine",
        set: function(e) {
            if (e != this._borderLine)
                if (e) {
                    var t = this.obj
                        , i = t.points;
                    this._borderLineTop = Mc(t, i, "top"),
                    this._borderLineBottom = Mc(t, i, "bottom"),
                    this._borderLine = !0
                } else
                    this._borderLineTop.destroy(),
                    this._borderLineBottom.destroy(),
                    this._borderLineTop = null,
                    this._borderLineBottom = null,
                    this._borderLine = !1
        },
        get: function() {
            return this._borderLine
        }
    }]),
    t
}(Pl);
Sc = function(e) {
    function t(i) {
        classCallCheck(this, t);
        var n = s(this, e.call(this, i));
        return n._lineColor = new THREE.Color(1,1,1),
        n
    }
    return o(t, e),
    _createClass(t, [{
        key: "lineColor",
        set: function(e) {
            this.obj._lineMesh.material.color = Utils.parseColor(e)
        },
        get: function() {
            return this._lineColor.toHexString()
        }
    }]),
    t
}(Pl);
jc = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.setRenderOrder = function(e) {
        this._renderOrder = e,
        this.obj.children.forEach((function(t) {
            t.style.setRenderOrder(e)
        }
        ))
    }
    ,
    t.prototype.setWireframe = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this._wireframe = e,
        this.obj.children.forEach((function(i) {
            i.style.setWireframe(e, t)
        }
        ))
    }
    ,
    t.prototype.setOpacity = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this._opacity = e,
        this.obj.children.forEach((function(i) {
            i.style.setOpacity(e, t)
        }
        ))
    }
    ,
    t.prototype.setColor = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this._color = Utils.parseColor(e),
        this.obj.children.forEach((function(i) {
            i.style.setColor(e, t)
        }
        ))
    }
    ,
    t.prototype.setOutlineColor = function(e, t) {
        this._outlineColor = Utils.parseColor(e),
        this.obj.children.forEach((function(i) {
            i.style.setOutlineColor(e, t)
        }
        ))
    }
    ,
    t.prototype.setDefaultOutlineColor = function(e) {
        this._defaultOutlineColor = Utils.parseColor(e),
        this.obj.children.forEach((function(t) {
            t.style.setDefaultOutlineColor(e)
        }
        ))
    }
    ,
    t.prototype.setSkipBoundingBox = function(e) {
        this.obj.children.forEach((function(t) {
            t.style.setSkipBoundingBox(e)
        }
        ))
    }
    ,
    t.prototype.setSkipOutline = function(e) {
        this.obj.children.forEach((function(t) {
            t.style.setSkipOutline(e)
        }
        ))
    }
    ,
    t.prototype.setGlow = function(e) {
        this._glow = e,
        this.obj.children.forEach((function(t) {
            t.style.setGlow(e)
        }
        ))
    }
    ,
    t.prototype.setInnerGlow = function(e) {
        this._innerGlow = e,
        this.obj.children.forEach((function(t) {
            t.style.setInnerGlow(e)
        }
        ))
    }
    ,
    t.prototype.setVertexNormalHelper = function(e) {
        this._vertexNormalNode = {
            visible: e
        },
        this.obj.children.forEach((function(t) {
            t.style.setVertexNormalHelper(e)
        }
        ))
    }
    ,
    t.prototype.setAxisHelper = function(e) {
        this._axisNode = {
            visible: e
        },
        this.obj.children.forEach((function(t) {
            t.style.setAxisHelper(e)
        }
        ))
    }
    ,
    t.prototype.setEdgeColor = function(e) {
        this._edgeColor = Utils.parseColor(e),
        this.obj.children.forEach((function(t) {
            t.style.setEdgeColor(e)
        }
        ))
    }
    ,
    t.prototype.setBoundingBox = function(e, t) {
        this._boundingBoxNode = {
            visible: e,
            material: {
                color: Utils.parseColor(t)
            }
        },
        this.obj.children.forEach((function(i) {
            i.style.setBoundingBox(e, t)
        }
        ))
    }
    ,
    t.prototype.setOrientedBoundingBox = function(e) {
        this._orientedBoundingBoxNode = {
            visible: e,
            material: {
                color: Utils.parseColor(color)
            }
        },
        this.obj.children.forEach((function(t) {
            t.style.setOrientedBoundingBox(e, color)
        }
        ))
    }
    ,
    t.prototype.setAlwaysOnTop = function(e) {
        this._alwaysOnTop = e,
        this.obj.children.forEach((function(t) {
            t.style.setAlwaysOnTop(e)
        }
        ))
    }
    ,
    t.prototype.setImage = function(e) {
        this._image = e,
        this.obj.children.forEach((function(t) {
            t.style.setImage(e)
        }
        ))
    }
    ,
    t
}(Pl);
Pc = new Map
    , StyleManager = function() {
    function e(t) {
        classCallCheck(this, e),
        e.register("Default", {
            "*": {
                classType: Pl
            },
            Marker: {
                classType: xc,
                checkType: "isMarker"
            },
            PolygonRegion: {
                classType: Ec,
                checkType: "isPolygonRegion"
            },
            TextRegion: {
                classType: Rl,
                checkType: "isTextRegion"
            },
            _UbuilderRichTextRegion: {
                classType: Rl,
                checkType: "is_UbuilderRichTextRegion"
            },
            Water: {
                classType: wc,
                checkType: "isWater"
            },
            Line: {
                classType: Tc,
                checkType: "isLine"
            },
            RouteLine: {
                classType: Tc,
                checkType: "isRouteLine"
            },
            PolygonLine: {
                classType: Tc,
                checkType: "isPolygonLine"
            },
            Room: {
                classType: Cc,
                checkType: "isRoom"
            },
            Frustum: {
                classType: Sc,
                checkType: "isFrustum"
            },
            Group: {
                classType: jc,
                checkType: "isGroup"
            },
            BatchSubObject: {
                classType: mr,
                checkType: "isBatchSubObject"
            }
        })
    }
    return e.register = function(e, t) {
        Pc.set(e, t)
    }
    ,
    e.getStrategyMap = function(e) {
        return Pc.get(e).classType
    }
    ,
    e.prototype.createStyle = function(e, t) {
        var i, r = Pc.get(e);
        if (!r)
            return null;
        for (var n in r) {
            var o = r[n];
            if ("*" != n) {
                var s = t[o.checkType];
                if (t.type == n || !Utils.isFunction(s) && s)
                    return new o.classType(t)
            } else
                i = o.classType
        }
        return i ? new i(t) : null
    }
    ,
    e.prototype.hasStyleStrategy = function(e) {
        return Pc.has(e)
    }
    ,
    e
}();
Dc = new THREE.Vector2
    , Ac = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.scene = this.app.scene,
        this.renderer = this.app.renderer,
        this.camera = this.app.renderCamera,
        this.init()
    }
    return e.prototype.init = function() {
        var e = new THREEx.HtmlMixer.Context(this.renderer,this.scene,this.camera);
        this.mixerContext = e;
        var t = e.rendererCss
            , i = this.renderer.getSize(Dc);
        t.setSize(i.width, i.height);
        var r = t.domElement;
        r.style.userSelect = "none",
        this.app.domElement.appendChild(r);
        var n = e.rendererWebgl
            , o = n.domElement;
        n.domElement._static || (o.style.position = "absolute",
        o.style.top = "0px",
        o.style.pointerEvents = "none",
        r.appendChild(o))
    }
    ,
    e.prototype.resize = function(e, t) {
        this.mixerContext.rendererCss.setSize(e, t)
    }
    ,
    e.prototype.update = function() {
        this.mixerContext.update()
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    e
}();
kc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.eventTriggerManager = t,
        this.app = this.eventTriggerManager.app,
        this.domElement = this.app.mainDomElement,
        this.singleClickTimer = null,
        this.clickCountForSingleClick = 0,
        this.dragStartFlag = !1,
        this.draggingFlag = !1,
        this._dragPrevPosition = null,
        this._draggingObject = null,
        this.mouseMoveEvents = [],
        this.mouseMoveObject = null,
        this.mouseDownPos = {},
        this.mouseMovePos = [],
        this.mouseMoveDelta = null,
        this.keysPressed = {},
        this.keyCodesPressed = {},
        this.skipFrameCount = 0,
        this.isSupportTouchEvent = Utils.system.isSupportTouchEvent(),
        this.init()
    }
    return e.prototype.dispatchEvent = function(e) {
        return this.eventTriggerManager.dispatchEvent(e)
    }
    ,
    e.prototype.getEventPosition = function(e, t) {
        var i, r, n = this.domElement;
        if (n) {
            var o = n.currentStyle || window.getComputedStyle(n, null)
                , s = t ? t[0] : parseInt(o.borderLeftWidth, 10)
                , a = t ? t[1] : parseInt(o.borderTopWidth, 10)
                , l = n.getBoundingClientRect();
            i = e.clientX - s - l.left,
            r = e.clientY - a - l.top
        } else
            e.layerX || 0 == e.layerX ? (i = e.layerX,
            r = e.layerY) : e.offsetX || 0 == e.offsetX ? (i = e.offsetX,
            r = e.offsetY) : (e.clientX || 0 == e.clientX) && (i = e.clientX,
            r = e.clientY);
        return {
            x: Math.round(i),
            y: Math.round(r)
        }
    }
    ,
    e.prototype.registerEventFunctions = function(e) {
        Utils.isNull(e.stopPropagation) && (e.stopPropagation = function() {
            this._stopPropagation = !0
        }
        )
    }
    ,
    e.prototype.createKeyboardEvent = function(e) {
        var t;
        t = e.key >= "a" && e.key <= "z" ? Utils.atoi(e.key) : e.keyCode || e.which || e.charCode;
        var i = {
            type: e.type,
            key: t,
            code: e.code,
            location: e.location,
            altKey: e.altKey,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
        };
        return this.registerEventFunctions(i),
        i
    }
    ,
    e.prototype.createMouseEvent = function(e, t, i) {
        var r = Utils.parseVector2(i) || this.getEventPosition(t)
            , n = {
            type: e,
            clientX: r.x,
            clientY: r.y,
            x: r.x,
            y: r.y,
            button: t.button || 0,
            buttons: t.buttons || 0,
            altKey: t.altKey,
            ctrlKey: t.ctrlKey,
            shiftKey: t.shiftKey,
            pickedPosition: null
        };
        return this.registerEventFunctions(n),
        n.getPickedPos = function() {
            return THING.Utils.warn("Please use .getPickedPosition() to replace .getPickedPos()"),
            n.pickedPosition
        }
        ,
        n.getPickedPosition = function() {
            return THING.Utils.warn("Please use .pickedPosition to replace .getPickedPosition()"),
            n.pickedPosition
        }
        ,
        n
    }
    ,
    e.prototype.createDragEvent = function(e, t, i, r) {
        var n = [void 0 !== t.x ? t.x : t.clientX, void 0 !== t.y ? t.y : t.clientY]
            , o = {
            type: e,
            x: n[0],
            y: n[1],
            clientX: n[0],
            clientY: n[1],
            altKey: t.altKey,
            ctrlKey: t.ctrlKey,
            shiftKey: t.shiftKey
        };
        return i && (o.offsetX = i),
        r && (o.offsetY = r),
        o.pickedPosition = null,
        this.registerEventFunctions(o),
        o.getPickedPos = function() {
            return THING.Utils.warn("Please use .getPickedPosition() to replace .getPickedPos()"),
            o.pickedPosition
        }
        ,
        o.getPickedPosition = function() {
            return THING.Utils.warn("Please use .pickedPosition to replace .getPickedPosition()"),
            o.pickedPosition
        }
        ,
        o
    }
    ,
    e.prototype.clearSingleClickTimer = function() {
        null != this.singleClickTimer && (Utils.timer.clearTimeout(this.singleClickTimer),
        this.clickCountForSingleClick = 0)
    }
    ,
    e.prototype.findMouseEventObject = function(e, t) {
        for (; e; ) {
            for (var i = 0; i < t.length; i++)
                if (e.hasEvent(t[i]))
                    return e;
            e = e.parent
        }
        return null
    }
    ,
    e.prototype.processMouseOffEvent = function(e) {
        var t = this.mouseMoveObject;
        if (t) {
            var i = e.object;
            if (i) {
                if (i.isBlockMouseOffEvent(t))
                    return;
                var r = this.findMouseEventObject(t, ["mouseleave", "mouseoff"]);
                if (!r || i.isBlockMouseOffEvent(r))
                    return;
                if (!r.visible)
                    return;
                if (this.findMouseEventObject(i, ["mouseleave", "mouseoff"]) == t)
                    return;
                if (t == r) {
                    var n = this.mouseMoveLastPickedObject || e.object;
                    this.dispatchEvent({
                        type: EventType.MouseLeave,
                        object: r,
                        mouseOffObject: n,
                        x: e.clientX,
                        y: e.clientY
                    }),
                    this.dispatchEvent({
                        type: "mouseoff",
                        object: r,
                        mouseOffObject: n,
                        x: e.clientX,
                        y: e.clientY
                    })
                }
            } else
                for (var o = t; o; o = o.parent)
                    o.trigger(EventType.MouseLeave, {
                        object: o,
                        mouseOffObject: this.mouseMoveObject,
                        x: e.clientX,
                        y: e.clientY
                    }),
                    o.trigger("mouseoff", {
                        object: o,
                        mouseOffObject: this.mouseMoveObject,
                        x: e.clientX,
                        y: e.clientY
                    });
            this.mouseMoveObject = null
        }
    }
    ,
    e.prototype.processMouseOnEvent = function(e) {
        var t = e.object
            , i = this.findMouseEventObject(t, ["mouseenter", "mouseon"]);
        if (i && i.visible && this.mouseMoveObject != i) {
            this.mouseMoveLastPickedObject = e.pickedObj;
            var r = this.dispatchEvent({
                type: EventType.MouseEnter,
                object: i,
                mouseOnObject: e.pickedObj,
                x: e.clientX,
                y: e.clientY
            });
            this.dispatchEvent({
                type: "mouseon",
                object: i,
                mouseOnObject: e.pickedObj,
                x: e.clientX,
                y: e.clientY
            }),
            r && r.isBaseObject ? this.mouseMoveObject = r : this.mouseMoveObject = i
        }
    }
    ,
    e.prototype.processMouseOverEvent = function(e) {
        var t = e.object
            , i = this.findMouseEventObject(t, ["mouseover"]);
        i && this.dispatchEvent({
            type: "mouseover",
            object: i,
            x: e.clientX,
            y: e.clientY
        })
    }
    ,
    e.prototype.processHoverEvent = function(e) {
        this.mouseMoveEvents.push(e)
    }
    ,
    e.prototype.createEvent = function(e, t) {
        var i;
        return t = t || e.type,
        (i = D[t] ? this.createMouseEvent(t, e) : A[t] ? this.createKeyboardEvent(e) : e).preventDefault = function() {
            e.preventDefault()
        }
        ,
        i
    }
    ,
    e.prototype.checkEvent = function() {
        return !(this.app.currentFrameCount <= this.skipFrameCount) && !this.app.getCurrentHTMLMarker()
    }
    ,
    e.prototype.initDoubleRightClickEvent = function() {
        var e, t, i, r, n = this;
        window.oncontextmenu = (e = function(e) {
            n.clearSingleClickTimer();
            var t = n.createEvent(e, "dblclick");
            t.button = 2;
            var i = THING.App.current;
            i ? i.events.eventTriggerManager.dispatchEvent(t) : n.dispatchEvent(t)
        }
        ,
        t = 0,
        i = !1,
        r = null,
        function(n) {
            if (n.preventDefault(),
            i) {
                clearTimeout(t),
                i = !1;
                var o = THING.Math.getDistance(r, [n.x, n.y]);
                if (o > 1)
                    return;
                return e.apply(this, arguments)
            }
            r = [n.x, n.y],
            i = !0,
            t = setTimeout((function() {
                i = !1
            }
            ), 300)
        }
        )
    }
    ,
    e.prototype.initMouseEvent = function(e) {
        var t = this
            , i = !0
            , r = !0;
        for (var n in this.initDoubleRightClickEvent(),
        D)
            this.domElement.addEventListener(n, (function(n) {
                if (t.checkEvent()) {
                    if ("mousedown" == (n = t.createEvent(n)).type)
                        t.mouseDownPos[n.button] = [n.x, n.y];
                    else if ("mouseup" == n.type)
                        if (0 == n.button)
                            i = !(t.getDistanceOfLastMouseDown(n) > t.app.clickDistance);
                        else if (2 == n.button) {
                            var o = t.mouseDownPos[n.button];
                            !t.isSupportTouchEvent && t.getDistanceOfLastMouseDown(n) <= t.app.clickDistance && (t.dispatchEvent(t.createMouseEvent("click", n, o)),
                            t.clearSingleClickTimer(),
                            t.singleClickTimer = Utils.timer.setTimeout((function() {
                                t.dispatchEvent(t.createMouseEvent("singleclick", n, o))
                            }
                            ), e))
                        }
                    if (!t.isSupportTouchEvent || "click" !== n.type && "dblclick" !== n.type && "singleclick" !== n.type) {
                        if ("click" == n.type) {
                            if (t.getDistanceOfLastMouseDown(n) > 1)
                                return;
                            if (r = !0,
                            t.clickCountForSingleClick++,
                            1 === t.clickCountForSingleClick) {
                                o = t.mouseDownPos[n.button];
                                t.singleClickTimer = Utils.timer.setTimeout((function() {
                                    i && !t.draggingFlag ? (r = !1,
                                    t.dispatchEvent(t.createMouseEvent("singleclick", n, o))) : r = !0,
                                    i = !0,
                                    t.clickCountForSingleClick = 0
                                }
                                ), e)
                            } else
                                t.clearSingleClickTimer()
                        } else if ("dblclick" == n.type && (t.clearSingleClickTimer(),
                        !r))
                            return void (r = !0);
                        t.dispatchEvent(n),
                        "mousemove" == n.type && (t.mouseMoveDelta ? t.mouseMoveDelta = [t.mouseMovePos[0] - n.x, t.mouseMovePos[1] - n.y] : t.mouseMoveDelta = [n.x, n.y],
                        t.mouseMovePos = [n.x, n.y],
                        0 == n.buttons && t.processHoverEvent(n))
                    }
                }
            }
            ), {
                passive: !1
            });
        this.domElement.addEventListener("mouseout", (function(e) {
            t.checkEvent() && 0 == e.buttons && t.processMouseOffEvent(e)
        }
        )),
        this.domElement.addEventListener("wheel", (function(e) {
            if (t.checkEvent()) {
                var i = t.getEventPosition(e)
                    , r = {
                    type: EventType.MouseWheel,
                    delta: e.deltaY,
                    clientX: i.x,
                    clientY: i.y,
                    x: i.x,
                    y: i.y
                };
                t.dispatchEvent(r)
            }
        }
        ), {
            passive: !1
        })
    }
    ,
    e.prototype.initKeyboardEvent = function() {
        var e = this;
        for (var t in A)
            window.addEventListener(t, (function(t) {
                if (e.checkEvent()) {
                    var i = (t = e.createEvent(t)).code || t.key;
                    if ("keydown" == t.type) {
                        if (e.keysPressed[i])
                            return;
                        e.keysPressed[i] = !0,
                        e.keyCodesPressed[t.key] = !0
                    } else
                        "keyup" == t.type && (e.keysPressed[i] = !1,
                        e.keyCodesPressed[t.key] = !1);
                    e.dispatchEvent(t)
                }
            }
            ))
    }
    ,
    e.prototype.initDragEvent = function() {
        var e = this;
        this.domElement.addEventListener("mouseup", (function(t) {
            e.checkEvent() && 0 == t.button && e.dragStartFlag && (e.dragStartFlag = !1,
            e.draggingFlag = !1,
            e._dragPrevPosition = null,
            e._draggingObject = null,
            t = e.createEvent(t),
            e.dispatchEvent(e.createDragEvent("dragend", t)))
        }
        )),
        this.domElement.addEventListener("mousemove", (function(t) {
            if (e.checkEvent())
                if (t = e.createEvent(t),
                e.dragStartFlag) {
                    e.draggingFlag = !0;
                    var i = e.createDragEvent("drag", t);
                    e.dispatchEvent(i);
                    var r = i.pickedPosition;
                    r && !r.isFailed || (i.picked = !1),
                    e._dragPrevPosition = e._dragPrevPosition || r,
                    e._dragPrevPosition && r ? i.offsetPosition = THING.Math.subVector(r, e._dragPrevPosition) : i.offsetPosition = [0, 0, 0];
                    var n = e._draggingObject;
                    n && n.trigger("dragging", i),
                    i.picked && r && (e._dragPrevPosition = r.concat())
                } else if (1 == t.buttons) {
                    if (e.getDistanceOfLastMouseDown(t) > 1) {
                        i = e.createDragEvent("dragstart", t);
                        e.dispatchEvent(i);
                        var o = i.dragObject;
                        o && o.draggable && (e.dragStartFlag = !0,
                        e._draggingObject = o)
                    }
                }
        }
        ))
    }
    ,
    e.prototype.initTouchEvent = function(e) {
        var t = this
            , i = 0
            , r = !1;
        this.domElement.addEventListener("touchstart", (function(i) {
            t.checkEvent() && (i = i.changedTouches[0],
            (i = t.createEvent(i, "touchstart")).button = i.button || "touch",
            t.mouseDownPos[i.button] || (t.mouseDownPos[i.button] = [i.clientX, i.clientY],
            setTimeout((function() {
                delete t.mouseDownPos[i.button]
            }
            ), e)))
        }
        )),
        this.domElement.addEventListener("touchmove", (function(e) {
            if (t.checkEvent()) {
                e.preventDefault(),
                e = e.changedTouches[0],
                e = t.createEvent(e, "touchmove");
                var i = t.domElement.getBoundingClientRect()
                    , n = (e.clientX - i.left) / i.width * 2 - 1
                    , o = -(e.clientY - i.top) / i.height * 2 + 1;
                if (t.dragStartFlag)
                    t.draggingFlag = !0,
                    t.dispatchEvent(t.createDragEvent("drag", e, n, o));
                else {
                    i = t.domElement.getBoundingClientRect(),
                    n = (e.clientX - i.left) / i.width * 2 - 1,
                    o = -(e.clientY - i.top) / i.height * 2 + 1;
                    t.getDistanceOfLastMouseDown(e) > 1 && (t.dragStartFlag = !0,
                    t.dispatchEvent(t.createDragEvent("dragstart", e, n, o)))
                }
                r = !0
            }
        }
        )),
        this.domElement.addEventListener("touchend", (function(n) {
            if (t.checkEvent()) {
                var o;
                if (n = n.changedTouches[0],
                (n = t.createEvent(n, "touchend")).button = n.button || "touch",
                !r && t.getDistanceOfLastMouseDown(n) < t.app.clickDistance)
                    i++,
                    setTimeout((function() {
                        i = 0
                    }
                    ), e),
                    n.button && (o = t.mouseDownPos[n.button]),
                    i > 1 ? (t.clearSingleClickTimer(),
                    n.button = "touch" === n.button ? void 0 : n.button,
                    t.dispatchEvent(t.createMouseEvent("dblclick", n, o)),
                    i = 0) : (t.clickCountForSingleClick++,
                    n.button = "touch" === n.button ? void 0 : n.button,
                    t.dispatchEvent(t.createMouseEvent("click", n, o)),
                    1 === t.clickCountForSingleClick ? t.singleClickTimer = Utils.timer.setTimeout((function() {
                        n.button = "touch" === n.button ? void 0 : n.button,
                        t.dispatchEvent(t.createMouseEvent("singleclick", n, o)),
                        t.clickCountForSingleClick = 0
                    }
                    ), e) : t.clearSingleClickTimer());
                if (r = !1,
                t.dragStartFlag) {
                    t.dragStartFlag = !1;
                    var s = t._draggingObject;
                    s && (s.trigger("dragend", t.createDragEvent("dragend", n)),
                    t._draggingObject = null)
                }
            }
        }
        ))
    }
    ,
    e.prototype.init = function() {
        this.initMouseEvent(250),
        this.isSupportTouchEvent && this.initTouchEvent(250),
        this.initKeyboardEvent(),
        this.initDragEvent()
    }
    ,
    e.prototype.getDistanceOfLastMouseDown = function(e) {
        var t = this.mouseDownPos[e.button];
        if (!t)
            return 0;
        var i = [void 0 !== e.x ? e.x : e.clientX, void 0 !== e.y ? e.y : e.clientY];
        return THING.Math.getDistance(t, i)
    }
    ,
    e.prototype.clear = function() {
        this.singleClickTimer = null,
        this.mouseMoveObject = null,
        this.keysPressed = {},
        this.keyCodesPressed = {},
        this.mouseDownPos = {},
        this.mouseMovePos = [],
        this.mouseMoveDelta = null
    }
    ,
    e.prototype.update = function() {
        var e = this;
        this.mouseMoveEvents.forEach((function(t) {
            t.hadFiltered || e.mouseMoveObject != t.object && (e.processMouseOffEvent(t),
            e.processMouseOnEvent(t),
            e.processMouseOverEvent(t))
        }
        )),
        this.mouseMoveEvents = []
    }
    ,
    e
}();
Oc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t
    }
    return e.prototype.addEventListener = function(t, i, r, n, o, s, a, l) {
        o = o || 50,
        void 0 === this._listeners && (this._listeners = {});
        var u = this._listeners;
        void 0 === u[t] && (u[t] = []);
        var c = u[t]
            , h = {
            __index: e._eventIDCount++,
            app: this.app,
            type: t,
            userData: r,
            priority: o,
            tag: s,
            once: a,
            object: l,
            callback: n
        };
        i && (i.isBaseObject ? h.selector = i : (h.condition = i,
        h.selector = new Selector(this.app))),
        c.length ? (c.push(h),
        o > c[c.length - 2].priority && c.sort((function(e, t) {
            return t.priority == e.priority ? e.__index - t.__index : t.priority - e.priority
        }
        ))) : c.push(h);
        var p = THING.onAddEventListener;
        p && p(h)
    }
    ,
    e.prototype.traverseListener = function(e) {
        if (void 0 !== this._listeners) {
            var t = this._listeners;
            for (var i in t) {
                t[i].forEach((function(t) {
                    e(t)
                }
                ))
            }
        }
    }
    ,
    e.prototype.getEventListener = function(e, t, i, r, n, o, s) {
        if (void 0 === this._listeners)
            return null;
        var a = this._listeners[e];
        if (void 0 === a)
            return null;
        if (!n && this._isPauseEvent(e, o, r))
            return null;
        for (var l = 0, u = a.length; l < u; l++) {
            var c = a[l];
            if (c.condition) {
                if ("__any_event_can_match_it__" != t && c.condition != t)
                    continue;
                if (o != this.app.root && c.selector && o && !c.selector.test(c.condition, [o]))
                    continue
            } else if (c.object != o)
                continue;
            if ((!s || s(c)) && !(i && c.callback != i || r && r != c.tag))
                return {
                    listener: c,
                    listenerArray: a,
                    index: l
                }
        }
        return null
    }
    ,
    e.prototype.getEventListeners = function(e, t, i, r, n) {
        if (void 0 === this._listeners)
            return [];
        var o = function(e, t) {
            var i = e.selector;
            if (i) {
                if (i.isBaseObject) {
                    if (i != t)
                        return !1
                } else if (!i.test(e.condition, [t]))
                    return !1
            } else if (e.object != t)
                return !1;
            return !0
        }
            , s = []
            , a = this._listeners;
        if (e) {
            if (void 0 === (h = a[e]))
                return [];
            if (!r && this._isPauseEvent(e, n, i))
                return [];
            for (var l = 0; l < h.length; l++) {
                var u = h[l];
                t && u.callback != t || (i || u.tag) && (i && u.tag != i || o(u, n) && s.push(u))
            }
        } else
            for (var c in a) {
                var h = a[c];
                if (r || !this._isPauseEvent(c, n, i))
                    for (l = 0; l < h.length; l++) {
                        o(u = h[l], n) && s.push(u)
                    }
            }
        return s
    }
    ,
    e.prototype.removeEventListener = function(e, t, i, r, n) {
        if (void 0 !== this._listeners) {
            var o = this._listeners[e];
            if (void 0 !== o)
                for (var s = 0; s < o.length; s++) {
                    if ((i = o[s]).object == n) {
                        if (i.selector)
                            if (i.selector.isBaseObject) {
                                if (t != i.selector)
                                    continue
                            } else if (i.condition != t)
                                continue;
                        if (!r || i.tag == r) {
                            var a = THING.onRemoveEventListener;
                            a && a(i),
                            i.removed = !0,
                            o.splice(s--, 1)
                        }
                    }
                }
        }
    }
    ,
    e.prototype.removeAllListeners = function() {
        var e = THING.onRemoveEventListener;
        if (e)
            for (var t in this._listeners)
                this._listeners[t].forEach((function(t) {
                    e(t)
                }
                ));
        this._listeners = void 0
    }
    ,
    e.prototype.checkObject = function(e, t) {
        if (t.object) {
            if (t.object != e.object && !t.object.canAcceptEvent(e))
                return !1;
            if (this._getStopPropagation(e)) {
                if (e.object && e.object.isChildOf(t.object))
                    return !1;
                var i = e.intersect;
                if (i && i.node.isChildOf(e.object.node))
                    return !1
            }
        }
        return !0
    }
    ,
    e.prototype._getStopPropagation = function(e) {
        var t;
        if (!(t = Utils.isFunction(e.stopPropagation) ? e._stopPropagation : e.stopPropagation)) {
            var i = e.type;
            -1 !== ["levelchange", "enterlevel", "leavelevel", "levelflyend", "load", "complete", "mouseenter", "mouseleave"].indexOf(i) && (t = !0)
        }
        return t = Utils.parseValue(THING.__stopEventPropagation__, t)
    }
    ,
    e.prototype.getBindingObjectBySelector = function(e, t, i) {
        var r = this._getStopPropagation(e);
        if (i.isBaseObject) {
            if (i != e.object && !r && i.isChildOf(e.object))
                return e.object
        } else if (e.object) {
            if (i.test(t.condition, [e.object]))
                return e.object;
            if (!r) {
                var n = e.object.parents
                    , o = i.queryResult(t.condition, n);
                if (o.length)
                    return o[0]
            }
        }
        return null
    }
    ,
    e.prototype.getBindingObject = function(e, t, i) {
        var r, n = t.selector, o = t.once;
        if (n) {
            if (i)
                return null;
            if (!(r = this.getBindingObjectBySelector(e, t, n)))
                return null
        } else if (!this.checkObject(e, t))
            return null;
        var s = r || e.object || t.object || window;
        return o && n && s._ignoreEvents && s._ignoreEvents.has(t) ? null : s
    }
    ,
    e.prototype.dispatchEvent = function(e, t) {
        if (void 0 !== this._listeners) {
            var i, r = this._listeners[e.type];
            if (void 0 !== r)
                for (var n = r.slice(0), o = 0; o < n.length; o++) {
                    var s = n[o]
                        , a = s.selector
                        , l = s.userData
                        , u = s.once
                        , c = s.tag;
                    if (!s.removed && !this._isPauseEvent(e.type, e.object, c)) {
                        var h = this.getBindingObject(e, s, t);
                        if (h && !h.destroyed && !this._isPauseEvent(e.type, h, c)) {
                            var p, d, f = e.data;
                            l && (e.data = l),
                            a ? h.isBaseObject && (p = e.object,
                            e.object = h) : s.object && (p = e.object,
                            e.object = s.object),
                            e.object && (d = e.pickedObject,
                            e.pickedObject = e.object);
                            var m = e.beforeTrigger;
                            m && m(e);
                            var g = THING.onBeforeCallEventListener;
                            g && g(s, e),
                            h.isBaseObject && (e.__lastObject__ = h);
                            var v = s.callback.call(h, e, s.tag);
                            Utils.isNull(v) || (i = v);
                            var y = THING.onAfterCallEventListener;
                            y && y(s, e);
                            var b = e.afterTrigger;
                            if (b && b(e),
                            a ? e.object == h && (e.object = p) : e.object && e.object == s.object && (e.object = p),
                            d ? e.pickedObject = d : delete e.pickedObject,
                            f && (e.data = f),
                            u)
                                if (a)
                                    h._ignoreEvents = h._ignoreEvents || new Set,
                                    h._ignoreEvents.add(s);
                                else {
                                    var _ = r.indexOf(s);
                                    -1 !== _ && r.splice(_, 1)
                                }
                        }
                    }
                }
            return i
        }
    }
    ,
    e
}();
Oc._eventIDCount = 1;
var Bc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._pauseSelector = null,
        this._pauseEvents = new Map,
        this._resumeEvents = new Map
    }
    return e.prototype._isEvent = function(e, t, i, r, n) {
        var o = e.get(t);
        if (!o)
            return !1;
        if (r && o._tag_names && !o._tag_names.has(r))
            return !1;
        for (var s = 0, a = o.length; s < a; s++) {
            var l = o[s]
                , u = l.selector;
            if (i) {
                if (Utils.isString(i)) {
                    if (i != u)
                        continue
                } else if (u)
                    if (u.isBaseObject) {
                        if (u != i)
                            continue
                    } else if ("*" != u && !this._pauseSelector.test(u, [i]))
                        continue
            } else if (u)
                continue;
            if ((!n || n(r, l.tag)) && (!l.parent || !i || i.isChildOf(l.parent)))
                return !0
        }
        return !1
    }
    ,
    e.prototype.isPauseEvent = function(e, t, i) {
        function r(e, t) {
            return !t || e == t
        }
        return e = Utils.toLowerCase(e),
        !!this._isEvent(this._pauseEvents, e, t, i, r) && !this._isEvent(this._resumeEvents, e, t, i, r)
    }
    ,
    e.prototype.isSameSelector = function(e, t) {
        return e && t && e.isSelector && t.isSelector ? e.equals(t) : e == t
    }
    ,
    e.prototype.update = function() {
        this._pauseEvents.forEach((function(e) {
            for (var t = 0; t < e.length; t++) {
                e[t].justInFrame && e.splice(t--, 1)
            }
        }
        ))
    }
    ,
    e.prototype.hasPauseEvent = function(e, t, i, r, n) {
        var o = this._pauseEvents.get(e);
        if (!o)
            return !1;
        for (var s = 0; s < o.length; s++) {
            var a = o[s];
            if (this.isSameSelector(a.selector, t) && (a.tag == i && a.justInFrame == r && a.parent == n))
                return !0
        }
        return !1
    }
    ,
    e.prototype.pauseEvent = function(e, t, i, r, n) {
        if (e = Utils.toLowerCase(e)) {
            if (this._pauseSelector || (this._pauseSelector = new Selector(this.app)),
            !this.hasPauseEvent(e, t, i, r, n)) {
                var o = {
                    eventType: e,
                    selector: t,
                    tag: i,
                    justInFrame: r,
                    parent: n
                }
                    , s = this._pauseEvents.get(e);
                s || (s = [],
                this._pauseEvents.set(e, s)),
                i && (s._tag_names = s._tag_names || new Set,
                s._tag_names.add(i)),
                s.push(o)
            }
        } else
            THING.Utils.error("event type is invalid, please check it")
    }
    ,
    e.prototype.removeResumeEvents = function(e, t, i, r) {
        var n = this._resumeEvents.get(e);
        if (n)
            for (var o = 0; o < n.length; o++) {
                var s = n[o];
                s.selector == t && (s.parent == r && (i && i != s.tag || n.splice(o--, 1)))
            }
    }
    ,
    e.prototype.resumeEvent = function(e, t, i, r) {
        if (e = Utils.toLowerCase(e)) {
            var n = this._pauseEvents.get(e);
            if (n) {
                t || (r = null);
                for (var o = 0; o < n.length; o++) {
                    var s = n[o];
                    if (this.isSameSelector(s.selector, t) && s.parent == r) {
                        if (s.tag) {
                            if (s.tag != i)
                                continue
                        } else if (i) {
                            var a = this._resumeEvents.get(e);
                            a || (a = [],
                            this._resumeEvents.set(e, a)),
                            a.push({
                                eventType: e,
                                selector: t,
                                tag: i,
                                parent: r
                            });
                            continue
                        }
                        return this.removeResumeEvents(e, t, i, r),
                        n.splice(o, 1),
                        !0
                    }
                }
                return !1
            }
        } else
            THING.Utils.error("event type is invalid, please check it")
    }
    ,
    e.prototype.clear = function() {
        this._pauseSelector = null,
        this._pauseEvents = new Map,
        this._resumeEvents = new Map
    }
    ,
    e
}();
Fc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._eventSelectors = {
            residentEvents: {
                name: "residentEvents"
            },
            app: {
                name: "app"
            },
            objectEvents: {
                name: "objectEvents"
            }
        };
        var i = this;
        this._eventSelectors.forEach = function(e) {
            e(i._eventSelectors.residentEvents),
            e(i._eventSelectors.app),
            e(i._eventSelectors.objectEvents)
        }
        ,
        this._eventSelectors.hasEvent = function(e, t, r, n, o) {
            for (var s = [i._eventSelectors.residentEvents, i._eventSelectors.app, i._eventSelectors.objectEvents], a = 0; a < s.length; a++)
                if (s[a].hasEvent(e, t, r, n, o))
                    return !0;
            return !1
        }
        ,
        this._eventSelectors.forEach((function(e) {
            i._initEventSelector(e)
        }
        )),
        this._eventPauser = new Bc(this.app),
        this._eventIDCount = 0
    }
    return e.prototype._initEventSelector = function(e) {
        var t = this
            , i = new Oc(this.app);
        e._trigger = i,
        e._trigger._isPauseEvent = function(e, i, r) {
            return t.isPauseEvent(e, i, r)
        }
        ,
        e.traverse = function(e) {
            for (var t in i._listeners) {
                if (!1 === e(t, i._listeners[t]))
                    return
            }
        }
        ,
        e.hasEvent = function(e, t, r, n, o) {
            return !!i.getEventListener(e, "__any_event_can_match_it__", t, r, n, o)
        }
        ,
        e.getEvents = function(e, t, r, n, o) {
            return i.getEventListeners(e, t, r, n, o)
        }
        ,
        e.traverseListener = function(e) {
            i.traverseListener(e)
        }
        ,
        e.replaceObjectEvent = function(e, t) {
            for (var r in i._listeners)
                i._listeners[r].forEach((function(i) {
                    i.selector == t && (i.selector = e),
                    i.object == t && (i.object = e)
                }
                ))
        }
        ,
        e.removeObjectEvent = function(e, t, r, n, o) {
            i.removeEventListener(e, t, r, n, o)
        }
        ,
        e.bindObjectEvent = function(e, t, r, n, o, s, a, l) {
            var u = i.getEventListener(e, t, null, s, !1, l, (function(e) {
                return !!s && (!e.tag || e.tag == s)
            }
            ));
            u && u.listenerArray.splice(u.index, 1),
            i.addEventListener(e, t, r, n, o, s, a, l)
        }
        ,
        e.trigger = function(e, t) {
            if (e.type = Utils.toLowerCase(e.type),
            e.type)
                return i.dispatchEvent(e, t);
            THING.Utils.error("event type is invalid, please check it")
        }
    }
    ,
    e.prototype.isPauseEvent = function(e, t, i) {
        return this._eventPauser.isPauseEvent(e, t, i)
    }
    ,
    e.prototype.hasPauseEvent = function(e, t, i, r, n) {
        return this._eventPauser.hasPauseEvent(e, t, i, r, n)
    }
    ,
    e.prototype.pauseEvent = function(e, t, i, r, n) {
        this._eventPauser.pauseEvent(e, t, i, r, n)
    }
    ,
    e.prototype.resumeEvent = function(e, t, i, r) {
        return this._eventPauser.resumeEvent(e, t, i, r)
    }
    ,
    e.prototype.hasEvent = function(e, t, i, r, n) {
        return !!this._eventSelectors.hasEvent(e, t, i, r, n)
    }
    ,
    e.prototype.getEvents = function(e, t, i, r, n) {
        var o = [];
        return this._eventSelectors.forEach((function(s) {
            var a = s.getEvents(e, t, i, r, n);
            a && a.forEach((function(e) {
                o.push(e)
            }
            ))
        }
        )),
        o
    }
    ,
    e.prototype.traverseListener = function(e) {
        this._eventSelectors.forEach((function(t) {
            t.traverseListener(e)
        }
        ))
    }
    ,
    e.prototype.replaceObjectEvent = function(e, t) {
        this._eventSelectors.forEach((function(i) {
            i.replaceObjectEvent(e, t)
        }
        ))
    }
    ,
    e.prototype.removeObjectEvent = function(e, t, i, r, n) {
        this._eventSelectors.forEach((function(o) {
            o.removeObjectEvent(e, t, i, r, n)
        }
        ))
    }
    ,
    e.prototype.addEventListener = function(e, t, i) {
        return this.bindCall(e, null, null, t, null, !1, i)
    }
    ,
    e.prototype.removeEventListener = function(e, t) {
        return this.unbindCall(e, null, t)
    }
    ,
    e.prototype.bindCall = function(e, t, i, r, n, o, s) {
        if (!(e = Utils.toLowerCase(e)))
            return THING.Utils.error("event type is invalid, please check it"),
            null;
        var a = Utils.parseEvent(t, i, r, n, null, s);
        return a ? (a.selector ? this._eventSelectors.objectEvents.bindObjectEvent(e, a.selector, a.userData, a.callback, a.priority, a.tag, o, this.app.root) : this._eventSelectors.app.bindObjectEvent(e, a.selector, a.userData, a.callback, a.priority, a.tag, o, null),
        a) : null
    }
    ,
    e.prototype.unbindCall = function(e, t, i) {
        if (!(e = Utils.toLowerCase(e)))
            return THING.Utils.error("event type is invalid, please check it"),
            null;
        var r = Utils.parseEvent(t, null, i);
        return r ? (r.selector ? this._eventSelectors.objectEvents.removeObjectEvent(e, r.selector, r.callback, r.tag, this.app.root) : this._eventSelectors.app.removeObjectEvent(e, r.selector, r.callback, r.tag),
        r) : null
    }
    ,
    e.prototype.triggerCall = function(e) {
        return this._eventSelectors.app.trigger(e, !0)
    }
    ,
    e.prototype.bindCallObj = function(e, t, i, r, n, o, s, a) {
        if (!(e = Utils.toLowerCase(e)))
            return THING.Utils.error("event type is invalid, please check it"),
            null;
        var l = Utils.parseEvent(t, i, r, o, a);
        if (!l)
            return null;
        var u = this;
        return n.forEach((function(t) {
            u._eventSelectors.objectEvents.bindObjectEvent(e, l.selector, l.userData, l.callback, l.priority, l.tag, s, t)
        }
        )),
        l
    }
    ,
    e.prototype.unbindCallObj = function(e, t, i, r) {
        e = Utils.toLowerCase(e);
        var n = Utils.parseEvent(t, null, i);
        if (!n)
            return null;
        var o = this;
        return r.forEach((function(t) {
            o._eventSelectors.objectEvents.removeObjectEvent(e, n.selector, n.callback, n.tag, t)
        }
        )),
        n
    }
    ,
    e.prototype.hasAnyCallObjects = function(e, t) {
        var i = this._eventSelectors.objectEvents
            , r = !1
            , n = this;
        return i.traverse((function(i, o) {
            if (o.object && e.indexOf(o.object)) {
                if (t && n._isPauseEvent(i, o.object, o.tag))
                    return;
                return r = !0,
                !1
            }
        }
        )),
        r
    }
    ,
    e.prototype.dispatchBindCallObj = function(e, t, i, r) {
        if (t = t || {},
        e = Utils.toLowerCase(e)) {
            if (Utils.isString(t) && !r && (r = t,
            t = {}),
            !r || Utils.isString(r)) {
                var n;
                Utils.isNull(t.stopPropagation) && (t.stopPropagation = function() {
                    this._stopPropagation = !0
                }
                );
                var o = this;
                return i.forEach((function(i) {
                    var s = t.object
                        , a = t.type
                        , l = t.tag;
                    t.object = i,
                    t.type = e,
                    t.tag = r,
                    n = o._eventSelectors.objectEvents.trigger(t),
                    t.object = s,
                    t.type = a,
                    t.tag = l
                }
                )),
                n
            }
            THING.Utils.error('Trigger "' + e + '" failed, due to tag is not string type')
        } else
            THING.Utils.error("event type is invalid, please check it")
    }
    ,
    e.prototype.addResidentEventListener = function(e, t) {
        (e = Utils.toLowerCase(e)) ? this._eventSelectors.residentEvents._trigger.addEventListener(e, null, null, t) : THING.Utils.error("event type is invalid, please check it")
    }
    ,
    e.prototype.removeResidentEventListener = function(e, t) {
        (e = Utils.toLowerCase(e)) ? this._eventSelectors.residentEvents._trigger.removeEventListener(e, null, t) : THING.Utils.error("event type is invalid, please check it")
    }
    ,
    e.prototype.update = function() {
        this._eventSelectors.forEach((function(e) {
            e.trigger({
                type: "update"
            })
        }
        )),
        this._eventPauser.update()
    }
    ,
    e.prototype.clear = function() {
        this._eventSelectors.forEach((function(e) {
            e._trigger.removeAllListeners()
        }
        )),
        this._eventPauser.clear()
    }
    ,
    e.prototype.unbindAppEvents = function(e) {
        this._eventSelectors.forEach((function(t) {
            for (var i in t._listeners)
                for (var r = t._listeners[i], n = 0; n < r.length; n++) {
                    r[n].app.uuid == e && r.splice(n--, 1)
                }
        }
        ))
    }
    ,
    e.prototype._isAppEvent = function(e) {
        return -1 !== ["dragstart", "drag", "dragging", "dragend", "keydown", "keypress", "keyup"].indexOf(e)
    }
    ,
    e.prototype.dispatchEvent = function(e) {
        var t = [this._eventSelectors.residentEvents, this._eventSelectors.app]
            , i = [];
        if (t.forEach((function(t) {
            var r = t.trigger(e);
            Utils.isNull(r) || i.push(r)
        }
        )),
        e.object) {
            var r = e.object.trigger(e.type, e);
            if (Utils.isNull(r) || i.push(r),
            !e._stopPropagation)
                for (var n = e.object.parent; n; n = n.parent) {
                    var o = n.canAcceptEvent(e);
                    if (o) {
                        !0 === o ? o = n : n = o;
                        var s = e.object;
                        e.object = o;
                        r = o._eventTrigger.dispatchEvent(e.type, o, e);
                        Utils.isNull(r) || i.push(r),
                        e.object = s
                    }
                }
        }
        if (this._isAppEvent(e.type)) {
            r = this._eventSelectors.objectEvents.trigger(e);
            Utils.isNull(r) || i.push(r)
        }
        if (i.length)
            return i[0]
    }
    ,
    e
}();
Lc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.eventTriggerManager = new Fc(this.app),
        this.eventProcessor = new kc(this.eventTriggerManager)
    }
    return e.prototype.addResidentEventListener = function(e, t) {
        this.eventTriggerManager.addResidentEventListener(e, t)
    }
    ,
    e.prototype.removeResidentEventListener = function(e, t) {
        this.eventTriggerManager.removeResidentEventListener(e, t)
    }
    ,
    e.prototype.addEventListener = function(e, t, i) {
        this.eventTriggerManager.addEventListener(e, t, i)
    }
    ,
    e.prototype.removeEventListener = function(e, t) {
        this.eventTriggerManager.removeEventListener(e, t)
    }
    ,
    e.prototype.dispatchEvent = function(e) {
        return this.eventTriggerManager.dispatchEvent(e)
    }
    ,
    e.prototype.update = function() {
        this.eventProcessor.update(),
        this.eventTriggerManager.update()
    }
    ,
    e.prototype.bindCall = function(e, t, i, r, n, o, s) {
        return this.eventTriggerManager.bindCall(e, t, i, r, n, o, s)
    }
    ,
    e.prototype.unbindCall = function(e, t, i) {
        return "singleclick" == e && this.eventProcessor.clearSingleClickTimer(),
        this.eventTriggerManager.unbindCall(e, t, i)
    }
    ,
    e.prototype.triggerCall = function(e) {
        return this.eventTriggerManager.triggerCall(e)
    }
    ,
    e.prototype.bindCallObj = function(e, t, i, r, n, o, s, a) {
        return this.eventTriggerManager.bindCallObj(e, t, i, r, n, o, s, a)
    }
    ,
    e.prototype.unbindCallObj = function(e, t, i, r) {
        return this.eventTriggerManager.unbindCallObj(e, t, i, r)
    }
    ,
    e.prototype.hasAnyCallObjects = function(e, t) {
        return this.eventTriggerManager.hasAnyCallObjects(e, t)
    }
    ,
    e.prototype.dispatchBindCallObj = function(e, t, i, r) {
        return this.eventTriggerManager.dispatchBindCallObj(e, t, i, r)
    }
    ,
    e.prototype.isPauseEvent = function(e, t, i) {
        return this.eventTriggerManager.isPauseEvent(e, t, i)
    }
    ,
    e.prototype.pauseEvent = function(e, t, i, r, n) {
        this.eventTriggerManager.pauseEvent(e, t, i, r, n)
    }
    ,
    e.prototype.resumeEvent = function(e, t, i, r) {
        return this.eventTriggerManager.resumeEvent(e, t, i, r)
    }
    ,
    e.prototype.hasEvent = function(e, t, i, r) {
        return this.eventTriggerManager.hasEvent(e, null, i, r, t)
    }
    ,
    e.prototype.getEvents = function(e, t, i, r) {
        return this.eventTriggerManager.getEvents(e, null, i, r, t)
    }
    ,
    e.prototype.traverseListener = function(e) {
        return this.eventTriggerManager.traverseListener(e)
    }
    ,
    e.prototype.replaceObjectEvent = function(e, t) {
        return this.eventTriggerManager.replaceObjectEvent(e, t)
    }
    ,
    e.prototype.canClick = function(e) {
        return !(this.eventProcessor.getDistanceOfLastMouseDown(e) > this.app.clickDistance)
    }
    ,
    e.prototype.isKeyPressed = function(e) {
        return Utils.isNumber(e) ? !!this.eventProcessor.keyCodesPressed[e] : !!this.eventProcessor.keysPressed[e]
    }
    ,
    e.prototype.clear = function() {
        this.eventTriggerManager.clear(),
        this.eventProcessor.clear()
    }
    ,
    e.prototype.clearSingleClickTimer = function() {
        this.eventProcessor.clearSingleClickTimer()
    }
    ,
    e.prototype.unbindAppEvents = function(e) {
        this.eventTriggerManager.unbindAppEvents(e)
    }
    ,
    _createClass(e, [{
        key: "mousePosition",
        get: function() {
            return this.eventProcessor.mouseMovePos
        }
    }, {
        key: "skipFrameCount",
        set: function(e) {
            this.eventProcessor.skipFrameCount = e
        },
        get: function() {
            return this.eventProcessor.skipFrameCount
        }
    }]),
    e
}();
Ic = function() {
    function e(t, i, n) {
        for (var o in classCallCheck(this, e),
        this.app = t,
        this.name = i,
        this.defaultKeyName = "name",
        this.initialState = null,
        this.runningState = null,
        this.states = new Map,
        n)
            this.addState(o, n[o])
    }
    return e.prototype.getFromState = function(e, t) {
        var i = e[t.stateType];
        if (void 0 !== i && Utils.isFunction(i)) {
            var r = e[t.stateType](t);
            if (null !== r)
                return r
        }
        return null
    }
    ,
    e.prototype.dispatchEventToState = function(e, t) {
        var i = e[t.stateType];
        void 0 !== i && Utils.isFunction(i) && e[t.stateType](t, t.params)
    }
    ,
    e.prototype.findState = function(e) {
        return this.states.get(e)
    }
    ,
    e.prototype.prevState = function() {
        this.dispatchEvent({
            stateType: "onPrevState"
        })
    }
    ,
    e.prototype.nextState = function() {
        this.dispatchEvent({
            stateType: "onNextState"
        })
    }
    ,
    e.prototype.clone = function(t) {
        var i = {}
            , r = this.app.stateManager.stateFactory
            , n = this.states.keys()
            , o = Array.isArray(n)
            , s = 0;
        for (n = o ? n : n[Symbol.iterator](); ; ) {
            var a;
            if (o) {
                if (s >= n.length)
                    break;
                a = n[s++]
            } else {
                if ((s = n.next()).done)
                    break;
                a = s.value
            }
            var l = a
                , u = r.get(l);
            if (!u)
                return null;
            i[l] = new u(this.app)
        }
        return new e(this.app,t,i)
    }
    ,
    e.prototype.get = function(e) {
        if (this.runningState)
            return this.getFromState(this.runningState, e);
        if (this.states.length > 1) {
            var t = this.states
                , i = Array.isArray(t)
                , r = 0;
            for (t = i ? t : t[Symbol.iterator](); ; ) {
                var n;
                if (i) {
                    if (r >= t.length)
                        break;
                    n = t[r++]
                } else {
                    if ((r = t.next()).done)
                        break;
                    n = r.value
                }
                var o = n
                    , s = this.getFromState(o, e);
                if (null !== s)
                    return s
            }
        }
        return null
    }
    ,
    e.prototype.dispatchEvent = function(e) {
        var t = this;
        this.runningState ? this.dispatchEventToState(this.runningState, e) : this.states.length > 1 && this.states.forEach((function(i) {
            t.dispatchEventToState(i, e)
        }
        ))
    }
    ,
    e.prototype.enter = function(e, t) {
        t = t || {};
        var i = this.findState(e);
        if (!i)
            return null;
        this.initialState || (this.initialState = i);
        var r = this.runningState;
        return this.leave(),
        this.app.trigger("beforeEnterState", {
            state: r,
            nextState: i
        }),
        r && (t.prevState = r),
        this.runningState = i,
        this.dispatchEventToState(this.runningState, {
            stateType: "onEnter",
            params: t
        }),
        this.app.trigger("afterEnterState", {
            state: i,
            prevState: t.prevState
        }),
        delete t.prevState,
        this.runningState
    }
    ,
    e.prototype.leave = function() {
        if (this.runningState) {
            var e = {};
            this.runningState && (e.state = this.runningState,
            e.stateName = this.runningState[this.defaultKeyName]),
            this.app.trigger("beforeLeaveState", e),
            this.dispatchEventToState(this.runningState, {
                stateType: "onLeave"
            }),
            this.runningState = null,
            this.app.trigger("afterLeaveState", e)
        }
    }
    ,
    e.prototype.addState = function(e, t) {
        void 0 === t[this.defaultKeyName] && (t[this.defaultKeyName] = e),
        t.isState = !0,
        t.stateGroup = this,
        this.states.set(e, t)
    }
    ,
    e.prototype.isInitialState = function() {
        return this.runningState == this.initialState
    }
    ,
    e.prototype.isRunningState = function(e) {
        var t = this.findState(e);
        return !!t && t == this.runningState
    }
    ,
    e.prototype.getRunningStateName = function() {
        if (this.runningState) {
            var e = this.states.keys()
                , t = Array.isArray(e)
                , i = 0;
            for (e = t ? e : e[Symbol.iterator](); ; ) {
                var r;
                if (t) {
                    if (i >= e.length)
                        break;
                    r = e[i++]
                } else {
                    if ((i = e.next()).done)
                        break;
                    r = i.value
                }
                var n = r;
                if (this.runningState == this.states.get(n))
                    return n
            }
        }
        return ""
    }
    ,
    e.prototype.hasState = function(e) {
        if (Utils.isString(e))
            return this.states.has(e);
        var t = this.states.keys()
            , i = Array.isArray(t)
            , r = 0;
        for (t = i ? t : t[Symbol.iterator](); ; ) {
            var n;
            if (i) {
                if (r >= t.length)
                    break;
                n = t[r++]
            } else {
                if ((r = t.next()).done)
                    break;
                n = r.value
            }
            var o = n;
            if (e == this.states.get(o))
                return !0
        }
        return !1
    }
    ,
    e.prototype.clear = function() {
        this.leave();
        for (var e = [].concat(this.states.values()), t = 0; t < e.length; t++)
            delete e[t];
        delete this.states
    }
    ,
    e
}();
Nc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.eventManager = t.events,
        this.stateFactory = new Map,
        this.stateGroupID = 1,
        this.stateGroups = new Array,
        this.init()
    }
    return e.prototype.init = function() {
        var e = {
            click: "onClick",
            dblclick: "onDoubleClick",
            singleclick: "onSingleClick",
            mouseover: "onMouseOver",
            mouseout: "onMouseOut",
            mouseup: "onMouseUp",
            mousedown: "onMouseDown",
            mousemove: "onMouseMove",
            dragstart: "onDragStart",
            drag: "onDrag",
            dragend: "onDragEnd",
            keydown: "onKeyDown",
            keypress: "onKeyPress",
            keyup: "onKeyUp"
        }
            , t = this;
        for (var i in e)
            this.eventManager.addResidentEventListener(i, (function(i) {
                i.stateType = e[i.type],
                t.dispatchEvent(i),
                delete i.stateType
            }
            ))
    }
    ,
    e.prototype.clear = function() {
        this.stateFactory.clear(),
        this.stateGroupID = 1,
        this.stateGroups = []
    }
    ,
    e.prototype.findState = function(e) {
        var t = this.stateGroups
            , i = Array.isArray(t)
            , r = 0;
        for (t = i ? t : t[Symbol.iterator](); ; ) {
            var n;
            if (i) {
                if (r >= t.length)
                    break;
                n = t[r++]
            } else {
                if ((r = t.next()).done)
                    break;
                n = r.value
            }
            var o = n.findState(e);
            if (o)
                return o
        }
        return null
    }
    ,
    e.prototype.findStateGroup = function(e) {
        var t = this.stateGroups
            , i = Array.isArray(t)
            , r = 0;
        for (t = i ? t : t[Symbol.iterator](); ; ) {
            var n;
            if (i) {
                if (r >= t.length)
                    break;
                n = t[r++]
            } else {
                if ((r = t.next()).done)
                    break;
                n = r.value
            }
            var o = n;
            if (o.name == e || o.hasState(e))
                return o
        }
        return null
    }
    ,
    e.prototype.get = function(e) {
        for (var t = 0; t < this.stateGroups.length; t++) {
            var i = this.stateGroups[t].get(e);
            if (i)
                return i
        }
        return null
    }
    ,
    e.prototype.dispatchEvent = function(e) {
        Utils.isString(e) ? this.dispatchEvent({
            type: e
        }) : this.stateGroups.forEach((function(t) {
            t.dispatchEvent(e)
        }
        ))
    }
    ,
    e.prototype._genGroupName = function() {
        var e = "StateManagerInternal_" + this.stateGroupID.toString();
        return this.stateGroupID++,
        e
    }
    ,
    e.prototype.clone = function(e) {
        var t = this.findStateGroup(e);
        if (!t)
            return null;
        e = this._genGroupName();
        var i = t.clone(e);
        return this.stateGroups.push(i),
        i
    }
    ,
    e.prototype.remove = function(e) {
        for (var t = 0; t < this.stateGroups.length; t++)
            if (this.stateGroups[t] == e)
                return e.leave(),
                this.stateGroups[t].clear(),
                this.stateGroups.splice(t, 1),
                !0;
        return !1
    }
    ,
    e.prototype.register = function(e, t) {
        if (Utils.isNull(e))
            return null;
        if (Utils.isArray(e))
            return THING.Utils.error("states should not be array type, use {} instead"),
            null;
        var i = Object.keys(e);
        1 == i.length && void 0 === t && (t = i[0]),
        Utils.isBlank(t) && (t = this._genGroupName());
        var r = this.findStateGroup(t);
        if (r)
            for (var n in e)
                r.addState(n, e[n]);
        else
            r = new Ic(this.app,t,e),
            this.stateGroups.push(r);
        return r
    }
    ,
    e.prototype.registerEx = function(e, t) {
        for (var i in e)
            this.stateFactory.set(i, e[i]),
            e[i] = new e[i](this.app);
        return this.register(e, t)
    }
    ,
    e.prototype.unregister = function(e) {
        for (var t = 0; t < this.stateGroups.length; t++)
            if (this.stateGroups[t].name == e)
                return this.stateGroups[t].clear(),
                this.stateGroups.splice(t, 1),
                !0;
        return !1
    }
    ,
    e.prototype.change = function(e, t) {
        var i = this.findStateGroup(e);
        if (!i)
            return THING.Utils.error("state group not found: " + e),
            null;
        var r = i.enter(e, t);
        return r || null
    }
    ,
    e.prototype.leave = function(e) {
        var t = this.findStateGroup(e);
        return t ? !!t.isRunningState(e) && (t.leave(),
        !0) : (THING.Utils.error("state group not found: " + e),
        !1)
    }
    ,
    e.prototype.getRunningState = function(e) {
        var t = this.findStateGroup(e);
        return t ? t.runningState : (THING.Utils.error("state group not found: " + name),
        null)
    }
    ,
    e.prototype.getRunningStateName = function(e) {
        var t = this.findStateGroup(e);
        return t ? t.getRunningStateName() : (THING.Utils.error("state group not found: " + name),
        null)
    }
    ,
    e.prototype.hasRunningState = function(e) {
        var t = this.findStateGroup(e);
        return !!t && !!t.runningState
    }
    ,
    e.prototype.update = function() {
        this.dispatchEvent({
            stateType: "onUpdate"
        })
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    e
}();
Hc = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.app = t,
        this.reverseMode = i,
        this.commands = []
    }
    return e.prototype.execute = function() {
        for (var e = 0; e < this.commands.length; e++) {
            this.commands[e].execute()
        }
        this.app.events.dispatchEvent({
            type: "executeCommand",
            cmd: this
        }),
        this.reverseMode && this.commands.reverse()
    }
    ,
    e.prototype.undo = function() {
        for (var e = 0; e < this.commands.length; e++) {
            this.commands[e].undo()
        }
        this.reverseMode && this.commands.reverse()
    }
    ,
    e.prototype.add = function(e) {
        e && this.commands.push(e)
    }
    ,
    e.prototype.remove = function(e) {
        if (e) {
            var t = this.commands.indexOf(e);
            t > -1 && this.commands.slice(t, 1)
        }
    }
    ,
    e.prototype.clear = function() {
        this.commands.clear()
    }
    ,
    e
}();
Uc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.registerTypes = {},
        this.undoList = [],
        this.redoList = [],
        this._doing = !1
    }
    return e.prototype.register = function(e, t) {
        this.registerTypes[e] = t
    }
    ,
    e.prototype.unregister = function(e) {
        delete this.registerTypes[e]
    }
    ,
    e.prototype._create = function(e) {
        var t = e.type
            , i = this.registerTypes[t];
        if (i) {
            e.app = this.app;
            var r = new i(e);
            return r.type = t,
            r
        }
        THING.Utils.error("command not found: " + t)
    }
    ,
    e.prototype.create = function(e, t) {
        if (Utils.isArray(e)) {
            for (var i = new Hc(this.app,t), r = 0; r < e.length; r++) {
                var n = this._create(e[r]);
                i.add(n)
            }
            if (i.commands.length)
                return i
        } else {
            if (Utils.isObject(e))
                return n = this._create(e);
            Utils.isString(e)
        }
        return null
    }
    ,
    e.prototype.execute = function(e, t) {
        var i = this.create(e, t);
        return i ? (i.execute(),
        this._push(i),
        this.app.events.dispatchEvent({
            type: "executeCommand",
            cmd: i
        }),
        i) : null
    }
    ,
    e.prototype._push = function(e) {
        this._doing || (this.undoList.push(e),
        this.redoList.splice(0, this.redoList.length),
        this.app.events.dispatchEvent({
            type: "push"
        }))
    }
    ,
    e.prototype.push = function(e) {
        this._push(e)
    }
    ,
    e.prototype.redo = function() {
        if (0 != this.redoList.length) {
            this._doing = !0;
            var e = this.redoList.pop();
            e.execute(),
            this.undoList.push(e),
            this.app.events.dispatchEvent({
                type: "executeCommand",
                cmd: e
            }),
            this.app.events.dispatchEvent({
                type: "redo",
                cmd: e
            }),
            this._doing = !1
        }
    }
    ,
    e.prototype.undo = function() {
        if (0 != this.undoList.length) {
            this._doing = !0;
            var e = this.undoList.pop();
            e.undo(),
            this.redoList.push(e),
            this.app.events.dispatchEvent({
                type: "executeCommand",
                cmd: e
            }),
            this.app.events.dispatchEvent({
                type: "undo",
                cmd: e
            }),
            this._doing = !1
        }
    }
    ,
    e.prototype.getRedoCount = function() {
        return this.redoList.length
    }
    ,
    e.prototype.getUndoCount = function() {
        return this.undoList.length
    }
    ,
    e.prototype.toJson = function() {
        for (var e = 0; e < this.undoList.length; e++)
            this.undoList[e];
        return "not impl~"
    }
    ,
    e
}();
zc = new THREE.Vector2;

SceneManager = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.events = t.events,
        this.baseURL = t.baseURL,
        this.scene = t.scene,
        this.renderer = t.renderer,
        this.objectManager = t.objectManager,
        this.resourceManager = t.resourceManager,
        this._background = null,
        this._backgroundResource = null,
        this._backgroundAdditiveColor = new THREE.Color(0,0,0),
        this._backgroundColorScaleFactor = new THREE.Vector3(1,1,1),
        this._skyBox = null,
        this._skyBoxResource = null,
        this._fogEnable = !1,
        this._fogConfig = {},
        this._fogLinear = null,
        this._fogExp2 = null,
        this._enableDeafultViewPointFile = !1,
        this._defaultViewPointFileName = "viewpoint.json",
        this.init()
    }
    return e.prototype.init = function() {
        this.initRenderControl()
    }
    ,
    e.prototype.initRenderControl = function() {
        var e = new THREE.Vector3
            , t = new THREE.Vector3;
        function i(i, r) {
            i.node.traverse((function(n) {
                if (n.material) {
                    e.setFromMatrixPosition(r.matrixWorld),
                    t.setFromMatrixPosition(n.matrixWorld);
                    var o = e.distanceTo(t);
                    i.renderDistance > 0 && (n.visible = o < i.renderDistance),
                    i.shadowDistance > 0 && (n.castShadow = o < i.shadowDistance)
                }
            }
            ))
        }
        var r = this;
        this.app.scene.onBeforeRender = function() {
            var e = r.app.renderCamera;
            r.objectManager.renderDistanceObjects.forEach((function(t) {
                i(t, e)
            }
            )),
            r.objectManager.shadowDistanceObjects.forEach((function(t) {
                i(t, e)
            }
            ))
        }
    }
    ,
    e.prototype.synBackgroundColor = function() {
        var e = this._skyBoxResource;
        if (e && e.isCubeTexture) {
            e.colorMatrix = e.colorMatrix || new THREE.Matrix4;
            var t = this._backgroundAdditiveColor;
            if (t) {
                var i = new THREE.Vector3(t.r,t.g,t.b);
                e.colorMatrix.setPosition(i)
            }
            var r = this._backgroundColorScaleFactor;
            if (r) {
                var n = new THREE.Vector3(r.x,r.y,r.z);
                e.colorMatrix.setScale(n)
            }
        }
    }
    ,
    e.prototype._keepBackgroundAspect = function() {
        if (this._backgroundResource && this._backgroundResource.isTexture) {
            var e = this._backgroundResource
                , t = this.app.renderer.getSize(zc)
                , i = t.width / t.height
                , r = e.image.width / e.image.height;
            i > r ? (e.offset.set(0, .5 - r / i * .5),
            e.repeat.set(1, r / i)) : (e.offset.set(.5 - i / r * .5, 0),
            e.repeat.set(i / r, 1))
        }
    }
    ,
    e.prototype._resetBackgroundAspect = function() {
        if (this._backgroundResource && this._backgroundResource.isTexture) {
            var e = this._backgroundResource;
            e.offset.set(0, 0),
            e.repeat.set(1, 1)
        }
    }
    ,
    e.prototype.closeSkyEffect = function() {
        this.setSkyEffect(null)
    }
    ,
    e.prototype.setSkyEffect = function(e) {
        e ? (this._skyEffect || (this._skyEffect = this.app.create({
            type: "SkyEffect",
            parent: this.app.root
        })),
        this._skyEffect.setConfig(e),
        this._skyEffect.visible = !0,
        this.app._lightGroup && (this.app._lightGroup.visible = !this._skyEffect.getConfig().light)) : (this._skyEffect && (this._skyEffect.visible = !1),
        this.app._lightGroup && (this.app._lightGroup.visible = !0))
    }
    ,
    e.prototype.setFogLinear = function(e, t, i) {
        e = Utils.parseColor(e),
        this._fogLinear ? (this._fogLinear.color.set(e),
        this._fogLinear.near = t,
        this._fogLinear.far = i) : this._fogLinear = new THREE.Fog(e,t,i),
        this.app.scene.fog = this._fogLinear
    }
    ,
    e.prototype.clearFogLinear = function() {
        this._fogLinear && (this._fogLinear = null,
        this.app.scene.fog = null)
    }
    ,
    e.prototype.setFogExp2 = function(e, t) {
        e = Utils.parseColor(e),
        this._fogExp2 ? (this._fogExp2.color.set(e),
        this._fogExp2.density = t) : this._fogExp2 = new THREE.FogExp2(e,t),
        this.app.scene.fog = this._fogExp2
    }
    ,
    e.prototype.clearFogExp2 = function() {
        this._fogExp2 && (this._fogExp2 = null,
        this.app.scene.fog = null)
    }
    ,
    e.prototype.closeFog = function() {
        this.clearFogLinear(),
        this.clearFogExp2(),
        this._fogEnable = !1
    }
    ,
    e.prototype.setFog = function(e) {
        e = e || {},
        this._fogConfig = Utils.mergeObject(this._fogConfig, e, !0);
        var t = e.type
            , i = e.color || 8421504;
        if ("Exp2" == t) {
            var r = e.density || .1;
            this.setFogExp2(i, r)
        } else {
            var n = e.near || 10
                , o = e.far || 100;
            this.setFogLinear(i, n, o)
        }
        this._fogEnable = !0,
        this.app.needUpdate = !0
    }
    ,
    e.prototype.onResize = function(e, t) {
        if (this._backgroundResource && this._backgroundResource.isCanvasTexture) {
            var i = this._backgroundResource
                , r = e / t
                , n = i.image.width / i.image.height;
            r < n ? (i.offset.set(0, .5 - n / r * .5),
            i.repeat.set(1, n / r)) : (i.offset.set(.5 - r / n * .5, 0),
            i.repeat.set(r / n, 1))
        }
    }
    ,
    e.prototype.onUpdate = function(e) {
        this._backgroundResource && this._backgroundResource.isCanvasTexture && (this._backgroundResource.needsUpdate = !0)
    }
    ,
    e.prototype.showLightHelper = function(e) {
        THING.Utils.warn("[SceneManager] Please use app.lighting={ showHelper: " + e + " } instead"),
        this.app._lightGroup.setConfig({
            showHelper: e
        })
    }
    ,
    e.prototype.closeSceneLights = function() {
        THING.Utils.warn("[SceneManager] Please use app.lighting=null instead"),
        this.app._lightGroup.setConfig(Bu)
    }
    ,
    _createClass(e, [{
        key: "background",
        set: function(e) {
            var t = this;
            if (this.background != e) {
                if (this._skyBox = null,
                this._backgroundResource && this._backgroundResource.name != e && (this._backgroundResource.isTexture && this._backgroundResource.dispose(),
                this._backgroundResource = null),
                this._background = e,
                e) {
                    var i = Utils.parseColor(e, null);
                    if (i)
                        this.scene.background = i,
                        this._backgroundResource = i;
                    else if (Utils.isString(e))
                        if (this._backgroundResource)
                            this.scene.background = this._backgroundResource;
                        else {
                            var r = this.app.confirmURL(e);
                            this.app.resourceManager.loadTexture(r, (function(i) {
                                t._background == e && (t.scene.background = i,
                                t._backgroundResource = i,
                                t._backgroundResource.name = e,
                                t.app.keepBackgroundAspect ? t._keepBackgroundAspect() : t._resetBackgroundAspect())
                            }
                            ))
                        }
                    else
                        "CANVAS" == e.tagName ? (this._backgroundResource = new THREE.CanvasTexture(e),
                        this._backgroundResource.needsUpdate = !0,
                        this.scene.background = this._backgroundResource,
                        this.app.keepBackgroundAspect ? this._keepBackgroundAspect() : this._resetBackgroundAspect()) : "VIDEO" == e.tagName && (this._backgroundResource = new THREE.VideoTexture(e),
                        this._backgroundResource.needsUpdate = !0,
                        this.scene.background = this._backgroundResource,
                        this.app.keepBackgroundAspect ? this._keepBackgroundAspect() : this._resetBackgroundAspect())
                } else
                    this.scene.background = Utils.parseColor(this.app._bgColor);
                this.app.trigger("backgroundChanged", {
                    background: e
                }),
                (Utils.isNumber(e) || e) && this.app.trigger("skyboxchange", {
                    skyBox: null
                })
            }
        },
        get: function() {
            return this._background
        }
    }, {
        key: "backgroundAdditiveColor",
        set: function(e) {
            this._backgroundAdditiveColor = Utils.parseColor(e),
            this.synBackgroundColor()
        },
        get: function() {
            return this._backgroundAdditiveColor.toHexString()
        }
    }, {
        key: "backgroundColorScaleFactor",
        set: function(e) {
            this._backgroundColorScaleFactor = Utils.parseVector3(e),
            this.synBackgroundColor()
        },
        get: function() {
            return this._backgroundColorScaleFactor.toArray()
        }
    }, {
        key: "skyBox",
        set: function(e) {
            if (this.skyBox != e) {
                this._background = null,
                this._skyBox = e,
                this.app.trigger("skyboxchange", {
                    skyBox: e
                });
                var t = void 0;
                if (this._skyBoxResource) {
                    if (this._skyBoxResource.name == e)
                        return void (this.scene.background = this._skyBoxResource);
                    t = this._skyBoxResource
                }
                var i = this;
                if (Utils.isString(e) && (e.indexOf(".png") > -1 || e.indexOf(".jpg") > -1))
                    this.app.resourceManager.loadTexture(this.app.confirmURL(e), (function(r) {
                        i._skyBox == e && (i.scene.background = r,
                        i._skyBoxResource = r,
                        i._skyBoxResource.name = e,
                        i.synBackgroundColor(),
                        t && t.dispose())
                    }
                    ), {
                        mapping: THREE.EquirectangularReflectionMapping
                    });
                else {
                    var r = this.app.confirmURL(Utils.parseCubeTextureUrls(e));
                    r ? this.app.resourceManager.loadCubeTexture(r, (function(r) {
                        i._skyBox == e && (r.format = THREE.RGBAFormat,
                        i.scene.background = r,
                        i._skyBoxResource = r,
                        i._skyBoxResource.name = e,
                        i.synBackgroundColor(),
                        t && t.dispose())
                    }
                    )) : this.scene.background = Utils.parseColor(this.app._bgColor)
                }
            }
        },
        get: function() {
            return this._skyBox
        }
    }, {
        key: "enableDeafultViewPointFile",
        set: function(e) {
            this._enableDeafultViewPointFile = e
        },
        get: function() {
            return this._enableDeafultViewPointFile
        }
    }, {
        key: "defaultViewPointFileName",
        set: function(e) {
            this._defaultViewPointFileName = e
        },
        get: function() {
            return this._defaultViewPointFileName
        }
    }, {
        key: "fogEnable",
        get: function() {
            return this._fogEnable
        }
    }, {
        key: "skyEffectEnable",
        get: function() {
            return !!this.sky
        }
    }]),
    e
}();
function Wc(e, t) {
    var i = e.get(t.key);
    if (i) {
        if (i.refCount && i.refCount--,
        i.refCount)
            return !1;
        t.dispose(),
        e.delete(t.key)
    }
    return !0
}
var Gc = new THREE.Color
    , qc = new THREE.Vector3;
function Xc(e, t) {
    Gc.setStyle(e),
    qc.set(Gc.r, Gc.g, Gc.b).multiplyScalar(255),
    void 0 === t && ((t = new THREE.DataTexture(new Uint8Array(16),2,2)).magFilter = t.minFilter = THREE.NearestFilter);
    var i = qc.x
        , r = qc.y
        , n = qc.z;
    return t.image.data.set([i, r, n, 255, i, r, n, 255, i, r, n, 255, i, r, n, 255]),
    t.needsUpdate = !0,
    t
}
var Jc = function() {
    function e(t) {
        var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        classCallCheck(this, e),
        this.app = t,
        this._textures = new Map,
        this._cubeTextures = new Map,
        this._enableFileNameAsKey = i,
        this._textureLoader = new THREE.TextureLoader(this.app.loadingManager),
        this._cubeTextureLoader = new THREE.CubeTextureLoader,
        this._imageLoader = new THREE.ImageLoader
    }
    return e.prototype.loadTexture = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
            , r = arguments[3]
            , n = this
            , o = arguments[4]
            , s = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5]
            , a = e.getNormalize()
            , l = void 0;
        l = this._enableFileNameAsKey && !s ? a.getFileName(!1) : a,
        i.repeat && (l += "_repeat"),
        i.anisotropy && (l += "_a" + i.anisotropy),
        i.mapping && (l += "_m" + i.mapping),
        !1 === i.flipY && (l += "_y" + i.flipY),
        i.premultiplyAlpha && (l += "_premultAlpha");
        var u = this._textures.get(l);
        return u ? (u.refCount++,
        t && (u.image ? Utils.timer.setTimeout((function() {
            return t(u)
        }
        ), 10) : (u.delayLoadCallbacks = u.delayLoadCallbacks || [],
        u.delayLoadCallbacks.push(t)))) : ((u = this._textureLoader.load(a, (function(e) {
            var r = e.image;
            i.repeat && (e.wrapS = e.wrapT = THREE.RepeatWrapping),
            i.anisotropy && (e.anisotropy = i.anisotropy),
            i.mapping && (e.mapping = i.mapping),
            !1 === i.flipY && (e.flipY = i.flipY),
            i.premultiplyAlpha && (e.premultiplyAlpha = i.premultiplyAlpha),
            t && t(e);
            var o = e.delayLoadCallbacks;
            o && (o.forEach((function(t) {
                return t(e)
            }
            )),
            e.delayLoadCallbacks = []);
            var s = n.app.options.maxTextureSize;
            (r.width > s || r.height > s) && THING.Utils.warn("The '" + r.src + "' texture is too big(" + r.width + "x" + r.height + "), max size: (" + s + "x" + s + ")")
        }
        ), r, o)).key = l,
        u.refCount = u.refCount || 1,
        this._textures.set(l, u)),
        u
    }
    ,
    e.prototype.loadCubeTexture = function(e, t) {
        var i = this.app.confirmURL(Utils.parseCubeTextureUrls(e));
        if (!i)
            return null;
        var r = i.toString()
            , n = this._cubeTextures.get(r);
        if (n)
            n.refCount++,
            t && (n.version > 0 ? Utils.timer.setTimeout((function() {
                return t(n)
            }
            ), 10) : (n.delayLoadCallbacks = n.delayLoadCallbacks || [],
            n.delayLoadCallbacks.push(t)));
        else {
            var o = function(e) {
                var i = e.image;
                if (i && 6 === i.length) {
                    for (var r = i[0].width, n = i[0].height, o = 1; o < i.length; o++) {
                        var s = i[o];
                        if (s.width != r || s.height != n)
                            return void THING.Utils.error("Load cube texture failed, due to image size is invalid, please make sure all size of images must be the same")
                    }
                    t && t(e);
                    var a = e.delayLoadCallbacks;
                    a && (a.forEach((function(t) {
                        return t(e)
                    }
                    )),
                    e.delayLoadCallbacks = [])
                }
            };
            !function(e) {
                return e[1] === e[0] && e[2] === e[0] && e[3] === e[0] && e[4] === e[0] && e[5] === e[0]
            }(i) ? n = this._cubeTextureLoader.load(i, o) : (n = new THREE.CubeTexture,
            this._imageLoader.load(i[0], (function(e) {
                n.images = [e, e, e, e, e, e],
                n.needsUpdate = !0,
                o(n)
            }
            ))),
            n.key = r,
            n.refCount = n.refCount || 1,
            this._cubeTextures.set(r, n)
        }
        return n
    }
    ,
    e.prototype.loadTextureFromImage = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = this._textures.get(e);
        return i ? i.refCount++ : ((i = new THREE.Texture).image = e,
        i.needsUpdate = !0,
        i.key = e,
        i.refCount = 1,
        this._textures.set(e, i)),
        t.repeat && (i.wrapS = i.wrapT = THREE.RepeatWrapping),
        t.anisotropy && (i.anisotropy = t.anisotropy),
        t.mapping && (i.mapping = t.mapping),
        !1 === t.flipY && (i.flipY = t.flipY),
        t.premultiplyAlpha && (i.premultiplyAlpha = t.premultiplyAlpha),
        i
    }
    ,
    e.prototype.loadTextureFromColor = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = this._textures.get(e);
        return i ? i.refCount++ : ((i = Xc(e)).key = e,
        i.refCount = 1,
        this._textures.set(e, i)),
        t.repeat && (i.wrapS = i.wrapT = THREE.RepeatWrapping),
        t.anisotropy && (i.anisotropy = t.anisotropy),
        t.mapping && (i.mapping = t.mapping),
        !1 === t.flipY && (i.flipY = t.flipY),
        t.premultiplyAlpha && (i.premultiplyAlpha = t.premultiplyAlpha),
        i
    }
    ,
    e.prototype.load = function(e, t, i, r) {
        var n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        this.loadTexture(e, t, {}, i, r, n)
    }
    ,
    e.prototype.removeTexture = function(e) {
        return !!Wc(this._textures, e) && (!!Wc(this._cubeTextures, e) && ((void 0 === e.refCount || !e.refCount || (e.refCount--,
        !e.refCount)) && (e.dispose(),
        !0)))
    }
    ,
    e.prototype.setCrossOrigin = function(e) {
        return this._textureLoader.setCrossOrigin(e),
        this._cubeTextureLoader.setCrossOrigin(e),
        this
    }
    ,
    e.prototype.destroyTextureWithUrl = function(e, t) {
        t = t || {},
        e = (e = this.app.confirmURL(e)).getNormalize(),
        (t.repeat || void 0 === t.repeat) && (e += "_repeat"),
        t.anisotropy && (e += "_a" + t.anisotropy),
        t.mapping && (e += "_m" + t.mapping),
        !1 === t.flipY && (e += "_y" + t.flipY),
        t.premultiplyAlpha && (e += "_premultAlpha");
        var i = this._textures.get(e);
        i && (i.dispose(),
        this._textures.delete(e))
    }
    ,
    _createClass(e, [{
        key: "enableFileNameAsKey",
        set: function(e) {
            this._enableFileNameAsKey = e
        },
        get: function() {
            return this._enableFileNameAsKey
        }
    }, {
        key: "repetitionRate",
        get: function() {
            if (!this._textures.size)
                return 0;
            var e = 0;
            return this._textures.forEach((function(t) {
                e += t.refCount
            }
            )),
            e / this._textures.size - 1
        }
    }]),
    e
}();
Yc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._deadObjects = [],
        this.init(),
        THING.DisposeObjectNumberInFrame = THING.DisposeObjectNumberInFrame || 100
    }
    return e.prototype.init = function() {
        this.textureLoader = new Jc(this.app,this.app.options.enableTextureFileNameAsKey),
        this.textureLoader.setCrossOrigin("anonymous"),
        this.app.loadingManager.loadingManager.addHandler(/.*(.jpg|.png)$/, this.textureLoader)
    }
    ,
    e.prototype.disposeMaterial = function(e, t) {
        return (void 0 === e.refCount || (e.refCount--,
        !e.refCount)) && (e.dispose(),
        t || this.disposeTextures(e),
        !0)
    }
    ,
    e.prototype.disposeTextures = function(e) {
        if (e)
            for (var t in e) {
                var i = e[t];
                i && i.isTexture && this.textureLoader.removeTexture(i) && (e[t] = null)
            }
    }
    ,
    e.prototype.disposeGeometry = function(e) {
        if (void 0 !== e.refCount) {
            if (e.refCount--,
            e.refCount)
                return !1;
            e.dispose()
        } else {
            if (this.app.scene.hasGeometry(e))
                return !1;
            e.dispose(),
            e._hasDisposed = !0
        }
        return !0
    }
    ,
    e.prototype.doDispose = function(e, t, i) {
        var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
        if (null !== e) {
            if (i && !1 === i(e))
                return !1;
            if (e._skipDispose)
                return this.app.picker.removePickingResources(e),
                !1;
            if (r && e.children)
                for (var n = e.children.concat(), o = 0; o < n.length; o++) {
                    var s = this.doDispose(n[o], t, i);
                    s && e.remove(n[o])
                }
            var a = e.geometry;
            if (a && !e.isSprite && this.disposeGeometry(a),
            e.material) {
                var l = !1;
                if (Utils.isArray(e.material)) {
                    var u = e.material.concat();
                    e.material = [];
                    for (o = 0; o < u.length; o++) {
                        var c = u[o];
                        l = this.disposeMaterial(c, t)
                    }
                } else
                    l = this.disposeMaterial(e.material, t);
                l && this.app.picker.removePickingResources(e)
            }
            e.isSkinnedMesh && (t || this.disposeTextures(e.skeleton))
        }
        return !0
    }
    ,
    e.prototype.remove = function(e, t) {
        e && (e.removeBySelf(),
        this.unload(e, t))
    }
    ,
    e.prototype.unload = function(e, t, i) {
        var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
            , n = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
        e && (e.isObject3D ? r ? this._deadObjects.push({
            node: e,
            keepTexture: t,
            filterFunc: i,
            recursive: n
        }) : this.doDispose(e, t, i, n) : THING.Utils.error("must provide Object3D to unload"))
    }
    ,
    e.prototype.loadCubeTexture = function(e, t) {
        return this.textureLoader.loadCubeTexture(e, t)
    }
    ,
    e.prototype.loadTexture = function(e, t, i) {
        var r = null;
        return Utils.isString(e) ? r = this.textureLoader.loadTexture(e, t, i) : (r = this.textureLoader.loadTextureFromImage(e),
        t && t(r)),
        r
    }
    ,
    e.prototype.onUpdate = function() {
        if (this._deadObjects.length)
            for (var e = Math.min(this._deadObjects.length, THING.DisposeObjectNumberInFrame || 1), t = 0; t < e; t++) {
                var i = this._deadObjects[0];
                this.doDispose(i.node, i.keepTexture, i.filterFunc, i.recursive),
                this._deadObjects.splice(0, 1)
            }
    }
    ,
    e
}();
Qc = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t;
        var i = this;
        this.loadingManager = new THREE.LoadingManager((function() {}
        ),(function(e, t, r) {
            0 != r && i.app.mainUI.updateDownloadingProgress(t / r)
        }
        ),(function(e) {
            THING.Utils.error("[onError] url: " + e)
        }
        )),
        thingjs.GLTFLoader.defaultManager = this.loadingManager
    }
    return e.prototype.itemStart = function(e) {
        this.loadingManager.itemStart(e)
    }
    ,
    e.prototype.itemEnd = function(e) {
        this.loadingManager.itemEnd(e)
    }
    ,
    e.prototype.itemError = function(e) {
        this.loadingManager.itemError(e)
    }
    ,
    e.prototype.resolveURL = function(e) {
        return this.loadingManager.resolveURL(e)
    }
    ,
    e.prototype.setURLModifier = function(e) {
        return this.loadingManager.setURLModifier(e)
    }
    ,
    e.prototype.getHandler = function(e) {
        return this.loadingManager.getHandler(e)
    }
    ,
    e
}();
Zc = {
    temporalSuperSampling: {
        enable: !1,
        size: 30
    },
    postEffect: {
        enable: !0,
        bloom: {
            enable: !1,
            strength: .14,
            radius: .4,
            threshold: .7
        },
        screenSpaceAmbientOcclusion: {
            enable: !1,
            radius: .2,
            quality: "medium",
            intensity: .8,
            temporalFilter: !0,
            ignoreTransparent: !1
        },
        screenSpaceReflection: {
            enable: !1,
            maxRayDistance: 200,
            pixelStride: 16,
            pixelStrideZCutoff: 50,
            screenEdgeFadeStart: .9,
            eyeFadeStart: .4,
            eyeFadeEnd: .8,
            minGlossiness: .2
        },
        colorCorrection: {
            enable: !0,
            exposure: 0,
            brightness: 0,
            contrast: 1.1,
            saturation: 1.1,
            gamma: 1
        },
        dof: {
            enable: !1,
            focalDepth: 1,
            focalLength: 24,
            fstop: .9,
            maxblur: 1,
            threshold: .9,
            gain: 1,
            bias: .5,
            dithering: 1e-4
        },
        vignette: {
            enable: !1,
            type: "blur",
            color: 0,
            offset: 1.5
        },
        vignetting: {
            enable: !1,
            color: 0,
            offset: 1.5
        },
        blurEdge: {
            enable: !1,
            offset: 1.5
        },
        film: {
            enable: !1,
            grayscale: !1,
            noiseIntensity: .35,
            scanlinesIntensity: 0,
            scanlinesCount: 2048
        },
        RBSplit: {
            enable: !1,
            offsetX: 2,
            offsetY: 2,
            power: 2
        },
        chromaticAberration: {
            enable: !1,
            chromaFactor: .025
        },
        blur: {
            enable: !1,
            radius: 5,
            bounds: [[0, 0, .5, .5], [.5, .5, 1, 1]]
        },
        FXAA: {
            enable: !1
        },
        MSAA: {
            enable: !0
        }
    }
};
Kc = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this._manager = t,
        this._defaultConfig = Utils.cloneObject(i, !1),
        this._config = Utils.cloneObject(i, !1)
    }
    return e.prototype.setConfig = function(e) {
        return this._config = Utils.cloneObject(e, !1),
        this
    }
    ,
    e.prototype.getConfig = function() {
        return this._config
    }
    ,
    e.prototype.save = function() {
        return this._defaultConfig = Utils.cloneObject(this._config, !1),
        this
    }
    ,
    e.prototype.mergeConfig = function(e) {
        return e = Utils.cloneObject(e, !1),
        Utils.mergeObject(e, this._config),
        this._config = e,
        this
    }
    ,
    e.prototype.mergeWithSavedConfig = function(e) {
        return e = Utils.cloneObject(e, !1),
        Utils.mergeObject(e, this._defaultConfig),
        this._config = e,
        this
    }
    ,
    e.prototype.lock = function() {
        return this._manager.lock(this),
        this
    }
    ,
    e.prototype.unlock = function() {
        return this._manager.unlock(this),
        this
    }
    ,
    e.prototype.update = function(e) {
        return this._manager._update(this, e),
        this
    }
    ,
    e.prototype.active = function(e) {
        return this._manager._active(this, e),
        this
    }
    ,
    e.prototype.destroy = function() {
        this._manager = null,
        this._config = null,
        this._defaultConfig = null
    }
    ,
    e
}();
$c = function() {
    function e() {
        classCallCheck(this, e),
        this._lockedControl = null,
        this._control = null
    }
    return e.prototype.createControl = function(e) {
        return new Kc(this,e)
    }
    ,
    e.prototype.lock = function(e) {
        this._lockedControl = e
    }
    ,
    e.prototype.unlock = function(e) {
        this._lockedControl === e && (this._lockedControl = null)
    }
    ,
    e.prototype.getActiveControl = function() {
        return this._control
    }
    ,
    e.prototype.getCurrentControl = function() {
        return this._lockedControl || this._control
    }
    ,
    e.prototype._active = function(e, t) {
        return this._lockedControl !== e && (this._control = e),
        this._lockedControl || this._control
    }
    ,
    e.prototype._update = function(e, t) {
        var i = this.getCurrentControl();
        return i === e ? i : null
    }
    ,
    e.prototype.destroy = function() {
        this._lockedControl = null,
        this._control = null
    }
    ,
    e
}();
var eh = new THREE.Vector2
    , th = new THREE.WebGLRenderTarget(4,4);
th.texture.minFilter = THREE.NearestFilter,
th.texture.magFilter = THREE.NearestFilter,
th.texture.generateMipmaps = !1;
var ih = new THREE.ShaderPass({
    name: "empty_shader",
    uniforms: {},
    vertexShader: "\n\t\tvoid main() {\n\t\t\tgl_Position = vec4(0., 0., 0., 1.);\n\t\t}\n\t",
    fragmentShader: "\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(0., 0., 0., 0.);\n\t\t}\n\t"
});
rh = function(e) {
    function t(i, n) {
        classCallCheck(this, t);
        var o = s(this, e.call(this));
        o.app = i,
        i.renderer.localClippingEnabled = !0;
        var a = i.renderer.getDrawingBufferSize(eh)
            , l = a.width
            , u = a.height;
        return o._mainRenderer = new MainRenderer(l,u,{
            stencil: n,
            maxSamples: i.renderer.capabilities.maxSamples
        }),
        o._mainRenderer.combineGlow = !0,
        o._captureRenderTarget = new THREE.WebGLRenderTarget(l,u,{
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBAFormat
        }),
        o._captureBuffer = new Uint8Array(4 * l * u),
        o.autoDirty = !1,
        o
    }
    return o(t, e),
    t.prototype.createControl = function(e) {
        return new nh(this,e)
    }
    ,
    t.prototype._active = function(t) {
        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.app.root.box;
        t = e.prototype._active.call(this, t),
        this._mainRenderer.setConfig(t._config, i)
    }
    ,
    t.prototype._update = function(t) {
        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.app.root.box
            , r = e.prototype._update.call(this, t);
        r && this._mainRenderer.setConfig(r._config, i)
    }
    ,
    t.prototype.update = function() {
        this.autoDirty && this._mainRenderer.dirty(),
        this.app.renderer.capabilities.isWebGL2 && "iOS 8 and up" === Utils.system.getOSVersion().version && ih.render(this.app.renderer, th),
        this._mainRenderer.render(this.app.renderer, this.app.scene, this.app.renderCamera);
        var e = this.app.cssScene;
        e.children.length && this.app.cssRenderer.render(e, this.app.renderCamera),
        this.app.picker.render(this.app.renderer)
    }
    ,
    t.prototype.resize = function(e, t) {
        this.app.renderer.setSize(e, t),
        this.app.cssRenderer.setSize(e, t);
        var i = this.app.renderer.getDrawingBufferSize(eh);
        this._mainRenderer.setSize(i.width, i.height),
        this._resizeCaptureBuffer(e, t)
    }
    ,
    t.prototype._resizeCaptureBuffer = function(e, t) {
        this._captureRenderTarget.setSize(e, t);
        var i = 4 * e * t;
        this._captureBuffer.length !== i && (this._captureBuffer = new Uint8Array(i))
    }
    ,
    t.prototype.capture = function(e, t) {
        var i = this.app.renderer.getSize(eh);
        e = e || i.width,
        t = t || i.height,
        this._mainRenderer.setSize(e, t),
        this.app.renderCamera.setSize(e, t),
        this._resizeCaptureBuffer(e, t);
        var r = this.app.renderEffects.getConfig().postEffect.blur.enable;
        return this.app.postEffect = {
            postEffect: {
                blur: {
                    enable: !1
                }
            }
        },
        this._mainRenderer.render(this.app.renderer, this.app.scene, this.app.renderCamera, this._captureRenderTarget),
        this.app.renderer.readRenderTargetPixels(this._captureRenderTarget, 0, 0, this._captureRenderTarget.width, this._captureRenderTarget.height, this._captureBuffer),
        function e(t, i, r, n) {
            if (Array.isArray(t)) {
                for (var o = e(new Float64Array(t), i, r, n), s = 0; s < t.length; s++)
                    t[s] = o[s];
                return t
            }
            if (!i || !r)
                throw Error("Bad dimensions");
            n || (n = t.length / (i * r));
            for (var a = r >> 1, l = i * n, u = new (0,
            t.constructor)(i * n), c = 0; c < a; ++c) {
                var h = c * l
                    , p = (r - c - 1) * l;
                u.set(t.subarray(h, h + l)),
                t.copyWithin(h, p, p + l),
                t.set(u, p)
            }
            return t
        }(this._captureBuffer, this._captureRenderTarget.width, this._captureRenderTarget.height),
        this._mainRenderer.setSize(i.width, i.height),
        this.app.renderCamera.setSize(i.width, i.height),
        this.app.postEffect = {
            postEffect: {
                blur: {
                    enable: r
                }
            }
        },
        this._captureBuffer
    }
    ,
    t.prototype.captureToDataURL = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "jpeg"
            , r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1
            , n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4]
            , o = this.app.renderer.getSize(eh);
        e = e || o.width,
        t = t || o.height;
        var s = this.capture(e, t)
            , a = new Uint8ClampedArray(s.buffer)
            , l = document.createElement("canvas")
            , u = l.getContext("2d");
        l.width = e,
        l.height = t;
        var c = u.createImageData(e, t);
        c.data.set(a),
        u.putImageData(c, 0, 0),
        "jpg" == i && (i = "jpeg");
        var h = "image/" + (i.isBlank() ? "jpeg" : i)
            , p = l.toDataURL(h, r);
        return n && (p = p.replace(h, "image/octet-stream")),
        p
    }
    ,
    t.prototype.replaceRenderer = function(e) {
        THING.Utils.warn("[RendererManager] replaceRenderer has been DEPRECATED!"),
        this._mainRenderer = e,
        this._mainRenderer.setConfig(this.getCurrentControl()._config)
    }
    ,
    t.prototype.closePostEffect = function() {
        THING.Utils.warn("[RendererManager] Please use app.postEffect={} instead"),
        this.app.renderEffects.mergeConfig({
            postEffect: {
                enable: !1
            }
        }).update()
    }
    ,
    _createClass(t, [{
        key: "needUpdate",
        set: function(e) {
            e && this._mainRenderer.dirty()
        }
    }, {
        key: "mainRenderer",
        get: function() {
            return this._mainRenderer
        }
    }, {
        key: "renderOutline",
        set: function(e) {
            THING.Utils.warn("[RendererManager] renderOutline has been DEPRECATED!")
        }
    }, {
        key: "temporalSuperSampling",
        set: function(e) {
            THING.Utils.warn("[RendererManager] Please use app.postEffect={} instead"),
            this.app.renderEffects.mergeConfig({
                temporalSuperSampling: {
                    enable: e
                }
            }).update()
        },
        get: function() {
            return THING.Utils.warn("[RendererManager] Please use app.postEffect instead"),
            this.app.renderEffects.getConfig().temporalSuperSampling.enable
        }
    }, {
        key: "SSAO",
        set: function(e) {
            THING.Utils.warn("[RendererManager] Please use app.postEffect={} instead"),
            this.app.renderEffects.mergeConfig({
                postEffect: {
                    screenSpaceAmbientOcclusion: {
                        enable: e
                    }
                }
            }).update()
        },
        get: function() {
            return THING.Utils.warn("[RendererManager] Please use app.postEffect instead"),
            this.app.renderEffects.getConfig().postEffect.screenSpaceAmbientOcclusion.enable
        }
    }, {
        key: "postEffectEnable",
        get: function() {
            return THING.Utils.warn("[RendererManager] Please use app.postEffect instead"),
            this.app.renderEffects.getConfig().postEffect.enable
        }
    }]),
    t
}($c);
nh = function(e) {
    function t(i) {
        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Zc;
        return classCallCheck(this, t),
        s(this, e.call(this, i, n))
    }
    return o(t, e),
    t
}(Kc);
oh = _TextKeyEncoder.toStr([120, 211, 159]);
sh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.xmlhttp = null,
        this.time = 1500,
        this.simulate = !0,
        this.url = "",
        this.cache = !0,
        this._stop = !1,
        this._curInterval = null,
        this.callback = null
    }
    return e.prototype.start = function(e) {
        if (this._stop = !1,
        this.url = null,
        null != e && (null != e.interval && (this.time = e.interval),
        null != e.url && (this.url = e.url),
        null != e.simulate && (this.simulate = e.simulate),
        null != e.cache && (this.cache = e.cache),
        null != e.callback && (this.callback = e.callback)),
        null == this.url || 1 == this.simulate) {
            var t = parent.getUserPath();
            if (!t)
                return void THING.Utils.log("Service Data Path Error");
            this.url = t
        }
        this._ajax(),
        THING.Utils.log("Service startup complete")
    }
    ,
    e.prototype.stop = function() {
        this._stop = !0,
        null != this._curInterval && window.clearTimeout(this._curInterval),
        THING.Utils.log("Service stop complete")
    }
    ,
    e.prototype._ajax = function() {
        var e, t = this;
        function i() {
            4 == t.xmlhttp.readyState && (200 == t.xmlhttp.status ? (!function(e) {
                var i = null;
                i = 1 == Array.isArray(e) ? e[0] : e;
                for (var r in i) {
                    var n = t.app.query(r);
                    if (n.length > 0) {
                        var o = i[r];
                        for (var s in o)
                            n[0].attr(s, o[s])
                    }
                }
            }(JSON.parse(t.xmlhttp.responseText)),
            null != t.callback && t.callback(t.xmlhttp.getResponseHeader("last-modified"))) : THING.Utils.log("Problem retrieving XML data:" + t.xmlhttp.statusText),
            0 == t._stop && (t._curInterval = window.setTimeout((function() {
                t._ajax()
            }
            ), t.time)))
        }
        e = t.url,
        t.xmlhttp = null,
        window.XMLHttpRequest && (t.xmlhttp = new XMLHttpRequest),
        null != t.xmlhttp ? (t.xmlhttp.onreadystatechange = i,
        0 == t.cache && (e = -1 == e.lastIndexOf("?") ? e + "?time=" + (new Date).getTime() : e + "&time=" + (new Date).getTime()),
        t.xmlhttp.open(oh, e, !0),
        t.xmlhttp.send(null)) : THING.Utils.error("Your browser does not support XMLHTTP.")
    }
    ,
    e
}();
ah = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.viewPointList = [],
        this.timeoutNumer = null,
        this._flyCallback = null,
        this._playIndex = 0,
        this.playLoop = !1,
        this._pickedObjects = new Set
    }
    return e.prototype.start = function() {
        var e = this;
        this.app.on(EventType.Pick, (function(t) {
            e._pickedObjects.add(t.object)
        }
        ))
    }
    ,
    e.prototype.create = function(e, t) {
        null == e && (e = {
            name: "newViewPoint"
        }),
        null == e.flyTime ? e.flyTime = 1e3 : "string" == typeof e.flyTime && (e.flyTime = Number(e.flyTime)),
        null == e.waitTime ? e.waitTime = 0 : "string" == typeof e.waitTime && (e.waitTime = Number(e.waitTime));
        var i = this._take(e);
        null == t ? this.viewPointList.push(i) : this.viewPointList.splice(t, 0, i)
    }
    ,
    e.prototype.delete = function(e) {
        e >= 0 && e < this.viewPointList.length && this.viewPointList.splice(e, 1)
    }
    ,
    e.prototype.recover = function(e) {
        try {
            var t = this
                , i = this.viewPointList[e]
                , r = null;
            null != i.events && (r = function() {
                for (var e = i.events, r = 0; r < e.length; r++) {
                    var n = e[r]
                        , o = t.app.query("#" + n.id);
                    if (o.length > 0)
                        for (var s = 0; s < n.event.length; s++)
                            o[0].dispatch(n.event[s])
                }
            }
            ),
            0 != i.waitTime ? (null != t.timeoutNumer && clearTimeout(t.timeoutNumer),
            this.timeoutNumer = setTimeout((function() {
                t._fly(i, r),
                t.timeoutNumer = null
            }
            ), i.waitTime)) : this._fly(i, r)
        } catch (e) {
            THING.Utils.log(e)
        }
    }
    ,
    e.prototype.update = function(e, t, i) {
        if (null != e) {
            null == t && (t = {}),
            "string" == typeof t.flyTime && (t.flyTime = Number(t.flyTime)),
            "string" == typeof t.waitTime && (t.waitTime = Number(t.waitTime));
            var r = {};
            return i ? r = this._take(t, e) : (r = this.viewPointList[e],
            null != t.flyTime && (r.flyTime = t.flyTime),
            null != t.waitTime && (r.waitTime = t.waitTime),
            null != t.flyTime && (r.name = t.name)),
            this.viewPointList[e] = r,
            r
        }
    }
    ,
    e.prototype.play = function(e) {
        null != e && (this.playLoop = e),
        this._playIndex = 0,
        this._flyCallback = null,
        this.viewPointList.length > 0 && this._next()
    }
    ,
    e.prototype.pause = function(e) {
        void 0 === e && (e = !0),
        e ? (null != this.timeoutNumer && clearTimeout(this.timeoutNumer),
        this.app.camera.flying && this.app.camera.stopFlying()) : this.viewPointList.length > 0 && this._next()
    }
    ,
    e.prototype.swap = function(e, t) {
        var i = this.viewPointList[e][e];
        return this.viewPointList[e][e] = this.viewPointList[e][t],
        this.viewPointList[e][t] = i,
        this.viewPointList[e]
    }
    ,
    e.prototype.stop = function() {
        null != this.timeoutNumer && clearTimeout(this.timeoutNumer),
        this.app.camera.flying && this.app.camera.stopFlying(),
        this._flyCallback = null,
        this._pickedObjects.clear()
    }
    ,
    e.prototype.saveJSON = function() {
        var e = {
            name: "viewPointAnimation",
            pointList: this.viewPointList
        };
        return JSON.stringify(e)
    }
    ,
    e.prototype.loadJSON = function(e) {
        var t = e;
        "string" == typeof e && (t = JSON.parse(e)),
        null != t.pointList && (this.viewPointList = t.pointList)
    }
    ,
    e.prototype.clearAll = function() {
        stop(),
        this.viewPointList = []
    }
    ,
    e.prototype._take = function(e, t) {
        var i = {};
        null != t && (i = this.viewPointList[t]),
        null != e.flyTime && (i.flyTime = e.flyTime),
        null != e.waitTime && (i.waitTime = e.waitTime),
        null != e.name && (i.name = e.name),
        i.position = this.app.camera.position,
        i.target = this.app.camera.target,
        i.up = this.app.camera.up,
        i.image = this.app.captureScreenshotToImage(140, 118, "jpeg", .1);
        var r = this._getPickedEvents();
        return r.length > 0 && (i.events = r),
        i
    }
    ,
    e.prototype._getPickedEvents = function() {
        for (var e = [], t = this._pickedObjects, i = 0, r = t.length; i < r; i++) {
            var n = t[i];
            if (n) {
                var o = {
                    id: n.id,
                    event: []
                };
                n.hasEvent("click") && o.event.push("click"),
                n.hasEvent("singleclick") && o.event.push("singleclick"),
                0 != o.event.length && e.push(o)
            }
        }
        return this._pickedObjects.clear(),
        e
    }
    ,
    e.prototype._fly = function(e, t) {
        var i = this
            , r = {
            position: e.position,
            target: e.target,
            time: e.flyTime,
            complete: function(e) {
                null != t && t(),
                null != i._flyCallback && i._flyCallback()
            }
        };
        e.up && (r.up = e.up),
        i.app.camera.flyTo(r)
    }
    ,
    e.prototype._next = function() {
        var e = this;
        if (this._playIndex > this.viewPointList.length - 1) {
            if (0 == this.playLoop)
                return void (this._flyCallback = null);
            this.play()
        }
        this._flyCallback = function() {
            e._playIndex += 1,
            e._next()
        }
        ,
        this.recover(this._playIndex)
    }
    ,
    e
}();
lh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._modelBaseURL = "https://model.3dmomoda.com/models/"
    }
    return e.prototype.initOptions = function(e) {
        this.app.resourceManager.textureLoader
    }
    ,
    e.prototype.parseDoorOrWindow = function(e, t, i) {
        var r = this;
        function n(e, t) {
            var i = r.app.objectManager.create({
                type: "Door",
                id: t.id,
                name: t.name,
                node: t.mesh,
                parent: e,
                animations: t.resource.animations,
                properties: t.properties
            });
            if (t.isOpen && i.open(),
            i.animationClips)
                for (var n = 0; n < i.animationClips.length; n++) {
                    var o = i.animationClips[n];
                    if ("_defaultAnim_" === o.name) {
                        i.playAnimation({
                            name: o.name,
                            loop: !0,
                            speed: .15
                        });
                        break
                    }
                }
            return i
        }
        t.mesh ? n() : t.registerBuildCallbackListener((function(t) {
            var i = n(e, t);
            e.miscNode.add(i.node)
        }
        ))
    }
    ,
    e.prototype.parseWall = function(e, t, i) {
        for (var r = 0; r < t.doorOrWindows.length; r++) {
            var n = t.doorOrWindows[r];
            this.parseDoorOrWindow(e, n, i)
        }
    }
    ,
    e.prototype.parseGroups = function(e, t, i) {
        var r = t.typeToChildren.PlacementGroup;
        r || (r = []);
        for (var n = 0; n < r.length; n++) {
            var o = r[n]
                , s = "Thing";
            o.jsonData && o.jsonData.type && (s = o.jsonData.type);
            this.app.objectManager.create({
                id: o.id,
                name: o.name,
                node: o.mesh,
                type: s,
                parent: e,
                properties: o.properties
            })
        }
    }
    ,
    e.prototype.parsePlacements = function(e, t, i) {
        var r = t.typeToChildren.Placement;
        r || (r = []);
        for (var n = 0; n < r.length; n++) {
            var o = r[n]
                , s = "Thing";
            if (o.jsonData && o.jsonData.type && (s = o.jsonData.type),
            o.mesh) {
                var a = this.app.objectManager.create({
                    id: o.id,
                    type: s,
                    name: o.name,
                    node: o.mesh,
                    parent: e,
                    url: o.resource.getModelUrl(),
                    animations: o.resource.animations,
                    properties: o.properties
                });
                if (a.bundleID = o.resource.modelID,
                a.bundleName = o.resource.modelName,
                o.isPlayAnim && a.containAnimation(o.animClip)) {
                    var l = {
                        name: o.animClip,
                        loop: !1,
                        speed: .15
                    };
                    o.hasSkin && (l.loop = !0),
                    a.playAnimation(l)
                }
            }
        }
    }
    ,
    e.prototype.parseRooms = function(e, t, i) {
        var r = t.typeToChildren.Room;
        r || (r = []);
        for (var n = 0; n < r.length; n++) {
            var o = r[n];
            o.ceiling.mesh && o.mesh.add(o.ceiling.mesh),
            o.roof.mesh && o.mesh.add(o.roof.mesh),
            o.floor.mesh && o.mesh.add(o.floor.mesh),
            this.app.objectManager.create({
                type: "Room",
                name: o.name,
                node: o.mesh,
                id: o.userID,
                ceilingNode: o.ceiling.mesh,
                roofNode: o.roof.mesh,
                floorNode: o.floor.mesh,
                parent: e,
                properties: o.properties
            })
        }
    }
    ,
    e.prototype.createCombinedObject = function(e, t, i) {
        var r = new THREE.Object3D(t)
            , n = this.app.create({
            type: "CombinedObject",
            visible: !0,
            node: r,
            parent: e
        });
        return n.node.visible = !1,
        n.userData.type = i,
        n
    }
    ,
    e.prototype.parsePlan = function(e, t, i) {
        for (var r = this.createCombinedObject(e, "combineFloor", "CombineFloorParent").node, n = this._getTypeChildren(t, "CombineFloor"), o = 0; o < n.length; o++) {
            var s = n[o];
            r.add(s.mesh)
        }
        var a = this.createCombinedObject(e, "combineCeiling", "CombineCeilingParent").node
            , l = this._getTypeChildren(t, "CombineCeiling");
        for (o = 0; o < l.length; o++) {
            var u = l[o];
            a.add(u.mesh)
        }
        var c = this.createCombinedObject(e, "combineRoof", "CombineRoofParent").node
            , h = this._getTypeChildren(t, "CombineRoof");
        for (o = 0; o < h.length; o++) {
            var p = h[o];
            c.add(p.mesh)
        }
        var d = this.createCombinedObject(e, "combinePlacement", "CombineMiscParent").node
            , f = this._getTypeChildren(t, "CombinePlacement");
        for (o = 0; o < f.length; o++) {
            var m = f[o];
            d.add(m.mesh)
        }
        for (var g = this.createCombinedObject(e, "combineWall", "CombineWallParent").node, v = this._getTypeChildren(t, "CombineStraightManualWall"), y = 0; y < v.length; y++) {
            var b = v[y];
            g.add(b.mesh)
        }
        var _ = this._getTypeChildren(t, "CombineModelWall");
        for (y = 0; y < _.length; y++) {
            b = _[y];
            g.add(b.mesh)
        }
        var x = this._getTypeChildren(t, "CombineDoorOrWindow");
        for (y = 0; y < x.length; y++) {
            m = x[y];
            g.add(m.mesh)
        }
    }
    ,
    e.prototype.parseFloor = function(e, t, i) {
        var r = this._getTypeChildren(t, "Building")[0]
            , n = this._getTypeChildren(r, "FloorPlan")[0];
        this.parsePlan(e, n, i),
        this.parseGroups(e, n, i),
        this.parsePlacements(e, n, i),
        this.parseRooms(e, n, i);
        for (var o = this._getTypeChildren(n, "DoorOrWindow"), s = 0; s < o.length; s++) {
            var a = o[s];
            this.parseDoorOrWindow(e, a, i)
        }
    }
    ,
    e.prototype._generateWindow = function(e, t) {
        var i = void 0 !== e.typeId ? e.typeId : "15DA293545E84A3680F93CF7D4227BD9";
        this.app.create({
            type: "Door",
            name: e.key,
            url: this._modelBaseURL + i + "/0/gltf/",
            localPosition: [.01 * e.pos[0], e.suspendpercent * (e._wallHeight || 3), .01 * e.pos[1]],
            parent: t,
            complete: function() {
                var t = this.boundingBox.initSize;
                this.scale = [e.size[0] / t[0], e.size[1] / t[1], e.size[2] / t[2]],
                this.angles = [0, 180 - e.rotation, 0],
                scope._settingDoorOpenDirection(this, e.diridx)
            }
        })
    }
    ,
    e.prototype._generateDoor = function(e, t) {
        var i = this
            , r = void 0 !== e.typeId ? e.typeId : "d8ff0aaa4e87439bbededc8c6590491c";
        this.app.create({
            type: "Door",
            name: e.key,
            url: this._modelBaseURL + r + "/0/gltf/",
            localPosition: [.01 * e.pos[0], e.suspendpercent * (e._wallHeight || 3), .01 * e.pos[1]],
            parent: t,
            complete: function() {
                var t = this.boundingBox.initSize;
                this.scale = [e.size[0] / t[0], e.size[1] / t[1], e.size[2] / t[2]],
                this.angles = [0, 180 - e.rotation, 0],
                i._settingDoorOpenDirection(this, e.diridx)
            }
        })
    }
    ,
    e.prototype.parseDoorsAndWindows = function(e, t, i) {
        var r = this;
        t.doors.forEach((function(t) {
            var i = t.key.split("_");
            i.length && ("window" == i[0] ? r._generateWindow(t, e) : r._generateDoor(t, e))
        }
        ))
    }
    ,
    e.prototype.load = function(e, t, i) {
        t = this.app.confirmURL(t);
        var r = this;
        new THREE.FileLoader(this.app.loadingManager).load(t + "/scene.json", (function(t) {
            var n = JSON.parse(t);
            r.loadFromData(e, n, i)
        }
        ))
    }
    ,
    e.prototype.loadFromData = function(e, t, i) {
        var r = this;
        i = i || {},
        this.initOptions(i);
        var n = function(e, t) {
            var i = {
                version: "2",
                unit: t = t || 1,
                walls: [],
                rooms: [],
                doors: [],
                textures: [],
                models: []
            }
                , r = e.structure;
            return i.textures = e.textures,
            i.models = e.models,
            i.walls = r.walls.map((function(e) {
                var t = e.textureSize;
                if (void 0 === e.sourceType) {
                    var i = {
                        weight: e.thickness,
                        start: [100 * e.points[0], 100 * e.points[1]],
                        end: [100 * e.points[2], 100 * e.points[3]],
                        height: e.height,
                        type: 0,
                        lefttexture: 0,
                        righttexture: 0,
                        edgetexture: 1
                    };
                    return t && (i.uvmultiple = t),
                    i
                }
                var r = {
                    weight: e.thickness,
                    start: [100 * e.points[0], 100 * e.points[1]],
                    end: [100 * e.points[2], 100 * e.points[3]],
                    height: e.height,
                    type: e.sourceType,
                    lefttexture: e.lefttexture,
                    righttexture: e.righttexture,
                    edgetexture: e.edgetexture
                };
                return t && (r.uvmultiple = t),
                !1 === e.visible && (r.isshow = !1),
                0 != e.sourceType && (r.model = e.model),
                r
            }
            )),
            i.rooms = r.rooms.map((function(e) {
                var t = [100 * e.textLoc[0], 100 * e.textLoc[1]]
                    , i = {
                    id: e.key,
                    name: e.name,
                    points: [],
                    holes: [],
                    center: t,
                    floortexture: e.floorTexture,
                    floorblocksize: e.floorBlockSize,
                    floorheight: e.floorHeight,
                    floorblockangle: e.floorBlockAngle,
                    rooftexture: e.roofTexture,
                    roofblocksize: e.roofBlockSize,
                    roofheight: e.roofHeight,
                    roofblockangle: e.roofBlockAngle,
                    ceilingtexture: e.ceilingTexture,
                    ceilingblocksize: e.ceilingBlockSize,
                    ceilingheight: e.ceilingHeight,
                    ceilingblockangle: e.ceilingBlockAngle
                };
                e.userData && (Object.keys(e.userData).length && (i.properties = e.userData));
                return void 0 !== e.userId && (i.userid = e.userId),
                !1 === e.floorVisible && (i.isshowfloor = !1),
                !1 === e.ceilingVisible && (i.isshowceiling = !1),
                !1 === e.roofVisible && (i.isshowroof = !1),
                e.polygons.forEach((function(e, t) {
                    for (var r = 0 === t ? i.points : [], n = 0; n < e.length / 2; n++)
                        r.push([100 * e[2 * n + 0], 100 * e[2 * n + 1]]);
                    0 !== t && i.holes.push(r)
                }
                )),
                i
            }
            )),
            r.doors.forEach((function(e) {
                var t = r.walls[e.wallIndex];
                e.loc;
                var n = [t.points[0], t.points[1]]
                    , o = [t.points[2], t.points[3]]
                    , s = [100 * (n[0] + (o[0] - n[0]) * e.loc), 100 * (n[1] + (o[1] - n[1]) * e.loc)]
                    , a = i.models[e.typeIndex]
                    , l = e.openingDirection || 0
                    , u = {
                    key: "door_" + e.key,
                    typeId: a.id,
                    width: 100 * e.size[0],
                    height: 100 * e.size[1],
                    size: e.size,
                    suspendpercent: null == e.locV ? .4 : e.locV,
                    pos: s,
                    rotation: ch(t),
                    diridx: l
                };
                u._wallHeight = t.height,
                i.doors.push(u)
            }
            )),
            r.windows.forEach((function(e) {
                var t = r.walls[e.wallIndex]
                    , n = [t.points[0], t.points[1]]
                    , o = [t.points[2], t.points[3]]
                    , s = [100 * (n[0] + (o[0] - n[0]) * e.loc), 100 * (n[1] + (o[1] - n[1]) * e.loc)]
                    , a = i.models[e.typeIndex]
                    , l = e.openingDirection || 0
                    , u = {
                    key: "window" + e.key,
                    typeId: a.id,
                    width: 100 * e.size[0],
                    height: 100 * e.size[1],
                    size: e.size,
                    suspendpercent: null == e.locV ? .4 : e.locV,
                    pos: s,
                    rotation: ch(t),
                    diridx: l
                };
                u._wallHeight = t.height,
                i.doors.push(u)
            }
            )),
            i
        }(t, 1)
            , o = i.complete
            , s = i.startLoadResource;
        json2mesh.DefaultSetting.enableFloorLightMap = Utils.parseValue(i.enableFloorLightMap, !1);
        var a = this._createLoader(n.version)
            , l = void 0;
        a.load({
            json: n
        }).then((function(e) {
            l = e,
            s && s(a.resourceManager.models, a.resourceManager.textures)
        }
        )).then((function() {
            return a.loadResources()
        }
        )).then((function() {
            r.parseFloor(e, l, i),
            r.parseDoorsAndWindows(e, n, i)
        }
        )).then((function() {
            o && o(e)
        }
        )).catch((function(e) {
            return THING.Utils.warn(e)
        }
        ))
    }
    ,
    e.prototype._createLoader = function(e) {
        if (e && new Version(e).major >= 2)
            return new json2mesh.ThingjsEditorSceneLoader_2_0(this.app.options);
        return new json2mesh.ThingjsEditorSceneLoader
    }
    ,
    e.prototype._getTypeChildren = function(e, t) {
        var i = e.typeToChildren[t];
        return i || (i = []),
        i
    }
    ,
    e.prototype._settingDoorOpenDirection = function(e, t) {
        var i = e.node.getObjectByName("Controller")
            , r = e.node.getObjectByName("RootNode")
            , n = e.animationNames && e.animationNames.length
            , o = !1;
        !i || i.getObjectByName("LeftPiovt") && i.getObjectByName("RightPiovt") || (o = !0),
        o || n || i || r.rotateY(Math.PI),
        o ? 1 == t ? r.scale.set(-1, 1, 1) : 2 == t ? r.scale.set(1, 1, -1) : 3 == t ? r.scale.set(-1, 1, -1) : r.scale.set(1, 1, 1) : 1 == t ? r.scale.set(-1, 1, -1) : r.scale.set(1, 1, 1)
    }
    ,
    e
}();
uh = new THREE.Vector2;
function ch(e) {
    return uh.set(e.points[0] - e.points[2], e.points[1] - e.points[3]),
    uh.angle() / Math.PI * 180
}
var hh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._loading = !1,
        this._updateTime = 0,
        this._loadingFloors = [],
        this._initEvents()
    }
    return e.prototype._initEvents = function() {
        var e = this;
        this.app.on("levelchange", (function(t) {
            var i = t.current;
            if (i instanceof Building) {
                e._loadingFloors.sort((function(e, t) {
                    return e.owner.parent != i ? 1 : t.owner.parent != i ? -1 : e.owner.indexOfBuilding - t.owner.indexOfBuilding
                }
                ))
            } else if (i instanceof Floor) {
                e._loadingFloors.sort((function(e, t) {
                    return e.owner == i ? -1 : t.owner == i ? 1 : e.owner.node.id - t.owner.node.id
                }
                ))
            }
        }
        ))
    }
    ,
    e.prototype.update = function() {
        if (this._loadingFloors.length && !(this._loading || (this._updateTime += this.app._deltaTime,
        this._updateTime < .25))) {
            this._updateTime = 0;
            var e = this._loadingFloors[0]
                , t = e.owner
                , i = e.url
                , r = e.jsonData
                , n = e.options
                , o = this
                , s = n.complete;
            n.complete = function(e) {
                s && s(e),
                o._loading = !1
            }
            ,
            this._loading = !0;
            var a = new lh(this.app);
            i ? a.load(t, i, n) : a.loadFromData(t, r, n),
            this._loadingFloors.splice(0, 1)
        }
    }
    ,
    e.prototype.load = function(e, t, i) {
        this._loadingFloors.push({
            owner: e,
            url: t,
            options: i
        })
    }
    ,
    e.prototype.loadFromData = function(e, t, i) {
        this._loadingFloors.push({
            owner: e,
            jsonData: t,
            options: i
        })
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    e
}();
ph = function(e) {
    THREE.ShaderMaterial.call(this, {
        uniforms: {
            baseId: {
                type: "f",
                value: 0
            },
            size: {
                type: "f",
                value: .01
            },
            scale: {
                type: "f",
                value: 400
            },
            batchIdOffset: {
                type: "f",
                value: 0
            }
        },
        vertexShader: e ? "\n\t#include <common>\n\t#include <logdepthbuf_pars_vertex>\n\t#include <skinning_pars_vertex>\n\t\n\tuniform float size;\n\tuniform float scale;\n\tuniform float baseId;\n\t\n\tvarying vec4 worldId;\n\n\t#ifdef USE_CARTESIAN3\n\t\tvec3 czm_converPosition(vec3 origin) {\n\t\t\tvec3 res = vec3(0.0);\n\t\t\tres.x = -origin.x;\n\t\t\tres.y = origin.z;\n\t\t\tres.z = origin.y;\n\t\t\treturn res;\n\t\t}\n\t#endif\n\n\t#ifdef INSTANCED\n\t\tattribute float instanceId;\n\t#endif\n\t\n\t#ifdef USE_ID_ATTRIBUTES\n\t\tattribute float id;\n\t#endif\n\n\tvoid main() {\n\t\t#include <skinbase_vertex>\n\t\t#include <begin_vertex>\n\t\t#ifdef USE_CARTESIAN3\n\t\t\ttransformed = czm_converPosition(transformed);\n\t\t#endif\n\t\t// position instanced\n\t\t#ifdef INSTANCED\n\t\t\tmat4 instanceMat = compose(instancePosition, instanceQuaternion, instanceScale);\n\t\t\ttransformed.xyz = (instanceMat * vec4(transformed, 1.0)).xyz;\n\t\t#endif\n\t\t#include <skinning_vertex>\n\t\t#include <project_vertex>\n\t\t#include <logdepthbuf_vertex>\n\t\t#ifdef USE_ID_ATTRIBUTES\n\t\t\tfloat pickId = id;\n\t\t#else\n\t\t\t#ifdef INSTANCED\n\t\t\t\tfloat pickId = instanceId;\n\t\t\t#else\n\t\t\t\tfloat pickId = baseId;\n\t\t\t#endif\n\t\t#endif\n\n\t\tvec3 a = fract(vec3(1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)) * pickId);\n\t\ta -= a.xxy * vec3(0.0, 1.0/255.0, 1.0/255.0);\n\t\tworldId = vec4(a,1);\n\t}\n" : "\n\t#include <common>\n\t#include <logdepthbuf_pars_vertex>\n\n\tuniform float size;\n\tuniform float scale;\n\tuniform float baseId;\n\n\tvarying vec4 worldId;\n\n\t#ifdef USE_CARTESIAN3\n\t\tvec3 czm_converPosition(vec3 origin) {\n\t\t\tvec3 res = vec3(0.0);\n\t\t\tres.x = -origin.x;\n\t\t\tres.y = origin.z;\n\t\t\tres.z = origin.y;\n\t\t\treturn res;\n\t\t}\n\t#endif\n\n\t#ifdef USE_ID_3DTILES_ATTRIBUTES\n\t\tuniform float batchIdOffset;\n\t#endif\n\n\t#ifdef INSTANCED\n\t\tattribute float instanceId;\n\t#endif\n\t\n\t#ifdef USE_ID_ATTRIBUTES\n\t\tattribute float id;\n\t#endif\n\t#ifdef USE_VISIBLE\n\t\tattribute float vis;\n\t#endif\n\tvoid main() {\n\t\t#ifdef USE_ID_ATTRIBUTES\n\t\t\tfloat pickId = id;\n\t\t\t#ifdef USE_ID_3DTILES_ATTRIBUTES\n\t\t\t\tpickId = id + batchIdOffset;\n\t\t\t#endif\n\t\t#else\n\t\t\t#ifdef INSTANCED\n\t\t\t\tfloat pickId = instanceId;\n\t\t\t\t#ifdef USE_ID_3DTILES_ATTRIBUTES\n\t\t\t\t\tpickId = instanceId + batchIdOffset;\n\t\t\t\t#endif\n\t\t\t#else\n\t\t\t\tfloat pickId = baseId;\n\t\t\t#endif\n\t\t#endif\n\t\t\n\t\tvec3 a = fract(vec3(1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)) * pickId);\n\t  a -= a.xxy * vec3(0.0, 1.0/255.0, 1.0/255.0);\n\t\tworldId = vec4(a,1);\n\t\tvec3 transformed = position;\n\t\t#ifdef USE_CARTESIAN3\n\t\t\ttransformed = czm_converPosition(transformed);\n\t\t#endif\n\t\t#ifdef INSTANCED\n\t\t\tmat4 instanceMat = compose(instancePosition, instanceQuaternion, instanceScale);\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * instanceMat * vec4( transformed, 1.0 );\n\t\t#else\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );\n\t\t#endif\t\t\n\t\t#ifdef USE_VISIBLE\n\t\t\tgl_Position = gl_Position * vis;\n\t\t#endif\n\n\t\t#include <logdepthbuf_vertex>\n\t}\n",
        fragmentShader: "\n\t#include <logdepthbuf_pars_fragment>\n\t#ifdef GL_ES\n\t\tprecision highp float;\n\t#endif\n\tvarying vec4 worldId;\n\tvoid main() {\n\t\t#include <logdepthbuf_fragment>\n\t\tgl_FragColor = worldId;\n\t}\n"
    })
};
(ph.prototype = Object.create(THREE.ShaderMaterial.prototype)).constructor = ph,
ph.prototype.setBaseID = function(e) {
    this.uniforms.baseId.value = e
}

ph.prototype.setPointSize = function(e) {
    this.uniforms.size.value = e
}

ph.prototype.setPointScale = function(e) {
    this.uniforms.scale.value = e
}
;
var dh = new THREE.Vector2
    , fh = new THREE.Vector3;
fh.isFailed = !0;
var mh, gh, vh = function() {
    function e(t, i) {
        classCallCheck(this, e),
        i = i || {},
        this.app = t,
        this.renderer = t.renderer,
        this.scene = t.scene,
        this._needUpdate = !0,
        this._updateTime = 0,
        this._updateIntervalTime = .25,
        this._pickHooker = null,
        this._needTracelessRendering = !1,
        this.debugScene = null,
        this.sprite = null,
        this.camera2D = null,
        this.pickingTexture = new THREE.WebGLRenderTarget,
        this.pickingTexture.texture.minFilter = THREE.LinearFilter,
        this.pickingTexture.texture.generateMipmaps = !1,
        this.pickNodes = new Map,
        this.pickMaterials = new Map,
        this.lineShell = Utils.parseValue(i.lineShell, 10),
        this.pointShell = Utils.parseValue(i.pointShell, .1),
        this.debug = Utils.parseValue(i.debug, !1),
        this.init();
        var n = this;
        this.app.renderer.materialManager.addStrategy("gpuPicker", (function(e, t, i, r, o, s) {
            var a = this.id;
            if (this.geometry._hasDisposed)
                return null;
            if (this.userData.skipPick)
                return null;
            if (!o.visible || !o.opacity)
                return null;
            if ("BackgroundCubeMaterial" == o.name || "BackgroundMaterial" == o.name)
                return null;
            if (this.isSky)
                return null;
            n.pickNodes.has(a) || n.pickNodes.set(a, this);
            var l = n.pickMaterials.get(a);
            return l || (l = n.createPickingMaterial(this, o)) && n.pickMaterials.set(a, l),
            l
        }
        ))
    }
    return e.prototype.init = function() {
        var e = this.renderer.getSize(dh);
        this.resizeTexture(e.width, e.height)
    }
    ,
    e.prototype.resizeTexture = function(e, t) {
        this.pickingTexture.setSize(e, t),
        this.pixelBuffer = new Uint8Array(4 * e * t),
        this.sprite && this.sprite.scale.set(2 * e, 2 * t, 1),
        this.camera2D && (this.camera2D.left = -e / 2,
        this.camera2D.right = e / 2,
        this.camera2D.top = t / 2,
        this.camera2D.bottom = -t / 2,
        this.camera2D.updateProjectionMatrix()),
        this._needUpdate = !0
    }
    ,
    e.prototype._needUpdatePickingTexture = function(e) {
        return this._updateTime += e,
        !(this._updateTime < this._updateIntervalTime) && (this._updateTime = 0,
        !!this._needUpdate && (this._needUpdate = !1,
        !0))
    }
    ,
    e.prototype.update = function(e) {
        this._needUpdatePickingTexture(e) && this.updatePickingTexture()
    }
    ,
    e.prototype.markPickingNode = function(e) {
        this.pickNodes.set(e.id, e)
    }
    ,
    e.prototype.removePickingResources = function(e) {
        var t = this;
        if (e.isObject3D)
            e.traverse((function(e) {
                return t.removePickingResources(e.id)
            }
            ));
        else {
            var i = this.pickMaterials.get(e);
            i && (Array.isArray(i) ? i.forEach((function(e) {
                return e.dispose()
            }
            )) : i.dispose(),
            this.pickMaterials.delete(e));
            var r = this.pickNodes.get(e);
            r && (this.pickNodes.delete(e),
            r.isEdgeWireframe || (this.forceUpdate = !0))
        }
    }
    ,
    e.prototype._createPickingMaterial = function(e, t) {
        var i = e.userData
            , r = t.size || .01
            , n = t.linewidth || 1
            , o = function(e) {
            for (var t = e; t; ) {
                if (t.userData.withGeometryIDAttributes)
                    return !0;
                t = t.parent
            }
            return !1
        };
        if (t.isSpriteMaterial)
            t.map && t.map.image && ((a = t.clone()).alphaTest = .001,
            a.blending = THREE.NoBlending,
            a.lights = !1,
            a.fog = !1,
            a.opacity = 1,
            a.visible = !(!t.visible || i.skipPick),
            a.baseId = e.id,
            a.defines = a.defines || {},
            a.defines.USE_GPUPICKER = "");
        else if (i.noBlending || t.isShaderMaterial && t.vertexShader.indexOf("USE_GPUPICKER") > -1) {
            (a = t.clone()).alphaTest = .001,
            a.blending = THREE.NoBlending,
            a.lights = !1,
            a.fog = !1,
            a.visible = !(!t.visible || i.skipPick),
            a.baseId = e.id,
            a.defines = a.defines || {},
            a.defines.USE_GPUPICKER = "";
            var s = a.uniforms;
            s && s.lineWidth && (s.lineWidth.value += this.lineShell),
            o(e) && (a.defines.USE_ID_ATTRIBUTES = "")
        } else {
            var a;
            if (o(e))
                (a = new ph(t.skinning)).map = null,
                a.color = new THREE.Color,
                a.uniforms.config = {
                    value: {
                        x: 0,
                        y: 0
                    }
                },
                a.linewidth = n + this.lineShell,
                a.depthTest = t.depthTest,
                a.depthWrite = Utils.parseValue(t.depthWrite, t._pickable),
                a.colorWrite = t.colorWrite,
                a.transparent = t.transparent,
                a.opacity = 1,
                a.side = t.side,
                a.skinning = t.skinning,
                a.visible = !(!t.visible || i.skipPick),
                a.polygonOffset = t.polygonOffset,
                a.polygonOffsetFactor = t.polygonOffsetFactor,
                a.polygonOffsetUnits = t.polygonOffsetUnits,
                a.baseId = e.id,
                t.defines && void 0 !== t.defines.INSTANCED && !1 !== t.defines.INSTANCED && (a.defines.INSTANCED = ""),
                i.USE_CARTESIAN3 && (a.defines.USE_CARTESIAN3 = ""),
                a.defines.USE_ID_ATTRIBUTES = "",
                e.userData.enableObjectification && (a.defines.USE_ID_3DTILES_ATTRIBUTES = "",
                a.uniforms.batchIdOffset.value = e.userData.batchIdOffset),
                a.setPointSize(r + this.pointShell),
                a.setPointScale(this.renderer.getSize(dh).height * this.renderer.getPixelRatio() / 2);
            else
                (a = new ph(t.skinning)).map = null,
                a.color = new THREE.Color,
                a.uniforms.config = {
                    value: {
                        x: 0,
                        y: 0
                    }
                },
                a.linewidth = n + this.lineShell,
                a.depthTest = t.depthTest,
                a.depthWrite = Utils.parseValue(t.depthWrite, t._pickable),
                a.colorWrite = !!i.skipPickColorWrite || t.colorWrite,
                a.transparent = t.transparent,
                a.opacity = 1,
                a.side = t.side,
                a.skinning = t.skinning,
                a.visible = !(!t.visible || i.skipPick),
                a.polygonOffset = t.polygonOffset,
                a.polygonOffsetFactor = t.polygonOffsetFactor,
                a.polygonOffsetUnits = t.polygonOffsetUnits,
                a.baseId = e.id,
                t.defines && void 0 !== t.defines.INSTANCED && !1 !== t.defines.INSTANCED && (a.defines.INSTANCED = ""),
                i.USE_CARTESIAN3 && (a.defines.USE_CARTESIAN3 = ""),
                e.userData.enableObjectification && (a.defines.USE_ID_3DTILES_ATTRIBUTES = "",
                a.uniforms.batchIdOffset.value = e.userData.batchIdOffset),
                a.setPointSize(r + this.pointShell),
                a.setPointScale(this.renderer.getSize(dh).height * this.renderer.getPixelRatio() / 2)
        }
        return t.defines && t.defines.USE_VISIBLE && (a.defines.USE_VISIBLE = !0),
        a
    }
    ,
    e.prototype.createPickingMaterial = function(e, t) {
        if (t.length) {
            for (var i = [], r = 0; r < t.length; r++)
                i.push(this._createPickingMaterial(e, t[r]));
            return i
        }
        return this._createPickingMaterial(e, t)
    }
    ,
    e.prototype.updatePickingTexture = function() {
        var e = this.app.renderer.materialManager
            , t = e.getMode();
        e.setMode("gpuPicker");
        var i = this.scene
            , r = i.autoUpdate;
        i.autoUpdate = !1;
        var n = this.renderer.shadowMap.enable;
        this.renderer.initRenderList = !1,
        this.renderer.setRenderTarget(this.pickingTexture),
        this.renderer.clear();
        var o = this;
        this.doRender((function() {
            o.renderer.render(i, o.app.renderCamera),
            o.renderer.render(o.app.mainUI.scene2D, o.app.mainUI.camera2D)
        }
        )),
        i.autoUpdate = r,
        this.renderer.shadowMap.enable = n,
        this.renderer.initRenderList = !0,
        this.renderer.readRenderTargetPixels(this.pickingTexture, 0, 0, this.pickingTexture.width, this.pickingTexture.height, this.pixelBuffer),
        e.setMode(t)
    }
    ,
    e.prototype.pick = function(e, t, i, r) {
        var n = this.pickingTexture.width
            , o = this.pickingTexture.height;
        if (t = Math.round(t),
        i = Math.round(i),
        t < 0 || t >= n)
            return null;
        if (i < 0 || i >= o)
            return null;
        var s = t + (o - i - 1) * n
            , a = 255 * this.pixelBuffer[4 * s + 2] * 255 + 255 * this.pixelBuffer[4 * s + 1] + this.pixelBuffer[4 * s + 0];
        if (isNaN(a))
            return null;
        var l = this.pickNodes.get(a);
        if (!l) {
            var u = this.app.picker.onPickNodeID;
            u && (l = u(a))
        }
        if (!l)
            return null;
        var c = r.clone();
        c._camera = r._camera || r.camera,
        c.camera = r.camera || r._camera;
        var h = this
            , p = {
            x: t,
            y: i,
            id: a,
            pickedNode: l,
            node: l,
            object: l,
            raycaster: c,
            getPickedPosition: function(e) {
                e = e || {};
                var t = this.pickedNode
                    , i = h._pickHooker;
                if (i) {
                    var r = i(this.raycaster, t);
                    if (r) {
                        if (Utils.isArray(r))
                            return Utils.parseVector3(r);
                        if (r.isVector3)
                            return r
                    }
                }
                var n = this.raycaster.intersectObject(t, !1);
                if (n.length)
                    return n[0].point;
                var o = function(e, t) {
                    if (!t)
                        return null;
                    for (var i = e.intersectObject(t, !0), r = 0; r < i.length; r++) {
                        var n = i[r];
                        if (!n.object.userData.skipPick)
                            return n.point
                    }
                    return null
                }
                    , s = o(this.raycaster, t.parent);
                if (s)
                    return s;
                if (!e.skipOtherPick) {
                    if (!e.skipParentPick && t.parent && (s = o(this.raycaster, t.parent)))
                        return s;
                    if (!e.skipObjectPick) {
                        var a = h.app.objectManager.getBaseObject(t);
                        if (a && (s = o(this.raycaster, a.node)))
                            return s
                    }
                    if (!e.skipScenePick && (s = o(this.raycaster, h.app.scene)))
                        return s
                }
                return fh
            }
        };
        return Object.defineProperties(p, {
            pickedPosition: {
                get: function() {
                    if (void 0 === p._pickedPosition) {
                        var e = p.getPickedPosition();
                        e ? (p._pickedPosition = e.toArray(),
                        e.isFailed && (p._pickedPosition.isFailed = !0)) : p._pickedPosition = null
                    }
                    return p._pickedPosition
                }
            },
            distance: {
                get: function() {
                    if (void 0 === p._distance) {
                        var t = p.pickedPosition;
                        if (t) {
                            var i = new THREE.Vector3(t[0],t[1],t[2]);
                            p._distance = i.distanceTo(e.position)
                        } else {
                            var r = new THREE.Vector3;
                            l.getWorldPosition(r);
                            var n = new THREE.Vector3;
                            e.getWorldPosition(n),
                            p._distance = n.distanceTo(r)
                        }
                    }
                    return p._distance
                }
            }
        }),
        p
    }
    ,
    e.prototype.show = function(e) {
        if (e || void 0 === e) {
            if (!this.sprite) {
                var t = new THREE.SpriteMaterial({
                    map: this.pickingTexture.texture
                });
                this.sprite = new THREE.Sprite(t),
                this.sprite.scale.set(this.pickingTexture.width, this.pickingTexture.height, 1),
                this.sprite.position.set(0, 0, -10),
                this.debugScene = new THREE.Scene,
                this.debugScene.add(this.sprite);
                var i = this.renderer.getSize(dh);
                this.camera2D = new THREE.OrthographicCamera(-i.width / 2,i.width / 2,i.height / 2,-i.height / 2,.1,100)
            }
        } else
            this.debugScene && this.sprite && (this.debugScene.remove(this.sprite),
            this.sprite = null,
            this.debugScene = null,
            this.camera2D = null)
    }
    ,
    e.prototype.render = function(e) {
        if (this.debugScene) {
            e.setRenderTarget(null),
            e.clear();
            var t = this;
            this.doRender((function() {
                e.render(t.debugScene, t.camera2D)
            }
            ))
        }
    }
    ,
    e.prototype.doRender = function(e) {
        var t = void 0;
        this._needTracelessRendering && (t = this.renderer.saveInfo()),
        e && e(),
        this._needTracelessRendering && this.renderer.loadInfo(t)
    }
    ,
    _createClass(e, [{
        key: "needTracelessRendering",
        set: function(e) {
            this._needTracelessRendering = e
        }
    }, {
        key: "updateIntervalTime",
        set: function(e) {
            this._updateIntervalTime = e
        },
        get: function() {
            return this._updateIntervalTime
        }
    }, {
        key: "forceUpdate",
        set: function(e) {
            e && (this._needUpdate = !0,
            this._updateTime = .25)
        }
    }, {
        key: "needUpdate",
        set: function(e) {
            this._needUpdate = e
        }
    }]),
    e
}(), yh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t;
        var i = new THREE.PlaneGeometry(1e4,1e4,1,1)
            , n = new THREE.MeshStandardMaterial({
            color: 2200782,
            side: THREE.DoubleSide,
            transparent: !0,
            opacity: .25
        });
        this._vertGround = new THREE.Mesh(i,n),
        this._vertGround.visible = !1,
        this._vertGround.setAngles([90, 0, 0]),
        this._vertGround.scale.set(1e3, 100, 100),
        this._vertGround.updateMatrixWorld();
        var o = new THREE.PlaneGeometry(1e4,1e4,1,1)
            , s = new THREE.MeshStandardMaterial({
            color: 13538337,
            side: THREE.DoubleSide,
            transparent: !0,
            opacity: .25
        });
        this._horzGround = new THREE.Mesh(o,s),
        this._horzGround.visible = !1,
        this._horzGround.setAngles([90, 0, 0]),
        this._horzGround.scale.set(1e3, 100, 100),
        this._horzGround.updateMatrixWorld(),
        this.pickingScene = new THREE.Scene,
        this.pickingScene.add(this._vertGround),
        this.pickingScene.add(this._horzGround)
    }
    return e.prototype.destroy = function() {
        this.app.resourceManager.remove(this.pickingScene)
    }
    ,
    e.prototype.update = function(e, t) {
        this._vertGround.lookAt(Utils.parseVector3(e)),
        this._vertGround.position.copy(Utils.parseVector3(t)),
        this._vertGround.updateMatrixWorld()
    }
    ,
    e.prototype.isMeshOf = function(e) {
        return this._vertGround == e || this._horzGround == e
    }
    ,
    e.prototype.intersect = function(e, t) {
        var i = this.app.calcRect()
            , r = this.app.renderCamera.getRaycaster(e, t, i);
        return this.intersectByRaycaster(r)
    }
    ,
    e.prototype.intersectByRaycaster = function(e) {
        var t = e.intersectObjectForcible(this._horzGround)
            , i = e.intersectObjectForcible(this._vertGround);
        return t.length && i.length ? t[0].distance < i[0].distance ? t[0] : i[0] : t.length ? t[0] : i.length ? i[0] : null
    }
    ,
    _createClass(e, [{
        key: "visible",
        set: function(e) {
            e ? this.app.scene.add(this.pickingScene) : this.app.scene.remove(this.pickingScene),
            this._vertGround.visible = e,
            this._horzGround.visible = e
        }
    }]),
    e
}(), bh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.picker = t.picker,
        this.pickDownPosition = [0, 0],
        this._mouseMoveInterval = null,
        e.instance = this
    }
    return e.prototype.processPicking = function(e) {
        this.picker.processPicking(e)
    }
    ,
    e.prototype.processAreaPicking = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = this.picker
            , r = i.pickingArea
            , n = new Selector(this.app);
        t ? n.buildReturnObject(r.processPicking(i.areaCandidates)) : (this.processPicking(e),
        i.areaCandidates.has(e.object) ? n.buildReturnObject([e.object]) : n.buildReturnObject([])),
        this.picker.setPickedObject(n),
        this.app.trigger(EventType.AreaPicking, {
            objects: n
        })
    }
    ,
    e.prototype.startPicking = function(e) {
        var t = this.picker;
        t.forceUpdate = !0,
        t._enable(!0, "startPicking", 1e4),
        e.ignoreFrameCheck = !0
    }
    ,
    e.prototype.endPicking = function() {
        this.picker._enable(!1, "startPicking", 0)
    }
    ,
    e.prototype.processClickEvents = function(e) {
        this.startPicking(e),
        this.processPicking(e),
        this.endPicking()
    }
    ,
    e.prototype.tryToDrag = function(e) {
        var t = this.picker.processPicking(e);
        if (null == t)
            return null;
        var i = t.object;
        return i ? i.draggable ? t : (e.object = null,
        null) : null
    }
    ,
    e.prototype.onEnter = function(e) {}
    ,
    e.prototype.onUpdate = function(e) {
        var t = this.picker;
        if (!t.areaPicking) {
            var i = t.pickingArea;
            i.started && i.end()
        }
        t.update(this.app._deltaTime),
        this._mouseMoveInterval && (this._mouseMoveInterval.deltaTime += this.app._deltaTime)
    }
    ,
    e.prototype.onMouseMove = function(e) {
        if (this._mouseMoveInterval) {
            if (this._mouseMoveInterval.deltaTime - this._mouseMoveInterval.curTime < this._mouseMoveInterval.interval)
                return;
            this._mouseMoveInterval.curTime = this._mouseMoveInterval.deltaTime
        }
        var t = this.picker;
        if (t.areaPicking) {
            var i = t.pickingArea;
            i.started && (i.move(e.clientX, e.clientY),
            i.realTimePicking && (e.areaPicking = !0,
            this.processAreaPicking(e)))
        } else
            this.processPicking(e),
            !1 === this.picker.setPickedObject(e.object, null, e.ignoreFilter) && (e.hadFiltered = !0)
    }
    ,
    e.prototype.onMouseUp = function(e) {
        var t = this.picker;
        if (this.startPicking(e),
        t.areaPicking) {
            if (0 == e.button) {
                var i = THING.Math.getDistance(this.pickDownPosition, [e.x, e.y]) > 4;
                e.finishedAreaPicking = !0,
                this.processAreaPicking(e, i),
                t.pickingArea.end()
            }
        } else
            e.ignoreFrameCheck = !0,
            t.processPicking(e);
        this.endPicking()
    }
    ,
    e.prototype.onMouseDown = function(e) {
        var t = this.picker;
        t.forceUpdate = !0,
        this.pickDownPosition = [e.clientX, e.clientY],
        t.areaPicking ? 0 == e.button && t.pickingArea.start(e.clientX, e.clientY) : (e.ignoreFrameCheck = !0,
        t.processPicking(e))
    }
    ,
    e.prototype.onDoubleClick = function(e) {
        this.processClickEvents(e)
    }
    ,
    e.prototype.onSingleClick = function(e) {
        this.processClickEvents(e)
    }
    ,
    e.prototype.onClick = function(e) {
        this.processClickEvents(e)
    }
    ,
    e.prototype.onDragStart = function(e) {
        this.startPicking(e);
        var t = this.tryToDrag(e);
        if (t) {
            var i = t.object
                , r = this.picker;
            i._dragState = DragState.Dragging,
            i.internalUserData.prevPickable = i.pickable,
            i.pickable = !1,
            e.ignoreFrameCheck = !0,
            e.forceUpdateTexture = !0;
            var n = r.processPicking(e);
            r.dragIntersect = n || t,
            r.dragIntersect.dragObject = i,
            e.dragObject = i,
            delete e.ignoreFrameCheck,
            delete e.forceUpdateTexture,
            this.app.camera.disable({
                rotate: !0
            })
        } else
            this.endPicking()
    }
    ,
    e.prototype.onDrag = function(e) {
        var t = this.picker;
        null != t.dragIntersect && (e.disableGPUPicker = !0,
        t.processPicking(e),
        delete e.disableGPUPicker,
        this.app.needUpdate = !0)
    }
    ,
    e.prototype.onDragEnd = function(e) {
        var t = this.picker;
        if (t.forceUpdate = !0,
        null != t.dragIntersect) {
            e.disableGPUPicker = !0,
            t.processPicking(e),
            delete e.disableGPUPicker;
            var i = t.dragIntersect.dragObject;
            i && (i._dragState = DragState.DragEnd);
            var r = i.internalUserData.prevPickable;
            r && (i.pickable = r),
            delete i.internalUserData.prevPickable,
            e.object = i,
            t.dragIntersect = null,
            this.app.camera.resume({
                rotate: !0
            }),
            this.endPicking()
        }
    }
    ,
    _createClass(e, [{
        key: "mouseMoveInterval",
        set: function(e) {
            this._mouseMoveInterval = e,
            this._mouseMoveInterval && (this._mouseMoveInterval = {
                interval: e,
                curTime: this.app._deltaTime,
                deltaTime: this.app._deltaTime
            })
        },
        get: function() {
            return this._mouseMoveInterval
        }
    }]),
    e
}(), _h = void 0, xh = 0, Eh = !1;
var wh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t;
        var i = this.app.calcRect();
        this.resize(i.width, i.height),
        mh = this
    }
    return e.prototype.updateProgress = function(e) {
        return this.loadingProgressBar.updateProgress(e)
    }
    ,
    e.prototype.updateDownloadingProgress = function(e) {}
    ,
    e.prototype.updateLoadingProcess = function(e) {
        e = e || {},
        Utils.isNumber(e) && (e = {
            object: this.app.root.campuses[0],
            progress: e
        });
        var t = e.object || e.campus
            , i = e.progress;
        this.updateProgress(i) && this.app.events.dispatchEvent({
            type: "progress",
            object: t,
            progress: i
        })
    }
    ,
    e.prototype._createLSM = function(e, t, i) {
        var r = document.createElement("canvas");
        r.width = 512,
        r.height = 512;
        var n = r.getContext("2d");
        n.font = "24px Verdana",
        n.fillStyle = "white",
        n.textAlign = "center",
        n.textBaseline = "middle";
        var o = [0, 0, 0]
            , s = THING.Math.degToRad(30);
        n.shadowColor = "rgba(" + 255 * o[0] + "," + 255 * o[1] + "," + 255 * o[2] + ",1)",
        n.shadowBlur = 1,
        n.shadowOffsetX = 2 * Math.cos(s),
        n.shadowOffsetY = 2 * Math.sin(s),
        function(e, t, i, r, n) {
            for (var o = t.split("\n"), s = 0; s < o.length; s++) {
                var a = o[s];
                e.fillText(a, i, r),
                r += n
            }
        }(n, e, 256, 256, 40);
        var a = new THREE.Texture(r);
        return a.needsUpdate = !0,
        new THREE.SpriteMaterial({
            opacity: t,
            color: 16777215,
            transparent: !0,
            depthWrite: !1,
            map: a,
            rotation: THING.Math.degToRad(i)
        })
    }
    ,
    e.prototype._createLS = function(e, t, i) {
        for (var r = this.app.calcRect(), n = 2 * r.width, o = 2 * r.height, s = [], a = -o; a < o; a += i)
            for (var l = -n; l < n; l += t) {
                var u = new THREE.Sprite(e);
                u.userData.skipPick = !0,
                u.scale.set(512, 512, 1),
                u.position.set(l, a, -10),
                s.push(u)
            }
        return s
    }
    ,
    e.prototype._setupSprite = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 480
            , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 320;
        _h && this.app.resourceManager.remove(_h);
        var r = this._createLSM(e, .04, 30)
            , n = this._createLS(r, t, i);
        _h = new THREE.Group;
        for (var o = 0; o < n.length; o++)
            _h.add(n[o]),
            n[o].material.opacity = 0;
        Eh = !0,
        this.scene2D.add(_h)
    }
    ,
    e.prototype._setup = function() {
        for (var e = _TextKeyEncoder.update(this.app.appKey), t = [12, 164, 143, 166, 114, 16, 17, 182, 16, 94, 29, 114, 216, 195, 208, 81, 35, 181, 52, 132, 113, 112, 175, 32, 228, 201, 230, 97, 106, 44, 100, 73, 110, 54, 247, 25], i = 0; i < e.length; i++)
            if (e[i] != t[i]) {
                this._setupL();
                break
            }
        this.overlayRootNode = new THREE.Group,
        this.scene2D.add(this.overlayRootNode)
    }
    ,
    e.prototype._setupL = function() {
        if ((new j).eb()) {
            if ([12, 34, 34, 54, 123, 34, 123, 53, 12, 531, 1324, 5, 34, 1].toString() != [32].toString()) {
                var e = function(e) {
                    e = e || window;
                    var t = b
                        , i = t.toStr([76, 243, 170, 237, 85, 62])
                        , r = t.toStr([83, 249, 168, 254, 66, 63, 61, 235])
                        , n = t.toStr([79, 247, 191, 247, 88, 55, 63, 224]);
                    n = t.update(e[r][n]);
                    var o = t.toStr([80, 230, 174, 241])
                        , s = t.toStr([87, 226, 191, 239, 12, 121, 125, 242, 74, 24, 10, 48, 244, 135, 138, 115, 8, 255, 55, 165, 90, 89, 198])
                        , a = t.update(e[r][i])
                        , l = [107, 254, 162, 241, 81, 28, 1, 165, 95, 22, 4, 17, 213, 160, 171]
                        , u = [0, 248, 170, 242, 83, 107, 125];
                    0 == a.toString().indexOf(u.toString()) && (l = [107, 254, 162, 241, 81, 28, 1, 165, 95, 22, 4, 17, 213, 160, 171, 30, 74, 202, 107, 163, 80, 20, 159, 104, 208, 141, 185, 54, 51, 54]);
                    var c = [0, 0];
                    return 1 == Utils.r(0, 1) && (0 == Utils.r(0, 1) ? c[1] = Utils.r(10, 230) : c[0] = Utils.r(50, 400)),
                    {
                        b1: o,
                        c1: s,
                        d1: c,
                        e1: i,
                        pp1: n,
                        gg1: [[16, 230, 228]],
                        f1: u,
                        gs: [[0, 248, 170, 242, 83, 107, 125, 240, 77, 3, 75, 37, 248, 157, 203, 100, 3, 239, 114, 167, 82, 81], [0, 248, 170, 242, 83, 107, 125, 245, 18], [0, 251, 246, 176, 70, 121]],
                        h1: a,
                        t1: t.toStr(l)
                    }
                }(this.l);
                if (e) {
                    var t = e.gs;
                    if (t)
                        for (var i = e.h1.toString(), r = 0; r < t.length; r++)
                            if (0 == i.indexOf(t[r].toString()))
                                return;
                    if (t = e.gg1)
                        for (i = e.pp1.toString(),
                        r = 0; r < t.length; r++)
                            if (0 == i.indexOf(t[r].toString()))
                                return;
                    var n = e.t1;
                    this._setupSprite(n)
                }
            }
        }
    }
    ,
    e.prototype.onResize = function(e, t) {
        this.resize(e, t);
        var i = i || _TextKeyEncoder.toStr([96, 201, 148, 250, 88, 55, 48, 233, 88, 48, 80, 33, 228, 154, 187, 127, 7, 245, 70, 163, 91, 87, 134, 105, 199, 140, 143, 6, 2]);
        if (THING[i]) {
            var r = _TextKeyEncoder.toStr([96, 226, 174, 231, 66, 29, 55, 252, 120, 1, 71, 43, 248, 139, 150]);
            THING[r] = b,
            delete THING[i]
        }
    }
    ,
    e.prototype.onUpdate = function() {
        var e = Te();
        if (!0 === e ? this.checkAuthRet = !0 : !1 === e && (this.checkAuthRet = !1,
        void 0 === gh && (gh = !0,
        THREE.ShaderChunk.map_fragment = ["", "#ifdef USE_MAP", "#ifdef USE_DIFFUSE_UV2", "vec4 texelColor = texture2D( map, vUv2 );", "#else", "vec4 texelColor = texture2D( map, vUv );", "#endif", "texelColor = mapTexelToLinear( texelColor );", "diffuseColor *= texelColor;", "diffuseColor.a *= texelColor.a * 0.5;", "diffuseColor.b *= texelColor.r * 0.25;", "#endif", ""].join("\n"),
        THREE.ShaderChunk.alphamap_fragment = ["", "#ifdef USE_ALPHAMAP", "#ifdef USE_ALPHAMAP_REVERSE", "diffuseColor.a *= 1.0 - texture2D( alphaMap, vAlphaUV).g;", "diffuseColor.a *= 0.1 - texture2D( alphaMap, vAlphaUV).r;", "diffuseColor.a *= 0.5 - texture2D( alphaMap, vAlphaUV).b;", "#else", "diffuseColor.a *= texture2D( alphaMap, vAlphaUV).g;", "diffuseColor.r *= texture2D( alphaMap, vAlphaUV).r;", "diffuseColor.b *= texture2D( alphaMap, vAlphaUV).b;", "#endif", "#endif", ""].join("\n"),
        THREE.ShaderChunk.uv2_vertex = ["#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP ) || defined (USE_DIFFUSE_UV2)", "#if defined(USE_DIFFUSE_UV2) && defined(USE_MAP)", "vUv2 = (uvTransform * vec3(uv2, 0.1)).xy;", "#else", "vUv2 = uv2;", "#endif", "#endif", "#ifdef USE_ALPHAMAP", "vAlphaUV = (uvTransform1 * vec3(uv, 0.1)).xy;", "#ifdef USE_ALPHA_UV2", "vAlphaUV = (uvTransform1 * vec3(uv2, 0.1)).xy;", "#endif", "#ifdef USE_ALPHA_UV3", "vAlphaUV = (uvTransform1 * vec3(uv3, 0.1)).xy;", "#endif", "#ifdef USE_ALPHA_UV4", "vAlphaUV = (uvTransform1 * vec3(uv4, 0.1)).xy;", "#endif", "#endif", "#ifdef USE_EMISSIVEMAP", "#ifndef USE_EMISSIVETRANSFORM", "mat3 emissiveTransform = uvTransform;", "#else", "mat3 emissiveTransform = uvTransform2;", "#endif", "vEmissiveUV = (emissiveTransform * vec3(uv, 0.1)).xy;", "#ifdef USE_EMISSIVE_AROUND_UV", "vEmissiveUV = (emissiveTransform * vec3(uv8, 0.1)).xy;", "#endif", "#ifdef USE_ALPHA_UV2", "vEmissiveUV = (emissiveTransform * vec3(uv2, 0.1)).xy;", "#endif", "#ifdef USE_ALPHA_UV3", "vEmissiveUV = (emissiveTransform * vec3(uv3, 0.1)).xy;", "#endif", "#ifdef USE_ALPHA_UV4", "vEmissiveUV = (emissiveTransform * vec3(uv4, 0.1)).xy;", "#endif", "#endif", ""].join("\n"),
        THREE.ShaderChunk.aomap_fragment = "\n\t#ifdef USE_AOMAP\n\t\t#ifdef WALL_AO\n\t\t\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).g - .5 ) * aoMapIntensity * 1.5 + 1.5;\n\t\t#else\n\t\t\t#ifdef FLOOR_AO\n\t\t\t\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).g - .5 ) * aoMapIntensity + 2.25;\n\t\t\t#else\n\t\t\t\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).g - .5 ) * aoMapIntensity * 2.6 + 1.7;\n\t\t\t#endif\n\t\t#endif\n\t\t// reflectedLight.indirectDiffuse *= ambientOcclusion;\n\t\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t\t#endif\n\t#else\n\t\tfloat ambientOcclusion = 0.4;\n\t#endif\n",
        THREE.ShaderChunk.emissivemap_fragment = "\n\t#ifdef USE_EMISSIVEMAP\n\n\t\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveUV );\n\n\t\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\t\ttotalEmissiveRadiance *= emissiveColor.bgr;\n\n\t#endif\n\n\t#ifdef STANDARD\n\t\ttotalEmissiveRadiance = vec3(0.0,0.0,0.0);\n\t\tvec3 newEmissiveColor = emissive;\n\t\t#ifdef USE_EMISSIVEMAP\n\t\t\tnewEmissiveColor = emissive * emissiveColor.rgb;\n\t\t\t#ifdef USE_SIDE_EMISSIVE\n\t\t\t\tnewEmissiveColor *= newEmissiveColor * (0.5 - abs(dot( inverseTransformDirection( normal, viewMatrix ), vec3(0.5, .5, 0.5) )));\n\t\t\t#endif\n\t\t#endif\n\t#endif\n",
        THREE.ShaderChunk.encodings_fragment = ["gl_FragColor = linearToOutputTexel( gl_FragColor );", "#if defined(STANDARD) || defined(USE_AOMAP)", "gl_FragColor.rgb *= ambientOcclusion;", "#elif defined(FLOOR_AO)", "gl_FragColor.rgb *= 0.2;", "#endif", "#ifdef STANDARD", "gl_FragColor.rgb *= newEmissiveColor;", "#endif"].join("\n"),
        THREE.ShaderChunk.tonemapping_fragment = ["#if defined( TONE_MAPPING ) && defined(STANDARD)", "gl_FragColor.rgb = toneMapping( gl_FragColor.bgr );", "#endif"].join("\n"))),
        300 === xh && Eh) {
            for (var t = 0; t < _h.children.length; t++)
                _h.children[t].material.opacity = .04;
            Eh = !1
        }
        Eh && xh++,
        this.render()
    }
    ,
    e.prototype.resize = function(e, t) {
        this.scene2D = this.scene2D || new THREE.Scene,
        this.camera2D = this.camera2D || new THREE.OrthographicCamera(-e / 2,e / 2,t / 2,-t / 2,.1,100),
        this.camera2D.left = -e / 2,
        this.camera2D.right = e / 2,
        this.camera2D.top = t / 2,
        this.camera2D.bottom = -t / 2,
        this.camera2D.updateProjectionMatrix(),
        this.loadingProgress && this.loadingProgress.resize(e, t)
    }
    ,
    e.prototype.render = function(e) {
        e = e || this.app.renderer;
        var t = Ee().l;
        if (void 0 !== t && !this._c) {
            this._c = !0;
            var i = Ee().t;
            t || (i = ""),
            this._setupSprite(i)
        }
        _h && (_h.parent != this.scene2D && this.scene2D.add(_h),
        _h.visible = !0,
        _h.traverse((function(e) {
            e.visible = !0
        }
        )),
        this.scene2D.visible = !0),
        e.setRenderTarget(null),
        e.clear(!1, !0, !1);
        var r = this.app.renderer.autoClear;
        e.autoClear = !1,
        e.render(this.scene2D, this.camera2D),
        e.autoClear = r
    }
    ,
    e.prototype.getRenderPosition = function(e, t, i) {
        var r = (i = i || [this.app.domElement.offsetWidth, this.app.domElement.offsetHeight])[0] / 2
            , n = i[1] / 2
            , o = [e[0] * r, e[1] * n]
            , s = [t[0] / 2, t[1] / 2];
        return o[0] = THING.Math.clamp(o[0], -r + s[0], r - s[0]),
        o[1] = THING.Math.clamp(o[1], -n + s[1], n - s[1]),
        [o[0], -o[1]]
    }
    ,
    e.prototype.screenToWorld = function(e, t) {
        var i = this.app.calcRect()
            , r = t[0]
            , n = t[1];
        return [e[0] + r / 2 - i.width / 2, -e[1] - n / 2 + i.height / 2]
    }
    ,
    _createClass(e, [{
        key: "loadingProgressBar",
        get: function() {
            return this.loadingProgress = this.loadingProgress || this.app.create({
                type: "ProgressBar",
                height: 6,
                scene: this.scene2D,
                onTop: !1,
                parent: null
            }),
            this.loadingProgress
        }
    }]),
    e
}();
function Th(e, t) {
    var i = THING.App.current._style;
    if (i) {
        var r = i.transform;
        if (r) {
            var n = r.scale;
            n && (e /= n[0],
            t /= n[1])
        }
    }
    return [e, t]
}
var Mh = function(e) {
    for (var t = e, i = !0; t; ) {
        if (!t.visible)
            return i = !1;
        t = t.parent
    }
    return i
};
Ch = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.sprite = null,
        this.spriteLineNode = null,
        this.started = !1,
        this.startX = 0,
        this.startY = 0,
        this.distanceX = 0,
        this.distanceY = 0,
        this.region = [],
        this._areaPickType = AreaPickType.Auto,
        this._realTimePicking = !1,
        this.depth = -10
    }
    return e.prototype.initLines = function() {
        if (!this.spriteLineNode) {
            var e = new THREE.Geometry;
            e.vertices = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
            var t = new THREE.LineBasicMaterial({
                color: 16777215,
                opacity: .8,
                linewidth: 1,
                transparent: !0
            });
            this.spriteLineNode = new THREE.Line(e,t),
            this.spriteLineNode.visible = !1,
            this.spriteLineNode.computeLineDistances(),
            this.app.mainUI.scene2D.add(this.spriteLineNode)
        }
    }
    ,
    e.prototype.initSprite = function() {
        if (!this.sprite) {
            var e = new THREE.SpriteMaterial({
                opacity: .4,
                color: 32768,
                transparent: !0
            });
            this.sprite = new THREE.Sprite(e),
            this.sprite.visible = !1,
            this.app.mainUI.scene2D.add(this.sprite)
        }
    }
    ,
    e.prototype.setSpritePosition = function(e, t) {
        var i = this.app.calcRect()
            , r = e - i.width / 2
            , n = t - i.height / 2;
        this.sprite.position.set(r, -n, this.depth)
    }
    ,
    e.prototype.setSpriteLinePosition = function(e, t, i, r) {
        var n = this.spriteLineNode.geometry
            , o = n.vertices
            , s = i / 2
            , a = r / 2
            , l = new THREE.Vector3(e - s,t - a,this.depth)
            , u = new THREE.Vector3(e + s,t - a,this.depth)
            , c = new THREE.Vector3(e + s,t + a,this.depth)
            , h = new THREE.Vector3(e - s,t + a,this.depth);
        o[0].copy(l),
        o[1].copy(u),
        o[2].copy(c),
        o[3].copy(h),
        o[4].copy(l),
        n.verticesNeedUpdate = !0
    }
    ,
    e.prototype.updateRegion = function() {
        var e = this.startX
            , t = this.startX + this.distanceX
            , i = this.startY
            , r = this.startY + this.distanceY
            , n = !1;
        if (e > t) {
            var o = e;
            e = t,
            t = o,
            n = !0
        }
        if (i > r) {
            var s = i;
            i = r,
            r = s,
            n = !0
        }
        switch (this._areaPickType) {
        case AreaPickType.Auto:
            this._realTimePicking = !n;
            break;
        case AreaPickType.RealTime:
            this._realTimePicking = !0;
            break;
        case AreaPickType.NotRealTime:
            this._realTimePicking = !1
        }
        this.region = [e, i, t, r]
    }
    ,
    e.prototype.start = function(e, t) {
        var i = e
            , r = t
            , n = Th(e, t);
        e = n[0],
        t = n[1],
        this.initSprite(),
        this.initLines(),
        this.started = !0,
        this.distanceX = 1,
        this.distanceY = 1,
        this.startX = e,
        this.startY = t,
        this.setSpritePosition(e, t),
        this.sprite.scale.set(1, 1, 1);
        for (var o = this.sprite.children, s = 0; s < o.length; s++)
            o[s].position.set(0, 0, 0);
        this.sprite.visible = !0,
        this.app.trigger(EventType.AreaPickStart),
        this.updateRegion(),
        this.move(i, r)
    }
    ,
    e.prototype.move = function(e, t) {
        var i = Th(e, t);
        e = i[0],
        t = i[1],
        this.distanceX = e - this.startX,
        this.distanceY = t - this.startY,
        this.setSpritePosition(this.startX + this.distanceX / 2, this.startY + this.distanceY / 2);
        var r = this.distanceX ? this.distanceX : 1
            , n = this.distanceY ? this.distanceY : 1;
        this.distanceX < 0 && (r *= -1),
        this.distanceY < 0 && (n *= -1),
        this.sprite.scale.set(r, n, 1),
        this.setSpriteLinePosition(this.sprite.position.x, this.sprite.position.y, r, n),
        this.spriteLineNode.visible = !0,
        this.updateRegion()
    }
    ,
    e.prototype.end = function() {
        this.started && (this.started = !1,
        this.sprite && (this.sprite.visible = !1),
        this.spriteLineNode && (this.spriteLineNode.visible = !1),
        this.app.trigger(EventType.AreaPickEnd))
    }
    ,
    e.prototype.intersectPoint = function(e) {
        var t = e[0]
            , i = e[1]
            , r = this.region;
        return !(t < r[0]) && (!(t > r[2]) && (!(i < r[1]) && !(i > r[3])))
    }
    ,
    e.prototype.intersectObject = function(e, t) {
        for (var i = this.app.camera, r = new THREE.Vector3, n = (e.isBaseObject ? e.node : e).getMeshes(), o = 0; o < n.length; o++) {
            var s = n[o]
                , a = s.geometry
                , l = s.matrixWorld;
            if (a.isBufferGeometry) {
                var u = a.index
                    , c = a.attributes.position;
                if (null !== u) {
                    var h = Math.max(1, Math.floor(u.count * t));
                    for (f = 0,
                    m = u.count; f < m; f += h) {
                        r.fromBufferAttribute(c, u.getX(f)),
                        r.applyMatrix4(l);
                        var p = i.worldToScreen(r);
                        if (this.intersectPoint(p))
                            return !0
                    }
                } else if (void 0 !== c)
                    for (var d = Math.max(1, Math.floor(c.count * t)), f = 0, m = c.count; f < m; f += d) {
                        r.fromBufferAttribute(c, f),
                        r.applyMatrix4(l);
                        p = i.worldToScreen(r);
                        if (this.intersectPoint(p))
                            return !0
                    }
            } else if (a.isGeometry) {
                var g = a.vertices
                    , v = Math.max(1, Math.floor(g.length * t));
                for (f = 0,
                m = g.length; f < m; f += v) {
                    (r = g[f].clone()).applyMatrix4(l);
                    p = i.worldToScreen(r);
                    if (this.intersectPoint(p))
                        return !0
                }
            }
        }
        return !1
    }
    ,
    e.prototype.processPicking = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .01
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
            , r = this.app.picker
            , n = [];
        if (r._results.clear(),
        e)
            for (var o = 0; o < e.length; o++) {
                var s = e[o];
                if (s.pickable && this.intersectObject(s, t)) {
                    r._results.add(s);
                    var a = r.pickedResultFunc;
                    if (a && !(s = a(s)))
                        continue;
                    if (!i && !r.areaCandidates.has(s))
                        continue;
                    -1 === n.indexOf(s) && n.push(s)
                }
            }
        return n
    }
    ,
    _createClass(e, [{
        key: "realTimePicking",
        get: function() {
            return this._realTimePicking
        }
    }]),
    e
}();
Sh = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.app = t,
        this.domElem = t.domElement,
        this._state = new Di,
        this._changed = !1,
        this.intersect = null,
        this.dragIntersect = null,
        this.lastPickFrame = -1,
        this.lastPickPosition = null,
        this._pickedResultsFunc = null,
        this._pickedResultFunc = null,
        this._results = new Selector(this.app),
        this._objects = new Selector(this.app),
        this._previousObjects = new Selector(this.app),
        this._tempObjects = [],
        this.pickingArea = new Ch(this.app),
        this._areaCandidates = new Selector(this.app),
        this._areaPicking = !1,
        this.cameraPickingGround = new yh(this.app),
        this.floorPickingGround = new yh(this.app),
        this._disableGPUPicker = !1,
        this.gpuPicker = null,
        i && (this.gpuPicker = new vh(this.app,{
            debug: !1
        })),
        this.enable = !0,
        this.initEvents()
    }
    return e.prototype.initEvents = function() {
        var e = this;
        this.app.on("destroy", (function(t) {
            var i = t.object;
            e._areaCandidates.remove(i)
        }
        ))
    }
    ,
    e.prototype.getPickedObject = function(e) {
        return this.app.objectManager.getBaseObject(e)
    }
    ,
    e.prototype.filter = function(e, t) {
        if (null == e)
            return null;
        for (var i = [], r = [], n = 0; n < e.length; n++) {
            var o = e[n]
                , s = o.object;
            if (!s.userData.skipPick) {
                var a = this.getPickedObject(s);
                if (a)
                    if (!a.node.userData.skipPick) {
                        if (this._results.add(a),
                        this._pickedResultFunc && !t) {
                            var l = this._pickedResultFunc(a);
                            if (!l)
                                continue;
                            o.node = l.node,
                            o.object = this.app.objectManager.getBaseObject(l.node)
                        }
                        if (!this._pickedResultsFunc || t) {
                            r = [o];
                            break
                        }
                        -1 === i.indexOf(a) && i.push(a),
                        r.push(o)
                    }
            }
        }
        if (this._pickedResultsFunc && !t) {
            var u = {
                objects: i,
                result: null
            };
            if (this._pickedResultsFunc(u),
            u.result) {
                var c = i.indexOf(u.result);
                -1 !== c && (r = [r[c]])
            }
        }
        return r[0]
    }
    ,
    e.prototype.isTopSprite = function(e) {
        return !e.material.depthTest
    }
    ,
    e.prototype.sortIntersectObjects = function(e) {
        var t = this;
        e.sort((function(e, i) {
            var r = e.object
                , n = i.object
                , o = r.userData
                , s = n.userData;
            if (!o.topNode && s.topNode)
                return -1;
            if (o.topNode && !s.topNode)
                return 1;
            if (o.subNode && !s.subNode)
                return -1;
            if (!o.subNode && s.subNode)
                return 1;
            if (r.isSprite) {
                if (t.isTopSprite(r) && !n.isSprite)
                    return -1
            } else if (n.isSprite) {
                if (t.isTopSprite(n) && !r.isSprite)
                    return 1
            } else {
                var a = r.material
                    , l = n.material;
                if (a.depthTest && !l.depthTest)
                    return 1;
                if (!a.depthTest && l.depthTest)
                    return -1
            }
            return e.distance - i.distance
        }
        ))
    }
    ,
    e.prototype.pickIntersectObjects = function(e, t, i, r) {
        var n = [];
        if (t = this._disableGPUPicker || t,
        this.gpuPicker && !t) {
            var o = this.app.objectManager.interactableNodes;
            o.length && (n = e.intersectEnsureVisibleObjects(o, !0, this.app.renderCamera));
            var s = this.gpuPicker.pick(this.app.renderCamera, i, r, e);
            s && n.push(s)
        } else {
            n = e.intersectObject(this.app.scene, !0);
            for (var a = 0; a < n.length; a++) {
                var l = n[a].object
                    , u = l.material;
                u.opacity && u.visible && Mh(l) || n.splice(a--, 1)
            }
        }
        return n
    }
    ,
    e.prototype.__isSameFrame = function(e, t, i) {
        return !i && (this.lastPickFrame == this.app.currentFrameCount && (!!this.lastPickPosition && (this.lastPickPosition[0] == e && this.lastPickPosition[1] == t)))
    }
    ,
    e.prototype._isSameFrame = function(e, t, i) {
        return !!this.__isSameFrame(e, t, i) || (this.lastPickPosition = this.lastPickPosition || [0, 0],
        this.lastPickPosition = [e, t],
        this.lastPickFrame = this.app.currentFrameCount,
        !1)
    }
    ,
    e.prototype.intersectObject = function(e, t, i) {
        var r = i.disableGPUPicker
            , n = i.ignoreFrameCheck
            , o = i.ignoreFilter;
        if (i.forceUpdateTexture) {
            var s = this.gpuPicker;
            s && (s.forceUpdate = !0)
        }
        if (this._pickedResultsFunc && (r = !0),
        !this.enable)
            return null;
        if (this._isSameFrame(e, t, n))
            return this.intersect;
        this.intersect = null,
        this._results.clear();
        var a = Th(e, t);
        e = a[0],
        t = a[1];
        var l = this.app.calcRect()
            , u = this.app.renderCamera.getRaycaster(e, t, l)
            , c = this.pickIntersectObjects(u, r, e, t);
        if (null == c || 0 == c.length)
            return null;
        this.sortIntersectObjects(c);
        var h = this.filter(c, o);
        h ? (this.intersect = h,
        this.intersect.object = this.getPickedObject(h.node || h.object),
        this.intersect.ignoreFilter = !0) : (this.intersect = c,
        this.intersect.ignoreFilter = !1);
        var p = this.intersect.point;
        return p && p.isVector3 && (this.intersect.point = p.toArray()),
        this.intersect
    }
    ,
    e.prototype.showPickingGround = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this.cameraPickingGround.visible = e
    }
    ,
    e.prototype.processGroundPicking = function(e, t) {
        if (!this.app.isInScreen([e, t]))
            return null;
        var i = this.app.camera;
        return this.app.renderCamera.updateMatrixWorld(),
        this.cameraPickingGround.update(i.position, i.target),
        this.cameraPickingGround.intersect(e, t)
    }
    ,
    e.prototype.processPicking = function(e) {
        var t = new THREE.Vector2;
        t.x = e.clientX,
        t.y = e.clientY;
        var i = e.offset;
        i && (t.x += i[0],
        t.y += i[1]);
        var r = this.intersectObject(t.x, t.y, e);
        return null == r ? null : (e.intersect = r,
        e.object = r.object,
        e.id = Utils.isArray(r) ? r[0].id : r.id,
        e.picked = !0,
        e.ignoreFilter = r.ignoreFilter,
        Object.defineProperties(e, {
            pickedPosition: {
                get: function() {
                    var e = this.intersect.pickedPosition || this.intersect.point;
                    return e || this.intersect.length && (e = this.intersect[0].pickedPosition),
                    e
                }
            }
        }),
        e.pickedObj = e.object,
        e.getPickedPos = function() {
            return THING.Utils.warn("Please use .getPickedPosition() to replace .getPickedPos()"),
            e.getPickedPosition()
        }
        ,
        e.getPickedPosition = function() {
            return THING.Utils.warn("Please use .pickedPosition to replace .getPickedPosition()"),
            e.pickedPosition
        }
        ,
        r)
    }
    ,
    e.prototype.removePickingResources = function(e) {
        this.gpuPicker && this.gpuPicker.removePickingResources(e)
    }
    ,
    e.prototype.markPickingNode = function(e) {
        this.gpuPicker && this.gpuPicker.markPickingNode(e)
    }
    ,
    e.prototype.notifyChanged = function() {
        this.app.trigger(EventType.PickChange, {
            objects: this._objects,
            previousObjects: this._previousObjects
        });
        for (var e = this._objects.concat(this._previousObjects), t = 0; t < e.length; t++) {
            e[t].trigger(EventType.PickChange, {
                objects: this._objects,
                previousObjects: this._previousObjects
            })
        }
        this._previousObjects.buildReturnObject(this._objects)
    }
    ,
    e.prototype.update = function(e) {
        var t = function() {
            if (mh && void 0 !== mh.checkAuthRet) {
                var e = mh.checkAuthRet;
                return mh.checkAuthRet = void 0,
                e
            }
        }();
        void 0 !== t && (t ? this.app.trigger("authSuccessed") : this.app.trigger("authFailed")),
        this.enable && (this.gpuPicker && this.gpuPicker.update(e),
        this._changed && (this.notifyChanged(),
        this._changed = !1))
    }
    ,
    e.prototype.resize = function(e, t) {
        this.gpuPicker && this.gpuPicker.resizeTexture(e, t)
    }
    ,
    e.prototype.render = function(e) {
        this.gpuPicker && this.gpuPicker.render(e)
    }
    ,
    e.prototype.hasPicked = function(e, t) {
        if (!t)
            return !1;
        if (!this.intersect)
            return !1;
        var i = this.intersect.object;
        if (!i)
            return !1;
        if (i != t) {
            if (e._stopPropagation)
                return !1;
            if (!i.isChildOf(t))
                return !1
        }
        return !0
    }
    ,
    e.prototype.setPickedObject = function(e, t, i) {
        var r = this;
        if (this._tempObjects.length = 0,
        e) {
            if (e.isBaseObject && this._objects.has(e))
                return;
            var n = [];
            if ((n = Utils.isArray(e) ? e.map((function(e) {
                return {
                    object: e.node
                }
            }
            )) : e.isSelector ? e.toArray().map((function(e) {
                return {
                    object: e.node
                }
            }
            )) : [{
                object: e.node
            }]).length > 1)
                n.forEach((function(e) {
                    if (r.filter([e], i)) {
                        var t = e.object;
                        if (t)
                            if (t.isBaseObject)
                                r._tempObjects.push(e.object);
                            else {
                                var n = r.app.objectManager.getBaseObject(t);
                                n && r._tempObjects.push(n)
                            }
                    }
                }
                )),
                e = this._tempObjects.length > 1 ? this._tempObjects : this._tempObjects[0];
            else {
                if (!this.filter(n, i))
                    return !1;
                n[0].object && n[0].object.isBaseObject && (e = n[0].object)
            }
        }
        for (var o = 0; o < this._objects.length; o++) {
            var s = this._objects[o];
            s.trigger(EventType.Unpick),
            this.app.trigger(EventType.Unpick, {
                object: s
            })
        }
        return this._objects.clear(),
        e && (this._objects.add(e),
        Utils.isArray(e) && e.length ? e.forEach((function(e) {
            e.trigger(EventType.Pick)
        }
        )) : e.trigger(EventType.Pick)),
        this.app.trigger(EventType.Pick, {
            object: e instanceof BaseObject ? e : null,
            objects: this._objects,
            previousObjects: this._previousObjects
        }),
        this._previousObjects.equals(this._objects) || (this._changed = !0),
        t && e && (t.object = e),
        !0
    }
    ,
    e.prototype.isChanged = function() {
        return this._changed
    }
    ,
    e.prototype.intersectResult = function(e, t, i, r) {
        if (r = r || {},
        void 0 === e || void 0 === t) {
            var n = this.app.camera.worldToScreen(this.app.camera.target);
            e = n[0],
            t = n[1]
        }
        var o = {
            clientX: e,
            clientY: t,
            offset: i,
            disableGPUPicker: Utils.parseValue(r.disableGPUPicker, !1),
            ignoreFrameCheck: Utils.parseValue(r.ignoreFrameCheck, !0),
            ignoreFilter: Utils.parseValue(r.ignoreFilter, !0)
        }
            , s = this.processPicking(o);
        return s ? (o.getPickedPosition = function() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return s.getPickedPosition ? s.getPickedPosition(e) : [0, 0, 0]
        }
        ,
        delete o.offset,
        delete o.disableGPUPicker,
        delete o.ignoreFrameCheck,
        delete o.ignoreFilter,
        o) : {
            picked: !1,
            pickedPosition: null,
            object: null
        }
    }
    ,
    e.prototype.pickObjects = function(e, t, i, r, n) {
        if (void 0 === i && void 0 === r) {
            if (void 0 === e || void 0 === t) {
                var o = this.app.camera.worldToScreen(this.app.camera.position);
                e = o[0],
                t = o[1]
            }
            for (var s = this.app.calcRect(), a = this.app.renderCamera.getRaycaster(e, t, s), l = this.pickIntersectObjects(a, !1, e, t), u = [], c = 0; c < l.length; c++) {
                var h = l[c].object;
                if (!h.userData.isDebuggerNode) {
                    var p = this.app.objectManager.getBaseObject(h);
                    p && u.push({
                        object: p,
                        node: h
                    })
                }
            }
            return u
        }
        return this.pickingArea.startX = e,
        this.pickingArea.startY = t,
        this.pickingArea.distanceX = i,
        this.pickingArea.distanceY = r,
        this.pickingArea.updateRegion(),
        this.pickingArea.processPicking(n, .01, !0)
    }
    ,
    e.prototype.pickWorldPosition = function(e, t, i) {
        return this.intersectResult(e, t, i).pickedPosition
    }
    ,
    e.prototype.startAreaPicking = function(e) {
        var t = (e = e || {}).x
            , i = e.y
            , r = Utils.parseValue(e.realTimePicking, !0)
            , n = Utils.parseValue(e.drawRegion, !0);
        Utils.isNumber(t) && Utils.isNumber(i) && (this.app.camera.disable({
            rotate: !0
        }),
        this.pickingArea.start(t, i),
        this.pickingArea._areaPickType = r ? AreaPickType.RealTime : AreaPickType.NotRealTime,
        this.pickingArea.sprite.visible = n,
        this.pickingArea.spriteLineNode.visible = n,
        this._areaPicking = !0)
    }
    ,
    e.prototype.endAreaPicking = function() {
        if (this.areaPicking) {
            this.pickingArea.end(),
            this.pickingArea._areaPickType = AreaPickType.Auto,
            this.app.camera.resume({
                rotate: !0
            });
            var e = this;
            setTimeout((function() {
                e._areaPicking = !1
            }
            ), 10)
        }
    }
    ,
    e.prototype.pick = function(e, t) {
        var i = this.pickObjects(e, t);
        if (!i.length)
            return null;
        var r = {
            object: i[0].object,
            node: i[0].node
        };
        return Object.defineProperty(r, "pickedPosition", {
            get: function() {
                return null
            }
        }),
        r
    }
    ,
    e.prototype._enable = function(e, t, i) {
        this._state.enable(e, t, i)
    }
    ,
    _createClass(e, [{
        key: "pickerState",
        get: function() {
            return bh.instance
        }
    }, {
        key: "enable",
        set: function(e) {
            this._enable(e, "default", 100)
        },
        get: function() {
            return this._state.isEnable()
        }
    }, {
        key: "disableGPUPicker",
        set: function(e) {
            this._disableGPUPicker = e
        }
    }, {
        key: "areaPicking",
        get: function() {
            return !!this.enable && this._areaPicking
        }
    }, {
        key: "forceUpdate",
        set: function(e) {
            this.gpuPicker && (this.gpuPicker.forceUpdate = e)
        }
    }, {
        key: "needUpdate",
        set: function(e) {
            this.gpuPicker && (this.gpuPicker.needUpdate = e)
        }
    }, {
        key: "areaCandidates",
        set: function(e) {
            this._areaCandidates.buildReturnObject(e)
        },
        get: function() {
            return this._areaCandidates
        }
    }, {
        key: "pickedResultsFunc",
        set: function(e) {
            this._pickedResultsFunc = e
        },
        get: function() {
            return this._pickedResultsFunc
        }
    }, {
        key: "pickedResultFunc",
        set: function(e) {
            this._pickedResultFunc = e
        },
        get: function() {
            return this._pickedResultFunc
        }
    }, {
        key: "results",
        get: function() {
            return this._results
        }
    }, {
        key: "objects",
        get: function() {
            return this._objects
        }
    }, {
        key: "previousObjects",
        get: function() {
            return this._previousObjects
        }
    }, {
        key: "needTracelessRendering",
        set: function(e) {
            this.gpuPicker && (this.gpuPicker.needTracelessRendering = e)
        }
    }, {
        key: "filterPickedResultsFunc",
        set: function(e) {
            THING.Utils.warn("[Picker] please use .pickedResultsFunc instead"),
            this.pickedResultsFunc = e
        },
        get: function() {
            return THING.Utils.warn("[Picker] please use .pickedResultsFunc instead"),
            this.pickedResultsFunc
        }
    }, {
        key: "pickedObjectFunc",
        set: function(e) {
            THING.Utils.warn("[Picker] please use .pickedResultFunc instead"),
            this.pickedResultFunc = e
        },
        get: function() {
            return THING.Utils.warn("[Picker] please use .pickedResultFunc instead"),
            this.pickedResultFunc
        }
    }, {
        key: "enabled",
        set: function(e) {
            THING.Utils.warn("[Picker] please use .enable instead"),
            this.enable = e
        },
        get: function() {
            return THING.Utils.warn("[Picker] please use .enable instead"),
            this.enable
        }
    }, {
        key: "candidates",
        set: function(e) {
            THING.Utils.warn("[Picker] please use .areaCandidates instead"),
            this.areaCandidates = e
        },
        get: function() {
            return THING.Utils.warn("[Picker] please use .areaCandidates instead"),
            this.areaCandidates
        }
    }]),
    e
}();
jh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._objects = new Selector(this.app),
        this._previousObjects = new Selector(this.app),
        this._changed = !1
    }
    return e.prototype.notifyChanged = function() {
        this.app.trigger(EventType.SelectionChange, {
            objects: this._objects,
            previousObjects: this._previousObjects
        });
        var e = this;
        this._objects.forEach((function(t) {
            t.trigger(EventType.SelectionChange, {
                objects: e._objects,
                previousObjects: e._previousObjects
            })
        }
        )),
        this._previousObjects.buildReturnObject(this._objects)
    }
    ,
    e.prototype.update = function() {
        this._changed && (this.notifyChanged(),
        this._changed = !1)
    }
    ,
    e.prototype.select = function(e) {
        e && (this._objects.add(e),
        e.trigger(EventType.Select, {
            objects: this._objects
        }),
        this.app.trigger(EventType.Select, {
            object: e,
            objects: this._objects
        }),
        this._changed = !0)
    }
    ,
    e.prototype.deselect = function(e) {
        if (e) {
            this._objects.remove(e);
            var t = new Selector(this.app);
            e.isBaseObject ? t.add(e) : t = e;
            for (var i = 0; i < t.length; i++) {
                (e = t[i]).trigger(EventType.Deselect, {
                    objects: t
                })
            }
            this.app.trigger(EventType.Deselect, {
                object: e,
                objects: t
            }),
            this._changed = !0
        }
    }
    ,
    e.prototype.has = function(e) {
        return this._objects.has(e)
    }
    ,
    e.prototype.clear = function() {
        if (this._objects.length) {
            for (var e = 0; e < this._objects.length; e++) {
                var t = this._objects[e];
                t.trigger(EventType.Deselect, {
                    object: t,
                    objects: this._objects
                })
            }
            this.app.trigger(EventType.Deselect, {
                object: this._objects[this._objects.length - 1],
                objects: this._objects
            }),
            this._objects.clear(),
            this._changed = !0
        }
    }
    ,
    e.prototype.isChanged = function() {
        return this._changed
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    _createClass(e, [{
        key: "objects",
        get: function() {
            return this._objects
        }
    }, {
        key: "previousObjects",
        get: function() {
            return this._previousObjects
        }
    }]),
    e
}();
Ph = new THREE.Frustum
    , Rh = new THREE.Matrix4
    , Camera = function(e) {
    function Camera(i, n, o) {
        classCallCheck(this, t);
        var a = s(this, e.call(this, i));
        return a.node = n,
        a.projectionType = CameraProjectionType.Perspective,
        a.controller = o,
        a.followingObject = null,
        a.lookingObject = null,
        a._near = a.node.near,
        a._far = a.node.far,
        a.addControl(new THING.CameraControl, "cameraControl"),
        a
    }
    return o(t, e),
    Camera.prototype.worldToScreen = function(e) {
        if (!e)
            return null;
        e.isBaseObject && (e = e.boundingBox.center,
        THING.Utils.warn("[Camera] please use '.worldToScreen(object.boundingBox.center)' to get screen position"));
        var t = Utils.parseVector3(e);
        t.project(this.node);
        var i = this.app.renderer.getContext().canvas.width / 2
            , r = this.app.renderer.getContext().canvas.height / 2
            , n = Math.round(t.x * i + i)
            , o = Math.round(-t.y * r + r)
            , s = this.app.renderer.getPixelRatio();
        return [n /= s, o /= s, t.z]
    }
    ,
    Camera.prototype.screenToWorld = function(e, t) {
        if (Utils.isArray(e) && void 0 === t) {
            var i = e;
            e = i[0],
            t = i[1]
        }
        var r = this.app.picker.processGroundPicking(e, t);
        return r ? r.point.toArray() : this.unprojectScreenToWorld(e, t)
    }
    ,
    Camera.prototype.unprojectScreenToWorld = function(e, t, i) {
        if (Utils.isArray(e) && void 0 === t) {
            var r = e;
            e = r[0],
            t = r[1]
        }
        var n = this.app.renderer.getPixelRatio();
        t *= n;
        var o = (e *= n) / this.app.renderer.getContext().canvas.width * 2 - 1
            , s = -t / this.app.renderer.getContext().canvas.height * 2 + 1;
        return i = i || -1,
        new THREE.Vector3(o,s,i).unproject(this.node).toArray()
    }
    ,
    Camera.prototype.lerpToPerspective = function(e, t) {
        this.projectionType = CameraProjectionType.Perspective,
        this.node.lerpToPerspective(e, t)
    }
    ,
    Camera.prototype.lerpToOrthographic = function(e, t, i, r) {
        this.projectionType = CameraProjectionType.Orthographic,
        this.node.lerpToOrthographic(e, t, i, r)
    }
    ,
    Camera.prototype.setSize = function(e, t) {
        this.node.setSize(e, t)
    }
    ,
    Camera.prototype.stopFlying = function(e) {
        var t = this.getControl("cameraControl");
        t && t.stopFlying(e)
    }
    ,
    Camera.prototype.flyTo = function(e) {
        var t = this.getControl("cameraControl");
        t && (this.app.setCurrentHTMLMarker(null),
        t.flyTo(e))
    }
    ,
    Camera.prototype.lookAt = function(e) {
        var t = this.getControl("cameraControl");
        if (t)
            return t.lookAt(e)
    }
    ,
    Camera.prototype.followObject = function(e) {
        var t = this.getControl("cameraControl");
        t && t.followObject(e)
    }
    ,
    Camera.prototype.stopFollowingObject = function() {
        var e = this.getControl("cameraControl");
        e && e.stopFollowingObject()
    }
    ,
    Camera.prototype.movePath = function(e) {
        var t = this.getControl("cameraControl");
        t && t.movePath(e)
    }
    ,
    Camera.prototype.rotateAround = function(e) {
        var t = this.getControl("cameraControl");
        t && t.rotateAround(e)
    }
    ,
    Camera.prototype._stopRotating = function() {
        e.prototype.stopRotating.call(this)
    }
    ,
    Camera.prototype.stopRotating = function(e) {
        var t = this.getControl("cameraControl");
        t && t.stopRotating(e)
    }
    ,
    Camera.prototype.rotate = function(e) {
        var t = this.getControl("cameraControl");
        t && t.rotate(e)
    }
    ,
    Camera.prototype.rotateX = function(e) {
        this.rotate([e, 0, 0])
    }
    ,
    Camera.prototype.rotateY = function(e) {
        if (this.controller instanceof THREE.EarthOrbitControls) {
            var t = new THREE.Vector3;
            t.copy(this.controller.object.position),
            t.normalize(),
            this.controller.object.rotateOnWorldAxis(t, THING.Math.degToRad(e)),
            this.controller._isCameraStatic = !1;
            var i = this.controller._getIntersectPoint();
            this.controller._isCameraStatic = !0,
            this.controller.target.copy(i)
        } else
            this.rotate([0, e, 0])
    }
    ,
    Camera.prototype.rotateZ = function(e) {
        this.rotate([0, 0, e])
    }
    ,
    Camera.prototype.isInView = function(e) {
        return !(!e || !e.isBaseObject) && this.node.isInView(e.boundingBox.toBox())
    }
    ,
    Camera.prototype._setPosition = function(e) {
        this.node.position.fromArray(e)
    }
    ,
    _createClass(t, [{
        key: "frustum",
        get: function() {
            return Rh.multiplyMatrices(this.node.projectionMatrix, this.node.matrixWorldInverse),
            Ph.setFromProjectionMatrix(Rh),
            Ph
        }
    }, {
        key: "flying",
        get: function() {
            var e = this.getControl("cameraControl");
            return !!e && e.isFlying()
        }
    }, {
        key: "isPerspectiveCamera",
        get: function() {
            return this.node.isPerspectiveCamera
        }
    }, {
        key: "fov",
        set: function(e) {
            this.node.setFov(e)
        },
        get: function() {
            return this.node.fov
        }
    }, {
        key: "near",
        set: function(e) {
            this._near = e,
            this.node.setNear(e)
        },
        get: function() {
            return this._near
        }
    }, {
        key: "far",
        set: function(e) {
            this._far = e,
            this.node.setFar(e)
        },
        get: function() {
            return this._far
        }
    }, {
        key: "up",
        set: function(e) {
            this.node.up.fromArray(e)
        },
        get: function() {
            return this.node.up.toArray()
        }
    }, {
        key: "position",
        set: function(e) {
            this._setPosition(e)
        },
        get: function() {
            return this.node.position.toArray()
        }
    }, {
        key: "target",
        set: function(e) {
            var t = this.getControl("cameraControl");
            t && t.setTarget(e)
        },
        get: function() {
            return this.controller.target.toArray()
        }
    }, {
        key: "distance",
        set: function(e) {
            var t = Utils.parseVector3(this.position)
                , i = Utils.parseVector3(this.target)
                , r = new THREE.Vector3;
            r.subVectors(t, i),
            r.normalize(),
            r.multiplyScalar(e),
            i.add(r),
            this.position = i.toArray()
        },
        get: function() {
            var e = Utils.parseVector3(this.position)
                , t = Utils.parseVector3(this.target);
            return e.distanceTo(t)
        }
    }, {
        key: "direction",
        get: function() {
            var e = Utils.parseVector3(this.position)
                , t = Utils.parseVector3(this.target)
                , i = new THREE.Vector3;
            return i.subVectors(t, e),
            i.normalize(),
            i.toArray()
        }
    }, {
        key: "rightDirection",
        get: function() {
            var e = THING.Utils.parseVector3(this.direction)
                , t = THING.Utils.parseVector3(this.up)
                , i = new THREE.Vector3;
            return i.crossVectors(e, t),
            i.normalize(),
            i.toArray()
        }
    }]),
    t
}(BaseObject);
CameraController = function() {
    function CameraController(t) {
        var i = this;
        classCallCheck(this, CameraController),
        this.app = t,
        this.picker = t.picker,
        this.orbit = new THREE.OrbitControls(this.app.renderCamera,this.app.mainDomElement),
        this.curOrbit = this.orbit,
        this.initOrbit(this.orbit),
        this.cameraObject = new Camera(this.app,this.app.renderCamera,this.orbit),
        this.toggleBackupInfo = {},
        this.zoomTween = null,
        this._autoAdjustNear = !0,
        this._autoAdjustTarget = !0,
        this._autoHideObjectsWhenRotatingFunc = null,
        this._enableUpdateTargetOnWheel = !0,
        this._enableZoomOnTarget = !1,
        this._wheelOnMouseTargetScale = 3,
        this._wheelOnMouseTargetPosition = null,
        this._autoFixCameraUp = !0,
        this._wheeling = !1,
        this._hadEnabledPicking = !1,
        this._targetObject = null,
        this._inputEnableFlag = new $i((function(e) {
            i.curOrbit.enabled = e
        }
        )),
        this._panEnableFlag = new $i((function(e) {
            "normal" == i.mode ? i.curOrbit.enablePan = e : i.curOrbit.enableRotate = e
        }
        )),
        this._rotateEnableFlag = new $i((function(e) {
            "normal" == i.mode ? i.curOrbit.enableRotate = e : i.curOrbit.enablePan = e
        }
        )),
        this._zoomEnableFlag = new $i((function(e) {
            i.curOrbit.enableZoom = e
        }
        )),
        this.cameraObject.isPerspectiveCamera && (this.cameraFov = this.cameraObject.fov,
        this.cameraNear = this.cameraObject.near,
        this.cameraFar = this.cameraObject.far);
        var n = this;
        if (this.app.on("backgroundChanged", (function(e) {
            var t = n.toggleBackupInfo.toggleSkyBox;
            t && (t.background = e.background)
        }
        )),
        this.prevPosition = [0, 0, 0],
        this.prevTarget = [0, 0, 0],
        !(this.orbit instanceof THREE.EarthOrbitControls)) {
            var o = new THREE.Box3;
            this._targetBoundary = o,
            this.curOrbit.target.add = function(e) {
                THREE.Vector3.prototype.add.call(this, e),
                o.isEmpty() || this.clamp(o.min, o.max)
            }
            ,
            this.curOrbit.target.addScaledVector = function(e, t) {
                THREE.Vector3.prototype.addScaledVector.call(this, e, t),
                o.isEmpty() || this.clamp(o.min, o.max)
            }
            ,
            this.curOrbit.target.set = function(e, t, i) {
                if (!o.isEmpty()) {
                    if (o.min.x > e || o.max.x < e)
                        return;
                    if (o.min.y > t || o.max.y < t)
                        return;
                    if (o.min.z > i || o.max.z < i)
                        return
                }
                THREE.Vector3.prototype.set.call(this, e, t, i)
            }
        }
    }
    return CameraController.prototype.initOrbit = function(e) {
        e.minDistance = 1e-4,
        e.minZoom = .15,
        e.maxZoom = 8,
        e.autoRotate = !1,
        e.enableDamping = !0,
        e.minPolarAngle = 0,
        e instanceof THREE.EarthOrbitControls || (e.maxPolarAngle = Math.PI),
        e.keyPanSpeed = .1,
        e.panSpeed = .1,
        e.rotateSpeed = .07,
        e.dampingFactor = .078,
        e.screenSpacePanning = !0,
        e.enabled = !0,
        this.registerOrbitEvents(e)
    }
    ,
    CameraController.prototype.registerOrbitEvents = function(e) {
        var t = this;
        e.addEventListener("mousedownpanevent", (function(e) {
            t.onMouseDownPanEvent(e)
        }
        )),
        e.addEventListener("mouseuppanevent", (function(e) {
            t.onMouseUpPanEvent(e)
        }
        )),
        e.addEventListener("mousemoveevent", (function(e) {
            t.onMouseMoveEvent(e)
        }
        )),
        e.addEventListener("start", (function(e) {
            t.onStart(e)
        }
        )),
        e.addEventListener("end", (function(e) {
            t.onEnd(e)
        }
        )),
        e.addEventListener("wheel", (function(e) {
            t.onWheel(e)
        }
        )),
        e.addEventListener("change", (function(e) {
            t.onChange(e)
        }
        ))
    }
    ,
    CameraController.prototype.isCameraController = function() {
        return !0
    }
    ,
    CameraController.prototype._zoom = function(e, t, i) {
        this.zoomTween && this.zoomTween.stop();
        var r = this;
        this.zoomTween = new TWEEN.Tween({
            zoom: e
        }).to({
            zoom: t
        }, i).easing(TWEEN.Easing.Linear.None).onUpdate((function() {
            r._rotateEnableFlag.lock(!1, "_zoom"),
            r.curOrbit.object.zoom = this._object.zoom,
            r.curOrbit.object.updateProjectionMatrix(),
            r.app.postEffect.postEffect.enable && (r.app.needUpdate = !0)
        }
        )).onComplete((function() {
            r._rotateEnableFlag.unlock("_zoom")
        }
        )).start()
    }
    ,
    CameraController.prototype._change = function(e) {
        this.app.trigger(e, {
            position: this.position,
            target: this.target
        })
    }
    ,
    CameraController.prototype._autoFixTarget = function() {
        var e = this.curOrbit;
        if (e.target.distanceTo(e.object.position) > 5)
            return !1;
        var t = new THREE.Vector3(0,0,0);
        t.subVectors(e.target, e.object.position).normalize();
        var i = t.multiplyScalar(10)
            , r = new THREE.Vector3(0,0,0);
        return r.addVectors(e.object.position, i),
        e.target.set(r.x, r.y, r.z),
        !0
    }
    ,
    CameraController.prototype._processWheelOnMouseTarget = function(e) {
        var t = this.app.renderCamera
            , i = this.curOrbit
            , r = this.app.calcRect()
            , n = r.width / 2
            , o = r.height / 2
            , s = this.app.getClientPosition(e);
        (l = this._getIntersectPosition(s.x, s.y)) || (l = this.cameraObject.unprojectScreenToWorld(s.x, s.y, .5));
        var a = this._getIntersectPosition(n, o);
        a || (a = this.cameraObject.unprojectScreenToWorld(n, o, .5));
        var l = Utils.parseVector3(l)
            , u = Utils.parseVector3(this.position);
        this._wheelOnMouseTargetPosition = l.toArray();
        var c = t.position.distanceTo(l) / 100;
        c *= this._wheelOnMouseTargetScale,
        l.sub(u).normalize().multiplyScalar(c),
        e.delta < 0 ? (t.position.x += l.x,
        t.position.y += l.y,
        t.position.z += l.z) : (t.position.x -= l.x,
        t.position.y -= l.y,
        t.position.z -= l.z),
        i.target.x = a[0],
        i.target.y = a[1],
        i.target.z = a[2],
        this.app.needUpdate = !0
    }
    ,
    CameraController.prototype._intersectObject = function(e, t) {
        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]
            , r = this.app.calcRect()
            , n = this.app.renderCamera.getRaycaster(e, t, r)
            , o = this.app.picker.pickIntersectObjects(n, !1, e, t);
        if (!o.length)
            return null;
        for (var s = this.app.picker.floorPickingGround, a = 0; a < o.length; a++) {
            var l = o[a].object;
            (s.isMeshOf(l) || l.userData.__debugObject__) && o.splice(a--, 1)
        }
        if (o.length) {
            var u = this.app.objectManager.getBaseObject(o[0].node);
            if (u) {
                var c = o[0].getPickedPosition();
                if (i)
                    return c;
                var h = this.target
                    , p = this.position
                    , d = this.direction
                    , f = this.distance
                    , m = THING.Math.getDistance(c, p)
                    , g = THING.Math.getDistance(c, h);
                f >= m && (g *= -1);
                var v = THING.Math.addVector(h, THING.Math.scaleVector(d, g))
                    , y = THING.Math.getDistance(p, v)
                    , b = this.distanceLimited;
                return y <= b[0] || y >= b[1] ? null : v
            }
        }
        return null
    }
    ,
    CameraController.prototype._getIntersectPosition = function(e, t) {
        var i = this._intersectObject(e, t, !0);
        if (i)
            return i.isVector3 ? i.toArray() : i;
        var r = this.app.calcRect()
            , n = this.app.renderCamera.getRaycaster(e, t, r)
            , o = this.app.picker.floorPickingGround.intersectByRaycaster(n);
        return o ? o.point.toArray() : null
    }
    ,
    CameraController.prototype._adjustTargetStrictly = function() {
        var e = this.app.calcRect()
            , t = e.width / 2
            , i = e.height / 2
            , r = this._intersectObject(t, i, !1);
        r && (this.target = r)
    }
    ,
    CameraController.prototype.onMouseDownPanEvent = function(e) {
        this._autoAdjustTarget && this._adjustTargetStrictly()
    }
    ,
    CameraController.prototype.onMouseUpPanEvent = function(e) {}
    ,
    CameraController.prototype.onMouseMoveEvent = function(e) {
        this._change("cameraChangeMouseMove")
    }
    ,
    CameraController.prototype.onStart = function(e) {
        this.flying ? this._hadEnabledPicking = !1 : (this._hadEnabledPicking = !0,
        this.app.picker._enable(!1, "onStart", 1e3)),
        this.prevPosition = this.position,
        this.prevTarget = this.target,
        this._change("cameraChangeStart"),
        this._change("cameraControllerChangeStart")
    }
    ,
    CameraController.prototype.onEnd = function(e) {
        this._hadEnabledPicking && (this._hadEnabledPicking = !1,
        this.app.picker._enable(!0, "onStart", 0));
        var t = this.position
            , i = this.target;
        THING.Math.equalsVector(this.prevPosition, t, .01) && THING.Math.equalsVector(this.prevTarget, i, .01) || (this._change("cameraChangeEnd"),
        this._change("cameraControllerChangeEnd")),
        this.prevPosition = t,
        this.prevTarget = i
    }
    ,
    CameraController.prototype.onWheel = function(e) {
        this._enableUpdateTargetOnWheel && this._autoFixTarget(),
        this._change("cameraChangeStart"),
        this._wheeling = !0,
        this.app.trigger("camerazoom", {
            delta: e.delta
        })
    }
    ,
    CameraController.prototype.onChange = function(e) {
        this.app.trigger("cameracontrollerchanged"),
        this._change("cameraChange"),
        this._wheeling && (this._wheeling = !1,
        this._change("cameraChangeEnd"));
        var t = this.cameraObject;
        if (t && t.projectionType === CameraProjectionType.Orthographic) {
            var i = 2 * Math.tan(t.fov / 2 * Math.PI / 180)
                , r = {
                z: t.distance,
                depth: i
            };
            t.node.orthoSize = r,
            t.node.toOrthographic()
        }
    }
    ,
    CameraController.prototype.zoomIn = function(e) {
        var t = e.zoom || 1
            , i = e.time || 1e3
            , r = t
            , n = this.curOrbit.object.zoom;
        this._zoom(r, n, i)
    }
    ,
    CameraController.prototype.zoomOut = function(e) {
        var t = e.zoom || 1
            , i = e.time || 1e3
            , r = this.curOrbit.object.zoom
            , n = t;
        this._zoom(r, n, i)
    }
    ,
    CameraController.prototype.worldToScreen = function(e) {
        return this.cameraObject.worldToScreen(e)
    }
    ,
    CameraController.prototype.screenToWorld = function(e, t) {
        return this.cameraObject.screenToWorld(e, t)
    }
    ,
    CameraController.prototype.unprojectScreenToWorld = function(e, t, i) {
        return this.cameraObject.unprojectScreenToWorld(e, t, i)
    }
    ,
    CameraController.prototype.setProjectionType = function(e, t, i, r) {
        var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1e3
            , o = this
            , s = e != this.projectionType;
        switch (e) {
        case CameraProjectionType.Perspective:
            if (this.cameraObject.lerpToPerspective(n, (function() {
                if (s && o.projectionType == CameraProjectionType.Perspective) {
                    var e = o.toggleBackupInfo.toggleSkyBox;
                    e && (o.app.background = e.background,
                    o.app.skyBox = e.skyBox,
                    o.app.backgroundAdditiveColor = e.backgroundAdditiveColor,
                    o.app.backgroundColorScaleFactor = e.backgroundColorScaleFactor,
                    o.toggleBackupInfo.toggleSkyBox = null)
                }
            }
            )),
            s) {
                var a = this.toggleBackupInfo.toggleKeyPanSpeed;
                void 0 !== a && (this.curOrbit.keyPanSpeed = a);
                var l = this.toggleBackupInfo.toggleMousePanSpeed;
                void 0 !== l && (this.curOrbit.panSpeed = l);
                var u = this.toggleBackupInfo.toggleDampingFactor;
                void 0 !== u && (this.curOrbit.dampingFactor = u);
                var c = this.toggleBackupInfo.minPolarAngle;
                void 0 !== c && (this.curOrbit.minPolarAngle = c);
                var h = this.toggleBackupInfo.maxPolarAngle;
                void 0 !== h && (this.curOrbit.maxPolarAngle = h)
            }
            break;
        case CameraProjectionType.Orthographic:
            if (s) {
                var p = this.toggleBackupInfo.toggleSkyBox;
                p ? (p.backgroundAdditiveColor = this.app.backgroundAdditiveColor,
                p.backgroundColorScaleFactor = this.app.backgroundColorScaleFactor) : this.toggleBackupInfo.toggleSkyBox = {
                    skyBox: this.app.skyBox,
                    background: this.app.background,
                    backgroundAdditiveColor: this.app.backgroundAdditiveColor,
                    backgroundColorScaleFactor: this.app.backgroundColorScaleFactor
                }
            }
            this.app.skyBox = null,
            s && (this.toggleBackupInfo.toggleKeyPanSpeed = this.curOrbit.keyPanSpeed,
            this.toggleBackupInfo.toggleMousePanSpeed = this.curOrbit.panSpeed,
            this.toggleBackupInfo.toggleDampingFactor = this.curOrbit.dampingFactor,
            this.toggleBackupInfo.minPolarAngle = this.curOrbit.minPolarAngle,
            this.toggleBackupInfo.maxPolarAngle = this.curOrbit.maxPolarAngle),
            this.curOrbit.keyPanSpeed = t / 6400,
            this.curOrbit.panSpeed = t / 6400,
            this.curOrbit.dampingFactor = .12,
            this.curOrbit.minPolarAngle = 0,
            this.curOrbit.maxPolarAngle = Math.PI;
            var d = Utils.parseVector3(i)
                , f = Utils.parseVector3(r);
            this.cameraObject.lerpToOrthographic(d, f, n);
            break;
        default:
            return !1
        }
    }
    ,
    CameraController.prototype._getBestLocation = function(e, t, i) {
        var r = Utils.parseVector3(t.size)
            , n = Utils.parseVector3(t.center);
        if (!r.x || !r.y || !r.z) {
            r.x = 5,
            r.y = 5,
            r.z = 5
        }
        var o = n.clone()
            , s = new THREE.Vector3(0,1,0);
        if (e == CameraProjectionType.Perspective)
            o.x = n.x + r.x,
            o.y = n.y + r.y,
            o.z = n.z + r.z;
        else {
            var a = i || r.length();
            o.y = n.y + a,
            s = new THREE.Vector3(0,0,-1)
        }
        return {
            lookAt: n,
            pos: o,
            up: s,
            scale: r
        }
    }
    ,
    CameraController.prototype.getBestLocation = function(e) {
        var t;
        return t = Utils.isArray(e) ? new Selector(this.app,e).boundingBox : e.boundingBox,
        this._getBestLocation(this.projectionType, t)
    }
    ,
    CameraController.prototype.setType = function(e, t, i, r, n) {
        var o = this._getBestLocation(t, e.boundingBox, n)
            , s = o.pos.distanceTo(o.lookAt)
            , a = this.distanceLimited[1];
        if (s >= a) {
            var l = o.pos.subVectors(o.pos.clone(), o.lookAt);
            l.normalize();
            var u = o.pos.addVectors(o.lookAt, l.multiplyScalar(a));
            o.pos = u
        }
        switch (this.setProjectionType(t, o.scale.length(), o.pos, o.lookAt, i),
        t) {
        case CameraProjectionType.Perspective:
            var c = this.toggleBackupInfo.toggleInitPos;
            void 0 !== c && (o.pos = Utils.parseVector3(c));
            var h = this.toggleBackupInfo.toggleInitLookAt;
            void 0 !== h && (o.lookAt = Utils.parseVector3(h));
            break;
        case CameraProjectionType.Orthographic:
            this.toggleBackupInfo.toggleInitPos = this.position,
            this.toggleBackupInfo.toggleInitLookAt = this.target;
            break;
        default:
            return !1
        }
        var p = this.app.rendererManager.getCurrentControl()
            , d = p.getConfig()
            , f = d.temporalSuperSampling.enable
            , m = d.postEffect.screenSpaceAmbientOcclusion.enable;
        p.mergeConfig({
            temporalSuperSampling: {
                enable: !1
            },
            postEffect: {
                screenSpaceAmbientOcclusion: {
                    enable: !1
                }
            }
        }).update();
        var g = function() {
            p.mergeConfig({
                temporalSuperSampling: {
                    enable: f
                },
                postEffect: {
                    screenSpaceAmbientOcclusion: {
                        enable: m
                    }
                }
            }).update(),
            r && r()
        }
            , v = this._buildFlyParams({
            position: o.pos.toArray(),
            target: o.lookAt.toArray(),
            up: o.up.toArray(),
            time: i,
            stop: g,
            complete: g
        });
        return this.cameraObject.flyTo(v),
        !0
    }
    ,
    CameraController.prototype.toggleNormalViewMode = function(e) {
        return this.viewMode != CameraView.Normal && (this.toggleObject({
            object: this.app.root,
            is3D: !0,
            complete: function() {
                e && e()
            }
        }),
        !0)
    }
    ,
    CameraController.prototype.toggleObject = function(e) {
        var t = (e = e || {}).object || this.app.level.current || this.app.root
            , i = Utils.parseValue(e.is3D, !1)
            , r = e.complete
            , n = e.time || 1e3
            , o = Utils.parseValue(e.force, !1)
            , s = e.height
            , a = this.app.webViewManager.mixerContext
            , l = !1;
        return i ? (o || this.projectionType != CameraProjectionType.Perspective) && (this.projectionType != CameraProjectionType.Perspective && this._rotateEnableFlag.unlock("toggleObject"),
        l = this.setType(t, CameraProjectionType.Perspective, n, r, s),
        a.cssCamera = a.backupCSSCamera) : (o || this.projectionType != CameraProjectionType.Orthographic) && (this.projectionType != CameraProjectionType.Orthographic && this._rotateEnableFlag.lock(!1, "toggleObject"),
        l = this.setType(t, CameraProjectionType.Orthographic, n, r, s),
        a.cssCamera = this.app.renderCamera.cameraO.clone(),
        a.cssCamera.getEffectiveFOV = function() {
            return THING.App.current.renderCamera.getEffectiveFOV()
        }
        ),
        l && this.app.trigger("cameraViewChange", {
            view: this.projectionType
        }),
        l
    }
    ,
    CameraController.prototype.resize = function(e, t) {
        this.cameraObject.setSize(e, t)
    }
    ,
    CameraController.prototype._buildFlyParams = function(e) {
        var t = this;
        e.isBaseObject && (e = {
            target: e
        });
        var i = e._flyStart
            , r = e._flying
            , n = e._flyStop
            , o = e._flyComplete
            , s = Utils.parseValue(e.pickable, !1);
        return e.flyStart = function() {
            s || t.picker._enable(!1, "_buildFlyParams", 1e3),
            t._change("cameraChangeStart"),
            i && i()
        }
        ,
        e.flying = function() {
            Utils.isFunction(t.curOrbit.setState) && t.curOrbit.setState(),
            t._change("cameraChange"),
            r && r()
        }
        ,
        e.flyStop = function() {
            Utils.isFunction(t.curOrbit.setState) && t.curOrbit.setState(),
            s || t.picker._enable(!0, "_buildFlyParams", 0),
            t._change("cameraChangeEnd");
            var i = e.stop;
            i && i(),
            n && n()
        }
        ,
        e.flyComplete = function() {
            t.picker._enable(!0, "_buildFlyParams", 0),
            Utils.isFunction(t.curOrbit.setState) && t.curOrbit.setState(),
            t._change("cameraChangeEnd");
            var i = e.target || e.object;
            i instanceof BaseObject && i.trigger("cameraFlyComplete");
            var r = e.targetForFlyComplete;
            r != i && r instanceof BaseObject && r.trigger("cameraFlyComplete"),
            t.app.events.dispatchEvent({
                type: "cameraFlyComplete"
            });
            var n = e.complete;
            n && n(),
            o && o()
        }
        ,
        e.autoFixUp = this._autoFixCameraUp,
        e.targetForFlyComplete = this.app.level.current,
        e
    }
    ,
    CameraController.prototype.fit = function(e) {
        (e = e || {}).isBaseObject && (e = {
            object: e
        }),
        e.object = e.object || this.app.root,
        e.time = 1,
        this.cameraObject.flyTo(e)
    }
    ,
    CameraController.prototype.stopFlying = function(e) {
        this.cameraObject.stopFlying(e)
    }
    ,
    CameraController.prototype.flyTo = function(e) {
        if (e = this._buildFlyParams(e),
        this.viewMode == CameraView.TopView) {
            var t = this;
            this.toggleObject({
                is3D: !0,
                complete: function() {
                    t.cameraObject.flyTo(e)
                }
            })
        } else
            this.cameraObject.flyTo(e)
    }
    ,
    CameraController.prototype.movePath = function(e) {
        e = this._buildFlyParams(e),
        this.cameraObject.movePath(e)
    }
    ,
    CameraController.prototype.lookAt = function(e) {
        this.cameraObject.lookAt(e) ? (this._rotateEnableFlag.lock(!1, "lookAt"),
        this._panEnableFlag.lock(!1, "lookAt")) : (this._rotateEnableFlag.unlock("lookAt"),
        this._panEnableFlag.unlock("lookAt"))
    }
    ,
    CameraController.prototype.stopRotateAround = function(e) {
        this.cameraObject.stopRotating(e)
    }
    ,
    CameraController.prototype.rotateAround = function(e) {
        var t = this;
        e = e || {};
        var i = Utils.parseValue(e.pickable, !0);
        e.rotateStart = function() {
            i || t.picker._enable(!1, "rotateAround", 1e3)
        }
        ,
        e.rotateComplete = function() {
            i || t.picker._enable(!0, "rotateAround", 0)
        }
        ,
        this.cameraObject.rotateAround(e)
    }
    ,
    CameraController.prototype.rotateAroundX = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
        this.rotateAround({
            xRotateAngle: e,
            time: t
        })
    }
    ,
    CameraController.prototype.rotateAroundY = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
        this.rotateAround({
            yRotateAngle: e,
            time: t
        })
    }
    ,
    CameraController.prototype.followObject = function(e) {
        e = e || {},
        this.cameraObject.followObject(e);
        var t = Utils.parseValue(e.enableRotate, !1)
            , i = Utils.parseValue(e.enableZoom, !1);
        t || this._rotateEnableFlag.lock(!1, "followObject"),
        i || this._zoomEnableFlag.lock(!1, "followObject")
    }
    ,
    CameraController.prototype.stopFollowingObject = function() {
        this.cameraObject.stopFollowingObject(),
        this._rotateEnableFlag.unlock("followObject"),
        this._zoomEnableFlag.unlock("followObject")
    }
    ,
    CameraController.prototype.canUpdateOrbit = function() {
        return !this.cameraObject.flying && !(!this.curOrbit.enabled && !this.curOrbit.autoRotate)
    }
    ,
    CameraController.prototype.update = function() {
        this.cameraObject.update(),
        this.canUpdateOrbit() && this.curOrbit.update()
    }
    ,
    CameraController.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    CameraController.prototype.zoom = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
        if (e = Math.min(this.distance - 1, e),
        this.projectionType == CameraProjectionType.Perspective) {
            var i = Utils.parseVector3(this.direction);
            i.multiplyScalar(e);
            var r = Utils.parseVector3(this.position);
            if (r.add(i),
            this.enableUpdateTargetOnWheel && this._autoFixTarget()) {
                var n = Utils.parseVector3(this.target);
                n.add(i),
                this.target = n
            }
            this.flyTo({
                position: r.toArray(),
                target: this.target,
                time: t
            })
        } else {
            var o = Math.max(this.curOrbit.object.zoom + e / 20, .001);
            this.zoomOut({
                zoom: o,
                time: t
            })
        }
    }
    ,
    CameraController.prototype.rotateX = function(e, t) {
        Utils.isNull(t) ? this.cameraObject.rotateX(e) : (THING.Utils.warn('Please use "this.rotateAround({xRotateAngle: angle,time});" to replace rotateX(angle, time)'),
        this.rotateAround({
            xRotateAngle: e,
            time: t
        }))
    }
    ,
    CameraController.prototype.rotateY = function(e, t) {
        Utils.isNull(t) ? this.cameraObject.rotateY(e) : (THING.Utils.warn('Please use "this.rotateAround({yRotateAngle: angle,time});" to replace rotateX(angle, time)'),
        this.rotateAround({
            yRotateAngle: e,
            time: t
        }))
    }
    ,
    CameraController.prototype.rotateZ = function(e) {
        this.cameraObject.rotateZ(e)
    }
    ,
    CameraController.prototype.move = function(e, t) {
        var i = this.dampingFactor / .12;
        this.curOrbit.move(-e * i, t * i)
    }
    ,
    CameraController.prototype.loadViewPoint = function(e) {
        this.app.viewPointManger.loadJSON(e)
    }
    ,
    CameraController.prototype.playViewPoint = function(e) {
        this.app.viewPointManger.play(e)
    }
    ,
    CameraController.prototype.pauseViewPoint = function(e) {
        this.app.viewPointManger.pause(e)
    }
    ,
    CameraController.prototype.isInView = function(e) {
        return !!e && this.cameraObject.isInView(e)
    }
    ,
    CameraController.prototype.isCovered = function(e) {
        return !!e && (THING.Utils.warn("not impl yet"),
        !0)
    }
    ,
    CameraController.prototype.disable = function(e) {
        (e = e || {}).rotate = Utils.parseValue(e.rotate, !0),
        e.pan = Utils.parseValue(e.pan, !0),
        e.zoom = Utils.parseValue(e.zoom, !0),
        e.rotate && this._rotateEnableFlag.lock(!1, "disable"),
        e.pan && this._panEnableFlag.lock(!1, "disable"),
        e.zoom && this._zoomEnableFlag.lock(!1, "disable")
    }
    ,
    CameraController.prototype.resume = function(e) {
        (e = e || {}).rotate = Utils.parseValue(e.rotate, !0),
        e.pan = Utils.parseValue(e.pan, !0),
        e.zoom = Utils.parseValue(e.zoom, !0),
        e.rotate && this._rotateEnableFlag.unlock("disable"),
        e.pan && this._panEnableFlag.unlock("disable"),
        e.zoom && this._zoomEnableFlag.unlock("disable")
    }
    ,
    CameraController.prototype.showTargetNode = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        e ? this._targetObject || (this._targetObject = this.app.create({
            type: "Box",
            position: this.target,
            style: {
                color: "#FF0000"
            }
        }),
        this._targetObject.pickable = !1,
        this._targetObject.style.outlineColor = 65535,
        this._targetObject.node.traverse((function(e) {
            e.userData.__debugObject__ = !0
        }
        ))) : this._targetObject && (this._targetObject.destroy(),
        this._targetObject = null)
    }
    ,
    CameraController.prototype.distanceTo = function(e) {
        return this.cameraObject.distanceTo(e)
    }
    ,
    CameraController.prototype.setTargetLimit = function(e) {
        if (this.orbit instanceof THREE.EarthOrbitControls)
            this.curOrbit.setTargetLimit(e);
        else if (e) {
            var t = new THREE.Vector3(e[0],e[1],e[2])
                , i = this.curOrbit.target
                , r = i.x + t.x / 2
                , n = i.x - t.x / 2
                , o = i.z + t.z / 2
                , s = i.z - t.z / 2
                , a = i.y - t.y / 2
                , l = i.y + t.y / 2;
            this._targetBoundary.min.set(n, a, s),
            this._targetBoundary.max.set(r, l, o)
        } else
            this._targetBoundary.makeEmpty()
    }
    ,
    CameraController.prototype.log = function() {
        THING.Utils.log("[" + this.position.toString() + "], [" + this.target.toString() + "]")
    }
    ,
    CameraController.prototype.dolly = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
        THING.Utils.warn("[CameraController] Please use '.zoom()' to replace '.dolly()'"),
        this.zoom(e, t)
    }
    ,
    CameraController.prototype.theta = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
        THING.Utils.warn("[CameraController] Please use '.rotateX()' to replace '.theta()'"),
        this.rotateX(e, t)
    }
    ,
    CameraController.prototype.phi = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
        THING.Utils.warn("[CameraController] Please use '.rotateY()' to replace '.theta()'"),
        this.rotateY(e, t)
    }
    ,
    _createClass(e, [{
        key: "aspect",
        get: function() {
            return this.cameraObject.node.cameraP.aspect
        }
    }, {
        key: "frustum",
        get: function() {
            return this.cameraObject.frustum
        }
    }, {
        key: "camera",
        get: function() {
            return this.app.renderCamera
        }
    }, {
        key: "viewMode",
        set: function(e) {
            this.toggleObject({
                is3D: e == CameraView.Normal
            })
        },
        get: function() {
            return this.projectionType == CameraProjectionType.Perspective ? CameraView.Normal : CameraView.TopView
        }
    }, {
        key: "projectionType",
        set: function(e) {
            this.setProjectionType(e, this.distance, this.position, this.target)
        },
        get: function() {
            return this.cameraObject.projectionType
        }
    }, {
        key: "enableDamping",
        set: function(e) {
            this.curOrbit.enableDamping = e
        },
        get: function() {
            return this.curOrbit.enableDamping
        }
    }, {
        key: "dampingFactor",
        set: function(e) {
            this.curOrbit.dampingFactor = e
        },
        get: function() {
            return this.curOrbit.dampingFactor
        }
    }, {
        key: "rotateSpeed",
        set: function(e) {
            this.curOrbit.rotateSpeed = e
        },
        get: function() {
            return this.curOrbit.rotateSpeed
        }
    }, {
        key: "fov",
        set: function(e) {
            this.cameraObject.fov = e;
            var t = this.app.webViewManager.mixerContext.cssCamera;
            t.fov = e,
            t.updateProjectionMatrix()
        },
        get: function() {
            return this.cameraObject.fov
        }
    }, {
        key: "near",
        set: function(e) {
            this.cameraObject.near = e
        },
        get: function() {
            return this.cameraObject.near
        }
    }, {
        key: "far",
        set: function(e) {
            this.cameraObject.far = e
        },
        get: function() {
            return this.cameraObject.far
        }
    }, {
        key: "zoomLimited",
        set: function(e) {
            this.curOrbit.minZoom = e[0],
            this.curOrbit.maxZoom = e[1]
        },
        get: function() {
            return [this.curOrbit.minZoom, this.curOrbit.maxZoom]
        }
    }, {
        key: "zoomFactor",
        set: function(e) {
            void 0 !== this.curOrbit.zoomFactor ? this.curOrbit.zoomFactor = e : void 0 !== this.curOrbit.zoomSpeed && (this.curOrbit.zoomSpeed = e)
        },
        get: function() {
            return void 0 !== this.curOrbit.zoomFactor ? this.curOrbit.zoomFactor : void 0 !== this.curOrbit.zoomSpeed ? this.curOrbit.zoomSpeed : 1
        }
    }, {
        key: "distanceLimited",
        set: function(e) {
            this.curOrbit.minDistance = e[0],
            this.curOrbit.maxDistance = e[1]
        },
        get: function() {
            return [this.curOrbit.minDistance, this.curOrbit.maxDistance]
        }
    }, {
        key: "xAngleLimitRange",
        set: function(e) {
            var t = 90 - e[0]
                , i = 90 - e[1];
            this.curOrbit.minPolarAngle = THING.Math.degToRad(Math.min(t, i)),
            this.curOrbit.maxPolarAngle = THING.Math.degToRad(Math.max(t, i))
        },
        get: function() {
            var e = function(e) {
                return 90 - THING.Math.radToDeg(e)
            }
                , t = e(this.curOrbit.minPolarAngle)
                , i = e(this.curOrbit.maxPolarAngle);
            return [Math.min(t, i), Math.max(t, i)]
        }
    }, {
        key: "yAngleLimitRange",
        set: function(e) {
            this.curOrbit.minAzimuthAngle = THING.Math.degToRad(e[0]),
            this.curOrbit.maxAzimuthAngle = THING.Math.degToRad(e[1])
        },
        get: function() {
            return [THING.Math.radToDeg(this.curOrbit.minAzimuthAngle), THING.Math.radToDeg(this.curOrbit.maxAzimuthAngle)]
        }
    }, {
        key: "keyPanSpeed",
        set: function(e) {
            this.curOrbit.keyPanSpeed = e
        },
        get: function() {
            return this.curOrbit.keyPanSpeed
        }
    }, {
        key: "mousePanSpeed",
        set: function(e) {
            this.curOrbit.panSpeed = e
        },
        get: function() {
            return this.curOrbit.panSpeed
        }
    }, {
        key: "distance",
        set: function(e) {
            this.cameraObject.distance = e
        },
        get: function() {
            return this.cameraObject.distance
        }
    }, {
        key: "direction",
        get: function() {
            return this.cameraObject.direction
        }
    }, {
        key: "rightDirection",
        get: function() {
            return this.cameraObject.rightDirection
        }
    }, {
        key: "up",
        set: function(e) {
            this.cameraObject.up = e
        },
        get: function() {
            return this.cameraObject.up
        }
    }, {
        key: "position",
        set: function(e) {
            e && (this.cameraObject.position = e)
        },
        get: function() {
            return this.cameraObject.position
        }
    }, {
        key: "target",
        set: function(e) {
            e && (this.cameraObject.target = e)
        },
        get: function() {
            return this.cameraObject.target
        }
    }, {
        key: "inputEnabled",
        set: function(e) {
            this._inputEnableFlag.lock(e, "default")
        },
        get: function() {
            return this._inputEnableFlag.isEnable()
        }
    }, {
        key: "enableRotate",
        set: function(e) {
            this._rotateEnableFlag.enable(e)
        },
        get: function() {
            return this._rotateEnableFlag.isEnable()
        }
    }, {
        key: "enableZoom",
        set: function(e) {
            this._zoomEnableFlag.enable(e)
        },
        get: function() {
            return this._zoomEnableFlag.isEnable()
        }
    }, {
        key: "enablePan",
        set: function(e) {
            this._panEnableFlag.enable(e)
        },
        get: function() {
            return this._panEnableFlag.isEnable()
        }
    }, {
        key: "flying",
        get: function() {
            return this.cameraObject.flying
        }
    }, {
        key: "mode",
        set: function(e) {
            this.mode != e && (this.curOrbit.enabled = !1,
            "earth" == e ? (this.curOrbit = new THREE.EarthOrbitControls(this.app.renderCamera,this.app.mainDomElement),
            this.curOrbit.app = this.app,
            this.initOrbit(this.curOrbit),
            this.autoAdjustNear = !1) : (this.curOrbit.dispose(),
            this.curOrbit = this.orbit,
            this.curOrbit.enabled = !0,
            this.autoAdjustNear = !0),
            this.cameraObject.controller = this.curOrbit)
        },
        get: function() {
            return this.curOrbit instanceof THREE.EarthOrbitControls ? "earth" : "normal"
        }
    }, {
        key: "degreeToWorldYAxis",
        get: function() {
            var e = Utils.parseVector3(this.direction)
                , t = new THREE.Vector3(0,-1,0)
                , i = e.dot(t);
            return THING.Math.radToDeg(Math.acos(i))
        }
    }, {
        key: "autoAdjustNear",
        set: function(e) {
            this._autoAdjustNear = e,
            e || (this.cameraObject.near = this.cameraObject._near)
        },
        get: function() {
            return this._autoAdjustNear
        }
    }, {
        key: "autoAdjustTarget",
        set: function(e) {
            this._autoAdjustTarget = e
        },
        get: function() {
            return this._autoAdjustTarget
        }
    }, {
        key: "enableUpdateTargetOnWheel",
        set: function(e) {
            this._enableUpdateTargetOnWheel = e
        },
        get: function() {
            return this._enableUpdateTargetOnWheel
        }
    }, {
        key: "enableZoomOnTarget",
        set: function(e) {
            if ("earth" == this.mode)
                this.curOrbit.enableZoomOnTarget = e,
                this.curOrbit._keepTarget = !e;
            else {
                var t = this;
                this._enableZoomOnTarget = e,
                this._inputEnableFlag.lock(!e, "enableZoomOnTarget"),
                this.curOrbit.enableZoomOnTarget = e,
                e ? (this.app.on("mousewheel", (function(e) {
                    !1 !== t._inputEnableFlag.isLock("default") && (t._inputEnableFlag.lock(!1, "enableZoomOnTarget"),
                    t._processWheelOnMouseTarget(e))
                }
                ), "_processWheelOnMouseTarget_"),
                this.app.on("mousedown", (function(e) {
                    !1 !== t._inputEnableFlag.isLock("default") && t._inputEnableFlag.lock(!0, "enableZoomOnTarget")
                }
                ), "_processWheelOnMouseTarget_mousedown")) : (this.app.off("mousewheel", null, "_processWheelOnMouseTarget_"),
                this.app.off("mousedown", null, "_processWheelOnMouseTarget_mousedown"))
            }
        },
        get: function() {
            return "earth" == this.mode ? this.curOrbit.enableZoomOnTarget : this._enableZoomOnTarget
        }
    }, {
        key: "wheelOnMouseTargetScale",
        set: function(e) {
            this._wheelOnMouseTargetScale = e
        },
        get: function() {
            return this._wheelOnMouseTargetScale
        }
    }, {
        key: "autoFixCameraUp",
        set: function(e) {
            this._autoFixCameraUp = e
        },
        get: function() {
            return this._autoFixCameraUp
        }
    }, {
        key: "autoHideObjectsWhenRotatingFunc",
        set: function(e) {
            if (this._autoHideObjectsWhenRotatingFunc = e,
            this.app.off("cameraControllerChangeStart", null, "__autoHideObjectsWhenRotatingFunc__start__"),
            this.app.off("cameraControllerChangeEnd", null, "__autoHideObjectsWhenRotatingFunc__end__"),
            this._autoHideObjectsWhenRotatingFunc) {
                if (!Utils.isFunction(this._autoHideObjectsWhenRotatingFunc))
                    return;
                var t = this;
                this.app.on("cameraControllerChangeStart", (function(e) {
                    t.app.query(".Thing").forEach((function(e) {
                        if (t._autoHideObjectsWhenRotatingFunc && !1 === t._autoHideObjectsWhenRotatingFunc(e) && e.visible) {
                            e._prevVisible_auto_hide = !0;
                            var i = app.modelResource.get(e.url);
                            i && i.loadingBox ? (e.changeAppearance(i.loadingBox.clone()),
                            e._needRevertAppearance_auto_hide = !0) : e.visible = !1
                        }
                    }
                    ))
                }
                ), "__autoHideObjectsWhenRotatingFunc__start__"),
                this.app.on("cameraControllerChangeEnd", (function(e) {
                    t.app.query(".Thing").forEach((function(e) {
                        e._prevVisible_auto_hide && (e._needRevertAppearance_auto_hide ? (e.changeAppearance(null),
                        delete e._needRevertAppearance_auto_hide) : e.visible = !0,
                        delete e._prevVisible_auto_hide)
                    }
                    ))
                }
                ), "__autoHideObjectsWhenRotatingFunc__end__")
            }
        },
        get: function() {
            return this._autoHideObjectsWhenRotatingFunc
        }
    }, {
        key: "mouseButtons",
        set: function(e) {
            var t = function(e, t) {
                var i = {
                    left: THREE.MOUSE.LEFT,
                    middle: THREE.MOUSE.MIDDLE,
                    right: THREE.MOUSE.RIGHT
                };
                return Utils.parseValue(i[e], t)
            };
            e = e || {};
            var i = this.curOrbit.mouseButtons
                , r = t(e.left, Utils.parseValue(i.LEFT, i.ORBIT))
                , n = t(e.middle, Utils.parseValue(i.MIDDLE, i.ZOOM))
                , o = t(e.right, Utils.parseValue(i.RIGHT, i.PAN));
            "normal" == this.mode ? this.curOrbit.mouseButtons = {
                LEFT: r,
                MIDDLE: n,
                RIGHT: o
            } : "earth" == this.mode && (this.curOrbit.mouseButtons = {
                ORBIT: r,
                ZOOM: n,
                PAN: o
            })
        },
        get: function() {
            var e = function(e) {
                return ["left", "middle", "right"][e]
            }
                , t = this.curOrbit.mouseButtons;
            return {
                left: e(Utils.parseValue(t.LEFT, t.ORBIT)),
                middle: e(Utils.parseValue(t.MIDDLE, t.ZOOM)),
                right: e(Utils.parseValue(t.RIGHT, t.PAN))
            }
        }
    }, {
        key: "options",
        set: function(e) {
            var t = this.options;
            Utils.mergeObject(t, e, !0),
            this.mouseButtons = {
                left: t.rotationKey,
                middle: t.zoomKey,
                right: t.moveKey
            },
            "normal" == this.mode ? (this.enableZoomOnTarget = t.enableZoomOnTarget,
            this.enableUpdateTargetOnWheel = t.enableUpdateTargetOnWheel) : "earth" == this.mode && this.curOrbit.setOptions(t)
        },
        get: function() {
            var e = {
                rotationKey: this.mouseButtons.left,
                zoomKey: this.mouseButtons.middle,
                moveKey: this.mouseButtons.right
            };
            return "normal" == this.mode ? (e.enableZoomOnTarget = this.enableZoomOnTarget,
            e.enableUpdateTargetOnWheel = this.enableUpdateTargetOnWheel) : "earth" == this.mode && Utils.mergeObject(e, this.curOrbit.getOptions(e)),
            e
        }
    }, {
        key: "toggle3D",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.viewMode=THING.CameraView.Normal/TopView' to replace '.toggle3D'"),
            this.viewMode = e ? CameraView.Normal : CameraView.TopView
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.viewMode == THING.CameraView.Normal' to replace '.toggle3D'"),
            this.viewMode == CameraView.Normal
        }
    }, {
        key: "enabled",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.inputEnabled' to replace '.enabled'"),
            this.inputEnabled = e
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.inputEnabled' to replace '.enabled'"),
            this.inputEnabled
        }
    }, {
        key: "minZoom",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.zoomLimited=[min, max]' to replace '.minZoom'"),
            this.zoomLimited = [e, this.zoomLimited[1]]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.zoomLimited[0]' to replace '.minZoom'"),
            this.zoomLimited[0]
        }
    }, {
        key: "maxZoom",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.zoomLimited=[min, max]' to replace '.maxZoom'"),
            this.zoomLimited = [this.zoomLimited[0], e]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.zoomLimited[0]' to replace '.maxZoom'"),
            this.zoomLimited[1]
        }
    }, {
        key: "minDistance",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.distanceLimited=[min, max]' to replace '.minDistance'"),
            this.distanceLimited = [e, this.distanceLimited[1]]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.distanceLimited[0]' to replace '.minDistance'"),
            this.distanceLimited[0]
        }
    }, {
        key: "maxDistance",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.distanceLimited=[min, max]' to replace '.maxDistance'"),
            this.distanceLimited = [this.distanceLimited[0], e]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.distanceLimited[0]' to replace '.maxDistance'"),
            this.distanceLimited[1]
        }
    }, {
        key: "minPolarAngle",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.verticalAngleLimited=[min, max]' to replace '.minPolarAngle'"),
            this.verticalAngleLimited = [e, this.verticalAngleLimited[1]]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.verticalAngleLimited[0]' to replace '.minPolarAngle'"),
            this.verticalAngleLimited[0]
        }
    }, {
        key: "maxPolarAngle",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.verticalAngleLimited=[min, max]' to replace '.maxPolarAngle'"),
            this.verticalAngleLimited = [this.verticalAngleLimited[0], e]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.verticalAngleLimited[0]' to replace '.maxPolarAngle'"),
            this.verticalAngleLimited[1]
        }
    }, {
        key: "minAzimuthAngle",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.horizontalAngleLimited=[min, max]' to replace '.minAzimuthAngle'"),
            this.horizontalAngleLimited = [e, this.horizontalAngleLimited[1]]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.horizontalAngleLimited[0]' to replace '.minAzimuthAngle'"),
            this.horizontalAngleLimited[0]
        }
    }, {
        key: "maxAzimuthAngle",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.horizontalAngleLimited=[min, max]' to replace '.maxAzimuthAngle'"),
            this.horizontalAngleLimited = [this.horizontalAngleLimited[0], e]
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.horizontalAngleLimited[0]' to replace '.maxAzimuthAngle'"),
            this.horizontalAngleLimited[1]
        }
    }, {
        key: "verticalAngleLimited",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.xAngleLimited' to replace '.verticalAngleLimited'"),
            this.xAngleLimited = e
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.xAngleLimited' to replace '.verticalAngleLimited'"),
            this.xAngleLimited
        }
    }, {
        key: "horizontalAngleLimited",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.yAngleLimited' to replace '.verticalAngleLimited'"),
            this.yAngleLimited = e
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.yAngleLimited' to replace '.verticalAngleLimited'"),
            this.yAngleLimited
        }
    }, {
        key: "yAngleLimited",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.xAngleLimitRange' to replace '.yAngleLimited'"),
            this.xAngleLimitRange = e
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.xAngleLimitRange' to replace '.yAngleLimited'"),
            this.xAngleLimitRange
        }
    }, {
        key: "xAngleLimited",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.yAngleLimitRange' to replace '.xAngleLimited'"),
            this.yAngleLimitRange = e
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.yAngleLimitRange' to replace '.xAngleLimited'"),
            this.yAngleLimitRange
        }
    }, {
        key: "rotating",
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.flying' to replace '.rotating'"),
            this.flying
        }
    }, {
        key: "panSpeed",
        set: function(e) {
            THING.Utils.warn("[CameraController] Please use '.keyPanSpeed' to replace '.panSpeed'"),
            this.keyPanSpeed = e
        },
        get: function() {
            return THING.Utils.warn("[CameraController] Please use '.keyPanSpeed' to replace '.panSpeed'"),
            this.keyPanSpeed
        }
    }, {
        key: "enableUpdateTargetByMove",
        set: function(e) {},
        get: function() {
            return !0
        }
    }]),
    e
}();
kh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._origin = null,
        this._previous = null,
        this._current = null,
        this._root = null,
        this._changed = !1,
        this._options = {
            flyTime: 1e3,
            outlineColor: 16744448,
            autoChangeBackground: !0,
            autoBakeFloor: !0,
            autoHideFloorObjects: !0,
            autoEnterSubLevel: !0,
            autoBackFromSubLevel: !0
        }
    }
    return e.prototype.init = function() {
        this._root = this.app.root
    }
    ,
    e.prototype.buildState = function(e) {
        var t = e.type;
        "Campus" == t && (t = "Outdoors");
        var i = {};
        i.name = t + "Level";
        var r = [];
        e instanceof Floor ? (r.push("floor"),
        r.push("_floor")) : e instanceof Building && (r.push("building"),
        r.push("_building"));
        for (var n = 0; n < r.length; n++)
            i[r[n]] = e;
        return i
    }
    ,
    e.prototype.buildAfterEnterState = function(e) {
        var t = e.type;
        "Campus" == t && (t = "Outdoors");
        var i = this.previous ? this.previous.type : "";
        "Campus" == i && (i = "Outdoors");
        var r = {
            prevState: {
                name: i + "Level"
            },
            state: this.buildState(e),
            stateName: t + "Level"
        };
        return this.previous && (this.previous instanceof Building ? (r.prevState.building = this.previous,
        r.prevState._building = this.previous) : this.previous instanceof  Floor && (r.prevState.floor = this.previous,
        r.prevState._floor = this.previous)),
        r
    }
    ,
    e.prototype.buildBeforeEnterState = function(e) {
        var t = e.type;
        "Campus" == t && (t = "Outdoors");
        var i = this.current ? this.current.type : "";
        "Campus" == i && (i = "Outdoors");
        var r = {
            prevState: {
                name: i + "Level"
            },
            curState: this.buildState(e),
            stateName: t + "Level"
        };
        return this.previous && (this.previous instanceof Building ? (r.prevState.building = this.previous,
        r.prevState._building = this.previous) : this.previous instanceof  Floor && (r.prevState.floor = this.previous,
        r.prevState._floor = this.previous)),
        r
    }
    ,
    e.prototype.getEventType = function(e, t) {
        var i = t.type;
        return "Campus" == i && (i = "Outdoors"),
        e + i + "Level"
    }
    ,
    e.prototype.buildEventArguments = function(e) {
        var t = e.type;
        "Campus" == t && (t = "Outdoors");
        var i = {
            name: t + "Level"
        };
        return i.state = this.buildState(e),
        i
    }
    ,
    e.prototype.notifyBeforeEnterState = function(e) {
        this.app.trigger("beforeEnterState", this.buildBeforeEnterState(e))
    }
    ,
    e.prototype.notifyAfterEnterState = function(e) {
        this.app.trigger("afterEnterState", this.buildAfterEnterState(e))
    }
    ,
    e.prototype.nofityAfterLevelChange = function(e) {
        var t = e.object;
        this.app.trigger(this.getEventType("enter", t), this.buildEventArguments(t)),
        this.app.trigger(this.getEventType("afterEnter", t), this.buildEventArguments(t))
    }
    ,
    e.prototype.notifyBeforeLevelChange = function(e) {
        this.app.trigger(this.getEventType("beforeEnter", e), this.buildEventArguments(e))
    }
    ,
    e.prototype._getLevelType = function() {
        var e = this._current;
        return e ? e.type : ""
    }
    ,
    e.prototype._leaveLevel = function(e, t) {
        if (this.app.trigger(EventType.BeforeLevelChange, {
            level: this._getLevelType(),
            origin: this._origin,
            current: this._current,
            previous: this._previous,
            next: e
        }),
        this._current) {
            var i = Utils.cloneObject(t);
            i.level = this._getLevelType(),
            i.object = this._current,
            i.origin = this._origin,
            i.current = e,
            i.previous = this._current,
            this._current.trigger(EventType.LevelChange, i),
            this._current.trigger(EventType.LeaveLevel, i),
            this.app.trigger(EventType.LeaveLevel, i)
        }
        e && (this.notifyBeforeLevelChange(e),
        this.notifyBeforeEnterState(e))
    }
    ,
    e.prototype._notifyEnterLevel = function(e, t) {
        t.object = e,
        this.app.trigger(EventType.EnterLevel, t),
        this.nofityAfterLevelChange(t)
    }
    ,
    e.prototype._enterLevel = function(e, t) {
        var i = this;
        if (this._changed = !0,
        this._previous = this._current,
        this._current = e,
        t.level = this._getLevelType(),
        t.origin = this._origin,
        t.current = this._current,
        t.object = this._current,
        t.previous = this._previous,
        this.app.trigger(EventType.LevelChange, t),
        e) {
            var r = t.lastObject;
            r.internalUserData.level_complete || (r.internalUserData.level_complete = !0,
            r.one(EventType.EnterLevel, (function(e) {
                delete e.object.internalUserData.level_complete;
                var n = t.userComplete;
                n && (n(),
                delete t.complete),
                r.one("cameraFlyComplete", {
                    lastLevelChanged: !0
                }, (function(e) {
                    if (e.data.lastLevelChanged && e.object == r) {
                        var n = t.flyComplete;
                        n && n()
                    }
                    var o = e.object.isPauseEvent(THING.EventType.EnterLevel, THING.EventTag.LevelFly)
                        , s = e.object.isPauseEvent(THING.EventType.EnterLevel, THING.EventTag.LevelCustomFly, !0);
                    o && s || (e.object.trigger(EventType.LevelFlyEnd, {
                        level: i._getLevelType(),
                        object: e.object,
                        current: e.object,
                        previous: i.previous
                    }),
                    i.app.trigger(EventType.LevelFlyEnd, {
                        level: i._getLevelType(),
                        object: e.object,
                        current: e.object,
                        previous: i.previous
                    }))
                }
                ), "___level_camera_fly_complete___")
            }
            ), "___level_complete___")),
            e.trigger(EventType.LevelChange, t),
            this.notifyAfterEnterState(e);
            var n = e.isPauseEvent(EventType.EnterLevel, EventTag.LevelFly)
                , o = e.hasEvent(EventType.EnterLevel, EventTag.LevelFly);
            if (t.jumping || n || !o) {
                e.pauseEvent(EventType.EnterLevel, null, EventTag.LevelFly),
                e.trigger(EventType.EnterLevel, t),
                e.resumeEvent(EventType.EnterLevel, null, EventTag.LevelFly),
                this._notifyEnterLevel(e, t),
                t.jumping || n ? this.jumpLevelPath(t) : this.app.one("cameraFlyComplete", (function(e) {
                    i.jumpLevelPath(t)
                }
                ), "sceneLevel_cameraFlyComplete");
                var s = t.complete;
                s && (s(),
                delete t.userComplete)
            } else
                this.app.one("cameraFlyComplete", (function(e) {
                    i.jumpLevelPath(t)
                }
                ), "sceneLevel_cameraFlyComplete"),
                e.trigger(EventType.EnterLevel, t),
                this._notifyEnterLevel(e, t)
        }
    }
    ,
    e.prototype._change = function(e, t) {
        t = t || {};
        var i = this;
        this.app.camera.toggleNormalViewMode((function() {
            i._change(e, t)
        }
        )) || ("Outdoors" == e.type && (THING.Utils.warn("Please use campus to change, not outdoors"),
        e = e.parents.query(".Campus")[0]),
        e.isPauseEvent(EventType.EnterLevel) || (this._leaveLevel(e, t),
        this._enterLevel(e, t)))
    }
    ,
    e.prototype.updateJumping = function(e, t) {
        var i = this._current;
        i && (i.isChildOf(e) || i.isBrotherOf(e)) && (t.jumping = !0,
        t.skipBackupCameraInfo = !0)
    }
    ,
    e.prototype.getParents = function(e, t) {
        for (var i = [], r = e.parents, n = 0; n < r.length; n++) {
            var o = r[n];
            if (o == this.app.root)
                break;
            if (i.push(o),
            o == t)
                break
        }
        return i
    }
    ,
    e.prototype.getLevelPath = function(e, t) {
        if (this._current && this._current.parent != e && Utils.parseValue(this.options.autoEnterSubLevel, t.autoEnterSubLevel)) {
            for (var i = e.children.concat(), r = 0; r < i.length; r++) {
                i[r].isFloor || i.splice(r--, 1)
            }
            1 === i.length && (e = i[0])
        }
        var n = [];
        if (this._current == e)
            n = [e];
        else if (this._current)
            if (this._current.isChildOf(e))
                (n = this.getParents(this._current, e)).length >= 2 && (t.jumping = !0);
            else if (e.isChildOf(this._current))
                (n = (n = this.getParents(e, this._current)).reverse()).splice(0, 1),
                n.push(e);
            else if (e.parent == this._current.parent)
                n = e.parent ? [e.parent, e] : [e];
            else {
                var o = this.getParents(e, null).reverse()
                    , s = this.getParents(this._current).reverse();
                if (o.length && s.length) {
                    for (var a; o.length && s.length && o[0] == s[0]; )
                        a = o[0],
                        o.splice(0, 1),
                        s.splice(0, 1);
                    a && (n = s.reverse().concat([a]).concat(o).concat(e))
                } else
                    n = o.concat([e])
            }
        else
            n.push(e),
            n = (n = n.concat(e.parents.not(this.app.root).toArray())).reverse();
        if (function(e) {
            for (var t = 0; t < e.length; t++)
                if (e[t].isFacade)
                    return !0;
            return !1
        }(n))
            for (r = 0; r < n.length; r++)
                n[r].isBuilding && n.splice(r, 1);
        return n
    }
    ,
    e.prototype.jumpLevelPath = function(e) {
        var t = e.levelPath;
        if (t && (t.splice(0, 1),
        t.length)) {
            var i = t[0];
            1 == t.length && (delete e.jumping,
            this.app.off("cameraFlyComplete", "sceneLevel_cameraFlyComplete")),
            this._change(i, e)
        }
    }
    ,
    e.prototype.change = function(e, t) {
        if (t = t || {},
        e) {
            if (!e.isPauseEvent(EventType.EnterLevel) && e.hasEvent(EventType.EnterLevel) && (Utils.parseValue(t.autoChangeObject, !0) && e instanceof Facade && (e = e.building),
            !t.skipCurrentLevel || e != this._current)) {
                var i = this.getLevelPath(e, t);
                if (i.length) {
                    var r = i[0]
                        , n = i.length > 1 ? i[i.length - 1] : null;
                    n && this.updateJumping(n, t),
                    this.app.off("cameraFlyComplete", null, "sceneLevel_cameraFlyComplete"),
                    t.userComplete = t.complete,
                    t.userFlyComplete = t.flyComplete,
                    t.levelPath = i,
                    t.lastObject = n || e,
                    this._origin = this._current,
                    this._change(r, t)
                }
            }
        } else
            THING.Utils.error("Please provide the object to change")
    }
    ,
    e.prototype.quit = function(e) {
        e = e || {},
        this._current && (this._leaveLevel(null, e),
        this._enterLevel(null, e))
    }
    ,
    e.prototype.back = function(e) {
        if (e = e || {},
        this._current) {
            var t = this._current.parent;
            if (this.options.autoBackFromSubLevel)
                if (e.autoBackFromSubLevel)
                    for (; t && t.parent && !t.isCampus; ) {
                        for (var i = t.children.concat(), r = 0; r < i.length; r++)
                            i[r].isFacade && i.splice(r--, 1);
                        if (1 !== i.length)
                            break;
                        t = t.parent
                    }
            this.backTo(t)
        }
    }
    ,
    e.prototype.backTo = function(e) {
        if (e && e != this._current && e.isChildOf(this._root)) {
            e.isFacade && (e = e.parents.query(".Campus")[0]);
            var t = this;
            this.app.camera.toggleNormalViewMode((function() {
                t.backTo(e)
            }
            )) || this.change(e, {
                autoChangeObject: !1
            })
        }
    }
    ,
    e.prototype.isChanged = function() {
        return this._changed
    }
    ,
    e.prototype.onUpdate = function(e) {
        this._changed && (this._changed = !1)
    }
    ,
    _createClass(e, [{
        key: "current",
        get: function() {
            return this._current
        }
    }, {
        key: "previous",
        get: function() {
            return this._previous
        }
    }, {
        key: "root",
        set: function(e) {
            this._root = e
        },
        get: function() {
            return this._root
        }
    }, {
        key: "options",
        set: function(e) {
            this._options = Utils.mergeObject(this._options, e, !0)
        },
        get: function() {
            return this._options
        }
    }]),
    e
}();
Oh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._backups = {
            camera: {},
            lighting: {},
            postEffect: {}
        },
        this._campusSkyBox = null,
        this._campusBackground = null,
        this._campusSkyBoxColorTween = null,
        this._levelChanging = !1,
        this._lastPickedObject = null
    }
    return e.prototype.setCampusSkyBoxColorScaleFactor = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3;
        this._campusSkyBoxColorTween && this._campusSkyBoxColorTween.stop();
        var i = Utils.parseVector3(this.app.backgroundColorScaleFactor)
            , r = Utils.parseVector3(e)
            , n = this;
        this._campusSkyBoxColorTween = new TWEEN.Tween(i).to(r, t).onUpdate((function() {
            n.app.backgroundColorScaleFactor = [this._object.x, this._object.y, this._object.z]
        }
        )),
        this._campusSkyBoxColorTween.start()
    }
    ,
    e.prototype.updatebackupInfo = function(e, t) {
        var i = this._backups[e];
        i[t] = i[t] || {};
        var r = i[t];
        "camera" == e ? (r.position = this.app.camera.position,
        r.target = this.app.camera.target) : "lighting" == e ? r.value = this.app.lighting : "postEffect" == e && (r.value = this.app.postEffect)
    }
    ,
    e.prototype.clearBackupInfo = function(e, t) {
        delete this._backups[e][t]
    }
    ,
    e.prototype.getBackupInfoValue = function(e, t, i) {
        var r = this._backups[e][t];
        return r ? r[i] : null
    }
    ,
    e.prototype.initAppEvents = function() {
        var e = this;
        this.app.on("cameracontrollerchanged", (function(t) {
            e.app.level.current && e._levelChanging && e.app.camera.stopFlying()
        }
        ), EventTag.LevelFlyBreak),
        this.app.on("dblclick", (function(t) {
            if (0 == t.button) {
                var i = e.app.level
                    , r = i.current;
                if (r) {
                    var n = t.object;
                    if (n != r && function(e) {
                        return !!e && (!e.isTextRegion && !e.isMarker)
                    }(n)) {
                        if (n.isGround)
                            return;
                        var o = !1;
                        n.isBuilding && (o = !0),
                        i.change(n, {
                            autoEnterSubLevel: o
                        })
                    }
                }
            }
        }
        ), EventTag.LevelEnterOperation),
        this.app.on("click", (function(t) {
            if (2 == t.button) {
                var i = e.app.level;
                if (i.current) {
                    var r = t.object;
                    r && r.style.outlineColor && (r.style.outlineColor = null);
                    var n = !1;
                    i.current.isFloor && (n = !0),
                    i.back({
                        autoBackFromSubLevel: n
                    })
                }
            }
        }
        ), EventTag.LevelBackOperation);
        this.app.on(EventType.Pick, (function(t) {
            var i = e.app.level;
            if (i.current) {
                e._lastPickedObject && e._lastPickedObject.style.outlineColor && (e._lastPickedObject.style.outlineColor = null);
                var r = t.object;
                (function(t) {
                    var i = e.app.level.current;
                    return !(!i || !t || t == i || "Ground" == t.type || t.isMarker || i.isCampus && t.isChildOf(i.ground))
                }
                )(r) && (r.style.outlineColor = i.options.outlineColor),
                e._lastPickedObject = r
            }
        }
        ), EventTag.LevelPickOperation),
        this._campusSkyBox = this.app.skyBox,
        this._campusBackground = this.app.background,
        this.app.on("skyboxchange", (function(t) {
            var i = e.app.level.current;
            i && !i.isCampus || (e._campusSkyBox = t.skyBox)
        }
        )),
        this.app.on("backgroundChanged", (function(t) {
            var i = e.app.level.current;
            i && !i.isCampus || (e._campusBackground = t.background)
        }
        ))
    }
    ,
    e.prototype.buildFlyParams = function(e, t) {
        t = t || {};
        var i = this
            , r = this.app.level.options;
        e._flyStart = function() {
            i._levelChanging = !0
        }
        ,
        e._flying = function() {
            i._levelChanging = !0
        }
        ,
        e._flyStop = function() {
            i._levelChanging = !1
        }
        ,
        e._flyComplete = function() {
            i._levelChanging = !1
        }
        ,
        e.distance = e.distance || t.distance,
        e.time = Utils.parseValue(e.time || t.time, r.flyTime),
        e.keepDirection = Utils.parseValue(e.keepDirection || t.keepDirection, !1);
        var n = this.app.level.current;
        if (t.lastObject == n && (e.offset = e.offset || t.offset,
        e.worldOffset = e.worldOffset || t.worldOffset,
        e.xAngle = Utils.parseValue(e.xAngle || t.xAngle, null),
        e.yAngle = Utils.parseValue(e.yAngle || t.yAngle, null),
        void 0 === e.radius))
            if (void 0 !== t.radius)
                e.radius = t.radius;
            else {
                var o = e.boundingBox || n.boundingBox;
                e.radius = o.radius
            }
        e.targetForFlyComplete = n;
        var s = n.userData.camInfo;
        if (s) {
            var a = n.parents.query(".Campus")[0];
            a && (e.target = a.selfToWorld(s.target),
            e.position = a.selfToWorld(s.eye))
        }
        return e
    }
    ,
    e.prototype.registerSceneLevelEvents = function() {
        var e = this;
        this.app.on(EventType.EnterLevel, ".BaseObject", (function(t) {
            e.onBaseObjectLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Campus", (function(t) {
            e.onCampusLevelSetBackground(t)
        }
        ), EventTag.LevelSetBackground),
        this.app.on(EventType.EnterLevel, ".Campus", (function(t) {
            e.onCampusLevelSetEffect(t)
        }
        ), EventTag.LevelSetEffect),
        this.app.on(EventType.EnterLevel, ".Campus", (function(t) {
            e.onCampusLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Campus", (function(t) {
            e.onCampusLevelPickedResultFunc(t)
        }
        ), EventTag.LevelPickedResultFunc),
        this.app.on(EventType.EnterLevel, ".Campus", (function(t) {
            e.onCampusLevelFly(t)
        }
        ), EventTag.LevelFly),
        this.app.on(EventType.LeaveLevel, ".Campus", (function(t) {
            e.onCampusLevelLeaveSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Facade", (function(t) {
            e.onFacadeLevelSetBackground(t)
        }
        ), EventTag.LevelSetBackground),
        this.app.on(EventType.EnterLevel, ".Facade", (function(t) {
            e.onFacadeLevelSetEffect(t)
        }
        ), EventTag.LevelSetEffect),
        this.app.on(EventType.EnterLevel, ".Facade", (function(t) {
            e.onFacadeLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Facade", (function(t) {
            e.onFacadeLevelPickedResultFunc(t)
        }
        ), EventTag.LevelPickedResultFunc),
        this.app.on(EventType.EnterLevel, ".Facade", (function(t) {
            e.onFacadeLevelFly(t)
        }
        ), EventTag.LevelFly),
        this.app.on(EventType.LeaveLevel, ".Facade", (function(t) {
            e.onFacadeLevelLeaveSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Building", (function(t) {
            e.onBuildingLevelSetBackground(t)
        }
        ), EventTag.LevelSetBackground),
        this.app.on(EventType.EnterLevel, ".Building", (function(t) {
            e.onBuildingLevelSetEffect(t)
        }
        ), EventTag.LevelSetEffect),
        this.app.on(EventType.EnterLevel, ".Building", (function(t) {
            e.onBuildingLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Building", (function(t) {
            e.onBuildingLevelPickedResultFunc(t)
        }
        ), EventTag.LevelPickedResultFunc),
        this.app.on(EventType.EnterLevel, ".Building", (function(t) {
            e.onBuildingLevelFly(t)
        }
        ), EventTag.LevelFly),
        this.app.on(EventType.LeaveLevel, ".Building", (function(t) {
            e.onBuildingLevelLeaveSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Floor", (function(t) {
            e.onFloorLevelSetBackground(t)
        }
        ), EventTag.LevelSetBackground),
        this.app.on(EventType.EnterLevel, ".Floor", (function(t) {
            e.onFloorLevelSetEffect(t)
        }
        ), EventTag.LevelSetEffect),
        this.app.on(EventType.EnterLevel, ".Floor", (function(t) {
            e.onFloorLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Floor", (function(t) {
            e.onFloorLevelPickedResultFunc(t)
        }
        ), EventTag.LevelPickedResultFunc),
        this.app.on(EventType.EnterLevel, ".Floor", (function(t) {
            e.onFloorLevelFly(t)
        }
        ), EventTag.LevelFly),
        this.app.on(EventType.LeaveLevel, ".Floor", (function(t) {
            e.onFloorLevelLeaveSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Room", (function(t) {
            e.onRoomLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Room", (function(t) {
            e.onRoomLevelPickedResultFunc(t)
        }
        ), EventTag.LevelPickedResultFunc),
        this.app.on(EventType.EnterLevel, ".Room", (function(t) {
            e.onRoomLevelFly(t)
        }
        ), EventTag.LevelFly),
        this.app.on(EventType.LeaveLevel, ".Room", (function(t) {
            e.onRoomLevelLeaveSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Thing", (function(t) {
            e.onThingLevelSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations),
        this.app.on(EventType.EnterLevel, ".Thing", (function(t) {
            e.onThingLevelPickedResultFunc(t)
        }
        ), EventTag.LevelPickedResultFunc),
        this.app.on(EventType.EnterLevel, ".Thing", (function(t) {
            e.onThingLevelFly(t)
        }
        ), EventTag.LevelFly),
        this.app.on(EventType.LeaveLevel, ".Thing", (function(t) {
            e.onThingLevelLeaveSceneOperations(t)
        }
        ), EventTag.LevelSceneOperations)
    }
    ,
    e.prototype.onBaseObjectLevelSceneOperations = function(e) {}
    ,
    e.prototype.onCampusLevelSetBackground = function(e) {
        this.app.level.options.autoChangeBackground && (this._campusSkyBox ? (this.app.skyBox = this._campusSkyBox,
        this.setCampusSkyBoxColorScaleFactor([1, 1, 1])) : this._campusBackground && (this.app.background = this._campusBackground))
    }
    ,
    e.prototype.onCampusLevelSetEffect = function(e) {}
    ,
    e.prototype.onCampusLevelSceneOperations = function(e) {
        window.MyStart = !0;
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        t.ground && (t.ground.visible = !0);
        for (var i = t.children, r = function() {
            var e = i[n];
            if (e.isBuilding) {
                e.setVisible(!0, !1);
                var t = e.hasFacades();
                t && (e.facades.visible = !0),
                e.children.forEach((function(i) {
                    if (i.isFloor && (t ? e.structShow || (i.visible = !1) : i.visible = !0,
                    e.app.level.options.autoHideFloorObjects && !i.showObjectsInParentLevels)) {
                        t && !e.structShow ? i.children.forEach((function(e) {
                            e.visible = !1
                        }
                        )) : i.children.forEach((function(e) {
                            e.isTextRegion || e.isRoom || e.isDoor || e.isWindow || e.isCombinedObject || (e.visible = !1)
                        }
                        ));
                        if (!t || e.structShow) {
                            var r = i.misc;
                            r && (r.visible = !0,
                            r.node.traverse((function(e) {
                                e != i.misc.node && (!function(e) {
                                    for (; e && e != i.misc.node; ) {
                                        if (e.isDoorOrWin)
                                            return !0;
                                        e = e.parent
                                    }
                                    return !1
                                }(e) ? e.visible = !1 : e.visible = !0)
                            }
                            )))
                        }
                    }
                }
                ))
            } else
                e.visible = !0
        }, n = 0; n < i.length; n++)
            r();
        window.MyStart = !1
    }
    ,
    e.prototype.onCampusLevelPickedResultFunc = function(e) {
        function t(e) {
            return "Outdoors" != e.type && !!function(e) {
                var t = e.app.level.current;
                if (!t)
                    return !0;
                if (e.isWebView)
                    return !0;
                if (e.isMarker)
                    return !0;
                if (e.parent == t) {
                    if (e.isGround)
                        return !0;
                    if (e.isBuilding)
                        return e.onReplaceObejcts || (e.onReplaceObejcts = function(t, i) {
                            if ("outlineColor" !== t)
                                return [];
                            var r = [];
                            if (e.hasFacades())
                                for (var n = e.facades, o = 0, s = n.length; o < s; o++) {
                                    var a = n[o];
                                    a.visible && r.push(a)
                                }
                            return r.length < 1 && function e(t, i) {
                                if (function(e) {
                                    return !!(e && e.isCombinedObject && e.userData) && ("CombineFloorParent" === e.userData.type || "CombineWallParent" === e.userData.type || "CombineRoofParent" === e.userData.type || "CombineCeilingParent" === e.userData.type || void 0)
                                }(t))
                                    i.push(t);
                                else
                                    for (var r = 0, n = t._children.length; r < n; r++)
                                        e(t._children[r], i)
                            }(e, r),
                            r
                        }
                        ),
                        !0;
                    if (e.isThing)
                        return !0
                }
                return !!e.isChildOf(t.ground)
            }(e)
        }
        this.app.picker.pickedResultFunc = function(e) {
            if (t(e))
                return e;
            for (var i = e.parents, r = 0; r < i.length; r++) {
                var n = i[r];
                if (t(n))
                    return n
            }
        }
    }
    ,
    e.prototype.onCampusLevelFly = function(e) {
        var t, i, r = e.object, n = e.previous;
        n && !n.isCampus && n.isChildOf(r) || this.clearBackupInfo("camera", "Campus");
        var o = r.sceneJSONData.camInfo;
        o && (t = o.eye.concat(),
        i = o.target.concat(),
        t = r.selfToWorld(t),
        i = r.selfToWorld(i));
        var s = e.position || this.getBackupInfoValue("camera", "Campus", "position") || t
            , a = e.target || this.getBackupInfoValue("camera", "Campus", "target") || i || r
            , l = 0;
        Utils.isArray(s) && Utils.isArray(a) || (l = e.radius || Math.min(r.boundingBox.radius, 300)),
        this.app.camera.flyTo(this.buildFlyParams({
            position: s,
            target: a,
            radius: l
        }, e))
    }
    ,
    e.prototype.onCampusLevelLeaveSceneOperations = function(e) {
        var t = e.current;
        if (t) {
            var i = e.object;
            if (t.isChildOf(i)) {
                if (t.isCampus)
                    ;
                else if (i.parents.has(t))
                    ;
                else if (i.buildings.has(t)) {
                    i.ground && (i.ground.visible = !1);
                    for (var r = 0; r < i.children.length; r++) {
                        var n = i.children[r];
                        n != e.current && (n.isBuilding ? n.setVisible(!1, !0) : n.visible = !1)
                    }
                }
                e.skipBackupCameraInfo || this.updatebackupInfo("camera", "Campus"),
                this.updatebackupInfo("lighting", "Campus"),
                this.updatebackupInfo("postEffect", "Campus")
            }
        }
    }
    ,
    e.prototype.onFacadeLevelSetBackground = function(e) {}
    ,
    e.prototype.onFacadeLevelSetEffect = function(e) {}
    ,
    e.prototype.onFacadeLevelSceneOperations = function(e) {
        var t = e.object;
        t.visible = !0,
        t.children.forEach((function(e) {
            e.visible = !0
        }
        ))
    }
    ,
    e.prototype.onFacadeLevelPickedResultFunc = function(e) {
        function t(e) {
            var t = e.app.level.current;
            return !t || (t == e || !!e.isChildOf(t))
        }
        this.app.picker.pickedResultFunc = function(e) {
            if (t(e))
                return e;
            for (var i = e.parents, r = 0; r < i.length; r++) {
                var n = i[r];
                if (t(n))
                    return n
            }
        }
    }
    ,
    e.prototype.onFacadeLevelFly = function(e) {
        var t = e.object;
        this.app.camera.flyTo(this.buildFlyParams({
            target: t
        }, e))
    }
    ,
    e.prototype.onFacadeLevelLeaveSceneOperations = function(e) {}
    ,
    e.prototype.onBuildingLevelSetBackground = function(e) {
        this.app.level.options.autoChangeBackground && (this.app.background = null,
        this.app.skyBox = "White",
        this.setCampusSkyBoxColorScaleFactor([.5, .5, .5]))
    }
    ,
    e.prototype.onBuildingLevelSetEffect = function(e) {}
    ,
    e.prototype.onBuildingLevelSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        t.visible = !0,
        t.children.forEach((function(e) {
            e.visible = !0
        }
        )),
        t.parents.query(".Campus")[0].buildings.not(t).visible = !1,
        t.facades.visible = !1;
        var i = t.floors;
        i.visible = !0;
        for (var r = 0; r < i.length; r++) {
            var n = i[r];
            if (t.app.level.options.autoHideFloorObjects) {
                t.hasFacades() ? n.children.forEach((function(e) {
                    e.visible = !0
                }
                )) : n.children.forEach((function(e) {
                    e.isRoom || e.isDoor || e.isWindow || (e.visible = !0)
                }
                ));
                var o = n.misc;
                o && o.node.traverse((function(e) {
                    e.ensureVisible(!0, !0)
                }
                ))
            }
            n.showAllRoofs(!1),
            n.bake(null)
        }
    }
    ,
    e.prototype.onBuildingLevelPickedResultFunc = function(e) {
        function t(e) {
            var t = e.app.level.current;
            if (!t)
                return !0;
            if (t == e)
                return !0;
            if (e.isWebView)
                return !0;
            if (e.isMarker)
                return !0;
            if (e.parent == t) {
                if (e.isThing)
                    return !0;
                if (e.isFloor && "Outdoors" != e.type)
                    return !0
            }
            return !1
        }
        this.app.picker.pickedResultFunc = function(e) {
            if (t(e))
                return e;
            for (var i = e.parents, r = 0; r < i.length; r++) {
                var n = i[r];
                if (t(n))
                    return n
            }
        }
    }
    ,
    e.prototype.onBuildingLevelFly = function(e) {
        var t = e.object
            , i = t.floors
            , r = new THREE.Box3;
        i.forEach((function(e) {
            var t = e.wall;
            t && r._setFromObject(t.node, null, null, !1)
        }
        ));
        var n = BoundingBoxControl._processBox(r, t);
        this.app.camera.flyTo(this.buildFlyParams({
            target: t,
            boundingBox: n,
            radius: n.radius
        }, e))
    }
    ,
    e.prototype.onBuildingLevelLeaveSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        this.updatebackupInfo("lighting", "Building"),
        this.updatebackupInfo("postEffect", "Building")
    }
    ,
    e.prototype.onFloorLevelSetBackground = function(e) {
        this.app.level.options.autoChangeBackground && (this.app.skyBox = "White",
        this.setCampusSkyBoxColorScaleFactor([.25, .25, .25]))
    }
    ,
    e.prototype.onFloorLevelSetEffect = function(e) {}
    ,
    e.prototype.onFloorLevelSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        t.building.floors.not(t).visible = !1,
        t.visible || (t.visible = !0,
        t.showAllRoofs(!1)),
        this.app.level.options.autoBakeFloor && t.bake()
    }
    ,
    e.prototype.onFloorLevelPickedResultFunc = function(e) {
        function t(e) {
            var t = e.app.level.current;
            if (!t)
                return !0;
            if (t == e)
                return !0;
            if (e.isWebView)
                return !0;
            if (e.isMarker)
                return !0;
            if (e.parent == t) {
                if (e.isRoom)
                    return !0;
                if (e.isThing)
                    return !0
            }
            return !1
        }
        this.app.picker.pickedResultFunc = function(e) {
            if (t(e))
                return e;
            for (var i = e.parents, r = 0; r < i.length; r++) {
                var n = i[r];
                if (t(n))
                    return n
            }
        }
    }
    ,
    e.prototype.onFloorLevelFly = function(e) {
        var t = e.object
            , i = e.previous;
        if (i.isBuilding || i.isFloor)
            this.app.camera.flyTo(this.buildFlyParams({
                target: t
            }, e)),
            this.clearBackupInfo("camera", "Floor");
        else {
            var r = this.getBackupInfoValue("camera", "Floor", "position")
                , n = this.getBackupInfoValue("camera", "Floor", "target");
            this.app.camera.flyTo(this.buildFlyParams({
                position: r,
                target: n
            }, e))
        }
    }
    ,
    e.prototype.onFloorLevelLeaveSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        this.updatebackupInfo("camera", "Floor"),
        this.updatebackupInfo("lighting", "Building"),
        this.updatebackupInfo("postEffect", "Building")
    }
    ,
    e.prototype.onRoomLevelSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null);
        for (var i = t.brothers.query(".Room"), r = 0; r < i.length; r++) {
            i[r].things.style.opacity = .25
        }
    }
    ,
    e.prototype.onRoomLevelPickedResultFunc = function(e) {
        function t(e) {
            var t = e.app.level.current;
            if (!t)
                return !0;
            if (e.isWebView)
                return !0;
            if (e.isMarker)
                return !0;
            if (e.isRoom && e != t)
                return !0;
            if (e.isChildOf(t)) {
                if (e.parent == t)
                    return !0
            } else if (e.isThing && e.app.level.current.things.has(e))
                return !0;
            return !1
        }
        this.app.picker.pickedResultFunc = function(e) {
            if (t(e))
                return e;
            for (var i = e.app.level.current, r = e.parents, n = 0; n < r.length; n++) {
                var o = r[n];
                if (o == i)
                    break;
                if (t(o))
                    return o
            }
        }
    }
    ,
    e.prototype.onRoomLevelFly = function(e) {
        var t = e.object;
        if (e.previous.isFloor)
            this.app.camera.flyTo(this.buildFlyParams({
                target: t
            }, e));
        else {
            var i = this.getBackupInfoValue("camera", "Room", "position")
                , r = this.getBackupInfoValue("camera", "Room", "target");
            this.app.camera.flyTo(this.buildFlyParams({
                position: i,
                target: r
            }, e))
        }
    }
    ,
    e.prototype.onRoomLevelLeaveSceneOperations = function(e) {
        var t = e.object;
        if (t.style.outlineColor && (t.style.outlineColor = null),
        !e.lastObject.isChildOf(t))
            for (var i = t.brothers.query(".Room"), r = 0; r < i.length; r++) {
                i[r].things.style.opacity = null
            }
        this.updatebackupInfo("camera", "Room")
    }
    ,
    e.prototype.onThingLevelSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        t.brothers.query(".Thing").style.opacity = .25
    }
    ,
    e.prototype.onThingLevelPickedResultFunc = function(e) {
        function t(e) {
            var t = e.app.level.current;
            return !t || (!!e.isChildOf(t) || (!!e.isWebView || (!!e.isMarker || !(!e.isThing || !e.isBrotherOf(t)))))
        }
        this.app.picker.pickedResultFunc = function(e) {
            if (t(e))
                return e;
            for (var i = e.parents, r = 0; r < i.length; r++) {
                var n = i[r];
                if (t(n))
                    return n
            }
        }
    }
    ,
    e.prototype.onThingLevelFly = function(e) {
        var t = e.object
            , i = Utils.parseValue(e.keepDirection, !0);
        this.app.camera.flyTo(this.buildFlyParams({
            target: t,
            keepDirection: i,
            centerPos: t.boundingBox.center
        }, e))
    }
    ,
    e.prototype.onThingLevelLeaveSceneOperations = function(e) {
        var t = e.object;
        t.style.outlineColor && (t.style.outlineColor = null),
        t.brothers.query(".Thing").style.opacity = null
    }
    ,
    e.prototype.init = function() {
        this.initAppEvents(),
        this.registerSceneLevelEvents()
    }
    ,
    e
}();
Bh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._spriteMaterials = {},
        this._meshMaterials = {}
    }
    return e.prototype.getMaterial = function(e) {
        var t, i = (e = e || {}).url, r = Utils.parseValue(e.useSpriteMaterial, !0);
        if (i) {
            r ? (this._spriteMaterials[i] || (this._spriteMaterials[i] = new THREE.SpriteMaterial({
                color: 16777215,
                transparent: !0
            })),
            t = this._spriteMaterials[i]) : (this._meshMaterials[i] || (this._meshMaterials[i] = new THREE.MeshBasicMaterial({
                transparent: !0,
                side: THREE.DoubleSide,
                depthWrite: !1
            })),
            t = this._meshMaterials[i]),
            t.refCount = t.refCount || 1,
            e.skipRefCount || t.refCount++;
            var n = e.loadComplete
                , o = e.loadTextureComplete
                , s = !t.map || !t.map.image;
            if (s) {
                var a = this.app.resourceManager.textureLoader;
                t.map = a.load(i, (function(e) {
                    e.refCount++,
                    t.map = e,
                    t.needsUpdate = !0,
                    t.visible = !0,
                    o && o({
                        material: t
                    }),
                    n && n({
                        material: t
                    })
                }
                ), (function() {}
                ), (function(e) {
                    THING.Utils.error('[Sprite] load "' + i + '" failed')
                }
                ), !0),
                t.visible = !1
            } else
                n && n({
                    material: t
                })
        } else
            t = r ? new THREE.SpriteMaterial({
                color: 16777215,
                transparent: !0
            }) : new THREE.MeshBasicMaterial({
                transparent: !0,
                side: THREE.DoubleSide,
                depthWrite: !1
            }),
            n && n({
                material: t
            });
        return {
            material: t,
            needLoadTexture: s
        }
    }
    ,
    e.prototype.unloadMaterial = function(e) {
        return !(!e || !this.app.resourceManager.disposeMaterial(e))
    }
    ,
    e.prototype.unloadMaterials = function(e, t) {
        var i = t[e];
        this.unloadMaterial(i) && delete t[e]
    }
    ,
    e.prototype.unload = function(e) {
        this.unloadMaterials(e, this._spriteMaterials),
        this.unloadMaterials(e, this._meshMaterials)
    }
    ,
    e.prototype.onUpdate = function(e) {}
    ,
    e
}();
Fh = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this.app = t,
        this.modelResource = t.modelResource,
        this.refCount = 1,
        this.URL = i,
        this._boundingBox = null,
        this._loadingBox = null,
        this._skinnedMeshAnimations = [],
        this.node = null,
        this.animations = null,
        this.geometry = null,
        this.materials = null
    }
    return e.prototype._setupBoundingBox = function() {
        var e = (new THREE.Box3)._setFromObject(this.node)
            , t = new THREE.Vector3;
        e.getCenter(t);
        var i = new THREE.Vector3;
        e.getSize(i),
        this._boundingBox = {},
        this._boundingBox.center = t.toArray(),
        this._boundingBox.size = i.toArray(),
        this._boundingBox.radius = i.length()
    }
    ,
    e.prototype.load = function(e) {
        var t = this
            , i = e.node
            , r = e.animations
            , n = e.geometry
            , o = e.materials;
        if (n)
            this.animations = n.animations,
            this.geometry = n,
            this.materials = o,
            this._skinnedMeshAnimations = [{
                node: i,
                meshes: i.getSkinnedMeshes()
            }];
        else if (i) {
            var s = this.node != i;
            this.node = i;
            var a = e.models;
            a ? (this.models = a,
            this._skinnedMeshAnimations = [],
            this.models.forEach((function(e) {
                t._skinnedMeshAnimations.push({
                    node: e.node,
                    meshes: e.node.getSkinnedMeshes()
                })
            }
            ))) : (r ? this.animations = r : (s || null === r) && (this.animations = null),
            this._skinnedMeshAnimations = [{
                node: i,
                meshes: i.getSkinnedMeshes()
            }])
        }
        this._setupBoundingBox()
    }
    ,
    e.prototype.get = function() {
        return this.refCount++,
        this
    }
    ,
    e.prototype.unload = function() {
        return (0 === this.refCount || (this.refCount--,
        !this.refCount)) && (!this.modelResource.residentMode && (this.app.resourceManager.unload(this.node),
        this.app.resourceManager.unload(this._loadingBox),
        this.node = null,
        this.animations = null,
        this.geometry = null,
        this.materials = null,
        !0))
    }
    ,
    e.prototype._cloneNode = function() {
        var e = this;
        if (this.node) {
            var t = this.node.clone()
                , i = [];
            return t.traverse((function(e) {
                var t = e.geometry;
                t && (t.refCount = t.refCount || 1,
                t.refCount++),
                e.isSkinnedMesh && i.push(e)
            }
            )),
            this._skinnedMeshAnimations.forEach((function(r) {
                for (var n = r.meshes, o = 0; o < n.length; o++) {
                    var s = n[o]
                        , a = n[o].skeleton
                        , l = t.getBones(e.node, n[o].skeleton)
                        , u = i[o]
                        , c = new THREE.Skeleton(l,a.boneInverses);
                    u.bind(c, s.bindMatrix)
                }
                i.splice(0, n.length)
            }
            )),
            t
        }
        if (this.geometry) {
            var r = new THREE.SkinnedMesh(this.geometry,this.materials);
            return r.scale.set(1, 1, 1),
            r
        }
    }
    ,
    e.prototype.cloneNode = function() {
        var e = this._cloneNode()
            , t = function(e) {
            e.refCount ? e.refCount++ : e.refCount = 1
        };
        return e.traverseMaterials((function(e) {
            for (var i in t(e),
            e) {
                var r = e[i];
                r && r.isTexture && t(r)
            }
        }
        )),
        e
    }
    ,
    _createClass(e, [{
        key: "boundingBox",
        get: function() {
            return this._boundingBox || this._setupBoundingBox(),
            this._boundingBox
        }
    }, {
        key: "loadingBox",
        get: function() {
            return this._loadingBox
        },
        set: function(e) {
            this._loadingBox = e
        }
    }]),
    e
}();
Lh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.isResidentMode = !1,
        this.models = {},
        this.loadingModels = {},
        this.waitModels = []
    }
    return e.prototype.onBackgroundProgress = function(e) {}
    ,
    e.prototype.get = function(e) {
        var t = this.models[e];
        return t ? t.get() : null
    }
    ,
    e.prototype.set = function(e, t, i) {
        var r = this.models[e];
        return r ? r.unload() : (r = new Fh(this.app,e),
        this.models[e] = r),
        t && i && r.load({
            node: t,
            animations: i
        }),
        r
    }
    ,
    e.prototype.getBoundingBox = function(e) {
        var t = this.models[e];
        return t ? t.boundingBox : null
    }
    ,
    e.prototype.unload = function(e) {
        if (void 0 === e) {
            for (var e in this.models)
                this.models[e].unload();
            return this.clear(),
            !0
        }
        if (Utils.isString(e)) {
            var t = this.models[e];
            if (t && t.unload())
                return delete this.models[e],
                !0
        }
        return !1
    }
    ,
    e.prototype.clear = function(e) {
        Utils.isNull(e) ? this.models = {} : delete this.models[e]
    }
    ,
    e.prototype._download = function(e, t, i, r, n) {
        var o = this.get(e);
        if (o)
            delete this.loadingModels[e],
            i && i(o);
        else {
            var s = this;
            new thingjs.GLTFLoader(this.app.loadingManager).loadFromURL({
                url: e,
                useStaticImage: THING.useStaticImage,
                jsonCallback: function(e) {
                    t && t(e)
                },
                modelCallback: function(t) {
                    var r = t.url
                        , n = s.get(r);
                    n || (n = s.set(r)).load(t),
                    delete s.loadingModels[e],
                    i && (i(n) || s.unload(e))
                },
                errorCallback: function(t) {
                    if (delete s.loadingModels[e],
                    t && t.target && 201 === t.target.status) {
                        var i = void 0;
                        try {
                            i = JSON.parse(t.target.response)
                        } catch (e) {
                            THING.Utils.error("Error!")
                        }
                        return THING.Utils.error("[have no right] name: " + i.message + "\nurl: " + e),
                        !0
                    }
                    if (n)
                        return n(t)
                },
                progressCallback: r
            })
        }
    }
    ,
    e.prototype.download = function(e, t, i, r, n) {
        this.loadingModels[e] ? this.waitModels.push({
            url: e,
            jsonCallback: t,
            modelCallback: i,
            progressCallback: r,
            errorCallback: n
        }) : (this.loadingModels[e] = {},
        this._download(e, t, i, r, n))
    }
    ,
    e.prototype.preload = function(e, t) {
        var i = (t = t || {}).complete;
        if (Utils.isArray(e))
            for (var r = 0, n = e.length, o = 0; o < n; o++)
                this.download(e[o], (function() {}
                ), (function(e) {
                    ++r == n && i && i()
                }
                ), (function() {}
                ), (function() {
                    ++r == n && i && i()
                }
                ));
        else
            Utils.isString(e) && this.download(e, (function() {}
            ), (function(e) {
                i && i()
            }
            ), (function() {}
            ), (function() {
                i && i()
            }
            ))
    }
    ,
    e.prototype.needWait = function(e) {
        var t = e.url;
        return !!this.loadingModels[t]
    }
    ,
    e.prototype.update = function() {
        for (var e = 0; e < this.waitModels.length; e++) {
            var t = this.waitModels[e];
            this.needWait(t) || (this._download(t.url, t.jsonCallback, t.modelCallback, t.progressCallback, t.errorCallback),
            this.waitModels.splice(e--, 1))
        }
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.update(e)
    }
    ,
    _createClass(e, [{
        key: "residentMode",
        set: function(e) {
            if (this.isResidentMode = e,
            !e) {
                var t = [];
                for (var i in this.models) {
                    var r = this.models[i];
                    if (0 === r.refCount) {
                        var n = r.URL;
                        r.unload() && t.push(n)
                    }
                }
                for (var o = 0; o < t.length; o++) {
                    n = t[o];
                    delete this.models[n]
                }
            }
        },
        get: function() {
            return this.isResidentMode
        }
    }]),
    e
}();
Ih = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.particles = {}
    }
    return e.prototype.get = function(e) {
        return this.particles[e]
    }
    ,
    e.prototype.set = function(e, t) {
        this.particles[e] = t
    }
    ,
    e.prototype.download = function(e, t) {
        var i = e.appendURL("index.json")
            , r = this;
        new THREE.FileLoader(this.app.loadingManager).load(i, (function(i) {
            var n = JSON.parse(i);
            r.set(e, n),
            t && t(n)
        }
        ), (function() {}
        ), (function() {}
        ))
    }
    ,
    e
}();
Nh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this.camera = t.camera,
        this.updateTime = 0,
        this.lastAdjustCameraNear = 0
    }
    return e.prototype._getMinDistanceForAdjustCameraNear = function(e, t, i, r) {
        var n = Utils.parseVector3(i)
            , o = Utils.parseVector3(this.camera.position)
            , s = Math.min(r, n.distanceTo(o));
        if (s > e) {
            var a = this.app.picker.intersectResult(t[0], t[1], null, {
                ignoreFrameCheck: !1
            });
            if (a && a.picked)
                (n = a.getPickedPosition({
                    skipOtherPick: !0
                })) && (n = Utils.parseVector3(n),
                s = Math.min(s, o.distanceTo(n)))
        }
        return s / e
    }
    ,
    e.prototype._getAdjustCameraNear = function(e) {
        var t = this.camera.distance;
        if (t > 10) {
            var i = this.camera.worldToScreen(this.camera.target)
                , r = this.camera.screenToWorld(i[0], i[1]);
            if (r)
                return this.updateTime >= .5 && (this.updateTime = 0,
                this.lastAdjustCameraNear = this._getMinDistanceForAdjustCameraNear(e, i, r, t)),
                this.lastAdjustCameraNear
        }
        return this.camera.near
    }
    ,
    e.prototype.processAdjustCameraNear = function() {
        var e = Math.max(.1, this._getAdjustCameraNear(120));
        this.app.renderCamera.setNear(e)
    }
    ,
    e.prototype.onUpdate = function() {
        this.updateTime += this.app._deltaTime;
        var e = this.camera._targetObject;
        e && (e.position = this.camera.target)
    }
    ,
    e.prototype.onEnter = function() {
        var e = this;
        this.app.on("cameraChange", (function(t) {
            e.camera.autoAdjustNear && !e.app.renderCamera.isLerping && e.processAdjustCameraNear(),
            e.app.needUpdate = !0
        }
        ), "__cameraNearFixed__");
        var t = !1;
        this.app.on("cameraChangeMouseMove", (function(i) {
            e.app.camera.inputEnabled && !e.app.isPauseEvent(EventType.Pick, null, EventTag.LevelPickOperation) && (t = !0,
            e.app.pauseEvent(EventType.Pick, null, EventTag.LevelPickOperation))
        }
        ), "__disable_outline__"),
        this.app.on("cameraChangeEnd", (function(i) {
            t && (t = !1,
            e.app.resumeEvent(EventType.Pick, null, EventTag.LevelPickOperation))
        }
        ), "__disable_outline__")
    }
    ,
    e.prototype.onLeave = function() {
        this.app.off("cameraChange", "__cameraNearFixed__"),
        this.app.off("cameraChangeMouseMove", "__disable_outline__"),
        this.app.off("cameraChangeEnd", "__disable_outline__")
    }
    ,
    e
}();
AxisTransformControl = function() {
    function e(t) {
        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "translate"
            , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        classCallCheck(this, e),
        t && (this._object = t,
        this._axis = null,
        this._disableAxis = [],
        this.init(t.app, i, n),
        this.control.attach(this._object.node),
        this.app.scene.add(this.control),
        this.control.setPickable(!1))
    }
    return e.prototype.init = function(e, t, i) {
        this.app = e,
        this.control = new THREE.TransformControls(this.app.renderCamera,this.app.mainDomElement),
        this.control.traverse((function(e) {
            e.userData.skipOutline = !0,
            e.userData.useVisibleOnly = !0
        }
        ));
        var r = this;
        this.control.addEventListener("change", (function(e) {
            r.onGizmoChange(e)
        }
        )),
        this.control.addEventListener("objectChange", (function(e) {
            r.onGizmoObjectChange(e)
        }
        )),
        this.control.addEventListener("mouseDown", (function(e) {
            r.onGizmoMouseDown(e)
        }
        )),
        this.control.addEventListener("mouseUp", (function(e) {
            r.onGizmoMouseUp(e)
        }
        )),
        this.control.getGizomNode = function() {
            return r.control.children[0]
        }
        ,
        this.control.getAxisNode = function() {
            return r.control.children[1]
        }
        ,
        this.mode = "translate",
        Utils.isString(t) ? (this.mode = t,
        this.params = i || {}) : this.params = t || {},
        this.app.on("cameraViewChange", (function(e) {
            e.view == CameraProjectionType.Orthographic ? r.setAxis("XZ") : r.setAxis("XYZ")
        }
        )),
        this.app.camera.viewMode == CameraProjectionType.Orthographic && this.setAxis("XZ")
    }
    ,
    e.prototype.onGizmoChange = function(e) {}
    ,
    e.prototype.onGizmoObjectChange = function(e) {
        this._object && (this._object.dirty = !0);
        var t = this.params.change;
        t && t.call(this, {
            object: this._object
        })
    }
    ,
    e.prototype.onGizmoMouseDown = function(e) {
        this.app.camera.disable({
            rotate: !0
        });
        var t = this.params.changeStart;
        t && t.call(this, {
            object: this._object
        })
    }
    ,
    e.prototype.onGizmoMouseUp = function(e) {
        this.app.camera.resume({
            rotate: !0
        });
        var t = this.params.changeEnd;
        t && t.call(this, {
            object: this._object
        })
    }
    ,
    e.prototype.onUpdate = function(e) {
        if (this._object.static)
            return this.control.updateMatrixWorld(),
            !0
    }
    ,
    e.prototype.onRemove = function() {
        this.app.scene.remove(this.control),
        this.control.detach(),
        this.control.dispose()
    }
    ,
    e.prototype.onVisible = function(e) {
        this.control.enabled && (this.control.visible = e)
    }
    ,
    e.prototype.setAxis = function(e) {
        if (this._axis = e,
        this._axis && "XYZ" != this._axis) {
            var t = this
                , i = new THREE.Raycaster;
            this.control.userData.original_pointerHover = this.control.pointerHover,
            this.control.axis = e,
            this.control.pointerHover = function(e) {
                if (void 0 !== this.object && !0 !== this.dragging && (void 0 === e.button || 0 === e.button)) {
                    i.setFromCamera(e, this.camera);
                    var r = i.intersectObjects(this.getGizomNode().picker[this.mode].children, !0)[0] || !1;
                    r ? -1 != t._axis.search(r.object.name) && (this.axis = r.object.name) : this.axis = ""
                }
            }
        } else
            this.control.userData.original_pointerHover && (this.control.pointerHover = this.control.userData.original_pointerHover,
            delete this.control.userData.original_pointerHover)
    }
    ,
    e.prototype.detach = function() {
        this.control.detach()
    }
    ,
    e.prototype.attach = function(e) {
        this.control.attach(e)
    }
    ,
    e.prototype.updateDisableAxis = function(e, t, i) {
        for (var r = -1, n = 0; n < this._disableAxis.length; n++)
            if (this._disableAxis[n].name == e) {
                r = n;
                break
            }
        t ? -1 !== r && this._disableAxis.splice(r, 1) : -1 === r && this._disableAxis.push({
            name: e,
            matchAll: i
        })
    }
    ,
    e.prototype.enableAxis = function(e) {
        var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (e) {
            this.updateDisableAxis(e, t, i);
            var r = this.control;
            if (this._disableAxis.length) {
                var n = this
                    , o = function(e) {
                    if (!e)
                        return !0;
                    for (var t = 0; t < n._disableAxis.length; t++) {
                        var i = n._disableAxis[t];
                        if (i.matchAll) {
                            if (e == i.name)
                                return !0
                        } else if (-1 !== e.indexOf(i.name))
                            return !0
                    }
                    return !1
                }
                    , s = function(e) {
                    e.traverse((function(e) {
                        for (var t = 0; t < n._disableAxis.length; t++) {
                            var i = n._disableAxis[t];
                            e.name == i.name && (e.visible = !1)
                        }
                    }
                    ))
                };
                Utils.setValue(r, "pointerDown", (function(e) {
                    var t = this.getGizomNode().axis;
                    o(t) || Utils.getBackupValue(r, "pointerDown").call(this, e)
                }
                )),
                Utils.setValue(r, "pointerMove", (function(e) {
                    var t = this.getGizomNode().axis;
                    o(t) || Utils.getBackupValue(r, "pointerMove").call(this, e)
                }
                )),
                Utils.setValue(r, "pointerUp", (function(e) {
                    var t = this.getGizomNode().axis;
                    o(t) || Utils.getBackupValue(r, "pointerUp").call(this, e)
                }
                )),
                Utils.setValue(r, "updateMatrixWorld", (function() {
                    Utils.getBackupValue(r, "updateMatrixWorld").call(this);
                    var e = this.getGizomNode().gizmo
                        , t = this.getGizomNode().mode;
                    s(e[t])
                }
                ))
            } else
                Utils.revertValue(r, "pointerDown"),
                Utils.revertValue(r, "pointerMove"),
                Utils.revertValue(r, "pointerUp"),
                Utils.revertValue(r, "updateMatrixWorld")
        }
    }
    ,
    e.prototype.setSize = function(e) {
        THING.Utils.warn("[AxisTransformControl] Please use '.size' to replace 'setSize()'"),
        this.size = e
    }
    ,
    _createClass(e, [{
        key: "object",
        get: function() {
            return this.control.object
        }
    }, {
        key: "node",
        get: function() {
            return this.control
        }
    }, {
        key: "mode",
        set: function(e) {
            if (e) {
                if ("translate" != e && "rotate" != e && "scale" != e)
                    return void THING.Utils.error('[AxisTransformControl] mode is invalid, must be "translate/rotate/scale"');
                this.control.setMode(e)
            }
        },
        get: function() {
            return this.control.getMode()
        }
    }, {
        key: "space",
        set: function(e) {
            if (e) {
                if ("world" != e && "local" != e)
                    return void THING.Utils.error('[AxisTransformControl] space is invalid, must be "world/local"');
                this.control.setSpace(e)
            }
        },
        get: function() {
            return this.control.space
        }
    }, {
        key: "size",
        set: function(e) {
            this.control.setSize(e)
        },
        get: function() {
            return this.control.size
        }
    }, {
        key: "visible",
        set: function(e) {
            this.control.visible = e,
            this.control.enabled = e
        },
        get: function() {
            return this.control.visible
        }
    }]),
    e
}();
Uh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.state = t,
        this.app = t.app,
        this.control = t.control,
        this.root = new THREE.Group,
        this.root.userData.childUseWorldAnglesAlways = !0,
        this.root.name = "EditObjectGroup",
        this.lastRootPosition = null,
        this.lastRootScale = null,
        this.lastRootRotation = null
    }
    return e.prototype.hasChanged = function() {
        var e = this.root.position
            , t = this.root.scale
            , i = this.root.rotation;
        return !(this.lastRootPosition.equals(e) && this.lastRootScale.equals(t) && this.lastRootRotation.equals(i))
    }
    ,
    e.prototype.recordTranslation = function() {
        this.state.execute({
            type: "SetNodeTranslation",
            node: this.root,
            position: this.lastRootPosition,
            scale: this.lastRootScale,
            rotation: this.lastRootRotation
        }),
        this.synTranslation()
    }
    ,
    e.prototype.notify = function(e) {
        for (var t = this.root.children, i = 0; i < t.length; i++) {
            var r = t[i].userData
                , n = this.app.objectManager.get(r.id);
            if (n) {
                var o = n.userData._editCallbacks;
                o && o[e].call(n);
                var s = n.userData.selectObjectCallback;
                s && s.call(n)
            }
        }
    }
    ,
    e.prototype._pushSubNodeAttach = function(e, t, i, r, n) {
        var o = this.app.objectManager.getBaseObject(t);
        e.push({
            type: "AttachNode",
            node: o.node,
            nodeParent: o.node.userData.nodeParent
        })
    }
    ,
    e.prototype.recordSubNodeAttach = function(e, t, i, r) {
        var n = [];
        this._pushSubNodeAttach(n, e, t, i, r),
        this.state.execute(n),
        this.synTranslation()
    }
    ,
    e.prototype._pushSubNodeOnlyAttach = function(e, t, i, r, n, o, s, a, l) {
        for (var u = 0; u < i.length; u++) {
            var c = i[u];
            this.hasSelected(c) && e.push({
                type: "AttachNode",
                node: i[u].node,
                nodeParent: r[u]
            })
        }
    }
    ,
    e.prototype.recordSubNodeOnlyAttach = function(e, t, i, r, n, o, s, a) {
        var l = [];
        this._pushSubNodeOnlyAttach(l, e, t, i, r, n, o, s, a),
        this.state.execute(l),
        this.synTranslation()
    }
    ,
    e.prototype._pushNodeAttach = function(e, t, i, r, n) {
        e.push({
            type: "AttachNode",
            node: t.node,
            nodeParent: i
        })
    }
    ,
    e.prototype.recordNodeAttach = function(e, t, i, r) {
        var n = [];
        this._pushNodeAttach(n, e, t, i, r),
        this.state.execute(n),
        this.synTranslation()
    }
    ,
    e.prototype._pushNodeOnlyAttach = function(e, t, i, r, n, o, s, a, l) {
        e.push({
            type: "AttachNode",
            node: t.node,
            nodeParent: i
        });
        for (var u = 0; u < r.length; u++) {
            r[u] != t && e.push({
                type: "AttachNode",
                node: r[u].node,
                nodeParent: n[u]
            })
        }
    }
    ,
    e.prototype.recordNodeOnlyAttach = function(e, t, i, r, n, o, s, a) {
        var l = [];
        this._pushNodeOnlyAttach(l, e, t, i, r, n, o, s, a),
        this.state.execute(l),
        this.synTranslation()
    }
    ,
    e.prototype._pushNodesAttach = function(e, t, i, r, n) {
        for (var o = 0; o < t.length; o++) {
            var s = t[o]
                , a = i[o];
            e.push({
                type: "AttachNode",
                node: s.node,
                nodeParent: a
            })
        }
    }
    ,
    e.prototype.recordNodesAttach = function(e, t, i, r) {
        var n = [];
        this._pushNodesAttach(n, e, t, i, r),
        this.state.execute(n)
    }
    ,
    e.prototype._pushSubNodesAttach = function(e, t, i, r, n) {}
    ,
    e.prototype.recordSubNodesAttach = function(e, t, i, r) {
        var n = [];
        this._pushSubNodesAttach(n, e, t, i, r),
        this.state.execute(n)
    }
    ,
    e.prototype.synTranslation = function() {
        this.lastRootPosition = this.root.position.clone(),
        this.lastRootScale = this.root.scale.clone(),
        this.lastRootRotation = this.root.rotation.clone();
        for (var e = 0; e < this.root.children.length; e++) {
            var t = this.root.children[e].userData.id;
            if (t)
                this.app.objectManager.get(t).dirty = !0
        }
    }
    ,
    e.prototype.updateRoot = function() {
        this.updateControl(),
        this.updateRootVisible(),
        this.updateRootPosition(),
        this.updateSelections(),
        this.synTranslation(),
        this.app.needUpdate = !0
    }
    ,
    e.prototype._getNodeCenterPosition = function(e) {
        var t = new THREE.Vector3;
        if (this.state._isSubNode(e))
            e.getWorldPosition(t);
        else {
            var i = this.app.objectManager.get(e.userData.id);
            if (i) {
                var r = i.position
                    , n = i.centerPos;
                n ? (t.set(n[0], 0, n[1]),
                i.node.updateMatrixWorld(),
                t.applyMatrix4(i.node.matrixWorld),
                t.y = r[1]) : t = Utils.parseVector3(r)
            } else
                e.getWorldPosition(t)
        }
        return t
    }
    ,
    e.prototype.clearSelections = function() {
        this.state._selectionObjects.clear()
    }
    ,
    e.prototype.addSelection = function(e) {
        this.state._selectionObjects.add(e)
    }
    ,
    e.prototype.hasSelected = function(e) {
        return this.state._selectionObjects.has(e)
    }
    ,
    e.prototype.updateSelections = function() {
        this.state.objects;
        this.clearSelections();
        for (var e = 0; e < this.root.children.length; e++) {
            var t = this.root.children[e].userData
                , i = t.id;
            if (i) {
                var r = this.app.objectManager.get(i);
                t.subNode || this.addSelection(r)
            }
        }
    }
    ,
    e.prototype.updateControl = function() {
        this.control.object || this.root.children.length && (this.control.attach(this.root),
        this.app.scene.add(this.control.node),
        this.synTranslation())
    }
    ,
    e.prototype.updateRootVisible = function() {
        this.root.children.length ? this.root.visible = !0 : this.root.visible = !1,
        this.control.visible = this.root.visible
    }
    ,
    e.prototype.updateRootPosition = function() {
        var e = this.root.children;
        if (e.length) {
            for (var t = new THREE.Vector3, i = 0; i < e.length; i++) {
                var r = e[i]
                    , n = this._getNodeCenterPosition(r);
                t.add(n)
            }
            t.divideScalar(e.length);
            var o = this.root.parent.worldToLocal(t)
                , s = this.root.detachChildren(this.app.scene);
            this.root.position.copy(o),
            this.root.attachChildren(s, this.app.scene)
        }
    }
    ,
    e.prototype.getObjectInfo = function(e, t) {
        for (var i = new Set, r = this.root.children, n = 0; n < r.length; n++) {
            var o = r[n]
                , s = this.app.objectManager.get(o.userData.id);
            if (!i.has(s) && (i.add(s),
            e && e.push(s),
            t)) {
                var a = s.node.userData.nodeParent;
                t.push(a)
            }
        }
    }
    ,
    e.prototype.getSubNodeInfo = function(e, t) {
        var i = this;
        this.root.traverse((function(r) {
            var n = i.app.objectManager.get(r.userData.id);
            if (n && (-1 !== n.getSubNodeIndex(r) && (e && e.push(r),
            t))) {
                var o = r.userData.nodeParent;
                t.push(o)
            }
        }
        ))
    }
    ,
    e.prototype.recordNodeParent = function(e) {
        e.isBaseObject && (e = e.node);
        var t = e.parent;
        t != this.root && (e.userData.nodeParent = t)
    }
    ,
    e.prototype._pushAddObjects = function(e, t) {
        if (t && t.length) {
            for (var i = [], r = 0; r < t.length; r++) {
                var n = t[r];
                this.hasSelected(n) || i.push(n)
            }
            if (i.length)
                for (r = 0; r < i.length; r++) {
                    n = i[r];
                    this.recordNodeParent(n),
                    e.push({
                        type: "AttachNode",
                        node: n.node,
                        nodeParent: this.root
                    })
                }
        }
    }
    ,
    e.prototype._dispatchBreakableEvent = function(e, t) {
        return t.continueFlag = !0,
        this.app.trigger(e, t),
        t.continueFlag
    }
    ,
    e.prototype.addObjects = function(e) {
        var t = [];
        this._pushAddObjects(t, e),
        this.state.execute(t),
        this.updateRoot()
    }
    ,
    e.prototype._pushAddSubNodes = function(e, t) {
        if (t.length)
            for (var i = 0; i < t.length; i++) {
                var r = t[i];
                this.state._isSubNode(r) && (r.isChildOf(this.root) || this.recordNodeParent(r))
            }
    }
    ,
    e.prototype.addSubNodes = function(e) {
        var t = [];
        this._pushAddSubNodes(t, e),
        this.state.execute(t),
        this.updateRoot()
    }
    ,
    e.prototype.addSubNode = function(e) {
        return !!this.state._isSubNode(e) && (!!this.app.objectManager.getBaseObject(e) && (this.recordNodeParent(e),
        this.recordSubNodeAttach(e, this.root, this.state.selectOutlineColor, null),
        this.updateRoot(),
        !0))
    }
    ,
    e.prototype.addSubNodeOnly = function(e) {
        if (!e)
            return !1;
        if (!e.userData.subNode)
            return !1;
        if (!this.app.objectManager.getBaseObject(e))
            return !1;
        var t = []
            , i = [];
        this.getObjectInfo(t, i);
        var r = []
            , n = [];
        this.getSubNodeInfo(r, n);
        for (var o = 0; o < r.length; o++)
            if (r[o] == e) {
                r.splice(o, 1);
                break
            }
        return this.recordNodeParent(e),
        this.recordSubNodeOnlyAttach(e, t, i, r, n, this.root, this.state.selectOutlineColor, null),
        this.updateRoot(),
        !0
    }
    ,
    e.prototype.add = function(e, t) {
        t && this.addSubNode(t.intersect.node) || (this.recordNodeParent(e),
        this.recordNodeAttach(e, this.root, this.state.selectOutlineColor, null),
        this.updateRoot())
    }
    ,
    e.prototype.addOnly = function(e, t) {
        if (!(t && this.addSubNodeOnly(t.intersect.node) || 1 == this.root.children.length && this.has(e))) {
            var i = []
                , r = [];
            this.getObjectInfo(i, r);
            var n = []
                , o = [];
            this.getSubNodeInfo(n, o),
            this.recordNodeParent(e),
            this.recordNodeOnlyAttach(e, this.root, i, r, n, o, this.state.selectOutlineColor, null),
            this.updateRoot()
        }
    }
    ,
    e.prototype.remove = function(e) {
        if (this.state._isSubNode(e))
            for (var t = this.root.children, i = 0; i < t.length; i++) {
                if ((n = t[i]) == e) {
                    var r = n.userData.nodeParent;
                    this.recordSubNodeAttach(e, r, null, this.state.selectOutlineColor);
                    break
                }
            }
        else
            for (t = this.root.children,
            i = 0; i < t.length; i++) {
                var n = t[i]
                    , o = this.app.objectManager.get(n.userData.id);
                if (e == o) {
                    this.app.trigger("unselectEditableObject", {
                        object: o
                    });
                    r = n.userData.nodeParent;
                    this.recordNodeAttach(e, r, null, this.state.selectOutlineColor);
                    break
                }
            }
        this.updateRoot()
    }
    ,
    e.prototype.removeAll = function() {
        if (this.root.children.length) {
            var e = []
                , t = [];
            this.getObjectInfo(e, t);
            var i = []
                , r = [];
            this.getSubNodeInfo(i, r);
            for (var n = 0; n < e.length; n++) {
                var o = e[n];
                this.app.trigger("unselectEditableObject", {
                    object: o
                })
            }
            this.state.canRespondFromCommandManager = !1,
            this.recordNodesAttach(e, t, null, this.state.selectOutlineColor),
            this.recordSubNodesAttach(i, r, null, this.state.selectOutlineColor),
            this.state.canRespondFromCommandManager = !0,
            this.updateRoot()
        }
    }
    ,
    e.prototype.has = function(e) {
        var t = this.root.children;
        if (this.state._isSubNode(e))
            for (var i = 0; i < t.length; i++) {
                if ((r = t[i]).userData.subNode && r == e)
                    return !0
            }
        else
            for (i = 0; i < t.length; i++) {
                var r;
                if (!(r = t[i]).userData.subNode)
                    if (e == this.app.objectManager.get(r.userData.id))
                        return !0
            }
        return !1
    }
    ,
    e.prototype.attach = function() {
        this.root.attachToParent(this.app.scene, this.app.scene)
    }
    ,
    e.prototype.detach = function() {
        this.removeAll(),
        this.control.detach(),
        this.app.scene.remove(this.control.node),
        this.root.detachFromParent(this.app.scene),
        this.updateRoot()
    }
    ,
    e.prototype.clearScene = function() {
        var e = [];
        this.state._pushDeleteSubNodes(e, this.state.subNodes),
        this.state._pushDeleteObjects(e, this.state.objects),
        this.state.execute(e, !0),
        this.updateRoot()
    }
    ,
    e.prototype.toJSON = function() {
        for (var e = Array.from(this.state._selectionObjects), t = 0; t < e.length; t++)
            this.remove(e[t]);
        var i = this.state.subNodes;
        for (t = 0; t < i.length; t++)
            this.remove(i[t]);
        var r = []
            , n = this.state.objects;
        for (t = 0; t < n.length; t++) {
            var o = n[t];
            r.push(o.toJSON())
        }
        for (t = 0; t < i.length; t++)
            this.addSubNode(i[t]);
        for (t = 0; t < e.length; t++)
            this.add(e[t]);
        return JSON.stringify(r)
    }
    ,
    e.prototype.pasteObjects = function() {
        THING.Utils.warn('[EditObjectState] we do not support ".pasteObjects()" anymore, please do not use it')
    }
    ,
    e.prototype.fromJSON = function(e) {
        THING.Utils.warn('[EditObjectState] we do not support ".fromJSON()" anymore, please do not use it')
    }
    ,
    e
}();
zh = function() {
    function e(t) {
        classCallCheck(this, e);
        var i = this;
        this.app = t,
        this.picker = t.picker,
        this.copyObjectsJSONData = [],
        this._selectionObjects = new Set,
        this.canRespondFromCommandManager = !1,
        this._enableDirectMode = !1,
        this._enableKeyMode = !1,
        this._enableAutoRemoveAllWhenClick = !0,
        this.app.on("push", (function(e) {
            i.onPush(e)
        }
        )),
        this.app.on("redo", (function(e) {
            i.onRedo(e)
        }
        )),
        this.app.on("undo", (function(e) {
            i.onUndo(e)
        }
        ));
        var n = {
            changeEnd: function(e) {
                i.group.hasChanged() && (i.group.recordTranslation(),
                i.group.notify("modify"))
            }
        };
        this.control = new AxisTransformControl,
        this.control.init(t, "translate", n),
        this.selectOutlineColor = "#0000FF",
        this.group = new Uh(this)
    }
    return e.prototype.onPush = function(e) {
        this.canRespondFromCommandManager && this.group.updateRoot()
    }
    ,
    e.prototype.onRedo = function(e) {
        this.canRespondFromCommandManager && this.group.updateRoot()
    }
    ,
    e.prototype.onUndo = function(e) {
        this.canRespondFromCommandManager && this.group.updateRoot()
    }
    ,
    e.prototype.notify = function(e, t) {
        var i = e.userData._editCallbacks;
        i && i[t].call(e)
    }
    ,
    e.prototype.startDrag = function(e, t, i, r) {
        if (e) {
            r = r || .1,
            this.app.camera.disable({
                rotate: !0
            }),
            e.pickable = !1,
            e.catchEventAnyTime = !0,
            e.node.userData.skipPick = !0,
            e.position = app.camera.screenToWorld(t, i);
            var n = this;
            e.on("mousemove", (function(e) {
                var t = n.app.picker.pickWorldPosition(e.clientX, e.clientY);
                t || (t = n.app.camera.screenToWorld(e.clientX, e.clientY)),
                t && (t[1] += r,
                this.position = t)
            }
            ), "startDrag_mousemove"),
            e.on("mouseup", (function(e) {
                this.pickable = !0,
                this.catchEventAnyTime = !1,
                delete this.node.userData.skipPick,
                n.group._dispatchBreakableEvent("selectEditableObject", {
                    object: this
                }) && n.selectObject(this),
                this.off("mousemove", null, "startDrag_mousemove"),
                this.off("mouseup", null, "startDrag_mouseup"),
                n.app.camera.resume({
                    rotate: !0
                }),
                n.notify(this, "dragEnd")
            }
            ), "startDrag_mouseup")
        }
    }
    ,
    e.prototype.selectObject = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "translate"
            , i = arguments[2];
        "translate" == t || "rotate" == t ? (this.group.addOnly(e),
        i && (e.userData.selectObjectCallback = i),
        this.setMode(t)) : THING.Utils.error("The mode must be 'translate' or 'rotate'")
    }
    ,
    e.prototype.unselectObject = function(e) {
        this.group.remove(e)
    }
    ,
    e.prototype.setMode = function(e) {
        e && (this.control.mode = e)
    }
    ,
    e.prototype.parseParams = function(e) {
        var t = e.type;
        if ("RouteLine" == t || "PolygonLine" == t) {
            var i = e.points;
            if (!i) {
                i = [[-5, 0, -5], [0, 0, -5], [0, 0, 0], [0, 0, 5], [5, 0, 5]],
                e.points = i,
                e.style = e.style || {};
                var r = e.style;
                if (r.color = Utils.parseValue(r.color, 5824222),
                e.image)
                    void 0 === e.scrollUV && (e.scrollUV = !0)
            }
        } else if ("Water" == t) {
            i = [[-20, 0, -20], [-20, 0, 20], [20, 0, 20], [20, 0, -20]],
            e.points = i,
            e.normalMap0 = Utils.parseValue(e.normalMap0, "images/water/Water_1_M_Normal.jpg"),
            e.normalMap1 = Utils.parseValue(e.normalMap1, "images/water/Water_2_M_Normal.jpg")
        } else if ("Region" == t) {
            i = [[-20, 0, -20], [-20, 0, 20], [20, 0, 20], [20, 0, -20]],
            e.points = i,
            e.fontColor = Math.random(),
            e.fontSize = THING.Math.randomInt(9, 32),
            e.fontText = "Hello"
        }
        return Utils.cloneObject(e)
    }
    ,
    e.prototype.addObjects = function(e) {
        for (var t = [], i = 0; i < e.length; i++) {
            var r = e[i];
            r instanceof BaseObject ? (r.internalUserData.editable = !0,
            t.push(r)) : THING.Utils.error("The object is not BaseObject, so we can not add object to edit state")
        }
        this.group.addObjects(t)
    }
    ,
    e.prototype.createObject = function(e, t) {
        (e = e || {}).internalUserData = {
            editable: !0
        };
        var i = (e = this.parseParams(e)).complete;
        e.complete = function() {
            i && i()
        }
        ;
        var r = this.app.create(e);
        return t && (r.userData._editCallbacks = t),
        r
    }
    ,
    e.prototype._pushDeselectObject = function(e, t) {
        t && e.push({
            type: "AttachNode",
            node: t.node,
            nodeParent: t.node.userData.nodeParent
        })
    }
    ,
    e.prototype._pushDeleteObject = function(e, t) {
        t && this._pushDeselectObject(e, t)
    }
    ,
    e.prototype.deleteObject = function(e) {
        this.notify(e, "remove");
        var t = [];
        this._pushDeleteObject(t, e),
        this.execute(t, !0),
        this.group.updateRoot()
    }
    ,
    e.prototype._pushDeleteObjects = function(e, t) {
        for (var i = 0; i < t.length; i++) {
            var r = t[i];
            this._pushDeleteObject(e, r)
        }
    }
    ,
    e.prototype.deleteObjects = function(e) {
        for (var t = 0; t < e.length; t++)
            this.notify(e[t], "remove");
        var i = [];
        this._pushDeleteObjects(i, e),
        this.execute(i, !0),
        this.group.updateRoot()
    }
    ,
    e.prototype._isSubNode = function(e) {
        return !!e && (!e.isBaseObject && !!e.userData.subNode)
    }
    ,
    e.prototype._isBreakByControlAxis = function(e) {
        var t = e.intersect;
        return (!t || !this._isSubNode(t.node)) && !(!this.control.axis || !this.control.visible)
    }
    ,
    e.prototype._isCanPick = function(e) {
        if (this._isBreakByControlAxis(e))
            return !1;
        var t = e.object;
        if (t) {
            if (t == this.app.outdoors)
                return !1;
            if (!t.internalUserData.editable)
                return !1
        }
        return !0
    }
    ,
    e.prototype._getSortedSubNodes = function(e, t) {
        for (var i = [], r = 0; r < e.length; r++) {
            var n = e[r]
                , o = n.userData
                , s = this.app.objectManager.get(o.id)
                , a = s.getSubNodeIndex(n);
            i.push({
                index: a,
                node: n,
                object: s
            })
        }
        return i.sort(t),
        i
    }
    ,
    e.prototype._pushInsertSubNode = function(e, t) {}
    ,
    e.prototype.insertSubNode = function() {
        var e = this.subNodes;
        if (e.length) {
            var t = [];
            this._pushInsertSubNode(t, e),
            this.execute(t, !0),
            this.group.updateRoot()
        }
    }
    ,
    e.prototype._pushDeleteSubNodes = function(e, t) {}
    ,
    e.prototype.deleteSubNodes = function(e) {
        var t = [];
        this._pushDeleteSubNodes(t, e),
        this.execute(t, !0),
        this.group.updateRoot()
    }
    ,
    e.prototype.deleteSelections = function() {
        var e = Array.from(this._selectionObjects);
        e.length && this.deleteObjects(e);
        var t = this.subNodes;
        t.length && this.deleteSubNodes(t)
    }
    ,
    e.prototype.deselectObjects = function(e) {
        if (e)
            for (var t = 0; t < e.length; t++)
                this.group.remove(e[t])
    }
    ,
    e.prototype.copyObjects = function(e) {
        this.copyObjectsJSONData = [];
        for (var t = 0; t < e.length; t++) {
            var i = e[t]
                , r = i.toJSON();
            r.localPosition = i.localPosition,
            r.localAngles = i.localAngles,
            r.scale = i.scale,
            this.copyObjectsJSONData.push(JSON.stringify(r))
        }
    }
    ,
    e.prototype.selectAll = function() {
        this.group.addObjects(this.objects)
    }
    ,
    e.prototype.clearScene = function() {
        this.group.clearScene()
    }
    ,
    e.prototype.toJSON = function() {
        this._enableDirectMode = !0;
        var e = this.group.toJSON();
        return this._enableDirectMode = !1,
        e
    }
    ,
    e.prototype.fromJSON = function(e) {
        e && this.group.fromJSON(e)
    }
    ,
    e.prototype.execute = function(e, t) {
        if (this._enableDirectMode) {
            var i = this.app.commandManager.create(e, t);
            return i ? i.execute() : null
        }
        return this.app.commandManager.execute(e, t)
    }
    ,
    e.prototype.processAreaPicking = function(e) {
        var t = e.objects;
        if (t) {
            for (var i = this.objects, r = [], n = 0; n < i.length; n++) {
                var o = i[n];
                t.has(o) || r.push(o)
            }
            this.deselectObjects(r),
            t.length && (t[0]instanceof BaseObject ? this.group.addObjects(t) : this.group.addSubNodes(t))
        }
    }
    ,
    e.prototype.onMouseDown = function(e) {}
    ,
    e.prototype.onMouseUp = function(e) {
        e.finishedAreaPicking && this.processAreaPicking(e)
    }
    ,
    e.prototype.onMouseMove = function(e) {
        e.areaPicking && (this._enableDirectMode = !0,
        this.processAreaPicking(e),
        this._enableDirectMode = !1)
    }
    ,
    e.prototype.onClick = function(e) {
        if (this.app.events.canClick(e)) {
            var t = this.app.isKeyPressed(KeyType.Ctrl)
                , i = e.object;
            if (i && this._isCanPick(e))
                if (t) {
                    var r = e.intersect.node;
                    this.group.has(i) ? this.group.remove(i) : this.group.has(r) ? this.group.remove(r) : this.group._dispatchBreakableEvent("selectEditableObject", {
                        object: i
                    }) && this.group.add(i, e)
                } else
                    this.group._dispatchBreakableEvent("selectEditableObject", {
                        object: i
                    }) && this.group.addOnly(i, e);
            else
                t || this.enableAutoRemoveAllWhenClick && this.group.removeAll()
        }
    }
    ,
    e.prototype.onKeyDown = function(e) {
        if (this._enableKeyMode)
            switch (event.keyCode) {
            case KeyType.Q:
                this.control.setSpace("local" === this.control.space ? "world" : "local");
                break;
            case KeyType.EventType:
                this.control.mode = "translate";
                break;
            case KeyType.E:
                this.control.mode = "rotate";
                break;
            case KeyType.R:
                break;
            case KeyType.EqualSign:
            case KeyType.Add:
                this.control.size = this.control.size + .1;
                break;
            case KeyType.Dash:
            case KeyType.Subtract:
                this.control.size = Math.max(this.control.size - .1, .1);
                break;
            case KeyType.Y:
                this.app.isKeyPressed(KeyType.Ctrl) && this.app.commandManager.redo();
                break;
            case KeyType.Z:
                this.app.isKeyPressed(KeyType.Ctrl) && this.app.commandManager.undo();
                break;
            case KeyType.C:
                this.app.isKeyPressed(KeyType.Ctrl) && this.copyObjects(Array.from(this._selectionObjects));
                break;
            case KeyType.V:
                this.app.isKeyPressed(KeyType.Ctrl) && this.pasteObjects();
                break;
            case KeyType.A:
                this.app.isKeyPressed(KeyType.Ctrl) && this.selectAll();
                break;
            case KeyType.Delete:
                this.deleteSelections()
            }
    }
    ,
    e.prototype.onKeyUp = function(e) {}
    ,
    e.prototype.onUpdate = function(e) {}
    ,
    e.prototype.onEnter = function(e, t) {
        if (t) {
            this.canRespondFromCommandManager = !0;
            var i = t.objects;
            if (i)
                for (var r = 0; r < i.length; r++)
                    this.group.add(i[r]);
            this.group.attach(),
            this.control.mode = "translate";
            var n = this;
            this.app.on("areaPickStart", (function(e) {
                var t = n.candidateForSubNodes;
                t.length || (t = n.objects),
                n.app.picker.candidates = t
            }
            ), "editObject_areaPickStart"),
            this.app.on("areaPickEnd", (function(e) {
                n.app.picker.candidates = null
            }
            ), "editObject_areaPickEnd"),
            this.app.modelResource.residentMode = !0
        } else
            THING.Utils.log("Gizmo state need params")
    }
    ,
    e.prototype.onLeave = function(e) {
        this.group.detach(),
        this.canRespondFromCommandManager = !1,
        this.app.modelResource.residentMode = !1,
        this.app.off("areaPickStart", null, "editObject_areaPickStart"),
        this.app.off("areaPickEnd", null, "editObject_areaPickEnd")
    }
    ,
    _createClass(e, [{
        key: "enableKeyMode",
        set: function(e) {
            this._enableKeyMode = e
        },
        get: function() {
            return this._enableKeyMode
        }
    }, {
        key: "areaPicking",
        set: function(e) {
            this.picker.areaPicking = e,
            e || (this.picker.candidates = null)
        },
        get: function() {
            return this.picker.areaPicking
        }
    }, {
        key: "enableAutoRemoveAllWhenClick",
        set: function(e) {
            this._enableAutoRemoveAllWhenClick = e
        },
        get: function() {
            return this._enableAutoRemoveAllWhenClick
        }
    }, {
        key: "objects",
        get: function() {
            var e = [];
            return this.app.objectManager.objects.forEach((function(t) {
                t.internalUserData.editable && e.push(t)
            }
            )),
            e
        }
    }, {
        key: "subNodes",
        get: function() {
            for (var e = [], t = this.group.root.children, i = 0; i < t.length; i++) {
                var r = t[i];
                r.userData.subNode && e.push(r)
            }
            return e
        }
    }, {
        key: "candidateForSubNodes",
        get: function() {
            for (var e = new Set, t = this.group.root.children, i = 0; i < t.length; i++) {
                var r = t[i].userData;
                if (r.subNode) {
                    var n = r.id;
                    n && e.add(this.app.objectManager.get(n))
                }
            }
            var o = [];
            return e.forEach((function(e) {
                o = o.concat(e.subNodes)
            }
            )),
            o
        }
    }]),
    e
}();
Navigation = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t
    }
    return e.prototype._getNavigationObject = function(e, t) {
        if (e.getNavigation(t))
            return e;
        for (var i = e.parents, r = 0; r < i.length; r++) {
            var n = i[r];
            if (n.getNavigation(t))
                return n
        }
        return null
    }
    ,
    e.prototype._tryGetRoomFromPosition = function(e, t) {
        if (!t)
            return null;
        var i = e.isFloor ? e : e.parents.query(".Floor")[0];
        return i ? i.getRoomFromWorldPosition(t) : null
    }
    ,
    e.prototype._getObjectRoot = function(e, t) {
        function i(e, t) {
            if (t == e)
                return e;
            if (t.isChildOf(e))
                return e;
            for (var i = e.parents, r = 0; r < i.length; r++) {
                var n = i[r];
                if (t == n)
                    return n;
                if (t.isChildOf(n))
                    return n
            }
            return null
        }
        var r = i(e, t)
            , n = i(t, e);
        return r.isChildOf(n) ? n : r
    }
    ,
    e.prototype._setupGraph = function(e, t) {
        var i = this._getObjectRoot(e.floor, t.floor);
        if (!i)
            return null;
        for (var r = i; r; r = r.parent)
            if (Utils.isFunction(r.setupGraph))
                return r.setupGraph(e, t);
        return null
    }
    ,
    e.prototype._buildPathes = function(e) {
        for (var t = [], i = null, r = 0; r < e.length; r++) {
            var n = this.app.query("#" + e[r])[0];
            if (n && (!n.isCampus && !n.isFloor)) {
                var o = n.parent;
                if (i != o)
                    t.push({
                        startObject: n,
                        endObject: n
                    }),
                    i = o;
                else
                    t[t.length - 1].endObject = n
            }
        }
        return t
    }
    ,
    e.prototype.findPath = function(e) {
        var t = (e = e || {}).error || function() {
            console.error.apply(console, arguments)
        }
            , i = e.clipAreas
            , r = e.startObject || e.startRoom || e.start
            , n = e.endObject || e.endRoom || e.end;
        if (!r)
            return t({
                text: "Needs start object to find path in navigation"
            }),
            null;
        if (!n)
            return t({
                text: "Needs end object to find path in navigation",
                startObject: r
            }),
            null;
        var o = e.startPosition || r.position
            , s = e.endPosition || n.position;
        if (!o)
            return t({
                text: "Needs start position to find path in navigation",
                startObject: r,
                endObject: n
            }),
            null;
        if (!s)
            return t({
                text: "Needs end position to find path in navigation",
                startObject: r,
                endObject: n,
                startPosition: o
            }),
            null;
        var a = this._getNavigationObject(r, i)
            , l = this._getNavigationObject(n, i);
        if (!a)
            return t({
                text: "The parents of start object are not support navigation",
                startObject: r,
                endObject: n,
                startPosition: o,
                endPosition: s
            }),
            null;
        if (!l)
            return t({
                text: "The parents of end object are not support navigation",
                startParentObject: a,
                startObject: r,
                endObject: n,
                startPosition: o,
                endPosition: s
            }),
            null;
        var u = [];
        if (a == l) {
            var c = a.findPath(o, s, .1, r, n);
            if (!c)
                return t({
                    text: "Find path failed",
                    startParentObject: a,
                    startPosition: o,
                    endPosition: s
                }),
                null;
            u.push({
                entrance: a,
                points: c
            })
        } else {
            var h = {
                id: "start",
                position: o,
                floor: a,
                room: r
            }
                , p = {
                id: "end",
                position: s,
                floor: l,
                room: n
            }
                , d = this._setupGraph(h, p);
            if (!d)
                return t({
                    text: "Create navigation graph failed",
                    startParentObject: a,
                    endParentObject: l
                }),
                null;
            var f = d.findShortestPath(h.id, p.id);
            if (!f || !f.length)
                return t({
                    text: "Find shortest path failed",
                    startPointObject: h,
                    endPointObject: p
                }),
                null;
            u.graphPath = f;
            var m = this._buildPathes(f);
            if (!m.length)
                return null;
            var g, v = (g = m[0]).endObject;
            if (!(g = a.findPath(o, v.position)))
                return t({
                    text: "Find first path failed",
                    startParentObject: a,
                    startPosition: o,
                    endPosition: v.position
                }),
                null;
            u.push({
                points: g,
                entrance: v
            });
            for (var y = 1; y < m.length - 1; y++) {
                var b = m[y];
                if (b.startObject != b.endObject) {
                    var _ = this.findPath({
                        startObject: b.startObject,
                        endObject: b.endObject
                    });
                    if (!_)
                        return t({
                            text: "Find middle path failed",
                            startObject: b.startObject,
                            endObject: b.endObject
                        }),
                        null;
                    u.push(_)
                }
            }
            var x, E = (x = m[m.length - 1]).startObject;
            if (!(x = l.findPath(E.position, s)))
                return t({
                    text: "Find last path failed",
                    endParentObject: l,
                    startPosition: E.position,
                    endPosition: s
                }),
                null;
            u.push({
                points: x,
                entrance: E
            })
        }
        return u
    }
    ,
    e
}();
Wh = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t,
        this._navigation = new Navigation(t),
        this.lineIndex = -1,
        this.floor = null,
        this.lines = [],
        this.routeLines = [],
        this.lineParams = {},
        this._object = null,
        this._defaultObject = null,
        this.speed = 0,
        this.liftSpeed = 0,
        this.startCallback = null,
        this.changeFloorCallback = null,
        this.completeCallback = null
    }
    return e.prototype.findPath = function(e, t, i, r) {
        var n = {
            start: e,
            startPosition: t,
            end: i,
            endPosition: r
        }
            , o = this._navigation.findPath(n);
        return o ? (this.createLine(o),
        o) : null
    }
    ,
    e.prototype.clearPath = function() {
        this.destroyLine()
    }
    ,
    e.prototype.showPath = function() {
        if (this.routeLines.length)
            if (0 === arguments.length)
                for (var e = 0; e < this.routeLines.length; e++) {
                    this.routeLines[e].line.visible = !0
                }
            else if (1 === arguments.length) {
                var t = arguments[0];
                for (e = 0; e < this.routeLines.length; e++) {
                    this.routeLines[e].line.visible = t
                }
            } else if (2 === arguments.length) {
                var i = arguments[0];
                for (t = arguments[1],
                e = 0; e < this.routeLines.length; e++) {
                    var r = this.routeLines[e]
                        , n = r.floor
                        , o = r.line;
                    n == i && (o.visible = t)
                }
            }
    }
    ,
    e.prototype.createEvent = function(e) {
        var t = e;
        return t.speed = this.speed,
        t.liftSpeed = this.liftSpeed,
        t
    }
    ,
    e.prototype.getLinesParent = function(e) {
        return e.building ? e.building : e
    }
    ,
    e.prototype.setLineParams = function(e) {
        (e = e || {}).type = e.type || "RouteLine";
        var t = e.type;
        "Line" == t ? (e.color = e.color || 65280,
        e.dotSize = e.dotSize || 2,
        e.dotColor = e.dotColor || 16711680) : "RouteLine" == t && (e.scrollUV = Utils.parseValue(e.scrollUV, !1)),
        this.lineParams = e
    }
    ,
    e.prototype.createLine = function(e) {
        if (e) {
            var t = this.getLinesParent(e[0].entrance);
            if (t) {
                this.destroyLine(),
                this.lineIndex = 0;
                for (var i = 0; i < e.length; i++) {
                    var r = e[i]
                        , n = r.entrance
                        , o = r.points;
                    this.lines.push({
                        entrance: n,
                        points: o
                    });
                    var s = Utils.cloneObject(this.lineParams);
                    s.parent = t,
                    s.points = o,
                    s.visible = !1,
                    s.arrowFlag = i === e.length - 1;
                    var a = app.create(s);
                    this.routeLines.push({
                        entrance: n,
                        line: a
                    })
                }
            }
        }
    }
    ,
    e.prototype.destroyLine = function() {
        if (this.lines.length) {
            for (var e = 0; e < this.routeLines.length; e++)
                this.routeLines[e].line.destroy();
            this.routeLines = [],
            this.lineIndex = -1,
            this.lines = []
        }
    }
    ,
    e.prototype.start = function(e) {
        if (e = e || {},
        this.stop(),
        this.lines.length && (this.lineIndex = 0,
        this.speed = e.speed,
        this.liftSpeed = e.liftSpeed,
        this.startCallback = e.start,
        this.beforeChangeFloorCallback = e.beforeChangeFloor,
        this.afterChangeFloorCallback = e.afterChangeFloor,
        this.completeCallback = e.complete,
        this.startCallback)) {
            var t = this.lines[0]
                , i = t.floor
                , r = t.points;
            this.startCallback(this.createEvent({
                floor: i,
                path: r
            }))
        }
    }
    ,
    e.prototype.stop = function() {
        this.lineIndex = -1,
        this._object && this._object.stopMoving(),
        this.completeCallback && this.completeCallback(this.createEvent({
            floor: this.floor,
            pos: this._object.position
        }))
    }
    ,
    e.prototype._goWithLineComplete = function(e) {
        if (e < this.lines.length - 1) {
            var t = this;
            this._object.movePath({
                position: this.lines[e + 1].points[0],
                speed: this.liftSpeed,
                complete: function() {
                    var i = t.afterChangeFloorCallback;
                    if (i) {
                        var r = t.lines[e].floor
                            , n = t.lines[e + 1].floor
                            , o = t.lines[e + 1].points
                            , s = o[0];
                        i(t.createEvent({
                            curFloor: r,
                            nextFloor: n,
                            path: o,
                            position: s
                        }))
                    }
                    t.lineIndex = e + 1
                }
            });
            var i = this.beforeChangeFloorCallback;
            if (i) {
                var r = this.lines[e].floor
                    , n = this.lines[e + 1].floor
                    , o = this.lines[e + 1].points
                    , s = this.lines[e].points[this.lines[e].points.length - 1];
                i(this.createEvent({
                    curFloor: r,
                    nextFloor: n,
                    path: o,
                    position: s
                }))
            }
        } else {
            if (this.completeCallback) {
                var a = {
                    floor: this.floor
                };
                if (this._object)
                    a.pos = this._object.position;
                else {
                    var l = this.lines[e];
                    a.pos = l.points[l.points.length - 1]
                }
                this.completeCallback(a)
            }
            this.lineIndex = -1
        }
    }
    ,
    e.prototype.goWithLine = function() {
        var e = this.lines[this.lineIndex]
            , t = this.lineIndex;
        if (this.lineIndex = -1,
        this.floor = e.floor,
        this._object) {
            var i = this;
            this._object.movePath({
                path: e.points,
                speed: this.speed,
                orientToPath: !0,
                complete: function() {
                    i._goWithLineComplete(t)
                }
            })
        } else
            this._goWithLineComplete(t)
    }
    ,
    e.prototype.updateLineIndex = function() {
        -1 !== this.lineIndex && (this.lineIndex >= this.lines.length || this.goWithLine())
    }
    ,
    e.prototype.showNavigationHelper = function() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this.app.query(".Floor").forEach((function(t) {
            t.isOutdoors || t.showNavigationHelper(e)
        }
        ))
    }
    ,
    e.prototype.pickFloor = function(e) {
        if (!e.picked)
            return null;
        var t = e.object;
        return t ? {
            pos: e.pickedPosition,
            floor: t.floor
        } : null
    }
    ,
    e.prototype.onUpdate = function(e) {
        this.updateLineIndex()
    }
    ,
    e.prototype.onEnter = function(e) {
        this.setLineParams();
        var t = new THREE.Object3D;
        this._defaultObject = new BaseObject(this.app)._init(t, null),
        this._defaultObject.visible = !1,
        this._object = this._defaultObject,
        this.app.scene.add(t)
    }
    ,
    e.prototype.onLeave = function(e) {
        this._defaultObject.destroy(),
        this._defaultObject = null,
        this._object = null
    }
    ,
    _createClass(e, [{
        key: "outputLog",
        set: function(e) {
            this._outputLog = e
        },
        get: function() {
            return this._outputLog
        }
    }, {
        key: "object",
        set: function(e) {
            this._object = e || this._defaultObject
        },
        get: function() {
            return this._object
        }
    }]),
    e
}();
function Gh(e) {
    this.app = e.app,
    this.camera = this.app.camera,
    this.savedPosition = this.camera.position,
    this.savedTarget = this.camera.target,
    this.position = e.position,
    this.target = e.target,
    this.time = e.time
}
function CreateRegion(e) {
    this.app = e.app,
    this.scene = this.app.scene,
    this.vertices = e.vertices,
    this.pointColor = e.pointColor,
    this.lineColor = e.lineColor,
    this.regionColor = e.regionColor,
    this.id = e.id
}
Gh.prototype.execute = function() {
    this.camera.flyTo({
        position: this.position,
        target: this.target,
        time: this.time,
        complete: function() {}
    })
}

Gh.prototype.undo = function() {
    this.camera.flyTo({
        position: this.savedPosition,
        target: this.savedTarget,
        time: this.time,
        complete: function() {}
    })
}

CreateRegion.prototype.execute = function() {
    var e = this.app.create({
        type: "PolygonRegion",
        vertices: this.vertices,
        pointColor: this.pointColor,
        lineColor: this.lineColor,
        regionColor: this.regionColor
    });
    this.id = e.id
}

CreateRegion.prototype.undo = function() {
    var e = this.app.objectManager.get(this.id);
    e && e.destroy()
}
;
var Xh = 0
    , Jh = 1
    , Yh = 2
    , Qh = 3;
function ExpandObjects(e) {
    this.app = e.app,
    this.setParam(e),
    this.expandingCount = 0,
    this.expandState = Xh
}
function SetNodeTranslation(e) {
    this.app = e.app,
    this.node = e.node,
    this.oldPosition = e.position,
    this.oldScale = e.scale,
    this.oldRotation = e.rotation,
    this.position = this.node.position.clone(),
    this.scale = this.node.scale.clone(),
    this.rotation = this.node.rotation.clone()
}
function AttachNode(e) {
    this.app = e.app,
    this.node = e.node,
    this.nodeParent = e.nodeParent,
    this.oldNodeParent = this.node.parent
}
function SetObjectTranslation(e) {
    this.app = e.app,
    this.object = e.object,
    this.oldPosition = e.position,
    this.oldScale = e.scale,
    this.oldAngles = e.angles || e.offsetAngles,
    this.position = this.object.position,
    this.scale = this.object.scale,
    this.angles = this.object.angles
}
function SetObjectStyle(e) {
    this._app = e.app,
    this._attributes = {}
}
ExpandObjects.prototype.initPosition = function() {
    for (var e = 0; e < this.objs.length; e++) {
        var t = this.objs[e];
        t.internalUserData.expandInitPos = t.internalUserData.expandInitPos || t.node.position.clone()
    }
}

ExpandObjects.prototype.clearInitPosition = function() {
    for (var e = 0; e < this.objs.length; e++) {
        delete this.objs[e].internalUserData.expandInitPos
    }
}

ExpandObjects.prototype.setParam = function(e) {
    this.objs = e.objects || this.objs,
    this.flyTime = e.time || this.flyTime || 1e3,
    this.length = e.length || e.distance || this.length || 10,
    this.horzMode = Utils.parseValue(e.horzMode, this.horzMode),
    this.hideRoof = Utils.parseValue(e.hideRoof, this.hideRoof),
    this.callback = e.complete || this.callback,
    this.expandFloorsNumber = e.number || 5,
    this.skipRoof = Utils.parseValue(e.skipRoof, this.skipRoof)
}

ExpandObjects.prototype.disableUpdateBoundingBox = function(e, t) {
    e.disableUpdateBoundingBox = t,
    e.parents.forEach((function(e) {
        e.disableUpdateBoundingBox = t
    }
    ))
}

ExpandObjects.prototype.expandObj = function(e, t) {
    this.initPosition();
    var i = Utils.parseVector3(e.internalUserData.expandInitPos).distanceTo(e.node.position)
        , r = this.horzMode
        , n = t * this.length - i
        , o = 0
        , s = this;
    e.expandTween = new TWEEN.Tween({
        progress: 0
    }).to({
        progress: 1
    }, this.flyTime).easing(TWEEN.Easing.Linear.None).onStart((function() {
        if (e instanceof  Floor && !Utils.isNull(s.hideRoof) && !s.skipRoof) {
            var t = !s.hideRoof;
            e.traverseRoofs((function(e) {
                e.visible != t && (e._changeVisibleByExpand = !0,
                e.visible = t)
            }
            ))
        }
        s.disableUpdateBoundingBox(e, !0)
    }
    )).onStop((function() {
        s.disableUpdateBoundingBox(e, !1)
    }
    )).onUpdate((function() {
        var t = this._object.progress - o
            , i = n * t;
        o = this._object.progress,
        "x" === r || "X" === r ? e.translateX(i) : "y" === r || "Y" === r ? e.translateY(i) : "z" === r || "Z" === r || r ? e.translateZ(i) : e.translateY(i)
    }
    )).onComplete((function() {
        s.disableUpdateBoundingBox(e, !1),
        s.onExpandComplete(),
        t == s.objs.length - 1 && s.app.events.dispatchEvent({
            type: "expand",
            object: e.parent
        })
    }
    )).start()
}

ExpandObjects.prototype.unexpandObj = function(e, t) {
    var i = Utils.parseVector3(e.internalUserData.expandInitPos).distanceTo(e.node.position)
        , r = this.horzMode
        , n = i
        , o = 0;
    this.length < 0 && (n *= -1);
    var s = this;
    e.unexpandTween = new TWEEN.Tween({
        progress: 0
    }).to({
        progress: 1
    }, this.flyTime).easing(TWEEN.Easing.Linear.None).onStart((function() {
        s.disableUpdateBoundingBox(e, !0)
    }
    )).onStop((function() {
        s.disableUpdateBoundingBox(e, !1)
    }
    )).onUpdate((function() {
        var t = this._object.progress - o
            , i = n * t;
        o = this._object.progress,
        "x" === r || "X" === r ? e.translateX(-i) : "y" === r || "Y" === r ? e.translateY(-i) : "z" === r || "Z" === r || r ? e.translateZ(-i) : e.translateY(-i)
    }
    )).onComplete((function() {
        if (s.disableUpdateBoundingBox(e, !1),
        e instanceof  Floor && s.hideRoof && !s.skipRoof) {
            var i = s.hideRoof;
            e.traverseRoofs((function(e) {
                e._changeVisibleByExpand && (delete e._changeVisibleByExpand,
                e.visible = i)
            }
            ))
        }
        s.onExpandComplete(),
        t == s.objs.length - 1 && s.app.events.dispatchEvent({
            type: "unexpand",
            object: e.parent
        })
    }
    )).start()
}

ExpandObjects.prototype.execute = function() {
    if (this.expandState != Jh && this.expandState != Yh) {
        this.expandState == Qh && this.stopExpanding(),
        this.expandingCount = 0,
        this.expandState = Jh;
        for (var e = 0, t = 0; t < this.objs.length; t++) {
            var i = this.objs[t];
            this.expandObj(i, e),
            e++,
            this.horzLength && e % this.expandFloorsNumber == 0 && (e = 0)
        }
    }
}

ExpandObjects.prototype.undo = function() {
    if (this.expandState != Qh && this.expandState != Xh) {
        this.expandState == Jh && this.stopExpanding(),
        this.expandingCount = 0,
        this.expandState = Qh;
        for (var e = 0; e < this.objs.length; e++) {
            var t = this.objs[e];
            this.unexpandObj(t, e)
        }
    }
}

ExpandObjects.prototype.stopExpanding = function() {
    if (this.expandState != Xh)
        for (var e = 0; e < this.objs.length; e++) {
            var t = this.objs[e];
            t.expandTween && (t.expandTween.stop(),
            t.expandTween = null),
            t.unexpandTween && (t.unexpandTween.stop(),
            t.unexpandTween = null)
        }
}

ExpandObjects.prototype.onExpandComplete = function() {
    this.expandState != Xh ? (this.expandingCount++,
    this.expandingCount < this.objs.length || (this.expandState == Jh ? (this.expandState = Yh,
    this.callback && this.callback(this.expandState)) : this.expandState == Qh && (this.clearInitPosition(),
    this.expandState = Xh,
    this.callback && this.callback(this.expandState)))) : THING.Utils.error("onExpandComplete should not come here!")
}

SetNodeTranslation.prototype.execute = function() {
    this.node.position.copy(this.position),
    this.node.scale.copy(this.scale),
    this.node.rotation.copy(this.rotation),
    this.node.updateMatrixWorld()
}

SetNodeTranslation.prototype.undo = function() {
    this.node.position.copy(this.oldPosition),
    this.node.scale.copy(this.oldScale),
    this.node.rotation.copy(this.oldRotation),
    this.node.updateMatrixWorld()
}

AttachNode.prototype.execute = function() {
    this.node && this.nodeParent && (this.nodeParent.updateMatrixWorld(),
    this.node.attachToParent(this.nodeParent, this.app.scene))
}

AttachNode.prototype.undo = function() {
    this.node && this.oldNodeParent && (this.oldNodeParent.updateMatrixWorld(),
    this.node.attachToParent(this.oldNodeParent, this.app.scene))
}

SetObjectTranslation.prototype.execute = function() {
    this.object.position = this.position,
    this.object.scale = this.scale,
    this.object.angles = this.angles
}

SetObjectTranslation.prototype.undo = function() {
    this.object.position = this.oldPosition,
    this.object.scale = this.oldScale,
    this.object.angles = this.oldAngles
}

SetObjectStyle.prototype.execute = function(e) {
    for (var t = Object.keys(this._attributes), i = 0; i < t.length; i++) {
        var r = t[i]
            , n = this._attributes[r];
        void 0 !== n && (e.style[r] = n)
    }
}

SetObjectStyle.prototype.undo = function() {}

SetObjectStyle.prototype.setAttribute = function(e, t) {
    this._attributes[e] = t
}

SetObjectStyle.prototype.getAttribute = function(e) {
    return this._attributes[e]
}
;
var ApplyObjectTheme = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t.app,
        this.object = t.object,
        this.params = t.params
    }
    return e.prototype.execute = function() {
        this.object.style._inheritThemeName === this.params.name && (this.params.traverse || "CombinedObject" === this.object.type ? this.object.applyTheme(this.params.name, this.params.traverse, this.params.force) : this.object.style._applyTheme && this.object.style._applyTheme(this.params.name, this.params.force))
    }
    ,
    e.prototype.undo = function() {}
    ,
    e
}();
setObjectLodLevel = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = t.app,
        this.object = t.object,
        this.params = t.params
    }
    return e.prototype.execute = function() {
        this.object.lodLevel = this.params.level
    }
    ,
    e.prototype.undo = function() {}
    ,
    e
}();
function PlayObjectAnimation(e) {
    this.app = e.app,
    this.object = e.object,
    this.params = e.params
}
PlayObjectAnimation.prototype.execute = function() {
    this.object.playAnimation(this.params)
}

PlayObjectAnimation.prototype.undo = function() {}
;
var op = function() {
    function e() {
        classCallCheck(this, e),
        this._app = ThingApp.current
    }
    return e.prototype.onLoad = function(e, t, i, r) {
        var n = e.url
            , o = this
            , s = this._app.create({
            type: "Campus",
            url: n,
            complete: function() {
                e.campuses || (e.campuses = []),
                e.campuses.push(s),
                Utils.timer.setTimeout((function() {
                    o._app.trigger("load", {
                        app: o._app,
                        scene: s,
                        buildings: s.buildings
                    })
                }
                )),
                i(e)
            }
        })
    }
    ,
    e
}();
sp = {
    Ready: 0,
    Loaded: 1,
    Loading: 2
};
ap = function(e, t, i, r, n, o) {
    e.onLoad(t, i, (function() {
        t._state = sp.Loaded,
        n({
            bundle: t
        }),
        "function" == typeof r && r()
    }
    ), (function(e) {
        o(e)
    }
    ))
};
lp = function() {
    function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        classCallCheck(this, e),
        this._uuid = Utils.generateUUID(),
        this._url = Utils.parseValue(t.url, ""),
        this._info = {},
        this._classNameInfo = {
            main: "",
            others: []
        },
        this._state = sp.Ready,
        this._loadingPromise = null,
        this._reloadingPromise = null,
        this._callbacks = []
    }
    return e.prototype.reload = function(e) {
        var t = this
            , i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , r = this._info.type
            , n = e[r];
        return n && n.onReload ? this._reloadingPromise = new Promise((function(e, r) {
            n.onReload(t, i, (function() {
                e({
                    bundle: t
                })
            }
            ), (function(e) {
                r()
            }
            ))
        }
        )) : this.load(e, i)
    }
    ,
    e.prototype.load = function(e) {
        var t = this
            , i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , r = arguments[2];
        if (this._state === sp.loaded)
            return this._loadingPromise;
        this._state = sp.Loading;
        var n = Utils.parseValue(i.bundleFileName, "bundle.json")
            , o = this._url.appendPath(n)
            , s = this;
        return this._loadingPromise = new Promise((function(n, a) {
            Utils.loadJSONFile(o, (function(o) {
                t._info = o;
                var l = t._info.type
                    , u = e[l];
                u ? ap(u, s, i, r, n, a) : Utils.timer.setTimeout((function() {
                    var t = e[l];
                    t ? ap(t, s, i, r, n, a) : a("The bundle type '" + l + "' is unknown, should register bundler loader for it")
                }
                ), 100)
            }
            ), (function() {}
            ), (function(e) {
                a(e)
            }
            ))
        }
        )),
        this._loadingPromise
    }
    ,
    e.prototype.waitForComplete = function() {
        return this._reloadingPromise ? this._reloadingPromise : this._loadingPromise
    }
    ,
    e.prototype.dispose = function() {
        var e = this._callbacks.onDispose;
        e && e.call(this)
    }
    ,
    _createClass(e, [{
        key: "loaded",
        get: function() {
            return this._state === sp.Loaded
        }
    }, {
        key: "loading",
        get: function() {
            return this._state === sp.Loading
        }
    }, {
        key: "uuid",
        get: function() {
            return this._uuid
        }
    }, {
        key: "url",
        get: function() {
            return this._url
        }
    }, {
        key: "info",
        get: function() {
            return this._info
        }
    }, {
        key: "classNameInfo",
        get: function() {
            return this._classNameInfo
        }
    }, {
        key: "callbacks",
        get: function() {
            return this._callbacks
        }
    }, {
        key: "isBundle",
        get: function() {
            return !0
        }
    }]),
    e
}();
up = function() {
    function e() {
        classCallCheck(this, e),
        this._bundles = new Map,
        this._loaders = {
            scene: new op
        }
    }
    return e.prototype.registerBundleLoader = function(e, t) {
        this._loaders[e] = t
    }
    ,
    e.prototype.loadBundle = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = arguments[2]
            , r = this._collectBundles(e);
        return this._loadBundles(r, t, i),
        1 === r.length ? r[0] : r
    }
    ,
    e.prototype._collectBundles = function(e) {
        Utils.isString(e) && (e = [e]);
        var t = this;
        return e.map((function(e) {
            var i = t._bundles.get(e);
            return i || (i = new lp({
                url: e
            }),
            t._bundles.set(e, i),
            i)
        }
        ))
    }
    ,
    e.prototype._loadBundles = function(e, t, i) {
        var r = this;
        return e.waitForEachSync((function(e) {
            return e.loaded ? e.reload(r._loaders, t, i) : e.load(r._loaders, t, i)
        }
        ))
    }
    ,
    e.prototype.clearBundleCache = function() {
        this._bundles.forEach((function(e) {
            e.dispose()
        }
        )),
        this._bundles.clear()
    }
    ,
    e
}();
function cp(e) {
    THREE.WebGLRenderer.call(this, e)
}
EventType.AppComplete = "complete",
EventType.LoadCampusProgress = "progress",
EventType.LoadCampus = "load",
EventType.UnloadCampus = "unload",
EventType.PickObject = "pick",
EventType.Dragging = "drag",
EventType.CreateObject = "create",
EventType.DestroyObject = "destroy",
EventType.ExpandBuilding = "expand",
EventType.UnexpandBuilding = "unexpand",
EventType.SelectObject = "select",
EventType.DeselectObject = "deselect",
EventType.ObjectSelectionChanged = "selectionchange",
EventType.PickedObjectChanged = "pickchange",
EventType.BeforeLevelChange = "beforelevelchange",
EventType.Pick = "pick",
EventType.Unpick = "unpick",
EventType.PickChange = "pickchange",
EventType.AreaPickStart = "areapickstart",
EventType.AreaPicking = "areapicking",
EventType.AreaPickEnd = "areapickend",
EventType.BeforeLoad = "beforeload",
EventTag.Default = "__default__",
EventTag.LevelSetEffect = "__level_set_effect__",
EventTag.LevelPickMethod = "__level_pick_operation__",
EventTag.LevelEnterMethod = "__level_enter_operation__",
EventTag.LevelBackMethod = "__level_back_operation__",
EventTag.LevelFlyBreak = "__level_fly_break__",
EventTag.LevelPickOperation = "__level_pick_operation__",
EventTag.LevelCameraController = "__level_camera_controller__",
CameraView.LeftView = "leftview",
CameraView.RightView = "rightview",
CameraView.FrontView = "frontview",
CameraView.BackView = "backview",
cp.prototype = Object.assign(Object.create(THREE.WebGLRenderer.prototype), {
    constructor: cp,
    isWebGL1Renderer: !0
});
var hp = 4
    , ThingApp = function() {
    function App(t) {
        if (classCallCheck(this, e),
        t = t || {},
        this.tryUseCurrentApp(t))
            return e.current;
        e.current = this,
        this._useAsLoader = !1,
        this._useAsLoaderTimes = 0,
        this._skipUnbindAppEvents = !1,
        this.tree = {},
        this.domElement = null,
        this._inputElement = null,
        this.scene = null,
        this.camera = null,
        this.renderCamera = null,
        this._lightGroup = null,
        this.picker = null,
        this.enableGPUPicker = !0,
        this.sceneURL = "";
        this.baseURL = _TextKeyEncoder.toStr([87, 226, 191, 239, 69, 108, 125, 170, 74, 24, 83, 106, 232, 134, 141, 122, 5, 230, 106, 232, 86, 91, 132, 34, 209, 138, 177, 45, 52, 124]);
        "321paevasd1x" == _TextKeyEncoder.toStr([94, 250, 162, 253, 87, 52, 51, 168, 92, 26, 80, 44]) ? (this.modelURL = _TextKeyEncoder.toStr([87, 226, 191, 239, 69, 108, 125, 170, 89, 14, 80, 37, 234, 192, 139, 103, 17, 161, 122, 168, 24, 92, 136, 99, 197, 132, 184, 54, 40, 49, 61, 28, 55, 119, 178, 64, 69, 188, 163, 161, 153, 89, 104, 150, 158, 150, 203, 33, 152, 174, 95, 157, 84]),
        this.baseURL = _TextKeyEncoder.toStr([87, 226, 191, 239, 69, 108, 125, 170, 89, 14, 80, 37, 234, 192, 139, 103, 17, 161, 122, 168, 24, 92, 136, 99, 197, 132, 184, 54, 40, 49, 61, 28, 55, 119, 178, 64, 69, 188, 163, 161, 153, 89, 104, 150, 158, 150, 203])) : this.modelURL = "https://model.3dmomoda.com/models/",
        this.spriteResource = null,
        this.modelResource = null,
        this.particleResource = null,
        this.objectManager = null,
        this.server = null,
        this.viewPointManger = null,
        this.webViewManager = null,
        this._floorLoaderManager = null,
        this.campusLoader = null,
        this.controls = [],
        this._elapsedTime = 0,
        this._deltaTime = 0,
        this._time = 0,
        this._currentFrame = 0,
        this._dirtyFrameCount = 0,
        this._fpsLimitedDelta = 0,
        this._fpsLimitedPreviousDelta = 0,
        this._tweenTime = 0,
        this.curView = null,
        this._bgColor = Utils.parseColor(9474192),
        this.stateManager = null,
        this.commandManager = null,
        this.inited = !1,
        this.initDomElementHeight = "",
        this._fpsTimes = [],
        this.renderStates = {},
        this._pixelRatio = 1,
        this._renderOptions = {},
        this.uuid = THING.Math.generateUUID(),
        this.parseOptions(t),
        this.init(t),
        this.resizeLock = !1,
        this._currentHTMLMarker = null,
        ThemeManager.start(this),
        Utils.notifyAppComplete(!0)
    }
    return App.prototype.tryUseCurrentApp = function(t) {
        if (!e.current)
            return !1;
        if (!e.current.useAsLoader)
            return !1;
        var i = e.current;
        i._useAsLoaderTimes && !i._skipUnbindAppEvents && i.events.unbindAppEvents(i.uuid),
        i.uuid = THING.Math.generateUUID(),
        i._useAsLoaderTimes++;
        var r = i.confirmURL(t.url);
        return r && i._loadInitCampus(r, t),
        !0
    }
    ,
    App.prototype.parseOptions = function(e) {
        this.options = e,
        e.userParameters = Utils.cloneObject(e);
        "321paevasd1x" == _TextKeyEncoder.toStr([94, 250, 162, 253, 87, 52, 51, 168, 92, 26, 80, 44]) && (this.options.loaderResourceUrl = this.options.loaderResourceUrl || _TextKeyEncoder.toStr([87, 226, 191, 239, 69, 108, 125, 170, 89, 14, 80, 37, 234, 192, 139, 103, 17, 161, 122, 168, 24, 92, 136, 99, 197, 132, 184, 54, 40, 49, 61, 28, 55, 119, 178, 64, 69, 188, 163, 161, 153, 89, 104, 150, 158, 150, 203])),
        this.appKey = e.appKey || e.ak || "app_test_key";
        var t = e.container || e.el || "div3d";
        if (t && (Utils.isString(t) ? this.domElement = document.getElementById(t) : this.domElement = t),
        this.domElement) {
            this.domElement.style.cssText += "top: 0; left: 0; position: relative; overflow: hidden";
            var i = document.getElementById("__signDom__");
            i && i.parentElement == this.domElement && i.remove();
            var r = document.getElementById("__rendererDom__");
            r && r.parentElement == this.domElement && r.remove();
            var n = document.createElement("div");
            if (n.id = "__signDom__",
            n.style.cssText = "position: absolute;top: -1000px;left: 0",
            this.domElement.appendChild(n),
            this._inputElement = document.createElement("input"),
            this._inputElement.setAttribute("type", "text"),
            this._inputElement.setAttribute("readonly", "true"),
            this._inputElement.setAttribute("id", "inp"),
            n.appendChild(this._inputElement),
            this.domElement.appendChild(n),
            !1 === e.backwardEnabled && this.setBackwardEnabled(!1),
            this.useOcclusionMap = !1,
            e.useOcclusionMap && (this.useOcclusionMap = e.useOcclusionMap),
            this.splitLoadSpeed = .1,
            e.loadSpeed && (this.splitLoadSpeed = e.loadSpeed),
            this.loadMode = 0,
            e.loadMode && (this.loadMode = e.loadMode),
            Utils.isString(e.url)) {
                if (this.sceneURL = this.confirmURL(e.url),
                !e.skyBox && !e.background) {
                    "321paevasd1x" == _TextKeyEncoder.toStr([94, 250, 162, 253, 87, 52, 51, 168, 92, 26, 80, 44]) ? e.skyBox = "White" : e.skyBox = "Dark"
                }
            } else
                e.skyBox || e.background || (e.background = this._bgColor);
            e.keepBackgroundAspect && (this._keepBackgroundAspect = e.keepBackgroundAspect),
            Utils.parseValue(e.isMobile, !1) && (this._isMobile = !0),
            this.modelURL = e.modelURL || this.modelURL,
            this.resourceLibraryUrl = e.resourceLibraryUrl,
            this.options.maxTextureSize = this.options.maxTextureSize || 2048,
            this._useAsLoader = Utils.parseValue(this.options.useAsLoader, !1),
            this._skipUnbindAppEvents = Utils.parseValue(this.options.skipUnbindAppEvents, !1),
            this.enableGPUPicker = Utils.parseValue(e.enableGPUPicker, !this.isMobileDevice),
            e.disablePlugins && (oe = !0,
            se = !0),
            this._useTryCatch = e.useTryCatch
        } else
            THING.Utils.error(R)
    }
    ,
    App.prototype.confirmURL = function(e, t) {
        if (!e)
            return "";
        if (Utils.isArray(e)) {
            for (var i = 0; i < e.length; i++)
                e[i] = this.confirmURL(e[i]);
            return e
        }
        if (-1 !== e.indexOf("http://") || -1 !== e.indexOf("https://")) {
            if (window.location) {
                var r = window.location.protocol;
                r && "https:" == r && (r += "//",
                -1 !== e.indexOf("http://") && (e = e.replace("http://", r)))
            }
            return e
        }
        return 0 == e.indexOf("./") || 0 == e.indexOf("../") || 0 == e.indexOf("/") ? e : this.options.resourceLibraryUrl ? this.options.resourceLibraryUrl.appendURL(e.trimLeft(this.options.resourceLibraryUrl)) : (t = t || this.baseURL).appendURL(e)
    }
    ,
    App.prototype.confirmBaseURL = function(e) {
        return this.options.resourceLibraryUrl ? this.options.resourceLibraryUrl.appendPath("/") : e
    }
    ,
    App.prototype.confirmModelURL = function(e) {
        return this.resourceLibraryUrl ? this.resourceLibraryUrl.appendPath("models").appendPath(e).appendPath("/0/gltf/") : this.modelURL ? this.modelURL.appendPath(e).appendPath("/0/gltf/") : void 0
    }
    ,
    App.prototype.confirmTextureURL = function(e, t) {
        return this.resourceLibraryUrl ? this.resourceLibraryUrl.appendPath("textures").appendPath(e + "." + t) : "https://static.3dmomoda.com/textures/" + e + "." + t
    }
    ,
    App.prototype.collectRenderStates = function() {
        for (var e = performance.now(); this._fpsTimes.length > 0 && this._fpsTimes[0] <= e - 1e3; )
            this._fpsTimes.shift();
        this._fpsTimes.push(e);
        var t = this._fpsTimes.length
            , i = this.renderer.info.memory
            , r = this.renderer.info.render;
        this.renderStates = {
            fps: t,
            geometries: i.geometries,
            textures: i.textures,
            frame: r.frame,
            calls: r.calls,
            triangles: r.triangles,
            points: r.points,
            lines: r.lines
        }
    }
    ,
    App.prototype._createRenderer = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
            , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
            , r = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")
            , n = {
            canvas: r,
            antialias: !0,
            alpha: !0,
            stencil: i
        }
            , o = t ? new cp(n) : new THREE.WebGLRenderer(n);
        o.info.autoReset = !1,
        o.setPixelRatio(window.devicePixelRatio);
        var s = this.calcRect();
        return o.setSize(s.width, s.height),
        e.appendChild(o.domElement),
        o.gammaFactor = 1.5,
        o.gammaInput = !0,
        o.outputEncoding = THREE.GammaEncoding,
        o.shadowMap.enabled = !0,
        o.shadowMap.type = THREE.PCFSoftShadowMap,
        o
    }
    ,
    App.prototype._loadInitCampus = function(e, t) {
        t = t || this.options;
        var i = this
            , r = this.objectManager.create({
            type: "Campus",
            url: e,
            loaderResourceUrl: Utils.parseValue(t.loaderResourceUrl, ""),
            name: t.name,
            visible: Utils.parseValue(t.visible, !0),
            position: t.position,
            angles: t.angles,
            basePosition: t.basePosition,
            baseAngles: t.baseAngles,
            properties: t.properties,
            isCamFitScene: t.isCamFitScene,
            isSetEffect: t.isSetEffect,
            disableCache: t.disableCampusCache,
            dynamic: t.dynamic,
            enableProxima: t.enableProxima,
            enableBatchObject: t.enableBatchObject,
            skipEnvMap: t.skipEnvMap,
            skipSkyBox: t.skipSkyBox,
            onBeforeLoad: t.onBeforeLoad,
            map: t.map,
            complete: function() {
                Utils.timer.setTimeout((function() {
                    i.trigger("load", {
                        app: i,
                        campus: r,
                        buildings: r.buildings
                    })
                }
                ))
            },
            error: function(e) {
                var i = t.error || t.errorCallback;
                i && i(e)
            }
        })
    }
    ,
    App.prototype.initGlobalOptions = function(e) {
        THING.onValueChange = THING.onValueChange || function() {}
        ;
        var t = {};
        ["useStaticImage", "manualUseStaticImage"].forEach((function(i) {
            t[i] = Utils.parseValue(Utils.parseValue(THING[i], e[i]), void 0),
            delete THING[i],
            Object.defineProperty(THING, i, {
                set: function(e) {
                    t[i] != e && (t[i] = e,
                    THING.onValueChange({
                        type: i,
                        value: e
                    }))
                },
                get: function() {
                    return t[i]
                },
                enumerable: !0,
                configurable: !0
            })
        }
        ))
    }
    ,
    App.prototype.init = function(e) {
        var t = this;
        this.initGlobalOptions(e),
        Utils.parseValue(e.removeAllTweenActions, !0) && TWEEN.removeAll();
        var i = this.calcRect()
            , r = document.createElement("meta");
        r && (r.content = "width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0",
        r.name = "viewport",
        document.getElementsByTagName("head")[0].appendChild(r)),
        this.renderCamera = new THREE.CombinedCamera(i.width,i.height,60,.1,1e4,-1e4,1e4);
        var n = e.renderer;
        this.renderer = n || this._createRenderer(this.domElement, e.forceWebGL1, e.stencil),
        this.cssRenderer = new THREE.CSS3DRenderer({
            autoFixCamera: !0
        }),
        setTimeout((function() {
            t.cssRenderer.domElement.style.position = "absolute",
            t.cssRenderer.domElement.style.top = "0",
            t.cssRenderer.domElement.style.pointerEvents = "none",
            t.cssRenderer.setSize(i.width, i.height);
            var r = e.cssParentNode || t.renderer.domElement.parentNode;
            r && r.appendChild(t.cssRenderer.domElement)
        }
        ), 10),
        setTimeout((function() {
            var e = t.domElement.children;
            e.length && e[0].length && (e[0].children[0].style.pointerEvents = "none")
        }
        ), 1e3),
        this.cssScene = new THREE.Scene,
        this.spriteResource = new Bh(this),
        this.modelResource = new Lh(this),
        this.particleResource = new Ih(this),
        this.events = new Lc(this),
        this.objectManager = new ObjectManager(this),
        this.server = new sh(this),
        this.viewPointManger = new ah(this),
        this.commandManager = new Uc(this),
        this._floorLoaderManager = new hh(this),
        this.edgesGeometriesManager = new fc(this),
        this.materialDisposeManager = new gc(this),
        this.styleManager = new StyleManager(this);
        var o = new THREE.Scene;
        if (this.scene = o,
        this.picker = new Sh(this,this.enableGPUPicker),
        this._selection = new jh(this),
        this.stateManager = new Nc(this),
        this.camera = new CameraController(this),
        this.loadingManager = new Qc(this),
        this.resourceManager = new Yc(this),
        this.webViewManager = new Ac(this),
        this.webViewManager.mixerContext.rendererCss.domElement.id = "__rendererDom__",
        this.campusLoader = new CampusLoader(this),
        this.register(),
        this.sceneLevel = new kh(this),
        this.sceneRoot = this.create({
            type: "SceneRoot",
            parent: null
        }),
        this.scene.add(this.sceneRoot.node),
        this.rendererManager = new rh(this,e.stencil),
        this.renderEffects = this.rendererManager.createControl(),
        this.renderEffects.mergeConfig({
            postEffect: {
                enable: this.renderer.capabilities.isWebGL2
            }
        }).save().active(),
        this.effectManager = new _c(this),
        this._lightGroup = this.create({
            type: "LightGroup",
            parent: this.root
        }),
        this.sceneManager = new SceneManager(this),
        this.sceneManager.enableDeafultViewPointFile = Utils.parseValue(this.options.enableDeafultViewPointFile, !1),
        this.sceneManager.defaultViewPointFileName = Utils.parseValue(this.options.defaultViewPointFileName, this.sceneManager.defaultViewPointFileName),
        this.addControl(this.sceneManager, "", !1),
        this.addControl(this.camera, "", !1),
        this.addControl(this.objectManager, "", !1),
        this.addControl(this.modelResource, "", !1),
        this.addControl(this.resourceManager, "", !1),
        this.mainUI = new wh(this),
        this.addControl(this.mainUI, "", !0),
        this.addControl(this.spriteResource, "", !1),
        this.addControl(this.webViewManager, "", !1),
        this.addControl(this.campusLoader, "", !1),
        this.addControl(this.stateManager, "", !0),
        this.addControl(this._floorLoaderManager, "", !1),
        this.addControl(this.selection, "", !1),
        this.addControl(this.sceneLevel, "", !1),
        this.mainUI._setup(),
        this.options.background && (this.background = this.options.background),
        this.options.skyBox && (this.skyBox = this.options.skyBox),
        this.sceneLevel.init(),
        this.defaultEvents = new Oh(this),
        this.defaultEvents.init(),
        window.addEventListener("resize", (function() {
            t.resizeLock || Utils.throttling((function() {
                t.resize()
            }
            ), 200)()
        }
        )),
        THREE.ImageUtils.crossOrigin = "anonymous",
        this.events.dispatchEvent({
            type: "success"
        }),
        0 != this.sceneURL.length) {
            var s = this.options.complete;
            s && (this.options.complete = null,
            this.one("load", (function(e) {
                e.app = t,
                s.call(e.campus, e)
            }
            ))),
            this.options.isCamFitScene = Utils.parseValue(this.options.isCamFitScene, !0),
            this._loadInitCampus(this.sceneURL)
        }
        this.setupComplete(),
        this.changeStates();
        var a = Utils.parseValue(e.autoTick, !0)
            , l = this.tick.bind(this);
        return a && (TWEEN.bindApp = this,
        l(0),
        this.renderer.setAnimationLoop(l)),
        this
    }
    ,
    App.prototype._updateTweenTime = function(e) {
        TWEEN.bindApp == this && (this._tweenTime += 1e3 * e,
        TWEEN.update(this._tweenTime))
    }
    ,
    App.prototype._tick = function(e) {
        this._deltaTime = e,
        this._elapsedTime += e,
        this._currentFrame++,
        this.trigger("beforerender"),
        this.renderer.info.reset(),
        this.inited && (this.events.update(),
        this.updateControls(!1)),
        Utils.timer.update(this.deltaTime),
        this.rendererManager.update(),
        this.trigger("afterrender"),
        this.collectRenderStates(),
        this.inited && this.updateControls(!0),
        this.materialDisposeManager.update(this._deltaTime)
    }
    ,
    App.prototype.tick = function(e) {
        var t = e / 1e3
            , i = t - this._time;
        this._time = t;
        var r = this
            , n = function() {
            if (r._useTryCatch)
                try {
                    r._tick(i)
                } catch (e) {
                    THING.Utils.error(e)
                }
            else
                r._tick(i)
        };
        this._updateTweenTime(i);
        var o = this._renderOptions.fpsLimit;
        if (o) {
            this._fpsLimitedDelta += i;
            var s = this._fpsLimitedDelta - this._fpsLimitedPreviousDelta
                , a = 1 / o;
            o && s >= a && (n(),
            this._fpsLimitedPreviousDelta = this._fpsLimitedDelta - s % a)
        } else
            n()
    }
    ,
    App.prototype.register = function() {
        this.stateManager.registerEx({
            Picker: bh
        }),
        this.stateManager.registerEx({
            CameraController: Nh
        }),
        this.stateManager.registerEx({
            EditObject: zh
        }),
        this.stateManager.registerEx({
            Navigation: Wh
        }),
        this.commandManager.register("CameraFlyTo", Gh),
        this.commandManager.register("ExpandObjects", ExpandObjects),
        this.commandManager.register("SetNodeTranslation", ExpandObjects),
        this.commandManager.register("AttachNode", AttachNode),
        this.commandManager.register("SetObjectTranslation", SetObjectTranslation),
        this.commandManager.register("SetObjectStyle", SetObjectStyle),
        this.commandManager.register("ApplyObjectTheme", ApplyObjectTheme),
        this.commandManager.register("setObjectLodLevel", setObjectLodLevel),
        this.commandManager.register("PlayObjectAnimation", PlayObjectAnimation),
        this.commandManager.register("CreateRegion", CreateRegion)
    }
    ,
    App.prototype.changeStates = function() {
        this.stateManager.change("Picker"),
        this.stateManager.change("CameraController"),
        this.stateManager.change("Navigation")
    }
    ,
    App.prototype._initStyle = function() {
        var e = this.domElement._getWorldScale();
        1 == e[0] && 1 == e[1] || (this._style = {
            transform: {
                scale: e
            }
        })
    }
    ,
    App.prototype.setupComplete = function() {
        var e = this
            , t = this;
        this._initStyle(),
        this._divObserver = new a({
            domElement: this.domElement,
            onChange: function() {
                e._initStyle()
            }
        }),
        this._divObserver.watch(["attributes"]),
        this.inited = !0,
        setTimeout((function() {
            t.one("loadallpluginscomplete", (function() {
                !function() {
                    if (t.events) {
                        var e = {}
                            , i = t.root.campuses[0];
                        i && (e.app = t,
                        e.campus = i,
                        e.buildings = i.buildings),
                        t.trigger("complete", e);
                        var r = Utils.parseFunction(t.options.complete);
                        r && r({
                            app: t
                        })
                    }
                }()
            }
            )),
            je({
                app: t
            })
        }
        ), 10)
    }
    ,
    App.prototype.calcRect = function() {
        if (this._size)
            return {
                width: this._size[0],
                height: this._size[1]
            };
        var e = this.domElement.style.width
            , t = this.domElement.style.height;
        "" == t && (t = window.getComputedStyle ? window.getComputedStyle(this.domElement, null).getPropertyValue("height") : this.domElement.currentStyle.height,
        "" == this.initDomElementHeight && (this.initDomElementHeight = t),
        "0px" != t && "auto" != t || (t = ""));
        var i = 0 == e.length || -1 !== (e + "").indexOf("%") ? this.domElement.clientWidth : e.match(/\d*[^px]/)[0]
            , r = 0 == t.length || -1 !== (t + "").indexOf("%") ? this.domElement.clientHeight : t.match(/\d*[^px]/)[0];
        return 0 == i && (i = window.innerWidth),
        0 == r && (r = window.innerHeight),
        "0px" == this.initDomElementHeight && (r = window.innerHeight),
        {
            width: Number(i),
            height: Number(r)
        }
    }
    ,
    App.prototype.isInScreen = function(e) {
        var t = e[0]
            , i = e[1];
        return !(t < 0 || i < 0) && !(t >= this.width || i >= this.height)
    }
    ,
    App.prototype.createObject = function(e) {
        if (Utils.isString(e))
            return new THREE[e];
        var t = e
            , i = t.type
            , r = [];
        return Object.keys(t).forEach((function(e) {
            "type" != e && r.push(t[e])
        }
        )),
        Utils.applyNew(THREE[i], r)
    }
    ,
    App.prototype.create = function(e) {
        return this.objectManager.create(e)
    }
    ,
    App.prototype.resize = function() {
        var e = this.calcRect()
            , t = e.width
            , i = e.height;
        this.width = t,
        this.height = i,
        this.camera.resize(t, i),
        this.picker.resize(t, i),
        this.webViewManager.resize(t, i),
        this.rendererManager.resize(t, i),
        this.resizeControls(t, i),
        this.stateManager.dispatchEvent({
            stateType: "onResize",
            width: t,
            height: i
        }),
        this.events.dispatchEvent({
            type: "resize",
            size: [t, i]
        }),
        this.renderer.setPixelRatio(this._pixelRatio * window.devicePixelRatio),
        this._keepBackgroundAspect ? this.sceneManager._keepBackgroundAspect() : this.sceneManager._resetBackgroundAspect()
    }
    ,
    App.prototype.setBackwardEnabled = function(e) {
        history.pushState(null, null, document.URL),
        window.addEventListener("popstate", (function() {
            history.pushState(null, null, document.URL)
        }
        ))
    }
    ,
    App.prototype.getClientPosition = function(e, t) {
        return this.events.eventProcessor.getEventPosition(e, t)
    }
    ,
    App.prototype.setCurrentHTMLMarker = function(e) {
        this._currentHTMLMarker = e
    }
    ,
    App.prototype.getCurrentHTMLMarker = function() {
        return this._currentHTMLMarker
    }
    ,
    App.prototype.query = function(e) {
        if (Utils.isString(e) && e.startsWith("/")) {
            for (var t = 0, i = 0; i < e.length; i++)
                "/" == e[i] && t++;
            if (1 === t)
                return new BaseObject(this)._init(this.scene, null).query(e)
        }
        var r = new Selector(this);
        return r.select(e, this.objectManager.objects),
        r
    }
    ,
    App.prototype.on = function(e, t, i, r, n, o) {
        var s = this.events.bindCall(e, t, i, r, n, o);
        "filterPickedResults" == e && (THING.Utils.warn("Please use .picker.pickedResultsFunc=function(ev) to replace .on()"),
        this.picker.pickedResultsFunc = s.callback)
    }
    ,
    App.prototype.off = function(e, t, i) {
        this.resumeEvent(e, t, i);
        var r = this.events.unbindCall(e, t, i);
        return "filterPickedResults" == e && (THING.Utils.warn("Please use .picker.pickedResultsFunc=null to replace .on()"),
        this.picker.pickedResultsFunc = null),
        r
    }
    ,
    App.prototype.one = function(e, t, i, r, n, o) {
        this.events.bindCall(e, t, i, r, n, !0, o)
    }
    ,
    App.prototype.trigger = function(e, t, i, r) {
        if (this.events) {
            var n;
            if (Utils.isString(t))
                i = r || i || {},
                this.query(t).forEach((function(t) {
                    n = t.trigger(e, i)
                }
                ));
            else {
                var o = (i = t || r || i || {}).type;
                i.type = e,
                n = this.events.triggerCall(i),
                i.type = o || e
            }
            return n
        }
    }
    ,
    App.prototype.pauseEvent = function(e, t, i) {
        this.events.pauseEvent(e, t, i)
    }
    ,
    App.prototype.pauseEventInFrame = function(e, t, i) {
        this.events.pauseEvent(e, t, i, !0)
    }
    ,
    App.prototype.isPauseEvent = function(e, t, i) {
        return this.events.isPauseEvent(e, t, i)
    }
    ,
    App.prototype.resumeEvent = function(e, t, i) {
        this.events.resumeEvent(e, t, i)
    }
    ,
    App.prototype.hasEvent = function(e) {
        return this.events.hasEvent(e)
    }
    ,
    App.prototype.execute = function(e) {
        this.commandManager.execute(e)
    }
    ,
    App.prototype.addControl = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ""
            , i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        if (e)
            return Utils.isFunction(e.onAdd) && e.onAdd(this),
            this.controls.push({
                control: e,
                name: t,
                afterRender: i
            }),
            e
    }
    ,
    App.prototype.getControl = function(e) {
        for (var t = 0; t < this.controls.length; t++) {
            var i = this.controls[t];
            if (i.name == e)
                return i.control
        }
        return null
    }
    ,
    App.prototype.getControlIndex = function(e) {
        for (var t = 0; t < this.controls.length; t++) {
            if (this.controls[t].control == e)
                return t
        }
        return -1
    }
    ,
    App.prototype.removeControl = function(e) {
        if (e)
            if (Utils.isString(e)) {
                var t = this.getControl(e);
                this.removeControl(t)
            } else {
                var i = this.getControlIndex(e);
                if (-1 === i)
                    return;
                Utils.isFunction(e.onRemove) && e.onRemove(this),
                this.controls.splice(i, 1)
            }
    }
    ,
    App.prototype.hasControl = function(e) {
        if (!e)
            return !1;
        if (Utils.isString(e)) {
            if (!this.getControl(e))
                return !1
        } else if (-1 === this.getControlIndex(e))
            return !1;
        return !0
    }
    ,
    App.prototype.updateControls = function(e) {
        for (var t = this._deltaTime, i = 0; i < this.controls.length; i++) {
            var r = this.controls[i];
            if (r.afterRender == e) {
                var n = r.control;
                n.onUpdate && n.onUpdate(t)
            }
        }
    }
    ,
    App.prototype.resizeControls = function(e, t) {
        for (var i = 0; i < this.controls.length; i++) {
            var r = this.controls[i].control;
            r.onResize && r.onResize(e, t)
        }
    }
    ,
    App.prototype.loadJSONData = function(e, t) {
        if (e) {
            var i = t.complete;
            e = this.confirmURL(e),
            new THREE.FileLoader(this.loadingManager).load(e, (function(e) {
                if (e && i) {
                    var t = Utils.objectKeysToLowerCase(JSON.parse(e));
                    i(t)
                }
            }
            ), (function() {}
            ), (function() {}
            ))
        }
    }
    ,
    App.prototype.focus = function() {
        this._inputElement && this._inputElement.focus()
    }
    ,
    App.prototype.isKeyPressed = function(e) {
        return this.events.isKeyPressed(e)
    }
    ,
    App.prototype.unloadResources = function() {
        this.events.clear(),
        this.root.init();
        for (var e = this.query("*"), t = 0; t < e.length; t++) {
            e[t].destroy()
        }
        this.stateManager.clear(),
        this.stateManager.init(),
        this.register(),
        this.changeStates()
    }
    ,
    App.prototype.pauseUpdate = function() {
        this.objectManager.pause()
    }
    ,
    App.prototype.resumeUpdate = function() {
        this.objectManager.resume()
    }
    ,
    App.prototype.getRenderStates = function() {
        return this.renderStates
    }
    ,
    App.prototype.captureScreenshotToImage = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "jpeg"
            , r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1
            , n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        try {
            return this.rendererManager.captureToDataURL(e, t, i, r, n)
        } catch (e) {
            return THING.Utils.error(e),
            null
        }
    }
    ,
    App.prototype.captureScreenshot = function(e, t, i) {
        try {
            var r = e.getExtension()
                , n = this.rendererManager.captureToDataURL(t, i, r, 1, !0);
            n && this.saveFile(e, n)
        } catch (e) {
            return void THING.Utils.error(e)
        }
    }
    ,
    App.prototype.saveFile = function(e, t) {
        var i = document.createElement("a");
        if ("string" == typeof i.download) {
            if (document.body.appendChild(i),
            i.download = e,
            t instanceof Blob)
                i.href = URL.createObjectURL(t);
            else if (Utils.isString(t))
                if (-1 !== t.indexOf("data:image/octet-stream"))
                    i.href = t;
                else {
                    t = new Blob([t],{
                        type: "text/plain;charset=UTF-8"
                    });
                    i.href = window.URL.createObjectURL(t)
                }
            else if (t.width && t.height) {
                var r = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                r.width = t.width,
                r.height = t.height,
                r.getContext("2d").drawImage(t, 0, 0, t.width, t.height);
                var n = r.toDataURL();
                n = n.replace("image/png", "image/octet-stream"),
                this.saveFile(e, n)
            } else
                i.href = t;
            i.click(),
            document.body.removeChild(i)
        } else
            location.replace(uri)
    }
    ,
    App.prototype.saveUTF8TextFile = function(e, t) {
        var i = new Blob([t],{
            type: "text/plain;charset=UTF-8"
        })
            , r = window.URL.createObjectURL(i)
            , n = document.createElement("a");
        n.href = r,
        n.download = e,
        n.click(),
        window.URL.revokeObjectURL(i)
    }
    ,
    App.prototype.applyThemeEnvironment = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "inner";
        if (e) {
            var i = ThemeManager.findStyle(e);
            if (i) {
                var r = "outer" === t;
                r && !i.outer && (Utils.warn("applyThemeEnvironment: strategy has no outer data!"),
                r = !1),
                this.rendererManager._mainRenderer.getPass("combineGlow").$enable = !1,
                this.rendererManager._mainRenderer.getPass("lineBloom").$enable = !1,
                this.rendererManager._mainRenderer.getPass("glow").$enable = !1;
                var n = void 0
                    , o = void 0
                    , s = void 0
                    , a = void 0
                    , l = void 0
                    , u = void 0
                    , c = void 0
                    , h = void 0
                    , p = void 0
                    , d = void 0
                    , f = void 0
                    , m = void 0;
                if (r || i.inner) {
                    var g = r ? i.outer : i.inner
                        , v = g.postEffect.SmallGlowBloom;
                    v ? (n = v.enable,
                    o = v.strength,
                    s = v.radius,
                    a = v.threshold) : (n = !1,
                    o = 1.5,
                    s = .4,
                    Utils.warn("applyThemeEnvironment: strategy has no SmallGlowBloom data!"));
                    var y = g.postEffect.MiddleGlowBloom;
                    y ? (l = y.enable,
                    u = y.strength,
                    c = y.radius,
                    h = y.threshold) : (l = !1,
                    u = 1.5,
                    c = .4,
                    Utils.warn("applyThemeEnvironment: strategy has no MiddleGlowBloom data!")),
                    p = g.background,
                    d = g.lighting,
                    f = g.postEffect,
                    m = g.fog
                } else
                    i.postEffects.glow ? (n = !0,
                    o = i.postEffects.glow.strength,
                    s = i.postEffects.glow.radius) : (n = !1,
                    o = 1.5,
                    s = .4,
                    Utils.warn("applyThemeEnvironment: strategy has no glow data!")),
                    i.postEffects.middleGlow ? (l = !0,
                    u = i.postEffects.middleGlow.strength,
                    c = i.postEffects.middleGlow.radius) : (l = !1,
                    u = 1.5,
                    c = .4,
                    Utils.warn("applyThemeEnvironment: strategy has no middleGlow data!")),
                    p = i.background && i.background.type ? i.background : null,
                    d = i.lighting || Ou,
                    f = i.postEffect || Zc.postEffect,
                    m = null;
                if (this.rendererManager._mainRenderer.getPass("smallGlow").$enable = n,
                this.rendererManager._mainRenderer.getPass("smallGlow").strength = o,
                this.rendererManager._mainRenderer.getPass("smallGlow").radius = s,
                this.rendererManager._mainRenderer.getPass("smallGlow").threshold = void 0 !== a ? a : .2,
                this.rendererManager._mainRenderer.getPass("middleGlow").$enable = l,
                this.rendererManager._mainRenderer.getPass("middleGlow").strength = u,
                this.rendererManager._mainRenderer.getPass("middleGlow").radius = c,
                this.rendererManager._mainRenderer.getPass("middleGlow").threshold = void 0 !== h ? a : .2,
                p)
                    if ("image" === p.type)
                        this.background = i.resourcePrefix + p.value;
                    else if ("color" === p.type)
                        this.background = p.value;
                    else if ("skybox" === p.type) {
                        var b = i.resourcePrefix + p.value;
                        Utils.isString(p.value) && (p.value.indexOf(".png") > -1 || p.value.indexOf(".jpg") > -1) ? this.skyBox = b : this.skyBox = {
                            negx: b.appendURL("/rt.jpg"),
                            negy: b.appendURL("/fr.jpg"),
                            negz: b.appendURL("/bk.jpg"),
                            posx: b.appendURL("/up.jpg"),
                            posy: b.appendURL("/lf.jpg"),
                            posz: b.appendURL("/dn.jpg")
                        }
                    }
                this._lightGroup.setConfig(d || {});
                var _ = this.renderEffects.getConfig().postEffect.blur;
                this.renderEffects.mergeConfig({
                    postEffect: f
                }).mergeConfig({
                    postEffect: {
                        blur: _
                    }
                }).update(),
                m && m.enable ? this.fog = m : this.fog = null,
                this.rendererManager._mainRenderer.shareDepthRenderBuffer(!0),
                this.renderer.capabilities.logarithmicDepthBuffer = !1,
                this.camera.autoAdjustNear = !0
            }
        }
    }
    ,
    App.prototype.applyTheme = function(e) {
        THING.Utils.warn("[App] Please use '.applyThemeEnvironment' to replace '.applyTheme'"),
        this.applyThemeEnvironment(e)
    }
    ,
    App.prototype.load = function(e, t, i) {
        THING.Utils.warn("[App] please use loadCampus() instead"),
        this.loadCampus(e, {
            successCallback: t,
            errorCallback: i
        })
    }
    ,
    App.prototype.unload = function(e) {
        THING.Utils.warn("please use unloadCampus() instead"),
        this.unloadCampus(e)
    }
    ,
    App.prototype.loadScene = function(e, t, i) {
        THING.Utils.warn("[App] please use loadCampus() instead"),
        this.loadCampus(e, {
            successCallback: t,
            errorCallback: i
        })
    }
    ,
    App.prototype.unloadScene = function(e) {
        THING.Utils.warn("[App] please use unloadCampus() instead"),
        this.unloadCampus(e)
    }
    ,
    App.prototype.showScene = function(e, t) {
        THING.Utils.warn("[App] please use 'getCampus(url).visible=true/false' instead"),
        this.sceneManager.showScene(e, t)
    }
    ,
    App.prototype.saveAsImageData = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "jpeg"
            , r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1
            , n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        return THING.Utils.warn("[App] Please use '.captureScreenshotToImage' to replace '.saveAsImageData'"),
        this.captureScreenshotToImage(e, t, i, r, n)
    }
    ,
    App.prototype.saveAsImage = function(e, t, i) {
        THING.Utils.warn("[App] Please use '.captureScreenshot' to replace '.saveAsImage'"),
        this.captureScreenshot(e, t, i)
    }
    ,
    App.prototype.setSkyEffect = function(e) {
        THING.Utils.warn("[App] Please use '.skyEffect={}' to replace '.setSkyEffect'"),
        this.skyEffect = e
    }
    ,
    App.prototype.setLighting = function(e) {
        THING.Utils.warn("[App] Please use '.lighting={}' to replace '.setLighting'"),
        this.lighting = e
    }
    ,
    App.prototype.setPostEffect = function(e, t) {
        THING.Utils.warn("[App] Please use '.postEffect={}' to replace '.setPostEffect'"),
        this.postEffect = e
    }
    ,
    App.prototype.setFog = function(e) {
        THING.Utils.warn("[App] Please use '.fog={}' to replace '.setFog'"),
        this.sceneManager.setFog(e)
    }
    ,
    App.prototype.loadCampus = function(e, t) {
        return THING.Utils.warn("[App] Please use 'app.create({type: 'Campus' ...}) ' to replace '.loadCampus'"),
        t = t || {},
        this.create(Utils.mergeObject(t, {
            type: "Campus",
            url: e
        }))
    }
    ,
    App.prototype.unloadCampus = function(e) {
        THING.Utils.warn("[App] Please use 'app.query('[url=?']).destroy() ' to replace '.unloadCampus'"),
        this.query("[url=" + e + "]").destroy()
    }
    ,
    App.prototype.getCampus = function(e) {
        THING.Utils.warn("[App] Please use 'app.query('[url=?']) ' to replace '.getCampus'");
        var t = this.query("[url=" + e + "]");
        return t.length ? t[0] : null
    }
    ,
    App.prototype.showGrid = function(e, t, i, r, n) {
        THING.Utils.warn("[App] Please use 'app.root.showGrid()' to replace '.app.showGrid()'"),
        this.root.showGrid(e, t, i, r, n)
    }
    ,
    App.prototype.getGridSize = function() {
        return THING.Utils.warn("[App] Please use 'app.root.gridSize' to replace '.app.getGridSize()'"),
        this.root.gridSize
    }
    ,
    App.prototype.registerBundleLoader = function(e, t) {
        this._appBundle || (this._appBundle = new up),
        this._appBundle.registerBundleLoader(e, t)
    }
    ,
    App.prototype.loadBundle = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
            , i = arguments[2];
        return this._appBundle || (this._appBundle = new up),
        this._appBundle.loadBundle(e, t, i)
    }
    ,
    _createClass(App, [{
        key: "clickDistance",
        set: function(e) {
            hp = e
        },
        get: function() {
            return hp
        }
    }, {
        key: "elapsedTime",
        get: function() {
            return Math.floor(1e3 * this._elapsedTime)
        }
    }, {
        key: "deltaTime",
        get: function() {
            return Math.floor(1e3 * this._deltaTime)
        }
    }, {
        key: "currentFrameCount",
        get: function() {
            return this._currentFrame
        }
    }, {
        key: "pixelRatio",
        set: function(e) {
            this._pixelRatio = e,
            this.renderer.setPixelRatio(e * window.devicePixelRatio)
        },
        get: function() {
            return this._pixelRatio
        }
    }, {
        key: "size",
        get: function() {
            if (this._size)
                return this._size;
            var e = this.calcRect();
            return [e.width, e.height]
        },
        set: function(e) {
            this._size = e,
            this.resize()
        }
    }, {
        key: "selection",
        get: function() {
            return this._selection
        }
    }, {
        key: "skyEffect",
        set: function(e) {
            e ? this.sceneManager.setSkyEffect(e) : this.sceneManager.closeSkyEffect()
        },
        get: function() {
            var e = this.sceneManager._skyEffect;
            return e && e.visible ? Utils.cloneObject(e.getConfig(), !1) : null
        }
    }, {
        key: "lighting",
        set: function(e) {
            e = e || Bu,
            this._lightGroup.setConfig(e)
        },
        get: function() {
            return Utils.cloneObject(this._lightGroup.getConfig(), !1)
        }
    }, {
        key: "fog",
        set: function(e) {
            e ? this.sceneManager.setFog(e) : this.sceneManager.closeFog()
        },
        get: function() {
            return this.sceneManager.fogEnable ? Utils.cloneObject(this.sceneManager._fogConfig, !1) : null
        }
    }, {
        key: "postEffect",
        set: function(e) {
            e ? this.renderEffects.mergeConfig(e).update() : this.renderEffects.mergeConfig({
                temporalSuperSampling: {
                    enable: !1
                },
                postEffect: {
                    enable: !1
                }
            }).update()
        },
        get: function() {
            var e = this.renderEffects.getConfig();
            return e.temporalSuperSampling.enable || e.postEffect.enable ? Utils.cloneObject(e, !1) : null
        }
    }, {
        key: "keepBackgroundAspect",
        set: function(e) {
            e !== this._keepBackgroundAspect && (this._keepBackgroundAspect = e,
            e ? this.sceneManager._keepBackgroundAspect() : this.sceneManager._resetBackgroundAspect())
        },
        get: function() {
            return !!this._keepBackgroundAspect
        }
    }, {
        key: "bgColor",
        get: function() {
            return this._bgColor ? this._bgColor.toHexString() : null
        },
        set: function(e) {
            this._bgColor = Utils.parseColor(e),
            this.scene.background.isColor && (this.scene.background = this._bgColor)
        }
    }, {
        key: "background",
        set: function(e) {
            this.sceneManager.background = e
        },
        get: function() {
            var e = this.sceneManager.background;
            return Utils.isNumber(e) ? "#" + e.toString(16).toUpperCase() : e
        }
    }, {
        key: "backgroundAdditiveColor",
        set: function(e) {
            this.sceneManager.backgroundAdditiveColor = e
        },
        get: function() {
            return this.sceneManager.backgroundAdditiveColor
        }
    }, {
        key: "backgroundColorScaleFactor",
        set: function(e) {
            this.sceneManager.backgroundColorScaleFactor = e
        },
        get: function() {
            return this.sceneManager.backgroundColorScaleFactor
        }
    }, {
        key: "skyBox",
        set: function(e) {
            this.sceneManager && (this.sceneManager.skyBox = e)
        },
        get: function() {
            return this.sceneManager ? this.sceneManager.skyBox : ""
        }
    }, {
        key: "needUpdate",
        set: function(e) {
            if (e) {
                if (this._dirtyFrameCount == this._currentFrame)
                    return;
                this._dirtyFrameCount = this._currentFrame,
                this.picker && (this.picker.needUpdate = e),
                this.rendererManager && (this.rendererManager.needUpdate = e)
            }
        }
    }, {
        key: "needEffectUpdate",
        set: function(e) {
            e && this.rendererManager && (this.rendererManager.needUpdate = e)
        }
    }, {
        key: "loadingProgressBar",
        get: function() {
            return this.mainUI.loadingProgressBar
        }
    }, {
        key: "needTracelessRendering",
        set: function(e) {
            this.picker && (this.picker.needTracelessRendering = e)
        }
    }, {
        key: "useAsLoader",
        set: function(e) {
            this._useAsLoader = e
        },
        get: function() {
            return this._useAsLoader
        }
    }, {
        key: "skipUnbindAppEvents",
        set: function(e) {
            this._skipUnbindAppEvents = e
        },
        get: function() {
            return this._skipUnbindAppEvents
        }
    }, {
        key: "mainDomElement",
        get: function() {
            return this.domElement
        }
    }, {
        key: "isMobileDevice",
        get: function() {
            return void 0 !== this._isMobile ? this._isMobile : this._isMobile = Dt()
        }
    }, {
        key: "level",
        get: function() {
            return this.sceneLevel
        }
    }, {
        key: "root",
        get: function() {
            return this.sceneRoot
        }
    }, {
        key: "mousePosition",
        get: function() {
            return this.events.mousePosition
        }
    }, {
        key: "renderOptions",
        set: function(e) {
            e = e || {},
            this._renderOptions = e
        },
        get: function() {
            return this._renderOptions
        }
    }, {
        key: "campuses",
        get: function() {
            return THING.Utils.warn("[App] The 'app.campuses' will be deleted soon, please use 'app.root.campuses' to replace it"),
            this.root.campuses
        }
    }, {
        key: "buildings",
        get: function() {
            return THING.Utils.warn("[App] The 'app.buildings' will be deleted soon, please use 'app.root.defaultCampus.buildings' to replace it"),
            this.root.defaultCampus.buildings
        }
    }, {
        key: "disableWarning",
        set: function(e) {
            THING.Utils.warn("[App] Please use 'Utils.disableWarning' to replace '.disableWarning'"),
            Utils.disableWarning = e
        }
    }, {
        key: "disableTime",
        set: function(e) {
            THING.Utils.warn("[App] Please use 'Utils.disableTime' to replace '.disableTime'"),
            Utils.disableTime = e
        }
    }, {
        key: "isShiftKeyPressed",
        get: function() {
            return THING.Utils.warn("[App] Please use '.isKeyPressed(THING.KeyType.Shift)' to replace '.isShiftKeyPressed'"),
            this.events.isKeyPressed(KeyType.Shift)
        }
    }, {
        key: "isControlKeyPressed",
        get: function() {
            return THING.Utils.warn("[App] Please use '.isKeyPressed(THING.KeyType.Ctrl)' to replace '.isControlKeyPressed'"),
            this.events.isKeyPressed(KeyType.Ctrl)
        }
    }, {
        key: "isAltKeyPressed",
        get: function() {
            return THING.Utils.warn("[App] Please use '.isKeyPressed(THING.KeyType.Alt)' to replace '.isAltKeyPressed'"),
            this.events.isKeyPressed(KeyType.Alt)
        }
    }, {
        key: "isMobile",
        get: function() {
            return THING.Utils.warn("[App] Please use '.isMobileDevice' to replace '.isMobile'"),
            this.isMobileDevice
        }
    }, {
        key: "wireframeColor",
        set: function(e) {
            return THING.Utils.warn("[App] Please use '.app.root.wireframeColor' to replace '.wireframeColor'"),
            this.root.wireframeColor = e
        }
    }, {
        key: "domOffset",
        set: function(e) {
            THING.Utils.warn("[App] domOffset is deprecated")
        }
    }, {
        key: "cache",
        get: function() {
            return THING.Utils.warn("[App] cache is deprecated"),
            !1
        }
    }, {
        key: "outdoors",
        set: function(e) {},
        get: function() {
            return this.root ? this.root.defaultCampus.outdoors : null
        }
    }, {
        key: "loadingProgressBarVisible",
        set: function(e) {
            THING.Utils.warn("[App] Please use '.loadingProgressBar.visible = true/false' to replace '.loadingProgressBarVisible=true/false'"),
            this.mainUI.loadingProgressBar.visible = e
        },
        get: function() {
            return THING.Utils.warn("[App] Please use '.loadingProgressBar.visible' to replace '.loadingProgressBarVisible'"),
            this.mainUI.loadingProgressBar.visible
        }
    }, {
        key: "currentFrame",
        get: function() {
            return THING.Utils.warn("[App] Please use '.currentFrameCount' to replace '.currentFrame'"),
            this.currentFrameCount
        }
    }]),
    App
}();
ThingApp.on = ThingApp.on || {};
var SubObject = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype._init = function(t, i) {
        e.prototype._init.call(this, t, i),
        this.node.userData.baseObject_bindSubNode = this
    }
    ,
    t.prototype._updateBindSubNodeState = function() {
        this.node.userData.baseObject_bindSubNode_hooked = this.hasAnyEvents()
    }
    ,
    t.prototype._on = function(t, i, r, n, o) {
        var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 51
            , a = e.prototype._on.call(this, t, i, r, n, o, s);
        return this._updateBindSubNodeState(),
        a
    }
    ,
    t.prototype._off = function(t, i, r) {
        var n = e.prototype._off.call(this, t, i, r);
        return this._updateBindSubNodeState(),
        n
    }
    ,
    t.prototype.canAcceptEvent = function(t) {
        if (e.prototype.canAcceptEvent.call(this, t))
            return this;
        var i = t.intersect;
        return i && i.node && i.node == this.node ? this : null
    }
    ,
    t
}(BaseObject);
SubObject.create = function(e, t) {
    var i = new SubObject(t.app);
    return i._init(e, t),
    i
}
;
var fp = Symbol("private");
function mp(e, t) {
    e[fp] = {};
    var i = e[fp];
    i.init = function() {
        var e = t.values;
        e && i.addAction("___defaultValue___", e),
        i.onChange = t.onChange || i.onChange
    }
    ,
    i.createAction = function(e) {
        var t = i.actions.get(e);
        return t || (t = {
            name: e,
            result: {},
            results: []
        },
        i.actions.set(e, t),
        t)
    }
    ,
    i.processActions = function() {
        var e = {};
        i.actions.forEach((function(t) {
            i.processAction(t, e)
        }
        )),
        i.onChange({
            result: e
        })
    }
    ,
    i.processAction = function(e, t) {
        e.results.forEach((function(e) {
            var i = e.options;
            for (var r in i) {
                var n = i[r];
                t[r] = n
            }
        }
        ))
    }
    ,
    i.addAction = function(e, t, r, n) {
        var o = i.createAction(e)
            , s = {
            options: t,
            tag: r,
            priority: n,
            index: o.results.length
        };
        o.results.push(s),
        o.results.sort((function(e, t) {
            return e.priority !== t.priority ? t.priority - e.priority : e.index - t.index
        }
        )),
        i.processActions()
    }
    ,
    i.removeAction = function(e, t) {
        var r = i.actions.get(e);
        if (r)
            for (var n = r.results, o = 0; o < n.length; o++) {
                if (n[o].tag == t)
                    return n.splice(o, 1),
                    void i.processActions()
            }
    }
    ,
    i.actions = new Map,
    i.onChange = function() {}
    ,
    i.init()
}
var ActionComposer = function() {
    function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        classCallCheck(this, e),
        mp(this, t)
    }
    return e.prototype.add = function(e, t, i) {
        var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
            , n = this[fp];
        n.addAction(e, t, i, r)
    }
    ,
    e.prototype.remove = function(e, t) {
        e && this[fp].removeAction(e, t)
    }
    ,
    e
}();
vp = Symbol("private");
var yp, bp = new THREE.Matrix4, _p = new THREE.Vector3, xp = new THREE.Vector2, Ep = new THREE.Vector3, wp = new THREE.Vector3, Tp = new THREE.Vector3, Mp = new THREE.Vector3, Cp = new THREE.Vector3, Sp = new THREE.Vector3, jp = new THREE.Quaternion, Pp = (new THREE.Quaternion,
new THREE.Box3), Rp = new THREE.Raycaster, Dp = new THREE.Vector3, Ap = new THREE.Vector3, kp = new THREE.Quaternion, Op = new THREE.Quaternion, Bp = new THREE.Matrix4, Fp = new THREE.Matrix4, Lp = ["clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "map", "matcap", "alphaMap", "lightMap", "aoMap", "bumpMap", "normalMap", "displacementMap", "roughnessMap", "metalnessMap", "emissiveMap", "specularMap", "envMap", "gradientMap"], Helper = {
    WHITE: 16777215,
    SILVER: 12632256,
    GRAY: 8421504,
    BLACK: 0,
    RED: 16711680,
    MAROON: 8388608,
    GREEN: 32768,
    BLUE: 255,
    NAVY: 128,
    YELLOW: 16776960,
    OLIVE: 8421376,
    FUCHSIA: 16711935,
    MAGENTA: 16711935,
    LIME: 914021,
    PURPLE: 8388736,
    LAWN: 3135031,
    AQUA: 65535,
    CYAN: 65535,
    TEAL: 32896,
    ORANGE: 16753920,
    VIOLET: 7737555,
    GREENYELLOW: 6617095,
    createFrustumFOV: function(e, t, i, r) {
        var n = i * Math.tan(THING.Math.degToRad(e) / 2)
            , o = -n
            , s = t * n
            , a = -s;
        return Helper.createFrustum(s, a, n, o, i, r)
    },
    createFrustum: function(e, t, i, r, n, o) {
        var s = new THREE.Geometry
            , a = new THREE.LineBasicMaterial({
            color: 16777215,
            linewidth: 3,
            vertexColors: THREE.FaceColors
        })
            , l = o / n
            , u = {
            ltn: new THREE.Vector3(e,i,n),
            lbn: new THREE.Vector3(e,r,n),
            rbn: new THREE.Vector3(t,r,n),
            rtn: new THREE.Vector3(t,i,n),
            ltf: new THREE.Vector3(l * e,l * i,o),
            lbf: new THREE.Vector3(l * e,l * r,o),
            rbf: new THREE.Vector3(l * t,l * r,o),
            rtf: new THREE.Vector3(l * t,l * i,o)
        };
        function c(e, t, i) {
            h(e, i),
            h(t, i)
        }
        function h(e, t) {
            var i = new THREE.Vector3;
            i.copy(u[e]),
            s.vertices.push(i),
            s.colors.push(new THREE.Color(t))
        }
        return c("ltn", "lbn", Helper.RED),
        c("lbn", "rbn", Helper.RED),
        c("rbn", "rtn", Helper.RED),
        c("rtn", "ltn", Helper.RED),
        c("ltf", "lbf", Helper.LIME),
        c("lbf", "rbf", Helper.LIME),
        c("rbf", "rtf", Helper.LIME),
        c("rtf", "ltf", Helper.LIME),
        c("ltf", "ltn", Helper.BLUE),
        c("lbf", "lbn", Helper.BLUE),
        c("rbf", "rbn", Helper.BLUE),
        c("rtf", "rtn", Helper.BLUE),
        new THREE.Line(s,a,THREE.LinePieces)
    }
}, Np = new Map, Hp = new Map;
function Up(e, t) {
    var i = e.get(t);
    return i || (i = new RegExp(t),
    e.set(t, i)),
    i
}
function zp(e, t) {
    if (t) {
        var i = Hp.get(t);
        return i || (i = new Map,
        Hp.set(t, i)),
        Up(i, e)
    }
    return Up(Np, e)
}
function Vp(e, t) {
    if ("string" != typeof e)
        throw new TypeError("expected path to be a string");
    if ("\\" === e || "/" === e)
        return "/";
    var i = e.length;
    if (i <= 1)
        return e;
    var r = "";
    if (i > 4 && "\\" === e[3]) {
        var n = e[2];
        "?" !== n && "." !== n || "\\\\" !== e.slice(0, 2) || (e = e.slice(2),
        r = "//")
    }
    var o = e.split(/[/\\]+/);
    return !1 !== t && "" === o[o.length - 1] && o.pop(),
    r + o.join("/")
}
Object.defineProperties(Array.prototype, {
    forEachSync: {
        writable: !0,
        enumerable: !1,
        configurable: !0,
        value: (yp = i(g.mark((function e(t, i, r) {
            var n, o;
            return g.wrap((function(e) {
                for (; ; )
                    switch (e.prev = e.next) {
                    case 0:
                        e.prev = 0,
                        n = 0;
                    case 2:
                        if (!(n < this.length)) {
                            e.next = 10;
                            break
                        }
                        if (!(o = t(this[n], n, this))) {
                            e.next = 7;
                            break
                        }
                        return e.next = 7,
                        o.catch((function(e) {
                            r && r(e)
                        }
                        ));
                    case 7:
                        n++,
                        e.next = 2;
                        break;
                    case 10:
                        i && i(),
                        e.next = 16;
                        break;
                    case 13:
                        e.prev = 13,
                        e.t0 = e.catch(0),
                        r && r(e.t0);
                    case 16:
                    case "end":
                        return e.stop()
                    }
            }
            ), e, this, [[0, 13]])
        }
        ))),
        function(e, t, i) {
            return yp.apply(this, arguments)
        }
        )
    },
    waitForEachSync: {
        writable: !0,
        enumerable: !1,
        configurable: !0,
        value: function(e) {
            var t = this;
            return new Promise((function(i, r) {
                t.forEachSync(e, i, r)
            }
            ))
        }
    }
}),
String.prototype.getNormalize = function() {
    var e = this.indexOf("://");
    return -1 !== e ? this.substring(0, e + 3) + Vp(this.substring(e + 3)) : Vp(this.substring())
}

String.prototype.startsWith = function(e) {
    return this.slice(0, e.length) === e
}

String.prototype.endsWith = function(e) {
    return -1 !== this.indexOf(e, this.length - e.length)
}

String.prototype.contains = function(e) {
    return this.indexOf(e) >= 0
}

String.prototype.isBlank = function() {
    return Utils.isBlank(this)
}

String.prototype.getFileName = function() {
    var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
        , t = this.indexOf("\\") >= 0 ? this.lastIndexOf("\\") : this.lastIndexOf("/");
    if (-1 === t)
        return e ? this : this.split(".")[0];
    var i = this.substring(t);
    return 0 !== i.indexOf("\\") && 0 !== i.indexOf("/") || (i = i.substring(1)),
    e ? i : i.split(".")[0]
}

String.prototype.getPath = function() {
    var e = this.lastIndexOf("\\")
        , t = this.lastIndexOf("/")
        , i = e > t ? e : t;
    return this.substring(0, i)
}

String.prototype.getSearchName = function() {
    var e = this.getFileName()
        , t = e.indexOf("?");
    return -1 === t ? "" : e.substring(t)
}

String.prototype.getExtension = function() {
    var e = this.split(".");
    if (e.length > 1) {
        var t = e.pop()
            , i = t.indexOf("?");
        return -1 !== i ? t.substring(0, i) : t
    }
    return ""
}

String.prototype._trimLeft = function(e) {
    void 0 === e && (e = "s");
    var t = zp("^[" + e + "]+");
    return this.replace(t, "")
}

String.prototype._trimRight = function(e) {
    void 0 === e && (e = "s");
    var t = zp("[" + e + "]+$");
    return this.replace(t, "")
}

String.prototype.trimBoth = function(e) {
    return this._trimLeft(e)._trimRight(e)
}

String.prototype.appendPath = function(e) {
    return this._trimRight("/") + "/" + e._trimLeft("/")._trimRight("/")
}

String.prototype.appendURL = function(e) {
    var t = this.getFileName();
    return t.startsWith("?") ? this.getPath().appendPath(e) + t : this.appendPath(e)
}

String.prototype.appendRandomSuffix = function() {
    return this.substring() + "?t=" + (new Date).getTime()
}

String.prototype.equals = function(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
    return null != e && (t ? this.toUpperCase() == e.toUpperCase() : this == e)
}
;
var Wp = String.prototype.replaceAll;
String.prototype.replaceAll = function(e, t) {
    "\\" == e && (e = "\\\\");
    try {
        var i = zp(e, "gm");
        return this.replace(i, t)
    } catch (e) {
        return Wp.apply(this, arguments)
    }
}

String.prototype.removeAt = function(e) {
    var t = this.substring(0);
    return e >= this.length ? t : t.slice(0, e) + t.slice(e + 1)
}

THREE.Color.prototype.copy = function(e) {
    return e && (this.r = e.r,
    this.g = e.g,
    this.b = e.b),
    this
}

THREE.Color.prototype.toHexString = function() {
    return "#" + this.getHexString().toUpperCase()
}

THREE.Color.prototype.toRGBArray = function() {
    var e = [];
    return e.push(Math.ceil(255 * this.r)),
    e.push(Math.ceil(255 * this.g)),
    e.push(Math.ceil(255 * this.b)),
    e
}

THREE.Line.prototype.updatePosition = function(e, t) {
    var i = this.geometry.vertices;
    if (2 == i.length) {
        var r = i[0]
            , n = i[1];
        r.equals(e) && n.equals(t) || (r.x = e.x,
        r.y = e.y,
        r.z = e.z,
        n.x = t.x,
        n.y = t.y,
        n.z = t.z,
        this.geometry.boundingSphere = null,
        this.geometry.verticesNeedUpdate = !0,
        this.computeLineDistances())
    }
}
;
for (var Gp = function() {
    var e = THING.App.current ? THING.App.current.level.current : null;
    return e ? e._getBaseMatrix() : null
}, qp = [], Xp = 0; Xp < 256; Xp++)
    qp[Xp] = (Xp < 16 ? "0" : "") + Xp.toString(16).toUpperCase();
THREE.MathUtils.generateUUID = function() {
    var e = 4294967295 * Math.random() | 0
        , t = 4294967295 * Math.random() | 0
        , i = 4294967295 * Math.random() | 0
        , r = 4294967295 * Math.random() | 0;
    return qp[255 & e] + qp[e >> 8 & 255] + qp[e >> 16 & 255] + qp[e >> 24 & 255] + "-" + qp[255 & t] + qp[t >> 8 & 255] + "-" + qp[t >> 16 & 15 | 64] + qp[t >> 24 & 255] + "-" + qp[63 & i | 128] + qp[i >> 8 & 255] + "-" + qp[i >> 16 & 255] + qp[i >> 24 & 255] + qp[255 & r] + qp[r >> 8 & 255] + qp[r >> 16 & 255] + qp[r >> 24 & 255]
}

THREE.Vector3.prototype.getPositionFromSpherical = function(e, t, i) {
    var r = new THREE.Vector3
        , n = Math.sin(i);
    return r.x = n * Math.cos(t),
    r.y = -Math.cos(i),
    r.z = n * Math.sin(t),
    r.normalize(),
    r.multiplyScalar(e),
    r.add(this),
    r
}

THREE.Vector3.prototype.getDirectionFromAngles = function(e, t, i) {
    var r = Utils.parseVector3(THING.Math.directionFromAlphaBeta(e, t));
    return r.normalize(),
    r.multiplyScalar(i),
    r.add(this),
    r
}

THREE.Vector3.prototype.getDirectionFromPosition = function(e, t) {
    var i = new THREE.Vector3;
    return i.subVectors(e, this),
    i.normalize(),
    i.multiplyScalar(t),
    i.add(this),
    i
}

THREE.Vector3.prototype.getMinVector = function(e) {
    var t = this.clone();
    if (Utils.isArray(e))
        for (var i = 0; i < e.length; i++)
            t.min(e[i]);
    else
        t.min(e);
    return t
}

THREE.Vector3.prototype.getMaxVector = function(e) {
    var t = this.clone();
    if (Utils.isArray(e))
        for (var i = 0; i < e.length; i++)
            t.max(e[i]);
    else
        t.min(e);
    return t
}

THREE.Vector3.prototype.toLogString = function() {
    return "x: " + this.x + ", y: " + this.y + ", z: " + this.z
}

THREE.Vector3.prototype.isEqual = function(e) {
    return !!Utils.isNumberEqual(this.x, e.x) && (!!Utils.isNumberEqual(this.y, e.y) && !!Utils.isNumberEqual(this.z, e.z))
}

THREE.Vector3.prototype.log = function() {
    THING.Utils.log(this.toLogString())
}

THREE.Vector4.prototype.project = function(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)
}

THREE.Vector4.prototype.unproject = function(e) {
    var t = new THREE.Matrix4;
    return this.applyMatrix4(t.getInverse(e.projectionMatrix)).applyMatrix4(e.matrixWorld)
}

THREE.Object3D.prototype.check = function() {
    for (var e = this; e; e = e.parent)
        isNaN(e.position.x) || isNaN(e.position.y) || isNaN(e.position.z) ? (console.log(e),
        console.log(e.position)) : isNaN(e.scale.x) || isNaN(e.scale.y) || isNaN(e.scale.z) ? (console.log(e),
        console.log(e.scale)) : isNaN(e.quaternion.x) || isNaN(e.quaternion.y) || isNaN(e.quaternion.z) ? (console.log(e),
        console.log(e.quaternion)) : (isNaN(e.rotation.x) || isNaN(e.rotation.y) || isNaN(e.rotation.z)) && (console.log(e),
        console.log(e.rotation))
}

THREE.Object3D.prototype.dispose = function() {
    var e = this.parent;
    e && e.remove(this),
    this.traverse((function(e) {
        e.geometry && e.geometry.dispose();
        var t = e.material;
        if (t)
            if (Utils.isArray(t))
                for (var i = 0; i < t.length; i++)
                    t[i].dispose();
            else
                t.dispose();
        e.skeleton && e.skeleton.boneTexture && e.skeleton.boneTexture.dispose()
    }
    ))
}

THREE.Object3D.prototype.getVerticesCount = function() {
    var e = 0;
    return this.traverse((function(t) {
        t.geometry && (e += t.geometry.getVerticesCount())
    }
    )),
    e
}

THREE.Object3D.prototype.getDirection = function(e) {
    var t = this.matrix.elements;
    return e.set(t[8], t[9], t[10]).normalize()
}

THREE.Object3D.prototype._premultiplyMatrix = function(e) {
    this.matrix.premultiply(e),
    this.matrix.decompose(this.position, this.quaternion, this.scale)
}

THREE.Object3D.prototype._mergeAllGeometries = function() {
    this.updateMatrixWorld();
    var e = new THREE.Geometry;
    return this.traverse((function(t) {
        if (t.isMesh) {
            var i = t.geometry;
            i.isBufferGeometry && (i = (new THREE.Geometry).fromBufferGeometry(i)),
            e.merge(i, t.matrixWorld)
        }
    }
    )),
    e
}

THREE.Object3D.prototype._getMatrixWorld = function() {
    var e = this.matrixWorld
        , t = Gp();
    return t && (e = e.clone()).premultiply(t),
    e
}

THREE.Object3D.prototype.getBaseObjectOwner = function() {
    for (var e = this; e; e = e.parent) {
        var t = e.userData.object;
        if (t)
            return t
    }
    return null
}
;
var Jp = THREE.Object3D.prototype.copy;
THREE.Object3D.prototype.copy = function(e, t) {
    return Jp.call(this, e, t),
    this.technique = Utils.cloneObject(e.technique),
    this._cachedTechnique = Utils.cloneObject(e._cachedTechnique),
    e._wName && (this._wName = e._wName),
    this
}

THREE.Object3D.prototype.setUserDataValue = function(e, t) {
    this.traverse((function(i) {
        i.userData[e] = t
    }
    ))
}

THREE.Object3D.prototype.isMaterialVisible = function() {
    var e = this.material;
    if (!e)
        return !1;
    if (void 0 !== e.length) {
        for (var t = 0; t < e.length; t++)
            if (e[0].visible)
                return !0;
        return !1
    }
    return e.visible
}

THREE.Object3D.prototype.isRenderable = function() {
    return !!(this.isSprite || this.isMesh || this.isLine || this.isPoints || this.isImmediateRenderObject)
}

THREE.Object3D.prototype.isDebuggerNode = function() {
    for (var e = this; e; ) {
        if (e.userData.isDebuggerNode)
            return !0;
        e = e.parent
    }
    return !1
}

THREE.Object3D.prototype.cleanup = function() {
    function e(e) {
        return !e.children.length
    }
    function t(i) {
        for (var r = 0, n = 0; n < i.children.length; n++) {
            var o = i.children[n];
            o.isRenderable() || (e(o) ? (o.parent = null,
            i.children.splice(n--, 1),
            r++) : r += t(o))
        }
        return r
    }
    for (; ; ) {
        if (!t(this))
            break
    }
}

THREE.Object3D.prototype.onBeforeUpdateModelViewMatrix = function(e, t, i, r, n, o) {}

THREE.Object3D.prototype.hasBeforeRenderFunction = function(e) {
    if (!this._beforeRenderFunctions)
        return !1;
    for (var t = 0; t < this._beforeRenderFunctions.length; t++) {
        if (this._beforeRenderFunctions[t].name == e)
            return !0
    }
    return !1
}

THREE.Object3D.prototype.addBeforeRenderFunction = function(e, t, i) {
    if (t && (this.traverseChild((function(r) {
        r.isRenderable() && r.addBeforeRenderFunction(e, t, i)
    }
    )),
    this._beforeRenderFunctions = this._beforeRenderFunctions || [],
    void 0 !== i && this._beforeRenderFunctions.length ? this._beforeRenderFunctions.splice(i, 0, {
        name: e,
        func: t
    }) : this._beforeRenderFunctions.push({
        name: e,
        func: t
    }),
    1 === this._beforeRenderFunctions.length)) {
        var r = this.onBeforeRender;
        r && "function () {}" != r.toString() && this._beforeRenderFunctions.splice(0, 0, {
            name: "__originalBeforeRender__",
            func: r
        });
        var n = this;
        this.onBeforeRender = function(e, t, i, r, o, s) {
            for (var a = 0, l = n._beforeRenderFunctions.length; a < l; a++) {
                n._beforeRenderFunctions[a].func.call(n, e, t, i, r, o, s)
            }
        }
    }
}

THREE.Object3D.prototype.removeBeforeRenderFunction = function(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
    t && this.traverseChild((function(t) {
        t.isRenderable() && t.removeBeforeRenderFunction(e)
    }
    )),
    this._beforeRenderFunctions = this._beforeRenderFunctions || [];
    for (var i = 0; i < this._beforeRenderFunctions.length; i++) {
        var r = this._beforeRenderFunctions[i]
            , n = Utils.isFunction(e) ? r.func : r.name;
        n == e && this._beforeRenderFunctions.splice(i--, 1)
    }
    this._beforeRenderFunctions.length || (this.onBeforeRender = function(e, t, i) {}
    )
}

THREE.Object3D.prototype.setPickable = function(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
    this.userData.skipPick = !e,
    t && this.traverse((function(t) {
        var i = t.userData;
        e ? delete i.skipPick : i.skipPick = !0
    }
    ))
}

THREE.Object3D.prototype.getPickable = function() {
    return !this.userData.skipPick
}

THREE.Object3D.prototype.showAll = function() {
    for (var e = this; e; )
        e.visible = !0,
        e = e.parent;
    this.getNodes().forEach((function(e) {
        e.ensureVisible(!0, !0)
    }
    ))
}

THREE.Object3D.prototype.setLayerVisible = function(e) {
    e ? this.layers.enable(0) : this.layers.disable(0)
}

THREE.Object3D.prototype.getLayerVisible = function() {
    return !!(1 & this.layers.mask)
}

THREE.Object3D.prototype.isVisible = function() {
    for (var e = this; e; e = e.parent)
        if (!e.visible)
            return !1;
    return this.getVisible()
}

THREE.Object3D.prototype.ensureParentsVisible = function(e) {
    this.traverseParents((function(t) {
        t.visible = e
    }
    ))
}

THREE.Object3D.prototype.ensureVisible = function(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
    if (void 0 === e) {
        if (this.userData.useVisibleOnly)
            return this.visible;
        for (var i = this; i; i = i.parent)
            if (!i.visible)
                return !1;
        return this.getLayerVisible()
    }
    if ("updateBox" === e) {
        if (this.userData.useVisibleOnly)
            return this.visible;
        for (i = this; i; i = i.parent)
            if (!i.visible && !i.userData.skipBoxVisibleCheck)
                return !1;
        return this.getLayerVisible()
    }
    if (!Utils.isBoolean(e)) {
        var r = this.userData;
        if (!r.alwaysPickable)
            for (var n = this; n; ) {
                if (!n.visible)
                    return !1;
                if (e && !n.layers.test(e.layers))
                    return !1;
                n = n.parent
            }
        return !0
    }
    var o = e;
    this.userData.useVisibleOnly ? this.visible = o : (this.setLayerVisible(o),
    t && (this.visible = o))
}

THREE.Object3D.prototype.getVisible = function() {
    return this.ensureVisible()
}

THREE.Object3D.prototype.getTypeString = function() {
    return this.isSprite ? "Sprite" : this.isMesh ? "Mesh" : this.isLine ? "Line" : this.isPoints ? "Points" : this.isScene ? "Scene" : this.isGroup ? "Group" : "Object3D"
}

THREE.Object3D.prototype.getObjectByUUID = function(e) {
    var t = null;
    return this.traverseBranch((function(i) {
        if (i.uuid == e)
            return t = i,
            !1
    }
    )),
    t
}

THREE.Object3D.prototype.setActive = function(e) {
    this.visible = e
}

THREE.Object3D.prototype.getActive = function() {
    return this.visible
}

THREE.Object3D.prototype.traverseParents = function(e) {
    if (e)
        for (var t = this.parent; t; t = t.parent)
            e(t)
}

THREE.Object3D.prototype.traverseChild = function(e) {
    for (var t = this.children, i = 0, r = t.length; i < r; i++)
        t[i].traverse(e)
}

THREE.Object3D.prototype.traverseBreakable = function(e) {
    if (e(this))
        return this;
    for (var t = this.children, i = 0, r = t.length; i < r; i++) {
        var n = t[i].traverseBreakable(e);
        if (n)
            return n
    }
    return null
}

THREE.Object3D.prototype.traverseBranch = function(e) {
    if (!1 !== e(this))
        for (var t = this.children, i = 0, r = t.length; i < r; i++)
            t[i].traverseBranch(e)
}

THREE.Object3D.prototype.traverseAll = function(e) {
    e(this);
    for (var t = this.children, i = 0, r = t.length; i < r; i++)
        t[i].traverseAll(e)
}

THREE.Object3D.prototype.traverseRenderableNodes = function(e) {
    this.traverse((function(t) {
        t.isRenderable() && e(t)
    }
    ))
}

THREE.Object3D.prototype.getRoot = function() {
    var e = this.parent;
    if (!e)
        return this;
    for (; e.parent; )
        e = e.parent;
    return e
}

THREE.Object3D.prototype.indexOf = function(e) {
    return e ? this.children.indexOf(e) : -1
}

THREE.Object3D.prototype.indexOfParent = function() {
    var e = this.parent;
    if (e)
        return e.children.indexOf(this)
}

THREE.Object3D.prototype.isChildOf = function(e) {
    for (var t = this.parent; t; ) {
        if (t == e)
            return !0;
        t = t.parent
    }
    return !1
}

THREE.Object3D.prototype.getChildIndex = function(e) {
    for (var t = 0; t < this.children.length; t++)
        if (this.children[t] == e)
            return t;
    return -1
}

THREE.Object3D.prototype.getIndexPath = function(e) {
    for (var t = [], i = this; i.parent; ) {
        var r = i.parent
            , n = r.getChildIndex(i);
        if (-1 == n)
            break;
        if (t.push(n),
        r == e)
            break;
        i = r
    }
    return t
}

THREE.Object3D.prototype.getChildNodeByIndexPath = function(e) {
    for (var t = this, i = 0; i < e.length; i++) {
        var r = e[i];
        if (r >= t.children.length)
            return null;
        t = t.children[r]
    }
    return t
}

THREE.Object3D.prototype.getChildNodesNumber = function() {
    var e = 0;
    return this.traverse((function() {
        e++
    }
    )),
    e
}

THREE.Object3D.prototype.getBones = function(e, t) {
    for (var i = [], r = 0; r < t.bones.length; r++) {
        for (var n = t.bones[r].getIndexPath(e), o = this, s = n.length - 1; s >= 0; s--) {
            var a = n[s];
            o = o.children[a]
        }
        i.push(o)
    }
    return i
}

THREE.Object3D.prototype._detachFromParent = function(e, t) {
    this.applyMatrix4(e.matrixWorld),
    e.remove(this),
    t.add(this)
}

THREE.Object3D.prototype._attachToParent = function(e, t) {
    this.applyMatrix4((new THREE.Matrix4).getInverse(t.matrixWorld)),
    e && e.remove(this),
    t.add(this)
}

THREE.Object3D.prototype.attachToParent = function(e, t, i) {
    void 0 === t ? t = e : Utils.isBoolean(t) && (i = t,
    t = e),
    this.parent && (i && this.updateWorldMatrix(!0, !1),
    this._detachFromParent(this.parent, t)),
    e && (i && e.updateWorldMatrix(!0, !1),
    this._attachToParent(t, e))
}

THREE.Object3D.prototype.detachFromParent = function(e) {
    this.parent.updateMatrixWorld(),
    this._detachFromParent(this.parent, e)
}

THREE.Object3D.prototype.attachChildren = function(e, t) {
    this.updateMatrixWorld();
    for (var i = 0; i < e.length; i++)
        THREE.SceneUtils.attach(e[i], t, this)
}

THREE.Object3D.prototype.detachChildren = function(e) {
    this.updateMatrixWorld();
    for (var t = this.children.concat(), i = 0; i < t.length; i++) {
        t[i]._detachFromParent(this, e)
    }
    return t
}

THREE.Object3D.prototype.getChildrenNames = function() {
    var e = [];
    return this.traverse((function(t) {
        t.name.isBlank() || e.push(t.name)
    }
    )),
    e
}

THREE.Object3D.prototype.getVisibleChildrenNumber = function() {
    var e = 0;
    return this.traverse((function(t) {
        t.visible && e++
    }
    )),
    e
}

THREE.Object3D.prototype.getInvisibleChildrenNumber = function() {
    var e = 0;
    return this.traverse((function(t) {
        t.visible || e++
    }
    )),
    e
}

THREE.Object3D.prototype.getParents = function() {
    for (var e = [], t = this.parent; t; t = t.parent)
        e.push(t);
    return e
}

THREE.Object3D.prototype.getInvalidNodes = function() {
    var e = [];
    return this.traverse((function(t) {
        var i = t.scale;
        0 != i.x && 0 != i.y && 0 != i.z || e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getGeometries = function() {
    var e = new Set;
    return this.traverse((function(t) {
        var i = t.geometry;
        i && e.add(i)
    }
    )),
    Array.from(e)
}

THREE.Object3D.prototype.getVisibleMeshes = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isMesh && t.ensureVisible() && e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getGroups = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isGroup && e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getMeshes = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isMesh && e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getSprites = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isSprite && e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getRenderableNodes = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isRenderable() && e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getImages = function() {
    var e = new Set;
    return this.getMaterials().forEach((function(t) {
        Lp.forEach((function(i) {
            var r = t[i];
            if (r) {
                var n = r.image;
                n && (Utils.isArray(n) ? n.forEach((function(t) {
                    e.add(t)
                }
                )) : e.add(n))
            }
        }
        ))
    }
    )),
    Array.from(e)
}

THREE.Object3D.prototype.getTextures = function() {
    var e = new Set;
    return this.getMaterials().forEach((function(t) {
        Object.keys(t).forEach((function(i) {
            var r = t[i];
            r && r.isTexture && e.add(r)
        }
        ))
    }
    )),
    Array.from(e)
}

THREE.Object3D.prototype.getTexturesFromImage = function(e) {
    for (var t = [], i = this.getTextures(), r = 0; r < i.length; r++) {
        var n = i[r];
        n.image == e && t.push(n)
    }
    return t
}

THREE.Object3D.prototype.getTexturesFromURL = function(e) {
    for (var t = [], i = this.getTextures(), r = 0; r < i.length; r++) {
        var n = i[r];
        n.image.currentSrc == e && t.push(n)
    }
    return t
}

THREE.Object3D.prototype.traverseMaterials = function(e) {
    this.traverse((function(t) {
        var i = t.material;
        if (i)
            if (Utils.isArray(i))
                for (var r = 0; r < i.length; r++)
                    e(i[r]);
            else
                e(i)
    }
    ))
}

THREE.Object3D.prototype.traverseTextures = function(e) {
    this.traverse((function(t) {
        var i = t.material;
        if (i)
            if (Utils.isArray(i))
                for (var r = 0; r < i.length; r++)
                    for (var n in i[r]) {
                        (o = i[r][n]) && o.isTexture && e(i[r], n, o)
                    }
            else
                for (var n in i) {
                    var o;
                    (o = i[n]) && o.isTexture && e(i, n, o)
                }
    }
    ))
}

THREE.Object3D.prototype.getMaterials = function() {
    var e = new Set;
    return this.traverse((function(t) {
        var i = t.material;
        i && (Utils.isArray(i) ? i.forEach((function(t) {
            e.add(t)
        }
        )) : e.add(i))
    }
    )),
    Array.from(e)
}

THREE.Object3D.prototype.getMeshByName = function(e) {
    var t = null;
    return this.traverseBreakable((function(i) {
        if (i.isMesh && i.name == e)
            return t = i,
            !0
    }
    )),
    t
}

THREE.Object3D.prototype.hasMesh = function() {
    var e = !1;
    return this.traverseBreakable((function(t) {
        if (t.isMesh)
            return e = !0
    }
    )),
    e
}

THREE.Object3D.prototype.getMeshNames = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isMesh && e.push(t.name)
    }
    )),
    e
}

THREE.Object3D.prototype.getSkinnedMeshes = function() {
    var e = [];
    return this.traverse((function(t) {
        t.isSkinnedMesh && e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.hasSkinnedMesh = function() {
    var e = !1;
    return this.traverseBreakable((function(t) {
        if (t.isSkinnedMesh)
            return e = !0
    }
    )),
    e
}

THREE.Object3D.prototype.hasSprite = function() {
    var e = !1;
    return this.traverseBreakable((function(t) {
        if (t.isSprite)
            return e = !0
    }
    )),
    e
}

THREE.Object3D.prototype.hasMaterial = function(e) {
    if (!e)
        return !1;
    var t = !1;
    return this.traverseBreakable((function(i) {
        if (i.material == e)
            return t = !0
    }
    )),
    t
}

THREE.Object3D.prototype.hasGeometry = function(e) {
    if (!e)
        return !1;
    var t = !1;
    return this.traverseBreakable((function(i) {
        if (i.geometry == e)
            return t = !0
    }
    )),
    t
}

THREE.Object3D.prototype.hasTexture = function(e) {
    if (!e)
        return !1;
    function t(t) {
        for (var i = Object.keys(t), r = 0; r < i.length; r++) {
            var n = t[i[r]];
            if (n && n.isTexture && n == e)
                return !0
        }
        return !1
    }
    var i = !1;
    return this.traverseBreakable((function(e) {
        var r = e.material;
        if (r)
            if (Utils.isArray(r)) {
                if (t(r))
                    return i = !0
            } else if (t(r))
                return i = !0
    }
    )),
    i
}

THREE.Object3D.prototype.replace = function(e, t, i) {
    if (t && t.isObject3D)
        for (var r = 0; r < this.children.length; r++) {
            var n = this.children[r];
            if (n == e) {
                i && i(n),
                n = void 0,
                t.parent = this,
                this.children[r] = t;
                break
            }
        }
}

THREE.Object3D.prototype.insert = function(e, t) {
    e > this.children.length || t && (this.children.splice(e, 0, t),
    t.parent = this)
}

THREE.Object3D.prototype.removeBySelf = function() {
    this.parent && this.parent.remove(this)
}

THREE.Object3D.prototype.getAngles = function() {
    return Utils.parseAngles(this.rotation)
}

THREE.Object3D.prototype.setAngles = function(e) {
    var t = Utils.parseEuler(e);
    this.rotation.copy(t),
    this.updateMatrixWorld(!1, !1)
}

THREE.Object3D.prototype.getFacesNumber = function() {
    var e = 0;
    return this.traverseVisible((function(t) {
        if (t.isMesh) {
            var i = t.geometry;
            if (i.isBufferGeometry) {
                var r = i.index;
                e += r ? r.count / 3 : i.attributes.position.count / 3
            } else
                i.isGeometry && (e += i.faces.length)
        }
    }
    )),
    e
}

THREE.Object3D.prototype.getVerticesNumber = function() {
    var e = 0;
    return this.traverse((function(t) {
        if (t.isMesh) {
            var i = t.geometry;
            if (i.isBufferGeometry) {
                var r = i.index;
                e += r ? i.index.count : i.attributes.position.count
            } else
                i.isGeometry && (e += i.vertices.length)
        }
    }
    )),
    e
}

THREE.Object3D.prototype.getNodes = function() {
    var e = [];
    return this.traverse((function(t) {
        e.push(t)
    }
    )),
    e
}

THREE.Object3D.prototype.getNodeByName = function(e) {
    var t;
    return this.traverseBreakable((function(i) {
        if (i.name == e)
            return t = i,
            !0
    }
    )),
    t
}

THREE.Object3D.prototype.getNodeByID = function(e) {
    var t;
    return this.traverseBreakable((function(i) {
        if (i.id == e)
            return t = i,
            !0
    }
    )),
    t
}

THREE.Object3D.prototype.getNodeByUUID = function(e) {
    var t;
    return this.traverseBreakable((function(i) {
        if (i.uuid == e)
            return t = i,
            !0
    }
    )),
    t
}

THREE.Object3D.prototype.getParent = function() {
    return this.parent
}

THREE.Object3D.prototype.setTransform = function(e) {
    var t = new THREE.Vector3
        , i = new THREE.Vector3
        , r = new THREE.Quaternion;
    e.decompose(t, r, i),
    this.quaternion.copy(r),
    this.position.copy(t),
    this.scale.copy(i)
}

THREE.Object3D.prototype.getDistanceFromCamera = function(e) {
    if (this.parent) {
        this.updateWorldMatrix(!0);
        var t = new THREE.Vector3;
        return this.getWorldPosition(t),
        e.distanceTo(t)
    }
}

THREE.Object3D.prototype.keepSize = function(e, t, i, r, n, o) {
    if (this.parent) {
        r && this.updateWorldMatrix(!0, !1);
        var s = new THREE.Vector3;
        s.setFromMatrixPosition(this.matrixWorld).applyMatrix4(o);
        var a = -s.z;
        if (t.isVector2) {
            var l = [i / t.x, i / t.y];
            this.scale.set(a / l[0], a / l[1], 1)
        } else if (t.isVector3) {
            l = [i / t.x, i / t.y, i / t.z];
            this.scale.set(a / l[0], a / l[1], a / l[2])
        }
        n && this._synMatrixWorld()
    }
}

THREE.Object3D.prototype._synMatrixWorld = function() {
    this.updateWorldMatrix(!0, !1),
    this.updateMatrixWorld()
}

THREE.Object3D.prototype._getWorldPosition = function(e) {
    return void 0 === e && (e = new THREE.Vector3),
    e.setFromMatrixPosition(this._getMatrixWorld())
}

THREE.Object3D.prototype._setWorldPosition = function(e, t) {
    Dp.copy(e),
    this.parent && (this.parent.updateWorldMatrix(!0),
    this.parent.worldToLocal(Dp)),
    this.position.copy(Dp),
    t && this._synMatrixWorld()
}

THREE.Object3D.prototype._setWorldQuaternion = function(e) {
    kp.copy(e),
    this.parent && (this.parent.updateWorldMatrix(!0),
    this.parent.matrixWorld.decompose(Dp, Op, Dp),
    Op.inverse(),
    kp.premultiply(Op)),
    this.quaternion.copy(kp)
}

THREE.Object3D.prototype._setWorldAngles = function(e, t) {
    this.parent && (this.updateWorldMatrix(!0, !1),
    this.parent.matrixWorld.decompose(wp, jp, Sp),
    jp.inverse(),
    e.premultiply(jp)),
    this.quaternion.copy(e),
    t && this._synMatrixWorld()
}

THREE.Object3D.prototype._setWorldScale = function(e, t) {
    this.parent ? (this.updateWorldMatrix(!0),
    this.matrixWorld.decompose(Ap, kp, Dp),
    Dp.copy(e),
    Fp.compose(Ap, kp, Dp),
    Bp.getInverse(this.parent.matrixWorld),
    Fp.premultiply(Bp),
    Fp.decompose(Ap, kp, Dp)) : Dp.copy(e),
    this.scale.copy(Dp),
    t && this._synMatrixWorld()
}

THREE.Object3D.prototype._getWorldScale = function() {
    this.updateWorldMatrix(!0, !1);
    var e = new THREE.Vector3
        , t = new THREE.Quaternion
        , i = new THREE.Vector3;
    return this.matrixWorld.decompose(e, t, i),
    i
}

THREE.Object3D.prototype.cloneByFilter = function(e) {
    for (var t = this.clone(!1), i = 0; i < this.children.length; i++) {
        var r = this.children[i];
        if (!e || e(r)) {
            var n = r.cloneByFilter(e);
            t.add(n)
        }
    }
    return t
}

THREE.Object3D.prototype.getForwardPosition = function(e) {
    var t = new THREE.Vector3;
    return this.updateMatrixWorld(!0),
    this.getWorldDirection(t),
    t.normalize(),
    t.multiplyScalar(e),
    t.add(this.position),
    t
}

THREE.Object3D.prototype._faceTo = function(e) {
    var t = this.worldToLocal(e.clone())
        , i = (new THREE.Vector3).crossVectors(new THREE.Vector3(0,0,1), t).normalize()
        , r = new THREE.Vector3(0,0,1).angleTo(t.normalize().clone());
    this.rotateOnAxis(i, r)
}

THREE.Object3D.prototype._lookAtPosition = function(e, t) {
    var i = (e = e || {}).type
        , r = e.axis
        , n = e.quat
        , o = e.target
        , s = e.targetPosition
        , a = e.targetLocalPosition;
    if ("axis" == i && "y" == r) {
        e.billboard && (this.rotation.x = 0,
        this.rotation.z = 0);
        var l = this.position;
        if (o && o.isCameraController) {
            var u = Utils.parseVector3(s)
                , c = new THREE.Vector3;
            this.getWorldPosition(c);
            var h = o.direction
                , p = c.clone().sub(u).projectOnPlane(Utils.parseVector3(h));
            p.add(u),
            this.parent && this.parent.worldToLocal(p),
            this.rotation.y = Math.atan2(p.x - l.x, p.z - l.z)
        } else
            this.rotation.y = Math.atan2(a.x - l.x, a.z - l.z)
    } else
        this.isCamera || !o || o.isCameraController || this.up.copy(new THREE.Vector3(0,1,0).transformDirection(this.matrixWorld)),
        this.lookAt(s),
        "axis" == i && ("x" == r ? this.rotateY(-Math.PI / 2) : "z" == r && this.rotateX(-Math.PI / 2));
    n && this.quaternion.multiply(n),
    t ? this._synMatrixWorld() : this.updateWorldMatrix(!1, !1)
}

THREE.Object3D.prototype._lookAt = function(e, t) {
    if (this.removeBeforeRenderFunction("__lookAt__"),
    e) {
        var i = this;
        this.addBeforeRenderFunction("__lookAt__", (function(r, n, o, s, a, l) {
            var u = e.targetPosition || o;
            u.isObject3D && (u = u.position),
            e.targetPosition = u,
            e.target = {
                direction: o.getDirection(new THREE.Vector3),
                isCameraController: !0
            },
            i._lookAtPosition(e, Utils.isFunction(t) ? t() : t)
        }
        ))
    }
}

THREE.Object3D.prototype.skipBoundingBox = function(e) {
    this.traverse((function(t) {
        e ? t.userData.skipBoundingBox = e : delete t.userData.skipBoundingBox
    }
    ))
}

THREE.Object3D.prototype.setFrustumCulled = function(e) {
    this.traverse((function(t) {
        t.frustumCulled = e
    }
    ))
}

THREE.Object3D.prototype.getMatrixWorldFromRoot = function(e) {
    this.updateWorldMatrix(!0);
    var t = new THREE.Matrix4;
    if (e)
        for (var i = this; ; ) {
            if (i == e) {
                t.premultiply(i.matrixWorld);
                break
            }
            t.premultiply(i.matrix),
            i = i.parent
        }
    return t
}

THREE.Object3D.prototype.getMatrixFromRoot = function(e) {
    var t = new THREE.Matrix4;
    if (e)
        for (var i = this; i != e; )
            i.updateMatrix(),
            t.premultiply(i.matrix),
            i = i.parent;
    return t
}

THREE.Object3D.prototype.disposeMaterial = function() {
    if (this.material) {
        if (Utils.isArray(this.material))
            for (var e = 0; e < this.material.length; e++) {
                this.material[e].dispose()
            }
        else
            this.material.dispose();
        this.material = null
    }
}

THREE.Object3D.prototype.decomposeTransform = function(e, t, i) {
    return this.matrix.decompose(e, t, i),
    this
}

THREE.Object3D.prototype.decomposeWorldTransform = function(e, t, i) {
    return this.updateWorldMatrix(!0),
    this.matrixWorld.decompose(e, t, i),
    this
}

THREE.Matrix4.prototype.setScale = function(e) {
    var t = this.elements;
    return t[0] = e.x,
    t[5] = e.y,
    t[10] = e.z,
    this
}

THREE.Euler.prototype.multiplyMatrix4 = function(e) {
    var t = new THREE.Quaternion;
    t.setFromEuler(this);
    var i = new THREE.Quaternion;
    i.setFromRotationMatrix(e),
    t.multiply(i),
    this.setFromQuaternion(t)
}

THREE.Euler.prototype.setRotationOrder = function(e) {
    var t = new THREE.Quaternion;
    t.setFromEuler(this, !1),
    this.setFromQuaternion(t, e, !0)
}

THREE.Quaternion.prototype.multiplyMatrix4 = function(e) {
    var t = new THREE.Quaternion;
    t.setFromRotationMatrix(e),
    this.multiply(t)
}

THREE.Quaternion.prototype.getAngles = function() {
    return Utils.parseAngles(this)
}

THREE.Frustum.prototype._intersectsObject = function(e) {
    var t = this;
    return e = e.traverseBreakable((function(e) {
        return e.isMesh && t.intersectsObject(e) ? e : null
    }
    ))
}

THREE.PerspectiveCamera.prototype.orthoSize = function(e, t) {
    var i = Utils.parseVector3(t)
        , r = e.distanceTo(i)
        , n = 2 * Math.tan(this.fov / 2 * Math.PI / 180)
        , o = n * r;
    return {
        x: o * this.aspect,
        y: o,
        depth: n,
        z: r
    }
}

THREE.OrthographicCamera.prototype.orthoSize = function() {
    return {
        x: (this.right - this.left) / this.zoom,
        y: (this.top - this.bottom) / this.zoom
    }
}

THREE.OrthographicCamera.prototype.resize = function(e, t) {
    if (void 0 !== this.userData) {
        var i = this.userData.depth * this.userData.z
            , r = i * (e / t);
        this.left = -r / 2,
        this.right = r / 2,
        this.top = i / 2,
        this.bottom = -i / 2,
        this.updateProjectionMatrix()
    }
}

Object.defineProperty(THREE.CombinedCamera.prototype, "isPerspectiveCamera", {
    get: function() {
        return this.inPerspectiveMode
    }
}),
Object.defineProperty(THREE.CombinedCamera.prototype, "isOrthographicCamera", {
    get: function() {
        return this.inOrthographicMode
    }
}),
Object.defineProperty(THREE.CombinedCamera.prototype, "isLerping", {
    get: function() {
        return this.isPerspectiveLerping || this.isOrthoLerping
    }
}),
THREE.CombinedCamera.prototype.getRaycaster = function(e, t, i) {
    return Rp._setFromCamera(e, t, this, i)
}

THREE.CombinedCamera.prototype.setNear = function(e) {
    this.cameraP.near = e,
    this.cameraO.near = e,
    this.updateProjectionMatrix()
}

THREE.CombinedCamera.prototype.setFar = function(e) {
    this.cameraP.far = e,
    this.cameraO.far = e,
    this.updateProjectionMatrix()
}

THREE.CombinedCamera.prototype.getProjectionMatrixAlways = function() {
    return this._backupProjectionMatrix && (this.isOrthoLerping || this.isOrthographicCamera) ? this._backupProjectionMatrix : this.projectionMatrix
}

THREE.CombinedCamera.prototype.toPerspectiveCamera = function() {
    var e = new THREE.CombinedCamera(1,1,1,1,1,1,1);
    return e.fov = this.fov,
    e.left = this.left,
    e.right = this.right,
    e.top = this.top,
    e.bottom = this.bottom,
    e.cameraO = new THREE.OrthographicCamera(1,1,1,1,1,1),
    e.cameraO.copy(this.cameraO),
    e.cameraP = new THREE.PerspectiveCamera(1,1,1,1),
    e.cameraP.copy(this.cameraP),
    e.zoom = this.zoom,
    e.toPerspective(),
    e
}

THREE.CombinedCamera.prototype.toOrthoCamera = function(e, t) {
    var i = this.cameraP.orthoSize(e, t)
        , r = new THREE.CombinedCamera(i.x,i.y,this.fov,this.near,this.far,this.cameraO.near,this.cameraO.far);
    return r.orthoSize = i,
    r.toOrthographic(),
    r
}

THREE.CombinedCamera.prototype.lerpMatrix = function(e) {
    var t = (e = e || {}).fromMatrix
        , i = e.toMatrix
        , r = e.time
        , n = e.lerpType || LerpType.Quintic.Out
        , o = e.start
        , s = e.stop
        , a = e.complete
        , l = Utils.toMatrixElementsArray(t)
        , u = Utils.toMatrixElementsArray(i);
    this.matrixTween && this.matrixTween.stop(),
    this.matrixTween = new TWEEN.Tween(l).to(u, r).easing(n).onStart((function() {
        o && o()
    }
    )).onUpdate((function() {
        Utils.elementsArrayToMatrix(t, this._object)
    }
    )).onStop((function() {
        s && s()
    }
    )).onComplete((function() {
        a && a()
    }
    )).start()
}

THREE.CombinedCamera.prototype.lerpToOrthographic = function(e, t, i, r) {
    var n = this.toOrthoCamera(e, t);
    this.orthoSize = n.orthoSize,
    this.zoom = 1,
    this.isOrthoLerping = !0,
    this._backupProjectionMatrix = this.projectionMatrix.clone();
    var o = this;
    this.lerpMatrix({
        lerpType: LerpType.Cubic.InOut,
        fromMatrix: this.projectionMatrix,
        toMatrix: n.projectionMatrix,
        time: i,
        stop: function() {
            o.isOrthoLerping = !1,
            r && r()
        },
        complete: function() {
            o.isOrthoLerping = !1,
            o.toOrthographic(),
            r && r()
        }
    })
}

THREE.CombinedCamera.prototype.lerpToPerspective = function(e, t) {
    var i = this.toPerspectiveCamera();
    this.isPerspectiveLerping = !0;
    var r = this;
    this.lerpMatrix({
        fromMatrix: this.projectionMatrix,
        toMatrix: i.projectionMatrix,
        time: e,
        stop: function() {
            r.isPerspectiveLerping = !1,
            t && t()
        },
        complete: function() {
            r.isPerspectiveLerping = !1,
            r.toPerspective(),
            t && t()
        }
    })
}

THREE.CombinedCamera.prototype.getEffectiveFOV = function() {
    return this.cameraP.getEffectiveFOV()
}

THREE.CombinedCamera.prototype.isInView = function(e) {
    var t = new THREE.Matrix4;
    t.multiplyMatrices(this.projectionMatrix, this.matrixWorldInverse);
    var i = new THREE.Frustum;
    return i.setFromProjectionMatrix(t),
    i.intersectsBox(e)
}

THREE.CombinedCamera.prototype.updateMatrixWorld = function(e) {
    this.matrixAutoUpdate && this.updateMatrix(),
    (this.matrixWorldNeedsUpdate || e) && this.matrixWorld.copy(this.matrix);
    var t = Gp();
    t && this.matrixWorld.premultiply(t),
    this.matrixWorldInverse.getInverse(this.matrixWorld)
}

THREE.Mesh.prototype.verticesCount = function() {
    return this.geometry ? this.geometry.isBufferGeometry ? this.geometry.attributes.position.count : this.geometry.vertices.length : 0
}

THREE.Mesh.prototype.simplify = function(e) {
    var t = THING.Math.clamp(e, 0, 1)
        , i = new THREE.SimplifyModifier
        , r = this.geometry;
    r instanceof THREE.BufferGeometry && (r = (new THREE.Geometry).fromBufferGeometry(r)),
    r.mergeVertices();
    var n = THING.Math.toInteger(r.vertices.length * (1 - t))
        , o = i.modify(r, n);
    return new THREE.Mesh(o,this.material)
}

THREE.Mesh.prototype.getPerimeter = function() {
    var e = 0
        , t = this.geometry.attributes;
    if (t) {
        var i = t.position;
        if (i.count < 2)
            return 0;
        for (var r = new THREE.Vector2(i.getX(0),i.getZ(0)), n = 1; n < i.count; n++) {
            e += (s = new THREE.Vector2(i.getX(n),i.getZ(n))).distanceTo(r),
            r = s
        }
        e += r.distanceTo(new THREE.Vector2(i.getX(0),i.getZ(0)))
    } else {
        var o = this.geometry.vertices;
        if (o.length < 2)
            return 0;
        for (r = new THREE.Vector2(o[0].x,o[0].y),
        n = 1; n < o.length; n++) {
            var s;
            e += (s = new THREE.Vector2(o[n].x,o[n].y)).distanceTo(r),
            r = s
        }
        e += r.distanceTo(new THREE.Vector2(o[0].x,o[0].y))
    }
    return e
}

THREE.Mesh.prototype.getArea = function() {
    var e = []
        , t = this.geometry.attributes;
    if (t)
        for (var i = t.position, r = 0; r < i.count; r++) {
            var n = new THREE.Vector2(i.getX(r),i.getZ(r));
            e.push(n)
        }
    else {
        var o = this.geometry.vertices;
        for (r = 0; r < o.length; r++) {
            n = new THREE.Vector2(o[r].x,o[r].y);
            e.push(n)
        }
    }
    var s = THREE.ShapeUtils.area(e);
    return Math.abs(s)
}

THREE.Mesh.prototype.getPoints = function() {
    var e = [];
    this.updateWorldMatrix(!0, !1);
    var t = this.geometry.attributes;
    if (t)
        for (var i = t.position, r = 0; r < i.count; r++) {
            (o = new THREE.Vector3(i.getX(r),i.getY(r),i.getZ(r))).applyMatrix4(this.matrixWorld),
            e.push(o.toArray())
        }
    else {
        var n = this.geometry.vertices;
        if (n)
            for (r = 0; r < n.length; r++) {
                var o;
                (o = n[r].clone()).applyMatrix4(this.matrixWorld),
                e.push(o.toArray())
            }
    }
    return e
}

THREE.Mesh.prototype.getLabelPosition = function(e, t) {
    var i = [];
    if (this.geometry.attributes)
        for (var r = this.geometry.attributes.position, n = 0; n < r.count; n++)
            "xy" == t ? i.push([r.getX(n), r.getY(n)]) : i.push([r.getX(n), r.getZ(n)]);
    else
        for (n = 0; n < this.geometry.vertices.length; n++) {
            var o = this.geometry.vertices[n];
            "xy" == t ? i.push([o.x, o.y]) : i.push([o.x, o.z])
        }
    if (!i.length)
        return null;
    if (i.length > 1) {
        var s = [0, 0];
        for (n = 0; n < i.length; n++) {
            var a = i[n];
            s[0] |= !!a[0],
            s[1] |= !!a[1]
        }
        if (!s[0] || !s[1])
            return null
    }
    var l = [];
    if (l.push(i),
    e && 0 != e.length)
        for (n = 0; n < e.length; n++) {
            var u = [e[n][0], e[n][1], e[n][2], e[n][3]];
            l.push(u)
        }
    var c, h = new polylabel(l);
    return c = "xy" == t ? this.localToWorld(new THREE.Vector3(h[0],h[1],0)) : this.localToWorld(new THREE.Vector3(h[0],0,h[1])),
    this.getRayCastPosition(c)
}

THREE.Mesh.prototype.getAvaliableLabelPosition = function(e, t, i) {
    var r = function(e, t, i) {
        var r = e[0]
            , n = t[0]
            , o = e[1]
            , s = t[1]
            , a = Math.max(r, i.l);
        if (a > n || a > i.r)
            return !1;
        var l = Math.min(n, i.r);
        if (l < r || l < i.l)
            return !1;
        var u = Math.max(o, i.t);
        if (u > s || u > i.b)
            return !1;
        var c = Math.min(s, i.b);
        return !(c < o || c < i.t)
    }
        , n = function(e, t, i, n, o) {
        for (var s = i.x, a = "xy" == o ? i.y : i.z, l = [s - n[0], a - n[1]], u = [s + n[0], a + n[1]], c = 0; c < e.length; c++) {
            var h = e[c]
                , p = t[c]
                , d = h.x
                , f = "xy" == o ? h.y : h.z
                , m = p[0] / 2
                , g = p[1] / 2;
            if (r(l, u, {
                l: d - m,
                t: f - g,
                r: d + m,
                b: f + g
            }))
                return !0
        }
        return !1
    };
    this.updateMatrixWorld();
    var o = new THREE.Matrix4;
    if (o.getInverse(this.matrixWorld),
    i && i.length && i.length % 4)
        return THING.Utils.error("The hole points number must arrange by 4"),
        null;
    for (var s = [], a = 0; a < i.length; a += 4) {
        var l = Utils.parseVector3(i[a]).applyMatrix4(o)
            , u = Utils.parseVector3(i[a + 1]).applyMatrix4(o)
            , c = Utils.parseVector3(i[a + 2]).applyMatrix4(o)
            , h = Utils.parseVector3(i[a + 3]).applyMatrix4(o);
        l = [l.x, l.y],
        u = [u.x, u.y],
        c = [c.x, c.y],
        h = [h.x, h.y],
        s.push([l, u, c, h])
    }
    var p = []
        , d = [];
    for (a = 0; a < e.length; a++) {
        var f = e[a]
            , m = f[0] / 2
            , g = f[1] / 2;
        if (0 != m && 0 != g) {
            var v = this.getLabelPosition(s, t);
            if (!v)
                break;
            var y = v.clone();
            y.applyMatrix4(o),
            n(p, e, y, [m, g], t) || (d.push(v),
            p.push(y));
            var b = y.x
                , _ = "xy" == t ? y.y : y.z;
            l = [b - m, _ - g],
            u = [b + m, _ - g],
            c = [b + m, _ + g],
            h = [b - m, _ + g];
            s.push([l, u, c, h])
        }
    }
    return d
}

THREE.Mesh.prototype.getRayCastPosition = function(e) {
    this.updateMatrixWorld();
    var t = e.clone();
    this.worldToLocal(t);
    var i = t.clone();
    i.z--;
    var r = function(t, i, r) {
        t.localToWorld(i),
        t.localToWorld(r);
        var n = new THREE.Vector3;
        n.subVectors(r, i),
        n.normalize();
        var o = e.clone();
        o.add(n.clone().multiplyScalar(-1e3));
        var s = new THREE.Raycaster;
        s.ray.origin.copy(o),
        s.ray.direction.copy(n);
        var a = s.intersectObjectForcible(t, !0);
        if (!a.length)
            return null;
        return a[0].point
    }(this, t, i);
    if (r)
        return r
}

THREE.LOD.prototype.setLevel = function(e) {
    if (!(e >= this.levels.length)) {
        for (var t = 0; t < this.levels.length; t++)
            this.levels[t].object.visible = !1;
        this.levels[e].object.visible = !0
    }
}

THREE.Raycaster.prototype._setFromCamera = function(e, t, i, r) {
    return void 0 === e && void 0 === t ? (Ep.subVectors(r, i.position),
    Ep.normalize(),
    this.set(i.position, Ep)) : (xp.x = e / r.width * 2 - 1,
    xp.y = -t / r.height * 2 + 1,
    this.setFromCamera(xp, i)),
    this
}

THREE.Raycaster.prototype.clone = function() {
    return new THREE.Raycaster(this.ray.origin.clone(),this.ray.direction.clone())
}

THREE.Raycaster.prototype._intersectObjectForcible = function(e, t, i, r) {
    if (e.raycast(t, i),
    !0 === r)
        for (var n = e.children, o = 0, s = n.length; o < s; o++)
            this._intersectObjectForcible(n[o], t, i, !0)
}

THREE.Raycaster.prototype.intersectObjectForcible = function(e, t, i) {
    var r = i || [];
    return this._intersectObjectForcible(e, this, r, t),
    r.sort((function(e, t) {
        return e.distance - t.distance
    }
    )),
    r
}

THREE.Raycaster.prototype.intersectEnsureVisibleObject = function(e, t, i, r) {
    if (!1 !== e.ensureVisible(r) && (e.raycast(this, t),
    !0 === i))
        for (var n = e.children, o = 0, s = n.length; o < s; o++)
            this.intersectEnsureVisibleObject(n[o], t, !0, r)
}

THREE.Raycaster.prototype.intersectEnsureVisibleObjects = function(e, t, i) {
    var r = [];
    if (!1 === Array.isArray(e))
        return THING.Utils.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
        r;
    for (var n = 0, o = e.length; n < o; n++)
        this.intersectEnsureVisibleObject(e[n], r, t, i);
    return r.sort((function(e, t) {
        return e.distance - t.distance
    }
    )),
    r
}

THREE.Raycaster.prototype.intersectCollisionObjects = function(e, t, i) {
    var r = [];
    return function e(t, i, r, n, o) {
        if (!1 !== t.visible && t.layers.test(n.layers)) {
            t.raycast(i, r);
            for (var s = t.children, a = 0, l = s.length; a < l; a++)
                e(s[a], i, r, n)
        }
    }(e, this, r, t),
    r.sort(ascSort),
    r
}

THREE.Geometry.prototype.getVerticesCount = function() {
    return this.vertices.length
}

THREE.Geometry.prototype.genFaceVertexUVs = function() {
    this.computeFaceNormals(),
    this.computeVertexNormals(),
    this.computeBoundingBox();
    for (var e = this.boundingBox.max, t = this.boundingBox.min, i = new THREE.Vector2(0 - t.x,0 - t.y), r = new THREE.Vector2(e.x - t.x,e.y - t.y), n = this.faces, o = [], s = 0; s < n.length; s++) {
        var a = this.vertices[n[s].a]
            , l = this.vertices[n[s].b]
            , u = this.vertices[n[s].c]
            , c = new THREE.Vector2((a.x + i.x) / r.x,(a.y + i.y) / r.y)
            , h = new THREE.Vector2((l.x + i.x) / r.x,(l.y + i.y) / r.y)
            , p = new THREE.Vector2((u.x + i.x) / r.x,(u.y + i.y) / r.y);
        o.push([c, h, p])
    }
    for (s = 0; s < this.faceVertexUvs.length; s++)
        this.faceVertexUvs[s] = o.concat();
    this.uvsNeedUpdate = !0,
    this.elementsNeedUpdate = !0
}

THREE.Scene.prototype.verticesCount = function() {
    var e = 0;
    return this.traverse((function(t) {
        t.isMesh && (e += t.verticesCount())
    }
    )),
    e
}

THREE.AnimationMixer.prototype.isRunning = function(e) {
    for (var t = this._actions, i = this._nActiveActions, r = 0; r !== i; ++r) {
        var n = t[r];
        if (e) {
            var o = n.getClip();
            if (o && e != o.name)
                continue
        }
        if (n.isRunning())
            return !0
    }
    return !1
}

THREE.AnimationMixer.prototype.log = function() {
    for (var e = this.stats, t = 0; t < this._actions.length; t++) {
        var i = this._actions[t]
            , r = i.getClip()
            , n = i.getEffectiveWeight();
        0 != n && THING.Utils.log("action: [name: " + r.name + ", weight: " + n + "]")
    }
    THING.Utils.log("action: " + e.actions.inUse + "/" + e.actions.total),
    THING.Utils.log("bindings: " + e.bindings.inUse + "/" + e.bindings.total),
    THING.Utils.log("controlInterpolants: " + e.controlInterpolants.inUse + "/" + e.controlInterpolants.total)
}

THREE.Material.prototype._isCloned = function() {
    return !!this._origin_material
}

THREE.Material.prototype._getOriginal = function() {
    var e = this._origin_material;
    return e || this
}

THREE.Material.prototype._getPrevMaterial = function() {
    var e = this._prev_material;
    return e || this._getOriginal()
}

THREE.Material.prototype._pushAndCloneSelf = function() {
    var e = this.clone();
    return e._origin_material = this._getOriginal(),
    e._prev_material = this,
    e
}

THREE.Material.prototype._pop = function() {
    var e = this.__materialsQueue__;
    if (e && e.length) {
        for (; e.length; ) {
            e[e.length - 1].dispose(),
            e.splice(e.length - 1, 1)
        }
        e.length || delete this.__materialsQueue__
    }
}
;
var Yp = THREE.Material.prototype.copy;
THREE.Material.prototype.copy = function(e) {
    return Yp.call(this, e),
    this.defines = void 0 !== e.defines ? JSON.parse(JSON.stringify(e.defines)) : void 0,
    this.isMeshStandardMaterial || this.defines && "" == this.defines.STANDARD && delete this.defines.STANDARD,
    this.__texture = e.__texture,
    this._replace_map = e._replace_map,
    this._replace_alphaMap = e._replace_alphaMap,
    this._origin_material = e._origin_material,
    this
}

THREE.Material.prototype.getTextures = function() {
    var e = new Set;
    for (var t in this) {
        var i = this[t];
        i && i.isTexture && e.add(i)
    }
    return Array.from(e)
}

THREE.Box3.prototype.getIntersection = function(e) {
    var t = new THREE.Box3;
    return this.intersectsBox(e) && (t.min.x = Math.max(this.min.x, e.min.x),
    t.max.x = Math.min(this.max.x, e.max.x),
    t.min.y = Math.max(this.min.y, e.min.y),
    t.max.y = Math.min(this.max.y, e.max.y),
    t.min.z = Math.max(this.min.z, e.min.z),
    t.max.z = Math.min(this.max.z, e.max.z)),
    t
}

THREE.Box3.prototype.expandByGeometry = function(e, t) {
    return e.boundingBox || e.computeBoundingBox(),
    Pp.copy(e.boundingBox),
    t && Pp.applyMatrix4(t),
    this.union(Pp),
    this
}

THREE.Box3.prototype._setFromObject = function(e, t, i) {
    var r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
    r && this.makeEmpty(),
    e.updateWorldMatrix(!0, !0);
    var n = this;
    e.getWorldPosition(wp);
    var o = !1;
    e.traverse((function(e) {
        if (!t || !1 !== t(e)) {
            e.userData.forceBoundingBox && (e.getWorldPosition(Tp),
            i && Tp.applyMatrix4(i),
            n.expandByPoint(Tp),
            o = !0);
            var r = e.userData.boundingBoxSize;
            if (r) {
                var s = THING.Math.scaleVector(r, .5);
                Tp.fromArray(THING.Math.negVector(s)),
                Mp.fromArray(s),
                Pp.set(Tp, Mp);
                var a = {
                    x: 0,
                    y: 0,
                    z: 0
                }
                    , l = e.userData.boundingBoxPivot;
                l && (a.x = r[0] * (l[0] - .5),
                a.y = r[1] * (l[1] - .5),
                a.z = r[2] * (l[2] - .5)),
                Pp.getBoundingPositions().forEach((function(t) {
                    t.add(a),
                    t.applyMatrix4(e.matrixWorld),
                    i && t.applyMatrix4(i),
                    n.expandByPoint(t),
                    o = !0
                }
                ))
            }
            var u = e.geometry;
            u && (i ? (bp.multiplyMatrices(i, e.matrixWorld),
            n.expandByGeometry(u, bp)) : n.expandByGeometry(u, e.matrixWorld),
            o = !0)
        }
    }
    )),
    o || t && !t(e) && (o = !0),
    o || (i && wp.applyMatrix4(i),
    this.expandByPoint(wp)),
    this.getSize(Cp);
    var s = 1e-8;
    return 0 == Cp.x && (this.min.x -= s,
    this.max.x += s),
    0 == Cp.y && (this.min.y -= s,
    this.max.y += s),
    0 == Cp.z && (this.min.z -= s,
    this.max.z += s),
    this
}

THREE.Box3.prototype.getBoundingPositions = function() {
    var e = this.min
        , t = this.max;
    return [new THREE.Vector3(e.x,e.y,e.z), new THREE.Vector3(t.x,e.y,e.z), new THREE.Vector3(e.x,e.y,t.z), new THREE.Vector3(t.x,e.y,t.z), new THREE.Vector3(e.x,t.y,e.z), new THREE.Vector3(t.x,t.y,e.z), new THREE.Vector3(e.x,t.y,t.z), new THREE.Vector3(t.x,t.y,t.z)]
}

THREE.OrbitControls.prototype.setObject = function(e) {
    this.object = e
}

THREE.OrbitControls.prototype.getObject = function() {
    return this.object
}

THREE.OrbitControls.prototype.getPosition = function() {
    return this.object.position
}

THREE.OrbitControls.prototype.setPosition = function(e) {
    this.object.position.copy(e)
}

THREE.OrbitControls.prototype.setTarget = function(e) {
    this.target.copy(e)
}

THREE.OrbitControls.prototype.getTarget = function() {
    return this.target
}

THREE.OrbitControls.prototype.clone = function() {
    var e = new THREE.OrbitControls(this.object,this.domElement);
    return e.enabled = this.enabled,
    e.target = this.target.clone(),
    e.minDistance = this.minDistance,
    e.maxDistance = this.maxDistance,
    e.minZoom = this.minZoom,
    e.maxZoom = this.maxZoom,
    e.minPolarAngle = this.minPolarAngle,
    e.maxPolarAngle = this.maxPolarAngle,
    e.minAzimuthAngle = this.minAzimuthAngle,
    e.maxAzimuthAngle = this.maxAzimuthAngle,
    e.enableDamping = this.enableDamping,
    e.dampingFactor = this.dampingFactor,
    e.enableZoom = this.enableZoom,
    e.zoomSpeed = this.zoomSpeed,
    e.zoomFactor = this.zoomFactor,
    e.enableRotate = this.enableRotate,
    e.rotateSpeed = this.rotateSpeed,
    e.enablePan = this.enablePan,
    e.panSpeed = this.panSpeed,
    e.screenSpacePanning = this.screenSpacePanning,
    e.keyPanSpeed = this.keyPanSpeed,
    e.autoRotate = this.autoRotate,
    e.autoRotateSpeed = this.autoRotateSpeed,
    e.enableKeys = this.enableKeys,
    e.target0 = this.target0.clone(),
    e.position0 = this.position0.clone(),
    e.zoom0 = this.zoom0,
    e
}

THREE.EarthOrbitControls.prototype.setObject = function(e) {
    this.object = e
}

THREE.EarthOrbitControls.prototype.getObject = function() {
    return this.object
}

THREE.EarthOrbitControls.prototype.getPosition = function() {
    return this.object.position
}

THREE.EarthOrbitControls.prototype.setPosition = function(e) {
    this.object.position.copy(e)
}

THREE.EarthOrbitControls.prototype.setTarget = function(e) {
    this.target.copy(e)
}

THREE.EarthOrbitControls.prototype.getTarget = function() {
    return this.target
}

THREE.EarthOrbitControls.prototype.clone = function() {
    var e = new THREE.EarthOrbitControls(this.object,this.domElement);
    return e.enabled = this.enabled,
    e.isEarth = this.isEarth,
    e.target = this.target.clone(),
    e.minDistance = this.minDistance,
    e.maxDistance = this.maxDistance,
    e.minZoom = this.minZoom,
    e.maxZoom = this.maxZoom,
    e.minPolarAngle = this.minPolarAngle,
    e.maxPolarAngle = this.maxPolarAngle,
    e.minAzimuthAngle = this.minAzimuthAngle,
    e.maxAzimuthAngle = this.maxAzimuthAngle,
    e.enableDamping = this.enableDamping,
    e.dampingFactor = this.dampingFactor,
    e.enableZoom = this.enableZoom,
    e.zoomSpeed = this.zoomSpeed,
    e.zoomFactor = this.zoomFactor,
    e.enableRotate = this.enableRotate,
    e.rotateSpeed = this.rotateSpeed,
    e.enablePan = this.enablePan,
    e.panSpeed = this.panSpeed,
    e.screenSpacePanning = this.screenSpacePanning,
    e.keyPanSpeed = this.keyPanSpeed,
    e.autoRotate = this.autoRotate,
    e.autoRotateSpeed = this.autoRotateSpeed,
    e.enableKeys = this.enableKeys,
    e.target0 = this.target0.clone(),
    e.position0 = this.position0.clone(),
    e.zoom0 = this.zoom0,
    e._leftInteractive = this._leftInteractive,
    e._keepTarget = this._keepTarget,
    e.maxPitchAngle = this.maxPitchAngle,
    e._minPolarAngle = this._minPolarAngle,
    e._maxPolarAngle = this._maxPolarAngle,
    e.standardRadius = this.standardRadius,
    e.targetMaxOffset = this.targetMaxOffset,
    e.panStander = this.panStander,
    e.isDispatchEvent = this.isDispatchEvent,
    e.enableZoomOnTarget = this.enableZoomOnTarget,
    e._isCameraStatic = this._isCameraStatic,
    Utils.mergeObject(e.options, this.options),
    e
}

THREE.WebGLRenderer.prototype.getContext = function(e) {
    return this.context
}

THREE.ShaderChunk.map_fragment = ["", "#ifdef USE_MAP", "#ifdef USE_DIFFUSE_UV2", "vec4 texelColor = texture2D( map, vUv2 );", "#else", "vec4 texelColor = texture2D( map, vUv );", "#endif", "texelColor = mapTexelToLinear( texelColor );", "diffuseColor *= texelColor;", "#endif", ""].join("\n"),
THREE.ShaderChunk.alphamap_fragment = ["", "#ifdef USE_ALPHAMAP", "#ifdef USE_ALPHAMAP_REVERSE", "diffuseColor.a *= 1.0 - texture2D( alphaMap, vAlphaUV).g;", "#else", "diffuseColor.a *= texture2D( alphaMap, vAlphaUV).g;", "#endif", "#endif", ""].join("\n"),
THREE.ShaderChunk.uv2_pars_fragment = ["", "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP ) || defined (USE_DIFFUSE_UV2)", "varying vec2 vUv2;", "#endif", "#ifdef USE_ALPHAMAP", "varying vec2 vAlphaUV;", "#endif", "#ifdef USE_EMISSIVEMAP", "varying vec2 vEmissiveUV;", "#endif", ""].join("\n"),
THREE.ShaderChunk.uv2_pars_vertex = ["", "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP ) || defined( USE_ALPHA_UV2 ) || defined (USE_DIFFUSE_UV2)", "attribute vec2 uv2;", "#endif", "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP ) || defined (USE_DIFFUSE_UV2)", "varying vec2 vUv2;", "#endif", "#ifdef USE_ALPHA_UV3", "#if defined(USE_ALPHAMAP) || defined(USE_EMISSIVEMAP)", "attribute vec2 uv3;", "#endif", "#endif", "#ifdef USE_ALPHA_UV4", "#if defined(USE_ALPHAMAP) || defined(USE_EMISSIVEMAP)", "attribute vec2 uv4;", "#endif", "#endif", "#ifdef USE_ALPHAMAP", "varying vec2 vAlphaUV;", "uniform mat3 uvTransform1;", "#endif", "#ifdef USE_EMISSIVEMAP", "varying vec2 vEmissiveUV;", "uniform mat3 uvTransform2;", "#ifdef USE_EMISSIVE_AROUND_UV", "attribute vec2 uv8;", "#endif", "#endif", ""].join("\n"),
THREE.ShaderChunk.uv2_vertex = ["#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP ) || defined (USE_DIFFUSE_UV2)", "#if defined(USE_DIFFUSE_UV2) && defined(USE_MAP)", "vUv2 = (uvTransform * vec3(uv2, 1.0)).xy;", "#else", "vUv2 = uv2;", "#endif", "#endif", "#ifdef USE_ALPHAMAP", "vAlphaUV = (uvTransform1 * vec3(uv, 1.0)).xy;", "#ifdef USE_ALPHA_UV2", "vAlphaUV = (uvTransform1 * vec3(uv2, 1.0)).xy;", "#endif", "#ifdef USE_ALPHA_UV3", "vAlphaUV = (uvTransform1 * vec3(uv3, 1.0)).xy;", "#endif", "#ifdef USE_ALPHA_UV4", "vAlphaUV = (uvTransform1 * vec3(uv4, 1.0)).xy;", "#endif", "#endif", "#ifdef USE_EMISSIVEMAP", "#ifndef USE_EMISSIVETRANSFORM", "mat3 emissiveTransform = uvTransform;", "#else", "mat3 emissiveTransform = uvTransform2;", "#endif", "vEmissiveUV = (emissiveTransform * vec3(uv, 1.0)).xy;", "#ifdef USE_EMISSIVE_AROUND_UV", "vEmissiveUV = (emissiveTransform * vec3(uv8, 1.0)).xy;", "#endif", "#ifdef USE_ALPHA_UV2", "vEmissiveUV = (emissiveTransform * vec3(uv2, 1.0)).xy;", "#endif", "#ifdef USE_ALPHA_UV3", "vEmissiveUV = (emissiveTransform * vec3(uv3, 1.0)).xy;", "#endif", "#ifdef USE_ALPHA_UV4", "vEmissiveUV = (emissiveTransform * vec3(uv4, 1.0)).xy;", "#endif", "#endif", ""].join("\n");
["sprite", "basic"].forEach((function(e) {
    var t = THREE.ShaderLib[e];
    t.vertexShader = t.vertexShader.replace("#include <clipping_planes_pars_vertex>", "\n\t#include <clipping_planes_pars_vertex>\n\t#ifdef USE_GPUPICKER\n\t\tuniform float baseId;\n\t\tvarying vec4 worldId;\n\t#endif\n\t"),
    t.vertexShader = t.vertexShader.replace("#include <fog_vertex>", "\n\t#include <fog_vertex>\n\t#ifdef USE_GPUPICKER\n\t\tvec3 a = fract(vec3(1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)) * baseId);\n\t\ta -= a.xxy * vec3(0.0, 1.0/255.0, 1.0/255.0);\n\t\tworldId = vec4(a,1);\n\t#endif\n\t"),
    t.fragmentShader = t.fragmentShader.replace("#include <clipping_planes_pars_fragment>", "\n\t#include <clipping_planes_pars_fragment>\n\t#ifdef USE_GPUPICKER\n\t\tvarying vec4 worldId;\n\t#endif\n\t"),
    t.fragmentShader = t.fragmentShader.replace("gl_FragColor.rgb = gl_FragColor.rgb * ( 1.0 - highlightIntensity ) + highlightColor * highlightIntensity;", "\n\tgl_FragColor.rgb = gl_FragColor.rgb * ( 1.0 - highlightIntensity ) + highlightColor * highlightIntensity;\n\t\n\t#ifdef USE_GPUPICKER\n\t\tgl_FragColor = worldId;\n\t#endif\n\t"),
    t.fragmentShader = t.fragmentShader.replace("#include <clipping_planes_fragment>", "\n\t#ifdef USE_MAP\n\t\t#ifdef USE_UV_DISCARD\n\t\t\tif (vUv.x < 0. || vUv.x > 1. || vUv.y < 0. || vUv.y > 1.) discard;\n\t\t#endif\n\t#endif\n\t#include <clipping_planes_fragment>\n\t")
}
)),
THREE.ShaderChunk.aomap_fragment = "\n\t#ifdef USE_AOMAP\n\t\t#ifdef WALL_AO\n\t\t\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity * 0.5 + 1.5;\n\t\t#else\n\t\t\t#ifdef FLOOR_AO\n\t\t\t\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.25;\n\t\t\t#else\n\t\t\t\t#ifdef USE_RGBAOMAP\n\t\t\t\t\tvec3 ambientOcclusion = ( texture2D( aoMap, vUv2 ).rgb - 1.0 ) * aoMapIntensity * 1.6 + 1.7;\n\t\t\t\t#else\n\t\t\t\t\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity * 1.6 + 1.7;\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t#endif\n\t\t// reflectedLight.indirectDiffuse *= ambientOcclusion;\n\t\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t\t#endif\n\t#else\n\t\tfloat ambientOcclusion = 1.4;\n\t#endif\n",
THREE.ShaderChunk.emissivemap_fragment = "\n\t#ifdef USE_EMISSIVEMAP\n\n\t\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveUV );\n\n\t\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\t\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n\t#endif\n\n\t#ifdef STANDARD\n\t\ttotalEmissiveRadiance = vec3(0.0,0.0,0.0);\n\t\tvec3 newEmissiveColor = emissive;\n\t\t#ifdef USE_EMISSIVEMAP\n\t\t\tnewEmissiveColor = emissive * emissiveColor.rgb;\n\t\t\t#ifdef USE_SIDE_EMISSIVE\n\t\t\t\tvec3 emissiveUp = vec3(0., 1., 0.);\n\t\t\t\t#ifdef ENV_QUATERNION\n\t\t\t\t\tvec4 emissiveQuat = vec4(0., 0., 0., 1.);\n\t\t\t\t\temissiveQuat.x = -envQuaternion.x;\n\t\t\t\t\temissiveQuat.y = -envQuaternion.y;\n\t\t\t\t\temissiveQuat.z = -envQuaternion.z;\n\t\t\t\t\temissiveQuat.w = envQuaternion.w;\n\t\t\t\t\temissiveUp = applyQuaternion(emissiveUp, emissiveQuat);\n\t\t\t\t#endif\n\t\t\t\tnewEmissiveColor *= newEmissiveColor * (1. - abs(dot( inverseTransformDirection( normal, viewMatrix ), emissiveUp )));\n\t\t\t#endif\n\t\t#endif\n\t#endif\n",
THREE.ShaderChunk.encodings_fragment = ["gl_FragColor = linearToOutputTexel( gl_FragColor );", "#if defined(STANDARD) || defined(USE_AOMAP)", "gl_FragColor.rgb *= ambientOcclusion;", "#elif defined(FLOOR_AO)", "gl_FragColor.rgb *= 1.2;", "#endif", "#ifdef STANDARD", "gl_FragColor.rgb += newEmissiveColor;", "#endif"].join("\n"),
THREE.ShaderChunk.tonemapping_fragment = ["#if defined( TONE_MAPPING ) && defined(STANDARD)", "gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );", "#endif"].join("\n");
["basic", "physical"].forEach((function(e) {
    var t = THREE.ShaderLib[e];
    t.vertexShader = t.vertexShader.replace("#include <fog_pars_vertex>", "\n\t#include <fog_pars_vertex>\n\t#ifdef USE_VISIBLE\n\t\tattribute float vis;\n\t#endif\n\t#ifdef USE_3DTILESEXTENT\n\t\tattribute float id;\n\t\tuniform sampler2D batchTexture;\n\t\tuniform vec2 batchTextureStep;\n\t\tvarying vec4 tile_featureColor;\n\t#endif\n\t"),
    t.vertexShader = t.vertexShader.replace("#include <fog_vertex>", "\n\t#include <fog_vertex>\n\t#ifdef USE_VISIBLE\n\t\tgl_Position *= vis;\n\t#endif\n\t#ifdef USE_3DTILESEXTENT\n\t\tfloat stepX = batchTextureStep.x; \n\t\tfloat centerX = batchTextureStep.y; \n\t\tvec2 st = vec2(centerX + (id * stepX), 0.5); \n\t\tvec4 featureProperties = texture2D(batchTexture, st);\n\t\tfloat show = ceil(featureProperties.a); \n\t\tgl_Position *= show;\n\t\ttile_featureColor = featureProperties; \n\t#endif\n\t"),
    t.fragmentShader = t.fragmentShader.replace("#include <clipping_planes_pars_fragment>", "\n\t#include <clipping_planes_pars_fragment>\n\t#ifdef USE_3DTILESEXTENT\n\t\tvarying vec4 tile_featureColor;\n\t#endif\n\t"),
    t.fragmentShader = t.fragmentShader.replace("#include <dithering_fragment>", "\n\t#include <dithering_fragment>\n\t#ifdef USE_3DTILESEXTENT\n\t\tgl_FragColor = vec4( gl_FragColor.r * tile_featureColor.r, gl_FragColor.g * tile_featureColor.g, gl_FragColor.b * tile_featureColor.b, gl_FragColor.a * tile_featureColor.a );\n\t#endif\n\t")
}
)),
THREE.BufferGeometry.prototype.getVerticesCount = function() {
    return this.attributes.position.count
}

THREE.BufferGeometry.prototype.addAttribute = function(e, t) {
    return t && t.isBufferAttribute || t && t.isInterleavedBufferAttribute ? "index" === e ? (THING.Utils.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),
    this.setIndex(t),
    this) : this.setAttribute(e, t) : (THING.Utils.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),
    this.setAttribute(e, new BufferAttribute(arguments[1],arguments[2])))
}

THREE.BufferAttribute.prototype.setDynamic = function(e) {
    return this.setUsage(!0 === e ? THREE.DynamicDrawUsage : THREE.StaticDrawUsage),
    this
}

THREE.BufferGeometry.prototype.computeBoundingBox = function() {
    null === this.boundingBox ? this.boundingBox = new THREE.Box3 : this.boundingBox.makeEmpty();
    var e = this.attributes.position;
    if (void 0 !== e)
        for (var t = this.index ? this.index.array : null, i = this.drawRange.start, r = this.drawRange.count != 1 / 0 ? this.drawRange.count : t ? t.length : e.count; i < r; i++)
            t ? _p.fromBufferAttribute(e, t[i]) : _p.fromBufferAttribute(e, i),
            this.boundingBox.expandByPoint(_p)
}

THREE.WebGLRenderer.prototype.saveInfo = function() {
    var e = {};
    return e.memory = {
        geometries: this.info.memory.geometries,
        textures: this.info.memory.textures
    },
    e.render = {
        frame: this.info.render.frame,
        calls: this.info.render.calls,
        triangles: this.info.render.triangles,
        points: this.info.render.points,
        lines: this.info.render.lines
    },
    e.programs = this.info.programs.slice(0),
    e.autoReset = this.info.autoReset,
    this.info.external && (e.external = {
        byteLengths: {
            textures: this.info.external.byteLengths.textures,
            buffers: this.info.external.byteLengths.buffers
        }
    }),
    e
}

THREE.WebGLRenderer.prototype.loadInfo = function(e) {
    try {
        this.info.memory = {
            geometries: e.memory.geometries,
            textures: e.memory.textures
        },
        this.info.render = {
            frame: e.render.frame,
            calls: e.render.calls,
            triangles: e.render.triangles,
            points: e.render.points,
            lines: e.render.lines
        },
        this.info.programs = e.programs.slice(0),
        this.info.autoReset = e.autoReset,
        this.info.external = {
            byteLengths: {
                textures: e.external.byteLengths.textures,
                buffers: e.external.byteLengths.buffers
            }
        }
    } catch (e) {
        console.error("WebGLInfo error in fromJSON, content =", e)
    }
}

HTMLElement.prototype._getStyleTransform = function() {
    var e = this.style.transform;
    return e || "none" != (e = getComputedStyle(this, !1).transform) ? e : ""
}

HTMLDivElement.prototype._setVisible = function(e) {
    var t = this.style;
    e ? ("visible" != t.visibility && (t.visibility = "visible"),
    "block" != t.display && (t.display = "block")) : ("hidden" != t.visibility && (t.visibility = "hidden"),
    "none" != t.display && (t.display = "none"))
}

HTMLDivElement.prototype._isVisible = function() {
    return "hidden" != this.style.visibility && "none" != this.style.display
}

HTMLDivElement.prototype._getWorldScale = function() {
    for (var e = [], t = this; t; t = t.parentElement)
        e.push(t);
    e = e.reverse();
    var i = [1, 1];
    return e.forEach((function(e) {
        var t = e._getStyleTransform();
        if (t) {
            var r;
            if (t.includes("scale")) {
                var n = t.indexOf("scale");
                r = function(e) {
                    if (e.includes(",")) {
                        var t = Utils.scanf(e, "scale(%f, %f)");
                        return isNaN(t[0]) ? null : [Utils.parseNumber(t[0], 1), Utils.parseNumber(t[1], 1)]
                    }
                    if (t = Utils.scanf(e, "scale(%f)"),
                    isNaN(t))
                        return null;
                    var i = Utils.parseNumber(t, 1);
                    return [i, i]
                }(t.substring(n))
            } else if (t.includes("matrix")) {
                var o = t.indexOf("matrix");
                r = function(e) {
                    var t = Utils.scanf(e, "matrix(%f, 0, 0, %f, 0, 0)");
                    return isNaN(t[0]) || isNaN(t[1]) ? null : [Utils.parseNumber(t[0], 1), Utils.parseNumber(t[1], 1)]
                }(t.substring(o))
            }
            r && (i[0] *= r[0],
            i[1] *= r[1])
        }
    }
    )),
    i
}
;
var CameraControl = function() {
    function e(t) {
        classCallCheck(this, e)
    }
    return e.prototype.init = function() {
        this.eyeTween = null,
        this.targetTween = null,
        this.upTween = null,
        this._flying = !1
    }
    ,
    e.prototype._lookAt = function(e) {
        var t = Utils.parseVector3(e);
        t && (this.controller.target.set(t.x, t.y, t.z),
        this.controller.object.lookAt(this.controller.target))
    }
    ,
    e.prototype.updateFollowingObject = function() {
        var e = this
            , t = this.followingObject
            , i = t.params
            , r = i.flyStop
            , n = i.flying
            , o = i.flyComplete
            , s = t.object;
        if (s instanceof BaseObject) {
            if (!s.visible || s.destroyed)
                return r && r(),
                void this.app.camera.stopFollowingObject();
            s = t.centerPos || s.boundingBox.center
        }
        s = Utils.parseVector3(s);
        var a = t.dir.clone();
        "earth" === this.app.camera.mode ? (a = t.object.selfToWorld(a),
        a = THING.Utils.parseVector3(a)) : a.add(s);
        var l = Utils.parseVector3(this.camera.target)
            , u = Utils.parseVector3(this.camera.position)
            , c = t.speed;
        l = l.lerp(s, c / 10),
        u = u.lerp(a, c / 10),
        this.object.node.position.copy(u),
        this._lookAt(l, (function() {
            return e.static
        }
        )),
        n && n();
        var h = l.distanceTo(s)
            , p = u.distanceTo(a);
        h < 1e-4 && p < 1e-4 && (o && o(),
        i.once && this.app.camera.stopFollowingObject());
        this.app.needUpdate = !0
    }
    ,
    e.prototype.updateLookingObject = function() {
        var e = this.lookingObject;
        if (e instanceof BaseObject) {
            if (e.destroyed)
                return void this.app.camera.lookAt(null);
            e = e.boundingBox.center
        }
        var t = Utils.parseVector3(e)
            , i = Utils.parseVector3(this.camera.target).lerp(t, .1);
        this.camera.target = i.toArray()
    }
    ,
    e.prototype.getBoundingBox = function(e, t) {
        var i = t.boundingBox;
        return i || (i = e.visible ? e.boundingBox : e.getBoundingBox(!1, !1)),
        i
    }
    ,
    e.prototype.getFlyPos = function(e) {
        var t, i = this.object, r = Utils.parseNumber3(e.position), n = null, o = [0, 0, 0], s = e.target || e.object;
        if (s) {
            var a = e.offset
                , l = e.worldOffset
                , u = e.xAngle
                , c = e.yAngle
                , h = e.distance || e.radius
                , p = e.radiusFactor;
            if (s.isBaseObject || s.isGroup) {
                var d;
                n = s;
                var f = e.center;
                if (o = f ? (f = Utils.parseVector3(f)).toArray() : (d = this.getBoundingBox(n, e)).center || o,
                Utils.isNull(u) && Utils.isNull(c))
                    if (a) {
                        T = n.worldToSelf(o);
                        a = THING.Math.addVector(T, a),
                        a = n.selfToWorld(a, !0)
                    } else if (l)
                        a = THING.Math.addVector(o, l);
                    else {
                        var m = e.time || 1
                            , g = !1;
                        h && (g = !0);
                        var v = [];
                        d = d || e.boundingBox || this.getBoundingBox(n, e),
                        v.push(d.getWorldPosition({
                            yAngle: 45,
                            xAngle: 45,
                            radius: d.radius,
                            distance: h,
                            radiusFactor: p,
                            ignoreScale: g,
                            boundingBox: d
                        })),
                        m > 1 && (v.push(d.getWorldPosition({
                            yAngle: 45,
                            xAngle: 135,
                            radius: d.radius,
                            distance: h,
                            radiusFactor: p,
                            ignoreScale: g,
                            boundingBox: d
                        })),
                        v.push(d.getWorldPosition({
                            yAngle: 45,
                            xAngle: 225,
                            radius: d.radius,
                            distance: h,
                            radiusFactor: p,
                            ignoreScale: g,
                            boundingBox: d
                        })),
                        v.push(d.getWorldPosition({
                            yAngle: 45,
                            xAngle: 315,
                            radius: d.radius,
                            distance: h,
                            radiusFactor: p,
                            ignoreScale: g,
                            boundingBox: d
                        })));
                        for (var y = 0, b = Utils.parseVector3(i.position), _ = b.distanceTo(Utils.parseVector3(v[y])), x = y + 1; x < v.length; x++) {
                            var E = Utils.parseVector3(v[x])
                                , w = b.distanceTo(E);
                            w < _ && (_ = w,
                            y = x)
                        }
                        r = v[y],
                        a = [0, 0, 0]
                    }
                else {
                    a = a || n.getOffsetPosition({
                        yAngle: u,
                        xAngle: c,
                        distance: h,
                        radiusFactor: p
                    });
                    var T = n.worldToSelf(o);
                    a = THING.Math.addVector(T, a),
                    a = n.selfToWorld(a, !0)
                }
                r = r || [0, 0, 0],
                i.projectionType == CameraProjectionType.Perspective ? (r[0] += a[0],
                r[1] += a[1],
                r[2] += a[2]) : r[1] += a[1]
            } else if (Utils.isArray(s)) {
                if (o = s,
                !r)
                    if (a = a || l,
                    Utils.isArray(a) || Utils.isNumber(a))
                        r = THING.Math.addVector(s, a);
                    else {
                        h = h || 10;
                        var M = Utils.parseVector3(s);
                        M && (c || u ? (c = Utils.parseValue(c, 0),
                        u = Utils.parseValue(u, 0),
                        r = M.getDirectionFromAngles(u, c, h).toArray()) : r = M.getDirectionFromPosition(i.node.position, h).toArray())
                    }
                r = r || i.position
            } else
                THING.Utils.error("getFlyPos() failed, due to object or target is neither BaseObject type nor position")
        }
        if (e.autoFixUp) {
            var C = e.up;
            if (C)
                C = THING.Math.normalizeVector(C);
            else {
                var S = this
                    , j = new THREE.Vector3(0,1,0)
                    , P = (t = n || S.app.level.current) ? t.isCampus ? t : t.parents.query(".Campus")[0] : null;
                P && (j.applyQuaternion(THING.Utils.parseQuaternion(P.worldAngles)),
                j.normalize(),
                C = j.toArray())
            }
        }
        return {
            obj: n,
            eyePos: r,
            lookAtPos: o,
            up: C
        }
    }
    ,
    e.prototype.flyTo = function(e) {
        (e = e || {}).isBaseObject && (e = {
            object: e,
            time: 2e3
        });
        var t = Utils.parseValue(e.time, 2e3)
            , i = Utils.parseValue(e.lerp || e.lerpType, TWEEN.Easing.Linear.None)
            , r = Utils.parseValue(e.upLerp, i)
            , n = Utils.parseValue(e.positionLerp, i)
            , o = Utils.parseValue(e.targetLerp, i)
            , s = e.flyStart
            , a = e.flyStop
            , l = e.flying
            , u = e.flyComplete;
        if (Utils.parseValue(e.keepDirection, !1)) {
            var c = e.cameraTarget || e.target;
            if (c)
                return e.object = c,
                e.radius = e.radius || 2 * c.boundingBox.radius,
                e.speed = t / 1e3,
                e.enableRotate = !0,
                e.enableZoom = !0,
                e.once = !0,
                void this.followObject(e)
        }
        var h = this.getFlyPos(e)
            , p = h.eyePos
            , d = h.lookAtPos;
        if (!this._stopping)
            if (this.stopFlying(),
            p && d) {
                this._flying = !0,
                s && s();
                var f = {
                    x: this.object.node.position.x,
                    y: this.object.node.position.y,
                    z: this.object.node.position.z
                }
                    , m = {
                    x: p[0],
                    y: p[1],
                    z: p[2]
                }
                    , g = {
                    x: this.controller.target.x,
                    y: this.controller.target.y,
                    z: this.controller.target.z
                }
                    , v = {
                    x: d[0],
                    y: d[1],
                    z: d[2]
                }
                    , y = this
                    , b = e.customFlying;
                if (b && Utils.isFunction(b))
                    b({
                        object: e.object,
                        forward: y.direction,
                        from: f,
                        to: m,
                        lookatFrom: g,
                        lookatTo: v,
                        time: t,
                        complete: function() {
                            y._flying = !1,
                            u && u()
                        }
                    });
                else if (this.eyeTween = new TWEEN.Tween(f).to(m, t).easing(n).onUpdate((function() {
                    y.object.position = [this._object.x, this._object.y, this._object.z]
                }
                )).start(),
                this.targetTween = new TWEEN.Tween(g).to(v, t).easing(o).onUpdate((function() {
                    y.object.target = [this._object.x, this._object.y, this._object.z],
                    l && l()
                }
                )).onStop((function() {
                    a && a()
                }
                )).onComplete((function() {
                    y._flying = !1,
                    u && u()
                }
                )).start(),
                h.up) {
                    var _ = {
                        x: this.object.node.up.x,
                        y: this.object.node.up.y,
                        z: this.object.node.up.z
                    }
                        , x = {
                        x: h.up[0],
                        y: h.up[1],
                        z: h.up[2]
                    };
                    this.upTween = new TWEEN.Tween(_).to(x, t).easing(r).onStop((function() {
                        y.object.up = h.up
                    }
                    )).onUpdate((function() {
                        y.object.up = [this._object.x, this._object.y, this._object.z]
                    }
                    )).start()
                }
            } else
                u && u()
    }
    ,
    e.prototype.stopRotating = function() {
        this.object._stopRotating()
    }
    ,
    e.prototype.stopFlying = function() {
        this._flying = !1,
        this._stopping = !0,
        this.object.stopRotating(),
        this.stopFollowingObject(),
        this.eyeTween && (this.eyeTween.stop(),
        this.eyeTween = null),
        this.targetTween && (this.targetTween.stop(),
        this.targetTween = null),
        this.upTween && (this.upTween.stop(),
        this.upTween = null),
        this._stopping = !1
    }
    ,
    e.prototype.movePath = function(e) {
        var t = this;
        this.stopFlying();
        var i = e.complete;
        e.complete = function() {
            t._flying = !1;
            var e = t.camera.cameraObject.node.getForwardPosition(t.camera.distance);
            t.camera.target = e.toArray(),
            i && i()
        }
        ,
        this._flying = !0,
        e.start && e.start.call(t, ev),
        BaseObject.prototype.movePath.call(this.object, e)
    }
    ,
    e.prototype.rotateAround = function(e) {
        var t = this
            , i = (e = e || {}).target || e.object;
        e.target = i || this.camera.target,
        this.stopFlying(),
        e.rotateStart && e.rotateStart(),
        this.lookAt(e.target);
        var r = e.complete;
        e.complete = function(t) {
            e.stop(),
            r && r(),
            e.rotateComplete && e.rotateComplete()
        }
        ,
        e.stop = function(i) {
            t.lookAt(null),
            t.camera.curOrbit.enabled = !0,
            t.camera.resume({
                rotate: !0,
                pan: !0,
                zoom: !0
            }),
            e.rotateComplete && e.rotateComplete()
        }
        ,
        e.update = function(e) {
            t.camera.curOrbit.update()
        }
        ,
        this.camera.curOrbit.enabled = !1,
        this.camera.disable({
            rotate: !0,
            pan: !0,
            zoom: !0
        }),
        BaseObject.prototype.rotateAround.call(this.object, e)
    }
    ,
    e.prototype.rotate = function(e) {
        var t = this.camera.distance
            , i = Utils.parseVector3(this.camera.direction)
            , r = Utils.parseQuaternion(e);
        i.applyQuaternion(r),
        i.normalize();
        var n = i.clone();
        n.multiplyScalar(t),
        n.add(Utils.parseVector3(this.camera.position)),
        this.camera.target = n.toArray()
    }
    ,
    e.prototype.followObject = function(e) {
        (e = e || {}).isBaseObject && (e = {
            object: e
        });
        var t = e.object;
        if (t) {
            this.stopFollowingObject();
            var i, r = e.alpha, n = e.beta, o = e.distance || e.radius || this.camera.distance, s = Utils.parseVector3(e.offset || [0, 0, 0]), a = Utils.parseVector3(e.worldOffset), l = e.speed || 1, u = e.centerPos;
            if (a)
                i = a;
            else {
                if (i = new THREE.Vector3,
                r || n)
                    r = r || 0,
                    n = n || 0,
                    i = Utils.parseVector3(THING.Math.directionFromAlphaBeta(r, n));
                else {
                    var c = Utils.parseVector3(this.camera.target)
                        , h = Utils.parseVector3(this.camera.position);
                    i.subVectors(h, c)
                }
                i.normalize(),
                i.multiplyScalar(o),
                i.add(s)
            }
            var p = e.flyStart;
            p && p(),
            this.followingObject = {
                object: t,
                dir: i,
                speed: l,
                params: e,
                centerPos: u
            }
        }
    }
    ,
    e.prototype.stopFollowingObject = function() {
        if (this.followingObject) {
            var e = this.followingObject.params;
            this.followingObject = null;
            var t = e.flyStop;
            t && t()
        }
    }
    ,
    e.prototype.lookAt = function(e) {
        return e && (Utils.isArray(e) || e.isBaseObject) ? (this.lookingObject = e,
        !0) : (this.lookingObject = null,
        !1)
    }
    ,
    e.prototype.setTarget = function(e) {
        var t = this;
        this._lookAt(e, (function() {
            return t.object.static
        }
        ))
    }
    ,
    e.prototype.isFlying = function() {
        return !!this._flying || !!this.followingObject
    }
    ,
    e.prototype.onAdd = function(e) {
        this.object = e,
        this.app = this.object.app,
        this.init()
    }
    ,
    e.prototype.onRemove = function() {}
    ,
    e.prototype.onUpdate = function() {
        this.followingObject ? this.updateFollowingObject() : this.lookingObject && this.updateLookingObject()
    }
    ,
    _createClass(e, [{
        key: "controller",
        get: function() {
            return this.object.controller
        }
    }, {
        key: "camera",
        get: function() {
            return this.object.app.camera
        }
    }]),
    e
}();
CompassControl = function() {
    function e(t) {
        classCallCheck(this, e);
        var i = new THREE.TextureLoader
            , n = t.image
            , o = t.backgroundImage
            , s = t.opacity || .8
            , a = null;
        n && (a = new THREE.SpriteMaterial({
            map: i.load(n),
            opacity: s,
            transparent: !0
        }));
        var l = null;
        this.spriteBg = null,
        o && (l = new THREE.SpriteMaterial({
            map: i.load(o),
            opacity: s,
            transparent: !0
        })),
        this._position = null,
        this._uiPosition = [1, 1],
        Object.defineProperty(this, "position", {
            get: function() {
                return this._position
            },
            set: function(e) {
                if (Utils.isNumber(e))
                    switch (this._position = e,
                    this._position) {
                    case CornerType.LeftTop:
                        this._uiPosition = [-1, -1];
                        break;
                    case CornerType.RightTop:
                        this._uiPosition = [1, -1];
                        break;
                    case CornerType.LeftBottom:
                        this._uiPosition = [-1, 1];
                        break;
                    case CornerType.RightBottom:
                        this._uiPosition = [1, 1]
                    }
                return this._position
            }
        }),
        null != t.position ? this.position = t.position : this.position = CornerType.RightBottom,
        this.size = t.size || 50,
        this.offset = t.offset || [0, 0],
        a && (this.sprite = new THREE.Sprite(a),
        this.sprite.scale.set(this.size, this.size, 1)),
        null != l && (this.spriteBg = new THREE.Sprite(l),
        this.spriteBg.scale.set(this.size, this.size, 1))
    }
    return e.prototype.getRotation = function() {
        var e = this.app.renderCamera.rotation;
        switch (e.order) {
        case "XYZ":
            return -e.z;
        case "YXZ":
            return -e.y
        }
        return -e.z
    }
    ,
    e.prototype.onUpdate = function() {
        var e = this.app.mainUI.getRenderPosition(this._uiPosition, [this.size, this.size]);
        null != this.spriteBg && this.spriteBg.position.set(e[0] + this.offset[0], e[1] + this.offset[1], -10),
        this.sprite && (this.sprite.position.set(e[0] + this.offset[0], e[1] + this.offset[1], -10),
        this.sprite.material.rotation = this.getRotation())
    }
    ,
    e.prototype.onAdd = function(e) {
        this.app = e,
        null != this.spriteBg && this.app.mainUI.scene2D.add(this.spriteBg),
        this.sprite && this.app.mainUI.scene2D.add(this.sprite)
    }
    ,
    e.prototype.onRemove = function() {
        null != this.spriteBg && this.app.mainUI.scene2D.remove(this.spriteBg),
        this.sprite && this.app.mainUI.scene2D.remove(this.sprite)
    }
    ,
    e
}();
FlyControl = function() {
    function e(t) {
        classCallCheck(this, e),
        this._controls = null
    }
    return e.prototype.onResize = function() {}
    ,
    e.prototype.onUpdate = function() {
        this._controls && (this._controls.update(this.app._deltaTime),
        this.app.needUpdate = !0)
    }
    ,
    e.prototype.onAdd = function(e) {
        this.app = e,
        e.camera.inputEnabled = !1,
        this._controls || (this._controls = new THREE.FreeMouseControls(e.renderCamera),
        this._controls.movementSpeed = .25),
        this._controls.enabled = !0
    }
    ,
    e.prototype.onRemove = function() {
        this.app.camera.inputEnabled = !0,
        this._controls && (this._controls.dispose(),
        this._controls.enabled = !1,
        this._controls = null)
    }
    ,
    e
}();
function $p(e) {
    return e instanceof Selector ? e.getNodes() : Array.isArray(e) ? (THING.Utils.warn("[WalkControl/WalkButtronControl] please set collision objects by selector object, instead of object3D array."),
    e) : e
}
var ed = new THREE.Vector3
    , WalkControl = function() {
    function e(t) {
        classCallCheck(this, e),
        this._controls = null,
        t = t || {},
        this.walkSpeed = void 0 === t.walkSpeed ? .02 : t.walkSpeed,
        this.turnSpeed = void 0 === t.turnSpeed ? .25 : t.turnSpeed,
        this.jumpSpeed = void 0 === t.jumpSpeed ? 3 : t.jumpSpeed,
        this.enableKeyRotate = void 0 !== t.enableKeyRotate && t.enableKeyRotate,
        this.useGravity = void 0 === t.useGravity || t.useGravity,
        this.gravity = t.gravity ? t.gravity : 9.8,
        this.eyeHeight = void 0 === t.eyeHeight ? 1.6 : t.eyeHeight,
        this._groundObjects = void 0 === t.groundObjects ? void 0 : $p(t.groundObjects),
        this.useCollision = void 0 !== t.useCollision && t.useCollision,
        this._collisionObjects = void 0 === t.collisionObjects ? void 0 : $p(t.collisionObjects),
        this._downRaycaster = new THREE.Raycaster,
        this._downRaycaster.ray.direction.set(0, -1, 0),
        this._forwardRaycaster = new THREE.Raycaster,
        this._fallSpeed = 0,
        this._prevCameraAdjustNear = !1,
        this._cameraChangeStarted = !1,
        this._prevDistance = 10
    }
    return e.prototype._notifyCameraEvent = function(e) {
        var t = this.app.camera;
        this.app.trigger(e, {
            position: t.position,
            target: t.target
        })
    }
    ,
    e.prototype.onResize = function() {}
    ,
    e.prototype.onUpdate = function() {
        var e = this.app.renderCamera
            , t = !1;
        if (this.useCollision) {
            this._forwardRaycaster.ray.origin.copy(e.position),
            this._forwardRaycaster.ray.origin.y -= this.eyeHeight / 2;
            var i = this._controls.getMoveDirection();
            this._forwardRaycaster.ray.direction.copy(i).normalize();
            var r = this._forwardRaycaster.intersectObjects(this._collisionObjects, !0);
            (r = r.filter((function(e) {
                return e.object && !e.object.isSky && !e.object.isEdgeWireframe
            }
            ))).length > 0 && r[0].distance < .5 && (t = !0)
        }
        if (this._controls && (this._controls.movementSpeed = t ? 0 : this.walkSpeed,
        this._controls.rotateSpeed = this.turnSpeed,
        this._controls.enableKeyRotate = this.enableKeyRotate,
        this._controls.update() ? (this._cameraChangeStarted ? this._notifyCameraEvent("cameraChange") : (this._cameraChangeStarted = !0,
        this._notifyCameraEvent("cameraChangeStart")),
        e.getWorldDirection(ed).multiplyScalar(this._prevDistance),
        ed.add(e.position),
        this.app.camera.target = ed.toArray([])) : this._cameraChangeStarted && (this._cameraChangeStarted = !1,
        this._notifyCameraEvent("cameraChangeEnd")),
        this.app.needUpdate = !0),
        this.useGravity) {
            this._downRaycaster.ray.direction.copy(e.up).multiplyScalar(-1).normalize(),
            this._downRaycaster.ray.origin.copy(e.position);
            var n = this._downRaycaster.ray.direction
                , o = this._downRaycaster.intersectObjects(this._groundObjects, !0);
            if ((o = o.filter((function(e) {
                return e.object && !e.object.isSky && !e.object.isEdgeWireframe
            }
            ))).length < 1) {
                this._fallSpeed += .0166 * this.gravity;
                var s = ed.copy(n).multiplyScalar(Math.min(.0166 * this._fallSpeed, this.eyeHeight - .001));
                e.position.add(s)
            } else {
                var a = o[0].distance;
                if (a <= this.eyeHeight + .01 && this._fallSpeed >= 0) {
                    this._fallSpeed = 0;
                    var l = ed.copy(n).multiplyScalar(a - this.eyeHeight);
                    e.position.add(l)
                } else {
                    this._fallSpeed += .0166 * this.gravity;
                    var u = ed.copy(n).multiplyScalar(Math.min(.0166 * this._fallSpeed, this.eyeHeight - .001));
                    e.position.add(u)
                }
            }
        }
    }
    ,
    e.prototype.onAdd = function(e) {
        this.app = e,
        this._prevCameraAdjustNear = e.camera.autoAdjustNear,
        e.camera.autoAdjustNear = !1,
        this._prevDistance = e.camera.distance,
        e.camera.inputEnabled = !1,
        this._controls || (this._controls = new THREE.FreeMouseControls(e.renderCamera,e.mainDomElement),
        this._controls.movementSpeed = this.walkSpeed,
        this._controls.rotateSpeed = this.turnSpeed,
        this._controls.enableFly = !1),
        this._controls.enabled = !0,
        this._groundObjects = this._groundObjects || e.query(".Ground || .Floor").getNodes(),
        this._collisionObjects = this._collisionObjects || [this.app.scene],
        this._jumpBind = function(e) {
            32 == e.keyCode && this.jump()
        }
        .bind(this),
        window.addEventListener("keydown", this._jumpBind, !1)
    }
    ,
    e.prototype.onRemove = function() {
        var e = this.app;
        e.camera.inputEnabled = !0,
        this._controls && (this._controls.dispose(),
        this._controls.enabled = !1,
        this._controls = null),
        this._groundObjects = null,
        this._collisionObjects = null,
        e.camera.autoAdjustNear = this._prevCameraAdjustNear,
        window.removeEventListener("keydown", this._jumpBind, !1)
    }
    ,
    e.prototype.jump = function() {
        0 == this._fallSpeed && (this._fallSpeed -= this.jumpSpeed)
    }
    ,
    _createClass(e, [{
        key: "groundObjects",
        set: function(e) {
            this._groundObjects = void 0 !== e ? $p(e) : []
        }
    }, {
        key: "collisionObject",
        set: function(e) {
            this._collisionObjects = void 0 !== e ? $p(e) : []
        }
    }]),
    e
}();
WalkButtonControl = function(e) {
    function t(i) {
        return classCallCheck(this, t),
        s(this, e.call(this, i))
    }
    return o(t, e),
    t.prototype.onResize = function() {}
    ,
    t.prototype.onAdd = function(e) {
        this.app = e,
        this._prevCameraAdjustNear = e.camera.autoAdjustNear,
        e.camera.autoAdjustNear = !1,
        e.camera.inputEnabled = !1,
        this._controls || (this._controls = new THREE.FreeControls(e.renderCamera,e.mainDomElement),
        this._controls.movementSpeed = this.walkSpeed,
        this._controls.rotateSpeed = this.turnSpeed,
        this._controls.enableFly = !1,
        e.renderCamera.rotation.x = 0),
        this._controls.enabled = !0,
        this._groundObjects = this._groundObjects || e.query(".Ground || .Floor").getNodes(),
        this._collisionObjects = this._collisionObjects || [this.app.scene],
        this._createWalkButton()
    }
    ,
    t.prototype.onRemove = function() {
        var e = this.app;
        e.camera.inputEnabled = !0,
        this._controls && (this._controls.enabled = !1,
        this._controls = null),
        this._groundObjects = null,
        this._collisionObjects = null,
        e.camera.autoAdjustNear = this._prevCameraAdjustNear,
        this._removeWalkButton()
    }
    ,
    t.prototype._setMoveState = function(e, t) {
        this._controls && (this._controls.moveState[e] = t,
        this._controls.updateMovementVector())
    }
    ,
    t.prototype._setRotate = function(e, t) {
        this._controls && this._controls.rotateDelta.set(e, t)
    }
    ,
    t.prototype._createWalkButton = function() {
        var e = this.app
            , t = this;
        if (!(e.domElement.getElementsByClassName("walkbutton").length > 0)) {
            this._walkButtonDom = e.domElement.appendChild(document.createElement("div")),
            this._walkButtonDom.className = "walkbutton",
            this._walkButtonDom.style.cssText = "position: absolute;right: 0;bottom: 0;width: 0;height: 0;border-radius: 50%;box-sizing: border-box;z-index: 1000;background: #f0f0f0;";
            var i, r, n, o, s, a = this._walkButtonDom.appendChild(document.createElement("div"));
            a.style.cssText = "width: 46%;height: 46%;border-radius: 50%;overflow: hidden;position: absolute;top: 27%;left: 27%;border-radius: 50%;background: #003A9E;",
            this._resizeWalkButton(),
            t._moveState = "",
            this._walkButtonDom.addEventListener("touchstart", (function(e) {
                e.preventDefault(),
                i = e.changedTouches[0].pageX,
                r = e.changedTouches[0].pageY,
                n = e.changedTouches[0].pageX - a.offsetLeft,
                o = e.changedTouches[0].pageY - a.offsetTop,
                document.body.addEventListener("touchmove", l, !1)
            }
            )),
            document.addEventListener("touchend", (function() {
                document.body.removeEventListener("touchmove", l, !1),
                a.style.left = "27%",
                a.style.top = "27%",
                t._setMoveState(t._moveState, 0),
                t._moveState = ""
            }
            ))
        }
        function l(e) {
            var l = e.changedTouches[0].pageX
                , u = e.changedTouches[0].pageY
                , c = l - n
                , h = u - o
                , p = l - i
                , d = u - r
                , f = parseFloat(t.width) / 2;
            if (t._getDistance(p, d) <= f)
                a.style.left = c + "px",
                a.style.top = h + "px";
            else {
                var m = t._getNewPos(f, t._getRadian(p, d));
                a.style.left = m[0] + i - n + "px",
                a.style.top = m[1] + r - o + "px"
            }
            (s = Math.abs(p) > Math.abs(d) ? p > 0 ? "right" : "left" : d > 0 ? "back" : "forward") !== t._moveState && (t._setMoveState(t._moveState, 0),
            t._setMoveState(s, 1),
            t._moveState = s)
        }
    }
    ,
    t.prototype._removeWalkButton = function() {
        var e = this.app.domElement.getElementsByClassName("walkbutton");
        e.length > 0 && e[0].parentNode.removeChild(e[0])
    }
    ,
    t.prototype._getDistance = function(e, t) {
        return Math.sqrt(Math.pow(e, 2) + Math.pow(t, 2))
    }
    ,
    t.prototype._getRadian = function(e, t) {
        return Math.atan2(t, e)
    }
    ,
    t.prototype._getNewPos = function(e, t) {
        var i = [];
        return i.push(Math.cos(t) * e),
        i.push(Math.sin(t) * e),
        i
    }
    ,
    t.prototype._getwindowOrientation = function() {
        return 180 == window.orientation || 0 == window.orientation || 90 != window.orientation && -90 != window.orientation && void 0
    }
    ,
    t.prototype._resizeWalkButton = function() {
        this.width = this._getwindowOrientation() ? .2 * this.app.domElement.offsetWidth : .2 * this.app.domElement.offsetHeight,
        this._walkButtonDom.style.width = this.width + "px",
        this._walkButtonDom.style.height = this.width + "px",
        this._walkButtonDom.style.right = .5 * this.width + "px",
        this._walkButtonDom.style.bottom = .3 * this.width + "px"
    }
    ,
    t
}(WalkControl);
Minimap = function() {
    function e(t) {
        classCallCheck(this, e),
        this.parseParam(t),
        this._enable = !0,
        this.scene = new THREE.Scene,
        this.camera = null,
        this.sprite = null,
        this.raycaster = new THREE.Raycaster,
        this.mouse = new THREE.Vector2,
        this.ratio = 2,
        this.mainAspect = 1,
        this.miniDom = null,
        this.renderTarget = null,
        this.inited = !1,
        this.create()
    }
    return e.prototype.parseParam = function(e) {
        this.app = e.app,
        this._opacity = e.opacity || .7,
        this._posIndex = e.position || e.posIndex || 0,
        this.bIcon = e.bIcon || !0,
        this.width = e.width || 150,
        this.height = e.height || this.width,
        this._scale = e.scale || 1,
        this.closeBtnImg = e.closeBtnImg || "http://www.thingjs.com/static/images/minimap2.png",
        this.cameraViewImg = e.cameraViewImg || "http://www.thingjs.com/static/images/minimap1.png",
        this.cameraCenterImg = e.cameraCenterImg || "http://www.thingjs.com/static/images/minimap0.png",
        this.center = {};
        var t = this.app.root.boundingBox.toBox()
            , i = (t.max.x + t.min.x) / 2
            , r = (t.max.z + t.min.z) / 2;
        if (e.sceneCenter ? (this.center.x = e.sceneCenter[0],
        this.center.y = e.sceneCenter[1]) : e.center ? (this.center.x = e.center[0],
        this.center.y = e.center[1]) : (this.center.x = i,
        this.center.y = r),
        this.angle = e.angle || 0,
        this.canMoushWheel = e.mousewheel,
        this.ground = e.ground,
        this.hasClose = e.hasClose,
        !this.ground)
            for (var n = 0; n < this.app.root.campuses.length; n++) {
                var o = this.app.root.campuses[n].ground;
                if (o) {
                    this.ground = o.node.children;
                    break
                }
            }
        this.bTranslate = e.bTranslate || !1
    }
    ,
    e.prototype.init2d = function() {
        if (this.miniDom = this.app.domElement.appendChild(document.createElement("div")),
        this.miniDom.className = "minimap",
        this.miniDom.style.position = "absolute",
        this.miniDom.style.cssText = "position: absolute;width:" + this.width + ";height:" + this.height + ";border: 5px solid rgba(255, 255, 255, 0.8);border-radius: 3px;display: block;box-sizing: border-box;overflow:hidden",
        this.miniDom.style.zIndex = 1e3,
        this.hasClose) {
            var e = this.miniDom.appendChild(document.createElement("img"));
            e.className = "minimap_closeBtn",
            e.style.position = "absolute",
            e.style.width = this.width / 5,
            e.style.right = "1px",
            e.style.top = "1px",
            e.src = this.closeBtnImg;
            var t = this;
            e.addEventListener("click", (function() {
                close = !0,
                t.enable = !1
            }
            ))
        }
        var i = this.miniDom.appendChild(document.createElement("img"));
        i.className = "minimap_cameraView",
        i.style.position = "absolute",
        i.src = this.cameraViewImg;
        var r = this.miniDom.appendChild(document.createElement("img"));
        r.className = "minimap_cameraCenter",
        r.src = this.cameraCenterImg,
        i.style.width = "40px",
        i.style.height = "30px",
        this.miniDom.onmousedown = function(e) {
            var t = e || event;
            t.cancelBubble = !0,
            t.stopPropagation()
        }
        ,
        this.miniDom.onmousemove = function(e) {
            var t = e || event;
            t.cancelBubble = !0,
            t.stopPropagation()
        }
        ,
        this.miniDom.onmousewheel = function(e) {
            var t = e || event;
            t.cancelBubble = !0,
            t.stopPropagation()
        }
        ,
        this.canMoushWheel && this.miniDom.addEventListener("mousewheel", (function(e) {
            t.scale += e.wheelDelta > 0 ? .1 : -.1
        }
        ), !1),
        this.miniDom.addEventListener("mousedown", (function(e) {
            0 === e.button && (t.mouse.x = e.clientX / (t.miniDom.clientWidth + 10) * 2 - 1,
            t.mouse.y = -e.clientY / (t.miniDom.clientWidth + 10) * 2 + 1,
            n(),
            t.miniDom.onmousemove = function(e) {
                t.mouse.x = e.clientX / (t.miniDom.clientWidth + 10) * 2 - 1,
                t.mouse.y = -e.clientY / (t.miniDom.clientWidth + 10) * 2 + 1,
                n()
            }
            ,
            t.miniDom.onmouseup = function() {
                t.miniDom.onmousemove = null,
                t.miniDom.onmouseup = null
            }
            )
        }
        ), !1);
        t = this;
        function n() {
            t.raycaster.setFromCamera(t.mouse, t.camera);
            var e = t.raycaster.intersectObjects(t.ground[0].children, !0);
            if (e.length > 0) {
                var i = e[0].point;
                if (t.bTranslate) {
                    var r = t.app.camera.cameraObject.forward;
                    r = new THREE.Vector3(r[0],0,r[2]);
                    var n = new THREE.Vector3(i.x,0,i.z).normalize()
                        , o = r.dot(n)
                        , s = (new THREE.Vector3).crossVectors(r, n).y
                        , a = 0;
                    a = o > 0 ? s < 0 ? 90 * -(s + 1) - 90 : 90 + 90 * (1 - s) : 90 * s;
                    var l = t.app.create({
                        type: "Thing",
                        position: [i.x, t.app.camera.position[1], i.z]
                    });
                    t.app.camera.flyTo({
                        time: 1e3,
                        object: l,
                        xAngle: 45,
                        yAngle: a,
                        zAngle: 0
                    })
                } else
                    t.app.camera.flyTo({
                        time: 1e3,
                        position: [i.x, t.app.camera.position[1], i.z],
                        target: t.app.camera.target
                    })
            }
        }
    }
    ,
    e.prototype.init3d = function() {
        this.init2d();
        var e = this.app.root.boundingBox.toBox()
            , t = e.max.x > e.max.z ? e.max.x : e.max.z
            , i = Math.abs(e.min.x) > Math.abs(e.min.z) ? Math.abs(e.min.x) : Math.abs(e.min.z)
            , r = t > i ? t : i;
        r *= 1 / this.scale,
        this.camera = new THREE.OrthographicCamera(-r,r,r,-r,-1e4,1e4),
        this.camera.position.set(this.center.x, 100, this.center.y),
        this.camera.up = new THREE.Vector3(0,0,-1).applyEuler(new THREE.Euler(0,this.angle * Math.PI / 180,0,"XYZ")),
        this.camera.lookAt(new THREE.Vector3(this.center.x,-1,this.center.y));
        var n = this.app.domElement;
        this.mainAspect = n.clientWidth / n.clientHeight,
        this.ratio = n.clientWidth / r;
        var o = r
            , s = 8 * o < 256 ? 8 * o : 256
            , a = 8 * (r * this.mainAspect) < 256 * this.mainAspect ? 8 * o : 256 * this.mainAspect;
        this.renderTarget = new THREE.WebGLRenderTarget(s,a,{
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            generateMipmaps: !1,
            format: THREE.RGBAFormat
        });
        var l = new THREE.SpriteMaterial({
            map: this.renderTarget.texture,
            transparent: !0,
            opacity: this._opacity
        });
        this.sprite = new THREE.Sprite(l),
        this.setMiniRect(),
        this.update();
        var u = this;
        window.onresize = function() {
            u.mainAspect = n.clientWidth / n.clientHeight,
            u.ratio = n.clientWidth / r,
            u.setMiniRect()
        }
        ,
        this.inited = !0
    }
    ,
    e.prototype.create = function() {
        this.inited || (this.init3d(),
        this.scene.add(this.camera),
        this.camera.add(this.sprite))
    }
    ,
    e.prototype.setMiniRect = function() {
        this.miniDom.style.width = this.width + "px",
        this.miniDom.style.height = this.height + "px";
        var e = this;
        function t(t, i, r, n) {
            e.miniDom.style.top = t,
            e.miniDom.style.left = i,
            e.miniDom.style.bottom = r,
            e.miniDom.style.right = n
        }
        var i = this.width / (.5 * this.ratio)
            , r = i * this.mainAspect;
        this.sprite.scale.set(i, r, 1);
        var n, o, s = this.camera.right, a = this.camera.left;
        switch (this._posIndex) {
        case 0:
            n = a + i / 2,
            o = a + r / 2,
            t("0px", "0px", null, null);
            break;
        case 2:
            n = a + i / 2,
            o = s - r / 2,
            t(null, "0px", "0px", null);
            break;
        case 1:
            n = s - i / 2,
            o = a + r / 2,
            t("0px", null, null, "0px");
            break;
        case 3:
            n = s - i / 2,
            o = s - r / 2,
            t(null, null, "0px", "0px")
        }
        this.sprite.position.set(n, -o, 0)
    }
    ,
    e.prototype.update = function() {
        var e = this.app.lighting
            , t = this.app.lighting;
        t.mainLight.intensity = 0,
        t.secondaryLight.intensity = 0,
        t.tertiaryLight.intensity = 0,
        this.app.lighting = t;
        var i = this.app.scene.background;
        this.app.scene.background = null,
        this.app.renderer.setClearColor(0, 0),
        this.app.renderer.setRenderTarget(this.renderTarget),
        this.app.renderer.clear(),
        this.app.renderer.render(this.app.scene, this.camera),
        this.app.lighting = e,
        this.app.scene.background = i
    }
    ,
    e.prototype.destroy = function() {
        var e = this.scene.children.length;
        if (0 != e) {
            if (e > 0)
                for (var t = 0; t < e; t++)
                    this.scene.remove(this.scene.children[t]);
            this.camera = null,
            this.sprite = null,
            null != this.miniDom && (this.app.domElement.removeChild(this.miniDom),
            this.miniDom = null)
        }
    }
    ,
    e.prototype.render = function() {
        if (this.miniDom)
            if (this._enable) {
                this.miniDom.style.display = "block";
                var e = this;
                if (this.miniDom.childNodes.forEach((function(t) {
                    t.style.display = e.bIcon ? "block" : "none"
                }
                )),
                null != this.camera && null != this.renderTarget) {
                    var t = this.app.renderer.autoClear;
                    this.app.renderer.autoClear = !1,
                    this.app.renderer.setRenderTarget(null),
                    this.app.renderer.render(this.scene, this.camera),
                    this.app.renderer.autoClear = t;
                    var i = this.app.camera.position
                        , r = new THREE.Vector3(i[0],i[1],i[2]);
                    if (0 != this.angle) {
                        var n = new THREE.Vector3(this.center.x,r.y,this.center.y)
                            , o = r.sub(n);
                        o.applyEuler(new THREE.Euler(0,-this.angle * Math.PI / 180,0,"XYZ")),
                        o.add(n),
                        r.copy(o)
                    }
                    var s = this.transToMinimapCoord(r).x
                        , a = this.transToMinimapCoord(r).y;
                    this.setImage(s, a, this.app.camera.position[1]);
                    var l = this.app.camera.camera.rotation
                        , u = "YXZ" == l.order ? l.y : l.z
                        , c = (document.getElementsByClassName("minimap_cameraCenter")[0],
                    document.getElementsByClassName("minimap_cameraView")[0])
                        , h = 0;
                    h = u >= 0 ? u / Math.PI * 180 : 180 * (2 - Math.abs(u) / Math.PI),
                    c.style.transform = "rotate(" + (-h + this.angle) + "deg)",
                    c.style.transformOrigin = "50% 100%"
                }
            } else
                this.miniDom.style.display = "none"
    }
    ,
    e.prototype.transToMinimapCoord = function(e) {
        var t, i;
        i = t = this.width / 2;
        var r, n, o = t / ((this.camera.right - this.camera.left) / 2);
        return e.hasOwnProperty("x") ? (r = e.x - this.center.x,
        n = e.z - this.center.y) : (r = e[0] - this.center.x,
        n = e[2] - this.center.y),
        {
            x: r >= 0 ? t - o * r : t + o * Math.abs(r),
            y: n >= 0 ? i - o * n : i + o * Math.abs(n)
        }
    }
    ,
    e.prototype.setImage = function(e, t, i) {
        var r = (i > 80 ? i - 80 : 0) * (1 / (220 / 30)) + 15;
        r > 30 && (r = 30);
        var n = document.getElementsByClassName("minimap_cameraCenter")[0]
            , o = document.getElementsByClassName("minimap_cameraView")[0]
            , s = r;
        e >= r / 2 && e <= this.width - r / 2 && t >= r / 2 && this.width,
        n.style.position = "absolute",
        n.style.width = r + "px",
        n.style.height = s + "px",
        n.style.right = e - r / 2 + "px",
        n.style.bottom = t - s + "px",
        o.style.right = e - 20 + "px",
        o.style.bottom = t - s / 2 + "px"
    }
    ,
    _createClass(e, [{
        key: "scale",
        set: function(e) {
            this._scale = e,
            this.destroy(),
            this.inited = !1,
            this.create()
        },
        get: function() {
            return this._scale
        }
    }, {
        key: "opacity",
        set: function(e) {
            this._opacity = e,
            this.sprite.material.opacity = this._opacity
        },
        get: function() {
            return this._opacity
        }
    }, {
        key: "posIndex",
        set: function(e) {
            this._posIndex = e,
            this.setMiniRect()
        },
        get: function() {
            return this._posIndex
        }
    }, {
        key: "enable",
        set: function(e) {
            this._enable = e
        },
        get: function() {
            return this._enable
        }
    }]),
    e
}();
MiniMapControl = function() {
    function e(t) {
        classCallCheck(this, e),
        this.minimap = null,
        this.param = t
    }
    return e.prototype.onAdd = function(e) {
        null != this.minimap && this.onRemove(),
        this.param.app || (this.param.app = e),
        this.minimap = new Minimap(this.param)
    }
    ,
    e.prototype.onRemove = function() {
        this.minimap && this.minimap.destroy()
    }
    ,
    e.prototype.onUpdate = function() {
        this.minimap && this.minimap.render()
    }
    ,
    e
}();
LookAtControl = function() {
    function e() {
        classCallCheck(this, e),
        this.app = null,
        this.object = null,
        this._targetObject = null,
        this._target = new THREE.Vector3
    }
    return e.prototype.onAdd = function(e) {
        this.app = e.app,
        this.object = e
    }
    ,
    e.prototype.onRemove = function() {
        this.app = null,
        this.object = null,
        this._targetObject = null
    }
    ,
    e.prototype.onUpdate = function() {
        return this.object.node.updateWorldMatrix(!0, !1),
        this.object.node.lookAt(this._target),
        this._targetObject && this._target.fromArray(this._targetObject.position),
        !0
    }
    ,
    _createClass(e, [{
        key: "target",
        set: function(e) {
            e && (e.isBaseObject ? (this._targetObject = e,
            this._target.fromArray(e.position)) : (this._targetObject = null,
            this._target.fromArray(e)))
        },
        get: function() {
            return this._targetObject || this._target.toArray()
        }
    }]),
    e
}();
sd = new THREE.Matrix4
    , ad = new THREE.Vector3(0,0,0);
ld = new THREE.Vector3(0,1,0);
AroundControl = function() {
    function e(t) {
        classCallCheck(this, e),
        this.app = null,
        this.object = null,
        this._targetObject = null,
        this._target = new THREE.Vector3,
        t = t || {},
        this._alpha = t.alpha || 45,
        this._beta = t.beta || 45,
        this._radius = t.radius || 30,
        this._dirty = !0
    }
    return e.prototype.onAdd = function(e) {
        this.app = e.app,
        this.object = e
    }
    ,
    e.prototype.onRemove = function() {
        this.app = null,
        this.object = null,
        this._targetObject = null
    }
    ,
    e.prototype.onUpdate = function() {
        return this._dirty && this._updateLocalTransform(),
        !0
    }
    ,
    e.prototype._updateLocalTransform = function() {
        var e = this.object.node.position;
        e.fromArray(THING.Math.directionFromAlphaBeta(this._alpha, this._beta)),
        e.normalize().multiplyScalar(this._radius);
        var t = this.object.node.quaternion
            , i = sd.lookAt(ad, e, ld);
        t.setFromRotationMatrix(i),
        this._dirty = !1
    }
    ,
    _createClass(e, [{
        key: "alpha",
        set: function(e) {
            this._alpha = e,
            this._dirty = !0
        },
        get: function() {
            return this._alpha
        }
    }, {
        key: "beta",
        set: function(e) {
            this._beta = e,
            this._dirty = !0
        },
        get: function() {
            return this._beta
        }
    }, {
        key: "radius",
        set: function(e) {
            this._radius = e,
            this._dirty = !0
        },
        get: function() {
            return this._radius
        }
    }]),
    e
}();
CameraTargetControl = function() {
    function e(t) {
        classCallCheck(this, e),
        this.params = t,
        this.draggable = !0,
        t && (this.draggable = Utils.parseValue(t.draggable, !0))
    }
    return e.prototype.init = function() {
        var e = this
            , t = this.params;
        if (this.cameraTarget = function(e) {
            var t = 2
                , i = 1218267
                , r = null;
            if (!e)
                return null;
            var n = e.size
                , o = e.color
                , s = e.url;
            if (null == s)
                return null;
            r = s,
            null != n && (t = n),
            null != o && (i = o);
            var a = app.create({
                type: "Marker",
                offset: [0, 8, 0],
                size: t,
                keepSize: !0,
                url: r,
                useSpriteMaterial: !1,
                angles: [90, 0, 0]
            });
            return a.style.alwaysOnTop = !0,
            a.style.color = i,
            a
        }(t),
        this.cameraTarget) {
            o();
            var i = !1
                , r = null
                , n = !1;
            THINGdebounce(document).on("mousedown.ctctrl", (function(e) {
                2 == e.button && (n = !0)
            }
            )),
            THINGdebounce(document).on("mouseup.ctctrl", (function(t) {
                if (2 == t.button && (n = !1),
                i = !1,
                e.app.camera.enablePan = !0,
                e.app.camera.enableRotate = !0,
                e.cameraTarget.style.color = "#1296db",
                r) {
                    var o = new THREE.Vector3(r[0],r[1],r[2])
                        , s = new THREE.Vector3(e.cameraTarget.position[0],e.cameraTarget.position[1],e.cameraTarget.position[2]).clone().sub(o);
                    e.app.camera.position = [e.app.camera.position[0] + s.x, e.app.camera.position[1] + s.y, e.app.camera.position[2] + s.z],
                    e.app.camera.target = e.cameraTarget.position,
                    r = null
                }
            }
            )),
            THINGdebounce(document).on("mousemove.ctctrl", (function(t) {
                i && (e.cameraTarget.position = e.app.camera.screenToWorld(t.pageX, t.pageY))
            }
            )),
            this.cameraTarget.on("mouseenter", (function() {
                1 == e.draggable && (e.cameraTarget.style.color = "#FE7F0B")
            }
            )),
            this.cameraTarget.on("mouseleave", (function() {
                1 != e.draggable || i || (e.cameraTarget.style.color = "#1296db")
            }
            )),
            this.cameraTarget.on("mousedown", (function() {
                1 == e.draggable && (i = !0,
                e.app.camera.enablePan = !1,
                e.app.camera.enableRotate = !1,
                e.cameraTarget.style.color = "#FE7F0B",
                r = e.cameraTarget.position)
            }
            )),
            this.app.on("update", (function(e) {
                n && o()
            }
            ))
        }
        function o() {
            var t = e.app.camera.screenToWorld(e.app.domElement.clientWidth / 2, e.app.domElement.clientHeight / 2);
            e.cameraTarget.position = t
        }
    }
    ,
    e.prototype.onAdd = function(e) {
        this.app = e,
        this.init()
    }
    ,
    e.prototype.onRemove = function() {
        THINGdebounce(document).off(".ctctrl"),
        this.cameraTarget && this.cameraTarget.destroy()
    }
    ,
    e
}();
RectangleSelectControl = function() {
    function e(t, i) {
        classCallCheck(this, e),
        this._candidates = t,
        this._options = i || {},
        this._app = null,
        this._objects = [],
        this._previousObjects = [],
        this._started = !1
    }
    return e.prototype.onAdd = function(e) {
        this._app = e,
        this._app.focus(),
        this._objects = new Selector(this._app,[]),
        this._previousObjects = this._objects,
        this.start()
    }
    ,
    e.prototype.onRemove = function() {
        this.end()
    }
    ,
    e.prototype._start = function(e) {
        if (e) {
            this.candidates = this._candidates;
            var t = this._options.start;
            t && t.call(this, {
                candidates: this.candidates
            });
            var i = this;
            this._app.camera.inputEnabled = !1,
            this._app.picker.startAreaPicking({
                x: e.x,
                y: e.y
            }),
            this._app.on("pick", ".Thing", (function(e) {
                var t = i._options.select;
                if (t && t.call(i, e),
                !e._stopPropagation) {
                    var r = i._options.outlineColor || "#FF8000";
                    e.object.style.outlineColor = r
                }
            }
            ), "RectangleSelectControl_pick"),
            this._app.on("unpick", ".Thing", (function(e) {
                var t = i._options.deselect;
                t && t.call(i, e),
                e._stopPropagation || (e.object.style.outlineColor = null)
            }
            ), "RectangleSelectControl_unpick"),
            this._app.on(EventType.AreaPickEnd, (function(e) {
                i._previousObjects = i._objects,
                i._objects = i._app.picker.objects.concat()
            }
            ), "RectangleSelectControl_AreaPickEnd"),
            this._started = !0
        }
    }
    ,
    e.prototype._end = function() {
        if (this._started) {
            this._started = !1,
            this._app.picker.endAreaPicking(),
            this._app.off("pick", ".Thing", "RectangleSelectControl_pick"),
            this._app.off("unpick", ".Thing", "RectangleSelectControl_unpick"),
            this._app.off(EventType.AreaPickEnd, null, "RectangleSelectControl_AreaPickEnd"),
            this._app.camera.inputEnabled = !0;
            var e = this._options.end;
            e && e.call(this, {
                candidates: this.candidates
            })
        }
    }
    ,
    e.prototype.start = function() {
        var e = this;
        this._app.on("mousedown", (function(t) {
            0 == t.button && e._start(t)
        }
        ), "RectangleSelectControl_mousedown"),
        this._app.on("mouseup", (function(t) {
            0 == t.button && e._end()
        }
        ), "RectangleSelectControl_mouseup")
    }
    ,
    e.prototype.end = function() {
        this._end(),
        this._app.off("mousedown", null, "RectangleSelectControl_mousedown"),
        this._app.off("mouseup", null, "RectangleSelectControl_mouseup"),
        this._app.off("pick", ".Thing", "RectangleSelectControl_pick"),
        this._app.off("unpick", ".Thing", "RectangleSelectControl_unpick")
    }
    ,
    e.prototype.clear = function() {
        if (this._objects.length) {
            for (var e = 0; e < this._objects.length; e++) {
                var t = this._objects
                    , i = this._options.deselect;
                i && i.call(t, {
                    object: t
                })
            }
            this._objects.clear()
        }
    }
    ,
    _createClass(e, [{
        key: "candidates",
        set: function(e) {
            this._app.picker.areaCandidates = e
        },
        get: function() {
            return this._app.picker.areaCandidates
        }
    }, {
        key: "options",
        set: function(e) {
            this._options = e
        },
        get: function() {
            return this._options
        }
    }, {
        key: "previousObjects",
        get: function() {
            return this._previousObjects
        }
    }, {
        key: "objects",
        get: function() {
            return this._objects
        }
    }]),
    e
}();
MeasurementControl = function() {
    function e() {
        classCallCheck(this, e),
        this.object = null,
        this.app = null,
        this._height = 0,
        this._box = null,
        this._pickResults = null
    }
    return e.prototype._setupBox = function() {
        this._box && (this.app.resourceManager.remove(this._box),
        this._box = null);
        var e = this.object.boundingBox.size
            , t = new THREE.BoxGeometry(e[0],e[1],e[2])
            , i = new THREE.EdgesGeometry(t);
        this._box = new THREE.LineSegments(i),
        this.object.node.add(this._box);
        var r = Utils.parseVector3(this.object.boundingBox.center);
        this._box._setWorldPosition(r, this.object.static);
        for (var n = [16711680, 65280, 255, 0], o = 0; o < 4; o++) {
            (t = new THREE.Geometry).vertices.push(new THREE.Vector3),
            t.vertices.push(new THREE.Vector3);
            var s = new THREE.LineBasicMaterial({
                color: n[o]
            })
                , a = new THREE.Line(t,s);
            a.visible = !1,
            this._box.add(a)
        }
    }
    ,
    e.prototype._useCenterMode = function() {
        var e = this.object.angles
            , t = THING.Math.abs(e[1]);
        return t < 1e-5 || (!!THING.Math.isFloatEquals(t, 90) || (!!THING.Math.isFloatEquals(t, 180) || !!THING.Math.isFloatEquals(t, 270)))
    }
    ,
    e.prototype._updatePickedResult = function() {
        for (var e = [new THREE.Raycaster, new THREE.Raycaster, new THREE.Raycaster, new THREE.Raycaster], t = [], i = this._box.geometry.attributes.position.array, r = 0; r < i.length; r += 3) {
            var n = new THREE.Vector3(i[r],i[r + 1],i[r + 2]);
            if (!(n.y < 0)) {
                for (var o = !1, s = 0; s < t.length; s++)
                    t[s].equals(n) && (o = !0);
                o || t.push(n)
            }
        }
        var a, l, u, c;
        if (this.object.node.updateMatrixWorld(),
        this._useCenterMode()) {
            var h = [];
            for (r = 0; r < t.length; r++)
                h.push(t[r].clone());
            t[0].addVectors(h[0], h[1]).divideScalar(2),
            t[1].addVectors(h[1], h[2]).divideScalar(2),
            t[2].addVectors(h[2], h[3]).divideScalar(2),
            t[3].addVectors(h[3], h[0]).divideScalar(2)
        }
        for (r = 0; r < t.length; r++) {
            var p = (d = e[r]).ray.origin;
            p.set(t[r].x, this._height - this._box.position.y, t[r].z),
            p = this._box.localToWorld(p),
            (!a || p.x < a.ray.origin.x) && (a = d),
            (!u || p.z < u.ray.origin.z) && (u = d),
            (!l || p.x > l.ray.origin.x) && (l = d),
            (!c || p.z > c.ray.origin.z) && (c = d)
        }
        a.ray.direction.set(-1, 0, 0),
        u.ray.direction.set(0, 0, -1),
        l.ray.direction.set(1, 0, 0),
        c.ray.direction.set(0, 0, 1),
        this._pickResults = [];
        for (r = 0; r < e.length; r++) {
            var d, f = (d = e[r]).intersectObject(this.app.scene, !0);
            for (s = 0; s < f.length; s++) {
                if (!(g = f[s]).object.isChildOf(this.object.node))
                    break;
                f.splice(s--, 1)
            }
            this._pickResults.push({
                startPosition: d.ray.origin.toArray(),
                pickedPosition: null,
                pickedObject: null,
                distance: 100,
                direction: d.ray.direction.toArray()
            });
            var m = this._pickResults[r];
            if (f.length) {
                var g = f[0];
                m.pickedPosition = g.point.toArray(),
                m.pickedObject = this.app.objectManager.getBaseObject(g.object),
                m.distance = g.distance
            }
        }
        var v = this._pickResults;
        for (r = 0; r < v.length; r++) {
            var y, b, _ = v[r], x = this._box.children[r];
            if (y = Utils.parseVector3(_.startPosition),
            _.pickedPosition)
                b = Utils.parseVector3(_.pickedPosition);
            else {
                var E = new THREE.Vector3
                    , w = Utils.parseVector3(_.direction);
                E.addVectors(Utils.parseVector3(_.startPosition), w.multiplyScalar(100)),
                b = E
            }
            y = x.worldToLocal(y),
            b = x.worldToLocal(b),
            x.geometry.vertices[0].copy(y),
            x.geometry.vertices[1].copy(b),
            x.geometry.verticesNeedUpdate = !0,
            x.geometry.elementsNeedUpdate = !0,
            x.computeLineDistances()
        }
        return this._pickResults
    }
    ,
    e.prototype.onAdd = function(e) {
        this.object = e,
        this.app = e.app,
        this.height = this.object.boundingBox.size[1] / 2
    }
    ,
    e.prototype.onRemove = function() {
        this._box && (this.app.resourceManager.remove(this._box),
        this._box = null)
    }
    ,
    e.prototype.onUpdate = function(e) {
        return !1
    }
    ,
    _createClass(e, [{
        key: "height",
        set: function(e) {
            this._height = e
        },
        get: function() {
            return this._height
        }
    }, {
        key: "visible",
        set: function(e) {
            this._box || this._setupBox(),
            this._box.visible = e
        },
        get: function() {
            return !!this._box && this._box.visible
        }
    }, {
        key: "lineVisible",
        set: function(e) {
            this._box || this._setupBox(),
            this._box.children.forEach((function(t) {
                t.visible = e
            }
            ))
        },
        get: function() {
            return !!this._box && this._box.children[0].visible
        }
    }, {
        key: "pickResults",
        get: function() {
            return this._updatePickedResult(),
            this._pickResults
        }
    }]),
    e
}();
ModelViewControl = function() {
    function e() {
        classCallCheck(this, e),
        this._object = null,
        this._prevCameraInfo = {}
    }
    return e.prototype.onAdd = function(e) {
        this.app = e;
        var t = this.app.camera;
        this._prevCameraInfo = {
            enablePan: t.enablePan,
            autoAdjustTarget: t.autoAdjustTarget,
            enableUpdateTargetOnWheel: t.enableUpdateTargetOnWheel,
            distanceLimited: t.distanceLimited,
            dampingFactor: t.dampingFactor
        },
        t.enablePan = !1,
        t.autoAdjustTarget = !1,
        t.enableUpdateTargetOnWheel = !1,
        t.dampingFactor = .05
    }
    ,
    e.prototype.onRemove = function() {
        var e = this.app.camera;
        for (var t in this._prevCameraInfo)
            e[t] = this._prevCameraInfo[t]
    }
    ,
    e.prototype.onUpdate = function(e) {}
    ,
    e.prototype._getObject = function(e) {
        var t = e.target;
        if (t)
            return t;
        var i = e.url;
        if (i) {
            var r = this
                , n = e.time || 1e3
                , o = e.distance || 10
                , s = e.direction
                , a = e.complete;
            this.app.create({
                type: "Thing",
                url: i,
                position: this.getNextObjectPosition(e),
                nodeReady: function(e) {
                    setTimeout((function() {
                        r.lookAt({
                            target: e.object,
                            time: n,
                            distance: o,
                            direction: s,
                            complete: a
                        })
                    }
                    ), 10)
                }
            })
        }
        return null
    }
    ,
    e.prototype.getNextObjectPosition = function(e) {
        if (e = e || {},
        this._object) {
            var t = e.distance || 10
                , i = this.app.camera.rightDirection;
            return -1 === e.direction && (i = THING.Math.negVector(i)),
            this._object.getWorldPosition({
                direction: i,
                distance: t
            })
        }
        return [0, 0, 0]
    }
    ,
    e.prototype.lookAt = function(e) {
        e = e || {};
        var t = this._getObject(e);
        if (t) {
            var i = this
                , r = e.time || 1e3
                , n = e.complete
                , o = this.app.camera
                , s = t.boundingBox.radius;
            if (this._object) {
                var a = e.distance || 10
                    , l = (r = e.time || 1e3,
                e.lerpType || THING.LerpType.Quartic.Out)
                    , u = o.rightDirection;
                -1 === e.direction && (u = THING.Math.negVector(u));
                var c = t.getWorldPosition({
                    direction: u,
                    distance: a
                });
                t.position = c,
                t.lerpTo({
                    from: {
                        position: c
                    },
                    to: {
                        position: [0, 0, 0]
                    },
                    time: r,
                    lerpType: l
                }, "modelViewControl_lerp_fadeIn"),
                t.fadeIn({
                    time: r
                }),
                this._object.lerpTo({
                    from: {
                        position: this._object.position
                    },
                    to: {
                        position: this._object.getWorldPosition({
                            direction: THING.Math.negVector(u),
                            distance: a
                        })
                    },
                    time: r,
                    lerpType: l,
                    stop: function(e) {
                        e.object.destroy()
                    },
                    complete: function(e) {
                        e.object.destroy(),
                        n && n.call(i, {
                            object: i._object
                        })
                    }
                }, "modelViewControl_lerp_fadeOut"),
                this._object.fadeOut({
                    time: r / 2
                })
            } else
                o.flyTo({
                    target: t,
                    xAngle: 0,
                    yAngle: 0,
                    time: r,
                    complete: function() {
                        n && n.call(i, {})
                    }
                });
            this._object = t,
            o.distanceLimited = [.5 * s, 4 * s]
        }
    }
    ,
    _createClass(e, [{
        key: "object",
        get: function() {
            return this._object
        }
    }]),
    e
}();
NavigationControl = function() {
    function e() {
        classCallCheck(this, e),
        this._navigation = null
    }
    return e.prototype.onAdd = function(e) {
        var t = e.node.getMeshes()[0];
        t.updateWorldMatrix(!0);
        var i = (new THREE.Geometry).fromBufferGeometry(t.geometry);
        i.applyMatrix4(t.matrixWorld),
        this._navigation = new MeshNavigation((new THREE.BufferGeometry).fromGeometry(i))
    }
    ,
    e.prototype.onRemove = function() {
        this._navigation = null
    }
    ,
    e.prototype.findPath = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
            , r = this._navigation.findPath((new THREE.Vector3).fromArray(e), (new THREE.Vector3).fromArray(t), {
            includeStart: !0,
            includeEnd: !0,
            fixEnds: !0,
            pathSmooth: {
                enable: !0
            }
        });
        return r && Array.isArray(r) ? r.map((function(e) {
            return [e.x, e.y + i, e.z]
        }
        )) : null
    }
    ,
    e
}();
md = function(e) {
    return !e.isLight && !e.userData.skipBoundingBox
};
function gd(e, t, i, r) {
    var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
    if (e) {
        var o = e.uuid
            , s = i[o];
        if (!(s === SelectionMark.Stop && n > 0) && (s === SelectionMark.Jump || (r[e.uuid] && THING.Utils.log("% :is existing"),
        e.uuid && (e.selections || (e.selections = {}),
        e.selections[this.name] = this,
        r[e.uuid] = e)),
        t && e.children.length > 0))
            for (var a = 0; a < e.children.length; a++)
                gd.call(this, e.children[a], t, i, r, n + 1)
    }
}
function vd(e) {
    for (var t in e) {
        var i = e[t];
        if (i.selections) {
            i.selections[this.name];
            delete i.selections[this.name]
        }
        delete this._nodesResult[t]
    }
}
function SceneNodeSelection(e) {
    void 0 === e && (e = THREE.MathUtils.generateUUID()),
    this.name = e,
    this._nodesMark = {},
    this._nodesResult = {}
}
function bd(e) {
    for (var t in e) {
        var i = e[t].material;
        if (i && !this._nodesMap[t]) {
            e[t].modifiers || (e[t].modifiers = []),
            e[t].modifiers.push(this),
            this._nodesMap[t] = e[t];
            var r = i
                , n = r.uuid
                , o = this._materialCopy[n]
                , s = o && o.material;
            if (!o) {
                s = (o = this._materialCopy[n] = {
                    refrence: 0,
                    material: i.clone()
                }).material;
                var a = -1 === this._trans ? r.opacity : this._trans;
                this.override ? (s.opacity = a,
                this._colour.x + this._colour.y + this._colour.z > -1 && (s.alphaColor = this._colour.clone(),
                s.override_color = this._colour.clone())) : r.override_color ? (s.opacity = r.opacity,
                s.alphaColor.clone(r.override_color),
                s.override_color.clone(r.override_color)) : (s.opacity = a,
                this._colour.x + this._colour.y + this._colour.z > -1 && s.color.setRGB(this._colour.x, this._colour.y, this._colour.z)),
                s.opacity < 1 && (s.transparent = !0,
                s.depthWrite = !1),
                this._isFlashing && (s.alphaColor.w = 0),
                s.needsUpdate = !0
            }
            o.refrence++,
            e[t][this.bak_name] = e[t].material,
            e[t].material = s
        }
    }
}
function _d(e, t) {
    Array.isArray(t) || (t = []);
    var i = e.modifiers.indexOf(this);
    if (i < 0 || i == e.modifiers.length - 1)
        return t;
    (t = e.modifiers.splice(i + 1)).reverse();
    for (var r = 0; r < t.length; r++) {
        var n = t[r]
            , o = {};
        o[e.name] = e,
        Ed.call(n, o)
    }
    return t
}
function xd(e, t) {
    if (Array.isArray(t) && !(t.length < 1))
        for (var i = 0; i < t.length; i++) {
            var r = t[i]
                , n = {};
            n[e.name] = e,
            bd.call(r, n)
        }
}
function Ed(e) {
    var t = this.bak_name;
    for (var i in e)
        if (this._nodesMap[i] && (delete this._nodesMap[i],
        e[i].modifiers)) {
            var r = _d.call(this, e[i])
                , n = e[i].modifiers.pop();
            if (n == this) {
                if (e[i].material && e[i][t]) {
                    var o = e[i].material = e[i][t]
                        , s = (e[i].material = o).uuid;
                    delete e[i][t],
                    this._materialCopy[s] ? ("number" == typeof this._materialCopy[s].refrence ? this._materialCopy[s].refrence-- : THING.Utils.log("[%s] didn't found", s),
                    this._materialCopy[s].refrence < 1 && delete this._materialCopy[s]) : THING.Utils.log("[%s] didn't found", s)
                }
                xd.call(this, e[i], r)
            } else
                e[i].modifiers.push(n)
        }
}
function MaterialModifier(e) {
    void 0 === e && (e = THREE.MathUtils.generateUUID()),
    this.name = e,
    this.bak_name = "t3d_material_bak_" + this.name,
    this._trans = -1,
    this._seletions = [],
    this._nodesMap = {},
    this.autoUpdate = !1,
    this._autoUpdateID = null,
    this.fadeSpeed = 1,
    this.flashSpeed = 1,
    this._isFading = !1,
    this._isFlashing = !1,
    this.flashLoop = !1,
    this._updateQueen = [],
    this._removeQueen = [],
    this.override = !1,
    this._materialCopy = {},
    this._colour = new THREE.Vector4(-1,-1,-1,0)
}
function Td(e, t, i) {
    var r = e.begin || (new Date).getTime()
        , n = isNaN(e.from) ? 0 : e.from
        , o = isNaN(e.to) ? 1 : e.to
        , s = e.during
        , a = e.func;
    return function(e) {
        "reset" === e && (r = (new Date).getTime());
        var l = (new Date).getTime() - r;
        if (l <= s) {
            var u = a(l, 0, 1, s);
            return t(n + (o - n) * u),
            !0
        }
        if (l > s) {
            t(o);
            var c = i();
            return r = (new Date).getTime(),
            c
        }
    }
}
SceneNodeSelection.prototype.toString = function() {
    return this.name
}

SceneNodeSelection.prototype.setAutoResetMark = function(e) {}

SceneNodeSelection.prototype.getAutoResetMark = function() {}

SceneNodeSelection.prototype.mark = function(e, t) {
    null != e && (this._nodesMark[e.uuid] = t)
}

SceneNodeSelection.prototype.markSelection = function(e, t) {
    for (var i in e._nodesResult)
        this._nodesMark[e._nodesResult[i].uuid] = t
}

SceneNodeSelection.prototype.getMark = function(e) {
    var t = SelectionMark.None;
    return e && (t = (t = this._nodesMark[e.uuid]) || SelectionMark.None),
    t
}

SceneNodeSelection.prototype.getAllNameString = function() {
    var e = this._nodesResult
        , t = [];
    for (var i in e)
        t.push(e[i].name);
    return t.join(";")
}

SceneNodeSelection.prototype.select = function(e, t) {
    var i = {};
    for (var r in gd.call(this, e, t, this._nodesMark, i),
    i)
        this._nodesResult[r] = i[r]
}

SceneNodeSelection.prototype.reselect = function(e, t) {
    vd.call(this, this._nodesResult),
    gd.call(this, e, t, this._nodesMark, this._nodesResult)
}

SceneNodeSelection.prototype.unselect = function(e, t) {
    var i = {};
    t ? gd.call(this, e, t, this._nodesMark, i) : i[e.uuid] = e,
    vd.call(this, i)
}

SceneNodeSelection.prototype.deselect = function(e, t) {
    var i = {};
    gd.call(this, e, t, this._nodesMark, i),
    vd.call(this, i),
    this._nodesResult = i
}

SceneNodeSelection.prototype.selectList = function(e, t) {
    if (e && Array.isArray(e))
        for (var i = 0; i < e.length; i++)
            this.select(e[i], t)
}

SceneNodeSelection.prototype.unselectList = function(e, t) {
    if (e && Array.isArray(e))
        for (var i = 0; i < e.length; i++)
            this.unselect(e[i], t)
}

SceneNodeSelection.prototype.isEmpty = function() {
    for (var e in this._nodesResult)
        return !1;
    return !0
}

SceneNodeSelection.prototype.merge = function(e, t) {
    var i = e._nodesResult
        , r = this._nodesResult;
    for (var n in i)
        r[n] = i[n]
}

SceneNodeSelection.prototype.unmerge = function(e, t) {
    var i = e._nodesResult
        , r = this._nodesResult;
    for (var n in i)
        delete r[n]
}

SceneNodeSelection.prototype.getWorldAABB = function(e) {
    var t = this._nodesResult
        , i = new THREE.Box3
        , r = function(e) {
        return o = new THREE.Box3,
        t[e] ? ("Billboard" == t[e].typeName ? o.setFromObject(t[e]) : t[e] && ((s = new THREE.Box3)._setFromObject(t[e], (function(i) {
            return i == t[e] && (!!md(i) && void 0)
        }
        )),
        o = s.clone()),
        a = new THREE.Vector3,
        o.getSize(a),
        0 === a.x && 0 === a.y && 0 === a.z ? "continue" : void i.union(o)) : "continue"
    };
    for (var n in t) {
        var o, s, a;
        r(n)
    }
    var l = new THREE.Vector3;
    i.getCenter(l),
    l.x || l.y || l.z || (l.x = 0,
    l.y = 0,
    l.z = 0);
    var u = new THREE.Vector3;
    return i.getSize(u),
    {
        center: [l.x, l.y, l.z],
        radius: Math.sqrt(Math.pow(u.x, 2) + Math.pow(u.y, 2) + Math.pow(u.z, 2)) / 2,
        width: u.x,
        height: u.y,
        depth: u.z
    }
}

SceneNodeSelection.prototype.getWorldOBB = function(e) {
    var t = this._nodesResult;
    e.updateWorldMatrix(!0, !0);
    var i = new THREE.Matrix4;
    i.getInverse(e.matrixWorld);
    var r = new THREE.Box3
        , n = new THREE.Box3;
    for (var o in t) {
        var s = t[o];
        s && (n._setFromObject(s, md, i),
        r.union(n))
    }
    var a = [];
    r.getBoundingPositions().forEach((function(t) {
        var i = t.clone();
        i.applyMatrix4(e.matrixWorld),
        a.push(i.toArray())
    }
    ));
    var l = r
        , u = new THREE.Vector3;
    l.getCenter(u),
    u.applyMatrix4(e.matrixWorld),
    u.x || u.y || u.z || (u.x = 0,
    u.y = 0,
    u.z = 0);
    var c = new THREE.Vector3
        , h = new (Function.prototype.bind.apply(THREE.Vector3, [null].concat(a[7])))
        , p = new (Function.prototype.bind.apply(THREE.Vector3, [null].concat(a[0])));
    return c.subVectors(h, p),
    {
        points: a,
        center: [u.x, u.y, u.z],
        radius: Math.sqrt(Math.pow(c.x, 2) + Math.pow(c.y, 2) + Math.pow(c.z, 2)) / 2,
        width: c.x,
        height: c.y,
        depth: c.z
    }
}

SceneNodeSelection.prototype.setQueryFlags = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].setQueryFlags(e)
}

SceneNodeSelection.prototype.addQueryFlags = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].addQueryFlags(e)
}

SceneNodeSelection.prototype.removeQueryFlags = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].removeQueryFlags(e)
}

SceneNodeSelection.prototype.setPickEnabled = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].setPickEnabled(e)
}

SceneNodeSelection.prototype.showBoundingBox = function(e) {}

SceneNodeSelection.prototype.show = function() {
    var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    for (var t in this._nodesResult)
        this._nodesResult[t].show(e)
}

SceneNodeSelection.prototype.setDepthCheckEnabled = function(e) {
    for (var t in this._nodesResult) {
        var i = this._nodesResult[t];
        i && i.material && (i.material.depthTest = e)
    }
}

SceneNodeSelection.prototype.clone = function(e) {
    var t = new SceneNodeSelection(e);
    for (var i in this._nodesMark)
        t._nodesMark[i] = this._nodesMark[i];
    for (var r in this._nodesResult)
        t._nodesResult[r] = this._nodesResult[r];
    return t
}

SceneNodeSelection.prototype.clear = function() {
    for (var e in this._nodesResult)
        delete this._nodesResult[e]
}

SceneNodeSelection.prototype.destroy = function() {
    for (var e in this._nodesMark)
        delete this._nodesMark[e];
    for (var t in this._nodesResult)
        delete this._nodesResult[t]
}

SceneNodeSelection.prototype.updateBounds = function() {}

SceneNodeSelection.prototype.setRenderQueueGroup = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].setRenderQueueGroup(e)
}

SceneNodeSelection.prototype.removeAllModifiers = function() {
    for (var e in this._nodesResult) {
        var t = this._nodesResult[e];
        t && t.node && t.node.modifiers && (t.node.modifiers.length = 0)
    }
}

SceneNodeSelection.prototype.setVisibilityFlags = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].setVisibilityFlags(e)
}

SceneNodeSelection.prototype.addVisibilityFlags = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].addVisibilityFlags(e)
}

SceneNodeSelection.prototype.removeVisibilityFlags = function(e) {
    for (var t in this._nodesResult)
        this._nodesResult[t].removeVisibilityFlags(e)
}

SceneNodeSelection.prototype.setCustomParameter = function(e, t) {
    for (var i in this._nodesResult)
        this._nodesResult[i].setCustomParameter(e, t)
}

MaterialModifier.prototype.toString = function() {
    return this.name
}

MaterialModifier.prototype.getId = function() {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.getId")
}

MaterialModifier.prototype.setAutoUpdate = function(e) {
    this.autoUpdate = e,
    this.autoUpdateRunner()
}

MaterialModifier.prototype.getAutoUpdate = function() {
    return this.autoUpdate
}

MaterialModifier.prototype.autoUpdateRunner = function() {
    this._autoUpdateID && (cancelAnimationFrame(this._autoUpdateID),
    this._autoUpdateID = !1);
    var e = this;
    e.autoUpdate && function t() {
        e._autoUpdateID && (cancelAnimationFrame(e._autoUpdateID),
        e._autoUpdateID = 0);
        e.update(),
        e.autoUpdate && (e._autoUpdateID = requestAnimationFrame(t))
    }()
}

MaterialModifier.prototype.setTransparency = function(e) {
    this._trans = e
}

MaterialModifier.prototype.getTransparency = function() {
    return this._trans
}

MaterialModifier.prototype.fade = function(e, t) {
    this._seletions.length;
    var i = 1e3 / this.fadeSpeed
        , r = this;
    this._isFading = !0;
    var n = Td({
        from: e,
        to: t,
        during: i,
        func: TWEEN.Cubic.easeOut,
        begin: (new Date).getTime()
    }, (function(e) {
        for (var t in r._materialCopy) {
            var i = r._materialCopy[t].material;
            i && ((i = i.getTechnique(0).getPass(0).material).transparent = !0,
            i.opacity = e)
        }
    }
    ), (function() {
        return r._isFading = !1,
        !1
    }
    ));
    r._updateQueen.push(n)
}

MaterialModifier.prototype.fadeIn = function() {
    this._seletions.length;
    var e = this._trans;
    this.fade(e, 1)
}

MaterialModifier.prototype.fadeOut = function() {
    this._seletions.length;
    var e = this._trans;
    this.fade(e, 0)
}

MaterialModifier.prototype.setFadeSpeed = function(e) {
    0 !== e && (this.fadeSpeed = e)
}

MaterialModifier.prototype.isFading = function() {
    return this._isFading
}

MaterialModifier.prototype.setColour = function(e, t, i, r) {
    this._colour.x = e,
    this._colour.y = t,
    this._colour.z = i,
    this._colour.w = r
}

MaterialModifier.prototype.flash = function(e, t) {
    e < t && (t = Math.min(this._trans, t),
    e = Math.max(e, .01));
    var i = this;
    this._isFlashing = !0;
    var r = Td({
        from: 0,
        to: 1,
        during: 1e3,
        func: TWEEN.Linear,
        begin: (new Date).getTime()
    }, (function(r) {
        var n = e + (t - e) * r;
        for (var o in i._materialCopy) {
            var s = i._materialCopy[o].material;
            s && ((s = s.getTechnique(0).getPass(0).material).override_color ? s.override_color && i.override ? s.alphaColor.w = n : s.alphaColor = s.backup_color : s.alphaColor.w = n)
        }
    }
    ), (function() {
        var i = e;
        return e = t,
        t = i,
        !0
    }
    ));
    i._updateQueen.push(r),
    this.autoUpdateRunner()
}

MaterialModifier.prototype.setFlashSpeed = function(e) {
    this.flashSpeed = e
}

MaterialModifier.prototype.setFlashLoop = function(e) {
    this.flashLoop = e
}

MaterialModifier.prototype.isFlashing = function() {
    return this._isFlashing
}

MaterialModifier.prototype.getFlashValue = function() {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.getFlashValue")
}

MaterialModifier.prototype.setOverride = function(e) {
    this.override = e
}

MaterialModifier.prototype.getAllSceneNodeNames = function() {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.getAllSceneNodeNames")
}

MaterialModifier.prototype.getModifiedMaterialNameString = function() {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.getModifiedMaterialNameString")
}

MaterialModifier.prototype.addSceneNode = function(e) {
    var t = {};
    t[e.uuid] = e,
    bd.call(this, t)
}

MaterialModifier.prototype.removeSceneNode = function(e) {
    var t = {};
    t[e.uuid] = e,
    Ed.call(this, t)
}

MaterialModifier.prototype.addSceneNodeSelection = function(e) {
    this._seletions.push(e);
    var t = e._nodesResult;
    bd.call(this, t)
}

MaterialModifier.prototype.removeSceneNodeSelection = function(e) {
    var t = e._nodesResult;
    Ed.call(this, t);
    var i = this._seletions.indexOf(e);
    i > -1 && this._seletions.splice(i, 1)
}

MaterialModifier.prototype.enable = function() {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.enable")
}

MaterialModifier.prototype.disable = function() {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.disable")
}

MaterialModifier.prototype.update = function(e) {
    for (var t = 0; t < this._removeQueen.length; t++) {
        var i = this._removeQueen[t]
            , r = this._updateQueen.indexOf(i);
        r > -1 && this._updateQueen.splice(r, 1)
    }
    this._removeQueen.length = 0;
    for (var n = 0; n < this._updateQueen.length; n++) {
        var o = this._updateQueen[n];
        if ("function" == typeof o)
            o() || this._removeQueen.push(o);
        else
            this._removeQueen.push(o)
    }
}

MaterialModifier.prototype.setOverrideDepthCheckEnabled = function(e, t) {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.setOverrideDepthCheckEnabled")
}

MaterialModifier.prototype.setOverrideDepthBias = function(e, t, i) {
    THING.Utils.log("[%s] didn't ready", "MaterialModifier.setOverrideDepthBias")
}

MaterialModifier.prototype.setColourPassDepthWriteEnabled = function(e) {
    THING.Utils.warn("MaterialModifier.prototype.setColourPassDepthWriteEnabled")
}
;
var MaxConfigParse = {};
Object.defineProperties(MaxConfigParse, {
    enableCameraParse: {
        set: function(e) {
            AllConfigParse.enableCameraParse = e
        },
        get: function() {
            return AllConfigParse.enableCameraParse
        }
    },
    enableParse: {
        set: function(e) {
            AllConfigParse.enableParse = e
        },
        get: function() {
            return AllConfigParse.enableParse
        }
    },
    skipInDoorEnvMap: {
        set: function(e) {
            AllConfigParse.skipInDoorEnvMap = e
        },
        get: function() {
            return AllConfigParse.skipInDoorEnvMap
        }
    },
    config: {
        get: function() {
            return AllConfigParse.config
        }
    },
    indexJson: {
        get: function() {
            return AllConfigParse.indexJson
        }
    }
});
var CommonConfigParse = {};
Object.defineProperties(CommonConfigParse, {
    enableCameraParse: {
        set: function(e) {
            AllConfigParse.enableCameraParse = e
        },
        get: function() {
            return AllConfigParse.enableCameraParse
        }
    },
    enableParse: {
        set: function(e) {
            AllConfigParse.enableParse = e
        },
        get: function() {
            return AllConfigParse.enableParse
        }
    },
    skipInDoorEnvMap: {
        set: function(e) {
            AllConfigParse.skipInDoorEnvMap = e
        },
        get: function() {
            return AllConfigParse.skipInDoorEnvMap
        }
    },
    config: {
        get: function() {
            return AllConfigParse.config
        }
    },
    indexJson: {
        get: function() {
            return AllConfigParse.indexJson
        }
    }
});
var loadDebugger = function() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    e.devtools = void 0 !== e.devtools && e.devtools;
    var t = void 0 !== e.isDebug && e.isDebug
        , i = void 0 !== e.devMode && e.devMode
        , r = void 0 === e.basePath ? "./js/debugger" : e.basePath
        , n = ["camera", "navigation", "event", "network"]
        , o = e.complete;
    this.Utils.isFunction(t) && (o = t,
    t = !0),
    t ? (this.Debugger = {
        basePath: r,
        isDebug: !0,
        devMode: i,
        enablePlugins: n,
        options: e
    },
    this.Utils.dynamicLoad([r.appendPath("/debugger.js")], (function() {
        o && o()
    }
    ), !1)) : (this.Debugger = {
        basePath: "https://www.3dmmd.cn/static/debugger",
        enablePlugins: n,
        options: e
    },
    this.Utils.dynamicLoad(["https://www.3dmmd.cn/static/debugger/debugger.js"], (function() {
        o && o()
    }
    ), !1))
};
jd = {
    Math: Math
};
THING.ActionComposer = ActionComposer,
THING.AllConfigParse = AllConfigParse,
THING.App = ThingApp,
THING.AreaPickType = AreaPickType,
THING.AroundControl = AroundControl,
THING.AxisTransformControl = AxisTransformControl,
THING.BaseObject = BaseObject,
THING.BaseStyle = BaseStyle,
THING.BatchObject = BatchObject,
THING.BatchSubObject = BatchSubObject,
THING.BlendingType = {
    No: "no",
    Normal: "normal",
    Additive: "add",
    Subtractive: "subtract",
    Multiply: "multiply"
},
THING.Boundary = Boundary,
THING.BoundingBoxControl = BoundingBoxControl,
THING.Box = Box,
THING.Building = Building,
THING.COMPILETIME = "Mon, 13 Feb 2023 01:47:57 GMT",
THING.Camera = Camera,
THING.CameraControl = CameraControl,
THING.CameraController = CameraController,
THING.CameraProjectionType = CameraProjectionType,
THING.CameraTargetControl = CameraTargetControl,
THING.CameraView = CameraView,
THING.Campus = Campus,
THING.Circle = Circle,
THING.CombinedObject = CombinedObject,
THING.CommonConfigParse = CommonConfigParse,
THING.CompassControl = CompassControl,
THING.CornerType = CornerType,
THING.Cylinder = Cylinder,
THING.DEFAULT_EXTENSIONS = [],
THING.DistributionsType = {
    Box: 1,
    Sphere: 2,
    Disc: 3
},
THING.Door = Door,
THING.DragState = DragState,
THING.Element3DObjectControl = Element3DObjectControl,
THING.Elevator = Elevator,
THING.ElevatorDoor = ElevatorDoor,
THING.EventTag = EventTag,
THING.EventType = EventType,
THING.Facade = Facade,
THING.Floor = Floor,
THING.FlyControl = FlyControl,
THING.Frustum = Frustum,
THING.Grid = Grid,
THING.Ground = Ground,
THING.Group = Group,
THING.GroupNavigation = GroupNavigation,
THING.Heatmap = Heatmap,
THING.Helper = Helper,
THING.IDWGPUMap = IDWGPUMap,
THING.IDWMap = IDWMap,
THING.ImageProxy = function e(t) {
    return classCallCheck(this, e),
    function(e, t) {
        e[vp] = {};
        var i = e[vp];
        THING.App.current,
        i.init = function() {
            i.handler = {
                set: function(e, t, r) {
                    if ("src" === t) {
                        var n = i.proxy.onloadstart;
                        n && n(e, r);
                        var o = i.proxy.onloadend;
                        o && (e.addEventListener("load", (function t() {
                            o(e),
                            e.removeEventListener("load", t)
                        }
                        ), !1),
                        e.addEventListener("error", (function t() {
                            o(e),
                            e.removeEventListener("error", t)
                        }
                        ), !1))
                    }
                    return e[t] = r
                },
                get: function(e, t) {
                    return "addEventListener" == t || "removeEventListener" == t ? function() {
                        e[t](arguments[0], arguments[1], arguments[2])
                    }
                    : e[t]
                }
            },
            i.image = t.image || new Image(t.width,t.height)
        }
        ,
        i.createProxy = function() {
            var e = new Proxy(i.image,i.handler);
            return e.getTarget = function() {
                return i.image
            }
            ,
            i.proxy = e,
            e
        }
        ,
        i.handler = null,
        i.image = null,
        i.proxy = null,
        i.init()
    }(this, t),
    this[vp].createProxy()
}

THING.IndependentControlType = IndependentControlType,
THING.KeyType = KeyType,
THING.LayoutType = {
    Left: "Left",
    Right: "Right",
    Top: "Top",
    Bottom: "Bottom",
    Front: "Front",
    Back: "Back",
    Center: "Center"
},
THING.LerpType = LerpType,
THING.LevelType = {
    Unknown: "",
    Campus: "Campus",
    Building: "Building",
    Floor: "Floor",
    Room: "Room",
    Thing: "Thing"
},
THING.Line = Line,
THING.LineBase = LineBase,
THING.LogLevelType = LogLevelType,
THING.LookAtControl = LookAtControl,
THING.LoopType = LoopType,
THING.Marker = Marker,
THING.MaterialModifier = MaterialModifier,
THING.Math = Math,
THING.MaxConfigParse = MaxConfigParse,
THING.MeasurementControl = MeasurementControl,
THING.MeshNavigation = MeshNavigation,
THING.MeshNavigationHelper = ni,
THING.MiniMapControl = MiniMapControl,
THING.ModelViewControl = ModelViewControl,
THING.ModifierType = {
    Material: 513,
    TransparencyColour: 513,
    AutoRotation: 257,
    AutoScale: 258
}
THING.Navigation = Navigation,
THING.NavigationControl = NavigationControl,
THING.Plane = Plane,
THING.Points = Points,
THING.PolygonLine = PolygonLine,
THING.PolygonRegion = PolygonRegion,
THING.REVISION = "5ee9afc7726c8f8349ccfa28f3c923ae3d95e0acbuild",
THING.RectangleSelectControl = RectangleSelectControl,
THING.Room = Room,
THING.RouteLine = RouteLine,
THING.SceneEffectConfigParse = SceneEffectConfigParse,
THING.SceneNodeSelection = SceneNodeSelection,
THING.SelectionMark = SelectionMark,
THING.Selector = Selector,
THING.Shape = Shape,
THING.SizeAdjustmentControl = SizeAdjustmentControl,
THING.SkyBox = {
    BlueSky: "BlueSky",
    MilkyWay: "MilkyWay",
    Night: "Night",
    SunCloud: "SunCloud"
},
THING.SpaceType = SpaceType,
THING.Sphere = Sphere,
THING.Stair = Stair,
THING.StairDoor = StairDoor,
THING.StyleManager = StyleManager,
THING.SubObject = SubObject,
THING.Tetrahedron = Tetrahedron,
THING.TextKeyEncoder = TextKeyEncoder,
THING.TextRegion = TextRegion,
THING.ThemeManager = ThemeManager,
THING.Thing = Thing,
THING.TjsConfigParse = TjsConfigParse,
THING.UIAnchor = UIAnchor,
THING.Utils = Utils,
THING.VERSION = "1.4.8",
THING.Version = Version,
THING.VideoSurvilance = VideoSurvilance,
THING.WalkButtonControl = WalkButtonControl,
THING.WalkControl = WalkControl,
THING.Water = Water,
THING.WebView = WebView,
THING.WrapType = {
    Repeat: "repeat",
    ClampToEdge: "clamptoedge",
    MirroredRepeat: "mirroredrepeat"
},
THING.factory = factory,
THING.loadDebugger = loadDebugger,
THING.loadDebuggerInDevTool = function() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    e.devtools = !0,
    loadDebugger.call(this, e)
}

THING.onError = function(e) {
    jd.Utils.error(e)
}