function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function normalizeString(path, stripTrailing) {
  if (typeof path !== 'string') {
    throw new TypeError('expected path to be a string');
  }
  if (path === '\\' || path === '/') return '/';
  var len = path.length;
  if (len <= 1) return path;

  // ensure that win32 namespaces has two leading slashes, so that the path is
  // handled properly by the win32 version of path.parse() after being normalized
  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces
  var prefix = '';
  if (len > 4 && path[3] === '\\') {
    var ch = path[2];
    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\') {
      path = path.slice(2);
      prefix = '//';
    }
  }
  var segs = path.split(/[/\\]+/);
  if (stripTrailing !== false && segs[segs.length - 1] === '') {
    segs.pop();
  }
  return prefix + segs.join('/');
}

// #region RegExp Cache Pool

var _regExps = new Map();
var _regExpsWithOptions = new Map();
function _createRegExp(regExps, string, options) {
  var regExp = regExps.get(string);
  if (!regExp) {
    regExp = new RegExp(string, options);
    regExps.set(string, regExp);
  }
  return regExp;
}
function _getRegExp(string, options) {
  if (options) {
    var regExps = _regExpsWithOptions.get(options);
    if (!regExps) {
      regExps = new Map();
      _regExpsWithOptions.set(options, regExps);
    }
    return _createRegExp(regExps, string, options);
  } else {
    return _createRegExp(_regExps, string);
  }
}

// #endregion

// #region Array Prototype

Array.prototype._insert = function (index, value) {
  return this.splice(index, 0, value);
};
Array.prototype._removeAt = function (index) {
  return this.splice(index, 1);
};
Array.prototype._swap = function (index1, index2) {
  var value = this[index1];
  this[index1] = this[index2];
  this[index2] = value;
  return this;
};
Object.defineProperties(Array.prototype, {
  _insert: {
    enumerable: false
  },
  _removeAt: {
    enumerable: false
  },
  _swap: {
    enumerable: false
  },
  _copy: {
    enumerable: false
  },
  // Use promise for iterator operations.
  "forEachSync": {
    writable: true,
    enumerable: false,
    configurable: true,
    value: function () {
      var _value = _asyncToGenerator(function* (callback, error) {
        try {
          for (var i = 0; i < this.length; i++) {
            var _promise = callback(this[i], i, this);
            if (_promise) {
              yield _promise.catch(err => {
                if (error) {
                  error(err);
                }
                return false;
              });
            }
          }
          return true;
        } catch (ex) {
          console.error(ex);
          if (error) {
            error(ex);
          }
          return false;
        }
      });
      function value(_x, _x2) {
        return _value.apply(this, arguments);
      }
      return value;
    }()
  },
  // Use promise for iterator operations and wait.
  "waitForEachSync": {
    writable: true,
    enumerable: false,
    configurable: true,
    value: function value(callback) {
      var _this = this;
      return new Promise( /*#__PURE__*/_asyncToGenerator(function* (resolve, reject) {
        var result = yield _this.forEachSync(callback, reject);
        if (result) {
          resolve();
        }
      }));
    }
  }
});

// #endregion

// #region Map Prototype

Map.prototype.toObject = function () {
  var object = {};
  for (var [k, v] of this) {
    object[k] = v;
  }
  return object;
};
Map.prototype.fromObject = function (object) {
  this.clear();
  for (var key in object) {
    this.set(key, object[key]);
  }
  return this;
};

// #endregion

// #region String Prototype

String.prototype._getNormalize = function () {
  var index = this.indexOf('://');
  if (index !== -1) {
    return this.substring(0, index + 3) + normalizeString(this.substring(index + 3));
  } else {
    return normalizeString(this.substring());
  }
};
String.prototype._startsWith = function (prefix) {
  return this.slice(0, prefix.length) === prefix;
};
String.prototype._endsWith = function (suffix) {
  return this.indexOf(suffix, this.length - suffix.length) !== -1;
};
String.prototype._isBlank = function () {
  for (var i = 0; i < this.length; i++) {
    if (this[i] != ' ' && this[i] != '\t') {
      return false;
    }
  }
  return true;
};
String.prototype._getFileName = function (withExtension) {
  if (withExtension === void 0) {
    withExtension = true;
  }
  var fileName = this;
  var startIndex = this.indexOf('\\') >= 0 ? this.lastIndexOf('\\') : this.lastIndexOf('/');
  if (startIndex === -1) {
    if (!withExtension) {
      var index = this.indexOf('.');
      if (index != -1) {
        fileName = this.substring(0, index);
      }
    }
  } else {
    fileName = this.substring(startIndex);
    if (fileName.indexOf('\\') === 0 || fileName.indexOf('/') === 0) {
      fileName = fileName.substring(1);
    }
    if (!withExtension) {
      var index = fileName.indexOf('.');
      if (index != -1) {
        fileName = fileName.substring(0, index);
      }
    }
  }
  return fileName;
};
String.prototype._getRootPath = function () {
  var startIndex = this.indexOf('\\');
  if (startIndex === -1) {
    startIndex = this.indexOf('/');
  }
  if (startIndex == -1) {
    return this;
  } else {
    return this.substring(0, startIndex);
  }
};
String.prototype._getPath = function () {
  var index1 = this.lastIndexOf('\\');
  var index2 = this.lastIndexOf('/');
  var startIndex = index1 > index2 ? index1 : index2;
  return this.substring(0, startIndex);
};
String.prototype._getSearchName = function () {
  var name = this._getFileName();
  var index = name.indexOf('?');
  if (index === -1) {
    return '';
  }
  return name.substring(index);
};
String.prototype._removeSearchName = function () {
  var name = this._getFileName();
  var index = name.indexOf('?');
  if (index === -1) {
    return this;
  }
  return name.substring(0, index);
};
String.prototype._getExtension = function () {
  var strings = this.split('.');
  if (strings.length > 1) {
    var extension = strings.pop();
    var index = extension.indexOf('?');
    if (index !== -1) {
      return extension.substring(0, index);
    } else {
      return extension;
    }
  }
  return '';
};
String.prototype._trimLeft = function (charset) {
  if (charset === undefined) {
    charset = "\s";
  }
  var regExp = _getRegExp("^[" + charset + "]+");
  return this.replace(regExp, "");
};
String.prototype._trimRight = function (charset) {
  if (charset === undefined) {
    charset = "\s";
  }
  var regExp = _getRegExp("[" + charset + "]+$");
  return this.replace(regExp, "");
};
String.prototype._trimBoth = function (charset) {
  return this._trimLeft(charset)._trimRight(charset);
};
String.prototype._appendPath = function (path) {
  if (path._startsWith('/')) {
    path = path.substring(1);
  }
  if (path._endsWith('/')) {
    path = path.substring(0, path.length - 1);
  }
  if (this._endsWith('/')) {
    return this + path;
  } else {
    return this + '/' + path;
  }
};
String.prototype._appendURL = function (path) {
  var suffixName = this._getFileName();
  if (suffixName._startsWith('?')) {
    var rootPath = this._getPath();
    return rootPath._appendPath(path) + suffixName;
  } else {
    return this._appendPath(path);
  }
};
String.prototype._appendRandomSuffix = function () {
  return this.substring(0) + '?t=' + new Date().getTime();
};
String.prototype._equals = function (string, ignoreCase) {
  if (ignoreCase === void 0) {
    ignoreCase = true;
  }
  if (string === undefined || string === null) {
    return false;
  }
  if (ignoreCase) {
    return this.toUpperCase() == string.toUpperCase();
  }
  return this == string;
};
String.prototype._replaceAll = function (src, des) {
  if (src == '\\' || src == '.') {
    src = '\\' + src;
  }
  var regExp = _getRegExp(src, 'gm');
  return this.replace(regExp, des);
};
String.prototype._removeAt = function (index, length) {
  if (length === void 0) {
    length = 1;
  }
  if (index >= this.length) {
    return this;
  }
  return this.slice(0, index) + this.slice(index + length);
};
String.prototype._insert = function (index, string) {
  return this.slice(0, index) + string + this.slice(index);
};
String.prototype._isNumeric = function () {
  var reg = /^(\+|-)?\d+($|\.\d+$)/;
  if (reg.test(this)) {
    return true;
  }
  return false;
};
String.prototype._contains = function (strings) {
  for (var i = 0, l = this.length; i < l; i++) {
    var code = this[i];
    if (strings.indexOf(code) !== -1) {
      return true;
    }
  }
  return false;
};
String.prototype._cleanup = function () {
  var strings = this.split('/');

  // Remove backward '../' path string
  for (var i = 0; i < strings.length;) {
    if (strings[i] == ".." && i > 0) {
      strings.splice(i - 1, i + 1);
    } else {
      i++;
    }
  }

  // Skip current directory './' path string
  for (var i = 0; i < strings.length;) {
    if (strings[i] == ".") {
      strings.splice(i, 1);
    } else {
      i++;
    }
  }

  // Combine path by strings
  var string = '';
  for (var i = 0; i < strings.length; i++) {
    string += strings[i];
    if (i != strings.length - 1) {
      string += "/";
    }
  }
  return string;
};

// #endregion

// Prevent 3rd libs use UNDEFINED 'global' variable
if (typeof window !== 'undefined') {
  window.global = window;
}

var external = /*#__PURE__*/Object.freeze({
  __proto__: null
});

/**
 * The log level type.
 * @enum {Number}
 * @readonly
 */
var LogLevelType = {
  None: 0,
  All: 0xFFFFFFFF,
  Debug: 0x00000001,
  Log: 0x00000002,
  Warn: 0x00000004,
  Error: 0x00000008
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
var toStringTag = typeof Symbol !== 'undefined' ? Symbol.toStringTag : '@@toStringTag';
var _internals = /*#__PURE__*/new WeakMap();
var _promise = /*#__PURE__*/new WeakMap();
class CancelablePromiseInternal {
  constructor(_ref) {
    var {
      executor = () => {},
      internals = defaultInternals(),
      promise = new Promise((resolve, reject) => executor(resolve, reject, onCancel => {
        internals.onCancelList.push(onCancel);
      }))
    } = _ref;
    _classPrivateFieldInitSpec(this, _internals, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _promise, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, toStringTag, 'CancelablePromise');
    this.cancel = this.cancel.bind(this);
    _classPrivateFieldSet(this, _internals, internals);
    _classPrivateFieldSet(this, _promise, promise || new Promise((resolve, reject) => executor(resolve, reject, onCancel => {
      internals.onCancelList.push(onCancel);
    })));
  }
  then(onfulfilled, onrejected) {
    return makeCancelable(_classPrivateFieldGet(this, _promise).then(createCallback(onfulfilled, _classPrivateFieldGet(this, _internals)), createCallback(onrejected, _classPrivateFieldGet(this, _internals))), _classPrivateFieldGet(this, _internals));
  }
  catch(onrejected) {
    return makeCancelable(_classPrivateFieldGet(this, _promise).catch(createCallback(onrejected, _classPrivateFieldGet(this, _internals))), _classPrivateFieldGet(this, _internals));
  }
  finally(onfinally, runWhenCanceled) {
    if (runWhenCanceled) {
      _classPrivateFieldGet(this, _internals).onCancelList.push(onfinally);
    }
    return makeCancelable(_classPrivateFieldGet(this, _promise).finally(createCallback(() => {
      if (onfinally) {
        if (runWhenCanceled) {
          _classPrivateFieldGet(this, _internals).onCancelList = _classPrivateFieldGet(this, _internals).onCancelList.filter(callback => callback !== onfinally);
        }
        return onfinally();
      }
    }, _classPrivateFieldGet(this, _internals))), _classPrivateFieldGet(this, _internals));
  }
  cancel() {
    _classPrivateFieldGet(this, _internals).isCanceled = true;
    var callbacks = _classPrivateFieldGet(this, _internals).onCancelList;
    _classPrivateFieldGet(this, _internals).onCancelList = [];
    for (var callback of callbacks) {
      if (typeof callback === 'function') {
        try {
          callback();
        } catch (err) {
          console.error(err);
        }
      }
    }
  }
  isCanceled() {
    return _classPrivateFieldGet(this, _internals).isCanceled === true;
  }
}
class CancelablePromise extends CancelablePromiseInternal {
  static className = 'CancelablePromise';
  constructor(executor) {
    super({
      executor
    });
  }
}
_defineProperty(CancelablePromise, "all", function all(iterable) {
  return makeAllCancelable(iterable, Promise.all(iterable));
});
_defineProperty(CancelablePromise, "allSettled", function allSettled(iterable) {
  return makeAllCancelable(iterable, Promise.allSettled(iterable));
});
_defineProperty(CancelablePromise, "any", function any(iterable) {
  return makeAllCancelable(iterable, Promise.any(iterable));
});
_defineProperty(CancelablePromise, "race", function race(iterable) {
  return makeAllCancelable(iterable, Promise.race(iterable));
});
_defineProperty(CancelablePromise, "resolve", function resolve(value) {
  return cancelable(Promise.resolve(value));
});
_defineProperty(CancelablePromise, "reject", function reject(reason) {
  return cancelable(Promise.reject(reason));
});
_defineProperty(CancelablePromise, "isCancelable", isCancelablePromise);
function cancelable(promise) {
  return makeCancelable(promise, defaultInternals());
}
function isCancelablePromise(promise) {
  return promise instanceof CancelablePromise || promise instanceof CancelablePromiseInternal;
}
function createCallback(onResult, internals) {
  if (onResult) {
    return arg => {
      if (!internals.isCanceled) {
        var result = onResult(arg);
        if (isCancelablePromise(result)) {
          internals.onCancelList.push(result.cancel);
        }
        return result;
      }
      return arg;
    };
  }
}
function makeCancelable(promise, internals) {
  return new CancelablePromiseInternal({
    internals,
    promise
  });
}
function makeAllCancelable(iterable, promise) {
  var internals = defaultInternals();
  internals.onCancelList.push(() => {
    for (var resolvable of iterable) {
      if (isCancelablePromise(resolvable)) {
        resolvable.cancel();
      }
    }
  });
  return new CancelablePromiseInternal({
    internals,
    promise
  });
}
function defaultInternals() {
  return {
    isCanceled: false,
    onCancelList: []
  };
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
				var args = [null];
				args.push.apply(args, arguments);
				var Ctor = Function.bind.apply(f, args);
				return new Ctor();
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var sparkMd5$1 = {exports: {}};

(function (module, exports) {
  (function (factory) {
    {
      // Node/CommonJS
      module.exports = factory();
    }
  })(function (undefined$1) {

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
    function md5cycle(x, k) {
      var a = x[0],
        b = x[1],
        c = x[2],
        d = x[3];
      a += (b & c | ~b & d) + k[0] - 680876936 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[1] - 389564586 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[2] + 606105819 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[4] - 176418897 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[7] - 45705983 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[10] - 42063 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[13] - 40341101 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & d | c & ~d) + k[1] - 165796510 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[11] + 643717713 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[0] - 373897302 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[5] - 701558691 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[10] + 38016083 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[15] - 660478335 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[4] - 405537848 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[9] + 568446438 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[3] - 187363961 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[2] - 51403784 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b ^ c ^ d) + k[5] - 378558 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[14] - 35309556 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[7] - 155497632 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[13] + 681279174 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[0] - 358537222 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[3] - 722521979 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[6] + 76029189 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[9] - 640364487 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[12] - 421815835 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[15] + 530742520 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[2] - 995338651 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      x[0] = a + x[0] | 0;
      x[1] = b + x[1] | 0;
      x[2] = c + x[2] | 0;
      x[3] = d + x[3] | 0;
    }
    function md5blk(s) {
      var md5blks = [],
        i; /* Andy King said do it this way. */

      for (i = 0; i < 64; i += 4) {
        md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
      }
      return md5blks;
    }
    function md5blk_array(a) {
      var md5blks = [],
        i; /* Andy King said do it this way. */

      for (i = 0; i < 64; i += 4) {
        md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
      }
      return md5blks;
    }
    function md51(s) {
      var n = s.length,
        state = [1732584193, -271733879, -1732584194, 271733878],
        i,
        length,
        tail,
        tmp,
        lo,
        hi;
      for (i = 64; i <= n; i += 64) {
        md5cycle(state, md5blk(s.substring(i - 64, i)));
      }
      s = s.substring(i - 64);
      length = s.length;
      tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
      }
      tail[i >> 2] |= 0x80 << (i % 4 << 3);
      if (i > 55) {
        md5cycle(state, tail);
        for (i = 0; i < 16; i += 1) {
          tail[i] = 0;
        }
      }

      // Beware that the final length might not fit in 32 bits so we take care of that
      tmp = n * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(state, tail);
      return state;
    }
    function md51_array(a) {
      var n = a.length,
        state = [1732584193, -271733879, -1732584194, 271733878],
        i,
        length,
        tail,
        tmp,
        lo,
        hi;
      for (i = 64; i <= n; i += 64) {
        md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
      }

      // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
      // containing the last element of the parent array if the sub array specified starts
      // beyond the length of the parent array - weird.
      // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
      a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
      length = a.length;
      tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= a[i] << (i % 4 << 3);
      }
      tail[i >> 2] |= 0x80 << (i % 4 << 3);
      if (i > 55) {
        md5cycle(state, tail);
        for (i = 0; i < 16; i += 1) {
          tail[i] = 0;
        }
      }

      // Beware that the final length might not fit in 32 bits so we take care of that
      tmp = n * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(state, tail);
      return state;
    }
    function rhex(n) {
      var s = '',
        j;
      for (j = 0; j < 4; j += 1) {
        s += hex_chr[n >> j * 8 + 4 & 0x0F] + hex_chr[n >> j * 8 & 0x0F];
      }
      return s;
    }
    function hex(x) {
      var i;
      for (i = 0; i < x.length; i += 1) {
        x[i] = rhex(x[i]);
      }
      return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') ;

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
      (function () {
        function clamp(val, length) {
          val = val | 0 || 0;
          if (val < 0) {
            return Math.max(val + length, 0);
          }
          return Math.min(val, length);
        }
        ArrayBuffer.prototype.slice = function (from, to) {
          var length = this.byteLength,
            begin = clamp(from, length),
            end = length,
            num,
            target,
            targetArray,
            sourceArray;
          if (to !== undefined$1) {
            end = clamp(to, length);
          }
          if (begin > end) {
            return new ArrayBuffer(0);
          }
          num = end - begin;
          target = new ArrayBuffer(num);
          targetArray = new Uint8Array(target);
          sourceArray = new Uint8Array(this, begin, num);
          targetArray.set(sourceArray);
          return target;
        };
      })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
      if (/[\u0080-\uFFFF]/.test(str)) {
        str = unescape(encodeURIComponent(str));
      }
      return str;
    }
    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
      var length = str.length,
        buff = new ArrayBuffer(length),
        arr = new Uint8Array(buff),
        i;
      for (i = 0; i < length; i += 1) {
        arr[i] = str.charCodeAt(i);
      }
      return returnUInt8Array ? arr : buff;
    }
    function arrayBuffer2Utf8Str(buff) {
      return String.fromCharCode.apply(null, new Uint8Array(buff));
    }
    function concatenateArrayBuffers(first, second, returnUInt8Array) {
      var result = new Uint8Array(first.byteLength + second.byteLength);
      result.set(new Uint8Array(first));
      result.set(new Uint8Array(second), first.byteLength);
      return returnUInt8Array ? result : result.buffer;
    }
    function hexToBinaryString(hex) {
      var bytes = [],
        length = hex.length,
        x;
      for (x = 0; x < length - 1; x += 2) {
        bytes.push(parseInt(hex.substr(x, 2), 16));
      }
      return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
      // call reset to init the instance
      this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
      // Converts the string to utf8 bytes if necessary
      // Then append as binary
      this.appendBinary(toUtf8(str));
      return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
      this._buff += contents;
      this._length += contents.length;
      var length = this._buff.length,
        i;
      for (i = 64; i <= length; i += 64) {
        md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
      }
      this._buff = this._buff.substring(i - 64);
      return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
      var buff = this._buff,
        length = buff.length,
        i,
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ret;
      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
      }
      this._finish(tail, length);
      ret = hex(this._hash);
      if (raw) {
        ret = hexToBinaryString(ret);
      }
      this.reset();
      return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
      this._buff = '';
      this._length = 0;
      this._hash = [1732584193, -271733879, -1732584194, 271733878];
      return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
      return {
        buff: this._buff,
        length: this._length,
        hash: this._hash.slice()
      };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
      this._buff = state.buff;
      this._length = state.length;
      this._hash = state.hash;
      return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
      delete this._hash;
      delete this._buff;
      delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
      var i = length,
        tmp,
        lo,
        hi;
      tail[i >> 2] |= 0x80 << (i % 4 << 3);
      if (i > 55) {
        md5cycle(this._hash, tail);
        for (i = 0; i < 16; i += 1) {
          tail[i] = 0;
        }
      }

      // Do the final computation based on the tail and length
      // Beware that the final length may not fit in 32 bits so we take care of that
      tmp = this._length * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
      // Converts the string to utf8 bytes if necessary
      // Then compute it using the binary function
      return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
      var hash = md51(content),
        ret = hex(hash);
      return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
      // call reset to init the instance
      this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
      var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
        length = buff.length,
        i;
      this._length += arr.byteLength;
      for (i = 64; i <= length; i += 64) {
        md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
      }
      this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
      return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
      var buff = this._buff,
        length = buff.length,
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        i,
        ret;
      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= buff[i] << (i % 4 << 3);
      }
      this._finish(tail, length);
      ret = hex(this._hash);
      if (raw) {
        ret = hexToBinaryString(ret);
      }
      this.reset();
      return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
      this._buff = new Uint8Array(0);
      this._length = 0;
      this._hash = [1732584193, -271733879, -1732584194, 271733878];
      return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
      var state = SparkMD5.prototype.getState.call(this);

      // Convert buffer to a string
      state.buff = arrayBuffer2Utf8Str(state.buff);
      return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
      // Convert string to buffer
      state.buff = utf8Str2ArrayBuffer(state.buff, true);
      return SparkMD5.prototype.setState.call(this, state);
    };
    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
      var hash = md51_array(new Uint8Array(arr)),
        ret = hex(hash);
      return raw ? hexToBinaryString(ret) : ret;
    };
    return SparkMD5;
  });
})(sparkMd5$1);
var sparkMd5 = sparkMd5$1.exports;

var SparkMD5 = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  default: sparkMd5
}, [sparkMd5$1.exports]);

var ASCII = {
  a: 'a'.charCodeAt(),
  f: 'f'.charCodeAt(),
  A: 'A'.charCodeAt(),
  F: 'F'.charCodeAt(),
  0: '0'.charCodeAt(),
  7: '7'.charCodeAt(),
  9: '9'.charCodeAt()
};
var hex2int = function hex2int(str) {
  str = str.replace(/^[0Oo][Xx]/, '');
  var ret = 0,
    digit = 0;
  for (var i = str.length - 1; i >= 0; i--) {
    ret += intAtHex(str[i], digit++);
  }
  return ret;
};
var intAtHex = function intAtHex(c, digit) {
  var ret = null;
  var ascii = c.charCodeAt();
  if (ASCII.a <= ascii && ascii <= ASCII.f) {
    ret = ascii - ASCII.a + 10;
  } else if (ASCII.A <= ascii && ascii <= ASCII.F) {
    ret = ascii - ASCII.A + 10;
  } else if (ASCII[0] <= ascii && ascii <= ASCII[9]) {
    ret = ascii - ASCII[0];
  } else {
    throw new Error('Invalid ascii [' + c + ']');
  }
  while (digit--) {
    ret *= 16;
  }
  return ret;
};
var octal2int = function octal2int(str) {
  str = str.replace(/^0[Oo]?/, '');
  var ret = 0,
    digit = 0;
  for (var i = str.length - 1; i >= 0; i--) {
    ret += intAtOctal(str[i], digit++);
  }
  return ret;
};
var intAtOctal = function intAtOctal(c, digit) {
  var num = null;
  var ascii = c.charCodeAt();
  if (ascii >= ASCII[0] && ascii <= ASCII[7]) {
    num = ascii - ASCII[0];
  } else {
    throw new Error('Invalid char to Octal [' + c + ']');
  }
  while (digit--) {
    num *= 8;
  }
  return num;
};
var regslashes = function regslashes(pre) {
  return pre.replace(/\[/g, '\\[').replace(/\]/g, '\\]').replace(/\(/g, '\\(').replace(/\)/g, '\\)').replace(/\|/g, '\\|');
};
var stripslashes = function stripslashes(str) {
  return str.replace(/\\([\sA-Za-z\\]|[0-7]{1,3})/g, function (str, c) {
    switch (c) {
      case '\\':
        return '\\';
      case '0':
        return '\u0000';
      default:
        if (/^\w$/.test(c)) {
          return getSpecialChar(c);
        } else if (/^\s$/.test(c)) {
          return c;
        } else if (/([0-7]{1,3})/.test(c)) {
          return getASCIIChar(c);
        }
        return str;
    }
  });
};
var getASCIIChar = function getASCIIChar(str) {
  var num = octal2int(str);
  return String.fromCharCode(num);
};
var getSpecialChar = function getSpecialChar(letter) {
  switch (letter.toLowerCase()) {
    case 'b':
      return '\b';
    case 'f':
      return '\f';
    case 'n':
      return '\n';
    case 'r':
      return '\r';
    case 't':
      return '\t';
    case 'v':
      return '\v';
    default:
      return letter;
  }
};
var utils$1 = {
  regslashes,
  stripslashes,
  hex2int,
  octal2int
};

var input = '';
var stdin_flag = false;
var scanf = function scanf(format) {
  var re = new RegExp('[^%]*%[0-9]*[A-Za-z][^%]*', 'g');
  var selector = format.match(re);
  if (selector === null) {
    throw new Error('Unable to parse scanf selector.');
  }
  var result,
    len = selector.length;
  var json_flag = false,
    count = 0,
    keys = Array.prototype.slice.call(arguments, 1);
  if (!this.sscanf) {
    // clear sscanf cache
    if (!stdin_flag) input = '';
    stdin_flag = true;
  }
  if (keys.length > 0) {
    result = {};
    json_flag = true;
  } else if (len > 1) {
    result = [];
  } else {
    return dealType(selector[0]);
  }
  selector.forEach(function (val) {
    if (json_flag) {
      result[keys.shift() || count++] = dealType(val);
    } else {
      result.push(dealType(val));
    }
  });
  return result;
};
function sscanf(str, format) {
  if (typeof str !== 'string' || !str.length) {
    return null;
  }

  // clear scanf cache
  if (stdin_flag) input = '';
  input = str;
  stdin_flag = false;
  return scanf.apply({
    sscanf: true
  }, Array.prototype.slice.call(arguments, 1));
}
var getInput = function getInput(pre, next, match, type) {
  var result;
  if (!input.length || input === '\r') {
    if (stdin_flag) {
      input = gets();
    } else {
      return null;
    }
  }

  // match format
  var replace = '(' + match + ')';
  var tmp = input;

  // while scan string, replace before and after
  if (type === 'STR' && next.trim().length > 0) {
    var before_macth = utils$1.regslashes(pre);
    var after_match = utils$1.regslashes(next) + '[\\w\\W]*';
    if (before_macth.length) {
      tmp = tmp.replace(new RegExp(before_macth), '');
    }
    tmp = tmp.replace(new RegExp(after_match), '');
  } else {
    replace = utils$1.regslashes(pre) + replace;
  }
  var m = tmp.match(new RegExp(replace));
  if (!m) {
    // todo strip match
    return null;
  }
  result = m[1];

  // strip match content
  input = input.substr(input.indexOf(result)).replace(result, '').replace(next, '');
  if (type === 'HEXFLOAT') {
    return m;
  }
  return result;
};
var getInteger = function getInteger(pre, next) {
  var text = getInput(pre, next, '[-]?[A-Za-z0-9]+');
  if (!text) {
    return null;
  }
  if (text.length > 2) {
    if (text[0] === '0') {
      if (text[1].toLowerCase() === 'x') {
        try {
          return utils$1.hex2int(text);
        } catch (e) {
          if (exports.throw) return NaN;
          return null;
        }
      }
      // parse Integer (%d %ld %u %lu %llu) should be precise for octal
      if (text[1].toLowerCase() === 'o') {
        try {
          return utils$1.octal2int(text);
        } catch (e) {
          if (exports.throw) return NaN;
          return null;
        }
      }
    }
  }
  return parseInt(text);
};
var getFloat = function getFloat(pre, next) {
  var text = getInput(pre, next, '[-]?[0-9]+[.]?[0-9]*');
  return parseFloat(text);
};
var getHexFloat = function getHexFloat(pre, next) {
  var hfParams = getInput(pre, next, '^([+-]?)0x([0-9a-f]*)(.[0-9a-f]*)?(p[+-]?[0-9a-f]+)?', 'HEXFLOAT');
  var sign = hfParams[2];
  var sint = hfParams[3];
  var spoint = hfParams[4];
  var sexp = hfParams[5] || 'p0';
  // We glue the integer and point parts together when parsing
  var integer = parseInt(sign + sint + (spoint !== undefined ? spoint.slice(1) : ''), 16);
  // The actual exponent is the specified exponent minus the de..heximal points we shifted away
  var exponent = parseInt(sexp.slice(1), 16) - 4 * (spoint !== undefined ? spoint.length - 1 : 0);
  return integer * Math.pow(2, exponent);
};
var getHex = function getHex(pre, next) {
  var text = getInput(pre, next, '[A-Za-z0-9]+');
  try {
    return utils$1.hex2int(text);
  } catch (e) {
    if (exports.throw) return NaN;
    return null;
  }
};
var getOctal = function getOctal(pre, next) {
  var text = getInput(pre, next, '[A-Za-z0-9]+');
  try {
    return utils$1.octal2int(text);
  } catch (e) {
    if (exports.throw) return NaN;
    return null;
  }
};
var getString = function getString(pre, next) {
  var text = getInput(pre, next,
  // Match repeat string
  '(' + '[\\w\\]=-]' + '|' + '\\S+[^\\ ]' +
  // Match string witch \SPC like 'Alan\ Bob'
  ')' +
  // Match after
  '+(\\\\[\\w\\ ][\\w\\:]*)*', 'STR');
  if (/\\/.test(text)) text = utils$1.stripslashes(text);
  return text;
};
var getLine = function getLine(pre, next) {
  var text = getInput(pre, next, '[^\n\r]*');
  if (/\\/.test(text)) text = utils$1.stripslashes(text);
  return text;
};
var dealType = function dealType(format) {
  var ret;
  var res = format.match(/%(0[1-9]+)?[A-Za-z]+/);
  var res2 = format.match(/[^%]*/);
  if (!res) {
    // DID NOT throw error here to stay compatible with old version
    console.warn('Invalid scanf selector: [%s]', format);
    return null;
  }
  var type = res[0].replace(res[1], '');
  var pre = !!res2 ? res2[0] : null;
  var next = format.substr(format.indexOf(type) + type.length);
  switch (type) {
    case '%d':
    case '%ld':
    case '%llu':
    case '%lu':
    case '%u':
      ret = getInteger(pre, next);
      break;
    case '%c': // TODO getChar
    case '%s':
      ret = getString(pre, next);
      break;
    case '%S':
      ret = getLine(pre, next);
      break;
    case '%X':
    case '%x':
      ret = getHex(pre, next);
      break;
    case '%O':
    case '%o':
      ret = getOctal(pre, next);
      break;
    case '%a':
      ret = getHexFloat(pre, next);
      break;
    case '%f':
      ret = getFloat(pre, next);
      break;
    default:
      throw new Error('Unknown type "' + type + '"');
  }
  return ret;
};

var textEncoderLite = {exports: {}};

(function (module) {
  function TextEncoderLite() {}
  function TextDecoderLite() {}
  (function () {

    // Taken from https://github.com/feross/buffer/blob/master/index.js
    // Thanks Feross et al! :-)
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      var i = 0;
      for (; i < length; i++) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (leadSurrogate) {
            // 2 leads in a row
            if (codePoint < 0xDC00) {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              leadSurrogate = codePoint;
              continue;
            } else {
              // valid surrogate pair
              codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000;
              leadSurrogate = null;
            }
          } else {
            // no lead yet

            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue;
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue;
            } else {
              // valid lead
              leadSurrogate = codePoint;
              continue;
            }
          }
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = null;
        }

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break;
          bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break;
          bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x200000) {
          if ((units -= 4) < 0) break;
          bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else {
          throw new Error('Invalid code point');
        }
      }
      return bytes;
    }
    function utf8Slice(buf, start, end) {
      var res = '';
      var tmp = '';
      end = Math.min(buf.length, end || Infinity);
      start = start || 0;
      for (var i = start; i < end; i++) {
        if (buf[i] <= 0x7F) {
          res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
          tmp = '';
        } else {
          tmp += '%' + buf[i].toString(16);
        }
      }
      return res + decodeUtf8Char(tmp);
    }
    function decodeUtf8Char(str) {
      try {
        return decodeURIComponent(str);
      } catch (err) {
        return String.fromCharCode(0xFFFD); // UTF 8 invalid char
      }
    }

    TextEncoderLite.prototype.encode = function (str) {
      var result;
      if ('undefined' === typeof Uint8Array) {
        result = utf8ToBytes(str);
      } else {
        result = new Uint8Array(utf8ToBytes(str));
      }
      return result;
    };
    TextDecoderLite.prototype.decode = function (bytes) {
      return utf8Slice(bytes, 0, bytes.length);
    };
  })();
  if (module) {
    module.exports.TextDecoderLite = TextDecoderLite;
    module.exports.TextEncoderLite = TextEncoderLite;
  }
})(textEncoderLite);

var toString$1 = Object.prototype.toString;
var isType = function isType(type) {
  var typeName = '[object ' + type + ']';
  return function (obj) {
    return toString$1.call(obj) == typeName;
  };
};
var isTypes = function isTypes(types) {
  var typeNames = types.map(type => {
    return '[object ' + type + ']';
  });
  return function (obj) {
    var objString = toString$1.call(obj);
    if (typeNames.indexOf(objString) !== -1) {
      return true;
    }
    return false;
  };
};

/**
 * @class BaseUtils
 * Base useful functions.
 * @memberof BASE.THING
 */
class BaseUtils {
  /**
   * Check whether it's boolean type.
   * @param {*} value js element
   * @return {boolean}
   */
  static isBoolean(value) {
    return typeof value == 'boolean';
  }

  /**
   * Check whether it's null or undefined
   * @param {*} value The value.
   * @return {Boolean}
   */
  static isNull(value) {
    return value === undefined || value === null;
  }

  /**
   * Check whether it's not null or undefined
   * @param {*} value The value.
   * @return {Boolean}
   */
  static isValid(value) {
    return value !== undefined && value !== null;
  }

  /**
   * Check whether it's number string format.
   * @param {String} value The string to check.
   * @return {Boolean}
   */
  static isNumberString(value) {
    var reg = /^(\+|-)?\d+($|\.\d+$)/;
    if (reg.test(value)) {
      return true;
    }
    return false;
  }

  /**
   * Check whether it's boolean string format.
   * @param {String} value The string to check.
   * @return {Boolean}
   */
  static isBooleanString(value) {
    var lowerString = value.toLowerCase();
    if (lowerString == 'true' || lowerString == 'false') {
      return true;
    }
    return false;
  }
  static parseValue(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    } else {
      return value;
    }
  }
  static parseArray(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    } else {
      return value.slice(0);
    }
  }
  static parseBoolean(value, defaultValue) {
    if (value === undefined || value === null || isNaN(value)) {
      return defaultValue;
    } else {
      if (!value || value == '0') {
        return false;
      } else {
        return true;
      }
    }
  }
  static parseNumber(value, defaultValue) {
    if (value === undefined || value === null || isNaN(value)) {
      return defaultValue;
    } else {
      return value;
    }
  }
  static parseFloat(value, defaultValue, fixed) {
    if (BaseUtils.isNumber(fixed)) {
      return parseFloat(parseFloat(value).toFixed(fixed));
    } else if (BaseUtils.isNumber(value) || BaseUtils.isNumberString(value)) {
      return parseFloat(value);
    }
    return defaultValue;
  }

  /**
   * Output debug log.
   */
  static debug() {
    console.debug.apply(console, arguments);
  }

  /**
   * Output log.
   */
  static log() {
    console.log.apply(console, arguments);
  }

  /**
   * Output warn log.
   */
  static warn() {
    console.warn.apply(console, arguments);
  }

  /**
   * Output error log.
   */
  static error() {
    console.error.apply(console, arguments);
  }
}
BaseUtils.isType = isType;
BaseUtils.isArray = isType('Array');
BaseUtils.isObject = isType('Object');
BaseUtils.isString = isType('String');
BaseUtils.isNumber = isType('Number');
BaseUtils.isFunction = isTypes(['Function', 'AsyncFunction']);
BaseUtils.isAsyncFunction = isType('AsyncFunction');
BaseUtils.isRegExp = isType('RegExp');
BaseUtils.isInt8Array = isType('Int8Array');
BaseUtils.isInt16Array = isType('Int16Array');
BaseUtils.isInt32Array = isType('Int32Array');
BaseUtils.isUint8Array = isType('Uint8Array');
BaseUtils.isUint16Array = isType('Uint16Array');
BaseUtils.isUint32Array = isType('Uint32Array');
BaseUtils.isUndefined = isType('Undefined');
BaseUtils.isArrayBuffer = function (v) {
  return v && v.constructor.name == 'ArrayBuffer';
};

var _defaultOptions = {};
var _factories = [];
var _macros = {};
var _registeredClasses = {};
var _registeredVariables = {};
var textEncoder = new textEncoderLite.exports.TextEncoderLite("utf-8");
var textDecoder = new textEncoderLite.exports.TextDecoderLite("utf-8");
var _timer = typeof performance === 'undefined' ? Date : performance;
var _global = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;
var _colorKeywords = {
  'aliceblue': 0xF0F8FF,
  'antiquewhite': 0xFAEBD7,
  'aqua': 0x00FFFF,
  'aquamarine': 0x7FFFD4,
  'azure': 0xF0FFFF,
  'beige': 0xF5F5DC,
  'bisque': 0xFFE4C4,
  'black': 0x000000,
  'blanchedalmond': 0xFFEBCD,
  'blue': 0x0000FF,
  'blueviolet': 0x8A2BE2,
  'brown': 0xA52A2A,
  'burlywood': 0xDEB887,
  'cadetblue': 0x5F9EA0,
  'chartreuse': 0x7FFF00,
  'chocolate': 0xD2691E,
  'coral': 0xFF7F50,
  'cornflowerblue': 0x6495ED,
  'cornsilk': 0xFFF8DC,
  'crimson': 0xDC143C,
  'cyan': 0x00FFFF,
  'darkblue': 0x00008B,
  'darkcyan': 0x008B8B,
  'darkgoldenrod': 0xB8860B,
  'darkgray': 0xA9A9A9,
  'darkgreen': 0x006400,
  'darkgrey': 0xA9A9A9,
  'darkkhaki': 0xBDB76B,
  'darkmagenta': 0x8B008B,
  'darkolivegreen': 0x556B2F,
  'darkorange': 0xFF8C00,
  'darkorchid': 0x9932CC,
  'darkred': 0x8B0000,
  'darksalmon': 0xE9967A,
  'darkseagreen': 0x8FBC8F,
  'darkslateblue': 0x483D8B,
  'darkslategray': 0x2F4F4F,
  'darkslategrey': 0x2F4F4F,
  'darkturquoise': 0x00CED1,
  'darkviolet': 0x9400D3,
  'deeppink': 0xFF1493,
  'deepskyblue': 0x00BFFF,
  'dimgray': 0x696969,
  'dimgrey': 0x696969,
  'dodgerblue': 0x1E90FF,
  'firebrick': 0xB22222,
  'floralwhite': 0xFFFAF0,
  'forestgreen': 0x228B22,
  'fuchsia': 0xFF00FF,
  'gainsboro': 0xDCDCDC,
  'ghostwhite': 0xF8F8FF,
  'gold': 0xFFD700,
  'goldenrod': 0xDAA520,
  'gray': 0x808080,
  'green': 0x008000,
  'greenyellow': 0xADFF2F,
  'grey': 0x808080,
  'honeydew': 0xF0FFF0,
  'hotpink': 0xFF69B4,
  'indianred': 0xCD5C5C,
  'indigo': 0x4B0082,
  'ivory': 0xFFFFF0,
  'khaki': 0xF0E68C,
  'lavender': 0xE6E6FA,
  'lavenderblush': 0xFFF0F5,
  'lawngreen': 0x7CFC00,
  'lemonchiffon': 0xFFFACD,
  'lightblue': 0xADD8E6,
  'lightcoral': 0xF08080,
  'lightcyan': 0xE0FFFF,
  'lightgoldenrodyellow': 0xFAFAD2,
  'lightgray': 0xD3D3D3,
  'lightgreen': 0x90EE90,
  'lightgrey': 0xD3D3D3,
  'lightpink': 0xFFB6C1,
  'lightsalmon': 0xFFA07A,
  'lightseagreen': 0x20B2AA,
  'lightskyblue': 0x87CEFA,
  'lightslategray': 0x778899,
  'lightslategrey': 0x778899,
  'lightsteelblue': 0xB0C4DE,
  'lightyellow': 0xFFFFE0,
  'lime': 0x00FF00,
  'limegreen': 0x32CD32,
  'linen': 0xFAF0E6,
  'magenta': 0xFF00FF,
  'maroon': 0x800000,
  'mediumaquamarine': 0x66CDAA,
  'mediumblue': 0x0000CD,
  'mediumorchid': 0xBA55D3,
  'mediumpurple': 0x9370DB,
  'mediumseagreen': 0x3CB371,
  'mediumslateblue': 0x7B68EE,
  'mediumspringgreen': 0x00FA9A,
  'mediumturquoise': 0x48D1CC,
  'mediumvioletred': 0xC71585,
  'midnightblue': 0x191970,
  'mintcream': 0xF5FFFA,
  'mistyrose': 0xFFE4E1,
  'moccasin': 0xFFE4B5,
  'navajowhite': 0xFFDEAD,
  'navy': 0x000080,
  'oldlace': 0xFDF5E6,
  'olive': 0x808000,
  'olivedrab': 0x6B8E23,
  'orange': 0xFFA500,
  'orangered': 0xFF4500,
  'orchid': 0xDA70D6,
  'palegoldenrod': 0xEEE8AA,
  'palegreen': 0x98FB98,
  'paleturquoise': 0xAFEEEE,
  'palevioletred': 0xDB7093,
  'papayawhip': 0xFFEFD5,
  'peachpuff': 0xFFDAB9,
  'peru': 0xCD853F,
  'pink': 0xFFC0CB,
  'plum': 0xDDA0DD,
  'powderblue': 0xB0E0E6,
  'purple': 0x800080,
  'rebeccapurple': 0x663399,
  'red': 0xFF0000,
  'rosybrown': 0xBC8F8F,
  'royalblue': 0x4169E1,
  'saddlebrown': 0x8B4513,
  'salmon': 0xFA8072,
  'sandybrown': 0xF4A460,
  'seagreen': 0x2E8B57,
  'seashell': 0xFFF5EE,
  'sienna': 0xA0522D,
  'silver': 0xC0C0C0,
  'skyblue': 0x87CEEB,
  'slateblue': 0x6A5ACD,
  'slategray': 0x708090,
  'slategrey': 0x708090,
  'snow': 0xFFFAFA,
  'springgreen': 0x00FF7F,
  'steelblue': 0x4682B4,
  'tan': 0xD2B48C,
  'teal': 0x008080,
  'thistle': 0xD8BFD8,
  'tomato': 0xFF6347,
  'turquoise': 0x40E0D0,
  'violet': 0xEE82EE,
  'wheat': 0xF5DEB3,
  'white': 0xFFFFFF,
  'whitesmoke': 0xF5F5F5,
  'yellow': 0xFFFF00,
  'yellowgreen': 0x9ACD32
};
function _parseColorFromHex(value) {
  var hex = Math.floor(value);
  var r = (hex >> 16 & 255) / 255;
  var g = (hex >> 8 & 255) / 255;
  var b = (hex & 255) / 255;
  return [r, g, b];
}
function _readChunked(buffer, chunkCallback, endCallback) {
  var fileSize = buffer.size;
  var chunkSize = 4 * 1024 * 1024; // 4MB
  var offset = 0;
  var reader = new FileReader();
  reader.onload = function () {
    if (reader.error) {
      endCallback(reader.error || {});
      return;
    }
    offset += reader.result.length;
    // callback for handling read chunk
    // TODO: handle errors
    chunkCallback(reader.result, offset, fileSize);
    if (offset >= fileSize) {
      endCallback(null);
      return;
    }
    readNext();
  };
  reader.onerror = function (err) {
    endCallback(err || {});
  };
  function readNext() {
    var fileSlice = buffer.slice(offset, offset + chunkSize);
    reader.readAsBinaryString(fileSlice);
  }
  readNext();
}

// Try to ignore eval compile warning
var eval2 = eval;
var _eval = function _eval(script) {
  try {
    return eval2(script);
  } catch (e) {}
};
var _objectKeysToLowerCase = function _objectKeysToLowerCase(input, deep, filter) {
  var idx, key, keys, last, output, self, type, value;
  self = _objectKeysToLowerCase;
  type = typeof deep;

  // Convert "deep" to a number between 0 to Infinity or keep special object.
  if (type === 'undefined' || deep === null || deep === 0 || deep === false) {
    deep = 0; // Shallow copy
  } else if (type === 'object') {
    if (!(deep instanceof self)) {
      throw new TypeError('Expected "deep" to be a special object');
    }
  } else if (deep === true) {
    deep = Infinity; // Deep copy
  } else if (type === 'number') {
    if (isNaN(deep) || deep < 0) {
      throw new RangeError('Expected "deep" to be a positive number, got ' + deep);
    }
  } else {
    throw new TypeError('Expected "deep" to be a boolean, number or object, got "' + type + '"');
  }

  // Check type of input, and throw if null or not an object.
  if (input === null || typeof input !== 'object') {
    throw new TypeError('Expected "input" to be an object');
  }

  // Check type of filter
  type = typeof filter;
  if (filter === null || type === 'undefined' || type === 'function') {
    filter = filter || null;
  } else {
    throw new TypeError('Expected "filter" to be a function');
  }
  keys = Object.keys(input); // Get own keys from object
  last = keys.length - 1;
  output = {}; // new object

  if (deep) {
    // only run the deep copy if needed.
    if (typeof deep === 'number') {
      // Create special object to be used during deep copy
      deep = Object.seal(Object.create(self.prototype, {
        input: {
          value: []
        },
        output: {
          value: []
        },
        level: {
          value: -1,
          writable: true
        },
        max: {
          value: deep,
          writable: false
        }
      }));
    } else {
      // Circle detection
      idx = deep.input.indexOf(input);
      if (~idx) {
        return deep.output[idx];
      }
    }
    deep.level += 1;
    deep.input.push(input);
    deep.output.push(output);
    idx = last + 1;
    while (idx--) {
      key = keys[last - idx]; // Using [last - idx] to preserve order.
      value = input[key];
      if (typeof value === 'object' && value && deep.level < deep.max) {
        if (value.constructor === Object) {
          value = self(value, deep, filter);
        }
      }
      var _filter = filter || function () {
        return true;
      };
      if (_filter(key, value)) {
        output[key.toLowerCase()] = value;
      } else {
        output[key] = value;
      }
    }
    deep.level -= 1;
  } else {
    // Simple shallow copy
    idx = last + 1;
    while (idx--) {
      key = keys[last - idx]; // Using [last - idx] to preserve order.

      var _filter = filter || function () {
        return true;
      };
      if (_filter(key, value)) {
        output[key.toLowerCase()] = input[key];
      } else {
        output[key] = input[key];
      }
    }
  }
  return output;
};

// Thanks for sharing code: http://jsfiddle.net/cattail/NYNT5/

// classify object
var classof = function classof(o) {
  if (o === null) {
    return "null";
  }
  if (o === undefined) {
    return "undefined";
  }
  // I suppose Object.prototype.toString use obj.constructor.name
  // to generate string
  var className = Object.prototype.toString.call(o).slice(8, -1);
  return className;
};
var _references = [];
var _handlers = {
  // Handle regexp and date even in shallow.
  'RegExp': function (_RegExp) {
    function RegExp(_x) {
      return _RegExp.apply(this, arguments);
    }
    RegExp.toString = function () {
      return _RegExp.toString();
    };
    return RegExp;
  }(function (reg) {
    var flags = '';
    flags += reg.global ? 'g' : '';
    flags += reg.multiline ? 'm' : '';
    flags += reg.ignoreCase ? 'i' : '';
    return new RegExp(reg.source, flags);
  }),
  'Date': function (_Date) {
    function Date(_x2) {
      return _Date.apply(this, arguments);
    }
    Date.toString = function () {
      return _Date.toString();
    };
    return Date;
  }(function (date) {
    return new Date(+date);
  }),
  'Array': function Array(arr, shallow, filterFunc, cloneFunc) {
    var newArr = [],
      i;
    for (i = 0; i < arr.length; i++) {
      if (shallow) {
        newArr[i] = arr[i];
      } else {
        // handle circular reference
        if (_references.indexOf(arr[i]) !== -1) {
          continue;
        }

        // try to use clone function to copy value
        if (cloneFunc && arr[i]) {
          var clonedObject = cloneFunc(arr[i]);
          if (clonedObject) {
            newArr[i] = clonedObject;
            continue;
          }
        }
        var handler = _handlers[classof(arr[i])];
        if (handler) {
          _references.push(arr[i]);
          newArr[i] = handler(arr[i], false);
        } else {
          newArr[i] = arr[i];
        }
      }
    }
    return newArr;
  },
  'Object': function Object(obj, shallow, filterFunc, cloneFunc) {
    var newObj = {},
      prop,
      handler;
    for (prop in obj) {
      if (filterFunc && !filterFunc(prop)) {
        continue;
      }

      // escape prototype properties
      if (shallow) {
        newObj[prop] = obj[prop];
      } else {
        // handle circular reference
        if (_references.indexOf(obj[prop]) !== -1) {
          continue;
        }

        // try to use clone function to copy value
        if (cloneFunc && obj[prop]) {
          var clonedObject = cloneFunc(obj[prop], prop);
          if (clonedObject) {
            newObj[prop] = clonedObject;
            continue;
          }
        }

        // recursive
        handler = _handlers[classof(obj[prop])];
        if (handler) {
          _references.push(obj[prop]);
          newObj[prop] = handler(obj[prop], false, filterFunc, cloneFunc);
        } else {
          newObj[prop] = obj[prop];
        }
      }
    }
    return newObj;
  }
};

// Thanks for sharing code: https://gist.github.com/david-risney/af6f7912ea171b9076d3ba3ebd54a355
function _valueBreakpoint(parent, fullNamePath, feedback) {
  var name = fullNamePath[0];
  var childNamePath = fullNamePath.slice(1);
  var innerValue = parent[name];
  var childBreakpoints = [];
  function applyChildValueBreakpoints() {
    if (childNamePath.length > 0 && innerValue) {
      childBreakpoints.push(_valueBreakpoint(innerValue, childNamePath, feedback));
    }
  }
  applyChildValueBreakpoints();
  Object.defineProperty(parent, name, {
    get: function () {
      return innerValue;
    }.bind(this),
    set: function (newValue) {
      if (!childNamePath.length) {
        var valueChanged = false;
        var onCompareValue = feedback.onCompareValue;
        if (onCompareValue && onCompareValue(innerValue, newValue)) {
          _eval('debugger'); // use eval here to prevent optimize debugger keyword away

          valueChanged = true;
        }
      }
      innerValue = newValue;
      applyChildValueBreakpoints();
      if (valueChanged) {
        var onValueChanged = feedback.onValueChanged;
        if (onValueChanged) {
          onValueChanged(newValue);
        }
      }
    }.bind(this),
    enumerable: true,
    configurable: true
  });
}
var _originalValueOf = null;
function _enableNaNCatch(value) {
  if (value && !_originalValueOf) {
    _originalValueOf = Object.prototype.valueOf;
    Object.prototype.valueOf = function () {
      if (typeof this !== 'number') {
        throw new Error('Object is not a Number');
      }
      return _originalValueOf.call(this);
    };
  } else {
    Object.prototype.valueOf = _originalValueOf;
    _originalValueOf = null;
  }
}
function _clearTimeoutById(id, callbacks) {
  if (!id) {
    return;
  }
  var index = Utils$1.binarySearch(callbacks, timer => {
    return timer.id - id;
  });
  if (index === -1) {
    return;
  }
  callbacks.splice(index, 1);
}

/**
 * @class
 * The timer to replace the global setTimeout() function
 * @memberof BASE.THING
 */
let Timer$1 = class Timer {
  /**
   * The number of batch timeout callback in one frame.
   * @type {Number}
   * @private
   */

  // Timeout callback functions

  /**
   * Set timer callback function in batch mode.
   * @param {Function} callback The callback function.
   * @private
   */
  static setBatchTimeout(callback) {
    Timer$1.batchTimeoutCallbacks.push(callback);
  }

  /**
   * Set timeout callback function.
   * @param {Function} callback The callback function.
   * @param {Number} milliseconds The delay time in milliseconds.
   */
  static setTimeout(callback, milliseconds) {
    if (milliseconds === undefined) {
      Timer$1.directTimeoutCallbacks.push(callback);

      // Direct timeout would return nothing, due to we can not clear it
    } else {
      var id = ++Timer$1.id;
      Timer$1.timeoutCallbacks.push({
        id,
        callback,
        time: milliseconds / 1000
      });
      return id;
    }
  }

  /**
   * Clear timeout callback function.
   * @param {Number} id The timer id.
   */
  static clearTimeout(id) {
    _clearTimeoutById(id, Timer$1.timeoutCallbacks);
  }
  static update(deltaTime) {
    // Direct timeout ...
    var length = Timer$1.directTimeoutCallbacks.length;
    if (length) {
      // To prevent dead loop calling in callback functions, so we copy callback functions here
      var directTimeoutCallbacks = Timer$1.directTimeoutCallbacks.slice(0);
      Timer$1.directTimeoutCallbacks.splice(0, length);
      for (var _i = 0; _i < length; _i++) {
        directTimeoutCallbacks[_i]();
      }
    }

    // Delay timeout ...
    var timeoutCallbacks = Timer$1.timeoutCallbacks;
    for (var i = 0; i < timeoutCallbacks.length; i++) {
      var info = timeoutCallbacks[i];
      info.time -= deltaTime;
      if (info.time > 0) {
        continue;
      }
      timeoutCallbacks.splice(i--, 1);
      info.callback();
    }

    // Batch timeout ...
    if (Timer$1.batchTimeoutCallbacks.length) {
      var number = Math.min(Timer$1.batchTimeoutCallbacks.length, Timer$1.batchNumber);
      for (var _i2 = 0; _i2 < number; _i2++) {
        Timer$1.batchTimeoutCallbacks[_i2]();
      }
      Timer$1.batchTimeoutCallbacks.splice(0, number);
    }
  }
};

/**
 * @class Utils
 * Useful functions.
 * @memberof BASE.THING
 */
Timer$1.id = 0;
Timer$1.batchNumber = 100;
Timer$1.batchTimeoutCallbacks = [];
Timer$1.timeoutCallbacks = [];
Timer$1.directTimeoutCallbacks = [];
let Utils$1 = class Utils extends BaseUtils {
  /**
   * The log level type.
   * @type {LogLevelType}
   */

  static setBatchTimeoutNumber(value) {
    Timer$1.batchNumber = value;
  }
  static getBatchTimeoutNumber() {
    return Timer$1.batchNumber;
  }
  static setBatchTimeout(callback) {
    Timer$1.setBatchTimeout(callback);
  }

  /**
   * Set timeout callback function.
   * @param {Function} callback The callback function.
   * @param {Number} milliseconds The delay time in milliseconds.
   * @returns {Number} If milliseconds is undefined then return nothing and the timer can not be clear
   */
  static setTimeout(callback, milliseconds) {
    return Timer$1.setTimeout(callback, milliseconds);
  }

  /**
   * Clear timeout callback function.
   * @param {Function} callback The callback function.
   */
  static clearTimeout(id) {
    Timer$1.clearTimeout(id);
  }
  static update(deltaTime) {
    Timer$1.update(deltaTime);
  }

  /**
   * Disable/Enable console debug.
   * @type {Boolean}
   */
  static get disableDebug() {
    return console.debug != _consoleDebugFunc;
  }
  static set disableDebug(value) {
    if (value) {
      console.debug = function () {};
    } else {
      console.debug = _consoleDebugFunc;
    }
  }

  /**
   * Disable/Enable console log.
   * @type {Boolean}
   */
  static get disableLog() {
    return console.log != _consoleLogFunc;
  }
  static set disableLog(value) {
    if (value) {
      console.log = function () {};
    } else {
      console.log = _consoleLogFunc;
    }
  }

  /**
   * Disable/Enable console warn.
   * @type {Boolean}
   */
  static get disableWarn() {
    return console.warn != _consoleWarnFunc;
  }
  static set disableWarn(value) {
    if (value) {
      console.warn = function () {};
    } else {
      console.warn = _consoleWarnFunc;
    }
  }

  /**
   * Disable/Enable console error.
   * @type {Boolean}
   */
  static get disableError() {
    return console.error != _consoleErrorFunc;
  }
  static set disableError(value) {
    if (value) {
      console.error = function () {};
    } else {
      console.error = _consoleErrorFunc;
    }
  }

  /**
   * Disable/Enable console debug.
   * @type {Boolean}
   */
  static get disableDebug() {
    return console.debug != _consoleDebugFunc;
  }
  static set disableDebug(value) {
    if (value) {
      console.debug = function () {};
    } else {
      console.debug = _consoleDebugFunc;
    }
  }

  /**
   * Disable/Enable console time.
   * @type {Boolean}
   */
  static get disableTime() {
    return console.time != _consoleTimeFunc;
  }
  static set disableTime(value) {
    if (value) {
      console.time = function () {};
      console.timeEnd = function () {};
    } else {
      console.time = _consoleTimeFunc;
      console.timeEnd = _consoleTimeEndFunc;
    }
  }
  static parseObject(value, defaultValue) {
    if (defaultValue === void 0) {
      defaultValue = {};
    }
    if (Utils$1.isObject(value)) {
      return Utils$1.mergeObject({}, value, true);
    }
    return Utils$1.mergeObject({}, defaultValue);
  }
  static parseJSON(object) {
    if (Utils$1.isArrayBuffer(object)) {
      return JSON.parse(Utils$1.arrayBufferToString(object));
    } else if (Utils$1.isArray(object) || Utils$1.isUint8Array(object)) {
      return JSON.parse(Utils$1.bufferToString(object));
    } else {
      return JSON.parse(object);
    }
  }
  static getFunctionsFromObject(object) {
    var funcNames = [];
    var names_1 = Object.getOwnPropertyNames(Object.getPrototypeOf(object));
    var names_2 = Object.getOwnPropertyNames(Object.getPrototypeOf(object.__proto__));
    var names = names_1.concat(names_2);
    for (var name of names) {
      var method = object[name];
      if (!(method instanceof Function)) {
        continue;
      }
      if (name == 'constructor') {
        continue;
      }
      funcNames.push(name);
    }
    return funcNames.sort();
  }
  static getFunctionsFromClassType(classType) {
    return Utils$1.getFunctionsFromObject(new classType());
  }
  static getClassNameFromProto(proto) {
    return proto.constructor.className || proto.constructor.name;
  }
  static getClassNamesFromProto(proto) {
    var classNames = [];
    while (proto) {
      var className = Utils$1.getClassNameFromProto(proto);
      if (className != 'Object') {
        if (classNames.indexOf(className) === -1) {
          classNames.push(className);
        }
      }
      proto = proto.__proto__;
    }
    return classNames;
  }

  /**
   * Output debug log.
   */
  static debug() {
    if (Utils$1.logLevelType & LogLevelType.Debug) {
      console.debug.apply(console, arguments);
    }
  }

  /**
   * Output log.
   */
  static log() {
    if (Utils$1.logLevelType & LogLevelType.Log) {
      console.log.apply(console, arguments);
    }
  }

  /**
   * Output warn log.
   */
  static warn() {
    if (Utils$1.logLevelType & LogLevelType.Warn) {
      console.warn.apply(console, arguments);
    }
  }

  /**
   * Output error log.
   */
  static error() {
    if (Utils$1.logLevelType & LogLevelType.Error) {
      console.error.apply(console, arguments);
    }
  }
  static getCurrentTime() {
    return _timer.now() / 1000;
  }
  static getElapsedTime(time) {
    return Utils$1.getCurrentTime() - time;
  }
  static getCurrentTimeMilliseconds() {
    return _timer.now();
  }
  static getElapsedTimeMilliseconds(time) {
    return Utils$1.getCurrentTimeMilliseconds() - time;
  }

  /**
   * Set data/value break point.
   * @param {Object} object The object.
   * @param {String|Array<String>} attributes The attribute name(s) of object.
   * @param {Function} callback The value compare callback function, true indicates break it, null indicates clear it.
   */
  static setValueBreakpoint(object, attributes, callback) {
    if (callback === void 0) {
      callback = (a, b) => {
        return a != b;
      };
    }
    var feedback = {
      onCompareValue: callback,
      onValueChanged: function onValueChanged() {}
    };
    var reuslt = {
      onValueChanged: function onValueChanged(callback) {
        feedback.onValueChanged = callback;
      }
    };
    if (Utils$1.isArray(attributes)) {
      attributes.forEach(name => {
        _valueBreakpoint(object, [name], feedback);
      });
    } else if (Utils$1.isString(attributes)) {
      _valueBreakpoint(object, [attributes], feedback);
    }
    return reuslt;
  }
  static enableNaNCatch(value) {
    if (value === void 0) {
      value = true;
    }
    _enableNaNCatch(value);
  }

  /**
   * Get the union keys of 2 objects.
   * @param {Object} obj1 The first object.
   * @param {Object} obj2 The second object.
   * @return {Array<String>}
   */
  static getUnionKeys(obj1, obj2) {
    var keys1 = Object.keys(obj1);
    var keys2 = Object.keys(obj2);
    for (var i = 0, l = keys2.length; i < l; i++) {
      var key = keys2[i];
      if (keys1.indexOf(key) == -1) {
        keys1.push(key);
      }
    }
    return keys1;
  }
  static formatMoney(value, fixedNumber) {
    if (fixedNumber === void 0) {
      fixedNumber = 0;
    }
    return value.toFixed(fixedNumber).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  static formatByteSize(value, fixedNumber, suffixName) {
    if (fixedNumber === void 0) {
      fixedNumber = 2;
    }
    if (suffixName === void 0) {
      suffixName = 'B';
    }
    if (value > 1000 * 1000 * 1000 * 1000) {
      return Utils$1.formatMoney(value / (1000 * 1000 * 1000 * 1000), fixedNumber) + " T" + suffixName;
    } else if (value > 1000 * 1000 * 1000) {
      return Utils$1.formatMoney(value / (1000 * 1000 * 1000), fixedNumber) + " G" + suffixName;
    } else if (value > 1000 * 1000) {
      return Utils$1.formatMoney(value / (1000 * 1000), fixedNumber) + " M" + suffixName;
    } else if (value > 1000) {
      return Utils$1.formatMoney(value / 1000, fixedNumber) + " K" + suffixName;
    } else {
      if (suffixName) {
        return Utils$1.formatMoney(value, fixedNumber) + " " + suffixName;
      } else {
        return Utils$1.formatMoney(value, fixedNumber);
      }
    }
  }
  static allocateArray(classType, number) {
    if (classType) {
      return null;
    }
    var elements = [];
    for (var i = 0; i < number; i++) {
      elements.push(new classType());
    }
    return elements;
  }
  static getArrayLength(arr) {
    if (!Utils$1.isArray(arr)) {
      return 0;
    }
    return arr.length;
  }

  /**
   * Check whether it's empty array.
   * @return {Boolean}
   */
  static isEmptyArray(arr) {
    return Utils$1.isType('Array')(arr) && arr.length == 0;
  }
  static pushToArray(arr, element) {
    if (!element) {
      return;
    }
    var index = arr.indexOf(element);
    if (index === -1) {
      arr.push(element);
    }
  }
  static removeFromArray(arr, element) {
    if (!arr) {
      return false;
    }
    var index = arr.indexOf(element);
    if (index === -1) {
      return false;
    }
    arr._removeAt(index);
    return true;
  }
  static getIndexFromArrays(value, arrs) {
    for (var i = 0; i < arrs.length; i++) {
      var index = arrs[i].indexOf(value);
      if (index !== -1) {
        return index;
      }
    }
    return -1;
  }
  static combineArray(object, key, elements) {
    object[key] = object[key] || [];
    if (Utils$1.isArray(elements)) {
      object[key].concat(elements);
    } else {
      object[key].push(elements);
    }
  }

  /**
   * Convert string to lower case.
   * @param {String} s string
   * @return {String}
   */
  static toLowerCase(s) {
    return s ? s.toLowerCase() : '';
  }

  /**
   * Convert string to upper case.
   * @param {String} s string
   * @return {String}
   */
  static toUpperCase(s) {
    return s ? s.toUpperCase() : '';
  }

  /**
   * Add '...' to long string as suffix.
   * @param {String} str The string.
   * @param {Number} len The string limited length.
   * @return {String}
   */
  static beautySub(str, len) {
    var reg = /[\u4e00-\u9fa5]/g,
      // Match chinese
      slice = str.substring(0, len),
      chineseCharNum = ~~(slice.match(reg) && slice.match(reg).length),
      realen = slice.length * 2 - chineseCharNum;
    return str.substr(0, realen) + (realen < str.length ? "..." : "");
  }

  /**
   * Convert all memeber's keys to lower case.
   * @param {Object} input The js object.
   * @param {Boolean|Number} deep? recursive or deep level number.
   * @param {Function} filter? key filter callback function
   * @return {Object}
   * @example
   * var obj = { 'Name': 'GO', 'Info': { 'Year': 'Hello 2019','Verson':'xxxx' } };
   * // {"name":"ThingJS","info":{"Year":"Hello 2019","Verson":"xxxx"}}
   * console.log(THING.Utils.objectKeysToLowerCase(obj));
   * // {"name":"ThingJS","info":{"year":"Hello 2019","verson":"xxxx"}}
   * console.log(THING.Utils.objectKeysToLowerCase(obj,true));
   * console.log(THING.Utils.objectKeysToLowerCase(obj, true, function (key) {
   * 	if (key == 'Year') { return false; } else { return true; }
   * }));
   */
  static objectKeysToLowerCase(input, deep, filter) {
    return _objectKeysToLowerCase(input, deep, filter);
  }
  static fontSizeToPixelSize(pt) {
    return pt / 72 * 96;
  }
  static pixelSizeToFontSize(px) {
    return px / 96 * 72;
  }
  static isEmptyObject(obj) {
    return !Object.keys(obj).length;
  }
  static equalsObject(o1, o2) {
    for (var key in o1) {
      if (o1[key] != o2[key]) {
        return false;
      }
    }
    return true;
  }
  static clearObject(obj) {
    for (var key in obj) {
      delete obj[key];
    }
  }

  /**
   * Clone JS object.
   * @param {Object} obj js object.
   * @param {Boolean} [shallow=true]? True indicates just use reference for all values.
   * @return {Object}
   */
  static cloneObject(obj, shallow, filterFunc, cloneFunc) {
    if (shallow === void 0) {
      shallow = true;
    }
    if (filterFunc === void 0) {
      filterFunc = null;
    }
    if (cloneFunc === void 0) {
      cloneFunc = null;
    }
    // Thanks for sharing code: http://jsfiddle.net/cattail/NYNT5/
    _references.length = 0;
    var handler = _handlers[classof(obj)];
    return handler ? handler(obj, shallow, filterFunc, cloneFunc) : obj;
  }

  /**
   * Copy JS object in referenced mode.
   * @param {Object} target The target object.
   * @param {Object} source The source object.
   * @return {Object} The referenced of target object.
   */
  static copyObject(target, source) {
    if (target === source) {
      return target;
    }
    if (source) {
      Utils$1.clearObject(target);
      for (var key in source) {
        var value = source[key];
        if (value) {
          if (Utils$1.isObject(value)) {
            target[key] = {};
            Utils$1.copyObject(target[key], value);
          } else {
            target[key] = value;
          }
        } else {
          target[key] = value;
        }
      }
    }
    return target;
  }
  static copyUint8Array(source) {
    var dst = new ArrayBuffer(source.byteLength);
    var buffer = new Uint8Array(dst);
    buffer.set(new Uint8Array(source));
    return buffer;
  }

  /**
   * Merge object.
   * @param {object} target The target object.
   * @param {object} source The source object.
   * @param {boolean} overwrite? True indicates overwrite values.
   * @return {object}
   * @example
   * var obj1 = { 'name': 'JS', 'year': '2018' };
   * var obj2 = { 'version': 'xxx', 'year': '2019' };
   * // {"name":"JS","year":"2018","version":"xxx"}
   * console.log(THING.Utils.mergeObject(obj1,obj2))
   *
   * // {"name":"JS","year":"2019","version":"xxx"}
   * console.log(THING.Utils.mergeObject(obj1,obj2,true))
   */
  static mergeObject(target, source, overwrite) {
    if (!source) {
      return Utils$1.cloneObject(target);
    }
    if (!Utils$1.isObject(source) || !Utils$1.isObject(target)) {
      return overwrite ? Utils$1.cloneObject(source) : target;
    }
    for (var key in source) {
      var targetProp = target[key];
      var sourceProp = source[key];

      // Continue to merge sub objects
      if (Utils$1.isObject(sourceProp) && Utils$1.isObject(targetProp)) {
        Utils$1.mergeObject(targetProp, sourceProp, overwrite);
      }
      // Overwrite attribute of target when it's not exist
      else if (overwrite || !(key in target)) {
        target[key] = Utils$1.cloneObject(source[key], true);
      }
    }
    return target;
  }
  static assignValues(target, source) {
    if (Utils$1.isArray(source)) {
      source.forEach(src => {
        Utils$1.assignValues(target, src);
      });
    } else {
      for (var key in source) {
        if (target[key] !== undefined) {
          continue;
        }
        target[key] = source[key];
      }
    }
  }
  static colorToHex(value) {
    return value[0] * 255 << 16 ^ value[1] * 255 << 8 ^ value[2] * 255 << 0;
  }
  static colorToHexString(value) {
    if (!value) {
      return null;
    }
    return '#' + ('000000' + Utils$1.colorToHex(value).toString(16)).slice(-6);
  }
  static equalsColor(c1, c2, epsilon) {
    if (epsilon === void 0) {
      epsilon = 0.0001;
    }
    if (!Utils$1.isArray(c1) || !Utils$1.isArray(c2)) {
      return false;
    }
    if (Math.abs(c1[0] - c2[0]) > epsilon) {
      return false;
    }
    if (Math.abs(c1[1] - c2[1]) > epsilon) {
      return false;
    }
    if (Math.abs(c1[2] - c2[2]) > epsilon) {
      return false;
    }
    return true;
  }
  static isColorString(value) {
    // [0~1, 0~1, 0~1]
    if (Utils$1.isArray(value)) {
      return true;
    }

    // 0x000000~0xFFFFFF
    if (Utils$1.isNumber(value)) {
      return true;
    }

    // String format
    if (Utils$1.isString(value)) {
      // '#FFFFFF'
      if (value[0] == '#') {
        return true;
      }
      // rgb(r, g, b)
      else if (value.startsWith('rgb(')) {
        return true;
      }
      // rgba(r, g, b, a)
      else if (value.startsWith('rgba(')) {
        return true;
      }
    }
    if (_colorKeywords[value.toLowerCase()] !== undefined) {
      return true;
    }
    return false;
  }
  static parseColor(value, defaultValue) {
    // [0~1, 0~1, 0~1]
    if (Utils$1.isArray(value)) {
      return value;
    }
    // 0x000000~0xFFFFFF
    else if (Utils$1.isNumber(value)) {
      return _parseColorFromHex(value);
    }
    // String: '#FFFFFF'/'rgb(r, g, b)'
    else if (Utils$1.isString(value)) {
      // '#FFFFFF'
      if (value[0] == '#') {
        return _parseColorFromHex(parseInt(value.substr(1), 16));
      }
      // rgb(r, g, b)
      else if (value.startsWith('rgb(')) {
        var colors = value.substring(4).split(',');
        if (colors.length === 3) {
          var r = parseInt(colors[0]);
          var g = parseInt(colors[1]);
          var b = parseInt(colors[2]._trimRight(' )'));
          return [r / 255, g / 255, b / 255];
        }
      }
      // rgba(r, g, b, a)
      else if (value.startsWith('rgba(')) {
        var colors = value.substring(5).split(',');
        if (colors.length === 4) {
          var r = parseInt(colors[0]);
          var g = parseInt(colors[1]);
          var b = parseInt(colors[2]);
          // Alpha range is [0, 1]
          var a = parseFloat(colors[3]._trimRight(' )'));
          return [r / 255, g / 255, b / 255, a];
        }
      }
      // Other string, try to convert it
      else {
        if (isNaN(value)) {
          var hexValue = _colorKeywords[value.toLowerCase()];
          if (hexValue !== undefined) {
            return _parseColorFromHex(hexValue);
          }
        } else {
          return _parseColorFromHex(parseInt(value));
        }
      }
    }
    return defaultValue;
  }
  static parseValueFromTypes(types, value, defaultValue) {
    var keys = Object.keys(types);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (types[key] == value) {
        return key;
      }
    }
    if (defaultValue !== undefined) {
      return defaultValue;
    }
    return value;
  }
  static toColorHexString(value, defaultValue) {
    var color = Utils$1.parseColor(value, defaultValue);
    var r = Number(Math.round(color[2] * 255)).toString(16);
    var g = Number(Math.round(color[1] * 255)).toString(16);
    var b = Number(Math.round(color[0] * 255)).toString(16);
    return '#' + r + g + b;
  }
  static hasAttribute(object, key, separator) {
    if (separator === void 0) {
      separator = '/';
    }
    return Utils$1.getAttribute(object, key, separator) !== undefined;
  }
  static getAttribute(object, key, separator) {
    if (separator === void 0) {
      separator = '/';
    }
    if (!object || !key) {
      return undefined;
    }

    // Try to find attribute from object
    var keys = key.split(separator);
    if (keys.length) {
      for (var i = 0, l = keys.length; i < l; i++) {
        var value = object[keys[i]];
        if (value === undefined) {
          return undefined;
        }
        object = value;
      }
    }
    return object;
  }
  static setAttribute(object, key, value, separator) {
    if (separator === void 0) {
      separator = '/';
    }
    return function (key) {
      if (!object || !key) {
        return null;
      }
      var keys = key.split(separator);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (i == keys.length - 1) {
          object[key] = value;
          break;
        }
        object[key] = object[key] || {};
        object = object[key];
      }
      return value;
    }(key);
  }
  static setAttributes(object, attributes, overwrite) {
    if (overwrite === void 0) {
      overwrite = true;
    }
    var prevAttributes = {};
    for (var key in attributes) {
      var objectValue = object[key];
      if (objectValue !== undefined) {
        if (!overwrite) {
          continue;
        }
        prevAttributes[key] = objectValue;
      }
      object[key] = attributes[key];
    }
    return prevAttributes;
  }
  static setAttributeIfExist(target, targetKey, source, compareFunc, sourceKey) {
    if (compareFunc === void 0) {
      compareFunc = v => {
        return v !== undefined;
      };
    }
    if (sourceKey === void 0) {
      sourceKey = targetKey;
    }
    var sourceValue = source[sourceKey];
    if (sourceValue === undefined) {
      return;
    }
    if (!compareFunc(sourceValue)) {
      return;
    }
    target[targetKey] = sourceValue;
  }
  static swapObjectAttribute(object, key1, key2) {
    var v1 = object[key1];
    object[key1] = object[key2];
    object[key2] = v1;
    return object;
  }
  static binarySearch(array, target) {
    var l = 0,
      r = array.length - 1;
    if (Utils$1.isFunction(target)) {
      while (l <= r) {
        var mid = Math.floor((l + r) / 2);
        if (target(array[mid]) === 0) {
          return mid;
        } else if (target(array[mid]) > 0) {
          r = mid - 1;
        } else {
          l = mid + 1;
        }
      }
    } else {
      while (l <= r) {
        var mid = Math.floor((l + r) / 2);
        if (target === array[mid]) {
          return mid;
        } else if (target < array[mid]) {
          r = mid - 1;
        } else {
          l = mid + 1;
        }
      }
    }
    return -1;
  }
  static binaryBound(array, target, compareFunc) {
    if (!array.length) {
      return 0;
    }
    var i = 0,
      j = array.length - 1;
    if (compareFunc) {
      while (i < j - 1) {
        var m = Math.floor((i + j) / 2);
        var ret = compareFunc(array[m], target);
        if (ret == 0) {
          return m;
        }
        if (ret < 0) {
          i = m;
        } else {
          j = m;
        }
      }
      if (compareFunc(array[i], target) > 0) {
        return i;
      } else if (compareFunc(array[j], target) > 0) {
        return j;
      }
    } else {
      while (i < j - 1) {
        var m = Math.floor((i + j) / 2);
        if (array[m] === target) {
          return m;
        }
        if (array[m] < target) {
          i = m;
        } else {
          j = m;
        }
      }
      if (array[i] > target) {
        return i;
      } else if (array[j] > target) {
        return j;
      }
    }
    return -1;
  }
  static insertBinaryBound(array, target, compareFunc) {
    var index = Utils$1.binaryBound(array, target, compareFunc);
    if (index === -1) {
      array.push(target);
    } else {
      array.splice(index, 0, target);
    }
    return array;
  }

  // Thanks for sharing code: https://blog.csdn.net/hupian1989/article/details/80920324
  static throttling(fn, wait) {
    var timer;
    var context, args;
    var run = () => {
      timer = setTimeout(() => {
        fn.apply(context, args);
        clearTimeout(timer);
        timer = null;
      }, wait);
    };
    return function () {
      context = this;
      args = arguments;
      if (!timer) {
        run();
      }
    };
  }
  static getMD5CodeFromString(string) {
    return sparkMd5$1.exports.hash(string);
  }
  static getMD5CodeFromBuffer(buffer, progress) {
    return new Promise((resolve, reject) => {
      var md5 = new SparkMD5();
      _readChunked(buffer,
      // Reading
      (chunk, offs, total) => {
        md5.appendBinary(chunk);
        if (progress) {
          progress(offs / total);
        }
      },
      // Error
      err => {
        if (err) {
          reject(err);
        } else {
          // TODO: Handle errors
          var hash = md5.end();
          resolve(hash);
        }
      });
    });
  }
  static applyNew(ctor, args) {
    if (!ctor) {
      return null;
    }
    var applyArgs = [{}].concat(args || []);
    var f = Function.prototype.bind.apply(ctor, applyArgs);
    return new f();
  }
  static itoa(i) {
    return String.fromCharCode(i);
  }
  static atoi(a) {
    return a.charCodeAt();
  }
  static base64ToBlob(base64Str) {
    var bString = atob(base64Str);
    var len = bString.length;
    var arr = new Uint8Array(len);
    while (len--) {
      arr[len] = bString.charCodeAt(len);
    }
    return arr;
  }
  static blobToBase64(bytes) {
    var bString = "";
    for (var i = 0, len = bytes.length; i < len; ++i) {
      bString += String.fromCharCode(bytes[i]);
    }
    return btoa(bString);
  }
  static arrayBufferToString(buffer) {
    var string = String.fromCharCode.apply(null, new Uint8Array(buffer));
    return decodeURIComponent(escape(string));
  }
  static stringToArrayBuffer(string) {
    var buf = new ArrayBuffer(string.length);
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = string.length; i < strLen; i++) {
      bufView[i] = string.charCodeAt(i);
    }
    return buf;
  }
  static arrayBufferToUtf16(buffer) {
    return String.fromCharCode.apply(null, new Uint16Array(buffer));
  }
  static utf16ToArrayBuffer(string) {
    var buf = new ArrayBuffer(string.length * 2);
    var bufView = new Uint16Array(buf);
    for (var i = 0, strLen = string.length; i < strLen; i++) {
      bufView[i] = string.charCodeAt(i);
    }
    return buf;
  }
  static arrayBufferToBlob(buffer, options) {
    return new Blob([new Uint8Array(buffer, 0, buffer.byteLength)], options);
  }
  static blobToArrayBuffer(blob) {
    return new Response(blob).arrayBuffer();
  }
  static bufferToBlob(buffer, options) {
    return new Blob([buffer], options);
  }
  static blobToBuffer(blob) {
    return new Promise((resolve, reject) => {
      new Response(blob).arrayBuffer().then(buffer => {
        resolve(new Uint8Array(buffer));
      });
    });
  }
  static stringToBuffer(string) {
    return textEncoder.encode(string);
  }
  static bufferToString(buffer) {
    return textDecoder.decode(buffer);
  }
  static syncOptions(target, options, values) {
    if (values === void 0) {
      values = {};
    }
    if (!options) {
      return false;
    }
    for (var key in values) {
      var value = Utils$1.parseValue(options[key], values[key]);
      if (Utils$1.isNull(value)) {
        continue;
      }
      target[key] = value;
    }
    return true;
  }
  static _break() {
    _eval('debugger');
  }
  static eval(script) {
    _eval(script);
  }
  static scanf(string, format) {
    return sscanf(string, format);
  }
  static getMacros() {
    return _macros;
  }

  /**
   * Add factory.
   * @param {Object} factory The factory.
   * @param {String} name The unique name, we can replace factory by name later.
   * @param {Number} priority The priority, create object from high priority to low.
   */
  static addFactory(factory, name, priority) {
    if (name === void 0) {
      name = '';
    }
    if (priority === void 0) {
      priority = 0;
    }
    if (!factory) {
      return;
    }
    _factories.push({
      factory,
      name,
      priority,
      index: _factories.length
    });
    _factories.sort((a, b) => {
      if (a.priority != b.priority) {
        return a.priority > b.priority;
      }
      return a.index > b.index;
    });
  }

  /**
   * Add factories.
   * @param {Array<Object>} factories The factories.
   */
  static addFactories(factories) {
    factories.forEach(factory => {
      Utils$1.addFactory(factory);
    });
  }

  /**
   * Get the factories.
   * @type {Array<Object>}
   */
  static getFactories() {
    return _factories.map(info => {
      return info.factory;
    });
  }

  /**
   * Set factory by name.
   * @param {Object} factory The factory.
   * @param {String} name The unique name.
   * @return {Boolean}
   */
  static setFactory(factory, name) {
    for (var i = 0; i < _factories.length; i++) {
      if (_factories[i].name == name) {
        _factories[i].factory = factory;
        return true;
      }
    }
    return false;
  }

  /**
   * Create object from factories.
   * @param {String} type The type name.
   * @param {Object} options The options.
   * @return {Object}
   */
  static createObject(type, options) {
    if (options === void 0) {
      options = _defaultOptions;
    }
    for (var i = 0, l = _factories.length; i < l; i++) {
      var factory = _factories[i].factory;
      var object = factory.createObject(type, options);
      if (object) {
        return object;
      }
    }
    Utils$1.error("Create (type: '" + type + "') object failed", options);
    return null;
  }
  static getGlobal() {
    return _global;
  }
  static registerClass(clsName, cls, out) {
    if (!clsName) {
      return false;
    }
    _registeredClasses[clsName] = cls;
    if (out) {
      if (!out[clsName]) {
        out[clsName] = cls;
      }
    }
    return true;
  }
  static registerClasses(classes, out) {
    for (var key in classes) {
      this.registerClass(key, classes[key], out);
    }
  }
  static getRegisteredClass(name) {
    var cls = _registeredClasses[name];
    if (cls) {
      return cls;
    }
    return null;
  }
  static getRegisteredClasses() {
    return _registeredClasses;
  }
  static regsiterVariable(key, value) {
    _registeredVariables[key] = value;
  }
  static unregsiterVariable(key) {
    delete _registeredVariables[key];
  }
  static getRegsiteredVariable(key) {
    return _registeredVariables[key];
  }
  static makeCancelablePromise(promise) {
    return cancelable(promise);
  }
  static isNativeFunction(func) {
    if (!Utils$1.isFunction(func)) {
      return false;
    }
    return func.toString() === 'function toString() { [native code] }';
  }
  static bindObjectProperty(object, accessor, name) {
    Object.defineProperty(object, name, {
      get: function get() {
        return accessor[name];
      },
      set: function set(value) {
        accessor[name] = value;
      }
    });
  }
};
Utils$1.className = 'Utils';
Utils$1.logLevelType = LogLevelType.All;
var _consoleDebugFunc = console.debug;
var _consoleLogFunc = console.log;
var _consoleWarnFunc = console.warn;
var _consoleErrorFunc = console.error;
var _consoleTimeFunc = console.time;
var _consoleTimeEndFunc = console.timeEnd;

// Define other useful attributes.
Object.defineProperties(Utils$1, {});

// The key to generate code
var _key = Utils$1.stringToBuffer("iedkd*3349k3^d0343j8193<L-&");

// [] is faster than Uint8Array in Chrome
var s = [],
  i$1,
  j = 0,
  x;
for (i$1 = 0; i$1 < 256; i$1++) {
  s[i$1] = i$1;
}
for (i$1 = 0; i$1 < 256; i$1++) {
  j = (j + s[i$1] + _key[i$1 % _key.length]) % 256;
  x = s[i$1];
  s[i$1] = s[j];
  s[j] = x;
}
var _s = s;
var _i = 0;
var _j = 0;

// Convert text to array.
var _text2Array = function _text2Array(plainText) {
  var bytes = plainText.length;
  var cipherText = new Uint8Array(bytes);
  var x,
    y,
    p,
    i = _i,
    j = _j,
    s = _s.slice(0);
  for (p = 0; p < bytes; p++) {
    i = (i + 1) % 256;
    x = s[i];
    j = (j + x) % 256;
    y = s[j];
    s[i] = y;
    s[j] = x;
    cipherText[p] = plainText[p] ^ s[(x + y) % 256];
  }
  return cipherText;
};

/**
 * @class
 * String <-> Array decoder.
 * @memberof BASE.THING
 */
class StringEncoder {
  static toArray(ptext) {
    var plainText = ptext;
    if (Utils$1.isType('String')(ptext)) {
      // @ts-ignore
      plainText = Utils$1.bufferToString(ptext);
    }
    if (Utils$1.isType('Array')(ptext)) {
      plainText = new Uint8Array(ptext);
    }
    if (!Utils$1.isType('Uint8Array')(plainText)) return null;
    return _text2Array(plainText);
  }
  static toText(a) {
    if (Utils$1.isString(a)) {
      a = a.split(',').map(v => {
        return parseInt(v);
      });
    }
    var _a = StringEncoder.toArray(a);
    if (!_a) {
      return null;
    }
    return Utils$1.bufferToString(_a);
  }
}

// Converts an array of arguments into a key value object

// Convenience helper function to find embedded number value in key
function getEmbeddedKeyValue(key) {
  const index = key.search(/[0-9]/);
  return index === -1 ? null : {
    key: key.slice(0, index),
    value: key.slice(index)
  };
}
var commandLineParser = function ({
  booleanKeys = [],
  allowKeyGrouping = false,
  allowEmbeddedValues = false,
  args = process.argv.slice(2)
} = {}) {
  return args.reduce((argsObjInReduction, arg, index, args) => {
    const isArgKey = arg.length > 0 && arg[0] === '-';
    let isArgValue = false;

    // Replace any previously undefined values for arg keys with current arg key and value,
    // or true if the current arg also starts with a dash and is presumed to be another key.
    argsObjInReduction = Object.keys(argsObjInReduction).reduce((argsObjInUndefinedReplacement, argKey) => {
      let argValue = argsObjInReduction[argKey];
      if (argValue === undefined) {
        argValue = isArgKey ? true : arg;
        isArgValue = !isArgKey;
      }
      return Object.assign({}, argsObjInUndefinedReplacement, {
        [argKey]: argValue
      });
    }, {});

    // If argument is not a key and not used as a value for previous key, collect it as an extra arg.
    if (!isArgKey && !isArgValue) {
      argsObjInReduction = Object.assign({}, argsObjInReduction, {
        _args: (argsObjInReduction._args || []).concat(arg)
      });
    }

    // If argument is a key, check to see if it has an embedded value.
    // If no embedded value, check to see if it's the last arg, or a group of keys, or a boolean key, and if so, set to true.
    // Otherwise set its value temporarily to undefined to be replaced later with next arg or true.
    if (isArgKey) {
      const isArgGroupKey = allowKeyGrouping && arg.length > 2 && arg[0] === '-' && arg[1] !== '-';
      let trimmedKey = arg // remove leading dashes, trim space, and convert any embedded dashes or spaces to camelCase
      .replace(/^-*/g, '').trim().replace(/(-+|\s+)\w/g, function (g) {
        return g[g.length - 1].toUpperCase();
      });
      let value;
      const embeddedValueObject = allowEmbeddedValues && getEmbeddedKeyValue(trimmedKey);
      if (embeddedValueObject) {
        trimmedKey = embeddedValueObject.key;
        value = embeddedValueObject.value;
      } else if (index === args.length - 1 || isArgGroupKey || booleanKeys.indexOf(trimmedKey) !== -1) {
        value = true;
      } else {
        value = undefined;
      }
      const keys = trimmedKey ? isArgGroupKey ? Array.from(trimmedKey) : [trimmedKey] : [];
      keys.forEach(key => {
        argsObjInReduction = Object.assign({}, argsObjInReduction, {
          [key]: value
        });
      });
    }
    return argsObjInReduction;
  }, {});
};

/**
 * @class ArgumentParser
 * The argument parser.
 * @memberof BASE.THING
 */
class ArgumentParser {
  /**
   * constructor.
   */
  constructor() {
    this._args = {};
    this._options = [];
  }

  /**
   * Clear.
   */
  clear() {
    this._args = {};
    this._options = [];
  }

  /**
   * Parse arguments from string.
   * @param {String} args The arguments in string type.
   * @return {BASE.THING.ArgumentParser}
   */
  parse(args) {
    this.clear();

    // Parse command line arguments
    var values = commandLineParser({
      args: args.split(' ')
    });

    // Get keys and values
    for (var key in values) {
      if (key == '_args') {
        continue;
      }

      // It's key and value format
      if (key.indexOf('=') !== -1) {
        var keys = key.split('=');
        if (keys[1]) {
          this._args[keys[0]] = keys[1];
        } else {
          this._args[keys[0]] = true;
        }
      }
      // Only key format
      else {
        this._args[key] = true;
      }
    }

    // Get options
    this._options = values['_args'] || this._options;
    return this;
  }

  // #region Accessor

  /**
   * Get the arguments.
   * @type {Object}
   */
  get args() {
    return this._args;
  }

  /**
   * Get the options.
   * @type {Array<String>}
   */
  get options() {
    return this._options;
  }

  // #endregion
}

/**
 * @class ArrayProxy
 * The array proxy.
 * @memberof BASE.THING
 */
class ArrayProxy {
  constructor(array, onUpdateValue) {
    if (array === void 0) {
      array = [];
    }
    if (onUpdateValue === void 0) {
      onUpdateValue = null;
    }
    this._array = array.slice(0);
    this._onUpdateValue = onUpdateValue;
    var arrayChangeHandler = {
      get: (target, property) => {
        // property is index in this case
        return target[property];
      },
      set: (target, property, value, receiver) => {
        target[property] = value;
        if (this._onUpdateValue) {
          this._onUpdateValue({
            data: value
          });
        }

        // you have to return true to accept the changes
        return true;
      }
    };
    var proxy = new Proxy(this._array, arrayChangeHandler);
    Object.defineProperty(proxy, 'customFormatters', {
      enumerable: false,
      configurable: false,
      get: () => {
        return ['object', {
          object: this._array.slice(0)
        }];
      }
    });
    return proxy;
  }
  copy(value) {
    this._array = value.slice(0);
    if (this._onUpdateValue) {
      this._onUpdateValue();
    }
  }
}

var esprima$2 = {exports: {}};

(function (module, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
    /* istanbul ignore next */
    module.exports = factory();
  })(commonjsGlobal, function () {
    return (/******/function (modules) {
        // webpackBootstrap
        /******/ // The module cache
        /******/
        var installedModules = {};

        /******/ // The require function
        /******/
        function __webpack_require__(moduleId) {
          /******/ // Check if module is in cache
          /* istanbul ignore if */
          /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports;

          /******/ // Create a new module (and put it into the cache)
          /******/
          var module = installedModules[moduleId] = {
            /******/exports: {},
            /******/id: moduleId,
            /******/loaded: false
            /******/
          };

          /******/ // Execute the module function
          /******/
          modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

          /******/ // Flag the module as loaded
          /******/
          module.loaded = true;

          /******/ // Return the exports of the module
          /******/
          return module.exports;
          /******/
        }

        /******/ // expose the modules object (__webpack_modules__)
        /******/
        __webpack_require__.m = modules;

        /******/ // expose the module cache
        /******/
        __webpack_require__.c = installedModules;

        /******/ // __webpack_public_path__
        /******/
        __webpack_require__.p = "";

        /******/ // Load entry module and return exports
        /******/
        return __webpack_require__(0);
        /******/
      }
      /************************************************************************/
      /******/([/* 0 */
      /***/function (module, exports, __webpack_require__) {

        /*
          Copyright JS Foundation and other contributors, https://js.foundation/
        	  Redistribution and use in source and binary forms, with or without
          modification, are permitted provided that the following conditions are met:
        	    * Redistributions of source code must retain the above copyright
              notice, this list of conditions and the following disclaimer.
            * Redistributions in binary form must reproduce the above copyright
              notice, this list of conditions and the following disclaimer in the
              documentation and/or other materials provided with the distribution.
        	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
          AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
          IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
          ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
          DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
          (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
          LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
          ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
          THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var comment_handler_1 = __webpack_require__(1);
        var jsx_parser_1 = __webpack_require__(3);
        var parser_1 = __webpack_require__(8);
        var tokenizer_1 = __webpack_require__(15);
        function parse(code, options, delegate) {
          var commentHandler = null;
          var proxyDelegate = function (node, metadata) {
            if (delegate) {
              delegate(node, metadata);
            }
            if (commentHandler) {
              commentHandler.visit(node, metadata);
            }
          };
          var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;
          var collectComment = false;
          if (options) {
            collectComment = typeof options.comment === 'boolean' && options.comment;
            var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;
            if (collectComment || attachComment) {
              commentHandler = new comment_handler_1.CommentHandler();
              commentHandler.attach = attachComment;
              options.comment = true;
              parserDelegate = proxyDelegate;
            }
          }
          var isModule = false;
          if (options && typeof options.sourceType === 'string') {
            isModule = options.sourceType === 'module';
          }
          var parser;
          if (options && typeof options.jsx === 'boolean' && options.jsx) {
            parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
          } else {
            parser = new parser_1.Parser(code, options, parserDelegate);
          }
          var program = isModule ? parser.parseModule() : parser.parseScript();
          var ast = program;
          if (collectComment && commentHandler) {
            ast.comments = commentHandler.comments;
          }
          if (parser.config.tokens) {
            ast.tokens = parser.tokens;
          }
          if (parser.config.tolerant) {
            ast.errors = parser.errorHandler.errors;
          }
          return ast;
        }
        exports.parse = parse;
        function parseModule(code, options, delegate) {
          var parsingOptions = options || {};
          parsingOptions.sourceType = 'module';
          return parse(code, parsingOptions, delegate);
        }
        exports.parseModule = parseModule;
        function parseScript(code, options, delegate) {
          var parsingOptions = options || {};
          parsingOptions.sourceType = 'script';
          return parse(code, parsingOptions, delegate);
        }
        exports.parseScript = parseScript;
        function tokenize(code, options, delegate) {
          var tokenizer = new tokenizer_1.Tokenizer(code, options);
          var tokens;
          tokens = [];
          try {
            while (true) {
              var token = tokenizer.getNextToken();
              if (!token) {
                break;
              }
              if (delegate) {
                token = delegate(token);
              }
              tokens.push(token);
            }
          } catch (e) {
            tokenizer.errorHandler.tolerate(e);
          }
          if (tokenizer.errorHandler.tolerant) {
            tokens.errors = tokenizer.errors();
          }
          return tokens;
        }
        exports.tokenize = tokenize;
        var syntax_1 = __webpack_require__(2);
        exports.Syntax = syntax_1.Syntax;
        // Sync with *.json manifests.
        exports.version = '4.0.1';

        /***/
      }, /* 1 */
      /***/function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var syntax_1 = __webpack_require__(2);
        var CommentHandler = function () {
          function CommentHandler() {
            this.attach = false;
            this.comments = [];
            this.stack = [];
            this.leading = [];
            this.trailing = [];
          }
          CommentHandler.prototype.insertInnerComments = function (node, metadata) {
            //  innnerComments for properties empty block
            //  `function a() {/** comments **\/}`
            if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
              var innerComments = [];
              for (var i = this.leading.length - 1; i >= 0; --i) {
                var entry = this.leading[i];
                if (metadata.end.offset >= entry.start) {
                  innerComments.unshift(entry.comment);
                  this.leading.splice(i, 1);
                  this.trailing.splice(i, 1);
                }
              }
              if (innerComments.length) {
                node.innerComments = innerComments;
              }
            }
          };
          CommentHandler.prototype.findTrailingComments = function (metadata) {
            var trailingComments = [];
            if (this.trailing.length > 0) {
              for (var i = this.trailing.length - 1; i >= 0; --i) {
                var entry_1 = this.trailing[i];
                if (entry_1.start >= metadata.end.offset) {
                  trailingComments.unshift(entry_1.comment);
                }
              }
              this.trailing.length = 0;
              return trailingComments;
            }
            var entry = this.stack[this.stack.length - 1];
            if (entry && entry.node.trailingComments) {
              var firstComment = entry.node.trailingComments[0];
              if (firstComment && firstComment.range[0] >= metadata.end.offset) {
                trailingComments = entry.node.trailingComments;
                delete entry.node.trailingComments;
              }
            }
            return trailingComments;
          };
          CommentHandler.prototype.findLeadingComments = function (metadata) {
            var leadingComments = [];
            var target;
            while (this.stack.length > 0) {
              var entry = this.stack[this.stack.length - 1];
              if (entry && entry.start >= metadata.start.offset) {
                target = entry.node;
                this.stack.pop();
              } else {
                break;
              }
            }
            if (target) {
              var count = target.leadingComments ? target.leadingComments.length : 0;
              for (var i = count - 1; i >= 0; --i) {
                var comment = target.leadingComments[i];
                if (comment.range[1] <= metadata.start.offset) {
                  leadingComments.unshift(comment);
                  target.leadingComments.splice(i, 1);
                }
              }
              if (target.leadingComments && target.leadingComments.length === 0) {
                delete target.leadingComments;
              }
              return leadingComments;
            }
            for (var i = this.leading.length - 1; i >= 0; --i) {
              var entry = this.leading[i];
              if (entry.start <= metadata.start.offset) {
                leadingComments.unshift(entry.comment);
                this.leading.splice(i, 1);
              }
            }
            return leadingComments;
          };
          CommentHandler.prototype.visitNode = function (node, metadata) {
            if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
              return;
            }
            this.insertInnerComments(node, metadata);
            var trailingComments = this.findTrailingComments(metadata);
            var leadingComments = this.findLeadingComments(metadata);
            if (leadingComments.length > 0) {
              node.leadingComments = leadingComments;
            }
            if (trailingComments.length > 0) {
              node.trailingComments = trailingComments;
            }
            this.stack.push({
              node: node,
              start: metadata.start.offset
            });
          };
          CommentHandler.prototype.visitComment = function (node, metadata) {
            var type = node.type[0] === 'L' ? 'Line' : 'Block';
            var comment = {
              type: type,
              value: node.value
            };
            if (node.range) {
              comment.range = node.range;
            }
            if (node.loc) {
              comment.loc = node.loc;
            }
            this.comments.push(comment);
            if (this.attach) {
              var entry = {
                comment: {
                  type: type,
                  value: node.value,
                  range: [metadata.start.offset, metadata.end.offset]
                },
                start: metadata.start.offset
              };
              if (node.loc) {
                entry.comment.loc = node.loc;
              }
              node.type = type;
              this.leading.push(entry);
              this.trailing.push(entry);
            }
          };
          CommentHandler.prototype.visit = function (node, metadata) {
            if (node.type === 'LineComment') {
              this.visitComment(node, metadata);
            } else if (node.type === 'BlockComment') {
              this.visitComment(node, metadata);
            } else if (this.attach) {
              this.visitNode(node, metadata);
            }
          };
          return CommentHandler;
        }();
        exports.CommentHandler = CommentHandler;

        /***/
      }, /* 2 */
      /***/function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Syntax = {
          AssignmentExpression: 'AssignmentExpression',
          AssignmentPattern: 'AssignmentPattern',
          ArrayExpression: 'ArrayExpression',
          ArrayPattern: 'ArrayPattern',
          ArrowFunctionExpression: 'ArrowFunctionExpression',
          AwaitExpression: 'AwaitExpression',
          BlockStatement: 'BlockStatement',
          BinaryExpression: 'BinaryExpression',
          BreakStatement: 'BreakStatement',
          CallExpression: 'CallExpression',
          CatchClause: 'CatchClause',
          ClassBody: 'ClassBody',
          ClassDeclaration: 'ClassDeclaration',
          ClassExpression: 'ClassExpression',
          ConditionalExpression: 'ConditionalExpression',
          ContinueStatement: 'ContinueStatement',
          DoWhileStatement: 'DoWhileStatement',
          DebuggerStatement: 'DebuggerStatement',
          EmptyStatement: 'EmptyStatement',
          ExportAllDeclaration: 'ExportAllDeclaration',
          ExportDefaultDeclaration: 'ExportDefaultDeclaration',
          ExportNamedDeclaration: 'ExportNamedDeclaration',
          ExportSpecifier: 'ExportSpecifier',
          ExpressionStatement: 'ExpressionStatement',
          ForStatement: 'ForStatement',
          ForOfStatement: 'ForOfStatement',
          ForInStatement: 'ForInStatement',
          FunctionDeclaration: 'FunctionDeclaration',
          FunctionExpression: 'FunctionExpression',
          Identifier: 'Identifier',
          IfStatement: 'IfStatement',
          ImportDeclaration: 'ImportDeclaration',
          ImportDefaultSpecifier: 'ImportDefaultSpecifier',
          ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
          ImportSpecifier: 'ImportSpecifier',
          Literal: 'Literal',
          LabeledStatement: 'LabeledStatement',
          LogicalExpression: 'LogicalExpression',
          MemberExpression: 'MemberExpression',
          MetaProperty: 'MetaProperty',
          MethodDefinition: 'MethodDefinition',
          NewExpression: 'NewExpression',
          ObjectExpression: 'ObjectExpression',
          ObjectPattern: 'ObjectPattern',
          Program: 'Program',
          Property: 'Property',
          RestElement: 'RestElement',
          ReturnStatement: 'ReturnStatement',
          SequenceExpression: 'SequenceExpression',
          SpreadElement: 'SpreadElement',
          Super: 'Super',
          SwitchCase: 'SwitchCase',
          SwitchStatement: 'SwitchStatement',
          TaggedTemplateExpression: 'TaggedTemplateExpression',
          TemplateElement: 'TemplateElement',
          TemplateLiteral: 'TemplateLiteral',
          ThisExpression: 'ThisExpression',
          ThrowStatement: 'ThrowStatement',
          TryStatement: 'TryStatement',
          UnaryExpression: 'UnaryExpression',
          UpdateExpression: 'UpdateExpression',
          VariableDeclaration: 'VariableDeclaration',
          VariableDeclarator: 'VariableDeclarator',
          WhileStatement: 'WhileStatement',
          WithStatement: 'WithStatement',
          YieldExpression: 'YieldExpression'
        };

        /***/
      }, /* 3 */
      /***/function (module, exports, __webpack_require__) {

        /* istanbul ignore next */
        var __extends = this && this.__extends || function () {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var character_1 = __webpack_require__(4);
        var JSXNode = __webpack_require__(5);
        var jsx_syntax_1 = __webpack_require__(6);
        var Node = __webpack_require__(7);
        var parser_1 = __webpack_require__(8);
        var token_1 = __webpack_require__(13);
        var xhtml_entities_1 = __webpack_require__(14);
        token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
        token_1.TokenName[101 /* Text */] = 'JSXText';
        // Fully qualified element name, e.g. <svg:path> returns "svg:path"
        function getQualifiedElementName(elementName) {
          var qualifiedName;
          switch (elementName.type) {
            case jsx_syntax_1.JSXSyntax.JSXIdentifier:
              var id = elementName;
              qualifiedName = id.name;
              break;
            case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
              var ns = elementName;
              qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);
              break;
            case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
              var expr = elementName;
              qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);
              break;
          }
          return qualifiedName;
        }
        var JSXParser = function (_super) {
          __extends(JSXParser, _super);
          function JSXParser(code, options, delegate) {
            return _super.call(this, code, options, delegate) || this;
          }
          JSXParser.prototype.parsePrimaryExpression = function () {
            return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
          };
          JSXParser.prototype.startJSX = function () {
            // Unwind the scanner before the lookahead token.
            this.scanner.index = this.startMarker.index;
            this.scanner.lineNumber = this.startMarker.line;
            this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
          };
          JSXParser.prototype.finishJSX = function () {
            // Prime the next lookahead.
            this.nextToken();
          };
          JSXParser.prototype.reenterJSX = function () {
            this.startJSX();
            this.expectJSX('}');
            // Pop the closing '}' added from the lookahead.
            if (this.config.tokens) {
              this.tokens.pop();
            }
          };
          JSXParser.prototype.createJSXNode = function () {
            this.collectComments();
            return {
              index: this.scanner.index,
              line: this.scanner.lineNumber,
              column: this.scanner.index - this.scanner.lineStart
            };
          };
          JSXParser.prototype.createJSXChildNode = function () {
            return {
              index: this.scanner.index,
              line: this.scanner.lineNumber,
              column: this.scanner.index - this.scanner.lineStart
            };
          };
          JSXParser.prototype.scanXHTMLEntity = function (quote) {
            var result = '&';
            var valid = true;
            var terminated = false;
            var numeric = false;
            var hex = false;
            while (!this.scanner.eof() && valid && !terminated) {
              var ch = this.scanner.source[this.scanner.index];
              if (ch === quote) {
                break;
              }
              terminated = ch === ';';
              result += ch;
              ++this.scanner.index;
              if (!terminated) {
                switch (result.length) {
                  case 2:
                    // e.g. '&#123;'
                    numeric = ch === '#';
                    break;
                  case 3:
                    if (numeric) {
                      // e.g. '&#x41;'
                      hex = ch === 'x';
                      valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
                      numeric = numeric && !hex;
                    }
                    break;
                  default:
                    valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
                    valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
                    break;
                }
              }
            }
            if (valid && terminated && result.length > 2) {
              // e.g. '&#x41;' becomes just '#x41'
              var str = result.substr(1, result.length - 2);
              if (numeric && str.length > 1) {
                result = String.fromCharCode(parseInt(str.substr(1), 10));
              } else if (hex && str.length > 2) {
                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
              } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
                result = xhtml_entities_1.XHTMLEntities[str];
              }
            }
            return result;
          };
          // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
          JSXParser.prototype.lexJSX = function () {
            var cp = this.scanner.source.charCodeAt(this.scanner.index);
            // < > / : = { }
            if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
              var value = this.scanner.source[this.scanner.index++];
              return {
                type: 7 /* Punctuator */,
                value: value,
                lineNumber: this.scanner.lineNumber,
                lineStart: this.scanner.lineStart,
                start: this.scanner.index - 1,
                end: this.scanner.index
              };
            }
            // " '
            if (cp === 34 || cp === 39) {
              var start = this.scanner.index;
              var quote = this.scanner.source[this.scanner.index++];
              var str = '';
              while (!this.scanner.eof()) {
                var ch = this.scanner.source[this.scanner.index++];
                if (ch === quote) {
                  break;
                } else if (ch === '&') {
                  str += this.scanXHTMLEntity(quote);
                } else {
                  str += ch;
                }
              }
              return {
                type: 8 /* StringLiteral */,
                value: str,
                lineNumber: this.scanner.lineNumber,
                lineStart: this.scanner.lineStart,
                start: start,
                end: this.scanner.index
              };
            }
            // ... or .
            if (cp === 46) {
              var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
              var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
              var value = n1 === 46 && n2 === 46 ? '...' : '.';
              var start = this.scanner.index;
              this.scanner.index += value.length;
              return {
                type: 7 /* Punctuator */,
                value: value,
                lineNumber: this.scanner.lineNumber,
                lineStart: this.scanner.lineStart,
                start: start,
                end: this.scanner.index
              };
            }
            // `
            if (cp === 96) {
              // Only placeholder, since it will be rescanned as a real assignment expression.
              return {
                type: 10 /* Template */,
                value: '',
                lineNumber: this.scanner.lineNumber,
                lineStart: this.scanner.lineStart,
                start: this.scanner.index,
                end: this.scanner.index
              };
            }
            // Identifer can not contain backslash (char code 92).
            if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {
              var start = this.scanner.index;
              ++this.scanner.index;
              while (!this.scanner.eof()) {
                var ch = this.scanner.source.charCodeAt(this.scanner.index);
                if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {
                  ++this.scanner.index;
                } else if (ch === 45) {
                  // Hyphen (char code 45) can be part of an identifier.
                  ++this.scanner.index;
                } else {
                  break;
                }
              }
              var id = this.scanner.source.slice(start, this.scanner.index);
              return {
                type: 100 /* Identifier */,
                value: id,
                lineNumber: this.scanner.lineNumber,
                lineStart: this.scanner.lineStart,
                start: start,
                end: this.scanner.index
              };
            }
            return this.scanner.lex();
          };
          JSXParser.prototype.nextJSXToken = function () {
            this.collectComments();
            this.startMarker.index = this.scanner.index;
            this.startMarker.line = this.scanner.lineNumber;
            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
            var token = this.lexJSX();
            this.lastMarker.index = this.scanner.index;
            this.lastMarker.line = this.scanner.lineNumber;
            this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
            if (this.config.tokens) {
              this.tokens.push(this.convertToken(token));
            }
            return token;
          };
          JSXParser.prototype.nextJSXText = function () {
            this.startMarker.index = this.scanner.index;
            this.startMarker.line = this.scanner.lineNumber;
            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
            var start = this.scanner.index;
            var text = '';
            while (!this.scanner.eof()) {
              var ch = this.scanner.source[this.scanner.index];
              if (ch === '{' || ch === '<') {
                break;
              }
              ++this.scanner.index;
              text += ch;
              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                ++this.scanner.lineNumber;
                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
                  ++this.scanner.index;
                }
                this.scanner.lineStart = this.scanner.index;
              }
            }
            this.lastMarker.index = this.scanner.index;
            this.lastMarker.line = this.scanner.lineNumber;
            this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
            var token = {
              type: 101 /* Text */,
              value: text,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
            if (text.length > 0 && this.config.tokens) {
              this.tokens.push(this.convertToken(token));
            }
            return token;
          };
          JSXParser.prototype.peekJSXToken = function () {
            var state = this.scanner.saveState();
            this.scanner.scanComments();
            var next = this.lexJSX();
            this.scanner.restoreState(state);
            return next;
          };
          // Expect the next JSX token to match the specified punctuator.
          // If not, an exception will be thrown.
          JSXParser.prototype.expectJSX = function (value) {
            var token = this.nextJSXToken();
            if (token.type !== 7 /* Punctuator */ || token.value !== value) {
              this.throwUnexpectedToken(token);
            }
          };
          // Return true if the next JSX token matches the specified punctuator.
          JSXParser.prototype.matchJSX = function (value) {
            var next = this.peekJSXToken();
            return next.type === 7 /* Punctuator */ && next.value === value;
          };
          JSXParser.prototype.parseJSXIdentifier = function () {
            var node = this.createJSXNode();
            var token = this.nextJSXToken();
            if (token.type !== 100 /* Identifier */) {
              this.throwUnexpectedToken(token);
            }
            return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
          };
          JSXParser.prototype.parseJSXElementName = function () {
            var node = this.createJSXNode();
            var elementName = this.parseJSXIdentifier();
            if (this.matchJSX(':')) {
              var namespace = elementName;
              this.expectJSX(':');
              var name_1 = this.parseJSXIdentifier();
              elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
            } else if (this.matchJSX('.')) {
              while (this.matchJSX('.')) {
                var object = elementName;
                this.expectJSX('.');
                var property = this.parseJSXIdentifier();
                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
              }
            }
            return elementName;
          };
          JSXParser.prototype.parseJSXAttributeName = function () {
            var node = this.createJSXNode();
            var attributeName;
            var identifier = this.parseJSXIdentifier();
            if (this.matchJSX(':')) {
              var namespace = identifier;
              this.expectJSX(':');
              var name_2 = this.parseJSXIdentifier();
              attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
            } else {
              attributeName = identifier;
            }
            return attributeName;
          };
          JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
            var node = this.createJSXNode();
            var token = this.nextJSXToken();
            if (token.type !== 8 /* StringLiteral */) {
              this.throwUnexpectedToken(token);
            }
            var raw = this.getTokenRaw(token);
            return this.finalize(node, new Node.Literal(token.value, raw));
          };
          JSXParser.prototype.parseJSXExpressionAttribute = function () {
            var node = this.createJSXNode();
            this.expectJSX('{');
            this.finishJSX();
            if (this.match('}')) {
              this.tolerateError('JSX attributes must only be assigned a non-empty expression');
            }
            var expression = this.parseAssignmentExpression();
            this.reenterJSX();
            return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
          };
          JSXParser.prototype.parseJSXAttributeValue = function () {
            return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
          };
          JSXParser.prototype.parseJSXNameValueAttribute = function () {
            var node = this.createJSXNode();
            var name = this.parseJSXAttributeName();
            var value = null;
            if (this.matchJSX('=')) {
              this.expectJSX('=');
              value = this.parseJSXAttributeValue();
            }
            return this.finalize(node, new JSXNode.JSXAttribute(name, value));
          };
          JSXParser.prototype.parseJSXSpreadAttribute = function () {
            var node = this.createJSXNode();
            this.expectJSX('{');
            this.expectJSX('...');
            this.finishJSX();
            var argument = this.parseAssignmentExpression();
            this.reenterJSX();
            return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
          };
          JSXParser.prototype.parseJSXAttributes = function () {
            var attributes = [];
            while (!this.matchJSX('/') && !this.matchJSX('>')) {
              var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
              attributes.push(attribute);
            }
            return attributes;
          };
          JSXParser.prototype.parseJSXOpeningElement = function () {
            var node = this.createJSXNode();
            this.expectJSX('<');
            var name = this.parseJSXElementName();
            var attributes = this.parseJSXAttributes();
            var selfClosing = this.matchJSX('/');
            if (selfClosing) {
              this.expectJSX('/');
            }
            this.expectJSX('>');
            return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
          };
          JSXParser.prototype.parseJSXBoundaryElement = function () {
            var node = this.createJSXNode();
            this.expectJSX('<');
            if (this.matchJSX('/')) {
              this.expectJSX('/');
              var name_3 = this.parseJSXElementName();
              this.expectJSX('>');
              return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
            }
            var name = this.parseJSXElementName();
            var attributes = this.parseJSXAttributes();
            var selfClosing = this.matchJSX('/');
            if (selfClosing) {
              this.expectJSX('/');
            }
            this.expectJSX('>');
            return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
          };
          JSXParser.prototype.parseJSXEmptyExpression = function () {
            var node = this.createJSXChildNode();
            this.collectComments();
            this.lastMarker.index = this.scanner.index;
            this.lastMarker.line = this.scanner.lineNumber;
            this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
            return this.finalize(node, new JSXNode.JSXEmptyExpression());
          };
          JSXParser.prototype.parseJSXExpressionContainer = function () {
            var node = this.createJSXNode();
            this.expectJSX('{');
            var expression;
            if (this.matchJSX('}')) {
              expression = this.parseJSXEmptyExpression();
              this.expectJSX('}');
            } else {
              this.finishJSX();
              expression = this.parseAssignmentExpression();
              this.reenterJSX();
            }
            return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
          };
          JSXParser.prototype.parseJSXChildren = function () {
            var children = [];
            while (!this.scanner.eof()) {
              var node = this.createJSXChildNode();
              var token = this.nextJSXText();
              if (token.start < token.end) {
                var raw = this.getTokenRaw(token);
                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
                children.push(child);
              }
              if (this.scanner.source[this.scanner.index] === '{') {
                var container = this.parseJSXExpressionContainer();
                children.push(container);
              } else {
                break;
              }
            }
            return children;
          };
          JSXParser.prototype.parseComplexJSXElement = function (el) {
            var stack = [];
            while (!this.scanner.eof()) {
              el.children = el.children.concat(this.parseJSXChildren());
              var node = this.createJSXChildNode();
              var element = this.parseJSXBoundaryElement();
              if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
                var opening = element;
                if (opening.selfClosing) {
                  var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
                  el.children.push(child);
                } else {
                  stack.push(el);
                  el = {
                    node: node,
                    opening: opening,
                    closing: null,
                    children: []
                  };
                }
              }
              if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
                el.closing = element;
                var open_1 = getQualifiedElementName(el.opening.name);
                var close_1 = getQualifiedElementName(el.closing.name);
                if (open_1 !== close_1) {
                  this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
                }
                if (stack.length > 0) {
                  var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
                  el = stack[stack.length - 1];
                  el.children.push(child);
                  stack.pop();
                } else {
                  break;
                }
              }
            }
            return el;
          };
          JSXParser.prototype.parseJSXElement = function () {
            var node = this.createJSXNode();
            var opening = this.parseJSXOpeningElement();
            var children = [];
            var closing = null;
            if (!opening.selfClosing) {
              var el = this.parseComplexJSXElement({
                node: node,
                opening: opening,
                closing: closing,
                children: children
              });
              children = el.children;
              closing = el.closing;
            }
            return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
          };
          JSXParser.prototype.parseJSXRoot = function () {
            // Pop the opening '<' added from the lookahead.
            if (this.config.tokens) {
              this.tokens.pop();
            }
            this.startJSX();
            var element = this.parseJSXElement();
            this.finishJSX();
            return element;
          };
          JSXParser.prototype.isStartOfExpression = function () {
            return _super.prototype.isStartOfExpression.call(this) || this.match('<');
          };
          return JSXParser;
        }(parser_1.Parser);
        exports.JSXParser = JSXParser;

        /***/
      }, /* 4 */
      /***/function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        // See also tools/generate-unicode-regex.js.
        var Regex = {
          // Unicode v8.0.0 NonAsciiIdentifierStart:
          NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
          // Unicode v8.0.0 NonAsciiIdentifierPart:
          NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
        };
        exports.Character = {
          /* tslint:disable:no-bitwise */
          fromCodePoint: function (cp) {
            return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));
          },
          // https://tc39.github.io/ecma262/#sec-white-space
          isWhiteSpace: function (cp) {
            return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;
          },
          // https://tc39.github.io/ecma262/#sec-line-terminators
          isLineTerminator: function (cp) {
            return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
          },
          // https://tc39.github.io/ecma262/#sec-names-and-keywords
          isIdentifierStart: function (cp) {
            return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));
          },
          isIdentifierPart: function (cp) {
            return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));
          },
          // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
          isDecimalDigit: function (cp) {
            return cp >= 0x30 && cp <= 0x39; // 0..9
          },

          isHexDigit: function (cp) {
            return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f
          },

          isOctalDigit: function (cp) {
            return cp >= 0x30 && cp <= 0x37; // 0..7
          }
        };

        /***/
      }, /* 5 */
      /***/function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var jsx_syntax_1 = __webpack_require__(6);
        /* tslint:disable:max-classes-per-file */
        var JSXClosingElement = function () {
          function JSXClosingElement(name) {
            this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
            this.name = name;
          }
          return JSXClosingElement;
        }();
        exports.JSXClosingElement = JSXClosingElement;
        var JSXElement = function () {
          function JSXElement(openingElement, children, closingElement) {
            this.type = jsx_syntax_1.JSXSyntax.JSXElement;
            this.openingElement = openingElement;
            this.children = children;
            this.closingElement = closingElement;
          }
          return JSXElement;
        }();
        exports.JSXElement = JSXElement;
        var JSXEmptyExpression = function () {
          function JSXEmptyExpression() {
            this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
          }
          return JSXEmptyExpression;
        }();
        exports.JSXEmptyExpression = JSXEmptyExpression;
        var JSXExpressionContainer = function () {
          function JSXExpressionContainer(expression) {
            this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
            this.expression = expression;
          }
          return JSXExpressionContainer;
        }();
        exports.JSXExpressionContainer = JSXExpressionContainer;
        var JSXIdentifier = function () {
          function JSXIdentifier(name) {
            this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
            this.name = name;
          }
          return JSXIdentifier;
        }();
        exports.JSXIdentifier = JSXIdentifier;
        var JSXMemberExpression = function () {
          function JSXMemberExpression(object, property) {
            this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
            this.object = object;
            this.property = property;
          }
          return JSXMemberExpression;
        }();
        exports.JSXMemberExpression = JSXMemberExpression;
        var JSXAttribute = function () {
          function JSXAttribute(name, value) {
            this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
            this.name = name;
            this.value = value;
          }
          return JSXAttribute;
        }();
        exports.JSXAttribute = JSXAttribute;
        var JSXNamespacedName = function () {
          function JSXNamespacedName(namespace, name) {
            this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
            this.namespace = namespace;
            this.name = name;
          }
          return JSXNamespacedName;
        }();
        exports.JSXNamespacedName = JSXNamespacedName;
        var JSXOpeningElement = function () {
          function JSXOpeningElement(name, selfClosing, attributes) {
            this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
            this.name = name;
            this.selfClosing = selfClosing;
            this.attributes = attributes;
          }
          return JSXOpeningElement;
        }();
        exports.JSXOpeningElement = JSXOpeningElement;
        var JSXSpreadAttribute = function () {
          function JSXSpreadAttribute(argument) {
            this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
            this.argument = argument;
          }
          return JSXSpreadAttribute;
        }();
        exports.JSXSpreadAttribute = JSXSpreadAttribute;
        var JSXText = function () {
          function JSXText(value, raw) {
            this.type = jsx_syntax_1.JSXSyntax.JSXText;
            this.value = value;
            this.raw = raw;
          }
          return JSXText;
        }();
        exports.JSXText = JSXText;

        /***/
      }, /* 6 */
      /***/function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.JSXSyntax = {
          JSXAttribute: 'JSXAttribute',
          JSXClosingElement: 'JSXClosingElement',
          JSXElement: 'JSXElement',
          JSXEmptyExpression: 'JSXEmptyExpression',
          JSXExpressionContainer: 'JSXExpressionContainer',
          JSXIdentifier: 'JSXIdentifier',
          JSXMemberExpression: 'JSXMemberExpression',
          JSXNamespacedName: 'JSXNamespacedName',
          JSXOpeningElement: 'JSXOpeningElement',
          JSXSpreadAttribute: 'JSXSpreadAttribute',
          JSXText: 'JSXText'
        };

        /***/
      }, /* 7 */
      /***/function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var syntax_1 = __webpack_require__(2);
        /* tslint:disable:max-classes-per-file */
        var ArrayExpression = function () {
          function ArrayExpression(elements) {
            this.type = syntax_1.Syntax.ArrayExpression;
            this.elements = elements;
          }
          return ArrayExpression;
        }();
        exports.ArrayExpression = ArrayExpression;
        var ArrayPattern = function () {
          function ArrayPattern(elements) {
            this.type = syntax_1.Syntax.ArrayPattern;
            this.elements = elements;
          }
          return ArrayPattern;
        }();
        exports.ArrayPattern = ArrayPattern;
        var ArrowFunctionExpression = function () {
          function ArrowFunctionExpression(params, body, expression) {
            this.type = syntax_1.Syntax.ArrowFunctionExpression;
            this.id = null;
            this.params = params;
            this.body = body;
            this.generator = false;
            this.expression = expression;
            this.async = false;
          }
          return ArrowFunctionExpression;
        }();
        exports.ArrowFunctionExpression = ArrowFunctionExpression;
        var AssignmentExpression = function () {
          function AssignmentExpression(operator, left, right) {
            this.type = syntax_1.Syntax.AssignmentExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
          }
          return AssignmentExpression;
        }();
        exports.AssignmentExpression = AssignmentExpression;
        var AssignmentPattern = function () {
          function AssignmentPattern(left, right) {
            this.type = syntax_1.Syntax.AssignmentPattern;
            this.left = left;
            this.right = right;
          }
          return AssignmentPattern;
        }();
        exports.AssignmentPattern = AssignmentPattern;
        var AsyncArrowFunctionExpression = function () {
          function AsyncArrowFunctionExpression(params, body, expression) {
            this.type = syntax_1.Syntax.ArrowFunctionExpression;
            this.id = null;
            this.params = params;
            this.body = body;
            this.generator = false;
            this.expression = expression;
            this.async = true;
          }
          return AsyncArrowFunctionExpression;
        }();
        exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
        var AsyncFunctionDeclaration = function () {
          function AsyncFunctionDeclaration(id, params, body) {
            this.type = syntax_1.Syntax.FunctionDeclaration;
            this.id = id;
            this.params = params;
            this.body = body;
            this.generator = false;
            this.expression = false;
            this.async = true;
          }
          return AsyncFunctionDeclaration;
        }();
        exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
        var AsyncFunctionExpression = function () {
          function AsyncFunctionExpression(id, params, body) {
            this.type = syntax_1.Syntax.FunctionExpression;
            this.id = id;
            this.params = params;
            this.body = body;
            this.generator = false;
            this.expression = false;
            this.async = true;
          }
          return AsyncFunctionExpression;
        }();
        exports.AsyncFunctionExpression = AsyncFunctionExpression;
        var AwaitExpression = function () {
          function AwaitExpression(argument) {
            this.type = syntax_1.Syntax.AwaitExpression;
            this.argument = argument;
          }
          return AwaitExpression;
        }();
        exports.AwaitExpression = AwaitExpression;
        var BinaryExpression = function () {
          function BinaryExpression(operator, left, right) {
            var logical = operator === '||' || operator === '&&';
            this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
          }
          return BinaryExpression;
        }();
        exports.BinaryExpression = BinaryExpression;
        var BlockStatement = function () {
          function BlockStatement(body) {
            this.type = syntax_1.Syntax.BlockStatement;
            this.body = body;
          }
          return BlockStatement;
        }();
        exports.BlockStatement = BlockStatement;
        var BreakStatement = function () {
          function BreakStatement(label) {
            this.type = syntax_1.Syntax.BreakStatement;
            this.label = label;
          }
          return BreakStatement;
        }();
        exports.BreakStatement = BreakStatement;
        var CallExpression = function () {
          function CallExpression(callee, args) {
            this.type = syntax_1.Syntax.CallExpression;
            this.callee = callee;
            this.arguments = args;
          }
          return CallExpression;
        }();
        exports.CallExpression = CallExpression;
        var CatchClause = function () {
          function CatchClause(param, body) {
            this.type = syntax_1.Syntax.CatchClause;
            this.param = param;
            this.body = body;
          }
          return CatchClause;
        }();
        exports.CatchClause = CatchClause;
        var ClassBody = function () {
          function ClassBody(body) {
            this.type = syntax_1.Syntax.ClassBody;
            this.body = body;
          }
          return ClassBody;
        }();
        exports.ClassBody = ClassBody;
        var ClassDeclaration = function () {
          function ClassDeclaration(id, superClass, body) {
            this.type = syntax_1.Syntax.ClassDeclaration;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
          }
          return ClassDeclaration;
        }();
        exports.ClassDeclaration = ClassDeclaration;
        var ClassExpression = function () {
          function ClassExpression(id, superClass, body) {
            this.type = syntax_1.Syntax.ClassExpression;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
          }
          return ClassExpression;
        }();
        exports.ClassExpression = ClassExpression;
        var ComputedMemberExpression = function () {
          function ComputedMemberExpression(object, property) {
            this.type = syntax_1.Syntax.MemberExpression;
            this.computed = true;
            this.object = object;
            this.property = property;
          }
          return ComputedMemberExpression;
        }();
        exports.ComputedMemberExpression = ComputedMemberExpression;
        var ConditionalExpression = function () {
          function ConditionalExpression(test, consequent, alternate) {
            this.type = syntax_1.Syntax.ConditionalExpression;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
          }
          return ConditionalExpression;
        }();
        exports.ConditionalExpression = ConditionalExpression;
        var ContinueStatement = function () {
          function ContinueStatement(label) {
            this.type = syntax_1.Syntax.ContinueStatement;
            this.label = label;
          }
          return ContinueStatement;
        }();
        exports.ContinueStatement = ContinueStatement;
        var DebuggerStatement = function () {
          function DebuggerStatement() {
            this.type = syntax_1.Syntax.DebuggerStatement;
          }
          return DebuggerStatement;
        }();
        exports.DebuggerStatement = DebuggerStatement;
        var Directive = function () {
          function Directive(expression, directive) {
            this.type = syntax_1.Syntax.ExpressionStatement;
            this.expression = expression;
            this.directive = directive;
          }
          return Directive;
        }();
        exports.Directive = Directive;
        var DoWhileStatement = function () {
          function DoWhileStatement(body, test) {
            this.type = syntax_1.Syntax.DoWhileStatement;
            this.body = body;
            this.test = test;
          }
          return DoWhileStatement;
        }();
        exports.DoWhileStatement = DoWhileStatement;
        var EmptyStatement = function () {
          function EmptyStatement() {
            this.type = syntax_1.Syntax.EmptyStatement;
          }
          return EmptyStatement;
        }();
        exports.EmptyStatement = EmptyStatement;
        var ExportAllDeclaration = function () {
          function ExportAllDeclaration(source) {
            this.type = syntax_1.Syntax.ExportAllDeclaration;
            this.source = source;
          }
          return ExportAllDeclaration;
        }();
        exports.ExportAllDeclaration = ExportAllDeclaration;
        var ExportDefaultDeclaration = function () {
          function ExportDefaultDeclaration(declaration) {
            this.type = syntax_1.Syntax.ExportDefaultDeclaration;
            this.declaration = declaration;
          }
          return ExportDefaultDeclaration;
        }();
        exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
        var ExportNamedDeclaration = function () {
          function ExportNamedDeclaration(declaration, specifiers, source) {
            this.type = syntax_1.Syntax.ExportNamedDeclaration;
            this.declaration = declaration;
            this.specifiers = specifiers;
            this.source = source;
          }
          return ExportNamedDeclaration;
        }();
        exports.ExportNamedDeclaration = ExportNamedDeclaration;
        var ExportSpecifier = function () {
          function ExportSpecifier(local, exported) {
            this.type = syntax_1.Syntax.ExportSpecifier;
            this.exported = exported;
            this.local = local;
          }
          return ExportSpecifier;
        }();
        exports.ExportSpecifier = ExportSpecifier;
        var ExpressionStatement = function () {
          function ExpressionStatement(expression) {
            this.type = syntax_1.Syntax.ExpressionStatement;
            this.expression = expression;
          }
          return ExpressionStatement;
        }();
        exports.ExpressionStatement = ExpressionStatement;
        var ForInStatement = function () {
          function ForInStatement(left, right, body) {
            this.type = syntax_1.Syntax.ForInStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.each = false;
          }
          return ForInStatement;
        }();
        exports.ForInStatement = ForInStatement;
        var ForOfStatement = function () {
          function ForOfStatement(left, right, body) {
            this.type = syntax_1.Syntax.ForOfStatement;
            this.left = left;
            this.right = right;
            this.body = body;
          }
          return ForOfStatement;
        }();
        exports.ForOfStatement = ForOfStatement;
        var ForStatement = function () {
          function ForStatement(init, test, update, body) {
            this.type = syntax_1.Syntax.ForStatement;
            this.init = init;
            this.test = test;
            this.update = update;
            this.body = body;
          }
          return ForStatement;
        }();
        exports.ForStatement = ForStatement;
        var FunctionDeclaration = function () {
          function FunctionDeclaration(id, params, body, generator) {
            this.type = syntax_1.Syntax.FunctionDeclaration;
            this.id = id;
            this.params = params;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.async = false;
          }
          return FunctionDeclaration;
        }();
        exports.FunctionDeclaration = FunctionDeclaration;
        var FunctionExpression = function () {
          function FunctionExpression(id, params, body, generator) {
            this.type = syntax_1.Syntax.FunctionExpression;
            this.id = id;
            this.params = params;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.async = false;
          }
          return FunctionExpression;
        }();
        exports.FunctionExpression = FunctionExpression;
        var Identifier = function () {
          function Identifier(name) {
            this.type = syntax_1.Syntax.Identifier;
            this.name = name;
          }
          return Identifier;
        }();
        exports.Identifier = Identifier;
        var IfStatement = function () {
          function IfStatement(test, consequent, alternate) {
            this.type = syntax_1.Syntax.IfStatement;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
          }
          return IfStatement;
        }();
        exports.IfStatement = IfStatement;
        var ImportDeclaration = function () {
          function ImportDeclaration(specifiers, source) {
            this.type = syntax_1.Syntax.ImportDeclaration;
            this.specifiers = specifiers;
            this.source = source;
          }
          return ImportDeclaration;
        }();
        exports.ImportDeclaration = ImportDeclaration;
        var ImportDefaultSpecifier = function () {
          function ImportDefaultSpecifier(local) {
            this.type = syntax_1.Syntax.ImportDefaultSpecifier;
            this.local = local;
          }
          return ImportDefaultSpecifier;
        }();
        exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
        var ImportNamespaceSpecifier = function () {
          function ImportNamespaceSpecifier(local) {
            this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
            this.local = local;
          }
          return ImportNamespaceSpecifier;
        }();
        exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
        var ImportSpecifier = function () {
          function ImportSpecifier(local, imported) {
            this.type = syntax_1.Syntax.ImportSpecifier;
            this.local = local;
            this.imported = imported;
          }
          return ImportSpecifier;
        }();
        exports.ImportSpecifier = ImportSpecifier;
        var LabeledStatement = function () {
          function LabeledStatement(label, body) {
            this.type = syntax_1.Syntax.LabeledStatement;
            this.label = label;
            this.body = body;
          }
          return LabeledStatement;
        }();
        exports.LabeledStatement = LabeledStatement;
        var Literal = function () {
          function Literal(value, raw) {
            this.type = syntax_1.Syntax.Literal;
            this.value = value;
            this.raw = raw;
          }
          return Literal;
        }();
        exports.Literal = Literal;
        var MetaProperty = function () {
          function MetaProperty(meta, property) {
            this.type = syntax_1.Syntax.MetaProperty;
            this.meta = meta;
            this.property = property;
          }
          return MetaProperty;
        }();
        exports.MetaProperty = MetaProperty;
        var MethodDefinition = function () {
          function MethodDefinition(key, computed, value, kind, isStatic) {
            this.type = syntax_1.Syntax.MethodDefinition;
            this.key = key;
            this.computed = computed;
            this.value = value;
            this.kind = kind;
            this.static = isStatic;
          }
          return MethodDefinition;
        }();
        exports.MethodDefinition = MethodDefinition;
        var Module = function () {
          function Module(body) {
            this.type = syntax_1.Syntax.Program;
            this.body = body;
            this.sourceType = 'module';
          }
          return Module;
        }();
        exports.Module = Module;
        var NewExpression = function () {
          function NewExpression(callee, args) {
            this.type = syntax_1.Syntax.NewExpression;
            this.callee = callee;
            this.arguments = args;
          }
          return NewExpression;
        }();
        exports.NewExpression = NewExpression;
        var ObjectExpression = function () {
          function ObjectExpression(properties) {
            this.type = syntax_1.Syntax.ObjectExpression;
            this.properties = properties;
          }
          return ObjectExpression;
        }();
        exports.ObjectExpression = ObjectExpression;
        var ObjectPattern = function () {
          function ObjectPattern(properties) {
            this.type = syntax_1.Syntax.ObjectPattern;
            this.properties = properties;
          }
          return ObjectPattern;
        }();
        exports.ObjectPattern = ObjectPattern;
        var Property = function () {
          function Property(kind, key, computed, value, method, shorthand) {
            this.type = syntax_1.Syntax.Property;
            this.key = key;
            this.computed = computed;
            this.value = value;
            this.kind = kind;
            this.method = method;
            this.shorthand = shorthand;
          }
          return Property;
        }();
        exports.Property = Property;
        var RegexLiteral = function () {
          function RegexLiteral(value, raw, pattern, flags) {
            this.type = syntax_1.Syntax.Literal;
            this.value = value;
            this.raw = raw;
            this.regex = {
              pattern: pattern,
              flags: flags
            };
          }
          return RegexLiteral;
        }();
        exports.RegexLiteral = RegexLiteral;
        var RestElement = function () {
          function RestElement(argument) {
            this.type = syntax_1.Syntax.RestElement;
            this.argument = argument;
          }
          return RestElement;
        }();
        exports.RestElement = RestElement;
        var ReturnStatement = function () {
          function ReturnStatement(argument) {
            this.type = syntax_1.Syntax.ReturnStatement;
            this.argument = argument;
          }
          return ReturnStatement;
        }();
        exports.ReturnStatement = ReturnStatement;
        var Script = function () {
          function Script(body) {
            this.type = syntax_1.Syntax.Program;
            this.body = body;
            this.sourceType = 'script';
          }
          return Script;
        }();
        exports.Script = Script;
        var SequenceExpression = function () {
          function SequenceExpression(expressions) {
            this.type = syntax_1.Syntax.SequenceExpression;
            this.expressions = expressions;
          }
          return SequenceExpression;
        }();
        exports.SequenceExpression = SequenceExpression;
        var SpreadElement = function () {
          function SpreadElement(argument) {
            this.type = syntax_1.Syntax.SpreadElement;
            this.argument = argument;
          }
          return SpreadElement;
        }();
        exports.SpreadElement = SpreadElement;
        var StaticMemberExpression = function () {
          function StaticMemberExpression(object, property) {
            this.type = syntax_1.Syntax.MemberExpression;
            this.computed = false;
            this.object = object;
            this.property = property;
          }
          return StaticMemberExpression;
        }();
        exports.StaticMemberExpression = StaticMemberExpression;
        var Super = function () {
          function Super() {
            this.type = syntax_1.Syntax.Super;
          }
          return Super;
        }();
        exports.Super = Super;
        var SwitchCase = function () {
          function SwitchCase(test, consequent) {
            this.type = syntax_1.Syntax.SwitchCase;
            this.test = test;
            this.consequent = consequent;
          }
          return SwitchCase;
        }();
        exports.SwitchCase = SwitchCase;
        var SwitchStatement = function () {
          function SwitchStatement(discriminant, cases) {
            this.type = syntax_1.Syntax.SwitchStatement;
            this.discriminant = discriminant;
            this.cases = cases;
          }
          return SwitchStatement;
        }();
        exports.SwitchStatement = SwitchStatement;
        var TaggedTemplateExpression = function () {
          function TaggedTemplateExpression(tag, quasi) {
            this.type = syntax_1.Syntax.TaggedTemplateExpression;
            this.tag = tag;
            this.quasi = quasi;
          }
          return TaggedTemplateExpression;
        }();
        exports.TaggedTemplateExpression = TaggedTemplateExpression;
        var TemplateElement = function () {
          function TemplateElement(value, tail) {
            this.type = syntax_1.Syntax.TemplateElement;
            this.value = value;
            this.tail = tail;
          }
          return TemplateElement;
        }();
        exports.TemplateElement = TemplateElement;
        var TemplateLiteral = function () {
          function TemplateLiteral(quasis, expressions) {
            this.type = syntax_1.Syntax.TemplateLiteral;
            this.quasis = quasis;
            this.expressions = expressions;
          }
          return TemplateLiteral;
        }();
        exports.TemplateLiteral = TemplateLiteral;
        var ThisExpression = function () {
          function ThisExpression() {
            this.type = syntax_1.Syntax.ThisExpression;
          }
          return ThisExpression;
        }();
        exports.ThisExpression = ThisExpression;
        var ThrowStatement = function () {
          function ThrowStatement(argument) {
            this.type = syntax_1.Syntax.ThrowStatement;
            this.argument = argument;
          }
          return ThrowStatement;
        }();
        exports.ThrowStatement = ThrowStatement;
        var TryStatement = function () {
          function TryStatement(block, handler, finalizer) {
            this.type = syntax_1.Syntax.TryStatement;
            this.block = block;
            this.handler = handler;
            this.finalizer = finalizer;
          }
          return TryStatement;
        }();
        exports.TryStatement = TryStatement;
        var UnaryExpression = function () {
          function UnaryExpression(operator, argument) {
            this.type = syntax_1.Syntax.UnaryExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = true;
          }
          return UnaryExpression;
        }();
        exports.UnaryExpression = UnaryExpression;
        var UpdateExpression = function () {
          function UpdateExpression(operator, argument, prefix) {
            this.type = syntax_1.Syntax.UpdateExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = prefix;
          }
          return UpdateExpression;
        }();
        exports.UpdateExpression = UpdateExpression;
        var VariableDeclaration = function () {
          function VariableDeclaration(declarations, kind) {
            this.type = syntax_1.Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = kind;
          }
          return VariableDeclaration;
        }();
        exports.VariableDeclaration = VariableDeclaration;
        var VariableDeclarator = function () {
          function VariableDeclarator(id, init) {
            this.type = syntax_1.Syntax.VariableDeclarator;
            this.id = id;
            this.init = init;
          }
          return VariableDeclarator;
        }();
        exports.VariableDeclarator = VariableDeclarator;
        var WhileStatement = function () {
          function WhileStatement(test, body) {
            this.type = syntax_1.Syntax.WhileStatement;
            this.test = test;
            this.body = body;
          }
          return WhileStatement;
        }();
        exports.WhileStatement = WhileStatement;
        var WithStatement = function () {
          function WithStatement(object, body) {
            this.type = syntax_1.Syntax.WithStatement;
            this.object = object;
            this.body = body;
          }
          return WithStatement;
        }();
        exports.WithStatement = WithStatement;
        var YieldExpression = function () {
          function YieldExpression(argument, delegate) {
            this.type = syntax_1.Syntax.YieldExpression;
            this.argument = argument;
            this.delegate = delegate;
          }
          return YieldExpression;
        }();
        exports.YieldExpression = YieldExpression;

        /***/
      }, /* 8 */
      /***/function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var assert_1 = __webpack_require__(9);
        var error_handler_1 = __webpack_require__(10);
        var messages_1 = __webpack_require__(11);
        var Node = __webpack_require__(7);
        var scanner_1 = __webpack_require__(12);
        var syntax_1 = __webpack_require__(2);
        var token_1 = __webpack_require__(13);
        var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
        var Parser = function () {
          function Parser(code, options, delegate) {
            if (options === void 0) {
              options = {};
            }
            this.config = {
              range: typeof options.range === 'boolean' && options.range,
              loc: typeof options.loc === 'boolean' && options.loc,
              source: null,
              tokens: typeof options.tokens === 'boolean' && options.tokens,
              comment: typeof options.comment === 'boolean' && options.comment,
              tolerant: typeof options.tolerant === 'boolean' && options.tolerant
            };
            if (this.config.loc && options.source && options.source !== null) {
              this.config.source = String(options.source);
            }
            this.delegate = delegate;
            this.errorHandler = new error_handler_1.ErrorHandler();
            this.errorHandler.tolerant = this.config.tolerant;
            this.scanner = new scanner_1.Scanner(code, this.errorHandler);
            this.scanner.trackComment = this.config.comment;
            this.operatorPrecedence = {
              ')': 0,
              ';': 0,
              ',': 0,
              '=': 0,
              ']': 0,
              '||': 1,
              '&&': 2,
              '|': 3,
              '^': 4,
              '&': 5,
              '==': 6,
              '!=': 6,
              '===': 6,
              '!==': 6,
              '<': 7,
              '>': 7,
              '<=': 7,
              '>=': 7,
              '<<': 8,
              '>>': 8,
              '>>>': 8,
              '+': 9,
              '-': 9,
              '*': 11,
              '/': 11,
              '%': 11
            };
            this.lookahead = {
              type: 2 /* EOF */,
              value: '',
              lineNumber: this.scanner.lineNumber,
              lineStart: 0,
              start: 0,
              end: 0
            };
            this.hasLineTerminator = false;
            this.context = {
              isModule: false,
              await: false,
              allowIn: true,
              allowStrictDirective: true,
              allowYield: true,
              firstCoverInitializedNameError: null,
              isAssignmentTarget: false,
              isBindingElement: false,
              inFunctionBody: false,
              inIteration: false,
              inSwitch: false,
              labelSet: {},
              strict: false
            };
            this.tokens = [];
            this.startMarker = {
              index: 0,
              line: this.scanner.lineNumber,
              column: 0
            };
            this.lastMarker = {
              index: 0,
              line: this.scanner.lineNumber,
              column: 0
            };
            this.nextToken();
            this.lastMarker = {
              index: this.scanner.index,
              line: this.scanner.lineNumber,
              column: this.scanner.index - this.scanner.lineStart
            };
          }
          Parser.prototype.throwError = function (messageFormat) {
            var args = Array.prototype.slice.call(arguments, 1);
            var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
              assert_1.assert(idx < args.length, 'Message reference must be in range');
              return args[idx];
            });
            var index = this.lastMarker.index;
            var line = this.lastMarker.line;
            var column = this.lastMarker.column + 1;
            throw this.errorHandler.createError(index, line, column, msg);
          };
          Parser.prototype.tolerateError = function (messageFormat) {
            var args = Array.prototype.slice.call(arguments, 1);
            var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
              assert_1.assert(idx < args.length, 'Message reference must be in range');
              return args[idx];
            });
            var index = this.lastMarker.index;
            var line = this.scanner.lineNumber;
            var column = this.lastMarker.column + 1;
            this.errorHandler.tolerateError(index, line, column, msg);
          };
          // Throw an exception because of the token.
          Parser.prototype.unexpectedTokenError = function (token, message) {
            var msg = message || messages_1.Messages.UnexpectedToken;
            var value;
            if (token) {
              if (!message) {
                msg = token.type === 2 /* EOF */ ? messages_1.Messages.UnexpectedEOS : token.type === 3 /* Identifier */ ? messages_1.Messages.UnexpectedIdentifier : token.type === 6 /* NumericLiteral */ ? messages_1.Messages.UnexpectedNumber : token.type === 8 /* StringLiteral */ ? messages_1.Messages.UnexpectedString : token.type === 10 /* Template */ ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;
                if (token.type === 4 /* Keyword */) {
                  if (this.scanner.isFutureReservedWord(token.value)) {
                    msg = messages_1.Messages.UnexpectedReserved;
                  } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
                    msg = messages_1.Messages.StrictReservedWord;
                  }
                }
              }
              value = token.value;
            } else {
              value = 'ILLEGAL';
            }
            msg = msg.replace('%0', value);
            if (token && typeof token.lineNumber === 'number') {
              var index = token.start;
              var line = token.lineNumber;
              var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
              var column = token.start - lastMarkerLineStart + 1;
              return this.errorHandler.createError(index, line, column, msg);
            } else {
              var index = this.lastMarker.index;
              var line = this.lastMarker.line;
              var column = this.lastMarker.column + 1;
              return this.errorHandler.createError(index, line, column, msg);
            }
          };
          Parser.prototype.throwUnexpectedToken = function (token, message) {
            throw this.unexpectedTokenError(token, message);
          };
          Parser.prototype.tolerateUnexpectedToken = function (token, message) {
            this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
          };
          Parser.prototype.collectComments = function () {
            if (!this.config.comment) {
              this.scanner.scanComments();
            } else {
              var comments = this.scanner.scanComments();
              if (comments.length > 0 && this.delegate) {
                for (var i = 0; i < comments.length; ++i) {
                  var e = comments[i];
                  var node = void 0;
                  node = {
                    type: e.multiLine ? 'BlockComment' : 'LineComment',
                    value: this.scanner.source.slice(e.slice[0], e.slice[1])
                  };
                  if (this.config.range) {
                    node.range = e.range;
                  }
                  if (this.config.loc) {
                    node.loc = e.loc;
                  }
                  var metadata = {
                    start: {
                      line: e.loc.start.line,
                      column: e.loc.start.column,
                      offset: e.range[0]
                    },
                    end: {
                      line: e.loc.end.line,
                      column: e.loc.end.column,
                      offset: e.range[1]
                    }
                  };
                  this.delegate(node, metadata);
                }
              }
            }
          };
          // From internal representation to an external structure
          Parser.prototype.getTokenRaw = function (token) {
            return this.scanner.source.slice(token.start, token.end);
          };
          Parser.prototype.convertToken = function (token) {
            var t = {
              type: token_1.TokenName[token.type],
              value: this.getTokenRaw(token)
            };
            if (this.config.range) {
              t.range = [token.start, token.end];
            }
            if (this.config.loc) {
              t.loc = {
                start: {
                  line: this.startMarker.line,
                  column: this.startMarker.column
                },
                end: {
                  line: this.scanner.lineNumber,
                  column: this.scanner.index - this.scanner.lineStart
                }
              };
            }
            if (token.type === 9 /* RegularExpression */) {
              var pattern = token.pattern;
              var flags = token.flags;
              t.regex = {
                pattern: pattern,
                flags: flags
              };
            }
            return t;
          };
          Parser.prototype.nextToken = function () {
            var token = this.lookahead;
            this.lastMarker.index = this.scanner.index;
            this.lastMarker.line = this.scanner.lineNumber;
            this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
            this.collectComments();
            if (this.scanner.index !== this.startMarker.index) {
              this.startMarker.index = this.scanner.index;
              this.startMarker.line = this.scanner.lineNumber;
              this.startMarker.column = this.scanner.index - this.scanner.lineStart;
            }
            var next = this.scanner.lex();
            this.hasLineTerminator = token.lineNumber !== next.lineNumber;
            if (next && this.context.strict && next.type === 3 /* Identifier */) {
              if (this.scanner.isStrictModeReservedWord(next.value)) {
                next.type = 4 /* Keyword */;
              }
            }

            this.lookahead = next;
            if (this.config.tokens && next.type !== 2 /* EOF */) {
              this.tokens.push(this.convertToken(next));
            }
            return token;
          };
          Parser.prototype.nextRegexToken = function () {
            this.collectComments();
            var token = this.scanner.scanRegExp();
            if (this.config.tokens) {
              // Pop the previous token, '/' or '/='
              // This is added from the lookahead token.
              this.tokens.pop();
              this.tokens.push(this.convertToken(token));
            }
            // Prime the next lookahead.
            this.lookahead = token;
            this.nextToken();
            return token;
          };
          Parser.prototype.createNode = function () {
            return {
              index: this.startMarker.index,
              line: this.startMarker.line,
              column: this.startMarker.column
            };
          };
          Parser.prototype.startNode = function (token, lastLineStart) {
            if (lastLineStart === void 0) {
              lastLineStart = 0;
            }
            var column = token.start - token.lineStart;
            var line = token.lineNumber;
            if (column < 0) {
              column += lastLineStart;
              line--;
            }
            return {
              index: token.start,
              line: line,
              column: column
            };
          };
          Parser.prototype.finalize = function (marker, node) {
            if (this.config.range) {
              node.range = [marker.index, this.lastMarker.index];
            }
            if (this.config.loc) {
              node.loc = {
                start: {
                  line: marker.line,
                  column: marker.column
                },
                end: {
                  line: this.lastMarker.line,
                  column: this.lastMarker.column
                }
              };
              if (this.config.source) {
                node.loc.source = this.config.source;
              }
            }
            if (this.delegate) {
              var metadata = {
                start: {
                  line: marker.line,
                  column: marker.column,
                  offset: marker.index
                },
                end: {
                  line: this.lastMarker.line,
                  column: this.lastMarker.column,
                  offset: this.lastMarker.index
                }
              };
              this.delegate(node, metadata);
            }
            return node;
          };
          // Expect the next token to match the specified punctuator.
          // If not, an exception will be thrown.
          Parser.prototype.expect = function (value) {
            var token = this.nextToken();
            if (token.type !== 7 /* Punctuator */ || token.value !== value) {
              this.throwUnexpectedToken(token);
            }
          };
          // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
          Parser.prototype.expectCommaSeparator = function () {
            if (this.config.tolerant) {
              var token = this.lookahead;
              if (token.type === 7 /* Punctuator */ && token.value === ',') {
                this.nextToken();
              } else if (token.type === 7 /* Punctuator */ && token.value === ';') {
                this.nextToken();
                this.tolerateUnexpectedToken(token);
              } else {
                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
              }
            } else {
              this.expect(',');
            }
          };
          // Expect the next token to match the specified keyword.
          // If not, an exception will be thrown.
          Parser.prototype.expectKeyword = function (keyword) {
            var token = this.nextToken();
            if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
              this.throwUnexpectedToken(token);
            }
          };
          // Return true if the next token matches the specified punctuator.
          Parser.prototype.match = function (value) {
            return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
          };
          // Return true if the next token matches the specified keyword
          Parser.prototype.matchKeyword = function (keyword) {
            return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
          };
          // Return true if the next token matches the specified contextual keyword
          // (where an identifier is sometimes a keyword depending on the context)
          Parser.prototype.matchContextualKeyword = function (keyword) {
            return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
          };
          // Return true if the next token is an assignment operator
          Parser.prototype.matchAssign = function () {
            if (this.lookahead.type !== 7 /* Punctuator */) {
              return false;
            }
            var op = this.lookahead.value;
            return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
          };
          // Cover grammar support.
          //
          // When an assignment expression position starts with an left parenthesis, the determination of the type
          // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
          // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
          //
          // There are three productions that can be parsed in a parentheses pair that needs to be determined
          // after the outermost pair is closed. They are:
          //
          //   1. AssignmentExpression
          //   2. BindingElements
          //   3. AssignmentTargets
          //
          // In order to avoid exponential backtracking, we use two flags to denote if the production can be
          // binding element or assignment target.
          //
          // The three productions have the relationship:
          //
          //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
          //
          // with a single exception that CoverInitializedName when used directly in an Expression, generates
          // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
          // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
          //
          // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
          // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
          // the CoverInitializedName check is conducted.
          //
          // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
          // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
          // pattern. The CoverInitializedName check is deferred.
          Parser.prototype.isolateCoverGrammar = function (parseFunction) {
            var previousIsBindingElement = this.context.isBindingElement;
            var previousIsAssignmentTarget = this.context.isAssignmentTarget;
            var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
            this.context.isBindingElement = true;
            this.context.isAssignmentTarget = true;
            this.context.firstCoverInitializedNameError = null;
            var result = parseFunction.call(this);
            if (this.context.firstCoverInitializedNameError !== null) {
              this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
            }
            this.context.isBindingElement = previousIsBindingElement;
            this.context.isAssignmentTarget = previousIsAssignmentTarget;
            this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
            return result;
          };
          Parser.prototype.inheritCoverGrammar = function (parseFunction) {
            var previousIsBindingElement = this.context.isBindingElement;
            var previousIsAssignmentTarget = this.context.isAssignmentTarget;
            var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
            this.context.isBindingElement = true;
            this.context.isAssignmentTarget = true;
            this.context.firstCoverInitializedNameError = null;
            var result = parseFunction.call(this);
            this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
            this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
            this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
            return result;
          };
          Parser.prototype.consumeSemicolon = function () {
            if (this.match(';')) {
              this.nextToken();
            } else if (!this.hasLineTerminator) {
              if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
                this.throwUnexpectedToken(this.lookahead);
              }
              this.lastMarker.index = this.startMarker.index;
              this.lastMarker.line = this.startMarker.line;
              this.lastMarker.column = this.startMarker.column;
            }
          };
          // https://tc39.github.io/ecma262/#sec-primary-expression
          Parser.prototype.parsePrimaryExpression = function () {
            var node = this.createNode();
            var expr;
            var token, raw;
            switch (this.lookahead.type) {
              case 3 /* Identifier */:
                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
                  this.tolerateUnexpectedToken(this.lookahead);
                }
                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
                break;
              case 6 /* NumericLiteral */:
              case 8 /* StringLiteral */:
                if (this.context.strict && this.lookahead.octal) {
                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
                }
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                token = this.nextToken();
                raw = this.getTokenRaw(token);
                expr = this.finalize(node, new Node.Literal(token.value, raw));
                break;
              case 1 /* BooleanLiteral */:
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                token = this.nextToken();
                raw = this.getTokenRaw(token);
                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
                break;
              case 5 /* NullLiteral */:
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                token = this.nextToken();
                raw = this.getTokenRaw(token);
                expr = this.finalize(node, new Node.Literal(null, raw));
                break;
              case 10 /* Template */:
                expr = this.parseTemplateLiteral();
                break;
              case 7 /* Punctuator */:
                switch (this.lookahead.value) {
                  case '(':
                    this.context.isBindingElement = false;
                    expr = this.inheritCoverGrammar(this.parseGroupExpression);
                    break;
                  case '[':
                    expr = this.inheritCoverGrammar(this.parseArrayInitializer);
                    break;
                  case '{':
                    expr = this.inheritCoverGrammar(this.parseObjectInitializer);
                    break;
                  case '/':
                  case '/=':
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                    this.scanner.index = this.startMarker.index;
                    token = this.nextRegexToken();
                    raw = this.getTokenRaw(token);
                    expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
                    break;
                  default:
                    expr = this.throwUnexpectedToken(this.nextToken());
                }
                break;
              case 4 /* Keyword */:
                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
                  expr = this.parseIdentifierName();
                } else if (!this.context.strict && this.matchKeyword('let')) {
                  expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
                } else {
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  if (this.matchKeyword('function')) {
                    expr = this.parseFunctionExpression();
                  } else if (this.matchKeyword('this')) {
                    this.nextToken();
                    expr = this.finalize(node, new Node.ThisExpression());
                  } else if (this.matchKeyword('class')) {
                    expr = this.parseClassExpression();
                  } else {
                    expr = this.throwUnexpectedToken(this.nextToken());
                  }
                }
                break;
              default:
                expr = this.throwUnexpectedToken(this.nextToken());
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-array-initializer
          Parser.prototype.parseSpreadElement = function () {
            var node = this.createNode();
            this.expect('...');
            var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
            return this.finalize(node, new Node.SpreadElement(arg));
          };
          Parser.prototype.parseArrayInitializer = function () {
            var node = this.createNode();
            var elements = [];
            this.expect('[');
            while (!this.match(']')) {
              if (this.match(',')) {
                this.nextToken();
                elements.push(null);
              } else if (this.match('...')) {
                var element = this.parseSpreadElement();
                if (!this.match(']')) {
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  this.expect(',');
                }
                elements.push(element);
              } else {
                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                if (!this.match(']')) {
                  this.expect(',');
                }
              }
            }
            this.expect(']');
            return this.finalize(node, new Node.ArrayExpression(elements));
          };
          // https://tc39.github.io/ecma262/#sec-object-initializer
          Parser.prototype.parsePropertyMethod = function (params) {
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
            var previousStrict = this.context.strict;
            var previousAllowStrictDirective = this.context.allowStrictDirective;
            this.context.allowStrictDirective = params.simple;
            var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
            if (this.context.strict && params.firstRestricted) {
              this.tolerateUnexpectedToken(params.firstRestricted, params.message);
            }
            if (this.context.strict && params.stricted) {
              this.tolerateUnexpectedToken(params.stricted, params.message);
            }
            this.context.strict = previousStrict;
            this.context.allowStrictDirective = previousAllowStrictDirective;
            return body;
          };
          Parser.prototype.parsePropertyMethodFunction = function () {
            var isGenerator = false;
            var node = this.createNode();
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = true;
            var params = this.parseFormalParameters();
            var method = this.parsePropertyMethod(params);
            this.context.allowYield = previousAllowYield;
            return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
          };
          Parser.prototype.parsePropertyMethodAsyncFunction = function () {
            var node = this.createNode();
            var previousAllowYield = this.context.allowYield;
            var previousAwait = this.context.await;
            this.context.allowYield = false;
            this.context.await = true;
            var params = this.parseFormalParameters();
            var method = this.parsePropertyMethod(params);
            this.context.allowYield = previousAllowYield;
            this.context.await = previousAwait;
            return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
          };
          Parser.prototype.parseObjectPropertyKey = function () {
            var node = this.createNode();
            var token = this.nextToken();
            var key;
            switch (token.type) {
              case 8 /* StringLiteral */:
              case 6 /* NumericLiteral */:
                if (this.context.strict && token.octal) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
                }
                var raw = this.getTokenRaw(token);
                key = this.finalize(node, new Node.Literal(token.value, raw));
                break;
              case 3 /* Identifier */:
              case 1 /* BooleanLiteral */:
              case 5 /* NullLiteral */:
              case 4 /* Keyword */:
                key = this.finalize(node, new Node.Identifier(token.value));
                break;
              case 7 /* Punctuator */:
                if (token.value === '[') {
                  key = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.expect(']');
                } else {
                  key = this.throwUnexpectedToken(token);
                }
                break;
              default:
                key = this.throwUnexpectedToken(token);
            }
            return key;
          };
          Parser.prototype.isPropertyKey = function (key, value) {
            return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;
          };
          Parser.prototype.parseObjectProperty = function (hasProto) {
            var node = this.createNode();
            var token = this.lookahead;
            var kind;
            var key = null;
            var value = null;
            var computed = false;
            var method = false;
            var shorthand = false;
            var isAsync = false;
            if (token.type === 3 /* Identifier */) {
              var id = token.value;
              this.nextToken();
              computed = this.match('[');
              isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
              key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
            } else if (this.match('*')) {
              this.nextToken();
            } else {
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
            }
            var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
            if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
              kind = 'get';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              this.context.allowYield = false;
              value = this.parseGetterMethod();
            } else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
              kind = 'set';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              value = this.parseSetterMethod();
            } else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
              kind = 'init';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              value = this.parseGeneratorMethod();
              method = true;
            } else {
              if (!key) {
                this.throwUnexpectedToken(this.lookahead);
              }
              kind = 'init';
              if (this.match(':') && !isAsync) {
                if (!computed && this.isPropertyKey(key, '__proto__')) {
                  if (hasProto.value) {
                    this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
                  }
                  hasProto.value = true;
                }
                this.nextToken();
                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
              } else if (this.match('(')) {
                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                method = true;
              } else if (token.type === 3 /* Identifier */) {
                var id = this.finalize(node, new Node.Identifier(token.value));
                if (this.match('=')) {
                  this.context.firstCoverInitializedNameError = this.lookahead;
                  this.nextToken();
                  shorthand = true;
                  var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  value = this.finalize(node, new Node.AssignmentPattern(id, init));
                } else {
                  shorthand = true;
                  value = id;
                }
              } else {
                this.throwUnexpectedToken(this.nextToken());
              }
            }
            return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
          };
          Parser.prototype.parseObjectInitializer = function () {
            var node = this.createNode();
            this.expect('{');
            var properties = [];
            var hasProto = {
              value: false
            };
            while (!this.match('}')) {
              properties.push(this.parseObjectProperty(hasProto));
              if (!this.match('}')) {
                this.expectCommaSeparator();
              }
            }
            this.expect('}');
            return this.finalize(node, new Node.ObjectExpression(properties));
          };
          // https://tc39.github.io/ecma262/#sec-template-literals
          Parser.prototype.parseTemplateHead = function () {
            assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
            var node = this.createNode();
            var token = this.nextToken();
            var raw = token.value;
            var cooked = token.cooked;
            return this.finalize(node, new Node.TemplateElement({
              raw: raw,
              cooked: cooked
            }, token.tail));
          };
          Parser.prototype.parseTemplateElement = function () {
            if (this.lookahead.type !== 10 /* Template */) {
              this.throwUnexpectedToken();
            }
            var node = this.createNode();
            var token = this.nextToken();
            var raw = token.value;
            var cooked = token.cooked;
            return this.finalize(node, new Node.TemplateElement({
              raw: raw,
              cooked: cooked
            }, token.tail));
          };
          Parser.prototype.parseTemplateLiteral = function () {
            var node = this.createNode();
            var expressions = [];
            var quasis = [];
            var quasi = this.parseTemplateHead();
            quasis.push(quasi);
            while (!quasi.tail) {
              expressions.push(this.parseExpression());
              quasi = this.parseTemplateElement();
              quasis.push(quasi);
            }
            return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
          };
          // https://tc39.github.io/ecma262/#sec-grouping-operator
          Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
            switch (expr.type) {
              case syntax_1.Syntax.Identifier:
              case syntax_1.Syntax.MemberExpression:
              case syntax_1.Syntax.RestElement:
              case syntax_1.Syntax.AssignmentPattern:
                break;
              case syntax_1.Syntax.SpreadElement:
                expr.type = syntax_1.Syntax.RestElement;
                this.reinterpretExpressionAsPattern(expr.argument);
                break;
              case syntax_1.Syntax.ArrayExpression:
                expr.type = syntax_1.Syntax.ArrayPattern;
                for (var i = 0; i < expr.elements.length; i++) {
                  if (expr.elements[i] !== null) {
                    this.reinterpretExpressionAsPattern(expr.elements[i]);
                  }
                }
                break;
              case syntax_1.Syntax.ObjectExpression:
                expr.type = syntax_1.Syntax.ObjectPattern;
                for (var i = 0; i < expr.properties.length; i++) {
                  this.reinterpretExpressionAsPattern(expr.properties[i].value);
                }
                break;
              case syntax_1.Syntax.AssignmentExpression:
                expr.type = syntax_1.Syntax.AssignmentPattern;
                delete expr.operator;
                this.reinterpretExpressionAsPattern(expr.left);
                break;
            }
          };
          Parser.prototype.parseGroupExpression = function () {
            var expr;
            this.expect('(');
            if (this.match(')')) {
              this.nextToken();
              if (!this.match('=>')) {
                this.expect('=>');
              }
              expr = {
                type: ArrowParameterPlaceHolder,
                params: [],
                async: false
              };
            } else {
              var startToken = this.lookahead;
              var params = [];
              if (this.match('...')) {
                expr = this.parseRestElement(params);
                this.expect(')');
                if (!this.match('=>')) {
                  this.expect('=>');
                }
                expr = {
                  type: ArrowParameterPlaceHolder,
                  params: [expr],
                  async: false
                };
              } else {
                var arrow = false;
                this.context.isBindingElement = true;
                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
                if (this.match(',')) {
                  var expressions = [];
                  this.context.isAssignmentTarget = false;
                  expressions.push(expr);
                  while (this.lookahead.type !== 2 /* EOF */) {
                    if (!this.match(',')) {
                      break;
                    }
                    this.nextToken();
                    if (this.match(')')) {
                      this.nextToken();
                      for (var i = 0; i < expressions.length; i++) {
                        this.reinterpretExpressionAsPattern(expressions[i]);
                      }
                      arrow = true;
                      expr = {
                        type: ArrowParameterPlaceHolder,
                        params: expressions,
                        async: false
                      };
                    } else if (this.match('...')) {
                      if (!this.context.isBindingElement) {
                        this.throwUnexpectedToken(this.lookahead);
                      }
                      expressions.push(this.parseRestElement(params));
                      this.expect(')');
                      if (!this.match('=>')) {
                        this.expect('=>');
                      }
                      this.context.isBindingElement = false;
                      for (var i = 0; i < expressions.length; i++) {
                        this.reinterpretExpressionAsPattern(expressions[i]);
                      }
                      arrow = true;
                      expr = {
                        type: ArrowParameterPlaceHolder,
                        params: expressions,
                        async: false
                      };
                    } else {
                      expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                    }
                    if (arrow) {
                      break;
                    }
                  }
                  if (!arrow) {
                    expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
                  }
                }
                if (!arrow) {
                  this.expect(')');
                  if (this.match('=>')) {
                    if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
                      arrow = true;
                      expr = {
                        type: ArrowParameterPlaceHolder,
                        params: [expr],
                        async: false
                      };
                    }
                    if (!arrow) {
                      if (!this.context.isBindingElement) {
                        this.throwUnexpectedToken(this.lookahead);
                      }
                      if (expr.type === syntax_1.Syntax.SequenceExpression) {
                        for (var i = 0; i < expr.expressions.length; i++) {
                          this.reinterpretExpressionAsPattern(expr.expressions[i]);
                        }
                      } else {
                        this.reinterpretExpressionAsPattern(expr);
                      }
                      var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];
                      expr = {
                        type: ArrowParameterPlaceHolder,
                        params: parameters,
                        async: false
                      };
                    }
                  }
                  this.context.isBindingElement = false;
                }
              }
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
          Parser.prototype.parseArguments = function () {
            this.expect('(');
            var args = [];
            if (!this.match(')')) {
              while (true) {
                var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                args.push(expr);
                if (this.match(')')) {
                  break;
                }
                this.expectCommaSeparator();
                if (this.match(')')) {
                  break;
                }
              }
            }
            this.expect(')');
            return args;
          };
          Parser.prototype.isIdentifierName = function (token) {
            return token.type === 3 /* Identifier */ || token.type === 4 /* Keyword */ || token.type === 1 /* BooleanLiteral */ || token.type === 5 /* NullLiteral */;
          };

          Parser.prototype.parseIdentifierName = function () {
            var node = this.createNode();
            var token = this.nextToken();
            if (!this.isIdentifierName(token)) {
              this.throwUnexpectedToken(token);
            }
            return this.finalize(node, new Node.Identifier(token.value));
          };
          Parser.prototype.parseNewExpression = function () {
            var node = this.createNode();
            var id = this.parseIdentifierName();
            assert_1.assert(id.name === 'new', 'New expression must start with `new`');
            var expr;
            if (this.match('.')) {
              this.nextToken();
              if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
                var property = this.parseIdentifierName();
                expr = new Node.MetaProperty(id, property);
              } else {
                this.throwUnexpectedToken(this.lookahead);
              }
            } else {
              var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
              var args = this.match('(') ? this.parseArguments() : [];
              expr = new Node.NewExpression(callee, args);
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
            }
            return this.finalize(node, expr);
          };
          Parser.prototype.parseAsyncArgument = function () {
            var arg = this.parseAssignmentExpression();
            this.context.firstCoverInitializedNameError = null;
            return arg;
          };
          Parser.prototype.parseAsyncArguments = function () {
            this.expect('(');
            var args = [];
            if (!this.match(')')) {
              while (true) {
                var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                args.push(expr);
                if (this.match(')')) {
                  break;
                }
                this.expectCommaSeparator();
                if (this.match(')')) {
                  break;
                }
              }
            }
            this.expect(')');
            return args;
          };
          Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
            var startToken = this.lookahead;
            var maybeAsync = this.matchContextualKeyword('async');
            var previousAllowIn = this.context.allowIn;
            this.context.allowIn = true;
            var expr;
            if (this.matchKeyword('super') && this.context.inFunctionBody) {
              expr = this.createNode();
              this.nextToken();
              expr = this.finalize(expr, new Node.Super());
              if (!this.match('(') && !this.match('.') && !this.match('[')) {
                this.throwUnexpectedToken(this.lookahead);
              }
            } else {
              expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
            }
            while (true) {
              if (this.match('.')) {
                this.context.isBindingElement = false;
                this.context.isAssignmentTarget = true;
                this.expect('.');
                var property = this.parseIdentifierName();
                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
              } else if (this.match('(')) {
                var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;
                this.context.isBindingElement = false;
                this.context.isAssignmentTarget = false;
                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
                if (asyncArrow && this.match('=>')) {
                  for (var i = 0; i < args.length; ++i) {
                    this.reinterpretExpressionAsPattern(args[i]);
                  }
                  expr = {
                    type: ArrowParameterPlaceHolder,
                    params: args,
                    async: true
                  };
                }
              } else if (this.match('[')) {
                this.context.isBindingElement = false;
                this.context.isAssignmentTarget = true;
                this.expect('[');
                var property = this.isolateCoverGrammar(this.parseExpression);
                this.expect(']');
                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
              } else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
                var quasi = this.parseTemplateLiteral();
                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
              } else {
                break;
              }
            }
            this.context.allowIn = previousAllowIn;
            return expr;
          };
          Parser.prototype.parseSuper = function () {
            var node = this.createNode();
            this.expectKeyword('super');
            if (!this.match('[') && !this.match('.')) {
              this.throwUnexpectedToken(this.lookahead);
            }
            return this.finalize(node, new Node.Super());
          };
          Parser.prototype.parseLeftHandSideExpression = function () {
            assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
            var node = this.startNode(this.lookahead);
            var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
            while (true) {
              if (this.match('[')) {
                this.context.isBindingElement = false;
                this.context.isAssignmentTarget = true;
                this.expect('[');
                var property = this.isolateCoverGrammar(this.parseExpression);
                this.expect(']');
                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
              } else if (this.match('.')) {
                this.context.isBindingElement = false;
                this.context.isAssignmentTarget = true;
                this.expect('.');
                var property = this.parseIdentifierName();
                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
              } else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
                var quasi = this.parseTemplateLiteral();
                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
              } else {
                break;
              }
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-update-expressions
          Parser.prototype.parseUpdateExpression = function () {
            var expr;
            var startToken = this.lookahead;
            if (this.match('++') || this.match('--')) {
              var node = this.startNode(startToken);
              var token = this.nextToken();
              expr = this.inheritCoverGrammar(this.parseUnaryExpression);
              if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
              }
              if (!this.context.isAssignmentTarget) {
                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
              }
              var prefix = true;
              expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
            } else {
              expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
              if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
                if (this.match('++') || this.match('--')) {
                  if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                    this.tolerateError(messages_1.Messages.StrictLHSPostfix);
                  }
                  if (!this.context.isAssignmentTarget) {
                    this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                  }
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  var operator = this.nextToken().value;
                  var prefix = false;
                  expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
                }
              }
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-unary-operators
          Parser.prototype.parseAwaitExpression = function () {
            var node = this.createNode();
            this.nextToken();
            var argument = this.parseUnaryExpression();
            return this.finalize(node, new Node.AwaitExpression(argument));
          };
          Parser.prototype.parseUnaryExpression = function () {
            var expr;
            if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
              var node = this.startNode(this.lookahead);
              var token = this.nextToken();
              expr = this.inheritCoverGrammar(this.parseUnaryExpression);
              expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
              if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
                this.tolerateError(messages_1.Messages.StrictDelete);
              }
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
            } else if (this.context.await && this.matchContextualKeyword('await')) {
              expr = this.parseAwaitExpression();
            } else {
              expr = this.parseUpdateExpression();
            }
            return expr;
          };
          Parser.prototype.parseExponentiationExpression = function () {
            var startToken = this.lookahead;
            var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
            if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
              this.nextToken();
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              var left = expr;
              var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
              expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-exp-operator
          // https://tc39.github.io/ecma262/#sec-multiplicative-operators
          // https://tc39.github.io/ecma262/#sec-additive-operators
          // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
          // https://tc39.github.io/ecma262/#sec-relational-operators
          // https://tc39.github.io/ecma262/#sec-equality-operators
          // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
          // https://tc39.github.io/ecma262/#sec-binary-logical-operators
          Parser.prototype.binaryPrecedence = function (token) {
            var op = token.value;
            var precedence;
            if (token.type === 7 /* Punctuator */) {
              precedence = this.operatorPrecedence[op] || 0;
            } else if (token.type === 4 /* Keyword */) {
              precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;
            } else {
              precedence = 0;
            }
            return precedence;
          };
          Parser.prototype.parseBinaryExpression = function () {
            var startToken = this.lookahead;
            var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
            var token = this.lookahead;
            var prec = this.binaryPrecedence(token);
            if (prec > 0) {
              this.nextToken();
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              var markers = [startToken, this.lookahead];
              var left = expr;
              var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
              var stack = [left, token.value, right];
              var precedences = [prec];
              while (true) {
                prec = this.binaryPrecedence(this.lookahead);
                if (prec <= 0) {
                  break;
                }
                // Reduce: make a binary expression from the three topmost entries.
                while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {
                  right = stack.pop();
                  var operator = stack.pop();
                  precedences.pop();
                  left = stack.pop();
                  markers.pop();
                  var node = this.startNode(markers[markers.length - 1]);
                  stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
                }
                // Shift.
                stack.push(this.nextToken().value);
                precedences.push(prec);
                markers.push(this.lookahead);
                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
              }
              // Final reduce to clean-up the stack.
              var i = stack.length - 1;
              expr = stack[i];
              var lastMarker = markers.pop();
              while (i > 1) {
                var marker = markers.pop();
                var lastLineStart = lastMarker && lastMarker.lineStart;
                var node = this.startNode(marker, lastLineStart);
                var operator = stack[i - 1];
                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
                i -= 2;
                lastMarker = marker;
              }
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-conditional-operator
          Parser.prototype.parseConditionalExpression = function () {
            var startToken = this.lookahead;
            var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
            if (this.match('?')) {
              this.nextToken();
              var previousAllowIn = this.context.allowIn;
              this.context.allowIn = true;
              var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
              this.context.allowIn = previousAllowIn;
              this.expect(':');
              var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
              expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-assignment-operators
          Parser.prototype.checkPatternParam = function (options, param) {
            switch (param.type) {
              case syntax_1.Syntax.Identifier:
                this.validateParam(options, param, param.name);
                break;
              case syntax_1.Syntax.RestElement:
                this.checkPatternParam(options, param.argument);
                break;
              case syntax_1.Syntax.AssignmentPattern:
                this.checkPatternParam(options, param.left);
                break;
              case syntax_1.Syntax.ArrayPattern:
                for (var i = 0; i < param.elements.length; i++) {
                  if (param.elements[i] !== null) {
                    this.checkPatternParam(options, param.elements[i]);
                  }
                }
                break;
              case syntax_1.Syntax.ObjectPattern:
                for (var i = 0; i < param.properties.length; i++) {
                  this.checkPatternParam(options, param.properties[i].value);
                }
                break;
            }
            options.simple = options.simple && param instanceof Node.Identifier;
          };
          Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
            var params = [expr];
            var options;
            var asyncArrow = false;
            switch (expr.type) {
              case syntax_1.Syntax.Identifier:
                break;
              case ArrowParameterPlaceHolder:
                params = expr.params;
                asyncArrow = expr.async;
                break;
              default:
                return null;
            }
            options = {
              simple: true,
              paramSet: {}
            };
            for (var i = 0; i < params.length; ++i) {
              var param = params[i];
              if (param.type === syntax_1.Syntax.AssignmentPattern) {
                if (param.right.type === syntax_1.Syntax.YieldExpression) {
                  if (param.right.argument) {
                    this.throwUnexpectedToken(this.lookahead);
                  }
                  param.right.type = syntax_1.Syntax.Identifier;
                  param.right.name = 'yield';
                  delete param.right.argument;
                  delete param.right.delegate;
                }
              } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
                this.throwUnexpectedToken(this.lookahead);
              }
              this.checkPatternParam(options, param);
              params[i] = param;
            }
            if (this.context.strict || !this.context.allowYield) {
              for (var i = 0; i < params.length; ++i) {
                var param = params[i];
                if (param.type === syntax_1.Syntax.YieldExpression) {
                  this.throwUnexpectedToken(this.lookahead);
                }
              }
            }
            if (options.message === messages_1.Messages.StrictParamDupe) {
              var token = this.context.strict ? options.stricted : options.firstRestricted;
              this.throwUnexpectedToken(token, options.message);
            }
            return {
              simple: options.simple,
              params: params,
              stricted: options.stricted,
              firstRestricted: options.firstRestricted,
              message: options.message
            };
          };
          Parser.prototype.parseAssignmentExpression = function () {
            var expr;
            if (!this.context.allowYield && this.matchKeyword('yield')) {
              expr = this.parseYieldExpression();
            } else {
              var startToken = this.lookahead;
              var token = startToken;
              expr = this.parseConditionalExpression();
              if (token.type === 3 /* Identifier */ && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {
                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
                  var arg = this.parsePrimaryExpression();
                  this.reinterpretExpressionAsPattern(arg);
                  expr = {
                    type: ArrowParameterPlaceHolder,
                    params: [arg],
                    async: true
                  };
                }
              }
              if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                var isAsync = expr.async;
                var list = this.reinterpretAsCoverFormalsList(expr);
                if (list) {
                  if (this.hasLineTerminator) {
                    this.tolerateUnexpectedToken(this.lookahead);
                  }
                  this.context.firstCoverInitializedNameError = null;
                  var previousStrict = this.context.strict;
                  var previousAllowStrictDirective = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = list.simple;
                  var previousAllowYield = this.context.allowYield;
                  var previousAwait = this.context.await;
                  this.context.allowYield = true;
                  this.context.await = isAsync;
                  var node = this.startNode(startToken);
                  this.expect('=>');
                  var body = void 0;
                  if (this.match('{')) {
                    var previousAllowIn = this.context.allowIn;
                    this.context.allowIn = true;
                    body = this.parseFunctionSourceElements();
                    this.context.allowIn = previousAllowIn;
                  } else {
                    body = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  }
                  var expression = body.type !== syntax_1.Syntax.BlockStatement;
                  if (this.context.strict && list.firstRestricted) {
                    this.throwUnexpectedToken(list.firstRestricted, list.message);
                  }
                  if (this.context.strict && list.stricted) {
                    this.tolerateUnexpectedToken(list.stricted, list.message);
                  }
                  expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
                  this.context.strict = previousStrict;
                  this.context.allowStrictDirective = previousAllowStrictDirective;
                  this.context.allowYield = previousAllowYield;
                  this.context.await = previousAwait;
                }
              } else {
                if (this.matchAssign()) {
                  if (!this.context.isAssignmentTarget) {
                    this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                  }
                  if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
                    var id = expr;
                    if (this.scanner.isRestrictedWord(id.name)) {
                      this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
                    }
                    if (this.scanner.isStrictModeReservedWord(id.name)) {
                      this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                    }
                  }
                  if (!this.match('=')) {
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                  } else {
                    this.reinterpretExpressionAsPattern(expr);
                  }
                  token = this.nextToken();
                  var operator = token.value;
                  var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
                  this.context.firstCoverInitializedNameError = null;
                }
              }
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-comma-operator
          Parser.prototype.parseExpression = function () {
            var startToken = this.lookahead;
            var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
            if (this.match(',')) {
              var expressions = [];
              expressions.push(expr);
              while (this.lookahead.type !== 2 /* EOF */) {
                if (!this.match(',')) {
                  break;
                }
                this.nextToken();
                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
              }
              expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
            }
            return expr;
          };
          // https://tc39.github.io/ecma262/#sec-block
          Parser.prototype.parseStatementListItem = function () {
            var statement;
            this.context.isAssignmentTarget = true;
            this.context.isBindingElement = true;
            if (this.lookahead.type === 4 /* Keyword */) {
              switch (this.lookahead.value) {
                case 'export':
                  if (!this.context.isModule) {
                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
                  }
                  statement = this.parseExportDeclaration();
                  break;
                case 'import':
                  if (!this.context.isModule) {
                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
                  }
                  statement = this.parseImportDeclaration();
                  break;
                case 'const':
                  statement = this.parseLexicalDeclaration({
                    inFor: false
                  });
                  break;
                case 'function':
                  statement = this.parseFunctionDeclaration();
                  break;
                case 'class':
                  statement = this.parseClassDeclaration();
                  break;
                case 'let':
                  statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({
                    inFor: false
                  }) : this.parseStatement();
                  break;
                default:
                  statement = this.parseStatement();
                  break;
              }
            } else {
              statement = this.parseStatement();
            }
            return statement;
          };
          Parser.prototype.parseBlock = function () {
            var node = this.createNode();
            this.expect('{');
            var block = [];
            while (true) {
              if (this.match('}')) {
                break;
              }
              block.push(this.parseStatementListItem());
            }
            this.expect('}');
            return this.finalize(node, new Node.BlockStatement(block));
          };
          // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
          Parser.prototype.parseLexicalBinding = function (kind, options) {
            var node = this.createNode();
            var params = [];
            var id = this.parsePattern(params, kind);
            if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
              if (this.scanner.isRestrictedWord(id.name)) {
                this.tolerateError(messages_1.Messages.StrictVarName);
              }
            }
            var init = null;
            if (kind === 'const') {
              if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
                if (this.match('=')) {
                  this.nextToken();
                  init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                } else {
                  this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
                }
              }
            } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {
              this.expect('=');
              init = this.isolateCoverGrammar(this.parseAssignmentExpression);
            }
            return this.finalize(node, new Node.VariableDeclarator(id, init));
          };
          Parser.prototype.parseBindingList = function (kind, options) {
            var list = [this.parseLexicalBinding(kind, options)];
            while (this.match(',')) {
              this.nextToken();
              list.push(this.parseLexicalBinding(kind, options));
            }
            return list;
          };
          Parser.prototype.isLexicalDeclaration = function () {
            var state = this.scanner.saveState();
            this.scanner.scanComments();
            var next = this.scanner.lex();
            this.scanner.restoreState(state);
            return next.type === 3 /* Identifier */ || next.type === 7 /* Punctuator */ && next.value === '[' || next.type === 7 /* Punctuator */ && next.value === '{' || next.type === 4 /* Keyword */ && next.value === 'let' || next.type === 4 /* Keyword */ && next.value === 'yield';
          };
          Parser.prototype.parseLexicalDeclaration = function (options) {
            var node = this.createNode();
            var kind = this.nextToken().value;
            assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
            var declarations = this.parseBindingList(kind, options);
            this.consumeSemicolon();
            return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
          };
          // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
          Parser.prototype.parseBindingRestElement = function (params, kind) {
            var node = this.createNode();
            this.expect('...');
            var arg = this.parsePattern(params, kind);
            return this.finalize(node, new Node.RestElement(arg));
          };
          Parser.prototype.parseArrayPattern = function (params, kind) {
            var node = this.createNode();
            this.expect('[');
            var elements = [];
            while (!this.match(']')) {
              if (this.match(',')) {
                this.nextToken();
                elements.push(null);
              } else {
                if (this.match('...')) {
                  elements.push(this.parseBindingRestElement(params, kind));
                  break;
                } else {
                  elements.push(this.parsePatternWithDefault(params, kind));
                }
                if (!this.match(']')) {
                  this.expect(',');
                }
              }
            }
            this.expect(']');
            return this.finalize(node, new Node.ArrayPattern(elements));
          };
          Parser.prototype.parsePropertyPattern = function (params, kind) {
            var node = this.createNode();
            var computed = false;
            var shorthand = false;
            var method = false;
            var key;
            var value;
            if (this.lookahead.type === 3 /* Identifier */) {
              var keyToken = this.lookahead;
              key = this.parseVariableIdentifier();
              var init = this.finalize(node, new Node.Identifier(keyToken.value));
              if (this.match('=')) {
                params.push(keyToken);
                shorthand = true;
                this.nextToken();
                var expr = this.parseAssignmentExpression();
                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
              } else if (!this.match(':')) {
                params.push(keyToken);
                shorthand = true;
                value = init;
              } else {
                this.expect(':');
                value = this.parsePatternWithDefault(params, kind);
              }
            } else {
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              this.expect(':');
              value = this.parsePatternWithDefault(params, kind);
            }
            return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
          };
          Parser.prototype.parseObjectPattern = function (params, kind) {
            var node = this.createNode();
            var properties = [];
            this.expect('{');
            while (!this.match('}')) {
              properties.push(this.parsePropertyPattern(params, kind));
              if (!this.match('}')) {
                this.expect(',');
              }
            }
            this.expect('}');
            return this.finalize(node, new Node.ObjectPattern(properties));
          };
          Parser.prototype.parsePattern = function (params, kind) {
            var pattern;
            if (this.match('[')) {
              pattern = this.parseArrayPattern(params, kind);
            } else if (this.match('{')) {
              pattern = this.parseObjectPattern(params, kind);
            } else {
              if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
              }
              params.push(this.lookahead);
              pattern = this.parseVariableIdentifier(kind);
            }
            return pattern;
          };
          Parser.prototype.parsePatternWithDefault = function (params, kind) {
            var startToken = this.lookahead;
            var pattern = this.parsePattern(params, kind);
            if (this.match('=')) {
              this.nextToken();
              var previousAllowYield = this.context.allowYield;
              this.context.allowYield = true;
              var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
              this.context.allowYield = previousAllowYield;
              pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
            }
            return pattern;
          };
          // https://tc39.github.io/ecma262/#sec-variable-statement
          Parser.prototype.parseVariableIdentifier = function (kind) {
            var node = this.createNode();
            var token = this.nextToken();
            if (token.type === 4 /* Keyword */ && token.value === 'yield') {
              if (this.context.strict) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
              } else if (!this.context.allowYield) {
                this.throwUnexpectedToken(token);
              }
            } else if (token.type !== 3 /* Identifier */) {
              if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
              } else {
                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
                  this.throwUnexpectedToken(token);
                }
              }
            } else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
              this.tolerateUnexpectedToken(token);
            }
            return this.finalize(node, new Node.Identifier(token.value));
          };
          Parser.prototype.parseVariableDeclaration = function (options) {
            var node = this.createNode();
            var params = [];
            var id = this.parsePattern(params, 'var');
            if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
              if (this.scanner.isRestrictedWord(id.name)) {
                this.tolerateError(messages_1.Messages.StrictVarName);
              }
            }
            var init = null;
            if (this.match('=')) {
              this.nextToken();
              init = this.isolateCoverGrammar(this.parseAssignmentExpression);
            } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
              this.expect('=');
            }
            return this.finalize(node, new Node.VariableDeclarator(id, init));
          };
          Parser.prototype.parseVariableDeclarationList = function (options) {
            var opt = {
              inFor: options.inFor
            };
            var list = [];
            list.push(this.parseVariableDeclaration(opt));
            while (this.match(',')) {
              this.nextToken();
              list.push(this.parseVariableDeclaration(opt));
            }
            return list;
          };
          Parser.prototype.parseVariableStatement = function () {
            var node = this.createNode();
            this.expectKeyword('var');
            var declarations = this.parseVariableDeclarationList({
              inFor: false
            });
            this.consumeSemicolon();
            return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
          };
          // https://tc39.github.io/ecma262/#sec-empty-statement
          Parser.prototype.parseEmptyStatement = function () {
            var node = this.createNode();
            this.expect(';');
            return this.finalize(node, new Node.EmptyStatement());
          };
          // https://tc39.github.io/ecma262/#sec-expression-statement
          Parser.prototype.parseExpressionStatement = function () {
            var node = this.createNode();
            var expr = this.parseExpression();
            this.consumeSemicolon();
            return this.finalize(node, new Node.ExpressionStatement(expr));
          };
          // https://tc39.github.io/ecma262/#sec-if-statement
          Parser.prototype.parseIfClause = function () {
            if (this.context.strict && this.matchKeyword('function')) {
              this.tolerateError(messages_1.Messages.StrictFunction);
            }
            return this.parseStatement();
          };
          Parser.prototype.parseIfStatement = function () {
            var node = this.createNode();
            var consequent;
            var alternate = null;
            this.expectKeyword('if');
            this.expect('(');
            var test = this.parseExpression();
            if (!this.match(')') && this.config.tolerant) {
              this.tolerateUnexpectedToken(this.nextToken());
              consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
            } else {
              this.expect(')');
              consequent = this.parseIfClause();
              if (this.matchKeyword('else')) {
                this.nextToken();
                alternate = this.parseIfClause();
              }
            }
            return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
          };
          // https://tc39.github.io/ecma262/#sec-do-while-statement
          Parser.prototype.parseDoWhileStatement = function () {
            var node = this.createNode();
            this.expectKeyword('do');
            var previousInIteration = this.context.inIteration;
            this.context.inIteration = true;
            var body = this.parseStatement();
            this.context.inIteration = previousInIteration;
            this.expectKeyword('while');
            this.expect('(');
            var test = this.parseExpression();
            if (!this.match(')') && this.config.tolerant) {
              this.tolerateUnexpectedToken(this.nextToken());
            } else {
              this.expect(')');
              if (this.match(';')) {
                this.nextToken();
              }
            }
            return this.finalize(node, new Node.DoWhileStatement(body, test));
          };
          // https://tc39.github.io/ecma262/#sec-while-statement
          Parser.prototype.parseWhileStatement = function () {
            var node = this.createNode();
            var body;
            this.expectKeyword('while');
            this.expect('(');
            var test = this.parseExpression();
            if (!this.match(')') && this.config.tolerant) {
              this.tolerateUnexpectedToken(this.nextToken());
              body = this.finalize(this.createNode(), new Node.EmptyStatement());
            } else {
              this.expect(')');
              var previousInIteration = this.context.inIteration;
              this.context.inIteration = true;
              body = this.parseStatement();
              this.context.inIteration = previousInIteration;
            }
            return this.finalize(node, new Node.WhileStatement(test, body));
          };
          // https://tc39.github.io/ecma262/#sec-for-statement
          // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
          Parser.prototype.parseForStatement = function () {
            var init = null;
            var test = null;
            var update = null;
            var forIn = true;
            var left, right;
            var node = this.createNode();
            this.expectKeyword('for');
            this.expect('(');
            if (this.match(';')) {
              this.nextToken();
            } else {
              if (this.matchKeyword('var')) {
                init = this.createNode();
                this.nextToken();
                var previousAllowIn = this.context.allowIn;
                this.context.allowIn = false;
                var declarations = this.parseVariableDeclarationList({
                  inFor: true
                });
                this.context.allowIn = previousAllowIn;
                if (declarations.length === 1 && this.matchKeyword('in')) {
                  var decl = declarations[0];
                  if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
                    this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
                  }
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                  this.nextToken();
                  left = init;
                  right = this.parseExpression();
                  init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                  this.nextToken();
                  left = init;
                  right = this.parseAssignmentExpression();
                  init = null;
                  forIn = false;
                } else {
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                  this.expect(';');
                }
              } else if (this.matchKeyword('const') || this.matchKeyword('let')) {
                init = this.createNode();
                var kind = this.nextToken().value;
                if (!this.context.strict && this.lookahead.value === 'in') {
                  init = this.finalize(init, new Node.Identifier(kind));
                  this.nextToken();
                  left = init;
                  right = this.parseExpression();
                  init = null;
                } else {
                  var previousAllowIn = this.context.allowIn;
                  this.context.allowIn = false;
                  var declarations = this.parseBindingList(kind, {
                    inFor: true
                  });
                  this.context.allowIn = previousAllowIn;
                  if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
                    init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                    this.nextToken();
                    left = init;
                    right = this.parseExpression();
                    init = null;
                  } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                    init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                    this.nextToken();
                    left = init;
                    right = this.parseAssignmentExpression();
                    init = null;
                    forIn = false;
                  } else {
                    this.consumeSemicolon();
                    init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                  }
                }
              } else {
                var initStartToken = this.lookahead;
                var previousAllowIn = this.context.allowIn;
                this.context.allowIn = false;
                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
                this.context.allowIn = previousAllowIn;
                if (this.matchKeyword('in')) {
                  if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                    this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
                  }
                  this.nextToken();
                  this.reinterpretExpressionAsPattern(init);
                  left = init;
                  right = this.parseExpression();
                  init = null;
                } else if (this.matchContextualKeyword('of')) {
                  if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                    this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
                  }
                  this.nextToken();
                  this.reinterpretExpressionAsPattern(init);
                  left = init;
                  right = this.parseAssignmentExpression();
                  init = null;
                  forIn = false;
                } else {
                  if (this.match(',')) {
                    var initSeq = [init];
                    while (this.match(',')) {
                      this.nextToken();
                      initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                    }
                    init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
                  }
                  this.expect(';');
                }
              }
            }
            if (typeof left === 'undefined') {
              if (!this.match(';')) {
                test = this.parseExpression();
              }
              this.expect(';');
              if (!this.match(')')) {
                update = this.parseExpression();
              }
            }
            var body;
            if (!this.match(')') && this.config.tolerant) {
              this.tolerateUnexpectedToken(this.nextToken());
              body = this.finalize(this.createNode(), new Node.EmptyStatement());
            } else {
              this.expect(')');
              var previousInIteration = this.context.inIteration;
              this.context.inIteration = true;
              body = this.isolateCoverGrammar(this.parseStatement);
              this.context.inIteration = previousInIteration;
            }
            return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));
          };
          // https://tc39.github.io/ecma262/#sec-continue-statement
          Parser.prototype.parseContinueStatement = function () {
            var node = this.createNode();
            this.expectKeyword('continue');
            var label = null;
            if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
              var id = this.parseVariableIdentifier();
              label = id;
              var key = '$' + id.name;
              if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                this.throwError(messages_1.Messages.UnknownLabel, id.name);
              }
            }
            this.consumeSemicolon();
            if (label === null && !this.context.inIteration) {
              this.throwError(messages_1.Messages.IllegalContinue);
            }
            return this.finalize(node, new Node.ContinueStatement(label));
          };
          // https://tc39.github.io/ecma262/#sec-break-statement
          Parser.prototype.parseBreakStatement = function () {
            var node = this.createNode();
            this.expectKeyword('break');
            var label = null;
            if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
              var id = this.parseVariableIdentifier();
              var key = '$' + id.name;
              if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                this.throwError(messages_1.Messages.UnknownLabel, id.name);
              }
              label = id;
            }
            this.consumeSemicolon();
            if (label === null && !this.context.inIteration && !this.context.inSwitch) {
              this.throwError(messages_1.Messages.IllegalBreak);
            }
            return this.finalize(node, new Node.BreakStatement(label));
          };
          // https://tc39.github.io/ecma262/#sec-return-statement
          Parser.prototype.parseReturnStatement = function () {
            if (!this.context.inFunctionBody) {
              this.tolerateError(messages_1.Messages.IllegalReturn);
            }
            var node = this.createNode();
            this.expectKeyword('return');
            var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */ || this.lookahead.type === 8 /* StringLiteral */ || this.lookahead.type === 10 /* Template */;
            var argument = hasArgument ? this.parseExpression() : null;
            this.consumeSemicolon();
            return this.finalize(node, new Node.ReturnStatement(argument));
          };
          // https://tc39.github.io/ecma262/#sec-with-statement
          Parser.prototype.parseWithStatement = function () {
            if (this.context.strict) {
              this.tolerateError(messages_1.Messages.StrictModeWith);
            }
            var node = this.createNode();
            var body;
            this.expectKeyword('with');
            this.expect('(');
            var object = this.parseExpression();
            if (!this.match(')') && this.config.tolerant) {
              this.tolerateUnexpectedToken(this.nextToken());
              body = this.finalize(this.createNode(), new Node.EmptyStatement());
            } else {
              this.expect(')');
              body = this.parseStatement();
            }
            return this.finalize(node, new Node.WithStatement(object, body));
          };
          // https://tc39.github.io/ecma262/#sec-switch-statement
          Parser.prototype.parseSwitchCase = function () {
            var node = this.createNode();
            var test;
            if (this.matchKeyword('default')) {
              this.nextToken();
              test = null;
            } else {
              this.expectKeyword('case');
              test = this.parseExpression();
            }
            this.expect(':');
            var consequent = [];
            while (true) {
              if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
                break;
              }
              consequent.push(this.parseStatementListItem());
            }
            return this.finalize(node, new Node.SwitchCase(test, consequent));
          };
          Parser.prototype.parseSwitchStatement = function () {
            var node = this.createNode();
            this.expectKeyword('switch');
            this.expect('(');
            var discriminant = this.parseExpression();
            this.expect(')');
            var previousInSwitch = this.context.inSwitch;
            this.context.inSwitch = true;
            var cases = [];
            var defaultFound = false;
            this.expect('{');
            while (true) {
              if (this.match('}')) {
                break;
              }
              var clause = this.parseSwitchCase();
              if (clause.test === null) {
                if (defaultFound) {
                  this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
              }
              cases.push(clause);
            }
            this.expect('}');
            this.context.inSwitch = previousInSwitch;
            return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
          };
          // https://tc39.github.io/ecma262/#sec-labelled-statements
          Parser.prototype.parseLabelledStatement = function () {
            var node = this.createNode();
            var expr = this.parseExpression();
            var statement;
            if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {
              this.nextToken();
              var id = expr;
              var key = '$' + id.name;
              if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
              }
              this.context.labelSet[key] = true;
              var body = void 0;
              if (this.matchKeyword('class')) {
                this.tolerateUnexpectedToken(this.lookahead);
                body = this.parseClassDeclaration();
              } else if (this.matchKeyword('function')) {
                var token = this.lookahead;
                var declaration = this.parseFunctionDeclaration();
                if (this.context.strict) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
                } else if (declaration.generator) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
                }
                body = declaration;
              } else {
                body = this.parseStatement();
              }
              delete this.context.labelSet[key];
              statement = new Node.LabeledStatement(id, body);
            } else {
              this.consumeSemicolon();
              statement = new Node.ExpressionStatement(expr);
            }
            return this.finalize(node, statement);
          };
          // https://tc39.github.io/ecma262/#sec-throw-statement
          Parser.prototype.parseThrowStatement = function () {
            var node = this.createNode();
            this.expectKeyword('throw');
            if (this.hasLineTerminator) {
              this.throwError(messages_1.Messages.NewlineAfterThrow);
            }
            var argument = this.parseExpression();
            this.consumeSemicolon();
            return this.finalize(node, new Node.ThrowStatement(argument));
          };
          // https://tc39.github.io/ecma262/#sec-try-statement
          Parser.prototype.parseCatchClause = function () {
            var node = this.createNode();
            this.expectKeyword('catch');
            this.expect('(');
            if (this.match(')')) {
              this.throwUnexpectedToken(this.lookahead);
            }
            var params = [];
            var param = this.parsePattern(params);
            var paramMap = {};
            for (var i = 0; i < params.length; i++) {
              var key = '$' + params[i].value;
              if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
              }
              paramMap[key] = true;
            }
            if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
              if (this.scanner.isRestrictedWord(param.name)) {
                this.tolerateError(messages_1.Messages.StrictCatchVariable);
              }
            }
            this.expect(')');
            var body = this.parseBlock();
            return this.finalize(node, new Node.CatchClause(param, body));
          };
          Parser.prototype.parseFinallyClause = function () {
            this.expectKeyword('finally');
            return this.parseBlock();
          };
          Parser.prototype.parseTryStatement = function () {
            var node = this.createNode();
            this.expectKeyword('try');
            var block = this.parseBlock();
            var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
            var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
            if (!handler && !finalizer) {
              this.throwError(messages_1.Messages.NoCatchOrFinally);
            }
            return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
          };
          // https://tc39.github.io/ecma262/#sec-debugger-statement
          Parser.prototype.parseDebuggerStatement = function () {
            var node = this.createNode();
            this.expectKeyword('debugger');
            this.consumeSemicolon();
            return this.finalize(node, new Node.DebuggerStatement());
          };
          // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
          Parser.prototype.parseStatement = function () {
            var statement;
            switch (this.lookahead.type) {
              case 1 /* BooleanLiteral */:
              case 5 /* NullLiteral */:
              case 6 /* NumericLiteral */:
              case 8 /* StringLiteral */:
              case 10 /* Template */:
              case 9 /* RegularExpression */:
                statement = this.parseExpressionStatement();
                break;
              case 7 /* Punctuator */:
                var value = this.lookahead.value;
                if (value === '{') {
                  statement = this.parseBlock();
                } else if (value === '(') {
                  statement = this.parseExpressionStatement();
                } else if (value === ';') {
                  statement = this.parseEmptyStatement();
                } else {
                  statement = this.parseExpressionStatement();
                }
                break;
              case 3 /* Identifier */:
                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                break;
              case 4 /* Keyword */:
                switch (this.lookahead.value) {
                  case 'break':
                    statement = this.parseBreakStatement();
                    break;
                  case 'continue':
                    statement = this.parseContinueStatement();
                    break;
                  case 'debugger':
                    statement = this.parseDebuggerStatement();
                    break;
                  case 'do':
                    statement = this.parseDoWhileStatement();
                    break;
                  case 'for':
                    statement = this.parseForStatement();
                    break;
                  case 'function':
                    statement = this.parseFunctionDeclaration();
                    break;
                  case 'if':
                    statement = this.parseIfStatement();
                    break;
                  case 'return':
                    statement = this.parseReturnStatement();
                    break;
                  case 'switch':
                    statement = this.parseSwitchStatement();
                    break;
                  case 'throw':
                    statement = this.parseThrowStatement();
                    break;
                  case 'try':
                    statement = this.parseTryStatement();
                    break;
                  case 'var':
                    statement = this.parseVariableStatement();
                    break;
                  case 'while':
                    statement = this.parseWhileStatement();
                    break;
                  case 'with':
                    statement = this.parseWithStatement();
                    break;
                  default:
                    statement = this.parseExpressionStatement();
                    break;
                }
                break;
              default:
                statement = this.throwUnexpectedToken(this.lookahead);
            }
            return statement;
          };
          // https://tc39.github.io/ecma262/#sec-function-definitions
          Parser.prototype.parseFunctionSourceElements = function () {
            var node = this.createNode();
            this.expect('{');
            var body = this.parseDirectivePrologues();
            var previousLabelSet = this.context.labelSet;
            var previousInIteration = this.context.inIteration;
            var previousInSwitch = this.context.inSwitch;
            var previousInFunctionBody = this.context.inFunctionBody;
            this.context.labelSet = {};
            this.context.inIteration = false;
            this.context.inSwitch = false;
            this.context.inFunctionBody = true;
            while (this.lookahead.type !== 2 /* EOF */) {
              if (this.match('}')) {
                break;
              }
              body.push(this.parseStatementListItem());
            }
            this.expect('}');
            this.context.labelSet = previousLabelSet;
            this.context.inIteration = previousInIteration;
            this.context.inSwitch = previousInSwitch;
            this.context.inFunctionBody = previousInFunctionBody;
            return this.finalize(node, new Node.BlockStatement(body));
          };
          Parser.prototype.validateParam = function (options, param, name) {
            var key = '$' + name;
            if (this.context.strict) {
              if (this.scanner.isRestrictedWord(name)) {
                options.stricted = param;
                options.message = messages_1.Messages.StrictParamName;
              }
              if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = messages_1.Messages.StrictParamDupe;
              }
            } else if (!options.firstRestricted) {
              if (this.scanner.isRestrictedWord(name)) {
                options.firstRestricted = param;
                options.message = messages_1.Messages.StrictParamName;
              } else if (this.scanner.isStrictModeReservedWord(name)) {
                options.firstRestricted = param;
                options.message = messages_1.Messages.StrictReservedWord;
              } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = messages_1.Messages.StrictParamDupe;
              }
            }
            /* istanbul ignore next */
            if (typeof Object.defineProperty === 'function') {
              Object.defineProperty(options.paramSet, key, {
                value: true,
                enumerable: true,
                writable: true,
                configurable: true
              });
            } else {
              options.paramSet[key] = true;
            }
          };
          Parser.prototype.parseRestElement = function (params) {
            var node = this.createNode();
            this.expect('...');
            var arg = this.parsePattern(params);
            if (this.match('=')) {
              this.throwError(messages_1.Messages.DefaultRestParameter);
            }
            if (!this.match(')')) {
              this.throwError(messages_1.Messages.ParameterAfterRestParameter);
            }
            return this.finalize(node, new Node.RestElement(arg));
          };
          Parser.prototype.parseFormalParameter = function (options) {
            var params = [];
            var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
            for (var i = 0; i < params.length; i++) {
              this.validateParam(options, params[i], params[i].value);
            }
            options.simple = options.simple && param instanceof Node.Identifier;
            options.params.push(param);
          };
          Parser.prototype.parseFormalParameters = function (firstRestricted) {
            var options;
            options = {
              simple: true,
              params: [],
              firstRestricted: firstRestricted
            };
            this.expect('(');
            if (!this.match(')')) {
              options.paramSet = {};
              while (this.lookahead.type !== 2 /* EOF */) {
                this.parseFormalParameter(options);
                if (this.match(')')) {
                  break;
                }
                this.expect(',');
                if (this.match(')')) {
                  break;
                }
              }
            }
            this.expect(')');
            return {
              simple: options.simple,
              params: options.params,
              stricted: options.stricted,
              firstRestricted: options.firstRestricted,
              message: options.message
            };
          };
          Parser.prototype.matchAsyncFunction = function () {
            var match = this.matchContextualKeyword('async');
            if (match) {
              var state = this.scanner.saveState();
              this.scanner.scanComments();
              var next = this.scanner.lex();
              this.scanner.restoreState(state);
              match = state.lineNumber === next.lineNumber && next.type === 4 /* Keyword */ && next.value === 'function';
            }
            return match;
          };
          Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
            var node = this.createNode();
            var isAsync = this.matchContextualKeyword('async');
            if (isAsync) {
              this.nextToken();
            }
            this.expectKeyword('function');
            var isGenerator = isAsync ? false : this.match('*');
            if (isGenerator) {
              this.nextToken();
            }
            var message;
            var id = null;
            var firstRestricted = null;
            if (!identifierIsOptional || !this.match('(')) {
              var token = this.lookahead;
              id = this.parseVariableIdentifier();
              if (this.context.strict) {
                if (this.scanner.isRestrictedWord(token.value)) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
                }
              } else {
                if (this.scanner.isRestrictedWord(token.value)) {
                  firstRestricted = token;
                  message = messages_1.Messages.StrictFunctionName;
                } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                  firstRestricted = token;
                  message = messages_1.Messages.StrictReservedWord;
                }
              }
            }
            var previousAllowAwait = this.context.await;
            var previousAllowYield = this.context.allowYield;
            this.context.await = isAsync;
            this.context.allowYield = !isGenerator;
            var formalParameters = this.parseFormalParameters(firstRestricted);
            var params = formalParameters.params;
            var stricted = formalParameters.stricted;
            firstRestricted = formalParameters.firstRestricted;
            if (formalParameters.message) {
              message = formalParameters.message;
            }
            var previousStrict = this.context.strict;
            var previousAllowStrictDirective = this.context.allowStrictDirective;
            this.context.allowStrictDirective = formalParameters.simple;
            var body = this.parseFunctionSourceElements();
            if (this.context.strict && firstRestricted) {
              this.throwUnexpectedToken(firstRestricted, message);
            }
            if (this.context.strict && stricted) {
              this.tolerateUnexpectedToken(stricted, message);
            }
            this.context.strict = previousStrict;
            this.context.allowStrictDirective = previousAllowStrictDirective;
            this.context.await = previousAllowAwait;
            this.context.allowYield = previousAllowYield;
            return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
          };
          Parser.prototype.parseFunctionExpression = function () {
            var node = this.createNode();
            var isAsync = this.matchContextualKeyword('async');
            if (isAsync) {
              this.nextToken();
            }
            this.expectKeyword('function');
            var isGenerator = isAsync ? false : this.match('*');
            if (isGenerator) {
              this.nextToken();
            }
            var message;
            var id = null;
            var firstRestricted;
            var previousAllowAwait = this.context.await;
            var previousAllowYield = this.context.allowYield;
            this.context.await = isAsync;
            this.context.allowYield = !isGenerator;
            if (!this.match('(')) {
              var token = this.lookahead;
              id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();
              if (this.context.strict) {
                if (this.scanner.isRestrictedWord(token.value)) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
                }
              } else {
                if (this.scanner.isRestrictedWord(token.value)) {
                  firstRestricted = token;
                  message = messages_1.Messages.StrictFunctionName;
                } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                  firstRestricted = token;
                  message = messages_1.Messages.StrictReservedWord;
                }
              }
            }
            var formalParameters = this.parseFormalParameters(firstRestricted);
            var params = formalParameters.params;
            var stricted = formalParameters.stricted;
            firstRestricted = formalParameters.firstRestricted;
            if (formalParameters.message) {
              message = formalParameters.message;
            }
            var previousStrict = this.context.strict;
            var previousAllowStrictDirective = this.context.allowStrictDirective;
            this.context.allowStrictDirective = formalParameters.simple;
            var body = this.parseFunctionSourceElements();
            if (this.context.strict && firstRestricted) {
              this.throwUnexpectedToken(firstRestricted, message);
            }
            if (this.context.strict && stricted) {
              this.tolerateUnexpectedToken(stricted, message);
            }
            this.context.strict = previousStrict;
            this.context.allowStrictDirective = previousAllowStrictDirective;
            this.context.await = previousAllowAwait;
            this.context.allowYield = previousAllowYield;
            return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
          };
          // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
          Parser.prototype.parseDirective = function () {
            var token = this.lookahead;
            var node = this.createNode();
            var expr = this.parseExpression();
            var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;
            this.consumeSemicolon();
            return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
          };
          Parser.prototype.parseDirectivePrologues = function () {
            var firstRestricted = null;
            var body = [];
            while (true) {
              var token = this.lookahead;
              if (token.type !== 8 /* StringLiteral */) {
                break;
              }
              var statement = this.parseDirective();
              body.push(statement);
              var directive = statement.directive;
              if (typeof directive !== 'string') {
                break;
              }
              if (directive === 'use strict') {
                this.context.strict = true;
                if (firstRestricted) {
                  this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
                }
                if (!this.context.allowStrictDirective) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
                }
              } else {
                if (!firstRestricted && token.octal) {
                  firstRestricted = token;
                }
              }
            }
            return body;
          };
          // https://tc39.github.io/ecma262/#sec-method-definitions
          Parser.prototype.qualifiedPropertyName = function (token) {
            switch (token.type) {
              case 3 /* Identifier */:
              case 8 /* StringLiteral */:
              case 1 /* BooleanLiteral */:
              case 5 /* NullLiteral */:
              case 6 /* NumericLiteral */:
              case 4 /* Keyword */:
                return true;
              case 7 /* Punctuator */:
                return token.value === '[';
            }
            return false;
          };
          Parser.prototype.parseGetterMethod = function () {
            var node = this.createNode();
            var isGenerator = false;
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = !isGenerator;
            var formalParameters = this.parseFormalParameters();
            if (formalParameters.params.length > 0) {
              this.tolerateError(messages_1.Messages.BadGetterArity);
            }
            var method = this.parsePropertyMethod(formalParameters);
            this.context.allowYield = previousAllowYield;
            return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
          };
          Parser.prototype.parseSetterMethod = function () {
            var node = this.createNode();
            var isGenerator = false;
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = !isGenerator;
            var formalParameters = this.parseFormalParameters();
            if (formalParameters.params.length !== 1) {
              this.tolerateError(messages_1.Messages.BadSetterArity);
            } else if (formalParameters.params[0] instanceof Node.RestElement) {
              this.tolerateError(messages_1.Messages.BadSetterRestParameter);
            }
            var method = this.parsePropertyMethod(formalParameters);
            this.context.allowYield = previousAllowYield;
            return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
          };
          Parser.prototype.parseGeneratorMethod = function () {
            var node = this.createNode();
            var isGenerator = true;
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = true;
            var params = this.parseFormalParameters();
            this.context.allowYield = false;
            var method = this.parsePropertyMethod(params);
            this.context.allowYield = previousAllowYield;
            return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
          };
          // https://tc39.github.io/ecma262/#sec-generator-function-definitions
          Parser.prototype.isStartOfExpression = function () {
            var start = true;
            var value = this.lookahead.value;
            switch (this.lookahead.type) {
              case 7 /* Punctuator */:
                start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal
                break;
              case 4 /* Keyword */:
                start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';
                break;
            }
            return start;
          };
          Parser.prototype.parseYieldExpression = function () {
            var node = this.createNode();
            this.expectKeyword('yield');
            var argument = null;
            var delegate = false;
            if (!this.hasLineTerminator) {
              var previousAllowYield = this.context.allowYield;
              this.context.allowYield = false;
              delegate = this.match('*');
              if (delegate) {
                this.nextToken();
                argument = this.parseAssignmentExpression();
              } else if (this.isStartOfExpression()) {
                argument = this.parseAssignmentExpression();
              }
              this.context.allowYield = previousAllowYield;
            }
            return this.finalize(node, new Node.YieldExpression(argument, delegate));
          };
          // https://tc39.github.io/ecma262/#sec-class-definitions
          Parser.prototype.parseClassElement = function (hasConstructor) {
            var token = this.lookahead;
            var node = this.createNode();
            var kind = '';
            var key = null;
            var value = null;
            var computed = false;
            var method = false;
            var isStatic = false;
            var isAsync = false;
            if (this.match('*')) {
              this.nextToken();
            } else {
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              var id = key;
              if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
                token = this.lookahead;
                isStatic = true;
                computed = this.match('[');
                if (this.match('*')) {
                  this.nextToken();
                } else {
                  key = this.parseObjectPropertyKey();
                }
              }
              if (token.type === 3 /* Identifier */ && !this.hasLineTerminator && token.value === 'async') {
                var punctuator = this.lookahead.value;
                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
                  isAsync = true;
                  token = this.lookahead;
                  key = this.parseObjectPropertyKey();
                  if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
                  }
                }
              }
            }
            var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
            if (token.type === 3 /* Identifier */) {
              if (token.value === 'get' && lookaheadPropertyKey) {
                kind = 'get';
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                this.context.allowYield = false;
                value = this.parseGetterMethod();
              } else if (token.value === 'set' && lookaheadPropertyKey) {
                kind = 'set';
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                value = this.parseSetterMethod();
              }
            } else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
              kind = 'init';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              value = this.parseGeneratorMethod();
              method = true;
            }
            if (!kind && key && this.match('(')) {
              kind = 'init';
              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
              method = true;
            }
            if (!kind) {
              this.throwUnexpectedToken(this.lookahead);
            }
            if (kind === 'init') {
              kind = 'method';
            }
            if (!computed) {
              if (isStatic && this.isPropertyKey(key, 'prototype')) {
                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
              }
              if (!isStatic && this.isPropertyKey(key, 'constructor')) {
                if (kind !== 'method' || !method || value && value.generator) {
                  this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
                }
                if (hasConstructor.value) {
                  this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
                } else {
                  hasConstructor.value = true;
                }
                kind = 'constructor';
              }
            }
            return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
          };
          Parser.prototype.parseClassElementList = function () {
            var body = [];
            var hasConstructor = {
              value: false
            };
            this.expect('{');
            while (!this.match('}')) {
              if (this.match(';')) {
                this.nextToken();
              } else {
                body.push(this.parseClassElement(hasConstructor));
              }
            }
            this.expect('}');
            return body;
          };
          Parser.prototype.parseClassBody = function () {
            var node = this.createNode();
            var elementList = this.parseClassElementList();
            return this.finalize(node, new Node.ClassBody(elementList));
          };
          Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
            var node = this.createNode();
            var previousStrict = this.context.strict;
            this.context.strict = true;
            this.expectKeyword('class');
            var id = identifierIsOptional && this.lookahead.type !== 3 /* Identifier */ ? null : this.parseVariableIdentifier();
            var superClass = null;
            if (this.matchKeyword('extends')) {
              this.nextToken();
              superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
            }
            var classBody = this.parseClassBody();
            this.context.strict = previousStrict;
            return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
          };
          Parser.prototype.parseClassExpression = function () {
            var node = this.createNode();
            var previousStrict = this.context.strict;
            this.context.strict = true;
            this.expectKeyword('class');
            var id = this.lookahead.type === 3 /* Identifier */ ? this.parseVariableIdentifier() : null;
            var superClass = null;
            if (this.matchKeyword('extends')) {
              this.nextToken();
              superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
            }
            var classBody = this.parseClassBody();
            this.context.strict = previousStrict;
            return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
          };
          // https://tc39.github.io/ecma262/#sec-scripts
          // https://tc39.github.io/ecma262/#sec-modules
          Parser.prototype.parseModule = function () {
            this.context.strict = true;
            this.context.isModule = true;
            this.scanner.isModule = true;
            var node = this.createNode();
            var body = this.parseDirectivePrologues();
            while (this.lookahead.type !== 2 /* EOF */) {
              body.push(this.parseStatementListItem());
            }
            return this.finalize(node, new Node.Module(body));
          };
          Parser.prototype.parseScript = function () {
            var node = this.createNode();
            var body = this.parseDirectivePrologues();
            while (this.lookahead.type !== 2 /* EOF */) {
              body.push(this.parseStatementListItem());
            }
            return this.finalize(node, new Node.Script(body));
          };
          // https://tc39.github.io/ecma262/#sec-imports
          Parser.prototype.parseModuleSpecifier = function () {
            var node = this.createNode();
            if (this.lookahead.type !== 8 /* StringLiteral */) {
              this.throwError(messages_1.Messages.InvalidModuleSpecifier);
            }
            var token = this.nextToken();
            var raw = this.getTokenRaw(token);
            return this.finalize(node, new Node.Literal(token.value, raw));
          };
          // import {<foo as bar>} ...;
          Parser.prototype.parseImportSpecifier = function () {
            var node = this.createNode();
            var imported;
            var local;
            if (this.lookahead.type === 3 /* Identifier */) {
              imported = this.parseVariableIdentifier();
              local = imported;
              if (this.matchContextualKeyword('as')) {
                this.nextToken();
                local = this.parseVariableIdentifier();
              }
            } else {
              imported = this.parseIdentifierName();
              local = imported;
              if (this.matchContextualKeyword('as')) {
                this.nextToken();
                local = this.parseVariableIdentifier();
              } else {
                this.throwUnexpectedToken(this.nextToken());
              }
            }
            return this.finalize(node, new Node.ImportSpecifier(local, imported));
          };
          // {foo, bar as bas}
          Parser.prototype.parseNamedImports = function () {
            this.expect('{');
            var specifiers = [];
            while (!this.match('}')) {
              specifiers.push(this.parseImportSpecifier());
              if (!this.match('}')) {
                this.expect(',');
              }
            }
            this.expect('}');
            return specifiers;
          };
          // import <foo> ...;
          Parser.prototype.parseImportDefaultSpecifier = function () {
            var node = this.createNode();
            var local = this.parseIdentifierName();
            return this.finalize(node, new Node.ImportDefaultSpecifier(local));
          };
          // import <* as foo> ...;
          Parser.prototype.parseImportNamespaceSpecifier = function () {
            var node = this.createNode();
            this.expect('*');
            if (!this.matchContextualKeyword('as')) {
              this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
            }
            this.nextToken();
            var local = this.parseIdentifierName();
            return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
          };
          Parser.prototype.parseImportDeclaration = function () {
            if (this.context.inFunctionBody) {
              this.throwError(messages_1.Messages.IllegalImportDeclaration);
            }
            var node = this.createNode();
            this.expectKeyword('import');
            var src;
            var specifiers = [];
            if (this.lookahead.type === 8 /* StringLiteral */) {
              // import 'foo';
              src = this.parseModuleSpecifier();
            } else {
              if (this.match('{')) {
                // import {bar}
                specifiers = specifiers.concat(this.parseNamedImports());
              } else if (this.match('*')) {
                // import * as foo
                specifiers.push(this.parseImportNamespaceSpecifier());
              } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
                // import foo
                specifiers.push(this.parseImportDefaultSpecifier());
                if (this.match(',')) {
                  this.nextToken();
                  if (this.match('*')) {
                    // import foo, * as foo
                    specifiers.push(this.parseImportNamespaceSpecifier());
                  } else if (this.match('{')) {
                    // import foo, {bar}
                    specifiers = specifiers.concat(this.parseNamedImports());
                  } else {
                    this.throwUnexpectedToken(this.lookahead);
                  }
                }
              } else {
                this.throwUnexpectedToken(this.nextToken());
              }
              if (!this.matchContextualKeyword('from')) {
                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                this.throwError(message, this.lookahead.value);
              }
              this.nextToken();
              src = this.parseModuleSpecifier();
            }
            this.consumeSemicolon();
            return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
          };
          // https://tc39.github.io/ecma262/#sec-exports
          Parser.prototype.parseExportSpecifier = function () {
            var node = this.createNode();
            var local = this.parseIdentifierName();
            var exported = local;
            if (this.matchContextualKeyword('as')) {
              this.nextToken();
              exported = this.parseIdentifierName();
            }
            return this.finalize(node, new Node.ExportSpecifier(local, exported));
          };
          Parser.prototype.parseExportDeclaration = function () {
            if (this.context.inFunctionBody) {
              this.throwError(messages_1.Messages.IllegalExportDeclaration);
            }
            var node = this.createNode();
            this.expectKeyword('export');
            var exportDeclaration;
            if (this.matchKeyword('default')) {
              // export default ...
              this.nextToken();
              if (this.matchKeyword('function')) {
                // export default function foo () {}
                // export default function () {}
                var declaration = this.parseFunctionDeclaration(true);
                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
              } else if (this.matchKeyword('class')) {
                // export default class foo {}
                var declaration = this.parseClassDeclaration(true);
                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
              } else if (this.matchContextualKeyword('async')) {
                // export default async function f () {}
                // export default async function () {}
                // export default async x => x
                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
              } else {
                if (this.matchContextualKeyword('from')) {
                  this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
                }
                // export default {};
                // export default [];
                // export default (1 + 2);
                var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
                this.consumeSemicolon();
                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
              }
            } else if (this.match('*')) {
              // export * from 'foo';
              this.nextToken();
              if (!this.matchContextualKeyword('from')) {
                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                this.throwError(message, this.lookahead.value);
              }
              this.nextToken();
              var src = this.parseModuleSpecifier();
              this.consumeSemicolon();
              exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
            } else if (this.lookahead.type === 4 /* Keyword */) {
              // export var f = 1;
              var declaration = void 0;
              switch (this.lookahead.value) {
                case 'let':
                case 'const':
                  declaration = this.parseLexicalDeclaration({
                    inFor: false
                  });
                  break;
                case 'var':
                case 'class':
                case 'function':
                  declaration = this.parseStatementListItem();
                  break;
                default:
                  this.throwUnexpectedToken(this.lookahead);
              }
              exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
            } else if (this.matchAsyncFunction()) {
              var declaration = this.parseFunctionDeclaration();
              exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
            } else {
              var specifiers = [];
              var source = null;
              var isExportFromIdentifier = false;
              this.expect('{');
              while (!this.match('}')) {
                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
                specifiers.push(this.parseExportSpecifier());
                if (!this.match('}')) {
                  this.expect(',');
                }
              }
              this.expect('}');
              if (this.matchContextualKeyword('from')) {
                // export {default} from 'foo';
                // export {foo} from 'foo';
                this.nextToken();
                source = this.parseModuleSpecifier();
                this.consumeSemicolon();
              } else if (isExportFromIdentifier) {
                // export {default}; // missing fromClause
                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                this.throwError(message, this.lookahead.value);
              } else {
                // export {foo};
                this.consumeSemicolon();
              }
              exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
            }
            return exportDeclaration;
          };
          return Parser;
        }();
        exports.Parser = Parser;

        /***/
      }, /* 9 */
      /***/function (module, exports) {

        // Ensure the condition is true, otherwise throw an error.
        // This is only to have a better contract semantic, i.e. another safety net
        // to catch a logic error. The condition shall be fulfilled in normal case.
        // Do NOT use this to enforce a certain condition on any user input.
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        function assert(condition, message) {
          /* istanbul ignore if */
          if (!condition) {
            throw new Error('ASSERT: ' + message);
          }
        }
        exports.assert = assert;

        /***/
      }, /* 10 */
      /***/function (module, exports) {

        /* tslint:disable:max-classes-per-file */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var ErrorHandler = function () {
          function ErrorHandler() {
            this.errors = [];
            this.tolerant = false;
          }
          ErrorHandler.prototype.recordError = function (error) {
            this.errors.push(error);
          };
          ErrorHandler.prototype.tolerate = function (error) {
            if (this.tolerant) {
              this.recordError(error);
            } else {
              throw error;
            }
          };
          ErrorHandler.prototype.constructError = function (msg, column) {
            var error = new Error(msg);
            try {
              throw error;
            } catch (base) {
              /* istanbul ignore else */
              if (Object.create && Object.defineProperty) {
                error = Object.create(base);
                Object.defineProperty(error, 'column', {
                  value: column
                });
              }
            }
            /* istanbul ignore next */
            return error;
          };
          ErrorHandler.prototype.createError = function (index, line, col, description) {
            var msg = 'Line ' + line + ': ' + description;
            var error = this.constructError(msg, col);
            error.index = index;
            error.lineNumber = line;
            error.description = description;
            return error;
          };
          ErrorHandler.prototype.throwError = function (index, line, col, description) {
            throw this.createError(index, line, col, description);
          };
          ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
            var error = this.createError(index, line, col, description);
            if (this.tolerant) {
              this.recordError(error);
            } else {
              throw error;
            }
          };
          return ErrorHandler;
        }();
        exports.ErrorHandler = ErrorHandler;

        /***/
      }, /* 11 */
      /***/function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        // Error messages should be identical to V8.
        exports.Messages = {
          BadGetterArity: 'Getter must not have any formal parameters',
          BadSetterArity: 'Setter must have exactly one formal parameter',
          BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
          ConstructorIsAsync: 'Class constructor may not be an async method',
          ConstructorSpecialMethod: 'Class constructor may not be an accessor',
          DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
          DefaultRestParameter: 'Unexpected token =',
          DuplicateBinding: 'Duplicate binding %0',
          DuplicateConstructor: 'A class may only have one constructor',
          DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
          ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
          GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
          IllegalBreak: 'Illegal break statement',
          IllegalContinue: 'Illegal continue statement',
          IllegalExportDeclaration: 'Unexpected token',
          IllegalImportDeclaration: 'Unexpected token',
          IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
          IllegalReturn: 'Illegal return statement',
          InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
          InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
          InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
          InvalidLHSInForIn: 'Invalid left-hand side in for-in',
          InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
          InvalidModuleSpecifier: 'Unexpected token',
          InvalidRegExp: 'Invalid regular expression',
          LetInLexicalBinding: 'let is disallowed as a lexically bound name',
          MissingFromClause: 'Unexpected token',
          MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
          NewlineAfterThrow: 'Illegal newline after throw',
          NoAsAfterImportNamespace: 'Unexpected token',
          NoCatchOrFinally: 'Missing catch or finally after try',
          ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
          Redeclaration: '%0 \'%1\' has already been declared',
          StaticPrototype: 'Classes may not have static property named prototype',
          StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
          StrictDelete: 'Delete of an unqualified identifier in strict mode.',
          StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
          StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
          StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
          StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
          StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
          StrictModeWith: 'Strict mode code may not include a with statement',
          StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
          StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
          StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
          StrictReservedWord: 'Use of future reserved word in strict mode',
          StrictVarName: 'Variable name may not be eval or arguments in strict mode',
          TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
          UnexpectedEOS: 'Unexpected end of input',
          UnexpectedIdentifier: 'Unexpected identifier',
          UnexpectedNumber: 'Unexpected number',
          UnexpectedReserved: 'Unexpected reserved word',
          UnexpectedString: 'Unexpected string',
          UnexpectedTemplate: 'Unexpected quasi %0',
          UnexpectedToken: 'Unexpected token %0',
          UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
          UnknownLabel: 'Undefined label \'%0\'',
          UnterminatedRegExp: 'Invalid regular expression: missing /'
        };

        /***/
      }, /* 12 */
      /***/function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var assert_1 = __webpack_require__(9);
        var character_1 = __webpack_require__(4);
        var messages_1 = __webpack_require__(11);
        function hexValue(ch) {
          return '0123456789abcdef'.indexOf(ch.toLowerCase());
        }
        function octalValue(ch) {
          return '01234567'.indexOf(ch);
        }
        var Scanner = function () {
          function Scanner(code, handler) {
            this.source = code;
            this.errorHandler = handler;
            this.trackComment = false;
            this.isModule = false;
            this.length = code.length;
            this.index = 0;
            this.lineNumber = code.length > 0 ? 1 : 0;
            this.lineStart = 0;
            this.curlyStack = [];
          }
          Scanner.prototype.saveState = function () {
            return {
              index: this.index,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart
            };
          };
          Scanner.prototype.restoreState = function (state) {
            this.index = state.index;
            this.lineNumber = state.lineNumber;
            this.lineStart = state.lineStart;
          };
          Scanner.prototype.eof = function () {
            return this.index >= this.length;
          };
          Scanner.prototype.throwUnexpectedToken = function (message) {
            if (message === void 0) {
              message = messages_1.Messages.UnexpectedTokenIllegal;
            }
            return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
          };
          Scanner.prototype.tolerateUnexpectedToken = function (message) {
            if (message === void 0) {
              message = messages_1.Messages.UnexpectedTokenIllegal;
            }
            this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
          };
          // https://tc39.github.io/ecma262/#sec-comments
          Scanner.prototype.skipSingleLineComment = function (offset) {
            var comments = [];
            var start, loc;
            if (this.trackComment) {
              comments = [];
              start = this.index - offset;
              loc = {
                start: {
                  line: this.lineNumber,
                  column: this.index - this.lineStart - offset
                },
                end: {}
              };
            }
            while (!this.eof()) {
              var ch = this.source.charCodeAt(this.index);
              ++this.index;
              if (character_1.Character.isLineTerminator(ch)) {
                if (this.trackComment) {
                  loc.end = {
                    line: this.lineNumber,
                    column: this.index - this.lineStart - 1
                  };
                  var entry = {
                    multiLine: false,
                    slice: [start + offset, this.index - 1],
                    range: [start, this.index - 1],
                    loc: loc
                  };
                  comments.push(entry);
                }
                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
                  ++this.index;
                }
                ++this.lineNumber;
                this.lineStart = this.index;
                return comments;
              }
            }
            if (this.trackComment) {
              loc.end = {
                line: this.lineNumber,
                column: this.index - this.lineStart
              };
              var entry = {
                multiLine: false,
                slice: [start + offset, this.index],
                range: [start, this.index],
                loc: loc
              };
              comments.push(entry);
            }
            return comments;
          };
          Scanner.prototype.skipMultiLineComment = function () {
            var comments = [];
            var start, loc;
            if (this.trackComment) {
              comments = [];
              start = this.index - 2;
              loc = {
                start: {
                  line: this.lineNumber,
                  column: this.index - this.lineStart - 2
                },
                end: {}
              };
            }
            while (!this.eof()) {
              var ch = this.source.charCodeAt(this.index);
              if (character_1.Character.isLineTerminator(ch)) {
                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
                  ++this.index;
                }
                ++this.lineNumber;
                ++this.index;
                this.lineStart = this.index;
              } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
                  this.index += 2;
                  if (this.trackComment) {
                    loc.end = {
                      line: this.lineNumber,
                      column: this.index - this.lineStart
                    };
                    var entry = {
                      multiLine: true,
                      slice: [start + 2, this.index - 2],
                      range: [start, this.index],
                      loc: loc
                    };
                    comments.push(entry);
                  }
                  return comments;
                }
                ++this.index;
              } else {
                ++this.index;
              }
            }
            // Ran off the end of the file - the whole thing is a comment
            if (this.trackComment) {
              loc.end = {
                line: this.lineNumber,
                column: this.index - this.lineStart
              };
              var entry = {
                multiLine: true,
                slice: [start + 2, this.index],
                range: [start, this.index],
                loc: loc
              };
              comments.push(entry);
            }
            this.tolerateUnexpectedToken();
            return comments;
          };
          Scanner.prototype.scanComments = function () {
            var comments;
            if (this.trackComment) {
              comments = [];
            }
            var start = this.index === 0;
            while (!this.eof()) {
              var ch = this.source.charCodeAt(this.index);
              if (character_1.Character.isWhiteSpace(ch)) {
                ++this.index;
              } else if (character_1.Character.isLineTerminator(ch)) {
                ++this.index;
                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
                  ++this.index;
                }
                ++this.lineNumber;
                this.lineStart = this.index;
                start = true;
              } else if (ch === 0x2F) {
                ch = this.source.charCodeAt(this.index + 1);
                if (ch === 0x2F) {
                  this.index += 2;
                  var comment = this.skipSingleLineComment(2);
                  if (this.trackComment) {
                    comments = comments.concat(comment);
                  }
                  start = true;
                } else if (ch === 0x2A) {
                  this.index += 2;
                  var comment = this.skipMultiLineComment();
                  if (this.trackComment) {
                    comments = comments.concat(comment);
                  }
                } else {
                  break;
                }
              } else if (start && ch === 0x2D) {
                // U+003E is '>'
                if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {
                  // '-->' is a single-line comment
                  this.index += 3;
                  var comment = this.skipSingleLineComment(3);
                  if (this.trackComment) {
                    comments = comments.concat(comment);
                  }
                } else {
                  break;
                }
              } else if (ch === 0x3C && !this.isModule) {
                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
                  this.index += 4; // `<!--`
                  var comment = this.skipSingleLineComment(4);
                  if (this.trackComment) {
                    comments = comments.concat(comment);
                  }
                } else {
                  break;
                }
              } else {
                break;
              }
            }
            return comments;
          };
          // https://tc39.github.io/ecma262/#sec-future-reserved-words
          Scanner.prototype.isFutureReservedWord = function (id) {
            switch (id) {
              case 'enum':
              case 'export':
              case 'import':
              case 'super':
                return true;
              default:
                return false;
            }
          };
          Scanner.prototype.isStrictModeReservedWord = function (id) {
            switch (id) {
              case 'implements':
              case 'interface':
              case 'package':
              case 'private':
              case 'protected':
              case 'public':
              case 'static':
              case 'yield':
              case 'let':
                return true;
              default:
                return false;
            }
          };
          Scanner.prototype.isRestrictedWord = function (id) {
            return id === 'eval' || id === 'arguments';
          };
          // https://tc39.github.io/ecma262/#sec-keywords
          Scanner.prototype.isKeyword = function (id) {
            switch (id.length) {
              case 2:
                return id === 'if' || id === 'in' || id === 'do';
              case 3:
                return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';
              case 4:
                return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
              case 5:
                return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
              case 6:
                return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
              case 7:
                return id === 'default' || id === 'finally' || id === 'extends';
              case 8:
                return id === 'function' || id === 'continue' || id === 'debugger';
              case 10:
                return id === 'instanceof';
              default:
                return false;
            }
          };
          Scanner.prototype.codePointAt = function (i) {
            var cp = this.source.charCodeAt(i);
            if (cp >= 0xD800 && cp <= 0xDBFF) {
              var second = this.source.charCodeAt(i + 1);
              if (second >= 0xDC00 && second <= 0xDFFF) {
                var first = cp;
                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
              }
            }
            return cp;
          };
          Scanner.prototype.scanHexEscape = function (prefix) {
            var len = prefix === 'u' ? 4 : 2;
            var code = 0;
            for (var i = 0; i < len; ++i) {
              if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
                code = code * 16 + hexValue(this.source[this.index++]);
              } else {
                return null;
              }
            }
            return String.fromCharCode(code);
          };
          Scanner.prototype.scanUnicodeCodePointEscape = function () {
            var ch = this.source[this.index];
            var code = 0;
            // At least, one hex digit is required.
            if (ch === '}') {
              this.throwUnexpectedToken();
            }
            while (!this.eof()) {
              ch = this.source[this.index++];
              if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
                break;
              }
              code = code * 16 + hexValue(ch);
            }
            if (code > 0x10FFFF || ch !== '}') {
              this.throwUnexpectedToken();
            }
            return character_1.Character.fromCodePoint(code);
          };
          Scanner.prototype.getIdentifier = function () {
            var start = this.index++;
            while (!this.eof()) {
              var ch = this.source.charCodeAt(this.index);
              if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                this.index = start;
                return this.getComplexIdentifier();
              } else if (ch >= 0xD800 && ch < 0xDFFF) {
                // Need to handle surrogate pairs.
                this.index = start;
                return this.getComplexIdentifier();
              }
              if (character_1.Character.isIdentifierPart(ch)) {
                ++this.index;
              } else {
                break;
              }
            }
            return this.source.slice(start, this.index);
          };
          Scanner.prototype.getComplexIdentifier = function () {
            var cp = this.codePointAt(this.index);
            var id = character_1.Character.fromCodePoint(cp);
            this.index += id.length;
            // '\u' (U+005C, U+0075) denotes an escaped character.
            var ch;
            if (cp === 0x5C) {
              if (this.source.charCodeAt(this.index) !== 0x75) {
                this.throwUnexpectedToken();
              }
              ++this.index;
              if (this.source[this.index] === '{') {
                ++this.index;
                ch = this.scanUnicodeCodePointEscape();
              } else {
                ch = this.scanHexEscape('u');
                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
                  this.throwUnexpectedToken();
                }
              }
              id = ch;
            }
            while (!this.eof()) {
              cp = this.codePointAt(this.index);
              if (!character_1.Character.isIdentifierPart(cp)) {
                break;
              }
              ch = character_1.Character.fromCodePoint(cp);
              id += ch;
              this.index += ch.length;
              // '\u' (U+005C, U+0075) denotes an escaped character.
              if (cp === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (this.source.charCodeAt(this.index) !== 0x75) {
                  this.throwUnexpectedToken();
                }
                ++this.index;
                if (this.source[this.index] === '{') {
                  ++this.index;
                  ch = this.scanUnicodeCodePointEscape();
                } else {
                  ch = this.scanHexEscape('u');
                  if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                    this.throwUnexpectedToken();
                  }
                }
                id += ch;
              }
            }
            return id;
          };
          Scanner.prototype.octalToDecimal = function (ch) {
            // \0 is not octal escape sequence
            var octal = ch !== '0';
            var code = octalValue(ch);
            if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
              octal = true;
              code = code * 8 + octalValue(this.source[this.index++]);
              // 3 digits are only allowed when string starts
              // with 0, 1, 2, 3
              if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                code = code * 8 + octalValue(this.source[this.index++]);
              }
            }
            return {
              code: code,
              octal: octal
            };
          };
          // https://tc39.github.io/ecma262/#sec-names-and-keywords
          Scanner.prototype.scanIdentifier = function () {
            var type;
            var start = this.index;
            // Backslash (U+005C) starts an escaped character.
            var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier();
            // There is no keyword or literal with only one character.
            // Thus, it must be an identifier.
            if (id.length === 1) {
              type = 3 /* Identifier */;
            } else if (this.isKeyword(id)) {
              type = 4 /* Keyword */;
            } else if (id === 'null') {
              type = 5 /* NullLiteral */;
            } else if (id === 'true' || id === 'false') {
              type = 1 /* BooleanLiteral */;
            } else {
              type = 3 /* Identifier */;
            }

            if (type !== 3 /* Identifier */ && start + id.length !== this.index) {
              var restore = this.index;
              this.index = start;
              this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
              this.index = restore;
            }
            return {
              type: type,
              value: id,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          // https://tc39.github.io/ecma262/#sec-punctuators
          Scanner.prototype.scanPunctuator = function () {
            var start = this.index;
            // Check for most common single-character punctuators.
            var str = this.source[this.index];
            switch (str) {
              case '(':
              case '{':
                if (str === '{') {
                  this.curlyStack.push('{');
                }
                ++this.index;
                break;
              case '.':
                ++this.index;
                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
                  // Spread operator: ...
                  this.index += 2;
                  str = '...';
                }
                break;
              case '}':
                ++this.index;
                this.curlyStack.pop();
                break;
              case ')':
              case ';':
              case ',':
              case '[':
              case ']':
              case ':':
              case '?':
              case '~':
                ++this.index;
                break;
              default:
                // 4-character punctuator.
                str = this.source.substr(this.index, 4);
                if (str === '>>>=') {
                  this.index += 4;
                } else {
                  // 3-character punctuators.
                  str = str.substr(0, 3);
                  if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {
                    this.index += 3;
                  } else {
                    // 2-character punctuators.
                    str = str.substr(0, 2);
                    if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {
                      this.index += 2;
                    } else {
                      // 1-character punctuators.
                      str = this.source[this.index];
                      if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                        ++this.index;
                      }
                    }
                  }
                }
            }
            if (this.index === start) {
              this.throwUnexpectedToken();
            }
            return {
              type: 7 /* Punctuator */,
              value: str,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
          Scanner.prototype.scanHexLiteral = function (start) {
            var num = '';
            while (!this.eof()) {
              if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
                break;
              }
              num += this.source[this.index++];
            }
            if (num.length === 0) {
              this.throwUnexpectedToken();
            }
            if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
              this.throwUnexpectedToken();
            }
            return {
              type: 6 /* NumericLiteral */,
              value: parseInt('0x' + num, 16),
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          Scanner.prototype.scanBinaryLiteral = function (start) {
            var num = '';
            var ch;
            while (!this.eof()) {
              ch = this.source[this.index];
              if (ch !== '0' && ch !== '1') {
                break;
              }
              num += this.source[this.index++];
            }
            if (num.length === 0) {
              // only 0b or 0B
              this.throwUnexpectedToken();
            }
            if (!this.eof()) {
              ch = this.source.charCodeAt(this.index);
              /* istanbul ignore else */
              if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
                this.throwUnexpectedToken();
              }
            }
            return {
              type: 6 /* NumericLiteral */,
              value: parseInt(num, 2),
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          Scanner.prototype.scanOctalLiteral = function (prefix, start) {
            var num = '';
            var octal = false;
            if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
              octal = true;
              num = '0' + this.source[this.index++];
            } else {
              ++this.index;
            }
            while (!this.eof()) {
              if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                break;
              }
              num += this.source[this.index++];
            }
            if (!octal && num.length === 0) {
              // only 0o or 0O
              this.throwUnexpectedToken();
            }
            if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              this.throwUnexpectedToken();
            }
            return {
              type: 6 /* NumericLiteral */,
              value: parseInt(num, 8),
              octal: octal,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          Scanner.prototype.isImplicitOctalLiteral = function () {
            // Implicit octal, unless there is a non-octal digit.
            // (Annex B.1.1 on Numeric Literals)
            for (var i = this.index + 1; i < this.length; ++i) {
              var ch = this.source[i];
              if (ch === '8' || ch === '9') {
                return false;
              }
              if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                return true;
              }
            }
            return true;
          };
          Scanner.prototype.scanNumericLiteral = function () {
            var start = this.index;
            var ch = this.source[start];
            assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
            var num = '';
            if (ch !== '.') {
              num = this.source[this.index++];
              ch = this.source[this.index];
              // Hex number starts with '0x'.
              // Octal number starts with '0'.
              // Octal number in ES6 starts with '0o'.
              // Binary number in ES6 starts with '0b'.
              if (num === '0') {
                if (ch === 'x' || ch === 'X') {
                  ++this.index;
                  return this.scanHexLiteral(start);
                }
                if (ch === 'b' || ch === 'B') {
                  ++this.index;
                  return this.scanBinaryLiteral(start);
                }
                if (ch === 'o' || ch === 'O') {
                  return this.scanOctalLiteral(ch, start);
                }
                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                  if (this.isImplicitOctalLiteral()) {
                    return this.scanOctalLiteral(ch, start);
                  }
                }
              }
              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                num += this.source[this.index++];
              }
              ch = this.source[this.index];
            }
            if (ch === '.') {
              num += this.source[this.index++];
              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                num += this.source[this.index++];
              }
              ch = this.source[this.index];
            }
            if (ch === 'e' || ch === 'E') {
              num += this.source[this.index++];
              ch = this.source[this.index];
              if (ch === '+' || ch === '-') {
                num += this.source[this.index++];
              }
              if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                  num += this.source[this.index++];
                }
              } else {
                this.throwUnexpectedToken();
              }
            }
            if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
              this.throwUnexpectedToken();
            }
            return {
              type: 6 /* NumericLiteral */,
              value: parseFloat(num),
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          // https://tc39.github.io/ecma262/#sec-literals-string-literals
          Scanner.prototype.scanStringLiteral = function () {
            var start = this.index;
            var quote = this.source[start];
            assert_1.assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
            ++this.index;
            var octal = false;
            var str = '';
            while (!this.eof()) {
              var ch = this.source[this.index++];
              if (ch === quote) {
                quote = '';
                break;
              } else if (ch === '\\') {
                ch = this.source[this.index++];
                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  switch (ch) {
                    case 'u':
                      if (this.source[this.index] === '{') {
                        ++this.index;
                        str += this.scanUnicodeCodePointEscape();
                      } else {
                        var unescaped_1 = this.scanHexEscape(ch);
                        if (unescaped_1 === null) {
                          this.throwUnexpectedToken();
                        }
                        str += unescaped_1;
                      }
                      break;
                    case 'x':
                      var unescaped = this.scanHexEscape(ch);
                      if (unescaped === null) {
                        this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                      }
                      str += unescaped;
                      break;
                    case 'n':
                      str += '\n';
                      break;
                    case 'r':
                      str += '\r';
                      break;
                    case 't':
                      str += '\t';
                      break;
                    case 'b':
                      str += '\b';
                      break;
                    case 'f':
                      str += '\f';
                      break;
                    case 'v':
                      str += '\x0B';
                      break;
                    case '8':
                    case '9':
                      str += ch;
                      this.tolerateUnexpectedToken();
                      break;
                    default:
                      if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                        var octToDec = this.octalToDecimal(ch);
                        octal = octToDec.octal || octal;
                        str += String.fromCharCode(octToDec.code);
                      } else {
                        str += ch;
                      }
                      break;
                  }
                } else {
                  ++this.lineNumber;
                  if (ch === '\r' && this.source[this.index] === '\n') {
                    ++this.index;
                  }
                  this.lineStart = this.index;
                }
              } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                break;
              } else {
                str += ch;
              }
            }
            if (quote !== '') {
              this.index = start;
              this.throwUnexpectedToken();
            }
            return {
              type: 8 /* StringLiteral */,
              value: str,
              octal: octal,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
          Scanner.prototype.scanTemplate = function () {
            var cooked = '';
            var terminated = false;
            var start = this.index;
            var head = this.source[start] === '`';
            var tail = false;
            var rawOffset = 2;
            ++this.index;
            while (!this.eof()) {
              var ch = this.source[this.index++];
              if (ch === '`') {
                rawOffset = 1;
                tail = true;
                terminated = true;
                break;
              } else if (ch === '$') {
                if (this.source[this.index] === '{') {
                  this.curlyStack.push('${');
                  ++this.index;
                  terminated = true;
                  break;
                }
                cooked += ch;
              } else if (ch === '\\') {
                ch = this.source[this.index++];
                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  switch (ch) {
                    case 'n':
                      cooked += '\n';
                      break;
                    case 'r':
                      cooked += '\r';
                      break;
                    case 't':
                      cooked += '\t';
                      break;
                    case 'u':
                      if (this.source[this.index] === '{') {
                        ++this.index;
                        cooked += this.scanUnicodeCodePointEscape();
                      } else {
                        var restore = this.index;
                        var unescaped_2 = this.scanHexEscape(ch);
                        if (unescaped_2 !== null) {
                          cooked += unescaped_2;
                        } else {
                          this.index = restore;
                          cooked += ch;
                        }
                      }
                      break;
                    case 'x':
                      var unescaped = this.scanHexEscape(ch);
                      if (unescaped === null) {
                        this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                      }
                      cooked += unescaped;
                      break;
                    case 'b':
                      cooked += '\b';
                      break;
                    case 'f':
                      cooked += '\f';
                      break;
                    case 'v':
                      cooked += '\v';
                      break;
                    default:
                      if (ch === '0') {
                        if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                          // Illegal: \01 \02 and so on
                          this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                        }
                        cooked += '\0';
                      } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                        // Illegal: \1 \2
                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                      } else {
                        cooked += ch;
                      }
                      break;
                  }
                } else {
                  ++this.lineNumber;
                  if (ch === '\r' && this.source[this.index] === '\n') {
                    ++this.index;
                  }
                  this.lineStart = this.index;
                }
              } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                ++this.lineNumber;
                if (ch === '\r' && this.source[this.index] === '\n') {
                  ++this.index;
                }
                this.lineStart = this.index;
                cooked += '\n';
              } else {
                cooked += ch;
              }
            }
            if (!terminated) {
              this.throwUnexpectedToken();
            }
            if (!head) {
              this.curlyStack.pop();
            }
            return {
              type: 10 /* Template */,
              value: this.source.slice(start + 1, this.index - rawOffset),
              cooked: cooked,
              head: head,
              tail: tail,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
          Scanner.prototype.testRegExp = function (pattern, flags) {
            // The BMP character to use as a replacement for astral symbols when
            // translating an ES6 "u"-flagged pattern to an ES5-compatible
            // approximation.
            // Note: replacing with '\uFFFF' enables false positives in unlikely
            // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
            // pattern that would not be detected by this substitution.
            var astralSubstitute = '\uFFFF';
            var tmp = pattern;
            var self = this;
            if (flags.indexOf('u') >= 0) {
              tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                var codePoint = parseInt($1 || $2, 16);
                if (codePoint > 0x10FFFF) {
                  self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
                }
                if (codePoint <= 0xFFFF) {
                  return String.fromCharCode(codePoint);
                }
                return astralSubstitute;
              }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
            }
            // First, detect invalid regular expressions.
            try {
              RegExp(tmp);
            } catch (e) {
              this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
            }
            // Return a regular expression object for this pattern-flag pair, or
            // `null` in case the current environment doesn't support the flags it
            // uses.
            try {
              return new RegExp(pattern, flags);
            } catch (exception) {
              /* istanbul ignore next */
              return null;
            }
          };
          Scanner.prototype.scanRegExpBody = function () {
            var ch = this.source[this.index];
            assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
            var str = this.source[this.index++];
            var classMarker = false;
            var terminated = false;
            while (!this.eof()) {
              ch = this.source[this.index++];
              str += ch;
              if (ch === '\\') {
                ch = this.source[this.index++];
                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
                }
                str += ch;
              } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
              } else if (classMarker) {
                if (ch === ']') {
                  classMarker = false;
                }
              } else {
                if (ch === '/') {
                  terminated = true;
                  break;
                } else if (ch === '[') {
                  classMarker = true;
                }
              }
            }
            if (!terminated) {
              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
            }
            // Exclude leading and trailing slash.
            return str.substr(1, str.length - 2);
          };
          Scanner.prototype.scanRegExpFlags = function () {
            var str = '';
            var flags = '';
            while (!this.eof()) {
              var ch = this.source[this.index];
              if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                break;
              }
              ++this.index;
              if (ch === '\\' && !this.eof()) {
                ch = this.source[this.index];
                if (ch === 'u') {
                  ++this.index;
                  var restore = this.index;
                  var char = this.scanHexEscape('u');
                  if (char !== null) {
                    flags += char;
                    for (str += '\\u'; restore < this.index; ++restore) {
                      str += this.source[restore];
                    }
                  } else {
                    this.index = restore;
                    flags += 'u';
                    str += '\\u';
                  }
                  this.tolerateUnexpectedToken();
                } else {
                  str += '\\';
                  this.tolerateUnexpectedToken();
                }
              } else {
                flags += ch;
                str += ch;
              }
            }
            return flags;
          };
          Scanner.prototype.scanRegExp = function () {
            var start = this.index;
            var pattern = this.scanRegExpBody();
            var flags = this.scanRegExpFlags();
            var value = this.testRegExp(pattern, flags);
            return {
              type: 9 /* RegularExpression */,
              value: '',
              pattern: pattern,
              flags: flags,
              regex: value,
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: start,
              end: this.index
            };
          };
          Scanner.prototype.lex = function () {
            if (this.eof()) {
              return {
                type: 2 /* EOF */,
                value: '',
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: this.index,
                end: this.index
              };
            }
            var cp = this.source.charCodeAt(this.index);
            if (character_1.Character.isIdentifierStart(cp)) {
              return this.scanIdentifier();
            }
            // Very common: ( and ) and ;
            if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
              return this.scanPunctuator();
            }
            // String literal starts with single quote (U+0027) or double quote (U+0022).
            if (cp === 0x27 || cp === 0x22) {
              return this.scanStringLiteral();
            }
            // Dot (.) U+002E can also start a floating-point number, hence the need
            // to check the next character.
            if (cp === 0x2E) {
              if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
                return this.scanNumericLiteral();
              }
              return this.scanPunctuator();
            }
            if (character_1.Character.isDecimalDigit(cp)) {
              return this.scanNumericLiteral();
            }
            // Template literals start with ` (U+0060) for template head
            // or } (U+007D) for template middle or template tail.
            if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {
              return this.scanTemplate();
            }
            // Possible identifier start in a surrogate pair.
            if (cp >= 0xD800 && cp < 0xDFFF) {
              if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
                return this.scanIdentifier();
              }
            }
            return this.scanPunctuator();
          };
          return Scanner;
        }();
        exports.Scanner = Scanner;

        /***/
      }, /* 13 */
      /***/function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TokenName = {};
        exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
        exports.TokenName[2 /* EOF */] = '<end>';
        exports.TokenName[3 /* Identifier */] = 'Identifier';
        exports.TokenName[4 /* Keyword */] = 'Keyword';
        exports.TokenName[5 /* NullLiteral */] = 'Null';
        exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
        exports.TokenName[7 /* Punctuator */] = 'Punctuator';
        exports.TokenName[8 /* StringLiteral */] = 'String';
        exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
        exports.TokenName[10 /* Template */] = 'Template';

        /***/
      }, /* 14 */
      /***/function (module, exports) {

        // Generated by generate-xhtml-entities.js. DO NOT MODIFY!
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XHTMLEntities = {
          quot: '\u0022',
          amp: '\u0026',
          apos: '\u0027',
          gt: '\u003E',
          nbsp: '\u00A0',
          iexcl: '\u00A1',
          cent: '\u00A2',
          pound: '\u00A3',
          curren: '\u00A4',
          yen: '\u00A5',
          brvbar: '\u00A6',
          sect: '\u00A7',
          uml: '\u00A8',
          copy: '\u00A9',
          ordf: '\u00AA',
          laquo: '\u00AB',
          not: '\u00AC',
          shy: '\u00AD',
          reg: '\u00AE',
          macr: '\u00AF',
          deg: '\u00B0',
          plusmn: '\u00B1',
          sup2: '\u00B2',
          sup3: '\u00B3',
          acute: '\u00B4',
          micro: '\u00B5',
          para: '\u00B6',
          middot: '\u00B7',
          cedil: '\u00B8',
          sup1: '\u00B9',
          ordm: '\u00BA',
          raquo: '\u00BB',
          frac14: '\u00BC',
          frac12: '\u00BD',
          frac34: '\u00BE',
          iquest: '\u00BF',
          Agrave: '\u00C0',
          Aacute: '\u00C1',
          Acirc: '\u00C2',
          Atilde: '\u00C3',
          Auml: '\u00C4',
          Aring: '\u00C5',
          AElig: '\u00C6',
          Ccedil: '\u00C7',
          Egrave: '\u00C8',
          Eacute: '\u00C9',
          Ecirc: '\u00CA',
          Euml: '\u00CB',
          Igrave: '\u00CC',
          Iacute: '\u00CD',
          Icirc: '\u00CE',
          Iuml: '\u00CF',
          ETH: '\u00D0',
          Ntilde: '\u00D1',
          Ograve: '\u00D2',
          Oacute: '\u00D3',
          Ocirc: '\u00D4',
          Otilde: '\u00D5',
          Ouml: '\u00D6',
          times: '\u00D7',
          Oslash: '\u00D8',
          Ugrave: '\u00D9',
          Uacute: '\u00DA',
          Ucirc: '\u00DB',
          Uuml: '\u00DC',
          Yacute: '\u00DD',
          THORN: '\u00DE',
          szlig: '\u00DF',
          agrave: '\u00E0',
          aacute: '\u00E1',
          acirc: '\u00E2',
          atilde: '\u00E3',
          auml: '\u00E4',
          aring: '\u00E5',
          aelig: '\u00E6',
          ccedil: '\u00E7',
          egrave: '\u00E8',
          eacute: '\u00E9',
          ecirc: '\u00EA',
          euml: '\u00EB',
          igrave: '\u00EC',
          iacute: '\u00ED',
          icirc: '\u00EE',
          iuml: '\u00EF',
          eth: '\u00F0',
          ntilde: '\u00F1',
          ograve: '\u00F2',
          oacute: '\u00F3',
          ocirc: '\u00F4',
          otilde: '\u00F5',
          ouml: '\u00F6',
          divide: '\u00F7',
          oslash: '\u00F8',
          ugrave: '\u00F9',
          uacute: '\u00FA',
          ucirc: '\u00FB',
          uuml: '\u00FC',
          yacute: '\u00FD',
          thorn: '\u00FE',
          yuml: '\u00FF',
          OElig: '\u0152',
          oelig: '\u0153',
          Scaron: '\u0160',
          scaron: '\u0161',
          Yuml: '\u0178',
          fnof: '\u0192',
          circ: '\u02C6',
          tilde: '\u02DC',
          Alpha: '\u0391',
          Beta: '\u0392',
          Gamma: '\u0393',
          Delta: '\u0394',
          Epsilon: '\u0395',
          Zeta: '\u0396',
          Eta: '\u0397',
          Theta: '\u0398',
          Iota: '\u0399',
          Kappa: '\u039A',
          Lambda: '\u039B',
          Mu: '\u039C',
          Nu: '\u039D',
          Xi: '\u039E',
          Omicron: '\u039F',
          Pi: '\u03A0',
          Rho: '\u03A1',
          Sigma: '\u03A3',
          Tau: '\u03A4',
          Upsilon: '\u03A5',
          Phi: '\u03A6',
          Chi: '\u03A7',
          Psi: '\u03A8',
          Omega: '\u03A9',
          alpha: '\u03B1',
          beta: '\u03B2',
          gamma: '\u03B3',
          delta: '\u03B4',
          epsilon: '\u03B5',
          zeta: '\u03B6',
          eta: '\u03B7',
          theta: '\u03B8',
          iota: '\u03B9',
          kappa: '\u03BA',
          lambda: '\u03BB',
          mu: '\u03BC',
          nu: '\u03BD',
          xi: '\u03BE',
          omicron: '\u03BF',
          pi: '\u03C0',
          rho: '\u03C1',
          sigmaf: '\u03C2',
          sigma: '\u03C3',
          tau: '\u03C4',
          upsilon: '\u03C5',
          phi: '\u03C6',
          chi: '\u03C7',
          psi: '\u03C8',
          omega: '\u03C9',
          thetasym: '\u03D1',
          upsih: '\u03D2',
          piv: '\u03D6',
          ensp: '\u2002',
          emsp: '\u2003',
          thinsp: '\u2009',
          zwnj: '\u200C',
          zwj: '\u200D',
          lrm: '\u200E',
          rlm: '\u200F',
          ndash: '\u2013',
          mdash: '\u2014',
          lsquo: '\u2018',
          rsquo: '\u2019',
          sbquo: '\u201A',
          ldquo: '\u201C',
          rdquo: '\u201D',
          bdquo: '\u201E',
          dagger: '\u2020',
          Dagger: '\u2021',
          bull: '\u2022',
          hellip: '\u2026',
          permil: '\u2030',
          prime: '\u2032',
          Prime: '\u2033',
          lsaquo: '\u2039',
          rsaquo: '\u203A',
          oline: '\u203E',
          frasl: '\u2044',
          euro: '\u20AC',
          image: '\u2111',
          weierp: '\u2118',
          real: '\u211C',
          trade: '\u2122',
          alefsym: '\u2135',
          larr: '\u2190',
          uarr: '\u2191',
          rarr: '\u2192',
          darr: '\u2193',
          harr: '\u2194',
          crarr: '\u21B5',
          lArr: '\u21D0',
          uArr: '\u21D1',
          rArr: '\u21D2',
          dArr: '\u21D3',
          hArr: '\u21D4',
          forall: '\u2200',
          part: '\u2202',
          exist: '\u2203',
          empty: '\u2205',
          nabla: '\u2207',
          isin: '\u2208',
          notin: '\u2209',
          ni: '\u220B',
          prod: '\u220F',
          sum: '\u2211',
          minus: '\u2212',
          lowast: '\u2217',
          radic: '\u221A',
          prop: '\u221D',
          infin: '\u221E',
          ang: '\u2220',
          and: '\u2227',
          or: '\u2228',
          cap: '\u2229',
          cup: '\u222A',
          int: '\u222B',
          there4: '\u2234',
          sim: '\u223C',
          cong: '\u2245',
          asymp: '\u2248',
          ne: '\u2260',
          equiv: '\u2261',
          le: '\u2264',
          ge: '\u2265',
          sub: '\u2282',
          sup: '\u2283',
          nsub: '\u2284',
          sube: '\u2286',
          supe: '\u2287',
          oplus: '\u2295',
          otimes: '\u2297',
          perp: '\u22A5',
          sdot: '\u22C5',
          lceil: '\u2308',
          rceil: '\u2309',
          lfloor: '\u230A',
          rfloor: '\u230B',
          loz: '\u25CA',
          spades: '\u2660',
          clubs: '\u2663',
          hearts: '\u2665',
          diams: '\u2666',
          lang: '\u27E8',
          rang: '\u27E9'
        };

        /***/
      }, /* 15 */
      /***/function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var error_handler_1 = __webpack_require__(10);
        var scanner_1 = __webpack_require__(12);
        var token_1 = __webpack_require__(13);
        var Reader = function () {
          function Reader() {
            this.values = [];
            this.curly = this.paren = -1;
          }
          // A function following one of those tokens is an expression.
          Reader.prototype.beforeFunctionExpression = function (t) {
            return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void',
            // assignment operators
            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',',
            // binary/unary operators
            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
          };
          // Determine if forward slash (/) is an operator or part of a regular expression
          // https://github.com/mozilla/sweet.js/wiki/design
          Reader.prototype.isRegexStart = function () {
            var previous = this.values[this.values.length - 1];
            var regex = previous !== null;
            switch (previous) {
              case 'this':
              case ']':
                regex = false;
                break;
              case ')':
                var keyword = this.values[this.paren - 1];
                regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';
                break;
              case '}':
                // Dividing a function by anything makes little sense,
                // but we have to check for that.
                regex = false;
                if (this.values[this.curly - 3] === 'function') {
                  // Anonymous function, e.g. function(){} /42
                  var check = this.values[this.curly - 4];
                  regex = check ? !this.beforeFunctionExpression(check) : false;
                } else if (this.values[this.curly - 4] === 'function') {
                  // Named function, e.g. function f(){} /42/
                  var check = this.values[this.curly - 5];
                  regex = check ? !this.beforeFunctionExpression(check) : true;
                }
                break;
            }
            return regex;
          };
          Reader.prototype.push = function (token) {
            if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
              if (token.value === '{') {
                this.curly = this.values.length;
              } else if (token.value === '(') {
                this.paren = this.values.length;
              }
              this.values.push(token.value);
            } else {
              this.values.push(null);
            }
          };
          return Reader;
        }();
        var Tokenizer = function () {
          function Tokenizer(code, config) {
            this.errorHandler = new error_handler_1.ErrorHandler();
            this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;
            this.scanner = new scanner_1.Scanner(code, this.errorHandler);
            this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;
            this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;
            this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;
            this.buffer = [];
            this.reader = new Reader();
          }
          Tokenizer.prototype.errors = function () {
            return this.errorHandler.errors;
          };
          Tokenizer.prototype.getNextToken = function () {
            if (this.buffer.length === 0) {
              var comments = this.scanner.scanComments();
              if (this.scanner.trackComment) {
                for (var i = 0; i < comments.length; ++i) {
                  var e = comments[i];
                  var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
                  var comment = {
                    type: e.multiLine ? 'BlockComment' : 'LineComment',
                    value: value
                  };
                  if (this.trackRange) {
                    comment.range = e.range;
                  }
                  if (this.trackLoc) {
                    comment.loc = e.loc;
                  }
                  this.buffer.push(comment);
                }
              }
              if (!this.scanner.eof()) {
                var loc = void 0;
                if (this.trackLoc) {
                  loc = {
                    start: {
                      line: this.scanner.lineNumber,
                      column: this.scanner.index - this.scanner.lineStart
                    },
                    end: {}
                  };
                }
                var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();
                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
                this.reader.push(token);
                var entry = {
                  type: token_1.TokenName[token.type],
                  value: this.scanner.source.slice(token.start, token.end)
                };
                if (this.trackRange) {
                  entry.range = [token.start, token.end];
                }
                if (this.trackLoc) {
                  loc.end = {
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  };
                  entry.loc = loc;
                }
                if (token.type === 9 /* RegularExpression */) {
                  var pattern = token.pattern;
                  var flags = token.flags;
                  entry.regex = {
                    pattern: pattern,
                    flags: flags
                  };
                }
                this.buffer.push(entry);
              }
            }
            return this.buffer.shift();
          };
          return Tokenizer;
        }();
        exports.Tokenizer = Tokenizer;

        /***/
      }
      /******/])
    );
  });
})(esprima$2);

var escodegen = {};

var estraverse = {};

/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function (exports) {
  /*jslint vars:false, bitwise:true*/
  /*jshint indent:4*/
  /*global exports:true*/
  (function clone(exports) {

    var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;
    function deepCopy(obj) {
      var ret = {},
        key,
        val;
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          val = obj[key];
          if (typeof val === 'object' && val !== null) {
            ret[key] = deepCopy(val);
          } else {
            ret[key] = val;
          }
        }
      }
      return ret;
    }

    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License

    function upperBound(array, func) {
      var diff, len, i, current;
      len = array.length;
      i = 0;
      while (len) {
        diff = len >>> 1;
        current = i + diff;
        if (func(array[current])) {
          len = diff;
        } else {
          i = current + 1;
          len -= diff + 1;
        }
      }
      return i;
    }
    Syntax = {
      AssignmentExpression: 'AssignmentExpression',
      AssignmentPattern: 'AssignmentPattern',
      ArrayExpression: 'ArrayExpression',
      ArrayPattern: 'ArrayPattern',
      ArrowFunctionExpression: 'ArrowFunctionExpression',
      AwaitExpression: 'AwaitExpression',
      // CAUTION: It's deferred to ES7.
      BlockStatement: 'BlockStatement',
      BinaryExpression: 'BinaryExpression',
      BreakStatement: 'BreakStatement',
      CallExpression: 'CallExpression',
      CatchClause: 'CatchClause',
      ChainExpression: 'ChainExpression',
      ClassBody: 'ClassBody',
      ClassDeclaration: 'ClassDeclaration',
      ClassExpression: 'ClassExpression',
      ComprehensionBlock: 'ComprehensionBlock',
      // CAUTION: It's deferred to ES7.
      ComprehensionExpression: 'ComprehensionExpression',
      // CAUTION: It's deferred to ES7.
      ConditionalExpression: 'ConditionalExpression',
      ContinueStatement: 'ContinueStatement',
      DebuggerStatement: 'DebuggerStatement',
      DirectiveStatement: 'DirectiveStatement',
      DoWhileStatement: 'DoWhileStatement',
      EmptyStatement: 'EmptyStatement',
      ExportAllDeclaration: 'ExportAllDeclaration',
      ExportDefaultDeclaration: 'ExportDefaultDeclaration',
      ExportNamedDeclaration: 'ExportNamedDeclaration',
      ExportSpecifier: 'ExportSpecifier',
      ExpressionStatement: 'ExpressionStatement',
      ForStatement: 'ForStatement',
      ForInStatement: 'ForInStatement',
      ForOfStatement: 'ForOfStatement',
      FunctionDeclaration: 'FunctionDeclaration',
      FunctionExpression: 'FunctionExpression',
      GeneratorExpression: 'GeneratorExpression',
      // CAUTION: It's deferred to ES7.
      Identifier: 'Identifier',
      IfStatement: 'IfStatement',
      ImportExpression: 'ImportExpression',
      ImportDeclaration: 'ImportDeclaration',
      ImportDefaultSpecifier: 'ImportDefaultSpecifier',
      ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
      ImportSpecifier: 'ImportSpecifier',
      Literal: 'Literal',
      LabeledStatement: 'LabeledStatement',
      LogicalExpression: 'LogicalExpression',
      MemberExpression: 'MemberExpression',
      MetaProperty: 'MetaProperty',
      MethodDefinition: 'MethodDefinition',
      ModuleSpecifier: 'ModuleSpecifier',
      NewExpression: 'NewExpression',
      ObjectExpression: 'ObjectExpression',
      ObjectPattern: 'ObjectPattern',
      PrivateIdentifier: 'PrivateIdentifier',
      Program: 'Program',
      Property: 'Property',
      PropertyDefinition: 'PropertyDefinition',
      RestElement: 'RestElement',
      ReturnStatement: 'ReturnStatement',
      SequenceExpression: 'SequenceExpression',
      SpreadElement: 'SpreadElement',
      Super: 'Super',
      SwitchStatement: 'SwitchStatement',
      SwitchCase: 'SwitchCase',
      TaggedTemplateExpression: 'TaggedTemplateExpression',
      TemplateElement: 'TemplateElement',
      TemplateLiteral: 'TemplateLiteral',
      ThisExpression: 'ThisExpression',
      ThrowStatement: 'ThrowStatement',
      TryStatement: 'TryStatement',
      UnaryExpression: 'UnaryExpression',
      UpdateExpression: 'UpdateExpression',
      VariableDeclaration: 'VariableDeclaration',
      VariableDeclarator: 'VariableDeclarator',
      WhileStatement: 'WhileStatement',
      WithStatement: 'WithStatement',
      YieldExpression: 'YieldExpression'
    };
    VisitorKeys = {
      AssignmentExpression: ['left', 'right'],
      AssignmentPattern: ['left', 'right'],
      ArrayExpression: ['elements'],
      ArrayPattern: ['elements'],
      ArrowFunctionExpression: ['params', 'body'],
      AwaitExpression: ['argument'],
      // CAUTION: It's deferred to ES7.
      BlockStatement: ['body'],
      BinaryExpression: ['left', 'right'],
      BreakStatement: ['label'],
      CallExpression: ['callee', 'arguments'],
      CatchClause: ['param', 'body'],
      ChainExpression: ['expression'],
      ClassBody: ['body'],
      ClassDeclaration: ['id', 'superClass', 'body'],
      ClassExpression: ['id', 'superClass', 'body'],
      ComprehensionBlock: ['left', 'right'],
      // CAUTION: It's deferred to ES7.
      ComprehensionExpression: ['blocks', 'filter', 'body'],
      // CAUTION: It's deferred to ES7.
      ConditionalExpression: ['test', 'consequent', 'alternate'],
      ContinueStatement: ['label'],
      DebuggerStatement: [],
      DirectiveStatement: [],
      DoWhileStatement: ['body', 'test'],
      EmptyStatement: [],
      ExportAllDeclaration: ['source'],
      ExportDefaultDeclaration: ['declaration'],
      ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],
      ExportSpecifier: ['exported', 'local'],
      ExpressionStatement: ['expression'],
      ForStatement: ['init', 'test', 'update', 'body'],
      ForInStatement: ['left', 'right', 'body'],
      ForOfStatement: ['left', 'right', 'body'],
      FunctionDeclaration: ['id', 'params', 'body'],
      FunctionExpression: ['id', 'params', 'body'],
      GeneratorExpression: ['blocks', 'filter', 'body'],
      // CAUTION: It's deferred to ES7.
      Identifier: [],
      IfStatement: ['test', 'consequent', 'alternate'],
      ImportExpression: ['source'],
      ImportDeclaration: ['specifiers', 'source'],
      ImportDefaultSpecifier: ['local'],
      ImportNamespaceSpecifier: ['local'],
      ImportSpecifier: ['imported', 'local'],
      Literal: [],
      LabeledStatement: ['label', 'body'],
      LogicalExpression: ['left', 'right'],
      MemberExpression: ['object', 'property'],
      MetaProperty: ['meta', 'property'],
      MethodDefinition: ['key', 'value'],
      ModuleSpecifier: [],
      NewExpression: ['callee', 'arguments'],
      ObjectExpression: ['properties'],
      ObjectPattern: ['properties'],
      PrivateIdentifier: [],
      Program: ['body'],
      Property: ['key', 'value'],
      PropertyDefinition: ['key', 'value'],
      RestElement: ['argument'],
      ReturnStatement: ['argument'],
      SequenceExpression: ['expressions'],
      SpreadElement: ['argument'],
      Super: [],
      SwitchStatement: ['discriminant', 'cases'],
      SwitchCase: ['test', 'consequent'],
      TaggedTemplateExpression: ['tag', 'quasi'],
      TemplateElement: [],
      TemplateLiteral: ['quasis', 'expressions'],
      ThisExpression: [],
      ThrowStatement: ['argument'],
      TryStatement: ['block', 'handler', 'finalizer'],
      UnaryExpression: ['argument'],
      UpdateExpression: ['argument'],
      VariableDeclaration: ['declarations'],
      VariableDeclarator: ['id', 'init'],
      WhileStatement: ['test', 'body'],
      WithStatement: ['object', 'body'],
      YieldExpression: ['argument']
    };

    // unique id
    BREAK = {};
    SKIP = {};
    REMOVE = {};
    VisitorOption = {
      Break: BREAK,
      Skip: SKIP,
      Remove: REMOVE
    };
    function Reference(parent, key) {
      this.parent = parent;
      this.key = key;
    }
    Reference.prototype.replace = function replace(node) {
      this.parent[this.key] = node;
    };
    Reference.prototype.remove = function remove() {
      if (Array.isArray(this.parent)) {
        this.parent.splice(this.key, 1);
        return true;
      } else {
        this.replace(null);
        return false;
      }
    };
    function Element(node, path, wrap, ref) {
      this.node = node;
      this.path = path;
      this.wrap = wrap;
      this.ref = ref;
    }
    function Controller() {}

    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
      var i, iz, j, jz, result, element;
      function addToPath(result, path) {
        if (Array.isArray(path)) {
          for (j = 0, jz = path.length; j < jz; ++j) {
            result.push(path[j]);
          }
        } else {
          result.push(path);
        }
      }

      // root node
      if (!this.__current.path) {
        return null;
      }

      // first node is sentinel, second node is root element
      result = [];
      for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
        element = this.__leavelist[i];
        addToPath(result, element.path);
      }
      addToPath(result, this.__current.path);
      return result;
    };

    // API:
    // return type of current node
    Controller.prototype.type = function () {
      var node = this.current();
      return node.type || this.__current.wrap;
    };

    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
      var i, iz, result;

      // first node is sentinel
      result = [];
      for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
        result.push(this.__leavelist[i].node);
      }
      return result;
    };

    // API:
    // return current node
    Controller.prototype.current = function current() {
      return this.__current.node;
    };
    Controller.prototype.__execute = function __execute(callback, element) {
      var previous, result;
      result = undefined;
      previous = this.__current;
      this.__current = element;
      this.__state = null;
      if (callback) {
        result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
      }
      this.__current = previous;
      return result;
    };

    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
      this.__state = flag;
    };

    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function () {
      this.notify(SKIP);
    };

    // API:
    // break traversals
    Controller.prototype['break'] = function () {
      this.notify(BREAK);
    };

    // API:
    // remove node
    Controller.prototype.remove = function () {
      this.notify(REMOVE);
    };
    Controller.prototype.__initialize = function (root, visitor) {
      this.visitor = visitor;
      this.root = root;
      this.__worklist = [];
      this.__leavelist = [];
      this.__current = null;
      this.__state = null;
      this.__fallback = null;
      if (visitor.fallback === 'iteration') {
        this.__fallback = Object.keys;
      } else if (typeof visitor.fallback === 'function') {
        this.__fallback = visitor.fallback;
      }
      this.__keys = VisitorKeys;
      if (visitor.keys) {
        this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);
      }
    };
    function isNode(node) {
      if (node == null) {
        return false;
      }
      return typeof node === 'object' && typeof node.type === 'string';
    }
    function isProperty(nodeType, key) {
      return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
    }
    function candidateExistsInLeaveList(leavelist, candidate) {
      for (var i = leavelist.length - 1; i >= 0; --i) {
        if (leavelist[i].node === candidate) {
          return true;
        }
      }
      return false;
    }
    Controller.prototype.traverse = function traverse(root, visitor) {
      var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
      this.__initialize(root, visitor);
      sentinel = {};

      // reference
      worklist = this.__worklist;
      leavelist = this.__leavelist;

      // initialize
      worklist.push(new Element(root, null, null, null));
      leavelist.push(new Element(null, null, null, null));
      while (worklist.length) {
        element = worklist.pop();
        if (element === sentinel) {
          element = leavelist.pop();
          ret = this.__execute(visitor.leave, element);
          if (this.__state === BREAK || ret === BREAK) {
            return;
          }
          continue;
        }
        if (element.node) {
          ret = this.__execute(visitor.enter, element);
          if (this.__state === BREAK || ret === BREAK) {
            return;
          }
          worklist.push(sentinel);
          leavelist.push(element);
          if (this.__state === SKIP || ret === SKIP) {
            continue;
          }
          node = element.node;
          nodeType = node.type || element.wrap;
          candidates = this.__keys[nodeType];
          if (!candidates) {
            if (this.__fallback) {
              candidates = this.__fallback(node);
            } else {
              throw new Error('Unknown node type ' + nodeType + '.');
            }
          }
          current = candidates.length;
          while ((current -= 1) >= 0) {
            key = candidates[current];
            candidate = node[key];
            if (!candidate) {
              continue;
            }
            if (Array.isArray(candidate)) {
              current2 = candidate.length;
              while ((current2 -= 1) >= 0) {
                if (!candidate[current2]) {
                  continue;
                }
                if (candidateExistsInLeaveList(leavelist, candidate[current2])) {
                  continue;
                }
                if (isProperty(nodeType, candidates[current])) {
                  element = new Element(candidate[current2], [key, current2], 'Property', null);
                } else if (isNode(candidate[current2])) {
                  element = new Element(candidate[current2], [key, current2], null, null);
                } else {
                  continue;
                }
                worklist.push(element);
              }
            } else if (isNode(candidate)) {
              if (candidateExistsInLeaveList(leavelist, candidate)) {
                continue;
              }
              worklist.push(new Element(candidate, key, null, null));
            }
          }
        }
      }
    };
    Controller.prototype.replace = function replace(root, visitor) {
      var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
      function removeElem(element) {
        var i, key, nextElem, parent;
        if (element.ref.remove()) {
          // When the reference is an element of an array.
          key = element.ref.key;
          parent = element.ref.parent;

          // If removed from array, then decrease following items' keys.
          i = worklist.length;
          while (i--) {
            nextElem = worklist[i];
            if (nextElem.ref && nextElem.ref.parent === parent) {
              if (nextElem.ref.key < key) {
                break;
              }
              --nextElem.ref.key;
            }
          }
        }
      }
      this.__initialize(root, visitor);
      sentinel = {};

      // reference
      worklist = this.__worklist;
      leavelist = this.__leavelist;

      // initialize
      outer = {
        root: root
      };
      element = new Element(root, null, null, new Reference(outer, 'root'));
      worklist.push(element);
      leavelist.push(element);
      while (worklist.length) {
        element = worklist.pop();
        if (element === sentinel) {
          element = leavelist.pop();
          target = this.__execute(visitor.leave, element);

          // node may be replaced with null,
          // so distinguish between undefined and null in this place
          if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
            // replace
            element.ref.replace(target);
          }
          if (this.__state === REMOVE || target === REMOVE) {
            removeElem(element);
          }
          if (this.__state === BREAK || target === BREAK) {
            return outer.root;
          }
          continue;
        }
        target = this.__execute(visitor.enter, element);

        // node may be replaced with null,
        // so distinguish between undefined and null in this place
        if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
          // replace
          element.ref.replace(target);
          element.node = target;
        }
        if (this.__state === REMOVE || target === REMOVE) {
          removeElem(element);
          element.node = null;
        }
        if (this.__state === BREAK || target === BREAK) {
          return outer.root;
        }

        // node may be null
        node = element.node;
        if (!node) {
          continue;
        }
        worklist.push(sentinel);
        leavelist.push(element);
        if (this.__state === SKIP || target === SKIP) {
          continue;
        }
        nodeType = node.type || element.wrap;
        candidates = this.__keys[nodeType];
        if (!candidates) {
          if (this.__fallback) {
            candidates = this.__fallback(node);
          } else {
            throw new Error('Unknown node type ' + nodeType + '.');
          }
        }
        current = candidates.length;
        while ((current -= 1) >= 0) {
          key = candidates[current];
          candidate = node[key];
          if (!candidate) {
            continue;
          }
          if (Array.isArray(candidate)) {
            current2 = candidate.length;
            while ((current2 -= 1) >= 0) {
              if (!candidate[current2]) {
                continue;
              }
              if (isProperty(nodeType, candidates[current])) {
                element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
              } else if (isNode(candidate[current2])) {
                element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
              } else {
                continue;
              }
              worklist.push(element);
            }
          } else if (isNode(candidate)) {
            worklist.push(new Element(candidate, key, null, new Reference(node, key)));
          }
        }
      }
      return outer.root;
    };
    function traverse(root, visitor) {
      var controller = new Controller();
      return controller.traverse(root, visitor);
    }
    function replace(root, visitor) {
      var controller = new Controller();
      return controller.replace(root, visitor);
    }
    function extendCommentRange(comment, tokens) {
      var target;
      target = upperBound(tokens, function search(token) {
        return token.range[0] > comment.range[0];
      });
      comment.extendedRange = [comment.range[0], comment.range[1]];
      if (target !== tokens.length) {
        comment.extendedRange[1] = tokens[target].range[0];
      }
      target -= 1;
      if (target >= 0) {
        comment.extendedRange[0] = tokens[target].range[1];
      }
      return comment;
    }
    function attachComments(tree, providedComments, tokens) {
      // At first, we should calculate extended comment ranges.
      var comments = [],
        comment,
        len,
        i,
        cursor;
      if (!tree.range) {
        throw new Error('attachComments needs range information');
      }

      // tokens array is empty, we attach comments to tree as 'leadingComments'
      if (!tokens.length) {
        if (providedComments.length) {
          for (i = 0, len = providedComments.length; i < len; i += 1) {
            comment = deepCopy(providedComments[i]);
            comment.extendedRange = [0, tree.range[0]];
            comments.push(comment);
          }
          tree.leadingComments = comments;
        }
        return tree;
      }
      for (i = 0, len = providedComments.length; i < len; i += 1) {
        comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
      }

      // This is based on John Freeman's implementation.
      cursor = 0;
      traverse(tree, {
        enter: function (node) {
          var comment;
          while (cursor < comments.length) {
            comment = comments[cursor];
            if (comment.extendedRange[1] > node.range[0]) {
              break;
            }
            if (comment.extendedRange[1] === node.range[0]) {
              if (!node.leadingComments) {
                node.leadingComments = [];
              }
              node.leadingComments.push(comment);
              comments.splice(cursor, 1);
            } else {
              cursor += 1;
            }
          }

          // already out of owned node
          if (cursor === comments.length) {
            return VisitorOption.Break;
          }
          if (comments[cursor].extendedRange[0] > node.range[1]) {
            return VisitorOption.Skip;
          }
        }
      });
      cursor = 0;
      traverse(tree, {
        leave: function (node) {
          var comment;
          while (cursor < comments.length) {
            comment = comments[cursor];
            if (node.range[1] < comment.extendedRange[0]) {
              break;
            }
            if (node.range[1] === comment.extendedRange[0]) {
              if (!node.trailingComments) {
                node.trailingComments = [];
              }
              node.trailingComments.push(comment);
              comments.splice(cursor, 1);
            } else {
              cursor += 1;
            }
          }

          // already out of owned node
          if (cursor === comments.length) {
            return VisitorOption.Break;
          }
          if (comments[cursor].extendedRange[0] > node.range[1]) {
            return VisitorOption.Skip;
          }
        }
      });
      return tree;
    }
    exports.Syntax = Syntax;
    exports.traverse = traverse;
    exports.replace = replace;
    exports.attachComments = attachComments;
    exports.VisitorKeys = VisitorKeys;
    exports.VisitorOption = VisitorOption;
    exports.Controller = Controller;
    exports.cloneEnvironment = function () {
      return clone({});
    };
    return exports;
  })(exports);
  /* vim: set sw=4 ts=4 et tw=80 : */
})(estraverse);

var utils = {};

var ast = {exports: {}};

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function () {

  function isExpression(node) {
    if (node == null) {
      return false;
    }
    switch (node.type) {
      case 'ArrayExpression':
      case 'AssignmentExpression':
      case 'BinaryExpression':
      case 'CallExpression':
      case 'ConditionalExpression':
      case 'FunctionExpression':
      case 'Identifier':
      case 'Literal':
      case 'LogicalExpression':
      case 'MemberExpression':
      case 'NewExpression':
      case 'ObjectExpression':
      case 'SequenceExpression':
      case 'ThisExpression':
      case 'UnaryExpression':
      case 'UpdateExpression':
        return true;
    }
    return false;
  }
  function isIterationStatement(node) {
    if (node == null) {
      return false;
    }
    switch (node.type) {
      case 'DoWhileStatement':
      case 'ForInStatement':
      case 'ForStatement':
      case 'WhileStatement':
        return true;
    }
    return false;
  }
  function isStatement(node) {
    if (node == null) {
      return false;
    }
    switch (node.type) {
      case 'BlockStatement':
      case 'BreakStatement':
      case 'ContinueStatement':
      case 'DebuggerStatement':
      case 'DoWhileStatement':
      case 'EmptyStatement':
      case 'ExpressionStatement':
      case 'ForInStatement':
      case 'ForStatement':
      case 'IfStatement':
      case 'LabeledStatement':
      case 'ReturnStatement':
      case 'SwitchStatement':
      case 'ThrowStatement':
      case 'TryStatement':
      case 'VariableDeclaration':
      case 'WhileStatement':
      case 'WithStatement':
        return true;
    }
    return false;
  }
  function isSourceElement(node) {
    return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
  }
  function trailingStatement(node) {
    switch (node.type) {
      case 'IfStatement':
        if (node.alternate != null) {
          return node.alternate;
        }
        return node.consequent;
      case 'LabeledStatement':
      case 'ForStatement':
      case 'ForInStatement':
      case 'WhileStatement':
      case 'WithStatement':
        return node.body;
    }
    return null;
  }
  function isProblematicIfStatement(node) {
    var current;
    if (node.type !== 'IfStatement') {
      return false;
    }
    if (node.alternate == null) {
      return false;
    }
    current = node.consequent;
    do {
      if (current.type === 'IfStatement') {
        if (current.alternate == null) {
          return true;
        }
      }
      current = trailingStatement(current);
    } while (current);
    return false;
  }
  ast.exports = {
    isExpression: isExpression,
    isStatement: isStatement,
    isIterationStatement: isIterationStatement,
    isSourceElement: isSourceElement,
    isProblematicIfStatement: isProblematicIfStatement,
    trailingStatement: trailingStatement
  };
})();

var code = {exports: {}};

/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function () {

  var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

  // See `tools/generate-identifier-regex.js`.
  ES5Regex = {
    // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
    // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
    NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
  };
  ES6Regex = {
    // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
    // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
  };
  function isDecimalDigit(ch) {
    return 0x30 <= ch && ch <= 0x39; // 0..9
  }

  function isHexDigit(ch) {
    return 0x30 <= ch && ch <= 0x39 ||
    // 0..9
    0x61 <= ch && ch <= 0x66 ||
    // a..f
    0x41 <= ch && ch <= 0x46; // A..F
  }

  function isOctalDigit(ch) {
    return ch >= 0x30 && ch <= 0x37; // 0..7
  }

  // 7.2 White Space

  NON_ASCII_WHITESPACES = [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];
  function isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
  }

  // 7.3 Line Terminators

  function isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
  }

  // 7.6 Identifier Names and Identifiers

  function fromCodePoint(cp) {
    if (cp <= 0xFFFF) {
      return String.fromCharCode(cp);
    }
    var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
    var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);
    return cu1 + cu2;
  }
  IDENTIFIER_START = new Array(0x80);
  for (ch = 0; ch < 0x80; ++ch) {
    IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A ||
    // a..z
    ch >= 0x41 && ch <= 0x5A ||
    // A..Z
    ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)
  }

  IDENTIFIER_PART = new Array(0x80);
  for (ch = 0; ch < 0x80; ++ch) {
    IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A ||
    // a..z
    ch >= 0x41 && ch <= 0x5A ||
    // A..Z
    ch >= 0x30 && ch <= 0x39 ||
    // 0..9
    ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)
  }

  function isIdentifierStartES5(ch) {
    return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
  }
  function isIdentifierPartES5(ch) {
    return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
  }
  function isIdentifierStartES6(ch) {
    return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
  }
  function isIdentifierPartES6(ch) {
    return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
  }
  code.exports = {
    isDecimalDigit: isDecimalDigit,
    isHexDigit: isHexDigit,
    isOctalDigit: isOctalDigit,
    isWhiteSpace: isWhiteSpace,
    isLineTerminator: isLineTerminator,
    isIdentifierStartES5: isIdentifierStartES5,
    isIdentifierPartES5: isIdentifierPartES5,
    isIdentifierStartES6: isIdentifierStartES6,
    isIdentifierPartES6: isIdentifierPartES6
  };
})();

var keyword = {exports: {}};

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function () {

  var code$1 = code.exports;
  function isStrictModeReservedWordES6(id) {
    switch (id) {
      case 'implements':
      case 'interface':
      case 'package':
      case 'private':
      case 'protected':
      case 'public':
      case 'static':
      case 'let':
        return true;
      default:
        return false;
    }
  }
  function isKeywordES5(id, strict) {
    // yield should not be treated as keyword under non-strict mode.
    if (!strict && id === 'yield') {
      return false;
    }
    return isKeywordES6(id, strict);
  }
  function isKeywordES6(id, strict) {
    if (strict && isStrictModeReservedWordES6(id)) {
      return true;
    }
    switch (id.length) {
      case 2:
        return id === 'if' || id === 'in' || id === 'do';
      case 3:
        return id === 'var' || id === 'for' || id === 'new' || id === 'try';
      case 4:
        return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
      case 5:
        return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
      case 6:
        return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
      case 7:
        return id === 'default' || id === 'finally' || id === 'extends';
      case 8:
        return id === 'function' || id === 'continue' || id === 'debugger';
      case 10:
        return id === 'instanceof';
      default:
        return false;
    }
  }
  function isReservedWordES5(id, strict) {
    return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
  }
  function isReservedWordES6(id, strict) {
    return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
  }
  function isRestrictedWord(id) {
    return id === 'eval' || id === 'arguments';
  }
  function isIdentifierNameES5(id) {
    var i, iz, ch;
    if (id.length === 0) {
      return false;
    }
    ch = id.charCodeAt(0);
    if (!code$1.isIdentifierStartES5(ch)) {
      return false;
    }
    for (i = 1, iz = id.length; i < iz; ++i) {
      ch = id.charCodeAt(i);
      if (!code$1.isIdentifierPartES5(ch)) {
        return false;
      }
    }
    return true;
  }
  function decodeUtf16(lead, trail) {
    return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
  }
  function isIdentifierNameES6(id) {
    var i, iz, ch, lowCh, check;
    if (id.length === 0) {
      return false;
    }
    check = code$1.isIdentifierStartES6;
    for (i = 0, iz = id.length; i < iz; ++i) {
      ch = id.charCodeAt(i);
      if (0xD800 <= ch && ch <= 0xDBFF) {
        ++i;
        if (i >= iz) {
          return false;
        }
        lowCh = id.charCodeAt(i);
        if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
          return false;
        }
        ch = decodeUtf16(ch, lowCh);
      }
      if (!check(ch)) {
        return false;
      }
      check = code$1.isIdentifierPartES6;
    }
    return true;
  }
  function isIdentifierES5(id, strict) {
    return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
  }
  function isIdentifierES6(id, strict) {
    return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
  }
  keyword.exports = {
    isKeywordES5: isKeywordES5,
    isKeywordES6: isKeywordES6,
    isReservedWordES5: isReservedWordES5,
    isReservedWordES6: isReservedWordES6,
    isRestrictedWord: isRestrictedWord,
    isIdentifierNameES5: isIdentifierNameES5,
    isIdentifierNameES6: isIdentifierNameES6,
    isIdentifierES5: isIdentifierES5,
    isIdentifierES6: isIdentifierES6
  };
})();

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function () {

  utils.ast = ast.exports;
  utils.code = code.exports;
  utils.keyword = keyword.exports;
})();

var sourceMap = {};

var sourceMapGenerator = {};

var base64Vlq = {};

var base64 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredBase64;
function requireBase64() {
  if (hasRequiredBase64) return base64;
  hasRequiredBase64 = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  base64.encode = function (number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
  };

  /**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
  base64.decode = function (charCode) {
    var bigA = 65; // 'A'
    var bigZ = 90; // 'Z'

    var littleA = 97; // 'a'
    var littleZ = 122; // 'z'

    var zero = 48; // '0'
    var nine = 57; // '9'

    var plus = 43; // '+'
    var slash = 47; // '/'

    var littleOffset = 26;
    var numberOffset = 52;

    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
      return charCode - bigA;
    }

    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
      return charCode - littleA + littleOffset;
    }

    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
      return charCode - zero + numberOffset;
    }

    // 62: +
    if (charCode == plus) {
      return 62;
    }

    // 63: /
    if (charCode == slash) {
      return 63;
    }

    // Invalid base64 digit.
    return -1;
  };
  return base64;
}

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredBase64Vlq;
function requireBase64Vlq() {
  if (hasRequiredBase64Vlq) return base64Vlq;
  hasRequiredBase64Vlq = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   *
   * Based on the Base 64 VLQ implementation in Closure Compiler:
   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
   *
   * Copyright 2011 The Closure Compiler Authors. All rights reserved.
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are
   * met:
   *
   *  * Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above
   *    copyright notice, this list of conditions and the following
   *    disclaimer in the documentation and/or other materials provided
   *    with the distribution.
   *  * Neither the name of Google Inc. nor the names of its
   *    contributors may be used to endorse or promote products derived
   *    from this software without specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

  var base64 = requireBase64();

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  base64Vlq.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;
    var vlq = toVLQSigned(aValue);
    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);
    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;
    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);
    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };
  return base64Vlq;
}

var util$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1) return util$1;
  hasRequiredUtil$1 = 1;
  (function (exports) {
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    /**
     * This is a helper function for getting values from parameter/options
     * objects.
     *
     * @param args The object we are extracting values from
     * @param name The name of the property we are getting.
     * @param defaultValue An optional value to return if the property is missing
     * from the object. If this is not specified and the property is missing, an
     * error will be thrown.
     */
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = '';
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ':';
      }
      url += '//';
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + '@';
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;

    /**
     * Normalizes a path, or the path portion of a URL:
     *
     * - Replaces consecutive slashes with one slash.
     * - Removes unnecessary '.' parts.
     * - Removes unnecessary '<dir>/..' parts.
     *
     * Based on code in the Node.js 'path' core module.
     *
     * @param aPath The path or url to normalize.
     */
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === '.') {
          parts.splice(i, 1);
        } else if (part === '..') {
          up++;
        } else if (up > 0) {
          if (part === '') {
            // The first part is blank if the path is absolute. Trying to go
            // above the root is a no-op. Therefore we can remove all '..' parts
            // directly after the root.
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join('/');
      if (path === '') {
        path = isAbsolute ? '/' : '.';
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;

    /**
     * Joins two paths/URLs.
     *
     * @param aRoot The root path or URL.
     * @param aPath The path or URL to be joined with the root.
     *
     * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
     *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
     *   first.
     * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
     *   is updated with the result and aRoot is returned. Otherwise the result
     *   is returned.
     *   - If aPath is absolute, the result is aPath.
     *   - Otherwise the two paths are joined with a slash.
     * - Joining for example 'http://' and 'www.example.com' is also supported.
     */
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || '/';
      }

      // `join(foo, '//www.example.org')`
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }

      // `join('http://', 'www.example.com')`
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function (aPath) {
      return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
    };

    /**
     * Make a path relative to a URL or another path.
     *
     * @param aRoot The root path or URL.
     * @param aPath The path or URL to be made relative to aRoot.
     */
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, '');

      // It is possible for the path to be above the root. In this case, simply
      // checking whether the root is a prefix of the path won't work. Instead, we
      // need to remove components from the root one by one, until either we find
      // a prefix that fits, or we run out of components to remove.
      var level = 0;
      while (aPath.indexOf(aRoot + '/') !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }

        // If the only part of the root that is left is the scheme (i.e. http://,
        // file:///, etc.), one or more slashes (/), or simply nothing at all, we
        // have exhausted all components, so the path is not relative to the root.
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }

      // Make sure we add a "../" for each component we removed from the root.
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function () {
      var obj = Object.create(null);
      return !('__proto__' in obj);
    }();
    function identity(s) {
      return s;
    }

    /**
     * Because behavior goes wacky when you set `__proto__` on objects, we
     * have to prefix all the strings in our set with an arbitrary character.
     *
     * See https://github.com/mozilla/source-map/pull/31 and
     * https://github.com/mozilla/source-map/issues/30
     *
     * @param String aStr
     */
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return '$' + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9 /* "__proto__".length */) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 /* '_' */ || s.charCodeAt(length - 2) !== 95 /* '_' */ || s.charCodeAt(length - 3) !== 111 /* 'o' */ || s.charCodeAt(length - 4) !== 116 /* 't' */ || s.charCodeAt(length - 5) !== 111 /* 'o' */ || s.charCodeAt(length - 6) !== 114 /* 'r' */ || s.charCodeAt(length - 7) !== 112 /* 'p' */ || s.charCodeAt(length - 8) !== 95 /* '_' */ || s.charCodeAt(length - 9) !== 95 /* '_' */) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36 /* '$' */) {
          return false;
        }
      }
      return true;
    }

    /**
     * Comparator between two mappings where the original positions are compared.
     *
     * Optionally pass in `true` as `onlyCompareGenerated` to consider two
     * mappings with the same original source/line/column, but different generated
     * line and column the same. Useful when searching for a mapping with a
     * stubbed out mapping.
     */
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;

    /**
     * Comparator between two mappings with deflated source and name indices where
     * the generated positions are compared.
     *
     * Optionally pass in `true` as `onlyCompareGenerated` to consider two
     * mappings with the same generated line and column, but different
     * source/name/original line and column the same. Useful when searching for a
     * mapping with a stubbed out mapping.
     */
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1; // aStr2 !== null
      }

      if (aStr2 === null) {
        return -1; // aStr1 !== null
      }

      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }

    /**
     * Comparator between two mappings with inflated source and name strings where
     * the generated positions are compared.
     */
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

    /**
     * Strip any JSON XSSI avoidance prefix from the string (as documented
     * in the source maps specification), and then parse the string as
     * JSON.
     */
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
    }
    exports.parseSourceMapInput = parseSourceMapInput;

    /**
     * Compute the URL of a source given the the source root, the source's
     * URL, and the source map's URL.
     */
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || '';
      if (sourceRoot) {
        // This follows what Chrome does.
        if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
          sourceRoot += '/';
        }
        // The spec says:
        //   Line 4: An optional source root, useful for relocating source
        //   files on a server or removing repeated values in the
        //   “sources” entry.  This value is prepended to the individual
        //   entries in the “source” field.
        sourceURL = sourceRoot + sourceURL;
      }

      // Historically, SourceMapConsumer did not take the sourceMapURL as
      // a parameter.  This mode is still somewhat supported, which is why
      // this code block is conditional.  However, it's preferable to pass
      // the source map URL to SourceMapConsumer, so that this function
      // can implement the source URL resolution algorithm as outlined in
      // the spec.  This block is basically the equivalent of:
      //    new URL(sourceURL, sourceMapURL).toString()
      // ... except it avoids using URL, which wasn't available in the
      // older releases of node still supported by this library.
      //
      // The spec says:
      //   If the sources are not absolute URLs after prepending of the
      //   “sourceRoot”, the sources are resolved relative to the
      //   SourceMap (like resolving script src in a html document).
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          // Strip the last path component, but keep the "/".
          var index = parsed.path.lastIndexOf('/');
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
  })(util$1);
  return util$1;
}

var arraySet = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredArraySet;
function requireArraySet() {
  if (hasRequiredArraySet) return arraySet;
  hasRequiredArraySet = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var util = requireUtil$1();
  var has = Object.prototype.hasOwnProperty;
  var hasNativeMap = typeof Map !== "undefined";

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = hasNativeMap ? new Map() : Object.create(null);
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  ArraySet.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      if (hasNativeMap) {
        this._set.set(aStr, idx);
      } else {
        this._set[sStr] = idx;
      }
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) {
      return this._set.has(aStr);
    } else {
      var sStr = util.toSetString(aStr);
      return has.call(this._set, sStr);
    }
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
      var idx = this._set.get(aStr);
      if (idx >= 0) {
        return idx;
      }
    } else {
      var sStr = util.toSetString(aStr);
      if (has.call(this._set, sStr)) {
        return this._set[sStr];
      }
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };
  arraySet.ArraySet = ArraySet;
  return arraySet;
}

var mappingList = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredMappingList;
function requireMappingList() {
  if (hasRequiredMappingList) return mappingList;
  hasRequiredMappingList = 1;
  /*
   * Copyright 2014 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var util = requireUtil$1();

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {
      generatedLine: -1,
      generatedColumn: 0
    };
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };
  mappingList.MappingList = MappingList;
  return mappingList;
}

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredSourceMapGenerator;
function requireSourceMapGenerator() {
  if (hasRequiredSourceMapGenerator) return sourceMapGenerator;
  hasRequiredSourceMapGenerator = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var base64VLQ = requireBase64Vlq();
  var util = requireUtil$1();
  var ArraySet = requireArraySet().ArraySet;
  var MappingList = requireMappingList().MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }
  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };
      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }
        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };
        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }
      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }
      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);
    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }
    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }
    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }
    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }
    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source);
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }
      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }
      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }
    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
      throw new Error('original.line and original.column are not numbers -- you probably meant to omit ' + 'the original mapping entirely and only map the generated position. If so, pass ' + 'null for the original mapping instead of an object with empty or null values.');
    }
    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
      // Cases 2 and 3.
      return;
    } else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;
    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = '';
      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      } else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }
      next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;
      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;
        next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;
        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }
      result += next;
    }
    return result;
  };
  SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
    }, this);
  };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }
    return map;
  };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };
  sourceMapGenerator.SourceMapGenerator = SourceMapGenerator;
  return sourceMapGenerator;
}

var sourceMapConsumer = {};

var binarySearch = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredBinarySearch;
function requireBinarySearch() {
  if (hasRequiredBinarySearch) return binarySearch;
  hasRequiredBinarySearch = 1;
  (function (exports) {
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;

    /**
     * Recursive implementation of binary search.
     *
     * @param aLow Indices here and lower do not contain the needle.
     * @param aHigh Indices here and higher do not contain the needle.
     * @param aNeedle The element being searched for.
     * @param aHaystack The non-empty array being searched.
     * @param aCompare Function which takes two elements and returns -1, 0, or 1.
     * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
     *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     */
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      // This function terminates when one of the following is true:
      //
      //   1. We find the exact element we are looking for.
      //
      //   2. We did not find the exact element, but we can return the index of
      //      the next-closest element.
      //
      //   3. We did not find the exact element, and there is no next-closest
      //      element than the one we are searching for, so we return -1.
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        // Found the element we are looking for.
        return mid;
      } else if (cmp > 0) {
        // Our needle is greater than aHaystack[mid].
        if (aHigh - mid > 1) {
          // The element is in the upper half.
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }

        // The exact needle element was not found in this haystack. Determine if
        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        // Our needle is less than aHaystack[mid].
        if (mid - aLow > 1) {
          // The element is in the lower half.
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }

        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }

    /**
     * This is an implementation of binary search which will always try and return
     * the index of the closest element if there is no exact hit. This is because
     * mappings between original and generated line/col pairs are single points,
     * and there is an implicit region between each of them, so a miss just means
     * that you aren't on the very start of a region.
     *
     * @param aNeedle The element you are looking for.
     * @param aHaystack The array that is being searched.
     * @param aCompare A function which takes the needle and an element in the
     *     array and returns -1, 0, or 1 depending on whether the needle is less
     *     than, equal to, or greater than the element, respectively.
     * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
     *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
     */
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }

      // We have found either the exact element, or the next-closest element than
      // the one we are searching for. However, there may be more than one such
      // element. Make sure we always return the smallest of these.
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  })(binarySearch);
  return binarySearch;
}

var quickSort = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredQuickSort;
function requireQuickSort() {
  if (hasRequiredQuickSort) return quickSort;
  hasRequiredQuickSort = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  // It turns out that some (most?) JavaScript engines don't self-host
  // `Array.prototype.sort`. This makes sense because C++ will likely remain
  // faster than JS when doing raw CPU-intensive sorting. However, when using a
  // custom comparator function, calling back and forth between the VM's C++ and
  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
  // worse generated code for the comparator function than would be optimal. In
  // fact, when sorting with a comparator, these costs outweigh the benefits of
  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
  // a ~3500ms mean speed-up in `bench/bench.html`.

  /**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
  function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }

  /**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
  function randomIntInRange(low, high) {
    return Math.round(low + Math.random() * (high - low));
  }

  /**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
  function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.

    if (p < r) {
      // (1) Partitioning.
      //
      // The partitioning chooses a pivot between `p` and `r` and moves all
      // elements that are less than or equal to the pivot to the before it, and
      // all the elements that are greater than it after it. The effect is that
      // once partition is done, the pivot is in the exact place it will be when
      // the array is put in sorted order, and it will not need to be moved
      // again. This runs in O(n) time.

      // Always choose a random pivot so that an input array which is reverse
      // sorted does not cause O(n^2) running time.
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;
      swap(ary, pivotIndex, r);
      var pivot = ary[r];

      // Immediately after `j` is incremented in this loop, the following hold
      // true:
      //
      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
      //
      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap(ary, i, j);
        }
      }
      swap(ary, i + 1, j);
      var q = i + 1;

      // (2) Recurse on each half.

      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }

  /**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
  quickSort.quickSort = function (ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };
  return quickSort;
}

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredSourceMapConsumer;
function requireSourceMapConsumer() {
  if (hasRequiredSourceMapConsumer) return sourceMapConsumer;
  hasRequiredSourceMapConsumer = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var util = requireUtil$1();
  var binarySearch = requireBinarySearch();
  var ArraySet = requireArraySet().ArraySet;
  var base64VLQ = requireBase64Vlq();
  var quickSort = requireQuickSort().quickSort;
  function SourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
  }
  SourceMapConsumer.fromSourceMap = function (aSourceMap, aSourceMapURL) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
  };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    configurable: true,
    enumerable: true,
    get: function () {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }
      return this.__generatedMappings;
    }
  });
  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    configurable: true,
    enumerable: true,
    get: function () {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }
      return this.__originalMappings;
    }
  });
  SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };
  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;
  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
    var mappings;
    switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
    }
    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number is 1-based.
   *   - column: Optional. the column number in the original source.
   *    The column number is 0-based.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *    line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *    The column number is 0-based.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };
    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }
    var mappings = [];
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];
      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });
          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });
          mapping = this._originalMappings[++index];
        }
      }
    }
    return mappings;
  };
  sourceMapConsumer.SourceMapConsumer = SourceMapConsumer;

  /**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The first parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * The second parameter, if given, is a string whose value is the URL
   * at which the source map was found.  This URL is used to compute the
   * sources array.
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }
    if (sourceRoot) {
      sourceRoot = util.normalize(sourceRoot);
    }
    sources = sources.map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
    });

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);
    this._absoluteSources = this._sources.toArray().map(function (s) {
      return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
    });
    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this._sourceMapURL = aSourceMapURL;
    this.file = file;
  }
  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

  /**
   * Utility function to find the index of a source.  Returns -1 if not
   * found.
   */
  BasicSourceMapConsumer.prototype._findSourceIndex = function (aSource) {
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }
    if (this._sources.has(relativeSource)) {
      return this._sources.indexOf(relativeSource);
    }

    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    var i;
    for (i = 0; i < this._absoluteSources.length; ++i) {
      if (this._absoluteSources[i] == aSource) {
        return i;
      }
    }
    return -1;
  };

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @param String aSourceMapURL
   *        The URL at which the source map can be found (optional)
   * @returns BasicSourceMapConsumer
   */
  BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);
    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];
    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping();
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;
      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;
        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }
        destOriginalMappings.push(destMapping);
      }
      destGeneratedMappings.push(destMapping);
    }
    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
    return smc;
  };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  BasicSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._absoluteSources.slice();
    }
  });

  /**
   * Provide the JIT with a nice shape / hidden class.
   */
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;
    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      } else if (aStr.charAt(index) === ',') {
        index++;
      } else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);
        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }
          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }
          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }
          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;
        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;
          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }
        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }
    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;
    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
    }
    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];
        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
      var mapping = this._generatedMappings[index];
      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {
      return sc == null;
    });
  };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }
    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }
    var url;
    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
      }
      if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    } else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }
    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
      var mapping = this._originalMappings[index];
      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };
  sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;

  /**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The first parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * The second parameter, if given, is a string whose value is the URL
   * at which the source map was found.  This URL is used to compute the
   * sources array.
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
  function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }
    this._sources = new ArraySet();
    this._names = new ArraySet();
    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function (s) {
      if (s.url) {
        // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');
      if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;
      return {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
      };
    });
  }
  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

  /**
   * The version of the source mapping spec that we are consuming.
   */
  IndexedSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function () {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      }
      return sources;
    }
  });

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {
      var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
      if (cmp) {
        return cmp;
      }
      return needle.generatedColumn - section.generatedOffset.generatedColumn;
    });
    var section = this._sections[sectionIndex];
    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }
    return section.consumer.originalPositionFor({
      line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
      bias: aArgs.bias
    });
  };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    } else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based. 
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
        };
        return ret;
      }
    }
    return {
      line: null,
      column: null
    };
  };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];
        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);
        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };
        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }
    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };
  sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  return sourceMapConsumer;
}

var sourceNode = {};

/* -*- Mode: js; js-indent-level: 2; -*- */
var hasRequiredSourceNode;
function requireSourceNode() {
  if (hasRequiredSourceNode) return sourceNode;
  hasRequiredSourceNode = 1;
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var SourceMapGenerator = requireSourceMapGenerator().SourceMapGenerator;
  var util = requireUtil$1();

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function () {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;
      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1,
      lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;
    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });
    return node;
    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
        node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
      }
    }
  };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    } else {
      throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length - 1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    } else {
      throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      } else {
        if (chunk !== '') {
          aFn(chunk, {
            source: this.source,
            line: this.line,
            column: this.column,
            name: this.name
          });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len - 1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    } else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    } else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }
    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null && original.line !== null && original.column !== null) {
        if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });
    return {
      code: generated.code,
      map: map
    };
  };
  sourceNode.SourceNode = SourceNode;
  return sourceNode;
}

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
var hasRequiredSourceMap;
function requireSourceMap() {
  if (hasRequiredSourceMap) return sourceMap;
  hasRequiredSourceMap = 1;
  sourceMap.SourceMapGenerator = requireSourceMapGenerator().SourceMapGenerator;
  sourceMap.SourceMapConsumer = requireSourceMapConsumer().SourceMapConsumer;
  sourceMap.SourceNode = requireSourceNode().SourceNode;
  return sourceMap;
}

var name="escodegen";var description="ECMAScript code generator";var homepage="http://github.com/estools/escodegen";var main$2="escodegen.js";var bin={esgenerate:"./bin/esgenerate.js",escodegen:"./bin/escodegen.js"};var files=["LICENSE.BSD","README.md","bin","escodegen.js","package.json"];var version="2.0.0";var engines={node:">=6.0"};var maintainers=[{name:"Yusuke Suzuki",email:"utatane.tea@gmail.com",web:"http://github.com/Constellation"}];var repository={type:"git",url:"http://github.com/estools/escodegen.git"};var dependencies={estraverse:"^5.2.0",esutils:"^2.0.2",esprima:"^4.0.1",optionator:"^0.8.1"};var optionalDependencies={"source-map":"~0.6.1"};var devDependencies={acorn:"^7.3.1",bluebird:"^3.4.7","bower-registry-client":"^1.0.0",chai:"^4.2.0","chai-exclude":"^2.0.2","commonjs-everywhere":"^0.9.7",gulp:"^3.8.10","gulp-eslint":"^3.0.1","gulp-mocha":"^3.0.1",semver:"^5.1.0"};var license="BSD-2-Clause";var scripts={test:"gulp travis","unit-test":"gulp test",lint:"gulp lint",release:"node tools/release.js","build-min":"./node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",build:"./node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js"};var require$$3 = {name:name,description:description,homepage:homepage,main:main$2,bin:bin,files:files,version:version,engines:engines,maintainers:maintainers,repository:repository,dependencies:dependencies,optionalDependencies:optionalDependencies,devDependencies:devDependencies,license:license,scripts:scripts};

/*
  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function (exports) {
  /*global exports:true, require:true, global:true*/
  (function () {

    var Syntax, Precedence, BinaryPrecedence, SourceNode, estraverse$1, esutils, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap, sourceCode, preserveBlankLines, FORMAT_MINIFY, FORMAT_DEFAULTS;
    estraverse$1 = estraverse;
    esutils = utils;
    Syntax = estraverse$1.Syntax;

    // Generation is done by generateExpression.
    function isExpression(node) {
      return CodeGenerator.Expression.hasOwnProperty(node.type);
    }

    // Generation is done by generateStatement.
    function isStatement(node) {
      return CodeGenerator.Statement.hasOwnProperty(node.type);
    }
    Precedence = {
      Sequence: 0,
      Yield: 1,
      Assignment: 1,
      Conditional: 2,
      ArrowFunction: 2,
      LogicalOR: 3,
      LogicalAND: 4,
      BitwiseOR: 5,
      BitwiseXOR: 6,
      BitwiseAND: 7,
      Equality: 8,
      Relational: 9,
      BitwiseSHIFT: 10,
      Additive: 11,
      Multiplicative: 12,
      Exponentiation: 13,
      Await: 14,
      Unary: 14,
      Postfix: 15,
      OptionalChaining: 16,
      Call: 17,
      New: 18,
      TaggedTemplate: 19,
      Member: 20,
      Primary: 21
    };
    BinaryPrecedence = {
      '||': Precedence.LogicalOR,
      '&&': Precedence.LogicalAND,
      '|': Precedence.BitwiseOR,
      '^': Precedence.BitwiseXOR,
      '&': Precedence.BitwiseAND,
      '==': Precedence.Equality,
      '!=': Precedence.Equality,
      '===': Precedence.Equality,
      '!==': Precedence.Equality,
      'is': Precedence.Equality,
      'isnt': Precedence.Equality,
      '<': Precedence.Relational,
      '>': Precedence.Relational,
      '<=': Precedence.Relational,
      '>=': Precedence.Relational,
      'in': Precedence.Relational,
      'instanceof': Precedence.Relational,
      '<<': Precedence.BitwiseSHIFT,
      '>>': Precedence.BitwiseSHIFT,
      '>>>': Precedence.BitwiseSHIFT,
      '+': Precedence.Additive,
      '-': Precedence.Additive,
      '*': Precedence.Multiplicative,
      '%': Precedence.Multiplicative,
      '/': Precedence.Multiplicative,
      '**': Precedence.Exponentiation
    };

    //Flags
    var F_ALLOW_IN = 1,
      F_ALLOW_CALL = 1 << 1,
      F_ALLOW_UNPARATH_NEW = 1 << 2,
      F_FUNC_BODY = 1 << 3,
      F_DIRECTIVE_CTX = 1 << 4,
      F_SEMICOLON_OPT = 1 << 5;

    //Expression flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_ALLOW_CALL
    // F_ALLOW_UNPARATH_NEW
    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
      E_TTF = F_ALLOW_IN | F_ALLOW_CALL,
      E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
      E_TFF = F_ALLOW_IN,
      E_FFT = F_ALLOW_UNPARATH_NEW,
      E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;

    //Statement flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_FUNC_BODY
    // F_DIRECTIVE_CTX
    // F_SEMICOLON_OPT
    var S_TFFF = F_ALLOW_IN,
      S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,
      S_FFFF = 0x00,
      S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,
      S_TTFF = F_ALLOW_IN | F_FUNC_BODY;
    function getDefaultOptions() {
      // default options
      return {
        indent: null,
        base: null,
        parse: null,
        comment: false,
        format: {
          indent: {
            style: '    ',
            base: 0,
            adjustMultilineComment: false
          },
          newline: '\n',
          space: ' ',
          json: false,
          renumber: false,
          hexadecimal: false,
          quotes: 'single',
          escapeless: false,
          compact: false,
          parentheses: true,
          semicolons: true,
          safeConcatenation: false,
          preserveBlankLines: false
        },
        moz: {
          comprehensionExpressionStartsWithAssignment: false,
          starlessGenerator: false
        },
        sourceMap: null,
        sourceMapRoot: null,
        sourceMapWithCode: false,
        directive: false,
        raw: true,
        verbatim: null,
        sourceCode: null
      };
    }
    function stringRepeat(str, num) {
      var result = '';
      for (num |= 0; num > 0; num >>>= 1, str += str) {
        if (num & 1) {
          result += str;
        }
      }
      return result;
    }
    function hasLineTerminator(str) {
      return /[\r\n]/g.test(str);
    }
    function endsWithLineTerminator(str) {
      var len = str.length;
      return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
    }
    function merge(target, override) {
      var key;
      for (key in override) {
        if (override.hasOwnProperty(key)) {
          target[key] = override[key];
        }
      }
      return target;
    }
    function updateDeeply(target, override) {
      var key, val;
      function isHashObject(target) {
        return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
      }
      for (key in override) {
        if (override.hasOwnProperty(key)) {
          val = override[key];
          if (isHashObject(val)) {
            if (isHashObject(target[key])) {
              updateDeeply(target[key], val);
            } else {
              target[key] = updateDeeply({}, val);
            }
          } else {
            target[key] = val;
          }
        }
      }
      return target;
    }
    function generateNumber(value) {
      var result, point, temp, exponent, pos;
      if (value !== value) {
        throw new Error('Numeric literal whose value is NaN');
      }
      if (value < 0 || value === 0 && 1 / value < 0) {
        throw new Error('Numeric literal whose value is negative');
      }
      if (value === 1 / 0) {
        return json ? 'null' : renumber ? '1e400' : '1e+400';
      }
      result = '' + value;
      if (!renumber || result.length < 3) {
        return result;
      }
      point = result.indexOf('.');
      if (!json && result.charCodeAt(0) === 0x30 /* 0 */ && point === 1) {
        point = 0;
        result = result.slice(1);
      }
      temp = result;
      result = result.replace('e+', 'e');
      exponent = 0;
      if ((pos = temp.indexOf('e')) > 0) {
        exponent = +temp.slice(pos + 1);
        temp = temp.slice(0, pos);
      }
      if (point >= 0) {
        exponent -= temp.length - point - 1;
        temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
      }
      pos = 0;
      while (temp.charCodeAt(temp.length + pos - 1) === 0x30 /* 0 */) {
        --pos;
      }
      if (pos !== 0) {
        exponent -= pos;
        temp = temp.slice(0, pos);
      }
      if (exponent !== 0) {
        temp += 'e' + exponent;
      }
      if ((temp.length < result.length || hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length) && +temp === value) {
        result = temp;
      }
      return result;
    }

    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine

    function escapeRegExpCharacter(ch, previousIsBackslash) {
      // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
      if ((ch & ~1) === 0x2028) {
        return (previousIsBackslash ? 'u' : '\\u') + (ch === 0x2028 ? '2028' : '2029');
      } else if (ch === 10 || ch === 13) {
        // \n, \r
        return (previousIsBackslash ? '' : '\\') + (ch === 10 ? 'n' : 'r');
      }
      return String.fromCharCode(ch);
    }
    function generateRegExp(reg) {
      var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;
      result = reg.toString();
      if (reg.source) {
        // extract flag from toString result
        match = result.match(/\/([^/]*)$/);
        if (!match) {
          return result;
        }
        flags = match[1];
        result = '';
        characterInBrack = false;
        previousIsBackslash = false;
        for (i = 0, iz = reg.source.length; i < iz; ++i) {
          ch = reg.source.charCodeAt(i);
          if (!previousIsBackslash) {
            if (characterInBrack) {
              if (ch === 93) {
                // ]
                characterInBrack = false;
              }
            } else {
              if (ch === 47) {
                // /
                result += '\\';
              } else if (ch === 91) {
                // [
                characterInBrack = true;
              }
            }
            result += escapeRegExpCharacter(ch, previousIsBackslash);
            previousIsBackslash = ch === 92; // \
          } else {
            // if new RegExp("\\\n') is provided, create /\n/
            result += escapeRegExpCharacter(ch, previousIsBackslash);
            // prevent like /\\[/]/
            previousIsBackslash = false;
          }
        }
        return '/' + result + '/' + flags;
      }
      return result;
    }
    function escapeAllowedCharacter(code, next) {
      var hex;
      if (code === 0x08 /* \b */) {
        return '\\b';
      }
      if (code === 0x0C /* \f */) {
        return '\\f';
      }
      if (code === 0x09 /* \t */) {
        return '\\t';
      }
      hex = code.toString(16).toUpperCase();
      if (json || code > 0xFF) {
        return '\\u' + '0000'.slice(hex.length) + hex;
      } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
        return '\\0';
      } else if (code === 0x000B /* \v */) {
        // '\v'
        return '\\x0B';
      } else {
        return '\\x' + '00'.slice(hex.length) + hex;
      }
    }
    function escapeDisallowedCharacter(code) {
      if (code === 0x5C /* \ */) {
        return '\\\\';
      }
      if (code === 0x0A /* \n */) {
        return '\\n';
      }
      if (code === 0x0D /* \r */) {
        return '\\r';
      }
      if (code === 0x2028) {
        return '\\u2028';
      }
      if (code === 0x2029) {
        return '\\u2029';
      }
      throw new Error('Incorrectly classified character');
    }
    function escapeDirective(str) {
      var i, iz, code, quote;
      quote = quotes === 'double' ? '"' : '\'';
      for (i = 0, iz = str.length; i < iz; ++i) {
        code = str.charCodeAt(i);
        if (code === 0x27 /* ' */) {
          quote = '"';
          break;
        } else if (code === 0x22 /* " */) {
          quote = '\'';
          break;
        } else if (code === 0x5C /* \ */) {
          ++i;
        }
      }
      return quote + str + quote;
    }
    function escapeString(str) {
      var result = '',
        i,
        len,
        code,
        singleQuotes = 0,
        doubleQuotes = 0,
        single,
        quote;
      for (i = 0, len = str.length; i < len; ++i) {
        code = str.charCodeAt(i);
        if (code === 0x27 /* ' */) {
          ++singleQuotes;
        } else if (code === 0x22 /* " */) {
          ++doubleQuotes;
        } else if (code === 0x2F /* / */ && json) {
          result += '\\';
        } else if (esutils.code.isLineTerminator(code) || code === 0x5C /* \ */) {
          result += escapeDisallowedCharacter(code);
          continue;
        } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20 /* SP */ || !json && !escapeless && (code < 0x20 /* SP */ || code > 0x7E /* ~ */))) {
          result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
          continue;
        }
        result += String.fromCharCode(code);
      }
      single = !(quotes === 'double' || quotes === 'auto' && doubleQuotes < singleQuotes);
      quote = single ? '\'' : '"';
      if (!(single ? singleQuotes : doubleQuotes)) {
        return quote + result + quote;
      }
      str = result;
      result = quote;
      for (i = 0, len = str.length; i < len; ++i) {
        code = str.charCodeAt(i);
        if (code === 0x27 /* ' */ && single || code === 0x22 /* " */ && !single) {
          result += '\\';
        }
        result += String.fromCharCode(code);
      }
      return result + quote;
    }

    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */
    function flattenToString(arr) {
      var i,
        iz,
        elem,
        result = '';
      for (i = 0, iz = arr.length; i < iz; ++i) {
        elem = arr[i];
        result += Array.isArray(elem) ? flattenToString(elem) : elem;
      }
      return result;
    }

    /**
     * convert generated to a SourceNode when source maps are enabled.
     */
    function toSourceNodeWhenNeeded(generated, node) {
      if (!sourceMap) {
        // with no source maps, generated is either an
        // array or a string.  if an array, flatten it.
        // if a string, just return it
        if (Array.isArray(generated)) {
          return flattenToString(generated);
        } else {
          return generated;
        }
      }
      if (node == null) {
        if (generated instanceof SourceNode) {
          return generated;
        } else {
          node = {};
        }
      }
      if (node.loc == null) {
        return new SourceNode(null, null, sourceMap, generated, node.name || null);
      }
      return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated, node.name || null);
    }
    function noEmptySpace() {
      return space ? space : ' ';
    }
    function join(left, right) {
      var leftSource, rightSource, leftCharCode, rightCharCode;
      leftSource = toSourceNodeWhenNeeded(left).toString();
      if (leftSource.length === 0) {
        return [right];
      }
      rightSource = toSourceNodeWhenNeeded(right).toString();
      if (rightSource.length === 0) {
        return [left];
      }
      leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
      rightCharCode = rightSource.charCodeAt(0);
      if ((leftCharCode === 0x2B /* + */ || leftCharCode === 0x2D /* - */) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) || leftCharCode === 0x2F /* / */ && rightCharCode === 0x69 /* i */) {
        // infix word operators all start with `i`
        return [left, noEmptySpace(), right];
      } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) || esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
        return [left, right];
      }
      return [left, space, right];
    }
    function addIndent(stmt) {
      return [base, stmt];
    }
    function withIndent(fn) {
      var previousBase;
      previousBase = base;
      base += indent;
      fn(base);
      base = previousBase;
    }
    function calculateSpaces(str) {
      var i;
      for (i = str.length - 1; i >= 0; --i) {
        if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
          break;
        }
      }
      return str.length - 1 - i;
    }
    function adjustMultilineComment(value, specialBase) {
      var array, i, len, line, j, spaces, previousBase, sn;
      array = value.split(/\r\n|[\r\n]/);
      spaces = Number.MAX_VALUE;

      // first line doesn't have indentation
      for (i = 1, len = array.length; i < len; ++i) {
        line = array[i];
        j = 0;
        while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
          ++j;
        }
        if (spaces > j) {
          spaces = j;
        }
      }
      if (typeof specialBase !== 'undefined') {
        // pattern like
        // {
        //   var t = 20;  /*
        //                 * this is comment
        //                 */
        // }
        previousBase = base;
        if (array[1][spaces] === '*') {
          specialBase += ' ';
        }
        base = specialBase;
      } else {
        if (spaces & 1) {
          // /*
          //  *
          //  */
          // If spaces are odd number, above pattern is considered.
          // We waste 1 space.
          --spaces;
        }
        previousBase = base;
      }
      for (i = 1, len = array.length; i < len; ++i) {
        sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
        array[i] = sourceMap ? sn.join('') : sn;
      }
      base = previousBase;
      return array.join('\n');
    }
    function generateComment(comment, specialBase) {
      if (comment.type === 'Line') {
        if (endsWithLineTerminator(comment.value)) {
          return '//' + comment.value;
        } else {
          // Always use LineTerminator
          var result = '//' + comment.value;
          if (!preserveBlankLines) {
            result += '\n';
          }
          return result;
        }
      }
      if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
        return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
      }
      return '/*' + comment.value + '*/';
    }
    function addComments(stmt, result) {
      var i, len, comment, save, tailingToStatement, specialBase, fragment, extRange, range, prevRange, prefix, infix, suffix, count;
      if (stmt.leadingComments && stmt.leadingComments.length > 0) {
        save = result;
        if (preserveBlankLines) {
          comment = stmt.leadingComments[0];
          result = [];
          extRange = comment.extendedRange;
          range = comment.range;
          prefix = sourceCode.substring(extRange[0], range[0]);
          count = (prefix.match(/\n/g) || []).length;
          if (count > 0) {
            result.push(stringRepeat('\n', count));
            result.push(addIndent(generateComment(comment)));
          } else {
            result.push(prefix);
            result.push(generateComment(comment));
          }
          prevRange = range;
          for (i = 1, len = stmt.leadingComments.length; i < len; i++) {
            comment = stmt.leadingComments[i];
            range = comment.range;
            infix = sourceCode.substring(prevRange[1], range[0]);
            count = (infix.match(/\n/g) || []).length;
            result.push(stringRepeat('\n', count));
            result.push(addIndent(generateComment(comment)));
            prevRange = range;
          }
          suffix = sourceCode.substring(range[1], extRange[1]);
          count = (suffix.match(/\n/g) || []).length;
          result.push(stringRepeat('\n', count));
        } else {
          comment = stmt.leadingComments[0];
          result = [];
          if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
            result.push('\n');
          }
          result.push(generateComment(comment));
          if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push('\n');
          }
          for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
            comment = stmt.leadingComments[i];
            fragment = [generateComment(comment)];
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              fragment.push('\n');
            }
            result.push(addIndent(fragment));
          }
        }
        result.push(addIndent(save));
      }
      if (stmt.trailingComments) {
        if (preserveBlankLines) {
          comment = stmt.trailingComments[0];
          extRange = comment.extendedRange;
          range = comment.range;
          prefix = sourceCode.substring(extRange[0], range[0]);
          count = (prefix.match(/\n/g) || []).length;
          if (count > 0) {
            result.push(stringRepeat('\n', count));
            result.push(addIndent(generateComment(comment)));
          } else {
            result.push(prefix);
            result.push(generateComment(comment));
          }
        } else {
          tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
          specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
          for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
            comment = stmt.trailingComments[i];
            if (tailingToStatement) {
              // We assume target like following script
              //
              // var t = 20;  /**
              //               * This is comment of t
              //               */
              if (i === 0) {
                // first case
                result = [result, indent];
              } else {
                result = [result, specialBase];
              }
              result.push(generateComment(comment, specialBase));
            } else {
              result = [result, addIndent(generateComment(comment))];
            }
            if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
              result = [result, '\n'];
            }
          }
        }
      }
      return result;
    }
    function generateBlankLines(start, end, result) {
      var j,
        newlineCount = 0;
      for (j = start; j < end; j++) {
        if (sourceCode[j] === '\n') {
          newlineCount++;
        }
      }
      for (j = 1; j < newlineCount; j++) {
        result.push(newline);
      }
    }
    function parenthesize(text, current, should) {
      if (current < should) {
        return ['(', text, ')'];
      }
      return text;
    }
    function generateVerbatimString(string) {
      var i, iz, result;
      result = string.split(/\r\n|\n/);
      for (i = 1, iz = result.length; i < iz; i++) {
        result[i] = newline + base + result[i];
      }
      return result;
    }
    function generateVerbatim(expr, precedence) {
      var verbatim, result, prec;
      verbatim = expr[extra.verbatim];
      if (typeof verbatim === 'string') {
        result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
      } else {
        // verbatim is object
        result = generateVerbatimString(verbatim.content);
        prec = verbatim.precedence != null ? verbatim.precedence : Precedence.Sequence;
        result = parenthesize(result, prec, precedence);
      }
      return toSourceNodeWhenNeeded(result, expr);
    }
    function CodeGenerator() {}

    // Helpers.

    CodeGenerator.prototype.maybeBlock = function (stmt, flags) {
      var result,
        noLeadingComment,
        that = this;
      noLeadingComment = !extra.comment || !stmt.leadingComments;
      if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
        return [space, this.generateStatement(stmt, flags)];
      }
      if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
        return ';';
      }
      withIndent(function () {
        result = [newline, addIndent(that.generateStatement(stmt, flags))];
      });
      return result;
    };
    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
      var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
      if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
        return [result, space];
      }
      if (ends) {
        return [result, base];
      }
      return [result, newline, base];
    };
    function generateIdentifier(node) {
      return toSourceNodeWhenNeeded(node.name, node);
    }
    function generateAsyncPrefix(node, spaceRequired) {
      return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
    }
    function generateStarSuffix(node) {
      var isGenerator = node.generator && !extra.moz.starlessGenerator;
      return isGenerator ? '*' + space : '';
    }
    function generateMethodPrefix(prop) {
      var func = prop.value,
        prefix = '';
      if (func.async) {
        prefix += generateAsyncPrefix(func, !prop.computed);
      }
      if (func.generator) {
        // avoid space before method name
        prefix += generateStarSuffix(func) ? '*' : '';
      }
      return prefix;
    }
    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
      if (node.type === Syntax.Identifier) {
        return generateIdentifier(node);
      }
      return this.generateExpression(node, precedence, flags);
    };
    CodeGenerator.prototype.generateFunctionParams = function (node) {
      var i, iz, result, hasDefault;
      hasDefault = false;
      if (node.type === Syntax.ArrowFunctionExpression && !node.rest && (!node.defaults || node.defaults.length === 0) && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
        // arg => { } case
        result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];
      } else {
        result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
        result.push('(');
        if (node.defaults) {
          hasDefault = true;
        }
        for (i = 0, iz = node.params.length; i < iz; ++i) {
          if (hasDefault && node.defaults[i]) {
            // Handle default values.
            result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
          } else {
            result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
          }
          if (i + 1 < iz) {
            result.push(',' + space);
          }
        }
        if (node.rest) {
          if (node.params.length) {
            result.push(',' + space);
          }
          result.push('...');
          result.push(generateIdentifier(node.rest));
        }
        result.push(')');
      }
      return result;
    };
    CodeGenerator.prototype.generateFunctionBody = function (node) {
      var result, expr;
      result = this.generateFunctionParams(node);
      if (node.type === Syntax.ArrowFunctionExpression) {
        result.push(space);
        result.push('=>');
      }
      if (node.expression) {
        result.push(space);
        expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
        if (expr.toString().charAt(0) === '{') {
          expr = ['(', expr, ')'];
        }
        result.push(expr);
      } else {
        result.push(this.maybeBlock(node.body, S_TTFF));
      }
      return result;
    };
    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
      var result = ['for' + (stmt.await ? noEmptySpace() + 'await' : '') + space + '('],
        that = this;
      withIndent(function () {
        if (stmt.left.type === Syntax.VariableDeclaration) {
          withIndent(function () {
            result.push(stmt.left.kind + noEmptySpace());
            result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
          });
        } else {
          result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
        }
        result = join(result, operator);
        result = [join(result, that.generateExpression(stmt.right, Precedence.Assignment, E_TTT)), ')'];
      });
      result.push(this.maybeBlock(stmt.body, flags));
      return result;
    };
    CodeGenerator.prototype.generatePropertyKey = function (expr, computed) {
      var result = [];
      if (computed) {
        result.push('[');
      }
      result.push(this.generateExpression(expr, Precedence.Assignment, E_TTT));
      if (computed) {
        result.push(']');
      }
      return result;
    };
    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
      if (Precedence.Assignment < precedence) {
        flags |= F_ALLOW_IN;
      }
      return parenthesize([this.generateExpression(left, Precedence.Call, flags), space + operator + space, this.generateExpression(right, Precedence.Assignment, flags)], Precedence.Assignment, precedence);
    };
    CodeGenerator.prototype.semicolon = function (flags) {
      if (!semicolons && flags & F_SEMICOLON_OPT) {
        return '';
      }
      return ';';
    };

    // Statements.

    CodeGenerator.Statement = {
      BlockStatement: function (stmt, flags) {
        var range,
          content,
          result = ['{', newline],
          that = this;
        withIndent(function () {
          // handle functions without any code
          if (stmt.body.length === 0 && preserveBlankLines) {
            range = stmt.range;
            if (range[1] - range[0] > 2) {
              content = sourceCode.substring(range[0] + 1, range[1] - 1);
              if (content[0] === '\n') {
                result = ['{'];
              }
              result.push(content);
            }
          }
          var i, iz, fragment, bodyFlags;
          bodyFlags = S_TFFF;
          if (flags & F_FUNC_BODY) {
            bodyFlags |= F_DIRECTIVE_CTX;
          }
          for (i = 0, iz = stmt.body.length; i < iz; ++i) {
            if (preserveBlankLines) {
              // handle spaces before the first line
              if (i === 0) {
                if (stmt.body[0].leadingComments) {
                  range = stmt.body[0].leadingComments[0].extendedRange;
                  content = sourceCode.substring(range[0], range[1]);
                  if (content[0] === '\n') {
                    result = ['{'];
                  }
                }
                if (!stmt.body[0].leadingComments) {
                  generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                }
              }

              // handle spaces between lines
              if (i > 0) {
                if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                  generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                }
              }
            }
            if (i === iz - 1) {
              bodyFlags |= F_SEMICOLON_OPT;
            }
            if (stmt.body[i].leadingComments && preserveBlankLines) {
              fragment = that.generateStatement(stmt.body[i], bodyFlags);
            } else {
              fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
            }
            result.push(fragment);
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              if (preserveBlankLines && i < iz - 1) {
                // don't add a new line if there are leading coments
                // in the next statement
                if (!stmt.body[i + 1].leadingComments) {
                  result.push(newline);
                }
              } else {
                result.push(newline);
              }
            }
            if (preserveBlankLines) {
              // handle spaces after the last line
              if (i === iz - 1) {
                if (!stmt.body[i].trailingComments) {
                  generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                }
              }
            }
          }
        });
        result.push(addIndent('}'));
        return result;
      },
      BreakStatement: function (stmt, flags) {
        if (stmt.label) {
          return 'break ' + stmt.label.name + this.semicolon(flags);
        }
        return 'break' + this.semicolon(flags);
      },
      ContinueStatement: function (stmt, flags) {
        if (stmt.label) {
          return 'continue ' + stmt.label.name + this.semicolon(flags);
        }
        return 'continue' + this.semicolon(flags);
      },
      ClassBody: function (stmt, flags) {
        var result = ['{', newline],
          that = this;
        withIndent(function (indent) {
          var i, iz;
          for (i = 0, iz = stmt.body.length; i < iz; ++i) {
            result.push(indent);
            result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
            if (i + 1 < iz) {
              result.push(newline);
            }
          }
        });
        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
          result.push(newline);
        }
        result.push(base);
        result.push('}');
        return result;
      },
      ClassDeclaration: function (stmt, flags) {
        var result, fragment;
        result = ['class'];
        if (stmt.id) {
          result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));
        }
        if (stmt.superClass) {
          fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Unary, E_TTT));
          result = join(result, fragment);
        }
        result.push(space);
        result.push(this.generateStatement(stmt.body, S_TFFT));
        return result;
      },
      DirectiveStatement: function (stmt, flags) {
        if (extra.raw && stmt.raw) {
          return stmt.raw + this.semicolon(flags);
        }
        return escapeDirective(stmt.directive) + this.semicolon(flags);
      },
      DoWhileStatement: function (stmt, flags) {
        // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
        var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
        result = this.maybeBlockSuffix(stmt.body, result);
        return join(result, ['while' + space + '(', this.generateExpression(stmt.test, Precedence.Sequence, E_TTT), ')' + this.semicolon(flags)]);
      },
      CatchClause: function (stmt, flags) {
        var result,
          that = this;
        withIndent(function () {
          var guard;
          if (stmt.param) {
            result = ['catch' + space + '(', that.generateExpression(stmt.param, Precedence.Sequence, E_TTT), ')'];
            if (stmt.guard) {
              guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
              result.splice(2, 0, ' if ', guard);
            }
          } else {
            result = ['catch'];
          }
        });
        result.push(this.maybeBlock(stmt.body, S_TFFF));
        return result;
      },
      DebuggerStatement: function (stmt, flags) {
        return 'debugger' + this.semicolon(flags);
      },
      EmptyStatement: function (stmt, flags) {
        return ';';
      },
      ExportDefaultDeclaration: function (stmt, flags) {
        var result = ['export'],
          bodyFlags;
        bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;

        // export default HoistableDeclaration[Default]
        // export default AssignmentExpression[In] ;
        result = join(result, 'default');
        if (isStatement(stmt.declaration)) {
          result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
        } else {
          result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
        }
        return result;
      },
      ExportNamedDeclaration: function (stmt, flags) {
        var result = ['export'],
          bodyFlags,
          that = this;
        bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;

        // export VariableStatement
        // export Declaration[Default]
        if (stmt.declaration) {
          return join(result, this.generateStatement(stmt.declaration, bodyFlags));
        }

        // export ExportClause[NoReference] FromClause ;
        // export ExportClause ;
        if (stmt.specifiers) {
          if (stmt.specifiers.length === 0) {
            result = join(result, '{' + space + '}');
          } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
            result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
          } else {
            result = join(result, '{');
            withIndent(function (indent) {
              var i, iz;
              result.push(newline);
              for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                result.push(indent);
                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                if (i + 1 < iz) {
                  result.push(',' + newline);
                }
              }
            });
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
              result.push(newline);
            }
            result.push(base + '}');
          }
          if (stmt.source) {
            result = join(result, ['from' + space,
            // ModuleSpecifier
            this.generateExpression(stmt.source, Precedence.Sequence, E_TTT), this.semicolon(flags)]);
          } else {
            result.push(this.semicolon(flags));
          }
        }
        return result;
      },
      ExportAllDeclaration: function (stmt, flags) {
        // export * FromClause ;
        return ['export' + space, '*' + space, 'from' + space,
        // ModuleSpecifier
        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT), this.semicolon(flags)];
      },
      ExpressionStatement: function (stmt, flags) {
        var result, fragment;
        function isClassPrefixed(fragment) {
          var code;
          if (fragment.slice(0, 5) !== 'class') {
            return false;
          }
          code = fragment.charCodeAt(5);
          return code === 0x7B /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
        }
        function isFunctionPrefixed(fragment) {
          var code;
          if (fragment.slice(0, 8) !== 'function') {
            return false;
          }
          code = fragment.charCodeAt(8);
          return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A /* '*' */ || esutils.code.isLineTerminator(code);
        }
        function isAsyncPrefixed(fragment) {
          var code, i, iz;
          if (fragment.slice(0, 5) !== 'async') {
            return false;
          }
          if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
            return false;
          }
          for (i = 6, iz = fragment.length; i < iz; ++i) {
            if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
              break;
            }
          }
          if (i === iz) {
            return false;
          }
          if (fragment.slice(i, i + 8) !== 'function') {
            return false;
          }
          code = fragment.charCodeAt(i + 8);
          return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A /* '*' */ || esutils.code.isLineTerminator(code);
        }
        result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
        // 12.4 '{', 'function', 'class' is not allowed in this position.
        // wrap expression with parentheses
        fragment = toSourceNodeWhenNeeded(result).toString();
        if (fragment.charCodeAt(0) === 0x7B /* '{' */ ||
        // ObjectExpression
        isClassPrefixed(fragment) || isFunctionPrefixed(fragment) || isAsyncPrefixed(fragment) || directive && flags & F_DIRECTIVE_CTX && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string') {
          result = ['(', result, ')' + this.semicolon(flags)];
        } else {
          result.push(this.semicolon(flags));
        }
        return result;
      },
      ImportDeclaration: function (stmt, flags) {
        // ES6: 15.2.1 valid import declarations:
        //     - import ImportClause FromClause ;
        //     - import ModuleSpecifier ;
        var result,
          cursor,
          that = this;

        // If no ImportClause is present,
        // this should be `import ModuleSpecifier` so skip `from`
        // ModuleSpecifier is StringLiteral.
        if (stmt.specifiers.length === 0) {
          // import ModuleSpecifier ;
          return ['import', space,
          // ModuleSpecifier
          this.generateExpression(stmt.source, Precedence.Sequence, E_TTT), this.semicolon(flags)];
        }

        // import ImportClause FromClause ;
        result = ['import'];
        cursor = 0;

        // ImportedBinding
        if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
          result = join(result, [this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)]);
          ++cursor;
        }
        if (stmt.specifiers[cursor]) {
          if (cursor !== 0) {
            result.push(',');
          }
          if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
            // NameSpaceImport
            result = join(result, [space, this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)]);
          } else {
            // NamedImports
            result.push(space + '{');
            if (stmt.specifiers.length - cursor === 1) {
              // import { ... } from "...";
              result.push(space);
              result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
              result.push(space + '}' + space);
            } else {
              // import {
              //    ...,
              //    ...,
              // } from "...";
              withIndent(function (indent) {
                var i, iz;
                result.push(newline);
                for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
                  result.push(indent);
                  result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                  if (i + 1 < iz) {
                    result.push(',' + newline);
                  }
                }
              });
              if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
              }
              result.push(base + '}' + space);
            }
          }
        }
        result = join(result, ['from' + space,
        // ModuleSpecifier
        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT), this.semicolon(flags)]);
        return result;
      },
      VariableDeclarator: function (stmt, flags) {
        var itemFlags = flags & F_ALLOW_IN ? E_TTT : E_FTT;
        if (stmt.init) {
          return [this.generateExpression(stmt.id, Precedence.Assignment, itemFlags), space, '=', space, this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)];
        }
        return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
      },
      VariableDeclaration: function (stmt, flags) {
        // VariableDeclarator is typed as Statement,
        // but joined with comma (not LineTerminator).
        // So if comment is attached to target node, we should specialize.
        var result,
          i,
          iz,
          node,
          bodyFlags,
          that = this;
        result = [stmt.kind];
        bodyFlags = flags & F_ALLOW_IN ? S_TFFF : S_FFFF;
        function block() {
          node = stmt.declarations[0];
          if (extra.comment && node.leadingComments) {
            result.push('\n');
            result.push(addIndent(that.generateStatement(node, bodyFlags)));
          } else {
            result.push(noEmptySpace());
            result.push(that.generateStatement(node, bodyFlags));
          }
          for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
            node = stmt.declarations[i];
            if (extra.comment && node.leadingComments) {
              result.push(',' + newline);
              result.push(addIndent(that.generateStatement(node, bodyFlags)));
            } else {
              result.push(',' + space);
              result.push(that.generateStatement(node, bodyFlags));
            }
          }
        }
        if (stmt.declarations.length > 1) {
          withIndent(block);
        } else {
          block();
        }
        result.push(this.semicolon(flags));
        return result;
      },
      ThrowStatement: function (stmt, flags) {
        return [join('throw', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)), this.semicolon(flags)];
      },
      TryStatement: function (stmt, flags) {
        var result, i, iz, guardedHandlers;
        result = ['try', this.maybeBlock(stmt.block, S_TFFF)];
        result = this.maybeBlockSuffix(stmt.block, result);
        if (stmt.handlers) {
          // old interface
          for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
            result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
            if (stmt.finalizer || i + 1 !== iz) {
              result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
            }
          }
        } else {
          guardedHandlers = stmt.guardedHandlers || [];
          for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
            result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
            if (stmt.finalizer || i + 1 !== iz) {
              result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
            }
          }

          // new interface
          if (stmt.handler) {
            if (Array.isArray(stmt.handler)) {
              for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
                result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                if (stmt.finalizer || i + 1 !== iz) {
                  result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                }
              }
            } else {
              result = join(result, this.generateStatement(stmt.handler, S_TFFF));
              if (stmt.finalizer) {
                result = this.maybeBlockSuffix(stmt.handler.body, result);
              }
            }
          }
        }
        if (stmt.finalizer) {
          result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);
        }
        return result;
      },
      SwitchStatement: function (stmt, flags) {
        var result,
          fragment,
          i,
          iz,
          bodyFlags,
          that = this;
        withIndent(function () {
          result = ['switch' + space + '(', that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT), ')' + space + '{' + newline];
        });
        if (stmt.cases) {
          bodyFlags = S_TFFF;
          for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
            if (i === iz - 1) {
              bodyFlags |= F_SEMICOLON_OPT;
            }
            fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
            result.push(fragment);
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              result.push(newline);
            }
          }
        }
        result.push(addIndent('}'));
        return result;
      },
      SwitchCase: function (stmt, flags) {
        var result,
          fragment,
          i,
          iz,
          bodyFlags,
          that = this;
        withIndent(function () {
          if (stmt.test) {
            result = [join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)), ':'];
          } else {
            result = ['default:'];
          }
          i = 0;
          iz = stmt.consequent.length;
          if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
            fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
            result.push(fragment);
            i = 1;
          }
          if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push(newline);
          }
          bodyFlags = S_TFFF;
          for (; i < iz; ++i) {
            if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
              bodyFlags |= F_SEMICOLON_OPT;
            }
            fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
            result.push(fragment);
            if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              result.push(newline);
            }
          }
        });
        return result;
      },
      IfStatement: function (stmt, flags) {
        var result,
          bodyFlags,
          semicolonOptional,
          that = this;
        withIndent(function () {
          result = ['if' + space + '(', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT), ')'];
        });
        semicolonOptional = flags & F_SEMICOLON_OPT;
        bodyFlags = S_TFFF;
        if (semicolonOptional) {
          bodyFlags |= F_SEMICOLON_OPT;
        }
        if (stmt.alternate) {
          result.push(this.maybeBlock(stmt.consequent, S_TFFF));
          result = this.maybeBlockSuffix(stmt.consequent, result);
          if (stmt.alternate.type === Syntax.IfStatement) {
            result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);
          } else {
            result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
          }
        } else {
          result.push(this.maybeBlock(stmt.consequent, bodyFlags));
        }
        return result;
      },
      ForStatement: function (stmt, flags) {
        var result,
          that = this;
        withIndent(function () {
          result = ['for' + space + '('];
          if (stmt.init) {
            if (stmt.init.type === Syntax.VariableDeclaration) {
              result.push(that.generateStatement(stmt.init, S_FFFF));
            } else {
              // F_ALLOW_IN becomes false.
              result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
              result.push(';');
            }
          } else {
            result.push(';');
          }
          if (stmt.test) {
            result.push(space);
            result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
            result.push(';');
          } else {
            result.push(';');
          }
          if (stmt.update) {
            result.push(space);
            result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
            result.push(')');
          } else {
            result.push(')');
          }
        });
        result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
        return result;
      },
      ForInStatement: function (stmt, flags) {
        return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
      },
      ForOfStatement: function (stmt, flags) {
        return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
      },
      LabeledStatement: function (stmt, flags) {
        return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];
      },
      Program: function (stmt, flags) {
        var result, fragment, i, iz, bodyFlags;
        iz = stmt.body.length;
        result = [safeConcatenation && iz > 0 ? '\n' : ''];
        bodyFlags = S_TFTF;
        for (i = 0; i < iz; ++i) {
          if (!safeConcatenation && i === iz - 1) {
            bodyFlags |= F_SEMICOLON_OPT;
          }
          if (preserveBlankLines) {
            // handle spaces before the first line
            if (i === 0) {
              if (!stmt.body[0].leadingComments) {
                generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
              }
            }

            // handle spaces between lines
            if (i > 0) {
              if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
              }
            }
          }
          fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
          result.push(fragment);
          if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
            if (preserveBlankLines) {
              if (!stmt.body[i + 1].leadingComments) {
                result.push(newline);
              }
            } else {
              result.push(newline);
            }
          }
          if (preserveBlankLines) {
            // handle spaces after the last line
            if (i === iz - 1) {
              if (!stmt.body[i].trailingComments) {
                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
              }
            }
          }
        }
        return result;
      },
      FunctionDeclaration: function (stmt, flags) {
        return [generateAsyncPrefix(stmt, true), 'function', generateStarSuffix(stmt) || noEmptySpace(), stmt.id ? generateIdentifier(stmt.id) : '', this.generateFunctionBody(stmt)];
      },
      ReturnStatement: function (stmt, flags) {
        if (stmt.argument) {
          return [join('return', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)), this.semicolon(flags)];
        }
        return ['return' + this.semicolon(flags)];
      },
      WhileStatement: function (stmt, flags) {
        var result,
          that = this;
        withIndent(function () {
          result = ['while' + space + '(', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT), ')'];
        });
        result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
        return result;
      },
      WithStatement: function (stmt, flags) {
        var result,
          that = this;
        withIndent(function () {
          result = ['with' + space + '(', that.generateExpression(stmt.object, Precedence.Sequence, E_TTT), ')'];
        });
        result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
        return result;
      }
    };
    merge(CodeGenerator.prototype, CodeGenerator.Statement);

    // Expressions.

    CodeGenerator.Expression = {
      SequenceExpression: function (expr, precedence, flags) {
        var result, i, iz;
        if (Precedence.Sequence < precedence) {
          flags |= F_ALLOW_IN;
        }
        result = [];
        for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
          result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
          if (i + 1 < iz) {
            result.push(',' + space);
          }
        }
        return parenthesize(result, Precedence.Sequence, precedence);
      },
      AssignmentExpression: function (expr, precedence, flags) {
        return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
      },
      ArrowFunctionExpression: function (expr, precedence, flags) {
        return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
      },
      ConditionalExpression: function (expr, precedence, flags) {
        if (Precedence.Conditional < precedence) {
          flags |= F_ALLOW_IN;
        }
        return parenthesize([this.generateExpression(expr.test, Precedence.LogicalOR, flags), space + '?' + space, this.generateExpression(expr.consequent, Precedence.Assignment, flags), space + ':' + space, this.generateExpression(expr.alternate, Precedence.Assignment, flags)], Precedence.Conditional, precedence);
      },
      LogicalExpression: function (expr, precedence, flags) {
        return this.BinaryExpression(expr, precedence, flags);
      },
      BinaryExpression: function (expr, precedence, flags) {
        var result, leftPrecedence, rightPrecedence, currentPrecedence, fragment, leftSource;
        currentPrecedence = BinaryPrecedence[expr.operator];
        leftPrecedence = expr.operator === '**' ? Precedence.Postfix : currentPrecedence;
        rightPrecedence = expr.operator === '**' ? currentPrecedence : currentPrecedence + 1;
        if (currentPrecedence < precedence) {
          flags |= F_ALLOW_IN;
        }
        fragment = this.generateExpression(expr.left, leftPrecedence, flags);
        leftSource = fragment.toString();
        if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {
          result = [fragment, noEmptySpace(), expr.operator];
        } else {
          result = join(fragment, expr.operator);
        }
        fragment = this.generateExpression(expr.right, rightPrecedence, flags);
        if (expr.operator === '/' && fragment.toString().charAt(0) === '/' || expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
          // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
          result.push(noEmptySpace());
          result.push(fragment);
        } else {
          result = join(result, fragment);
        }
        if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
          return ['(', result, ')'];
        }
        return parenthesize(result, currentPrecedence, precedence);
      },
      CallExpression: function (expr, precedence, flags) {
        var result, i, iz;

        // F_ALLOW_UNPARATH_NEW becomes false.
        result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
        if (expr.optional) {
          result.push('?.');
        }
        result.push('(');
        for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
          result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
          if (i + 1 < iz) {
            result.push(',' + space);
          }
        }
        result.push(')');
        if (!(flags & F_ALLOW_CALL)) {
          return ['(', result, ')'];
        }
        return parenthesize(result, Precedence.Call, precedence);
      },
      ChainExpression: function (expr, precedence, flags) {
        if (Precedence.OptionalChaining < precedence) {
          flags |= F_ALLOW_CALL;
        }
        var result = this.generateExpression(expr.expression, Precedence.OptionalChaining, flags);
        return parenthesize(result, Precedence.OptionalChaining, precedence);
      },
      NewExpression: function (expr, precedence, flags) {
        var result, length, i, iz, itemFlags;
        length = expr['arguments'].length;

        // F_ALLOW_CALL becomes false.
        // F_ALLOW_UNPARATH_NEW may become false.
        itemFlags = flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0 ? E_TFT : E_TFF;
        result = join('new', this.generateExpression(expr.callee, Precedence.New, itemFlags));
        if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
          result.push('(');
          for (i = 0, iz = length; i < iz; ++i) {
            result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
            if (i + 1 < iz) {
              result.push(',' + space);
            }
          }
          result.push(')');
        }
        return parenthesize(result, Precedence.New, precedence);
      },
      MemberExpression: function (expr, precedence, flags) {
        var result, fragment;

        // F_ALLOW_UNPARATH_NEW becomes false.
        result = [this.generateExpression(expr.object, Precedence.Call, flags & F_ALLOW_CALL ? E_TTF : E_TFF)];
        if (expr.computed) {
          if (expr.optional) {
            result.push('?.');
          }
          result.push('[');
          result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
          result.push(']');
        } else {
          if (!expr.optional && expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
            fragment = toSourceNodeWhenNeeded(result).toString();
            // When the following conditions are all true,
            //   1. No floating point
            //   2. Don't have exponents
            //   3. The last character is a decimal digit
            //   4. Not hexadecimal OR octal number literal
            // we should add a floating point.
            if (fragment.indexOf('.') < 0 && !/[eExX]/.test(fragment) && esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) && !(fragment.length >= 2 && fragment.charCodeAt(0) === 48) // '0'
            ) {
              result.push(' ');
            }
          }
          result.push(expr.optional ? '?.' : '.');
          result.push(generateIdentifier(expr.property));
        }
        return parenthesize(result, Precedence.Member, precedence);
      },
      MetaProperty: function (expr, precedence, flags) {
        var result;
        result = [];
        result.push(typeof expr.meta === "string" ? expr.meta : generateIdentifier(expr.meta));
        result.push('.');
        result.push(typeof expr.property === "string" ? expr.property : generateIdentifier(expr.property));
        return parenthesize(result, Precedence.Member, precedence);
      },
      UnaryExpression: function (expr, precedence, flags) {
        var result, fragment, rightCharCode, leftSource, leftCharCode;
        fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);
        if (space === '') {
          result = join(expr.operator, fragment);
        } else {
          result = [expr.operator];
          if (expr.operator.length > 2) {
            // delete, void, typeof
            // get `typeof []`, not `typeof[]`
            result = join(result, fragment);
          } else {
            // Prevent inserting spaces between operator and argument if it is unnecessary
            // like, `!cond`
            leftSource = toSourceNodeWhenNeeded(result).toString();
            leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
            rightCharCode = fragment.toString().charCodeAt(0);
            if ((leftCharCode === 0x2B /* + */ || leftCharCode === 0x2D /* - */) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode)) {
              result.push(noEmptySpace());
              result.push(fragment);
            } else {
              result.push(fragment);
            }
          }
        }
        return parenthesize(result, Precedence.Unary, precedence);
      },
      YieldExpression: function (expr, precedence, flags) {
        var result;
        if (expr.delegate) {
          result = 'yield*';
        } else {
          result = 'yield';
        }
        if (expr.argument) {
          result = join(result, this.generateExpression(expr.argument, Precedence.Yield, E_TTT));
        }
        return parenthesize(result, Precedence.Yield, precedence);
      },
      AwaitExpression: function (expr, precedence, flags) {
        var result = join(expr.all ? 'await*' : 'await', this.generateExpression(expr.argument, Precedence.Await, E_TTT));
        return parenthesize(result, Precedence.Await, precedence);
      },
      UpdateExpression: function (expr, precedence, flags) {
        if (expr.prefix) {
          return parenthesize([expr.operator, this.generateExpression(expr.argument, Precedence.Unary, E_TTT)], Precedence.Unary, precedence);
        }
        return parenthesize([this.generateExpression(expr.argument, Precedence.Postfix, E_TTT), expr.operator], Precedence.Postfix, precedence);
      },
      FunctionExpression: function (expr, precedence, flags) {
        var result = [generateAsyncPrefix(expr, true), 'function'];
        if (expr.id) {
          result.push(generateStarSuffix(expr) || noEmptySpace());
          result.push(generateIdentifier(expr.id));
        } else {
          result.push(generateStarSuffix(expr) || space);
        }
        result.push(this.generateFunctionBody(expr));
        return result;
      },
      ArrayPattern: function (expr, precedence, flags) {
        return this.ArrayExpression(expr, precedence, flags, true);
      },
      ArrayExpression: function (expr, precedence, flags, isPattern) {
        var result,
          multiline,
          that = this;
        if (!expr.elements.length) {
          return '[]';
        }
        multiline = isPattern ? false : expr.elements.length > 1;
        result = ['[', multiline ? newline : ''];
        withIndent(function (indent) {
          var i, iz;
          for (i = 0, iz = expr.elements.length; i < iz; ++i) {
            if (!expr.elements[i]) {
              if (multiline) {
                result.push(indent);
              }
              if (i + 1 === iz) {
                result.push(',');
              }
            } else {
              result.push(multiline ? indent : '');
              result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
            }
            if (i + 1 < iz) {
              result.push(',' + (multiline ? newline : space));
            }
          }
        });
        if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
          result.push(newline);
        }
        result.push(multiline ? base : '');
        result.push(']');
        return result;
      },
      RestElement: function (expr, precedence, flags) {
        return '...' + this.generatePattern(expr.argument);
      },
      ClassExpression: function (expr, precedence, flags) {
        var result, fragment;
        result = ['class'];
        if (expr.id) {
          result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
        }
        if (expr.superClass) {
          fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Unary, E_TTT));
          result = join(result, fragment);
        }
        result.push(space);
        result.push(this.generateStatement(expr.body, S_TFFT));
        return result;
      },
      MethodDefinition: function (expr, precedence, flags) {
        var result, fragment;
        if (expr['static']) {
          result = ['static' + space];
        } else {
          result = [];
        }
        if (expr.kind === 'get' || expr.kind === 'set') {
          fragment = [join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)), this.generateFunctionBody(expr.value)];
        } else {
          fragment = [generateMethodPrefix(expr), this.generatePropertyKey(expr.key, expr.computed), this.generateFunctionBody(expr.value)];
        }
        return join(result, fragment);
      },
      Property: function (expr, precedence, flags) {
        if (expr.kind === 'get' || expr.kind === 'set') {
          return [expr.kind, noEmptySpace(), this.generatePropertyKey(expr.key, expr.computed), this.generateFunctionBody(expr.value)];
        }
        if (expr.shorthand) {
          if (expr.value.type === "AssignmentPattern") {
            return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);
          }
          return this.generatePropertyKey(expr.key, expr.computed);
        }
        if (expr.method) {
          return [generateMethodPrefix(expr), this.generatePropertyKey(expr.key, expr.computed), this.generateFunctionBody(expr.value)];
        }
        return [this.generatePropertyKey(expr.key, expr.computed), ':' + space, this.generateExpression(expr.value, Precedence.Assignment, E_TTT)];
      },
      ObjectExpression: function (expr, precedence, flags) {
        var multiline,
          result,
          fragment,
          that = this;
        if (!expr.properties.length) {
          return '{}';
        }
        multiline = expr.properties.length > 1;
        withIndent(function () {
          fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
        });
        if (!multiline) {
          // issues 4
          // Do not transform from
          //   dejavu.Class.declare({
          //       method2: function () {}
          //   });
          // to
          //   dejavu.Class.declare({method2: function () {
          //       }});
          if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
            return ['{', space, fragment, space, '}'];
          }
        }
        withIndent(function (indent) {
          var i, iz;
          result = ['{', newline, indent, fragment];
          if (multiline) {
            result.push(',' + newline);
            for (i = 1, iz = expr.properties.length; i < iz; ++i) {
              result.push(indent);
              result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
              if (i + 1 < iz) {
                result.push(',' + newline);
              }
            }
          }
        });
        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
          result.push(newline);
        }
        result.push(base);
        result.push('}');
        return result;
      },
      AssignmentPattern: function (expr, precedence, flags) {
        return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);
      },
      ObjectPattern: function (expr, precedence, flags) {
        var result,
          i,
          iz,
          multiline,
          property,
          that = this;
        if (!expr.properties.length) {
          return '{}';
        }
        multiline = false;
        if (expr.properties.length === 1) {
          property = expr.properties[0];
          if (property.type === Syntax.Property && property.value.type !== Syntax.Identifier) {
            multiline = true;
          }
        } else {
          for (i = 0, iz = expr.properties.length; i < iz; ++i) {
            property = expr.properties[i];
            if (property.type === Syntax.Property && !property.shorthand) {
              multiline = true;
              break;
            }
          }
        }
        result = ['{', multiline ? newline : ''];
        withIndent(function (indent) {
          var i, iz;
          for (i = 0, iz = expr.properties.length; i < iz; ++i) {
            result.push(multiline ? indent : '');
            result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
            if (i + 1 < iz) {
              result.push(',' + (multiline ? newline : space));
            }
          }
        });
        if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
          result.push(newline);
        }
        result.push(multiline ? base : '');
        result.push('}');
        return result;
      },
      ThisExpression: function (expr, precedence, flags) {
        return 'this';
      },
      Super: function (expr, precedence, flags) {
        return 'super';
      },
      Identifier: function (expr, precedence, flags) {
        return generateIdentifier(expr);
      },
      ImportDefaultSpecifier: function (expr, precedence, flags) {
        return generateIdentifier(expr.id || expr.local);
      },
      ImportNamespaceSpecifier: function (expr, precedence, flags) {
        var result = ['*'];
        var id = expr.id || expr.local;
        if (id) {
          result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
        }
        return result;
      },
      ImportSpecifier: function (expr, precedence, flags) {
        var imported = expr.imported;
        var result = [imported.name];
        var local = expr.local;
        if (local && local.name !== imported.name) {
          result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));
        }
        return result;
      },
      ExportSpecifier: function (expr, precedence, flags) {
        var local = expr.local;
        var result = [local.name];
        var exported = expr.exported;
        if (exported && exported.name !== local.name) {
          result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));
        }
        return result;
      },
      Literal: function (expr, precedence, flags) {
        var raw;
        if (expr.hasOwnProperty('raw') && parse && extra.raw) {
          try {
            raw = parse(expr.raw).body[0].expression;
            if (raw.type === Syntax.Literal) {
              if (raw.value === expr.value) {
                return expr.raw;
              }
            }
          } catch (e) {
            // not use raw property
          }
        }
        if (expr.regex) {
          return '/' + expr.regex.pattern + '/' + expr.regex.flags;
        }
        if (expr.value === null) {
          return 'null';
        }
        if (typeof expr.value === 'string') {
          return escapeString(expr.value);
        }
        if (typeof expr.value === 'number') {
          return generateNumber(expr.value);
        }
        if (typeof expr.value === 'boolean') {
          return expr.value ? 'true' : 'false';
        }
        return generateRegExp(expr.value);
      },
      GeneratorExpression: function (expr, precedence, flags) {
        return this.ComprehensionExpression(expr, precedence, flags);
      },
      ComprehensionExpression: function (expr, precedence, flags) {
        // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
        // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6

        var result,
          i,
          iz,
          fragment,
          that = this;
        result = expr.type === Syntax.GeneratorExpression ? ['('] : ['['];
        if (extra.moz.comprehensionExpressionStartsWithAssignment) {
          fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
          result.push(fragment);
        }
        if (expr.blocks) {
          withIndent(function () {
            for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
              fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
              if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                result = join(result, fragment);
              } else {
                result.push(fragment);
              }
            }
          });
        }
        if (expr.filter) {
          result = join(result, 'if' + space);
          fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
          result = join(result, ['(', fragment, ')']);
        }
        if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
          fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
          result = join(result, fragment);
        }
        result.push(expr.type === Syntax.GeneratorExpression ? ')' : ']');
        return result;
      },
      ComprehensionBlock: function (expr, precedence, flags) {
        var fragment;
        if (expr.left.type === Syntax.VariableDeclaration) {
          fragment = [expr.left.kind, noEmptySpace(), this.generateStatement(expr.left.declarations[0], S_FFFF)];
        } else {
          fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
        }
        fragment = join(fragment, expr.of ? 'of' : 'in');
        fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));
        return ['for' + space + '(', fragment, ')'];
      },
      SpreadElement: function (expr, precedence, flags) {
        return ['...', this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)];
      },
      TaggedTemplateExpression: function (expr, precedence, flags) {
        var itemFlags = E_TTF;
        if (!(flags & F_ALLOW_CALL)) {
          itemFlags = E_TFF;
        }
        var result = [this.generateExpression(expr.tag, Precedence.Call, itemFlags), this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)];
        return parenthesize(result, Precedence.TaggedTemplate, precedence);
      },
      TemplateElement: function (expr, precedence, flags) {
        // Don't use "cooked". Since tagged template can use raw template
        // representation. So if we do so, it breaks the script semantics.
        return expr.value.raw;
      },
      TemplateLiteral: function (expr, precedence, flags) {
        var result, i, iz;
        result = ['`'];
        for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
          result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
          if (i + 1 < iz) {
            result.push('${' + space);
            result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
            result.push(space + '}');
          }
        }
        result.push('`');
        return result;
      },
      ModuleSpecifier: function (expr, precedence, flags) {
        return this.Literal(expr, precedence, flags);
      },
      ImportExpression: function (expr, precedence, flag) {
        return parenthesize(['import(', this.generateExpression(expr.source, Precedence.Assignment, E_TTT), ')'], Precedence.Call, precedence);
      }
    };
    merge(CodeGenerator.prototype, CodeGenerator.Expression);
    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
      var result, type;
      type = expr.type || Syntax.Property;
      if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
        return generateVerbatim(expr, precedence);
      }
      result = this[type](expr, precedence, flags);
      if (extra.comment) {
        result = addComments(expr, result);
      }
      return toSourceNodeWhenNeeded(result, expr);
    };
    CodeGenerator.prototype.generateStatement = function (stmt, flags) {
      var result, fragment;
      result = this[stmt.type](stmt, flags);

      // Attach comments

      if (extra.comment) {
        result = addComments(stmt, result);
      }
      fragment = toSourceNodeWhenNeeded(result).toString();
      if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' && fragment.charAt(fragment.length - 1) === '\n') {
        result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
      }
      return toSourceNodeWhenNeeded(result, stmt);
    };
    function generateInternal(node) {
      var codegen;
      codegen = new CodeGenerator();
      if (isStatement(node)) {
        return codegen.generateStatement(node, S_TFFF);
      }
      if (isExpression(node)) {
        return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
      }
      throw new Error('Unknown node type: ' + node.type);
    }
    function generate(node, options) {
      var defaultOptions = getDefaultOptions(),
        result,
        pair;
      if (options != null) {
        // Obsolete options
        //
        //   `options.indent`
        //   `options.base`
        //
        // Instead of them, we can use `option.format.indent`.
        if (typeof options.indent === 'string') {
          defaultOptions.format.indent.style = options.indent;
        }
        if (typeof options.base === 'number') {
          defaultOptions.format.indent.base = options.base;
        }
        options = updateDeeply(defaultOptions, options);
        indent = options.format.indent.style;
        if (typeof options.base === 'string') {
          base = options.base;
        } else {
          base = stringRepeat(indent, options.format.indent.base);
        }
      } else {
        options = defaultOptions;
        indent = options.format.indent.style;
        base = stringRepeat(indent, options.format.indent.base);
      }
      json = options.format.json;
      renumber = options.format.renumber;
      hexadecimal = json ? false : options.format.hexadecimal;
      quotes = json ? 'double' : options.format.quotes;
      escapeless = options.format.escapeless;
      newline = options.format.newline;
      space = options.format.space;
      if (options.format.compact) {
        newline = space = indent = base = '';
      }
      parentheses = options.format.parentheses;
      semicolons = options.format.semicolons;
      safeConcatenation = options.format.safeConcatenation;
      directive = options.directive;
      parse = json ? null : options.parse;
      sourceMap = options.sourceMap;
      sourceCode = options.sourceCode;
      preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
      extra = options;
      if (sourceMap) {
        if (!exports.browser) {
          // We assume environment is node.js
          // And prevent from including source-map by browserify
          SourceNode = requireSourceMap().SourceNode;
        } else {
          SourceNode = commonjsGlobal.sourceMap.SourceNode;
        }
      }
      result = generateInternal(node);
      if (!sourceMap) {
        pair = {
          code: result.toString(),
          map: null
        };
        return options.sourceMapWithCode ? pair : pair.code;
      }
      pair = result.toStringWithSourceMap({
        file: options.file,
        sourceRoot: options.sourceMapRoot
      });
      if (options.sourceContent) {
        pair.map.setSourceContent(options.sourceMap, options.sourceContent);
      }
      if (options.sourceMapWithCode) {
        return pair;
      }
      return pair.map.toString();
    }
    FORMAT_MINIFY = {
      indent: {
        style: '',
        base: 0
      },
      renumber: true,
      hexadecimal: true,
      quotes: 'auto',
      escapeless: true,
      compact: true,
      parentheses: false,
      semicolons: false
    };
    FORMAT_DEFAULTS = getDefaultOptions().format;
    exports.version = require$$3.version;
    exports.generate = generate;
    exports.attachComments = estraverse$1.attachComments;
    exports.Precedence = updateDeeply({}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
  })();
  /* vim: set sw=4 ts=4 et tw=80 : */
})(escodegen);

var FAIL = {};
var VARS = {};
var _args = [];
var Evaluate = {
  evalExpression: function evalExpression(ast, vars) {
    if (!vars) {
      vars = VARS;
    }
    var result = function walk(node, scopeVars) {
      switch (node.type) {
        case 'Literal':
          return node.value;
        case 'UnaryExpression':
          var val = walk(node.argument);
          switch (node.operator) {
            case '+':
              return +val;
            case '-':
              return -val;
            case '~':
              return ~val;
            case '!':
              return !val;
            default:
              return FAIL;
          }
        case 'ArrayExpression':
          var xs = [];
          for (var i = 0, l = node.elements.length; i < l; i++) {
            var x = walk(node.elements[i]);
            if (x === FAIL) return FAIL;
            xs.push(x);
          }
          return xs;
        case 'ObjectExpression':
          var obj = {};
          for (var i = 0; i < node.properties.length; i++) {
            var prop = node.properties[i];
            var value = prop.value === null ? prop.value : walk(prop.value);
            if (value === FAIL) return FAIL;
            obj[prop.key.value || prop.key.name] = value;
          }
          return obj;
        case 'BinaryExpression':
        case 'LogicalExpression':
          var l = walk(node.left);
          if (l === FAIL) return FAIL;
          var r = walk(node.right);
          if (r === FAIL) return FAIL;
          switch (node.operator) {
            case '==':
              return l == r;
            case '===':
              return l === r;
            case '!=':
              return l != r;
            case '!==':
              return l !== r;
            case '+':
              return l + r;
            case '-':
              return l - r;
            case '*':
              return l * r;
            case '/':
              return l / r;
            case '%':
              return l % r;
            case '<':
              return l < r;
            case '<=':
              return l <= r;
            case '>':
              return l > r;
            case '>=':
              return l >= r;
            case '|':
              return l | r;
            case '&':
              return l & r;
            case '^':
              return l ^ r;
            case '&&':
              return l && r;
            case '||':
              return l || r;
          }
          return FAIL;
        case 'Identifier':
          if ({}.hasOwnProperty.call(vars, node.name)) {
            return vars[node.name];
          } else {
            return FAIL;
          }
        case 'ThisExpression':
          if ({}.hasOwnProperty.call(vars, 'this')) {
            return vars['this'];
          } else {
            return FAIL;
          }
        case 'CallExpression':
          var callee = walk(node.callee);
          if (callee === FAIL) return FAIL;
          if (typeof callee !== 'function') return FAIL;
          var ctx = node.callee.object ? walk(node.callee.object) : FAIL;
          if (ctx === FAIL) ctx = null;
          _args.length = 0;
          var args = _args;
          for (var i = 0, l = node.arguments.length; i < l; i++) {
            var x = walk(node.arguments[i]);
            if (x === FAIL) return FAIL;
            args.push(x);
          }
          return callee.apply(ctx, args);
        case 'MemberExpression':
          var obj = walk(node.object);
          // do not allow access to methods on Function
          if (obj === FAIL || typeof obj == 'function') {
            return FAIL;
          }
          if (node.property.type === 'Identifier') {
            return obj[node.property.name];
          }
          var prop = walk(node.property);
          if (prop === FAIL) return FAIL;
          return obj[prop];
        case 'ConditionalExpression':
          var val = walk(node.test);
          if (val === FAIL) return FAIL;
          return val ? walk(node.consequent) : walk(node.alternate);
        case 'ExpressionStatement':
          var val = walk(node.expression);
          if (val === FAIL) return FAIL;
          return val;
        case 'ReturnStatement':
          return walk(node.argument);
        case 'FunctionExpression':
          var bodies = node.body.body;

          // Create a "scope" for our arguments
          var oldVars = {};
          Object.keys(vars).forEach(function (element) {
            oldVars[element] = vars[element];
          });
          for (var i = 0; i < node.params.length; i++) {
            var key = node.params[i];
            if (key.type == 'Identifier') {
              vars[key.name] = null;
            } else {
              return FAIL;
            }
          }
          for (var i in bodies) {
            if (walk(bodies[i]) === FAIL) {
              return FAIL;
            }
          }
          // restore the vars and scope after we walk
          vars = oldVars;
          var keys = Object.keys(vars);
          var vals = keys.map(function (key) {
            return vars[key];
          });
          return Function(keys.join(', '), 'return ' + escodegen.generate(node)).apply(null, vals);
        case 'TemplateLiteral':
          var str = '';
          for (var i = 0; i < node.expressions.length; i++) {
            str += walk(node.quasis[i]);
            str += walk(node.expressions[i]);
          }
          str += walk(node.quasis[i]);
          return str;
        case 'TaggedTemplateExpression':
          var tag = walk(node.tag);
          var quasi = node.quasi;
          var strings = quasi.quasis.map(walk);
          var values = quasi.expressions.map(walk);
          return tag.apply(null, [strings].concat(values));
        case 'TemplateElement':
          return node.value.cooked;
        default:
          return FAIL;
      }
    }(ast);
    return result === FAIL ? undefined : result;
  }
};

/**
 * @class Expression
 * The expression.
 * @memberof BASE.THING
 */
class Expression {
  constructor(expression) {
    this.expression = esprima$2.exports.parse(expression).body[0].expression;
    return this;
  }
  evaluate(param) {
    param = param || {};
    return Evaluate.evalExpression(this.expression, param);
  }
}

/**
 * @class ResolvablePromise
 * The resolvable promise.
 * @memberof BASE.THING
 */
class ResolvablePromise {
  /**
   * constructor.
   */
  constructor(executor) {
    var that = this;
    this._resolved = false;
    this._rejected = false;
    this._promise = new Promise((resolve, reject) => {
      if (that._resolved) {
        resolve();
      } else if (that._rejected) {
        reject();
      } else {
        this._resolve = resolve;
        this._reject = reject;
      }
      if (executor) {
        executor(resolve, reject);
      }
    });
  }
  resolve() {
    if (this._resolve) {
      this._resolve.apply(this._promise, arguments);
    } else {
      this._resolved = true;
    }
  }
  reject() {
    if (this._reject) {
      this._reject.apply(this._promise, arguments);
    } else {
      this._rejected = true;
    }
  }
  then() {
    return this._promise.then.apply(this._promise, arguments);
  }
  catch() {
    return this._promise.catch.apply(this._promise, arguments);
  }
  finally() {
    return this._promise.finally.apply(this._promise, arguments);
  }
  get pending() {
    if (!this._resolved && !this._resolved) {
      return true;
    }
    return false;
  }
  get resolved() {
    return this._resolved;
  }
  get rejected() {
    return this._rejected;
  }
}

var __$a = {
  private: Symbol('private')
};

/**
 * @class BaseCachedObject
 * The base cached object.
 * @memberof BASE.THING
 */
class BaseCachedObject {
  /**
   * constructor.
   */
  constructor() {
    this[__$a.private] = {};
    var _private = this[__$a.private];
    _private.objects = new Map();
  }
  clear(callback) {
    if (callback) {
      this.forEach((object, key) => {
        callback(object, key, this);
      });
    }
    this[__$a.private].objects.clear();
  }
  delete(key) {
    this[__$a.private].objects.delete(key);
  }
  forEach(callback) {
    this[__$a.private].objects.forEach((object, key) => {
      callback(object, key, this);
    });
  }
  has(key) {
    return this[__$a.private].objects.has(key);
  }
  keys() {
    return this[__$a.private].objects.keys();
  }
  get(key) {
    var _private = this[__$a.private];
    return _private.objects.get(key);
  }
  set(key, object) {
    var _private = this[__$a.private];
    _private.objects.set(key, object);
    return object;
  }
  get objects() {
    var _private = this[__$a.private];
    return _private.objects;
  }
}

/**
 * @class ResolvableCachedObject
 * The resolvable cached object.
 * @memberof BASE.THING
 */
class ResolvableCachedObject extends BaseCachedObject {
  /**
   * constructor.
   */
  constructor() {
    super();
  }
  set(key, object) {
    var cache = this.objects.get(key);
    if (!cache) {
      cache = {
        pendingPromise: new ResolvablePromise()
      };
      if (object) {
        Object.assign(cache, object);
      }
      super.set(key, cache);
    }
    return cache;
  }
}
ResolvableCachedObject.className = 'ResolvableCachedObject';

var __$9 = {
  private: Symbol('private')
};

/**
 * @class DynamicCachedObject
 * The dynamic cached object.
 * @memberof BASE.THING
 */
class DynamicCachedObject extends BaseCachedObject {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(param) {
    if (param === void 0) {
      param = {};
    }
    super();
    this[__$9.private] = {};
    var _private = this[__$9.private];
    _private.time = 0;
    _private.cleanupTime = BaseUtils.parseValue(param['cleanupTime'], 60);
    _private.liveTime = BaseUtils.parseValue(param['liveTime'], 120);
  }

  /**
   * Update.
   * @param {Number} deltaTime The delta time in seconds.
   */
  update(deltaTime) {
    var _private = this[__$9.private];
    _private.time += deltaTime;

    // Check whether need to cleanup map
    if (_private.time >= _private.cleanupTime) {
      this.objects.forEach((object, key) => {
        if (object.liveTime > _private.time) {
          object.liveTime -= _private.time;
          return;
        }
        this.objects.delete(key);
      });
      _private.time = 0;
    }
  }
  get(key) {
    var _private = this[__$9.private];
    var object = super.get(key);
    if (!object) {
      return undefined;
    }
    object.liveTime = _private.liveTime;
    return object.value;
  }
  set(key, value) {
    var _private = this[__$9.private];
    super.set(key, {
      value,
      liveTime: _private.liveTime
    });
    return value;
  }
  active(key) {
    var _private = this[__$9.private];
    var object = this.objects.get(key);
    if (!object) {
      return false;
    }
    object.liveTime = _private.liveTime;
    return true;
  }
}
DynamicCachedObject.className = 'DynamicCachedObject';

/**
 * @class CircularQueue
 * The circular queue.
 * @memberof BASE.THING
 */
class CircularQueue {
  constructor(capacity) {
    this._capacity = Math.max(capacity, 0) || 10;
    this._list = Array.from({
      length: this._capacity
    });
    this._tail = -1;
    this._head = -1;
    this._size = 0;
  }
  clear() {
    this._list = Array.from({
      length: this._capacity
    });
    this._tail = -1;
    this._head = -1;
    this._size = 0;
  }
  enqueue(item) {
    if (this._size !== this._capacity) {
      this._tail = (this._tail + 1) % this._capacity;
      this._list[this._tail] = item;
      this._size += 1;
      if (this._head === -1) {
        this._head = this._tail;
      }
    }
    return this.size;
  }
  dequeue() {
    var item = null;
    if (this._size) {
      item = this._list[this._head];
      this._head = (this._head + 1) % this._capacity;
      this._size--;
      if (!this._size) {
        this._head = -1;
        this._tail = -1;
      }
    }
    return item;
  }
  toString() {
    return this._list.filter(el => el !== undefined).toString();
  }
  get size() {
    return this._size;
  }
  get front() {
    return this._list[this._head];
  }
  get tail() {
    return this._list[this._tail];
  }
  get isFull() {
    return this._size === this._capacity;
  }
  get isEmpty() {
    return this._size === 0;
  }
}

/**
 * @class EventDispatcher
 * The event dispatcher.
 * @memberof BASE.THING
 */
class EventDispatcher {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor() {
    this._listeners = {};
  }

  /**
   * Clear.
   */
  clear() {
    this._listeners = {};
  }

  /**
   * Add event listener.
   * @param {String} type The event type.
   * @param {Function} listener The event callback function.
   */
  addEventListener(type, listener) {
    var index = type.indexOf(' ');
    if (index !== -1) {
      type.split(' ').forEach(eventType => {
        this.addEventListener(eventType, listener);
      });
    } else {
      var listeners = this._listeners;
      if (listeners[type] === undefined) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
  }

  /**
   * Remove event listener.
   * @param {String} type The event type.
   * @param {Function} listener The event callback function.
   */
  removeEventListener(type, listener) {
    var index = type.indexOf(' ');
    if (index !== -1) {
      type.split(' ').forEach(eventType => {
        this.removeEventListener(eventType, listener);
      });
    } else {
      var listeners = this._listeners;
      var listenerArray = listeners[type];
      if (listenerArray !== undefined) {
        var _index = listenerArray.indexOf(listener);
        if (_index !== -1) {
          listenerArray.splice(_index, 1);
        }
      }
    }
  }

  /**
   * Dispatch event.
   * @param {Object} event The event info.
   * @param {String} event.type The event type.
   */
  dispatchEvent(event) {
    var listeners = this._listeners;
    var listenerArray = listeners[event.type];
    if (listenerArray) {
      // Make a copy, in case listeners are removed while iterating.
      var array = listenerArray.slice(0);
      for (var i = 0, l = array.length; i < l; i++) {
        array[i].call(this, event);
      }
    }
    var powerfulListeners = listeners['*'];
    if (powerfulListeners) {
      var _array = powerfulListeners.slice(0);
      for (var _i = 0, _l = _array.length; _i < _l; _i++) {
        _array[_i].call(this, event);
      }
    }
  }

  /**
   * Trigger event.
   * @param {String} type The event type.
   * @param {Object} event The event info.
   */
  triggerEvent(type, event) {
    var listeners = this._listeners;
    var listenerArray = listeners[type];
    if (listenerArray) {
      // Make a copy, in case listeners are removed while iterating.
      var array = listenerArray.slice(0);
      for (var i = 0, l = array.length; i < l; i++) {
        array[i].call(this, event);
      }
    }
    var powerfulListeners = listeners['*'];
    if (powerfulListeners) {
      var _array2 = powerfulListeners.slice(0);
      for (var _i2 = 0, _l2 = _array2.length; _i2 < _l2; _i2++) {
        _array2[_i2].call(this, event);
      }
    }
  }
}

var __$8 = {
  private: Symbol('private')
};

/**
 * @class FilteredArray
 * The filtered array.
 * @memberof BASE.THING
 */
class FilteredArray {
  constructor() {
    this[__$8.private] = {};
    var _private = this[__$8.private];
    _private.onFilter = null;
    _private.result = null;
    Array.apply(this, arguments);
    this.length = 0;
    Object.defineProperties(this, {
      length: {
        enumerable: false
      }
    });
  }
}

// Adding array prototype chain.
for (var key in Array.prototype) {
  FilteredArray.prototype[key] = Array.prototype[key];
}

// Hook functions to affect results
['push', 'pop', 'splice', 'shift'].forEach(funcName => {
  FilteredArray.prototype[funcName] = function () {
    var _private = this[__$8.private];
    _private.result = null;
    return Array.prototype[funcName].apply(this, arguments);
  };
});

// Fix concat
FilteredArray.prototype.concat = function () {
  return [].concat(this.map(v => {
    return v;
  }));
};

// Clear elements
FilteredArray.prototype.clear = function () {
  this.length = 0;
};

// Clear result
FilteredArray.prototype.clearResult = function () {
  var _private = this[__$8.private];
  _private.result = null;
};
Object.defineProperties(FilteredArray.prototype, {
  push: {
    enumerable: false
  },
  pop: {
    enumerable: false
  },
  splice: {
    enumerable: false
  },
  shift: {
    enumerable: false
  },
  concat: {
    enumerable: false
  },
  clear: {
    enumerable: false
  },
  clearResult: {
    enumerable: false
  },
  onFilter: {
    get: function get() {
      var _private = this[__$8.private];
      return _private.onFilter;
    },
    set: function set(value) {
      var _private = this[__$8.private];
      _private.onFilter = value;
    },
    enumerable: false,
    configurable: false
  },
  result: {
    get: function get() {
      var _private = this[__$8.private];
      if (_private.result) {
        return _private.result;
      }
      if (_private.onFilter) {
        _private.result = this.filter(_private.onFilter);
        return _private.result;
      }
      return this;
    },
    enumerable: false,
    configurable: false
  }
});

/**
 * @class Callbacks
 * The callback functions.
 * @memberof BASE.THING
 */
class Callbacks {
  constructor() {
    this._callbacks = [];
  }
  add(callback) {
    this._callbacks.push(callback);
  }
  remove(callback) {
    Utils$1.removeFromArray(this._callbacks, callback);
  }
  clear() {
    this._callbacks.length = 0;
  }
  invoke() {
    var callbacks = this._callbacks;
    for (var i = 0, l = callbacks.length; i < l; i++) {
      var callback = callbacks[i];
      callback.apply(this, arguments);
    }
  }
  has(callback) {
    return this._callbacks.includes(callback);
  }
}

/**
 * @class Flags
 * The flags.
 * @memberof BASE.THING
 */
class Flags {
  /**
   * constructor.
   */
  constructor() {
    this._values = 0;
  }

  /**
   * Copy from other flags.
   * @param {THING.Flags} value The flags.
   * @return {THING.Flags}
   */
  copy(value) {
    this._values = value._values;
    return this;
  }

  /**
   * Clone.
   * @return {THING.Flags}
   */
  clone() {
    var flags = new Flags();
    flags.copy(this);
    return flags;
  }

  /**
   * Enable/Disable flags.
   * @param {Number} flags The flags what to set or clear.
   * @param {Boolean} [value=true] True indicates enable it, otherwise disable it.
   * @return {Boolean} True indicates flags has changed.
   */
  enable(flags, value) {
    if (value === void 0) {
      value = true;
    }
    var previousValues = this._values;
    if (value) {
      this._values |= flags;
    } else if (this._values & flags) {
      this._values ^= flags;
    }
    return previousValues != this._values;
  }

  /**
   * Check flag.
   * @param {Number} flags The flags what to check.
   * @param {Boolean} enable Check whether it's enable or disable.
   * @return {Boolean}
   */
  check(flags, enable) {
    var result = !!(this._values & flags);
    return result == enable;
  }

  /**
   * Set flags.
   * @param {Number} flags The flags what to set.
   */
  set(flags) {
    this._values = flags;
  }

  /**
   * Get the enable state.
   * @param {Number} flags The flags what to check.
   * @reutrn {Boolean}
   */
  get(flags) {
    return !!(this._values & flags);
  }

  /**
   * Combine flags.
   * @param {Number} flags The flags what to combine.
   */
  combine(flags) {
    this._values |= flags;
  }

  /**
   * Clear flags.
   * @param {Number} flags The flags what to clear.
   */
  clear(flags) {
    if (flags) {
      this._values &= ~flags;
    } else {
      this._values = 0;
    }
  }

  /**
   * Check whether has flags.
   * @param {Number} flags The flags what to combine.
   * @return {Boolean}
   */
  has(flags) {
    return !!(this._values & flags);
  }

  // #region Accessor

  /**
   * Get the values.
   * @type {Number}
   */
  get values() {
    return this._values;
  }

  // #endregion
}

/**
 * @class Layers
 * The layers.
 * @memberof BASE.THING
 */
class Layers {
  /**
   * constructor.
   */
  constructor() {
    this._values = new Set();
  }
  isEmpty() {
    return !this._values.size;
  }
  clear() {
    this._values.clear();
  }
  add(value) {
    this._values.add(value);
    return this;
  }
  remove(value) {
    this._values.remove(value);
    return this;
  }
  set(value) {
    this._values.clear();
    if (value.isLayers) {
      this.union(value.values);
    } else if (Utils.isArray(value)) {
      value.forEach(v => {
        this._values.add(v);
      });
    } else {
      this._values.add(value);
    }
    return this;
  }
  union(layers) {
    this._values = new Set([...this._values, ...layers.values]);
    return this;
  }
  intersect(layers) {
    this._values = new Set([...this._values].filter(x => layers.values.has(x)));
    return this;
  }
  diff(layers) {
    this._values = new Set([...this._values].filter(x => !layers.values.has(x)));
    return this;
  }

  // #region Accessor

  /**
   * Get the values.
   * @type {Number}
   */
  get values() {
    return Array(this._values);
  }
  get isLayers() {
    return true;
  }

  // #endregion
}

var __$7 = {
  private: Symbol('private')
};
var cMaxNumber = 32;

/**
 * @class IdAllocator
 * The id allocator.
 * @memberof BASE.THING
 */
class IdAllocator {
  constructor(param) {
    this[__$7.private] = {};
    var _private = this[__$7.private];
    _private.values = [0xFFFFFFFF];
  }

  /**
   * Allocate.
   * @return {Number}
   */
  allocate() {
    var _private = this[__$7.private];
    var values = _private.values;
    var value = values[values.length - 1];
    if (!value) {
      value = 0xFFFFFFFF;
      valuePools.push(value);
    }
    for (var i = 0; i < cMaxNumber; i++) {
      var mask = 1 << i;
      if (value & mask) {
        var index = values.length - 1;
        values[index] &= ~mask;
        return index << 8 | mask;
      }
    }

    // Should never reach here ...
    return -1;
  }

  /**
   * Free.
   * @param {Number} id The id.
   */
  free(id) {
    var _private = this[__$7.private];
    var index = id >> 8;
    var mask = id & 0xFF;
    _private.values[index] |= mask;
  }
}

var __$6 = {
  private: Symbol('private')
};

/**
 * @class IndexAllocator
 * Index allocator.
 * @memberof BASE.THING
 */
class IndexAllocator {
  constructor(param) {
    this[__$6.private] = {};
    var _private = this[__$6.private];
    _private.maxCount = param['maxCount'];
    if (!_private.maxCount) {
      Utils.error("Initialize index buffer failed, due to maxCount: '" + maxCount + "' is invalid");
      return;
    }
    _private.curIndex = 0;
    _private.deletedIndexs = []; // store the deleted object index
  }

  resize(number) {
    var _private = this[__$6.private];
    _private.maxCount = number;
  }
  allocate() {
    var _private = this[__$6.private];
    if (_private.deletedIndexs.length > 0) {
      return _private.deletedIndexs.shift();
    }
    if (!this.isFull()) {
      return _private.curIndex++;
    }
    return -1;
  }
  free(index) {
    var _private = this[__$6.private];
    _private.deletedIndexs.push(index);
  }
  isFull() {
    var _private = this[__$6.private];
    if (_private.deletedIndexs.length > 0) {
      return false;
    }
    return _private.curIndex >= _private.maxCount;
  }
  get freeNumber() {
    var _private = this[__$6.private];
    return _private.deletedIndexs.length + (_private.maxCount - _private.curIndex);
  }
  get allocatedNumber() {
    var _private = this[__$6.private];
    return _private.curIndex - _private.deletedIndexs.length;
  }
}

function _classPrivateFieldBase(receiver, privateKey) {
  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
    throw new TypeError("attempted to use private field on non-instance");
  }
  return receiver;
}

var id = 0;
function _classPrivateFieldKey(name) {
  return "__private_" + id++ + "_" + name;
}

var __$5 = {
  private: Symbol('private')
};

// #region Private Functions

// Get the aligned size.
function _getAlignedSize(size, alignment) {
  if (size % alignment) {
    return (size & ~(alignment - 1)) + alignment;
  } else {
    return size;
  }
}

// #endregion

/**
 * @class BufferAllocator
 * The buffer allocator.
 * @memberof BASE.THING
 */
var _grow = /*#__PURE__*/_classPrivateFieldKey("grow");
var _tryAllocate = /*#__PURE__*/_classPrivateFieldKey("tryAllocate");
var _sortBlocks = /*#__PURE__*/_classPrivateFieldKey("sortBlocks");
class BufferAllocator {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(param) {
    if (param === void 0) {
      param = {};
    }
    Object.defineProperty(this, _sortBlocks, {
      value: _sortBlocks2
    });
    Object.defineProperty(this, _tryAllocate, {
      value: _tryAllocate2
    });
    Object.defineProperty(this, _grow, {
      value: _grow2
    });
    this[__$5.private] = {};
    var _private2 = this[__$5.private];

    // Initialize core
    _private2.memory = param['memory'];
    _private2.heap = new Uint8Array(_private2.memory.buffer);
    _private2.blocks = [];
  }

  // #region Private

  // #endregion

  /**
   * Allocate buffer and return offset.
   * @param {Number} size The size to allocated.
   * @return {Number}
   */
  malloc(size) {
    var _private = this[__$5.private];
    var alignedSize = _getAlignedSize(size, 8);
    while (true) {
      var offset = _classPrivateFieldBase(this, _tryAllocate)[_tryAllocate](alignedSize);
      if (offset === -1) {
        _classPrivateFieldBase(this, _grow)[_grow]();
        continue;
      }
      _private.blocks.push({
        offset,
        size,
        alignedSize
      });
      _classPrivateFieldBase(this, _sortBlocks)[_sortBlocks]();
      return offset;
    }
  }

  /**
   * Free allocated buffer by offset.
   * @param {Number} offset The offset.
   */
  free(offset) {
    var _private = this[__$5.private];
    var blocks = _private.blocks;
    for (var i = 0; i < blocks.length; i++) {
      var block = blocks[i];
      if (block.offset == offset) {
        blocks.splice(i, 1);
        _classPrivateFieldBase(this, _sortBlocks)[_sortBlocks]();
        break;
      }
    }
  }

  /**
   * Get the block size by offset.
   * @param {Number} offset The offset.
   * @return {Number}
   */
  getBlockSize(offset) {
    var _private = this[__$5.private];
    var blocks = _private.blocks;
    for (var i = 0; i < blocks.length; i++) {
      var block = blocks[i];
      if (block.offset == offset) {
        return block.size;
      }
    }
    return 0;
  }
}
function _grow2() {
  var _private = this[__$5.private];
  var memory = _private.memory;
  memory.grow(2);
  _private.heap = new Uint8Array(memory.buffer);
}
function _tryAllocate2(size) {
  var _private = this[__$5.private];
  var blocks = _private.blocks;
  var offset = 32;
  for (var i = 0; i < blocks.length; i++) {
    var block = blocks[i];
    if (offset + size < block.offset) {
      return offset;
    }
    offset = block.offset + block.alignedSize;
  }
  if (offset + size >= _private.memory.buffer.byteLength) {
    return -1;
  }
  return offset;
}
function _sortBlocks2() {
  var _private = this[__$5.private];
  _private.blocks.sort(function (b1, b2) {
    return b1.offset - b2.offset;
  });
}

/**
 * @class TypedObject
 * The typed object.
 * @memberof BASE.THING
 */
class TypedObject {
  constructor(param) {
    this._dataStore = {};
    this._keys = Object.getOwnPropertyNames(param);
    this._keys.forEach(key => {
      this._dataStore[key] = param[key];
      if (typeof param[key] === 'function') {
        throw new TypeError('Can\'t define property <TypedObject>.' + key + ', methods are not permitted on typed objects.');
      }
      Object.defineProperty(this, key, {
        enumerable: true,
        get: function get() {
          return this._dataStore[key];
        },
        set: function set(value) {
          this._set(param, key, value);
        }
      });
    });
  }
  _err(key, typeDest, typeSrc) {
    throw new TypeError('Can\'t set property <TypedObject>.' + key + ', type "' + typeSrc + '" is not assignable to type "' + typeDest + '"');
  }
  _set(param, key, value) {
    var type = typeof param[key];
    switch (type) {
      case 'object':
        if (typeof value !== 'object') {
          if (typeof param[key].length !== 'undefined') {
            this._err(key, 'array', typeof value);
          } else {
            this._err(key, 'object', typeof value);
          }
        }
        if (typeof param[key].length !== 'undefined' && typeof value.length === 'undefined') {
          this._err(key, 'array', 'object');
        }
        if (typeof value.length !== 'undefined' && typeof param[key].length === 'undefined') {
          this._err(key, 'object', 'array');
        }
        break;
      default:
        if (typeof value !== type) {
          this._err(key, type, typeof value);
        }
        break;
    }
    this._dataStore[key] = value;
  }
  toObject() {
    var output = {};
    this._keys.forEach(function (key) {
      output[key] = self[key];
    });
    return output;
  }
}

var __$4 = {
  private: Symbol('private')
};

/**
 * @class ObjectPool
 * The object pool.
 * @memberof BASE.THING
 */
class ObjectPool extends IndexAllocator {
  constructor(param) {
    super(param);
    this[__$4.private] = {};
    var _private = this[__$4.private];
    var maxCount = param['maxCount'];
    if (!maxCount) {
      Utils.error("Initialize object pool failed, due to maxCount: '" + maxCount + "' is invalid");
      return;
    }
    var classType = param['classType'];
    if (!classType) {
      Utils.error("Initialize object pool failed, due to 'classType' is null");
      return;
    }
    _private.classType = classType;
    _private.objects = [];
    for (var i = 0; i < maxCount; i++) {
      _private.objects[i] = null;
    }
  }
  allocate(param, out) {
    var index = super.allocate();
    if (index === -1) {
      return null;
    }
    var _private = this[__$4.private];
    var objects = _private.objects;
    if (out) {
      out.index = index;
    }
    objects[index] = objects[index] || new _private.classType(param);
    return objects[index];
  }
}
ObjectPool.className = 'ObjectPool';

var _objArgs$1 = {};
var _defaultParams$1 = {};

/**
 * @class ObjectProxy
 * The object proxy.
 * @memberof BASE.THING
 */
class ObjectProxy {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(param) {
    if (param === void 0) {
      param = _defaultParams$1;
    }
    this._data = param['data'] || {};
    this._proxiedProperties = new WeakMap();
    this._onConvertValue = param['onConvertValue'];
    this._onChange = param['onChange'];
    this._onNeedProxy = param['onNeedProxy'];
    this._dataProxy = null;
  }

  // #region Private Functions

  _clear() {
    for (var key in this._data) {
      delete this._data[key];
    }
  }
  _createDataProxy() {
    var that = this;
    var handler = {
      set: function set(obj, prop, value) {
        if (that._onConvertValue) {
          value = Utils$1.parseValue(that._onConvertValue(prop, value), value);
        }
        if (!value) {
          var map = that._proxiedProperties.get(obj);
          if (map) {
            map.delete(prop);
          }
        }
        if (obj[prop] && Utils$1.isArray(value)) {
          var target = obj[prop];
          for (var i = 0, l = value.length; i < l; i++) {
            target[i] = value[i];
          }
        } else {
          obj[prop] = value;
        }
        var onChange = that._onChange;
        if (onChange) {
          _objArgs$1.data = that._data;
          _objArgs$1.propName = obj['__name__'];
          _objArgs$1.key = prop;
          _objArgs$1.value = value;
          onChange(_objArgs$1);
        }
        return true;
      },
      get: function get(target, prop) {
        var value = target[prop];
        if (value === null || typeof value !== 'object') {
          return value;
        }
        if (prop == 'customFormatters') {
          return value;
        }
        if (that._onFilterProperty) {
          that._onFilterProperty(prop);
        }
        if (that._onNeedProxy) {
          if (that._onNeedProxy(prop, value) === false) {
            return value;
          }
        }
        var proxiedProperties = that._proxiedProperties;
        var properites = proxiedProperties.get(target);
        if (properites) {
          var _proxy = properites.get(prop);
          if (_proxy) {
            return _proxy;
          }
        } else {
          properites = new Map();
          proxiedProperties.set(target, properites);
        }
        var proxy = new Proxy(value, handler);
        if (!proxy.customFormatters) {
          Object.defineProperties(proxy, {
            'customFormatters': {
              enumerable: false,
              configurable: false,
              get: function get() {
                return ['object', {
                  object: JSON.parse(JSON.stringify(value))
                }];
              }
            },
            '__name__': {
              enumerable: false,
              configurable: false,
              get: function get() {
                return prop;
              }
            }
          });
        }
        properites.set(prop, proxy);
        return proxy;
      },
      deleteProperty(target, prop) {
        if (prop in target) {
          delete target[prop];
          that.notifyChange();
          return true;
        } else {
          return false;
        }
      }
    };
    this._dataProxy = new Proxy(that._data, handler);
    Object.defineProperty(this._dataProxy, 'customFormatters', {
      enumerable: false,
      configurable: false,
      get: function get() {
        return ['object', {
          object: JSON.parse(JSON.stringify(that._data))
        }];
      }
    });
  }

  // #endregion

  dispose() {
    this._data = {};
    this._dataProxy = null;
    this._proxiedProperties = null;
    this._onChange = null;
  }

  /**
   * Notify change.
   */
  notifyChange() {
    var onChange = this._onChange;
    if (onChange) {
      onChange({
        data: this._data
      });
    }
  }

  /**
   * Merge data from object.
   * @param {Object} object The object.
   * @return {THING.ObjectProxy}
   */
  merge(object) {
    if (!object) {
      return;
    }
    var toData = this._data;
    var fromData = object.isObjectProxy ? object.data : object;
    for (var key in fromData) {
      toData[key] = fromData[key];
    }
    this.notifyChange();
    return this;
  }

  /**
   * Copy data from object.
   * @param {Object} object The object.
   * @return {THING.ObjectProxy}
   */
  copy(object) {
    if (!object) {
      return;
    }
    this._clear();
    return this.merge(object);
  }

  /**
   * Get the object data.
   * @type {Object}
   */
  get data() {
    return this._data;
  }

  /**
   * Get the object data proxy.
   * @type {Object}
   */
  get dataProxy() {
    if (!this._dataProxy) {
      this._createDataProxy();
    }
    return this._dataProxy;
  }
  get isObjectProxy() {
    return true;
  }
}

var _objArgs = {};
var _defaultParams = {};
var Flag$1 = {
  DefaultValues: 1 << 0,
  HasDefaultvalues: 1 << 1
};

// #region Private Functions

// Compare value.
function _equals(v1, v2) {
  if (Utils$1.isArray(v1) && Utils$1.isArray(v2)) {
    if (v1.length != v2.length) {
      return false;
    }
    for (var i = 0; i < v1.length; i++) {
      if (v1[i] != v2[i]) {
        return false;
      }
    }
  } else if (Utils$1.isObject(v1) && Utils$1.isObject(v2)) {
    for (var key in v1) {
      if (!_equals(v1[key], v2[key])) {
        return false;
      }
    }
  } else if (v1 != v2) {
    return false;
  }
  return true;
}

// Clone object.
function _cloneObject(data) {
  return Utils$1.cloneObject(data, false);
}

// #endregion

/**
 * @class ObjectAttributes
 * The object attributes.
 * @memberof BASE.THING
 */
class ObjectAttributes {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(param) {
    if (param === void 0) {
      param = _defaultParams;
    }
    this._flags = new Flags();
    this._onChange = param['onChange'];
    this._onConvertValue = param['onConvertValue'];
    this._onCloneObject = param['onCloneObject'] || _cloneObject;
    this._onEquals = param['onEquals'] || _equals;
    var data = param['data'];
    this._baseValues = Object.assign({}, data);
    this._values = this._createObjectProxy(this._onCloneObject(data), param);
    this._defaultValues = this._createObjectProxy(this._onCloneObject(data), param);
  }

  // #region Private

  _createObjectProxy(data, param) {
    var options = {
      data,
      onConvertValue: this._onConvertValue
    };
    if (param['onNeedProxy']) {
      options['onNeedProxy'] = param['onNeedProxy'];
    }
    if (this._onChange) {
      options.onChange = ev => {
        _objArgs.key = ev.key;
        if (this._flags.has(Flag$1.HasDefaultvalues)) {
          _objArgs.data = this.getValuesWithDefaults();
        } else {
          _objArgs.data = this._values.data;
        }
        this._onChange(_objArgs);
      };
    }
    return new ObjectProxy(options);
  }

  // #endregion

  dispose() {
    this._baseValues = null;
    this._values.dispose();
    this._defaultValues.dispose();
    this._flags = null;
    this._onChange = null;
    this._onConvertValue = null;
  }

  /**
   * Begin to set default values.
   */
  beginDefaultValues() {
    this._flags.enable(Flag$1.DefaultValues, true);
    this._flags.enable(Flag$1.HasDefaultvalues, true);
  }

  /**
   * End to set default values.
   */
  endDefaultValues() {
    this._flags.enable(Flag$1.DefaultValues, false);
  }
  defineProperties(options) {
    Object.defineProperties(this._baseValues, options);
    Object.defineProperties(this._values.data, options);
    Object.defineProperties(this._defaultValues.data, options);
  }
  updateBaseValues(values) {
    this._onCloneObject(values, this._baseValues);
  }
  updateBaseValue(key, value) {
    this._baseValues[key] = value;
  }
  makeCurrentAsBaseValue() {
    this._onCloneObject(this._values.data, this._baseValues);
  }
  hasValue(key, ignoreDefaultValues) {
    var value = this._values.dataProxy[key];
    if (!Utils$1.isNull(value)) {
      return true;
    }
    if (!ignoreDefaultValues) {
      var defaultValue = this._defaultValues.dataProxy[key];
      if (!Utils$1.isNull(defaultValue)) {
        return true;
      }
    }
    return false;
  }
  getValue(key) {
    var value = this._values.dataProxy[key];
    if (!Utils$1.isNull(value)) {
      return value;
    }
    var defaultValue = this._defaultValues.dataProxy[key];
    if (!Utils$1.isNull(defaultValue)) {
      return defaultValue;
    }
    return null;
  }
  getValueByDefault(key) {
    if (!this.isChangingDefaultValues()) {
      var value = this._values.dataProxy[key];
      if (!Utils$1.isNull(value)) {
        return value;
      }
    }
    var defaultValue = this._defaultValues.dataProxy[key];
    if (!Utils$1.isNull(defaultValue)) {
      return defaultValue;
    }
    return null;
  }
  setValue(key, value, equalsFunc) {
    var values = this.values;
    if (equalsFunc) {
      if (equalsFunc(values[key], value)) {
        return false;
      }
    } else if (this._onEquals(values[key], value)) {
      return false;
    }
    if (Utils$1.isArray(value)) {
      values[key] = value.slice(0);
    } else {
      values[key] = value;
    }
    return true;
  }
  updateValue(key, value) {
    var curValue = value;
    if (Utils$1.isArray(value)) {
      curValue = value.slice(0);
    } else {
      curValue = value;
    }
    this.values[key] = curValue;
  }
  mergeValues(values) {
    var curValues = this.values;
    for (var key in values) {
      curValues[key] = values[key];
    }
  }
  isBaseValue(key, equalsFunc) {
    var value = this.getValue(key);
    var baseValue = this._baseValues[key];
    if (equalsFunc) {
      return equalsFunc(value, baseValue);
    } else {
      return this._onEquals(value, baseValue);
    }
  }
  isChanged() {
    return !Utils$1.equalsObject(this.values, this._baseValues);
  }
  isChangingDefaultValues() {
    return this._flags.has(Flag$1.DefaultValues);
  }
  getDiffValues() {
    var values = this._values.data;
    var baseValues = this._baseValues;
    var diffValues = {};
    for (var key in values) {
      if (!this._onEquals(values[key], baseValues[key])) {
        diffValues[key] = values[key];
      }
    }
    return diffValues;
  }
  getValuesWithDefaults(equals) {
    equals = equals || this._onEquals;
    var combinedValues = {};
    var baseValues = this._baseValues;
    var values = this._values.data;
    var defaultValues = this._defaultValues.data;

    // The keys of values and default values would be different, so get the union keys and get each value of them
    var keys = Utils$1.getUnionKeys(values, defaultValues);
    keys.forEach(key => {
      var value;
      if (equals(values[key], baseValues[key])) {
        value = Utils$1.parseValue(defaultValues[key], baseValues[key]);
      } else {
        value = values[key];
      }
      if (value === undefined) {
        return;
      }
      combinedValues[key] = value;
    });
    return combinedValues;
  }
  getValues() {
    return this._values;
  }
  get baseValues() {
    return this._baseValues;
  }
  get defaultValues() {
    return this._defaultValues.data;
  }
  get values() {
    if (this._flags.has(Flag$1.DefaultValues)) {
      return this._defaultValues.dataProxy;
    } else {
      return this._values.dataProxy;
    }
  }
  set values(value) {
    if (this._flags.has(Flag$1.DefaultValues)) {
      this._defaultValues.copy(value);
    } else {
      this._values.copy(value);
    }
  }
  get data() {
    if (this._flags.has(Flag$1.DefaultValues)) {
      return this._defaultValues.data;
    } else {
      return this._values.data;
    }
  }
  get isObjectAttributes() {
    return true;
  }
}

var _refCount = /*#__PURE__*/_classPrivateFieldKey("refCount");
/**
 * Dispose object.
 * @callback OnDisposeCallback
 */

/**
 * @class RefCountObject
 * The referenced count object.
 * @memberof BASE.THING
 */
class RefCountObject {
  /**
   * constructor.
   */
  constructor() {
    Object.defineProperty(this, _refCount, {
      writable: true,
      value: 1
    });
  } // #region Overrides

  /**
   * When referenced count equals to 0.
   * @member {OnDisposeCallback} onDispose
   * @memberof BASE.THING.RefCountObject
   * @instance
   */

  // #endregion

  /**
   * Add referenced count.
   */
  addRef() {
    _classPrivateFieldBase(this, _refCount)[_refCount]++;
  }

  /**
   * Release referenced count.
   */
  release() {
    if (_classPrivateFieldBase(this, _refCount)[_refCount] === 0) {
      return;
    }
    _classPrivateFieldBase(this, _refCount)[_refCount]--;
    if (_classPrivateFieldBase(this, _refCount)[_refCount] === 0) {
      if (this.onDispose) {
        this.onDispose();
      }
    }
  }

  // #region Accessor

  /**
   * Get the referenced count.
   * @type {Number}
   */
  get refCount() {
    return _classPrivateFieldBase(this, _refCount)[_refCount];
  }

  // #endregion
}

var __$3 = {
  private: Symbol('private')
};

/**
 * @class StateGroup
 * The group to control enable/disable state.
 * @memberof BASE.THING
 */
var _updateStates = /*#__PURE__*/_classPrivateFieldKey("updateStates");
class StateGroup {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(param) {
    if (param === void 0) {
      param = {};
    }
    Object.defineProperty(this, _updateStates, {
      value: _updateStates2
    });
    this[__$3.private] = {};
    var _private2 = this[__$3.private];
    _private2.id = 1;
    _private2.states = [];
    _private2.latestState = false;
    _private2.onChange = param['onChange'] || function () {};
  }

  // #region Private

  /**
   * Check whether has group.
   * @param {String} name The group name.
   * @return {Boolean}
   */
  has(name) {
    var _private = this[__$3.private];
    var states = _private.states;
    for (var i = 0; i < states.length; i++) {
      var state = states[i];
      if (state.name == name) {
        return true;
      }
    }
    return false;
  }

  /**
   * Check whether it's enable.
   * @return {Boolean}
   */
  isAnyEnable() {
    var _private = this[__$3.private];
    var states = _private.states;
    for (var i = 0; i < states.length; i++) {
      if (states[i].value) {
        return true;
      }
    }
    return false;
  }

  /**
   * Check whether it's enable.
   * @param {String} name The group name, if do not proivde then indicates get the final state.
   * @return {Boolean}
   */
  isEnable(name) {
    var _private = this[__$3.private];
    var states = _private.states;
    if (name) {
      for (var i = 0; i < states.length; i++) {
        var state = states[i];
        if (state.name == name) {
          return state.value;
        }
      }
    } else {
      if (states.length) {
        return states[0].value;
      }
    }
    return false;
  }

  /**
   * Check whether it's enable by filter.
   * @param {Function} filter The filter callback function.
   * @return {Boolean}
   */
  isEnableByFilter(filter) {
    var _private = this[__$3.private];
    var states = _private.states;
    for (var i = 0, l = states.length; i < l; i++) {
      var state = states[i];
      if (filter && filter(state.name) === false) {
        continue;
      }
      return state.value;
    }
    return false;
  }

  /**
   * Enable/Disable.
   * @param {*} value The value.
   * @param {String} name The group name.
   * @param {Number} priority The group priority, check enable state from high to low.
   * @return {Boolean}
   */
  enable(value, name, priority) {
    if (priority === void 0) {
      priority = 0;
    }
    var _private = this[__$3.private];
    var states = _private.states;
    for (var i = 0; i < states.length; i++) {
      var state = states[i];
      if (state.name == name) {
        state.value = value;
        state.priority = priority;
        return _classPrivateFieldBase(this, _updateStates)[_updateStates]();
      }
    }
    states.push({
      id: _private.id++,
      value,
      name,
      priority
    });
    return _classPrivateFieldBase(this, _updateStates)[_updateStates]();
  }

  /**
   * Get value by name.
   * @param {String} name The group name.
   * @return {*}
   */
  getValue(name) {
    var _private = this[__$3.private];
    var states = _private.states;
    for (var i = 0; i < states.length; i++) {
      var state = states[i];
      if (state.name == name) {
        return state.value;
      }
    }
    return null;
  }

  /**
   * Clear all states.
   */
  clear() {
    this[__$3.private].states = [];
  }

  /**
   * Get the states.
   * @type {Object}
   */
  get states() {
    return this[__$3.private].states;
  }
}
function _updateStates2() {
  var _private = this[__$3.private];
  _private.states.sort((a, b) => {
    if (a.priority !== b.priority) {
      return b.priority - a.priority;
    }
    return b.id - a.id;
  });
  var state = _private.states[0].value;
  if (state != _private.latestState) {
    _private.onChange({
      state
    });
  }
  _private.latestState = state;
  return state;
}

/**
 * @class CommandExecutor
 * The command exector.
 * @memberof BASE.THING
 */
class CommandExecutor {
  /**
   * The comamnd executor for calling interfaces and wait util invoking runCommands() interface.
   */
  constructor() {
    this._commands = [];
  }

  /**
   * Add command.
   * @param {String} funcName The function name.
   * @param {Array<Object>} args The arguments.
   */
  addCommand(funcName, args) {
    this._commands.push({
      funcName,
      args
    });
  }

  /**
   * Run commands on object.
   * @param {Object} object The main object.
   * @param {Boolean} clear True indicates clear commands when completed.
   */
  runCommands(object, clear) {
    if (clear === void 0) {
      clear = true;
    }
    this._commands.forEach(command => {
      object[command.funcName].apply(object, command.args);
    });
    if (clear) {
      this.clearCommands();
    }
  }

  /**
   * Clear commands.
   */
  clearCommands() {
    this._commands = [];
  }

  /**
   * Get commands.
   * @type {Array<Object>}
   */
  get commands() {
    return this._commands;
  }
}

var __$2 = {
  private: Symbol('private')
};

/**
 * @class Switcher
 * The switcher to control enable/disable state.
 * @memberof BASE.THING
 */
var _notifyChangeEvent = /*#__PURE__*/_classPrivateFieldKey("notifyChangeEvent");
var _enable = /*#__PURE__*/_classPrivateFieldKey("enable");
var _getLockStateByName = /*#__PURE__*/_classPrivateFieldKey("getLockStateByName");
class Switcher {
  /**
   * constructor.
   */
  constructor() {
    Object.defineProperty(this, _getLockStateByName, {
      value: _getLockStateByName2
    });
    Object.defineProperty(this, _enable, {
      value: _enable2
    });
    Object.defineProperty(this, _notifyChangeEvent, {
      value: _notifyChangeEvent2
    });
    this[__$2.private] = {};
    var _private2 = this[__$2.private];

    // Initialize core
    _private2.lockQueue = [];
    _private2.enable = true;
    _private2.onChange = null;
  }

  // #region Private

  // #endregion

  /**
   * Check whether it's enable.
   * @return {Boolean}
   */
  isEnable() {
    return this[__$2.private].enable;
  }

  /**
   * Enable/Disable.
   * @param {Boolean} value Enable or disable.
   */
  enable(value) {
    if (this.isLock()) {
      return;
    }

    // Update state
    this[__$2.private].enable(value);
  }

  /**
   * Check whether it's lock.
   * @param {String} name The lock state name.
   * @return {Boolean}
   */
  isLock(name) {
    return !!_classPrivateFieldBase(this, _getLockStateByName)[_getLockStateByName](name);
  }

  /**
   * Get the lock state by name.
   * @param {String} name The lock state name.
   * @return {Boolean}
   */
  getLockState(name) {
    var lockState = _classPrivateFieldBase(this, _getLockStateByName)[_getLockStateByName](name);
    if (!lockState) {
      return false;
    }
    return lockState.enable;
  }

  /**
   * Lock state to enable/disable state.
   * @param {Boolean} value Enable or disable.
   * @param {String} name The lock state name.
   */
  lock(value, name) {
    // Check whether it's existing
    if (this.isLock(name)) {
      return;
    }
    var _private = this[__$2.private];

    // Update lock queue
    _private.lockQueue.push({
      prevEnableState: _private.enable,
      enable: value,
      name
    });

    // Update state
    _classPrivateFieldBase(this, _enable)[_enable](value);
  }

  /**
   * Unlock state.
   * @param {String} name The lock state name.
   */
  unlock(name) {
    var _private = this[__$2.private];

    // Get the lock state
    var lockState = _classPrivateFieldBase(this, _getLockStateByName)[_getLockStateByName](name);
    if (!lockState) {
      return;
    }

    // Get the previous lock state
    var value = lockState.prevEnableState;

    // Remove lock from queue and update all later operations
    _private.lockQueue.splice(lockState.index, 1);
    for (var i = lockState.index; i < _private.lockQueue.length; i++) {
      _private.lockQueue[i].prevEnableState = value;
    }

    // Try to get the latest lock state
    if (_private.lockQueue.length) {
      value = _private.lockQueue[_private.lockQueue.length - 1].enable;
    }

    // Update state
    _classPrivateFieldBase(this, _enable)[_enable](value);
  }
}
function _notifyChangeEvent2() {
  var _private = this[__$2.private];
  var onChange = _private.onChange;
  if (onChange) {
    onChange(_private.enable);
  }
}
function _enable2(value) {
  var _private = this[__$2.private];
  var prevEnableState = _private.enable;
  _private.enable = value;

  // Notify outside if it changed
  if (prevEnableState != _private.enable) {
    _classPrivateFieldBase(this, _notifyChangeEvent)[_notifyChangeEvent]();
  }
}
function _getLockStateByName2(name) {
  var _private = this[__$2.private];
  var queue = _private.lockQueue;
  for (var i = 0; i < queue.length; i++) {
    var info = queue[i];
    if (info.name == name) {
      return {
        prevEnableState: info.prevEnableState,
        enable: info.enable,
        name: info.name,
        index: i
      };
    }
  }
  return null;
}

var main$1 = {};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

var tslib_es6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  __extends: __extends,
  get __assign () { return __assign; },
  __rest: __rest,
  __decorate: __decorate,
  __param: __param,
  __metadata: __metadata,
  __awaiter: __awaiter,
  __generator: __generator,
  __createBinding: __createBinding,
  __exportStar: __exportStar,
  __values: __values,
  __read: __read,
  __spread: __spread,
  __spreadArrays: __spreadArrays,
  __spreadArray: __spreadArray,
  __await: __await,
  __asyncGenerator: __asyncGenerator,
  __asyncDelegator: __asyncDelegator,
  __asyncValues: __asyncValues,
  __makeTemplateObject: __makeTemplateObject,
  __importStar: __importStar,
  __importDefault: __importDefault,
  __classPrivateFieldGet: __classPrivateFieldGet,
  __classPrivateFieldSet: __classPrivateFieldSet,
  __classPrivateFieldIn: __classPrivateFieldIn
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

var empty = {};

var empty$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: empty
});

var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(empty$1);

var main = {};

var fork = {exports: {}};

var types = {};

var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types;
  hasRequiredTypes = 1;
  Object.defineProperty(types, "__esModule", {
    value: true
  });
  types.Def = void 0;
  var tslib_1 = require$$0;
  var Op = Object.prototype;
  var objToStr = Op.toString;
  var hasOwn = Op.hasOwnProperty;
  var BaseType = /** @class */function () {
    function BaseType() {}
    BaseType.prototype.assert = function (value, deep) {
      if (!this.check(value, deep)) {
        var str = shallowStringify(value);
        throw new Error(str + " does not match type " + this);
      }
      return true;
    };
    BaseType.prototype.arrayOf = function () {
      var elemType = this;
      return new ArrayType(elemType);
    };
    return BaseType;
  }();
  var ArrayType = /** @class */function (_super) {
    (0, tslib_1.__extends)(ArrayType, _super);
    function ArrayType(elemType) {
      var _this = _super.call(this) || this;
      _this.elemType = elemType;
      _this.kind = "ArrayType";
      return _this;
    }
    ArrayType.prototype.toString = function () {
      return "[" + this.elemType + "]";
    };
    ArrayType.prototype.check = function (value, deep) {
      var _this = this;
      return Array.isArray(value) && value.every(function (elem) {
        return _this.elemType.check(elem, deep);
      });
    };
    return ArrayType;
  }(BaseType);
  var IdentityType = /** @class */function (_super) {
    (0, tslib_1.__extends)(IdentityType, _super);
    function IdentityType(value) {
      var _this = _super.call(this) || this;
      _this.value = value;
      _this.kind = "IdentityType";
      return _this;
    }
    IdentityType.prototype.toString = function () {
      return String(this.value);
    };
    IdentityType.prototype.check = function (value, deep) {
      var result = value === this.value;
      if (!result && typeof deep === "function") {
        deep(this, value);
      }
      return result;
    };
    return IdentityType;
  }(BaseType);
  var ObjectType = /** @class */function (_super) {
    (0, tslib_1.__extends)(ObjectType, _super);
    function ObjectType(fields) {
      var _this = _super.call(this) || this;
      _this.fields = fields;
      _this.kind = "ObjectType";
      return _this;
    }
    ObjectType.prototype.toString = function () {
      return "{ " + this.fields.join(", ") + " }";
    };
    ObjectType.prototype.check = function (value, deep) {
      return objToStr.call(value) === objToStr.call({}) && this.fields.every(function (field) {
        return field.type.check(value[field.name], deep);
      });
    };
    return ObjectType;
  }(BaseType);
  var OrType = /** @class */function (_super) {
    (0, tslib_1.__extends)(OrType, _super);
    function OrType(types) {
      var _this = _super.call(this) || this;
      _this.types = types;
      _this.kind = "OrType";
      return _this;
    }
    OrType.prototype.toString = function () {
      return this.types.join(" | ");
    };
    OrType.prototype.check = function (value, deep) {
      return this.types.some(function (type) {
        return type.check(value, deep);
      });
    };
    return OrType;
  }(BaseType);
  var PredicateType = /** @class */function (_super) {
    (0, tslib_1.__extends)(PredicateType, _super);
    function PredicateType(name, predicate) {
      var _this = _super.call(this) || this;
      _this.name = name;
      _this.predicate = predicate;
      _this.kind = "PredicateType";
      return _this;
    }
    PredicateType.prototype.toString = function () {
      return this.name;
    };
    PredicateType.prototype.check = function (value, deep) {
      var result = this.predicate(value, deep);
      if (!result && typeof deep === "function") {
        deep(this, value);
      }
      return result;
    };
    return PredicateType;
  }(BaseType);
  var Def = /** @class */function () {
    function Def(type, typeName) {
      this.type = type;
      this.typeName = typeName;
      this.baseNames = [];
      this.ownFields = Object.create(null);
      // Includes own typeName. Populated during finalization.
      this.allSupertypes = Object.create(null);
      // Linear inheritance hierarchy. Populated during finalization.
      this.supertypeList = [];
      // Includes inherited fields.
      this.allFields = Object.create(null);
      // Non-hidden keys of allFields.
      this.fieldNames = [];
      // This property will be overridden as true by individual Def instances
      // when they are finalized.
      this.finalized = false;
      // False by default until .build(...) is called on an instance.
      this.buildable = false;
      this.buildParams = [];
    }
    Def.prototype.isSupertypeOf = function (that) {
      if (that instanceof Def) {
        if (this.finalized !== true || that.finalized !== true) {
          throw new Error("");
        }
        return hasOwn.call(that.allSupertypes, this.typeName);
      } else {
        throw new Error(that + " is not a Def");
      }
    };
    Def.prototype.checkAllFields = function (value, deep) {
      var allFields = this.allFields;
      if (this.finalized !== true) {
        throw new Error("" + this.typeName);
      }
      function checkFieldByName(name) {
        var field = allFields[name];
        var type = field.type;
        var child = field.getValue(value);
        return type.check(child, deep);
      }
      return value !== null && typeof value === "object" && Object.keys(allFields).every(checkFieldByName);
    };
    Def.prototype.bases = function () {
      var supertypeNames = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        supertypeNames[_i] = arguments[_i];
      }
      var bases = this.baseNames;
      if (this.finalized) {
        if (supertypeNames.length !== bases.length) {
          throw new Error("");
        }
        for (var i = 0; i < supertypeNames.length; i++) {
          if (supertypeNames[i] !== bases[i]) {
            throw new Error("");
          }
        }
        return this;
      }
      supertypeNames.forEach(function (baseName) {
        // This indexOf lookup may be O(n), but the typical number of base
        // names is very small, and indexOf is a native Array method.
        if (bases.indexOf(baseName) < 0) {
          bases.push(baseName);
        }
      });
      return this; // For chaining.
    };

    return Def;
  }();
  types.Def = Def;
  var Field = /** @class */function () {
    function Field(name, type, defaultFn, hidden) {
      this.name = name;
      this.type = type;
      this.defaultFn = defaultFn;
      this.hidden = !!hidden;
    }
    Field.prototype.toString = function () {
      return JSON.stringify(this.name) + ": " + this.type;
    };
    Field.prototype.getValue = function (obj) {
      var value = obj[this.name];
      if (typeof value !== "undefined") {
        return value;
      }
      if (typeof this.defaultFn === "function") {
        value = this.defaultFn.call(obj);
      }
      return value;
    };
    return Field;
  }();
  function shallowStringify(value) {
    if (Array.isArray(value)) {
      return "[" + value.map(shallowStringify).join(", ") + "]";
    }
    if (value && typeof value === "object") {
      return "{ " + Object.keys(value).map(function (key) {
        return key + ": " + value[key];
      }).join(", ") + " }";
    }
    return JSON.stringify(value);
  }
  function typesPlugin(_fork) {
    var Type = {
      or: function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          types[_i] = arguments[_i];
        }
        return new OrType(types.map(function (type) {
          return Type.from(type);
        }));
      },
      from: function (value, name) {
        if (value instanceof ArrayType || value instanceof IdentityType || value instanceof ObjectType || value instanceof OrType || value instanceof PredicateType) {
          return value;
        }
        // The Def type is used as a helper for constructing compound
        // interface types for AST nodes.
        if (value instanceof Def) {
          return value.type;
        }
        // Support [ElemType] syntax.
        if (isArray.check(value)) {
          if (value.length !== 1) {
            throw new Error("only one element type is permitted for typed arrays");
          }
          return new ArrayType(Type.from(value[0]));
        }
        // Support { someField: FieldType, ... } syntax.
        if (isObject.check(value)) {
          return new ObjectType(Object.keys(value).map(function (name) {
            return new Field(name, Type.from(value[name], name));
          }));
        }
        if (typeof value === "function") {
          var bicfIndex = builtInCtorFns.indexOf(value);
          if (bicfIndex >= 0) {
            return builtInCtorTypes[bicfIndex];
          }
          if (typeof name !== "string") {
            throw new Error("missing name");
          }
          return new PredicateType(name, value);
        }
        // As a last resort, toType returns a type that matches any value that
        // is === from. This is primarily useful for literal values like
        // toType(null), but it has the additional advantage of allowing
        // toType to be a total function.
        return new IdentityType(value);
      },
      // Define a type whose name is registered in a namespace (the defCache) so
      // that future definitions will return the same type given the same name.
      // In particular, this system allows for circular and forward definitions.
      // The Def object d returned from Type.def may be used to configure the
      // type d.type by calling methods such as d.bases, d.build, and d.field.
      def: function (typeName) {
        return hasOwn.call(defCache, typeName) ? defCache[typeName] : defCache[typeName] = new DefImpl(typeName);
      },
      hasDef: function (typeName) {
        return hasOwn.call(defCache, typeName);
      }
    };
    var builtInCtorFns = [];
    var builtInCtorTypes = [];
    function defBuiltInType(name, example) {
      var objStr = objToStr.call(example);
      var type = new PredicateType(name, function (value) {
        return objToStr.call(value) === objStr;
      });
      if (example && typeof example.constructor === "function") {
        builtInCtorFns.push(example.constructor);
        builtInCtorTypes.push(type);
      }
      return type;
    }
    // These types check the underlying [[Class]] attribute of the given
    // value, rather than using the problematic typeof operator. Note however
    // that no subtyping is considered; so, for instance, isObject.check
    // returns false for [], /./, new Date, and null.
    var isString = defBuiltInType("string", "truthy");
    var isFunction = defBuiltInType("function", function () {});
    var isArray = defBuiltInType("array", []);
    var isObject = defBuiltInType("object", {});
    var isRegExp = defBuiltInType("RegExp", /./);
    var isDate = defBuiltInType("Date", new Date());
    var isNumber = defBuiltInType("number", 3);
    var isBoolean = defBuiltInType("boolean", true);
    var isNull = defBuiltInType("null", null);
    var isUndefined = defBuiltInType("undefined", undefined);
    var isBigInt = typeof BigInt === "function" ? defBuiltInType("BigInt", BigInt(1234)) : new PredicateType("BigInt", function () {
      return false;
    });
    var builtInTypes = {
      string: isString,
      function: isFunction,
      array: isArray,
      object: isObject,
      RegExp: isRegExp,
      Date: isDate,
      number: isNumber,
      boolean: isBoolean,
      null: isNull,
      undefined: isUndefined,
      BigInt: isBigInt
    };
    // In order to return the same Def instance every time Type.def is called
    // with a particular name, those instances need to be stored in a cache.
    var defCache = Object.create(null);
    function defFromValue(value) {
      if (value && typeof value === "object") {
        var type = value.type;
        if (typeof type === "string" && hasOwn.call(defCache, type)) {
          var d = defCache[type];
          if (d.finalized) {
            return d;
          }
        }
      }
      return null;
    }
    var DefImpl = /** @class */function (_super) {
      (0, tslib_1.__extends)(DefImpl, _super);
      function DefImpl(typeName) {
        var _this = _super.call(this, new PredicateType(typeName, function (value, deep) {
          return _this.check(value, deep);
        }), typeName) || this;
        return _this;
      }
      DefImpl.prototype.check = function (value, deep) {
        if (this.finalized !== true) {
          throw new Error("prematurely checking unfinalized type " + this.typeName);
        }
        // A Def type can only match an object value.
        if (value === null || typeof value !== "object") {
          return false;
        }
        var vDef = defFromValue(value);
        if (!vDef) {
          // If we couldn't infer the Def associated with the given value,
          // and we expected it to be a SourceLocation or a Position, it was
          // probably just missing a "type" field (because Esprima does not
          // assign a type property to such nodes). Be optimistic and let
          // this.checkAllFields make the final decision.
          if (this.typeName === "SourceLocation" || this.typeName === "Position") {
            return this.checkAllFields(value, deep);
          }
          // Calling this.checkAllFields for any other type of node is both
          // bad for performance and way too forgiving.
          return false;
        }
        // If checking deeply and vDef === this, then we only need to call
        // checkAllFields once. Calling checkAllFields is too strict when deep
        // is false, because then we only care about this.isSupertypeOf(vDef).
        if (deep && vDef === this) {
          return this.checkAllFields(value, deep);
        }
        // In most cases we rely exclusively on isSupertypeOf to make O(1)
        // subtyping determinations. This suffices in most situations outside
        // of unit tests, since interface conformance is checked whenever new
        // instances are created using builder functions.
        if (!this.isSupertypeOf(vDef)) {
          return false;
        }
        // The exception is when deep is true; then, we recursively check all
        // fields.
        if (!deep) {
          return true;
        }
        // Use the more specific Def (vDef) to perform the deep check, but
        // shallow-check fields defined by the less specific Def (this).
        return vDef.checkAllFields(value, deep) && this.checkAllFields(value, false);
      };
      DefImpl.prototype.build = function () {
        var _this = this;
        var buildParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          buildParams[_i] = arguments[_i];
        }
        // Calling Def.prototype.build multiple times has the effect of merely
        // redefining this property.
        this.buildParams = buildParams;
        if (this.buildable) {
          // If this Def is already buildable, update self.buildParams and
          // continue using the old builder function.
          return this;
        }
        // Every buildable type will have its "type" field filled in
        // automatically. This includes types that are not subtypes of Node,
        // like SourceLocation, but that seems harmless (TODO?).
        this.field("type", String, function () {
          return _this.typeName;
        });
        // Override Dp.buildable for this Def instance.
        this.buildable = true;
        var addParam = function (built, param, arg, isArgAvailable) {
          if (hasOwn.call(built, param)) return;
          var all = _this.allFields;
          if (!hasOwn.call(all, param)) {
            throw new Error("" + param);
          }
          var field = all[param];
          var type = field.type;
          var value;
          if (isArgAvailable) {
            value = arg;
          } else if (field.defaultFn) {
            // Expose the partially-built object to the default
            // function as its `this` object.
            value = field.defaultFn.call(built);
          } else {
            var message = "no value or default function given for field " + JSON.stringify(param) + " of " + _this.typeName + "(" + _this.buildParams.map(function (name) {
              return all[name];
            }).join(", ") + ")";
            throw new Error(message);
          }
          if (!type.check(value)) {
            throw new Error(shallowStringify(value) + " does not match field " + field + " of type " + _this.typeName);
          }
          built[param] = value;
        };
        // Calling the builder function will construct an instance of the Def,
        // with positional arguments mapped to the fields original passed to .build.
        // If not enough arguments are provided, the default value for the remaining fields
        // will be used.
        var builder = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var argc = args.length;
          if (!_this.finalized) {
            throw new Error("attempting to instantiate unfinalized type " + _this.typeName);
          }
          var built = Object.create(nodePrototype);
          _this.buildParams.forEach(function (param, i) {
            if (i < argc) {
              addParam(built, param, args[i], true);
            } else {
              addParam(built, param, null, false);
            }
          });
          Object.keys(_this.allFields).forEach(function (param) {
            // Use the default value.
            addParam(built, param, null, false);
          });
          // Make sure that the "type" field was filled automatically.
          if (built.type !== _this.typeName) {
            throw new Error("");
          }
          return built;
        };
        // Calling .from on the builder function will construct an instance of the Def,
        // using field values from the passed object. For fields missing from the passed object,
        // their default value will be used.
        builder.from = function (obj) {
          if (!_this.finalized) {
            throw new Error("attempting to instantiate unfinalized type " + _this.typeName);
          }
          var built = Object.create(nodePrototype);
          Object.keys(_this.allFields).forEach(function (param) {
            if (hasOwn.call(obj, param)) {
              addParam(built, param, obj[param], true);
            } else {
              addParam(built, param, null, false);
            }
          });
          // Make sure that the "type" field was filled automatically.
          if (built.type !== _this.typeName) {
            throw new Error("");
          }
          return built;
        };
        Object.defineProperty(builders, getBuilderName(this.typeName), {
          enumerable: true,
          value: builder
        });
        return this;
      };
      // The reason fields are specified using .field(...) instead of an object
      // literal syntax is somewhat subtle: the object literal syntax would
      // support only one key and one value, but with .field(...) we can pass
      // any number of arguments to specify the field.
      DefImpl.prototype.field = function (name, type, defaultFn, hidden) {
        if (this.finalized) {
          console.error("Ignoring attempt to redefine field " + JSON.stringify(name) + " of finalized type " + JSON.stringify(this.typeName));
          return this;
        }
        this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);
        return this; // For chaining.
      };

      DefImpl.prototype.finalize = function () {
        var _this = this;
        // It's not an error to finalize a type more than once, but only the
        // first call to .finalize does anything.
        if (!this.finalized) {
          var allFields = this.allFields;
          var allSupertypes = this.allSupertypes;
          this.baseNames.forEach(function (name) {
            var def = defCache[name];
            if (def instanceof Def) {
              def.finalize();
              extend(allFields, def.allFields);
              extend(allSupertypes, def.allSupertypes);
            } else {
              var message = "unknown supertype name " + JSON.stringify(name) + " for subtype " + JSON.stringify(_this.typeName);
              throw new Error(message);
            }
          });
          // TODO Warn if fields are overridden with incompatible types.
          extend(allFields, this.ownFields);
          allSupertypes[this.typeName] = this;
          this.fieldNames.length = 0;
          for (var fieldName in allFields) {
            if (hasOwn.call(allFields, fieldName) && !allFields[fieldName].hidden) {
              this.fieldNames.push(fieldName);
            }
          }
          // Types are exported only once they have been finalized.
          Object.defineProperty(namedTypes, this.typeName, {
            enumerable: true,
            value: this.type
          });
          this.finalized = true;
          // A linearization of the inheritance hierarchy.
          populateSupertypeList(this.typeName, this.supertypeList);
          if (this.buildable && this.supertypeList.lastIndexOf("Expression") >= 0) {
            wrapExpressionBuilderWithStatement(this.typeName);
          }
        }
      };
      return DefImpl;
    }(Def);
    // Note that the list returned by this function is a copy of the internal
    // supertypeList, *without* the typeName itself as the first element.
    function getSupertypeNames(typeName) {
      if (!hasOwn.call(defCache, typeName)) {
        throw new Error("");
      }
      var d = defCache[typeName];
      if (d.finalized !== true) {
        throw new Error("");
      }
      return d.supertypeList.slice(1);
    }
    // Returns an object mapping from every known type in the defCache to the
    // most specific supertype whose name is an own property of the candidates
    // object.
    function computeSupertypeLookupTable(candidates) {
      var table = {};
      var typeNames = Object.keys(defCache);
      var typeNameCount = typeNames.length;
      for (var i = 0; i < typeNameCount; ++i) {
        var typeName = typeNames[i];
        var d = defCache[typeName];
        if (d.finalized !== true) {
          throw new Error("" + typeName);
        }
        for (var j = 0; j < d.supertypeList.length; ++j) {
          var superTypeName = d.supertypeList[j];
          if (hasOwn.call(candidates, superTypeName)) {
            table[typeName] = superTypeName;
            break;
          }
        }
      }
      return table;
    }
    var builders = Object.create(null);
    // This object is used as prototype for any node created by a builder.
    var nodePrototype = {};
    // Call this function to define a new method to be shared by all AST
    // nodes. The replaced method (if any) is returned for easy wrapping.
    function defineMethod(name, func) {
      var old = nodePrototype[name];
      // Pass undefined as func to delete nodePrototype[name].
      if (isUndefined.check(func)) {
        delete nodePrototype[name];
      } else {
        isFunction.assert(func);
        Object.defineProperty(nodePrototype, name, {
          enumerable: true,
          configurable: true,
          value: func
        });
      }
      return old;
    }
    function getBuilderName(typeName) {
      return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {
        var len = upperCasePrefix.length;
        switch (len) {
          case 0:
            return "";
          // If there's only one initial capital letter, just lower-case it.
          case 1:
            return upperCasePrefix.toLowerCase();
          default:
            // If there's more than one initial capital letter, lower-case
            // all but the last one, so that XMLDefaultDeclaration (for
            // example) becomes xmlDefaultDeclaration.
            return upperCasePrefix.slice(0, len - 1).toLowerCase() + upperCasePrefix.charAt(len - 1);
        }
      });
    }
    function getStatementBuilderName(typeName) {
      typeName = getBuilderName(typeName);
      return typeName.replace(/(Expression)?$/, "Statement");
    }
    var namedTypes = {};
    // Like Object.keys, but aware of what fields each AST type should have.
    function getFieldNames(object) {
      var d = defFromValue(object);
      if (d) {
        return d.fieldNames.slice(0);
      }
      if ("type" in object) {
        throw new Error("did not recognize object of type " + JSON.stringify(object.type));
      }
      return Object.keys(object);
    }
    // Get the value of an object property, taking object.type and default
    // functions into account.
    function getFieldValue(object, fieldName) {
      var d = defFromValue(object);
      if (d) {
        var field = d.allFields[fieldName];
        if (field) {
          return field.getValue(object);
        }
      }
      return object && object[fieldName];
    }
    // Iterate over all defined fields of an object, including those missing
    // or undefined, passing each field name and effective value (as returned
    // by getFieldValue) to the callback. If the object has no corresponding
    // Def, the callback will never be called.
    function eachField(object, callback, context) {
      getFieldNames(object).forEach(function (name) {
        callback.call(this, name, getFieldValue(object, name));
      }, context);
    }
    // Similar to eachField, except that iteration stops as soon as the
    // callback returns a truthy value. Like Array.prototype.some, the final
    // result is either true or false to indicates whether the callback
    // returned true for any element or not.
    function someField(object, callback, context) {
      return getFieldNames(object).some(function (name) {
        return callback.call(this, name, getFieldValue(object, name));
      }, context);
    }
    // Adds an additional builder for Expression subtypes
    // that wraps the built Expression in an ExpressionStatements.
    function wrapExpressionBuilderWithStatement(typeName) {
      var wrapperName = getStatementBuilderName(typeName);
      // skip if the builder already exists
      if (builders[wrapperName]) return;
      // the builder function to wrap with builders.ExpressionStatement
      var wrapped = builders[getBuilderName(typeName)];
      // skip if there is nothing to wrap
      if (!wrapped) return;
      var builder = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return builders.expressionStatement(wrapped.apply(builders, args));
      };
      builder.from = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return builders.expressionStatement(wrapped.from.apply(builders, args));
      };
      builders[wrapperName] = builder;
    }
    function populateSupertypeList(typeName, list) {
      list.length = 0;
      list.push(typeName);
      var lastSeen = Object.create(null);
      for (var pos = 0; pos < list.length; ++pos) {
        typeName = list[pos];
        var d = defCache[typeName];
        if (d.finalized !== true) {
          throw new Error("");
        }
        // If we saw typeName earlier in the breadth-first traversal,
        // delete the last-seen occurrence.
        if (hasOwn.call(lastSeen, typeName)) {
          delete list[lastSeen[typeName]];
        }
        // Record the new index of the last-seen occurrence of typeName.
        lastSeen[typeName] = pos;
        // Enqueue the base names of this type.
        list.push.apply(list, d.baseNames);
      }
      // Compaction loop to remove array holes.
      for (var to = 0, from = to, len = list.length; from < len; ++from) {
        if (hasOwn.call(list, from)) {
          list[to++] = list[from];
        }
      }
      list.length = to;
    }
    function extend(into, from) {
      Object.keys(from).forEach(function (name) {
        into[name] = from[name];
      });
      return into;
    }
    function finalize() {
      Object.keys(defCache).forEach(function (name) {
        defCache[name].finalize();
      });
    }
    return {
      Type: Type,
      builtInTypes: builtInTypes,
      getSupertypeNames: getSupertypeNames,
      computeSupertypeLookupTable: computeSupertypeLookupTable,
      builders: builders,
      defineMethod: defineMethod,
      getBuilderName: getBuilderName,
      getStatementBuilderName: getStatementBuilderName,
      namedTypes: namedTypes,
      getFieldNames: getFieldNames,
      getFieldValue: getFieldValue,
      eachField: eachField,
      someField: someField,
      finalize: finalize
    };
  }
  types.default = typesPlugin;
  return types;
}

var pathVisitor = {exports: {}};

var nodePath = {exports: {}};

var path = {exports: {}};

var hasRequiredPath;
function requirePath() {
  if (hasRequiredPath) return path.exports;
  hasRequiredPath = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    function pathPlugin(fork) {
      var types = fork.use(types_1.default);
      var isArray = types.builtInTypes.array;
      var isNumber = types.builtInTypes.number;
      var Path = function Path(value, parentPath, name) {
        if (!(this instanceof Path)) {
          throw new Error("Path constructor cannot be invoked without 'new'");
        }
        if (parentPath) {
          if (!(parentPath instanceof Path)) {
            throw new Error("");
          }
        } else {
          parentPath = null;
          name = null;
        }
        // The value encapsulated by this Path, generally equal to
        // parentPath.value[name] if we have a parentPath.
        this.value = value;
        // The immediate parent Path of this Path.
        this.parentPath = parentPath;
        // The name of the property of parentPath.value through which this
        // Path's value was reached.
        this.name = name;
        // Calling path.get("child") multiple times always returns the same
        // child Path object, for both performance and consistency reasons.
        this.__childCache = null;
      };
      var Pp = Path.prototype;
      function getChildCache(path) {
        // Lazily create the child cache. This also cheapens cache
        // invalidation, since you can just reset path.__childCache to null.
        return path.__childCache || (path.__childCache = Object.create(null));
      }
      function getChildPath(path, name) {
        var cache = getChildCache(path);
        var actualChildValue = path.getValueProperty(name);
        var childPath = cache[name];
        if (!hasOwn.call(cache, name) ||
        // Ensure consistency between cache and reality.
        childPath.value !== actualChildValue) {
          childPath = cache[name] = new path.constructor(actualChildValue, path, name);
        }
        return childPath;
      }
      // This method is designed to be overridden by subclasses that need to
      // handle missing properties, etc.
      Pp.getValueProperty = function getValueProperty(name) {
        return this.value[name];
      };
      Pp.get = function get() {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          names[_i] = arguments[_i];
        }
        var path = this;
        var count = names.length;
        for (var i = 0; i < count; ++i) {
          path = getChildPath(path, names[i]);
        }
        return path;
      };
      Pp.each = function each(callback, context) {
        var childPaths = [];
        var len = this.value.length;
        var i = 0;
        // Collect all the original child paths before invoking the callback.
        for (var i = 0; i < len; ++i) {
          if (hasOwn.call(this.value, i)) {
            childPaths[i] = this.get(i);
          }
        }
        // Invoke the callback on just the original child paths, regardless of
        // any modifications made to the array by the callback. I chose these
        // semantics over cleverly invoking the callback on new elements because
        // this way is much easier to reason about.
        context = context || this;
        for (i = 0; i < len; ++i) {
          if (hasOwn.call(childPaths, i)) {
            callback.call(context, childPaths[i]);
          }
        }
      };
      Pp.map = function map(callback, context) {
        var result = [];
        this.each(function (childPath) {
          result.push(callback.call(this, childPath));
        }, context);
        return result;
      };
      Pp.filter = function filter(callback, context) {
        var result = [];
        this.each(function (childPath) {
          if (callback.call(this, childPath)) {
            result.push(childPath);
          }
        }, context);
        return result;
      };
      function emptyMoves() {}
      function getMoves(path, offset, start, end) {
        isArray.assert(path.value);
        if (offset === 0) {
          return emptyMoves;
        }
        var length = path.value.length;
        if (length < 1) {
          return emptyMoves;
        }
        var argc = arguments.length;
        if (argc === 2) {
          start = 0;
          end = length;
        } else if (argc === 3) {
          start = Math.max(start, 0);
          end = length;
        } else {
          start = Math.max(start, 0);
          end = Math.min(end, length);
        }
        isNumber.assert(start);
        isNumber.assert(end);
        var moves = Object.create(null);
        var cache = getChildCache(path);
        for (var i = start; i < end; ++i) {
          if (hasOwn.call(path.value, i)) {
            var childPath = path.get(i);
            if (childPath.name !== i) {
              throw new Error("");
            }
            var newIndex = i + offset;
            childPath.name = newIndex;
            moves[newIndex] = childPath;
            delete cache[i];
          }
        }
        delete cache.length;
        return function () {
          for (var newIndex in moves) {
            var childPath = moves[newIndex];
            if (childPath.name !== +newIndex) {
              throw new Error("");
            }
            cache[newIndex] = childPath;
            path.value[newIndex] = childPath.value;
          }
        };
      }
      Pp.shift = function shift() {
        var move = getMoves(this, -1);
        var result = this.value.shift();
        move();
        return result;
      };
      Pp.unshift = function unshift() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var move = getMoves(this, args.length);
        var result = this.value.unshift.apply(this.value, args);
        move();
        return result;
      };
      Pp.push = function push() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        isArray.assert(this.value);
        delete getChildCache(this).length;
        return this.value.push.apply(this.value, args);
      };
      Pp.pop = function pop() {
        isArray.assert(this.value);
        var cache = getChildCache(this);
        delete cache[this.value.length - 1];
        delete cache.length;
        return this.value.pop();
      };
      Pp.insertAt = function insertAt(index) {
        var argc = arguments.length;
        var move = getMoves(this, argc - 1, index);
        if (move === emptyMoves && argc <= 1) {
          return this;
        }
        index = Math.max(index, 0);
        for (var i = 1; i < argc; ++i) {
          this.value[index + i - 1] = arguments[i];
        }
        move();
        return this;
      };
      Pp.insertBefore = function insertBefore() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var pp = this.parentPath;
        var argc = args.length;
        var insertAtArgs = [this.name];
        for (var i = 0; i < argc; ++i) {
          insertAtArgs.push(args[i]);
        }
        return pp.insertAt.apply(pp, insertAtArgs);
      };
      Pp.insertAfter = function insertAfter() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var pp = this.parentPath;
        var argc = args.length;
        var insertAtArgs = [this.name + 1];
        for (var i = 0; i < argc; ++i) {
          insertAtArgs.push(args[i]);
        }
        return pp.insertAt.apply(pp, insertAtArgs);
      };
      function repairRelationshipWithParent(path) {
        if (!(path instanceof Path)) {
          throw new Error("");
        }
        var pp = path.parentPath;
        if (!pp) {
          // Orphan paths have no relationship to repair.
          return path;
        }
        var parentValue = pp.value;
        var parentCache = getChildCache(pp);
        // Make sure parentCache[path.name] is populated.
        if (parentValue[path.name] === path.value) {
          parentCache[path.name] = path;
        } else if (isArray.check(parentValue)) {
          // Something caused path.name to become out of date, so attempt to
          // recover by searching for path.value in parentValue.
          var i = parentValue.indexOf(path.value);
          if (i >= 0) {
            parentCache[path.name = i] = path;
          }
        } else {
          // If path.value disagrees with parentValue[path.name], and
          // path.name is not an array index, let path.value become the new
          // parentValue[path.name] and update parentCache accordingly.
          parentValue[path.name] = path.value;
          parentCache[path.name] = path;
        }
        if (parentValue[path.name] !== path.value) {
          throw new Error("");
        }
        if (path.parentPath.get(path.name) !== path) {
          throw new Error("");
        }
        return path;
      }
      Pp.replace = function replace(replacement) {
        var results = [];
        var parentValue = this.parentPath.value;
        var parentCache = getChildCache(this.parentPath);
        var count = arguments.length;
        repairRelationshipWithParent(this);
        if (isArray.check(parentValue)) {
          var originalLength = parentValue.length;
          var move = getMoves(this.parentPath, count - 1, this.name + 1);
          var spliceArgs = [this.name, 1];
          for (var i = 0; i < count; ++i) {
            spliceArgs.push(arguments[i]);
          }
          var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
          if (splicedOut[0] !== this.value) {
            throw new Error("");
          }
          if (parentValue.length !== originalLength - 1 + count) {
            throw new Error("");
          }
          move();
          if (count === 0) {
            delete this.value;
            delete parentCache[this.name];
            this.__childCache = null;
          } else {
            if (parentValue[this.name] !== replacement) {
              throw new Error("");
            }
            if (this.value !== replacement) {
              this.value = replacement;
              this.__childCache = null;
            }
            for (i = 0; i < count; ++i) {
              results.push(this.parentPath.get(this.name + i));
            }
            if (results[0] !== this) {
              throw new Error("");
            }
          }
        } else if (count === 1) {
          if (this.value !== replacement) {
            this.__childCache = null;
          }
          this.value = parentValue[this.name] = replacement;
          results.push(this);
        } else if (count === 0) {
          delete parentValue[this.name];
          delete this.value;
          this.__childCache = null;
          // Leave this path cached as parentCache[this.name], even though
          // it no longer has a value defined.
        } else {
          throw new Error("Could not replace path");
        }
        return results;
      };
      return Path;
    }
    exports.default = pathPlugin;
    module.exports = exports["default"];
  })(path, path.exports);
  return path.exports;
}

var scope = {exports: {}};

var hasRequiredScope;
function requireScope() {
  if (hasRequiredScope) return scope.exports;
  hasRequiredScope = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var hasOwn = Object.prototype.hasOwnProperty;
    function scopePlugin(fork) {
      var types = fork.use(types_1.default);
      var Type = types.Type;
      var namedTypes = types.namedTypes;
      var Node = namedTypes.Node;
      var Expression = namedTypes.Expression;
      var isArray = types.builtInTypes.array;
      var b = types.builders;
      var Scope = function Scope(path, parentScope) {
        if (!(this instanceof Scope)) {
          throw new Error("Scope constructor cannot be invoked without 'new'");
        }
        if (!TypeParameterScopeType.check(path.value)) {
          ScopeType.assert(path.value);
        }
        var depth;
        if (parentScope) {
          if (!(parentScope instanceof Scope)) {
            throw new Error("");
          }
          depth = parentScope.depth + 1;
        } else {
          parentScope = null;
          depth = 0;
        }
        Object.defineProperties(this, {
          path: {
            value: path
          },
          node: {
            value: path.value
          },
          isGlobal: {
            value: !parentScope,
            enumerable: true
          },
          depth: {
            value: depth
          },
          parent: {
            value: parentScope
          },
          bindings: {
            value: {}
          },
          types: {
            value: {}
          }
        });
      };
      var ScopeType = Type.or(
      // Program nodes introduce global scopes.
      namedTypes.Program,
      // Function is the supertype of FunctionExpression,
      // FunctionDeclaration, ArrowExpression, etc.
      namedTypes.Function,
      // In case you didn't know, the caught parameter shadows any variable
      // of the same name in an outer scope.
      namedTypes.CatchClause);
      // These types introduce scopes that are restricted to type parameters in
      // Flow (this doesn't apply to ECMAScript).
      var TypeParameterScopeType = Type.or(namedTypes.Function, namedTypes.ClassDeclaration, namedTypes.ClassExpression, namedTypes.InterfaceDeclaration, namedTypes.TSInterfaceDeclaration, namedTypes.TypeAlias, namedTypes.TSTypeAliasDeclaration);
      var FlowOrTSTypeParameterType = Type.or(namedTypes.TypeParameter, namedTypes.TSTypeParameter);
      Scope.isEstablishedBy = function (node) {
        return ScopeType.check(node) || TypeParameterScopeType.check(node);
      };
      var Sp = Scope.prototype;
      // Will be overridden after an instance lazily calls scanScope.
      Sp.didScan = false;
      Sp.declares = function (name) {
        this.scan();
        return hasOwn.call(this.bindings, name);
      };
      Sp.declaresType = function (name) {
        this.scan();
        return hasOwn.call(this.types, name);
      };
      Sp.declareTemporary = function (prefix) {
        if (prefix) {
          if (!/^[a-z$_]/i.test(prefix)) {
            throw new Error("");
          }
        } else {
          prefix = "t$";
        }
        // Include this.depth in the name to make sure the name does not
        // collide with any variables in nested/enclosing scopes.
        prefix += this.depth.toString(36) + "$";
        this.scan();
        var index = 0;
        while (this.declares(prefix + index)) {
          ++index;
        }
        var name = prefix + index;
        return this.bindings[name] = types.builders.identifier(name);
      };
      Sp.injectTemporary = function (identifier, init) {
        identifier || (identifier = this.declareTemporary());
        var bodyPath = this.path.get("body");
        if (namedTypes.BlockStatement.check(bodyPath.value)) {
          bodyPath = bodyPath.get("body");
        }
        bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
        return identifier;
      };
      Sp.scan = function (force) {
        if (force || !this.didScan) {
          for (var name in this.bindings) {
            // Empty out this.bindings, just in cases.
            delete this.bindings[name];
          }
          for (var name in this.types) {
            // Empty out this.types, just in cases.
            delete this.types[name];
          }
          scanScope(this.path, this.bindings, this.types);
          this.didScan = true;
        }
      };
      Sp.getBindings = function () {
        this.scan();
        return this.bindings;
      };
      Sp.getTypes = function () {
        this.scan();
        return this.types;
      };
      function scanScope(path, bindings, scopeTypes) {
        var node = path.value;
        if (TypeParameterScopeType.check(node)) {
          var params = path.get('typeParameters', 'params');
          if (isArray.check(params.value)) {
            params.each(function (childPath) {
              addTypeParameter(childPath, scopeTypes);
            });
          }
        }
        if (ScopeType.check(node)) {
          if (namedTypes.CatchClause.check(node)) {
            // A catch clause establishes a new scope but the only variable
            // bound in that scope is the catch parameter. Any other
            // declarations create bindings in the outer scope.
            addPattern(path.get("param"), bindings);
          } else {
            recursiveScanScope(path, bindings, scopeTypes);
          }
        }
      }
      function recursiveScanScope(path, bindings, scopeTypes) {
        var node = path.value;
        if (path.parent && namedTypes.FunctionExpression.check(path.parent.node) && path.parent.node.id) {
          addPattern(path.parent.get("id"), bindings);
        }
        if (!node) ; else if (isArray.check(node)) {
          path.each(function (childPath) {
            recursiveScanChild(childPath, bindings, scopeTypes);
          });
        } else if (namedTypes.Function.check(node)) {
          path.get("params").each(function (paramPath) {
            addPattern(paramPath, bindings);
          });
          recursiveScanChild(path.get("body"), bindings, scopeTypes);
          recursiveScanScope(path.get("typeParameters"), bindings, scopeTypes);
        } else if (namedTypes.TypeAlias && namedTypes.TypeAlias.check(node) || namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node) || namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node) || namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node)) {
          addTypePattern(path.get("id"), scopeTypes);
        } else if (namedTypes.VariableDeclarator.check(node)) {
          addPattern(path.get("id"), bindings);
          recursiveScanChild(path.get("init"), bindings, scopeTypes);
        } else if (node.type === "ImportSpecifier" || node.type === "ImportNamespaceSpecifier" || node.type === "ImportDefaultSpecifier") {
          addPattern(
          // Esprima used to use the .name field to refer to the local
          // binding identifier for ImportSpecifier nodes, but .id for
          // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
          // ESTree/Acorn/ESpree use .local for all three node types.
          path.get(node.local ? "local" : node.name ? "name" : "id"), bindings);
        } else if (Node.check(node) && !Expression.check(node)) {
          types.eachField(node, function (name, child) {
            var childPath = path.get(name);
            if (!pathHasValue(childPath, child)) {
              throw new Error("");
            }
            recursiveScanChild(childPath, bindings, scopeTypes);
          });
        }
      }
      function pathHasValue(path, value) {
        if (path.value === value) {
          return true;
        }
        // Empty arrays are probably produced by defaults.emptyArray, in which
        // case is makes sense to regard them as equivalent, if not ===.
        if (Array.isArray(path.value) && path.value.length === 0 && Array.isArray(value) && value.length === 0) {
          return true;
        }
        return false;
      }
      function recursiveScanChild(path, bindings, scopeTypes) {
        var node = path.value;
        if (!node || Expression.check(node)) ; else if (namedTypes.FunctionDeclaration.check(node) && node.id !== null) {
          addPattern(path.get("id"), bindings);
        } else if (namedTypes.ClassDeclaration && namedTypes.ClassDeclaration.check(node) && node.id !== null) {
          addPattern(path.get("id"), bindings);
          recursiveScanScope(path.get("typeParameters"), bindings, scopeTypes);
        } else if (namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node) || namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node)) {
          addTypePattern(path.get("id"), scopeTypes);
        } else if (ScopeType.check(node)) {
          if (namedTypes.CatchClause.check(node) &&
          // TODO Broaden this to accept any pattern.
          namedTypes.Identifier.check(node.param)) {
            var catchParamName = node.param.name;
            var hadBinding = hasOwn.call(bindings, catchParamName);
            // Any declarations that occur inside the catch body that do
            // not have the same name as the catch parameter should count
            // as bindings in the outer scope.
            recursiveScanScope(path.get("body"), bindings, scopeTypes);
            // If a new binding matching the catch parameter name was
            // created while scanning the catch body, ignore it because it
            // actually refers to the catch parameter and not the outer
            // scope that we're currently scanning.
            if (!hadBinding) {
              delete bindings[catchParamName];
            }
          }
        } else {
          recursiveScanScope(path, bindings, scopeTypes);
        }
      }
      function addPattern(patternPath, bindings) {
        var pattern = patternPath.value;
        namedTypes.Pattern.assert(pattern);
        if (namedTypes.Identifier.check(pattern)) {
          if (hasOwn.call(bindings, pattern.name)) {
            bindings[pattern.name].push(patternPath);
          } else {
            bindings[pattern.name] = [patternPath];
          }
        } else if (namedTypes.AssignmentPattern && namedTypes.AssignmentPattern.check(pattern)) {
          addPattern(patternPath.get('left'), bindings);
        } else if (namedTypes.ObjectPattern && namedTypes.ObjectPattern.check(pattern)) {
          patternPath.get('properties').each(function (propertyPath) {
            var property = propertyPath.value;
            if (namedTypes.Pattern.check(property)) {
              addPattern(propertyPath, bindings);
            } else if (namedTypes.Property.check(property) || namedTypes.ObjectProperty && namedTypes.ObjectProperty.check(property)) {
              addPattern(propertyPath.get('value'), bindings);
            } else if (namedTypes.SpreadProperty && namedTypes.SpreadProperty.check(property)) {
              addPattern(propertyPath.get('argument'), bindings);
            }
          });
        } else if (namedTypes.ArrayPattern && namedTypes.ArrayPattern.check(pattern)) {
          patternPath.get('elements').each(function (elementPath) {
            var element = elementPath.value;
            if (namedTypes.Pattern.check(element)) {
              addPattern(elementPath, bindings);
            } else if (namedTypes.SpreadElement && namedTypes.SpreadElement.check(element)) {
              addPattern(elementPath.get("argument"), bindings);
            }
          });
        } else if (namedTypes.PropertyPattern && namedTypes.PropertyPattern.check(pattern)) {
          addPattern(patternPath.get('pattern'), bindings);
        } else if (namedTypes.SpreadElementPattern && namedTypes.SpreadElementPattern.check(pattern) || namedTypes.RestElement && namedTypes.RestElement.check(pattern) || namedTypes.SpreadPropertyPattern && namedTypes.SpreadPropertyPattern.check(pattern)) {
          addPattern(patternPath.get('argument'), bindings);
        }
      }
      function addTypePattern(patternPath, types) {
        var pattern = patternPath.value;
        namedTypes.Pattern.assert(pattern);
        if (namedTypes.Identifier.check(pattern)) {
          if (hasOwn.call(types, pattern.name)) {
            types[pattern.name].push(patternPath);
          } else {
            types[pattern.name] = [patternPath];
          }
        }
      }
      function addTypeParameter(parameterPath, types) {
        var parameter = parameterPath.value;
        FlowOrTSTypeParameterType.assert(parameter);
        if (hasOwn.call(types, parameter.name)) {
          types[parameter.name].push(parameterPath);
        } else {
          types[parameter.name] = [parameterPath];
        }
      }
      Sp.lookup = function (name) {
        for (var scope = this; scope; scope = scope.parent) if (scope.declares(name)) break;
        return scope;
      };
      Sp.lookupType = function (name) {
        for (var scope = this; scope; scope = scope.parent) if (scope.declaresType(name)) break;
        return scope;
      };
      Sp.getGlobalScope = function () {
        var scope = this;
        while (!scope.isGlobal) scope = scope.parent;
        return scope;
      };
      return Scope;
    }
    exports.default = scopePlugin;
    module.exports = exports["default"];
  })(scope, scope.exports);
  return scope.exports;
}

var hasRequiredNodePath;
function requireNodePath() {
  if (hasRequiredNodePath) return nodePath.exports;
  hasRequiredNodePath = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var path_1 = (0, tslib_1.__importDefault)(requirePath());
    var scope_1 = (0, tslib_1.__importDefault)(requireScope());
    function nodePathPlugin(fork) {
      var types = fork.use(types_1.default);
      var n = types.namedTypes;
      var b = types.builders;
      var isNumber = types.builtInTypes.number;
      var isArray = types.builtInTypes.array;
      var Path = fork.use(path_1.default);
      var Scope = fork.use(scope_1.default);
      var NodePath = function NodePath(value, parentPath, name) {
        if (!(this instanceof NodePath)) {
          throw new Error("NodePath constructor cannot be invoked without 'new'");
        }
        Path.call(this, value, parentPath, name);
      };
      var NPp = NodePath.prototype = Object.create(Path.prototype, {
        constructor: {
          value: NodePath,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperties(NPp, {
        node: {
          get: function () {
            Object.defineProperty(this, "node", {
              configurable: true,
              value: this._computeNode()
            });
            return this.node;
          }
        },
        parent: {
          get: function () {
            Object.defineProperty(this, "parent", {
              configurable: true,
              value: this._computeParent()
            });
            return this.parent;
          }
        },
        scope: {
          get: function () {
            Object.defineProperty(this, "scope", {
              configurable: true,
              value: this._computeScope()
            });
            return this.scope;
          }
        }
      });
      NPp.replace = function () {
        delete this.node;
        delete this.parent;
        delete this.scope;
        return Path.prototype.replace.apply(this, arguments);
      };
      NPp.prune = function () {
        var remainingNodePath = this.parent;
        this.replace();
        return cleanUpNodesAfterPrune(remainingNodePath);
      };
      // The value of the first ancestor Path whose value is a Node.
      NPp._computeNode = function () {
        var value = this.value;
        if (n.Node.check(value)) {
          return value;
        }
        var pp = this.parentPath;
        return pp && pp.node || null;
      };
      // The first ancestor Path whose value is a Node distinct from this.node.
      NPp._computeParent = function () {
        var value = this.value;
        var pp = this.parentPath;
        if (!n.Node.check(value)) {
          while (pp && !n.Node.check(pp.value)) {
            pp = pp.parentPath;
          }
          if (pp) {
            pp = pp.parentPath;
          }
        }
        while (pp && !n.Node.check(pp.value)) {
          pp = pp.parentPath;
        }
        return pp || null;
      };
      // The closest enclosing scope that governs this node.
      NPp._computeScope = function () {
        var value = this.value;
        var pp = this.parentPath;
        var scope = pp && pp.scope;
        if (n.Node.check(value) && Scope.isEstablishedBy(value)) {
          scope = new Scope(this, scope);
        }
        return scope || null;
      };
      NPp.getValueProperty = function (name) {
        return types.getFieldValue(this.value, name);
      };
      /**
       * Determine whether this.node needs to be wrapped in parentheses in order
       * for a parser to reproduce the same local AST structure.
       *
       * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
       * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
       * parse differently.
       *
       * If assumeExpressionContext === true, we don't worry about edge cases
       * like an anonymous FunctionExpression appearing lexically first in its
       * enclosing statement and thus needing parentheses to avoid being parsed
       * as a FunctionDeclaration with a missing name.
       */
      NPp.needsParens = function (assumeExpressionContext) {
        var pp = this.parentPath;
        if (!pp) {
          return false;
        }
        var node = this.value;
        // Only expressions need parentheses.
        if (!n.Expression.check(node)) {
          return false;
        }
        // Identifiers never need parentheses.
        if (node.type === "Identifier") {
          return false;
        }
        while (!n.Node.check(pp.value)) {
          pp = pp.parentPath;
          if (!pp) {
            return false;
          }
        }
        var parent = pp.value;
        switch (node.type) {
          case "UnaryExpression":
          case "SpreadElement":
          case "SpreadProperty":
            return parent.type === "MemberExpression" && this.name === "object" && parent.object === node;
          case "BinaryExpression":
          case "LogicalExpression":
            switch (parent.type) {
              case "CallExpression":
                return this.name === "callee" && parent.callee === node;
              case "UnaryExpression":
              case "SpreadElement":
              case "SpreadProperty":
                return true;
              case "MemberExpression":
                return this.name === "object" && parent.object === node;
              case "BinaryExpression":
              case "LogicalExpression":
                {
                  var n_1 = node;
                  var po = parent.operator;
                  var pp_1 = PRECEDENCE[po];
                  var no = n_1.operator;
                  var np = PRECEDENCE[no];
                  if (pp_1 > np) {
                    return true;
                  }
                  if (pp_1 === np && this.name === "right") {
                    if (parent.right !== n_1) {
                      throw new Error("Nodes must be equal");
                    }
                    return true;
                  }
                }
              default:
                return false;
            }
          case "SequenceExpression":
            switch (parent.type) {
              case "ForStatement":
                // Although parentheses wouldn't hurt around sequence
                // expressions in the head of for loops, traditional style
                // dictates that e.g. i++, j++ should not be wrapped with
                // parentheses.
                return false;
              case "ExpressionStatement":
                return this.name !== "expression";
              default:
                // Otherwise err on the side of overparenthesization, adding
                // explicit exceptions above if this proves overzealous.
                return true;
            }
          case "YieldExpression":
            switch (parent.type) {
              case "BinaryExpression":
              case "LogicalExpression":
              case "UnaryExpression":
              case "SpreadElement":
              case "SpreadProperty":
              case "CallExpression":
              case "MemberExpression":
              case "NewExpression":
              case "ConditionalExpression":
              case "YieldExpression":
                return true;
              default:
                return false;
            }
          case "Literal":
            return parent.type === "MemberExpression" && isNumber.check(node.value) && this.name === "object" && parent.object === node;
          case "AssignmentExpression":
          case "ConditionalExpression":
            switch (parent.type) {
              case "UnaryExpression":
              case "SpreadElement":
              case "SpreadProperty":
              case "BinaryExpression":
              case "LogicalExpression":
                return true;
              case "CallExpression":
                return this.name === "callee" && parent.callee === node;
              case "ConditionalExpression":
                return this.name === "test" && parent.test === node;
              case "MemberExpression":
                return this.name === "object" && parent.object === node;
              default:
                return false;
            }
          default:
            if (parent.type === "NewExpression" && this.name === "callee" && parent.callee === node) {
              return containsCallExpression(node);
            }
        }
        if (assumeExpressionContext !== true && !this.canBeFirstInStatement() && this.firstInStatement()) return true;
        return false;
      };
      function isBinary(node) {
        return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);
      }
      var PRECEDENCE = {};
      [["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"]].forEach(function (tier, i) {
        tier.forEach(function (op) {
          PRECEDENCE[op] = i;
        });
      });
      function containsCallExpression(node) {
        if (n.CallExpression.check(node)) {
          return true;
        }
        if (isArray.check(node)) {
          return node.some(containsCallExpression);
        }
        if (n.Node.check(node)) {
          return types.someField(node, function (_name, child) {
            return containsCallExpression(child);
          });
        }
        return false;
      }
      NPp.canBeFirstInStatement = function () {
        var node = this.node;
        return !n.FunctionExpression.check(node) && !n.ObjectExpression.check(node);
      };
      NPp.firstInStatement = function () {
        return firstInStatement(this);
      };
      function firstInStatement(path) {
        for (var node, parent; path.parent; path = path.parent) {
          node = path.node;
          parent = path.parent.node;
          if (n.BlockStatement.check(parent) && path.parent.name === "body" && path.name === 0) {
            if (parent.body[0] !== node) {
              throw new Error("Nodes must be equal");
            }
            return true;
          }
          if (n.ExpressionStatement.check(parent) && path.name === "expression") {
            if (parent.expression !== node) {
              throw new Error("Nodes must be equal");
            }
            return true;
          }
          if (n.SequenceExpression.check(parent) && path.parent.name === "expressions" && path.name === 0) {
            if (parent.expressions[0] !== node) {
              throw new Error("Nodes must be equal");
            }
            continue;
          }
          if (n.CallExpression.check(parent) && path.name === "callee") {
            if (parent.callee !== node) {
              throw new Error("Nodes must be equal");
            }
            continue;
          }
          if (n.MemberExpression.check(parent) && path.name === "object") {
            if (parent.object !== node) {
              throw new Error("Nodes must be equal");
            }
            continue;
          }
          if (n.ConditionalExpression.check(parent) && path.name === "test") {
            if (parent.test !== node) {
              throw new Error("Nodes must be equal");
            }
            continue;
          }
          if (isBinary(parent) && path.name === "left") {
            if (parent.left !== node) {
              throw new Error("Nodes must be equal");
            }
            continue;
          }
          if (n.UnaryExpression.check(parent) && !parent.prefix && path.name === "argument") {
            if (parent.argument !== node) {
              throw new Error("Nodes must be equal");
            }
            continue;
          }
          return false;
        }
        return true;
      }
      /**
       * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
       */
      function cleanUpNodesAfterPrune(remainingNodePath) {
        if (n.VariableDeclaration.check(remainingNodePath.node)) {
          var declarations = remainingNodePath.get('declarations').value;
          if (!declarations || declarations.length === 0) {
            return remainingNodePath.prune();
          }
        } else if (n.ExpressionStatement.check(remainingNodePath.node)) {
          if (!remainingNodePath.get('expression').value) {
            return remainingNodePath.prune();
          }
        } else if (n.IfStatement.check(remainingNodePath.node)) {
          cleanUpIfStatementAfterPrune(remainingNodePath);
        }
        return remainingNodePath;
      }
      function cleanUpIfStatementAfterPrune(ifStatement) {
        var testExpression = ifStatement.get('test').value;
        var alternate = ifStatement.get('alternate').value;
        var consequent = ifStatement.get('consequent').value;
        if (!consequent && !alternate) {
          var testExpressionStatement = b.expressionStatement(testExpression);
          ifStatement.replace(testExpressionStatement);
        } else if (!consequent && alternate) {
          var negatedTestExpression = b.unaryExpression('!', testExpression, true);
          if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
            negatedTestExpression = testExpression.argument;
          }
          ifStatement.get("test").replace(negatedTestExpression);
          ifStatement.get("consequent").replace(alternate);
          ifStatement.get("alternate").replace();
        }
      }
      return NodePath;
    }
    exports.default = nodePathPlugin;
    module.exports = exports["default"];
  })(nodePath, nodePath.exports);
  return nodePath.exports;
}

var hasRequiredPathVisitor;
function requirePathVisitor() {
  if (hasRequiredPathVisitor) return pathVisitor.exports;
  hasRequiredPathVisitor = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var node_path_1 = (0, tslib_1.__importDefault)(requireNodePath());
    var hasOwn = Object.prototype.hasOwnProperty;
    function pathVisitorPlugin(fork) {
      var types = fork.use(types_1.default);
      var NodePath = fork.use(node_path_1.default);
      var isArray = types.builtInTypes.array;
      var isObject = types.builtInTypes.object;
      var isFunction = types.builtInTypes.function;
      var undefined$1;
      var PathVisitor = function PathVisitor() {
        if (!(this instanceof PathVisitor)) {
          throw new Error("PathVisitor constructor cannot be invoked without 'new'");
        }
        // Permanent state.
        this._reusableContextStack = [];
        this._methodNameTable = computeMethodNameTable(this);
        this._shouldVisitComments = hasOwn.call(this._methodNameTable, "Block") || hasOwn.call(this._methodNameTable, "Line");
        this.Context = makeContextConstructor(this);
        // State reset every time PathVisitor.prototype.visit is called.
        this._visiting = false;
        this._changeReported = false;
      };
      function computeMethodNameTable(visitor) {
        var typeNames = Object.create(null);
        for (var methodName in visitor) {
          if (/^visit[A-Z]/.test(methodName)) {
            typeNames[methodName.slice("visit".length)] = true;
          }
        }
        var supertypeTable = types.computeSupertypeLookupTable(typeNames);
        var methodNameTable = Object.create(null);
        var typeNameKeys = Object.keys(supertypeTable);
        var typeNameCount = typeNameKeys.length;
        for (var i = 0; i < typeNameCount; ++i) {
          var typeName = typeNameKeys[i];
          methodName = "visit" + supertypeTable[typeName];
          if (isFunction.check(visitor[methodName])) {
            methodNameTable[typeName] = methodName;
          }
        }
        return methodNameTable;
      }
      PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
        if (methods instanceof PathVisitor) {
          return methods;
        }
        if (!isObject.check(methods)) {
          // An empty visitor?
          return new PathVisitor();
        }
        var Visitor = function Visitor() {
          if (!(this instanceof Visitor)) {
            throw new Error("Visitor constructor cannot be invoked without 'new'");
          }
          PathVisitor.call(this);
        };
        var Vp = Visitor.prototype = Object.create(PVp);
        Vp.constructor = Visitor;
        extend(Vp, methods);
        extend(Visitor, PathVisitor);
        isFunction.assert(Visitor.fromMethodsObject);
        isFunction.assert(Visitor.visit);
        return new Visitor();
      };
      function extend(target, source) {
        for (var property in source) {
          if (hasOwn.call(source, property)) {
            target[property] = source[property];
          }
        }
        return target;
      }
      PathVisitor.visit = function visit(node, methods) {
        return PathVisitor.fromMethodsObject(methods).visit(node);
      };
      var PVp = PathVisitor.prototype;
      PVp.visit = function () {
        if (this._visiting) {
          throw new Error("Recursively calling visitor.visit(path) resets visitor state. " + "Try this.visit(path) or this.traverse(path) instead.");
        }
        // Private state that needs to be reset before every traversal.
        this._visiting = true;
        this._changeReported = false;
        this._abortRequested = false;
        var argc = arguments.length;
        var args = new Array(argc);
        for (var i = 0; i < argc; ++i) {
          args[i] = arguments[i];
        }
        if (!(args[0] instanceof NodePath)) {
          args[0] = new NodePath({
            root: args[0]
          }).get("root");
        }
        // Called with the same arguments as .visit.
        this.reset.apply(this, args);
        var didNotThrow;
        try {
          var root = this.visitWithoutReset(args[0]);
          didNotThrow = true;
        } finally {
          this._visiting = false;
          if (!didNotThrow && this._abortRequested) {
            // If this.visitWithoutReset threw an exception and
            // this._abortRequested was set to true, return the root of
            // the AST instead of letting the exception propagate, so that
            // client code does not have to provide a try-catch block to
            // intercept the AbortRequest exception.  Other kinds of
            // exceptions will propagate without being intercepted and
            // rethrown by a catch block, so their stacks will accurately
            // reflect the original throwing context.
            return args[0].value;
          }
        }
        return root;
      };
      PVp.AbortRequest = function AbortRequest() {};
      PVp.abort = function () {
        var visitor = this;
        visitor._abortRequested = true;
        var request = new visitor.AbortRequest();
        // If you decide to catch this exception and stop it from propagating,
        // make sure to call its cancel method to avoid silencing other
        // exceptions that might be thrown later in the traversal.
        request.cancel = function () {
          visitor._abortRequested = false;
        };
        throw request;
      };
      PVp.reset = function (_path /*, additional arguments */) {
        // Empty stub; may be reassigned or overridden by subclasses.
      };
      PVp.visitWithoutReset = function (path) {
        if (this instanceof this.Context) {
          // Since this.Context.prototype === this, there's a chance we
          // might accidentally call context.visitWithoutReset. If that
          // happens, re-invoke the method against context.visitor.
          return this.visitor.visitWithoutReset(path);
        }
        if (!(path instanceof NodePath)) {
          throw new Error("");
        }
        var value = path.value;
        var methodName = value && typeof value === "object" && typeof value.type === "string" && this._methodNameTable[value.type];
        if (methodName) {
          var context = this.acquireContext(path);
          try {
            return context.invokeVisitorMethod(methodName);
          } finally {
            this.releaseContext(context);
          }
        } else {
          // If there was no visitor method to call, visit the children of
          // this node generically.
          return visitChildren(path, this);
        }
      };
      function visitChildren(path, visitor) {
        if (!(path instanceof NodePath)) {
          throw new Error("");
        }
        if (!(visitor instanceof PathVisitor)) {
          throw new Error("");
        }
        var value = path.value;
        if (isArray.check(value)) {
          path.each(visitor.visitWithoutReset, visitor);
        } else if (!isObject.check(value)) ; else {
          var childNames = types.getFieldNames(value);
          // The .comments field of the Node type is hidden, so we only
          // visit it if the visitor defines visitBlock or visitLine, and
          // value.comments is defined.
          if (visitor._shouldVisitComments && value.comments && childNames.indexOf("comments") < 0) {
            childNames.push("comments");
          }
          var childCount = childNames.length;
          var childPaths = [];
          for (var i = 0; i < childCount; ++i) {
            var childName = childNames[i];
            if (!hasOwn.call(value, childName)) {
              value[childName] = types.getFieldValue(value, childName);
            }
            childPaths.push(path.get(childName));
          }
          for (var i = 0; i < childCount; ++i) {
            visitor.visitWithoutReset(childPaths[i]);
          }
        }
        return path.value;
      }
      PVp.acquireContext = function (path) {
        if (this._reusableContextStack.length === 0) {
          return new this.Context(path);
        }
        return this._reusableContextStack.pop().reset(path);
      };
      PVp.releaseContext = function (context) {
        if (!(context instanceof this.Context)) {
          throw new Error("");
        }
        this._reusableContextStack.push(context);
        context.currentPath = null;
      };
      PVp.reportChanged = function () {
        this._changeReported = true;
      };
      PVp.wasChangeReported = function () {
        return this._changeReported;
      };
      function makeContextConstructor(visitor) {
        function Context(path) {
          if (!(this instanceof Context)) {
            throw new Error("");
          }
          if (!(this instanceof PathVisitor)) {
            throw new Error("");
          }
          if (!(path instanceof NodePath)) {
            throw new Error("");
          }
          Object.defineProperty(this, "visitor", {
            value: visitor,
            writable: false,
            enumerable: true,
            configurable: false
          });
          this.currentPath = path;
          this.needToCallTraverse = true;
          Object.seal(this);
        }
        if (!(visitor instanceof PathVisitor)) {
          throw new Error("");
        }
        // Note that the visitor object is the prototype of Context.prototype,
        // so all visitor methods are inherited by context objects.
        var Cp = Context.prototype = Object.create(visitor);
        Cp.constructor = Context;
        extend(Cp, sharedContextProtoMethods);
        return Context;
      }
      // Every PathVisitor has a different this.Context constructor and
      // this.Context.prototype object, but those prototypes can all use the
      // same reset, invokeVisitorMethod, and traverse function objects.
      var sharedContextProtoMethods = Object.create(null);
      sharedContextProtoMethods.reset = function reset(path) {
        if (!(this instanceof this.Context)) {
          throw new Error("");
        }
        if (!(path instanceof NodePath)) {
          throw new Error("");
        }
        this.currentPath = path;
        this.needToCallTraverse = true;
        return this;
      };
      sharedContextProtoMethods.invokeVisitorMethod = function invokeVisitorMethod(methodName) {
        if (!(this instanceof this.Context)) {
          throw new Error("");
        }
        if (!(this.currentPath instanceof NodePath)) {
          throw new Error("");
        }
        var result = this.visitor[methodName].call(this, this.currentPath);
        if (result === false) {
          // Visitor methods return false to indicate that they have handled
          // their own traversal needs, and we should not complain if
          // this.needToCallTraverse is still true.
          this.needToCallTraverse = false;
        } else if (result !== undefined$1) {
          // Any other non-undefined value returned from the visitor method
          // is interpreted as a replacement value.
          this.currentPath = this.currentPath.replace(result)[0];
          if (this.needToCallTraverse) {
            // If this.traverse still hasn't been called, visit the
            // children of the replacement node.
            this.traverse(this.currentPath);
          }
        }
        if (this.needToCallTraverse !== false) {
          throw new Error("Must either call this.traverse or return false in " + methodName);
        }
        var path = this.currentPath;
        return path && path.value;
      };
      sharedContextProtoMethods.traverse = function traverse(path, newVisitor) {
        if (!(this instanceof this.Context)) {
          throw new Error("");
        }
        if (!(path instanceof NodePath)) {
          throw new Error("");
        }
        if (!(this.currentPath instanceof NodePath)) {
          throw new Error("");
        }
        this.needToCallTraverse = false;
        return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));
      };
      sharedContextProtoMethods.visit = function visit(path, newVisitor) {
        if (!(this instanceof this.Context)) {
          throw new Error("");
        }
        if (!(path instanceof NodePath)) {
          throw new Error("");
        }
        if (!(this.currentPath instanceof NodePath)) {
          throw new Error("");
        }
        this.needToCallTraverse = false;
        return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);
      };
      sharedContextProtoMethods.reportChanged = function reportChanged() {
        this.visitor.reportChanged();
      };
      sharedContextProtoMethods.abort = function abort() {
        this.needToCallTraverse = false;
        this.visitor.abort();
      };
      return PathVisitor;
    }
    exports.default = pathVisitorPlugin;
    module.exports = exports["default"];
  })(pathVisitor, pathVisitor.exports);
  return pathVisitor.exports;
}

var equiv = {exports: {}};

var hasRequiredEquiv;
function requireEquiv() {
  if (hasRequiredEquiv) return equiv.exports;
  hasRequiredEquiv = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    function default_1(fork) {
      var types = fork.use(types_1.default);
      var getFieldNames = types.getFieldNames;
      var getFieldValue = types.getFieldValue;
      var isArray = types.builtInTypes.array;
      var isObject = types.builtInTypes.object;
      var isDate = types.builtInTypes.Date;
      var isRegExp = types.builtInTypes.RegExp;
      var hasOwn = Object.prototype.hasOwnProperty;
      function astNodesAreEquivalent(a, b, problemPath) {
        if (isArray.check(problemPath)) {
          problemPath.length = 0;
        } else {
          problemPath = null;
        }
        return areEquivalent(a, b, problemPath);
      }
      astNodesAreEquivalent.assert = function (a, b) {
        var problemPath = [];
        if (!astNodesAreEquivalent(a, b, problemPath)) {
          if (problemPath.length === 0) {
            if (a !== b) {
              throw new Error("Nodes must be equal");
            }
          } else {
            throw new Error("Nodes differ in the following path: " + problemPath.map(subscriptForProperty).join(""));
          }
        }
      };
      function subscriptForProperty(property) {
        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
          return "." + property;
        }
        return "[" + JSON.stringify(property) + "]";
      }
      function areEquivalent(a, b, problemPath) {
        if (a === b) {
          return true;
        }
        if (isArray.check(a)) {
          return arraysAreEquivalent(a, b, problemPath);
        }
        if (isObject.check(a)) {
          return objectsAreEquivalent(a, b, problemPath);
        }
        if (isDate.check(a)) {
          return isDate.check(b) && +a === +b;
        }
        if (isRegExp.check(a)) {
          return isRegExp.check(b) && a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.ignoreCase === b.ignoreCase;
        }
        return a == b;
      }
      function arraysAreEquivalent(a, b, problemPath) {
        isArray.assert(a);
        var aLength = a.length;
        if (!isArray.check(b) || b.length !== aLength) {
          if (problemPath) {
            problemPath.push("length");
          }
          return false;
        }
        for (var i = 0; i < aLength; ++i) {
          if (problemPath) {
            problemPath.push(i);
          }
          if (i in a !== i in b) {
            return false;
          }
          if (!areEquivalent(a[i], b[i], problemPath)) {
            return false;
          }
          if (problemPath) {
            var problemPathTail = problemPath.pop();
            if (problemPathTail !== i) {
              throw new Error("" + problemPathTail);
            }
          }
        }
        return true;
      }
      function objectsAreEquivalent(a, b, problemPath) {
        isObject.assert(a);
        if (!isObject.check(b)) {
          return false;
        }
        // Fast path for a common property of AST nodes.
        if (a.type !== b.type) {
          if (problemPath) {
            problemPath.push("type");
          }
          return false;
        }
        var aNames = getFieldNames(a);
        var aNameCount = aNames.length;
        var bNames = getFieldNames(b);
        var bNameCount = bNames.length;
        if (aNameCount === bNameCount) {
          for (var i = 0; i < aNameCount; ++i) {
            var name = aNames[i];
            var aChild = getFieldValue(a, name);
            var bChild = getFieldValue(b, name);
            if (problemPath) {
              problemPath.push(name);
            }
            if (!areEquivalent(aChild, bChild, problemPath)) {
              return false;
            }
            if (problemPath) {
              var problemPathTail = problemPath.pop();
              if (problemPathTail !== name) {
                throw new Error("" + problemPathTail);
              }
            }
          }
          return true;
        }
        if (!problemPath) {
          return false;
        }
        // Since aNameCount !== bNameCount, we need to find some name that's
        // missing in aNames but present in bNames, or vice-versa.
        var seenNames = Object.create(null);
        for (i = 0; i < aNameCount; ++i) {
          seenNames[aNames[i]] = true;
        }
        for (i = 0; i < bNameCount; ++i) {
          name = bNames[i];
          if (!hasOwn.call(seenNames, name)) {
            problemPath.push(name);
            return false;
          }
          delete seenNames[name];
        }
        for (name in seenNames) {
          problemPath.push(name);
          break;
        }
        return false;
      }
      return astNodesAreEquivalent;
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(equiv, equiv.exports);
  return equiv.exports;
}

var hasRequiredFork;
function requireFork() {
  if (hasRequiredFork) return fork.exports;
  hasRequiredFork = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var path_visitor_1 = (0, tslib_1.__importDefault)(requirePathVisitor());
    var equiv_1 = (0, tslib_1.__importDefault)(requireEquiv());
    var path_1 = (0, tslib_1.__importDefault)(requirePath());
    var node_path_1 = (0, tslib_1.__importDefault)(requireNodePath());
    function default_1(plugins) {
      var fork = createFork();
      var types = fork.use(types_1.default);
      plugins.forEach(fork.use);
      types.finalize();
      var PathVisitor = fork.use(path_visitor_1.default);
      return {
        Type: types.Type,
        builtInTypes: types.builtInTypes,
        namedTypes: types.namedTypes,
        builders: types.builders,
        defineMethod: types.defineMethod,
        getFieldNames: types.getFieldNames,
        getFieldValue: types.getFieldValue,
        eachField: types.eachField,
        someField: types.someField,
        getSupertypeNames: types.getSupertypeNames,
        getBuilderName: types.getBuilderName,
        astNodesAreEquivalent: fork.use(equiv_1.default),
        finalize: types.finalize,
        Path: fork.use(path_1.default),
        NodePath: fork.use(node_path_1.default),
        PathVisitor: PathVisitor,
        use: fork.use,
        visit: PathVisitor.visit
      };
    }
    exports.default = default_1;
    function createFork() {
      var used = [];
      var usedResult = [];
      function use(plugin) {
        var idx = used.indexOf(plugin);
        if (idx === -1) {
          idx = used.length;
          used.push(plugin);
          usedResult[idx] = plugin(fork);
        }
        return usedResult[idx];
      }
      var fork = {
        use: use
      };
      return fork;
    }
    module.exports = exports["default"];
  })(fork, fork.exports);
  return fork.exports;
}

var esProposals = {exports: {}};

var shared = {exports: {}};

var hasRequiredShared;
function requireShared() {
  if (hasRequiredShared) return shared.exports;
  hasRequiredShared = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    function default_1(fork) {
      var types = fork.use(types_1.default);
      var Type = types.Type;
      var builtin = types.builtInTypes;
      var isNumber = builtin.number;
      // An example of constructing a new type with arbitrary constraints from
      // an existing type.
      function geq(than) {
        return Type.from(function (value) {
          return isNumber.check(value) && value >= than;
        }, isNumber + " >= " + than);
      }
      // Default value-returning functions that may optionally be passed as a
      // third argument to Def.prototype.field.
      var defaults = {
        // Functions were used because (among other reasons) that's the most
        // elegant way to allow for the emptyArray one always to give a new
        // array instance.
        "null": function () {
          return null;
        },
        "emptyArray": function () {
          return [];
        },
        "false": function () {
          return false;
        },
        "true": function () {
          return true;
        },
        "undefined": function () {},
        "use strict": function () {
          return "use strict";
        }
      };
      var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);
      var isPrimitive = Type.from(function (value) {
        if (value === null) return true;
        var type = typeof value;
        if (type === "object" || type === "function") {
          return false;
        }
        return true;
      }, naiveIsPrimitive.toString());
      return {
        geq: geq,
        defaults: defaults,
        isPrimitive: isPrimitive
      };
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(shared, shared.exports);
  return shared.exports;
}

var es2022 = {exports: {}};

var es2021$1 = {exports: {}};

var es2021 = {exports: {}};

var es2020$1 = {exports: {}};

var es2016$1 = {exports: {}};

var core$1 = {exports: {}};

var hasRequiredCore$1;
function requireCore$1() {
  if (hasRequiredCore$1) return core$1.exports;
  hasRequiredCore$1 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function default_1() {
      return {
        BinaryOperators: ["==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "&", "|", "^", "in", "instanceof"],
        AssignmentOperators: ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&="],
        LogicalOperators: ["||", "&&"]
      };
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(core$1, core$1.exports);
  return core$1.exports;
}

var hasRequiredEs2016$1;
function requireEs2016$1() {
  if (hasRequiredEs2016$1) return es2016$1.exports;
  hasRequiredEs2016$1 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var core_1 = (0, tslib_1.__importDefault)(requireCore$1());
    function default_1(fork) {
      var result = fork.use(core_1.default);
      // Exponentiation operators. Must run before BinaryOperators or
      // AssignmentOperators are used (hence before fork.use(es6Def)).
      // https://github.com/tc39/proposal-exponentiation-operator
      if (result.BinaryOperators.indexOf("**") < 0) {
        result.BinaryOperators.push("**");
      }
      if (result.AssignmentOperators.indexOf("**=") < 0) {
        result.AssignmentOperators.push("**=");
      }
      return result;
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2016$1, es2016$1.exports);
  return es2016$1.exports;
}

var hasRequiredEs2020$1;
function requireEs2020$1() {
  if (hasRequiredEs2020$1) return es2020$1.exports;
  hasRequiredEs2020$1 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2016_1 = (0, tslib_1.__importDefault)(requireEs2016$1());
    function default_1(fork) {
      var result = fork.use(es2016_1.default);
      // Nullish coalescing. Must run before LogicalOperators is used.
      // https://github.com/tc39/proposal-nullish-coalescing
      if (result.LogicalOperators.indexOf("??") < 0) {
        result.LogicalOperators.push("??");
      }
      return result;
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2020$1, es2020$1.exports);
  return es2020$1.exports;
}

var hasRequiredEs2021$1;
function requireEs2021$1() {
  if (hasRequiredEs2021$1) return es2021.exports;
  hasRequiredEs2021$1 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2020_1 = (0, tslib_1.__importDefault)(requireEs2020$1());
    function default_1(fork) {
      var result = fork.use(es2020_1.default);
      // Logical assignment operators. Must run before AssignmentOperators is used.
      // https://github.com/tc39/proposal-logical-assignment
      result.LogicalOperators.forEach(function (op) {
        var assignOp = op + "=";
        if (result.AssignmentOperators.indexOf(assignOp) < 0) {
          result.AssignmentOperators.push(assignOp);
        }
      });
      return result;
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2021, es2021.exports);
  return es2021.exports;
}

var es2020 = {exports: {}};

var es2019 = {exports: {}};

var es2018 = {exports: {}};

var es2017 = {exports: {}};

var es2016 = {exports: {}};

var es6 = {exports: {}};

var core = {exports: {}};

var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore) return core.exports;
  hasRequiredCore = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var core_1 = (0, tslib_1.__importDefault)(requireCore$1());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      var types = fork.use(types_1.default);
      var Type = types.Type;
      var def = Type.def;
      var or = Type.or;
      var shared = fork.use(shared_1.default);
      var defaults = shared.defaults;
      var geq = shared.geq;
      var _a = fork.use(core_1.default),
        BinaryOperators = _a.BinaryOperators,
        AssignmentOperators = _a.AssignmentOperators,
        LogicalOperators = _a.LogicalOperators;
      // Abstract supertype of all syntactic entities that are allowed to have a
      // .loc field.
      def("Printable").field("loc", or(def("SourceLocation"), null), defaults["null"], true);
      def("Node").bases("Printable").field("type", String).field("comments", or([def("Comment")], null), defaults["null"], true);
      def("SourceLocation").field("start", def("Position")).field("end", def("Position")).field("source", or(String, null), defaults["null"]);
      def("Position").field("line", geq(1)).field("column", geq(0));
      def("File").bases("Node").build("program", "name").field("program", def("Program")).field("name", or(String, null), defaults["null"]);
      def("Program").bases("Node").build("body").field("body", [def("Statement")]);
      def("Function").bases("Node").field("id", or(def("Identifier"), null), defaults["null"]).field("params", [def("Pattern")]).field("body", def("BlockStatement")).field("generator", Boolean, defaults["false"]).field("async", Boolean, defaults["false"]);
      def("Statement").bases("Node");
      // The empty .build() here means that an EmptyStatement can be constructed
      // (i.e. it's not abstract) but that it needs no arguments.
      def("EmptyStatement").bases("Statement").build();
      def("BlockStatement").bases("Statement").build("body").field("body", [def("Statement")]);
      // TODO Figure out how to silently coerce Expressions to
      // ExpressionStatements where a Statement was expected.
      def("ExpressionStatement").bases("Statement").build("expression").field("expression", def("Expression"));
      def("IfStatement").bases("Statement").build("test", "consequent", "alternate").field("test", def("Expression")).field("consequent", def("Statement")).field("alternate", or(def("Statement"), null), defaults["null"]);
      def("LabeledStatement").bases("Statement").build("label", "body").field("label", def("Identifier")).field("body", def("Statement"));
      def("BreakStatement").bases("Statement").build("label").field("label", or(def("Identifier"), null), defaults["null"]);
      def("ContinueStatement").bases("Statement").build("label").field("label", or(def("Identifier"), null), defaults["null"]);
      def("WithStatement").bases("Statement").build("object", "body").field("object", def("Expression")).field("body", def("Statement"));
      def("SwitchStatement").bases("Statement").build("discriminant", "cases", "lexical").field("discriminant", def("Expression")).field("cases", [def("SwitchCase")]).field("lexical", Boolean, defaults["false"]);
      def("ReturnStatement").bases("Statement").build("argument").field("argument", or(def("Expression"), null));
      def("ThrowStatement").bases("Statement").build("argument").field("argument", def("Expression"));
      def("TryStatement").bases("Statement").build("block", "handler", "finalizer").field("block", def("BlockStatement")).field("handler", or(def("CatchClause"), null), function () {
        return this.handlers && this.handlers[0] || null;
      }).field("handlers", [def("CatchClause")], function () {
        return this.handler ? [this.handler] : [];
      }, true) // Indicates this field is hidden from eachField iteration.
      .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray).field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
      def("CatchClause").bases("Node").build("param", "guard", "body").field("param", def("Pattern")).field("guard", or(def("Expression"), null), defaults["null"]).field("body", def("BlockStatement"));
      def("WhileStatement").bases("Statement").build("test", "body").field("test", def("Expression")).field("body", def("Statement"));
      def("DoWhileStatement").bases("Statement").build("body", "test").field("body", def("Statement")).field("test", def("Expression"));
      def("ForStatement").bases("Statement").build("init", "test", "update", "body").field("init", or(def("VariableDeclaration"), def("Expression"), null)).field("test", or(def("Expression"), null)).field("update", or(def("Expression"), null)).field("body", def("Statement"));
      def("ForInStatement").bases("Statement").build("left", "right", "body").field("left", or(def("VariableDeclaration"), def("Expression"))).field("right", def("Expression")).field("body", def("Statement"));
      def("DebuggerStatement").bases("Statement").build();
      def("Declaration").bases("Statement");
      def("FunctionDeclaration").bases("Function", "Declaration").build("id", "params", "body").field("id", def("Identifier"));
      def("FunctionExpression").bases("Function", "Expression").build("id", "params", "body");
      def("VariableDeclaration").bases("Declaration").build("kind", "declarations").field("kind", or("var", "let", "const")).field("declarations", [def("VariableDeclarator")]);
      def("VariableDeclarator").bases("Node").build("id", "init").field("id", def("Pattern")).field("init", or(def("Expression"), null), defaults["null"]);
      def("Expression").bases("Node");
      def("ThisExpression").bases("Expression").build();
      def("ArrayExpression").bases("Expression").build("elements").field("elements", [or(def("Expression"), null)]);
      def("ObjectExpression").bases("Expression").build("properties").field("properties", [def("Property")]);
      // TODO Not in the Mozilla Parser API, but used by Esprima.
      def("Property").bases("Node") // Want to be able to visit Property Nodes.
      .build("kind", "key", "value").field("kind", or("init", "get", "set")).field("key", or(def("Literal"), def("Identifier"))).field("value", def("Expression"));
      def("SequenceExpression").bases("Expression").build("expressions").field("expressions", [def("Expression")]);
      var UnaryOperator = or("-", "+", "!", "~", "typeof", "void", "delete");
      def("UnaryExpression").bases("Expression").build("operator", "argument", "prefix").field("operator", UnaryOperator).field("argument", def("Expression"))
      // Esprima doesn't bother with this field, presumably because it's
      // always true for unary operators.
      .field("prefix", Boolean, defaults["true"]);
      var BinaryOperator = or.apply(void 0, BinaryOperators);
      def("BinaryExpression").bases("Expression").build("operator", "left", "right").field("operator", BinaryOperator).field("left", def("Expression")).field("right", def("Expression"));
      var AssignmentOperator = or.apply(void 0, AssignmentOperators);
      def("AssignmentExpression").bases("Expression").build("operator", "left", "right").field("operator", AssignmentOperator).field("left", or(def("Pattern"), def("MemberExpression"))).field("right", def("Expression"));
      var UpdateOperator = or("++", "--");
      def("UpdateExpression").bases("Expression").build("operator", "argument", "prefix").field("operator", UpdateOperator).field("argument", def("Expression")).field("prefix", Boolean);
      var LogicalOperator = or.apply(void 0, LogicalOperators);
      def("LogicalExpression").bases("Expression").build("operator", "left", "right").field("operator", LogicalOperator).field("left", def("Expression")).field("right", def("Expression"));
      def("ConditionalExpression").bases("Expression").build("test", "consequent", "alternate").field("test", def("Expression")).field("consequent", def("Expression")).field("alternate", def("Expression"));
      def("NewExpression").bases("Expression").build("callee", "arguments").field("callee", def("Expression"))
      // The Mozilla Parser API gives this type as [or(def("Expression"),
      // null)], but null values don't really make sense at the call site.
      // TODO Report this nonsense.
      .field("arguments", [def("Expression")]);
      def("CallExpression").bases("Expression").build("callee", "arguments").field("callee", def("Expression"))
      // See comment for NewExpression above.
      .field("arguments", [def("Expression")]);
      def("MemberExpression").bases("Expression").build("object", "property", "computed").field("object", def("Expression")).field("property", or(def("Identifier"), def("Expression"))).field("computed", Boolean, function () {
        var type = this.property.type;
        if (type === 'Literal' || type === 'MemberExpression' || type === 'BinaryExpression') {
          return true;
        }
        return false;
      });
      def("Pattern").bases("Node");
      def("SwitchCase").bases("Node").build("test", "consequent").field("test", or(def("Expression"), null)).field("consequent", [def("Statement")]);
      def("Identifier").bases("Expression", "Pattern").build("name").field("name", String).field("optional", Boolean, defaults["false"]);
      def("Literal").bases("Expression").build("value").field("value", or(String, Boolean, null, Number, RegExp, BigInt));
      // Abstract (non-buildable) comment supertype. Not a Node.
      def("Comment").bases("Printable").field("value", String)
      // A .leading comment comes before the node, whereas a .trailing
      // comment comes after it. These two fields should not both be true,
      // but they might both be false when the comment falls inside a node
      // and the node has no children for the comment to lead or trail,
      // e.g. { /*dangling*/ }.
      .field("leading", Boolean, defaults["true"]).field("trailing", Boolean, defaults["false"]);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(core, core.exports);
  return core.exports;
}

var hasRequiredEs6;
function requireEs6() {
  if (hasRequiredEs6) return es6.exports;
  hasRequiredEs6 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var core_1 = (0, tslib_1.__importDefault)(requireCore());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(core_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      def("Function").field("generator", Boolean, defaults["false"]).field("expression", Boolean, defaults["false"]).field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
      // Legacy
      .field("rest", or(def("Identifier"), null), defaults["null"]);
      // The ESTree way of representing a ...rest parameter.
      def("RestElement").bases("Pattern").build("argument").field("argument", def("Pattern")).field("typeAnnotation",
      // for Babylon. Flow parser puts it on the identifier
      or(def("TypeAnnotation"), def("TSTypeAnnotation"), null), defaults["null"]);
      def("SpreadElementPattern").bases("Pattern").build("argument").field("argument", def("Pattern"));
      def("FunctionDeclaration").build("id", "params", "body", "generator", "expression")
      // May be `null` in the context of `export default function () {}`
      .field("id", or(def("Identifier"), null));
      def("FunctionExpression").build("id", "params", "body", "generator", "expression");
      def("ArrowFunctionExpression").bases("Function", "Expression").build("params", "body", "expression")
      // The forced null value here is compatible with the overridden
      // definition of the "id" field in the Function interface.
      .field("id", null, defaults["null"])
      // Arrow function bodies are allowed to be expressions.
      .field("body", or(def("BlockStatement"), def("Expression")))
      // The current spec forbids arrow generators, so I have taken the
      // liberty of enforcing that. TODO Report this.
      .field("generator", false, defaults["false"]);
      def("ForOfStatement").bases("Statement").build("left", "right", "body").field("left", or(def("VariableDeclaration"), def("Pattern"))).field("right", def("Expression")).field("body", def("Statement"));
      def("YieldExpression").bases("Expression").build("argument", "delegate").field("argument", or(def("Expression"), null)).field("delegate", Boolean, defaults["false"]);
      def("GeneratorExpression").bases("Expression").build("body", "blocks", "filter").field("body", def("Expression")).field("blocks", [def("ComprehensionBlock")]).field("filter", or(def("Expression"), null));
      def("ComprehensionExpression").bases("Expression").build("body", "blocks", "filter").field("body", def("Expression")).field("blocks", [def("ComprehensionBlock")]).field("filter", or(def("Expression"), null));
      def("ComprehensionBlock").bases("Node").build("left", "right", "each").field("left", def("Pattern")).field("right", def("Expression")).field("each", Boolean);
      def("Property").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("value", or(def("Expression"), def("Pattern"))).field("method", Boolean, defaults["false"]).field("shorthand", Boolean, defaults["false"]).field("computed", Boolean, defaults["false"]);
      def("ObjectProperty").field("shorthand", Boolean, defaults["false"]);
      def("PropertyPattern").bases("Pattern").build("key", "pattern").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("pattern", def("Pattern")).field("computed", Boolean, defaults["false"]);
      def("ObjectPattern").bases("Pattern").build("properties").field("properties", [or(def("PropertyPattern"), def("Property"))]);
      def("ArrayPattern").bases("Pattern").build("elements").field("elements", [or(def("Pattern"), null)]);
      def("SpreadElement").bases("Node").build("argument").field("argument", def("Expression"));
      def("ArrayExpression").field("elements", [or(def("Expression"), def("SpreadElement"), def("RestElement"), null)]);
      def("NewExpression").field("arguments", [or(def("Expression"), def("SpreadElement"))]);
      def("CallExpression").field("arguments", [or(def("Expression"), def("SpreadElement"))]);
      // Note: this node type is *not* an AssignmentExpression with a Pattern on
      // the left-hand side! The existing AssignmentExpression type already
      // supports destructuring assignments. AssignmentPattern nodes may appear
      // wherever a Pattern is allowed, and the right-hand side represents a
      // default value to be destructured against the left-hand side, if no
      // value is otherwise provided. For example: default parameter values.
      def("AssignmentPattern").bases("Pattern").build("left", "right").field("left", def("Pattern")).field("right", def("Expression"));
      def("MethodDefinition").bases("Declaration").build("kind", "key", "value", "static").field("kind", or("constructor", "method", "get", "set")).field("key", def("Expression")).field("value", def("Function")).field("computed", Boolean, defaults["false"]).field("static", Boolean, defaults["false"]);
      var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"));
      def("ClassProperty").bases("Declaration").build("key").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("computed", Boolean, defaults["false"]);
      def("ClassPropertyDefinition") // static property
      .bases("Declaration").build("definition")
      // Yes, Virginia, circular definitions are permitted.
      .field("definition", ClassBodyElement);
      def("ClassBody").bases("Declaration").build("body").field("body", [ClassBodyElement]);
      def("ClassDeclaration").bases("Declaration").build("id", "body", "superClass").field("id", or(def("Identifier"), null)).field("body", def("ClassBody")).field("superClass", or(def("Expression"), null), defaults["null"]);
      def("ClassExpression").bases("Expression").build("id", "body", "superClass").field("id", or(def("Identifier"), null), defaults["null"]).field("body", def("ClassBody")).field("superClass", or(def("Expression"), null), defaults["null"]);
      def("Super").bases("Expression").build();
      // Specifier and ModuleSpecifier are abstract non-standard types
      // introduced for definitional convenience.
      def("Specifier").bases("Node");
      // This supertype is shared/abused by both def/babel.js and
      // def/esprima.js. In the future, it will be possible to load only one set
      // of definitions appropriate for a given parser, but until then we must
      // rely on default functions to reconcile the conflicting AST formats.
      def("ModuleSpecifier").bases("Specifier")
      // This local field is used by Babel/Acorn. It should not technically
      // be optional in the Babel/Acorn AST format, but it must be optional
      // in the Esprima AST format.
      .field("local", or(def("Identifier"), null), defaults["null"])
      // The id and name fields are used by Esprima. The id field should not
      // technically be optional in the Esprima AST format, but it must be
      // optional in the Babel/Acorn AST format.
      .field("id", or(def("Identifier"), null), defaults["null"]).field("name", or(def("Identifier"), null), defaults["null"]);
      // import {<id [as name]>} from ...;
      def("ImportSpecifier").bases("ModuleSpecifier").build("imported", "local").field("imported", def("Identifier"));
      // import <id> from ...;
      def("ImportDefaultSpecifier").bases("ModuleSpecifier").build("local");
      // import <* as id> from ...;
      def("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("local");
      def("ImportDeclaration").bases("Declaration").build("specifiers", "source", "importKind").field("specifiers", [or(def("ImportSpecifier"), def("ImportNamespaceSpecifier"), def("ImportDefaultSpecifier"))], defaults.emptyArray).field("source", def("Literal")).field("importKind", or("value", "type"), function () {
        return "value";
      });
      def("ExportNamedDeclaration").bases("Declaration").build("declaration", "specifiers", "source").field("declaration", or(def("Declaration"), null)).field("specifiers", [def("ExportSpecifier")], defaults.emptyArray).field("source", or(def("Literal"), null), defaults["null"]);
      def("ExportSpecifier").bases("ModuleSpecifier").build("local", "exported").field("exported", def("Identifier"));
      def("ExportDefaultDeclaration").bases("Declaration").build("declaration").field("declaration", or(def("Declaration"), def("Expression")));
      def("ExportAllDeclaration").bases("Declaration").build("source").field("source", def("Literal"));
      def("TaggedTemplateExpression").bases("Expression").build("tag", "quasi").field("tag", def("Expression")).field("quasi", def("TemplateLiteral"));
      def("TemplateLiteral").bases("Expression").build("quasis", "expressions").field("quasis", [def("TemplateElement")]).field("expressions", [def("Expression")]);
      def("TemplateElement").bases("Node").build("value", "tail").field("value", {
        "cooked": String,
        "raw": String
      }).field("tail", Boolean);
      def("MetaProperty").bases("Expression").build("meta", "property").field("meta", def("Identifier")).field("property", def("Identifier"));
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es6, es6.exports);
  return es6.exports;
}

var hasRequiredEs2016;
function requireEs2016() {
  if (hasRequiredEs2016) return es2016.exports;
  hasRequiredEs2016 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2016_1 = (0, tslib_1.__importDefault)(requireEs2016$1());
    var es6_1 = (0, tslib_1.__importDefault)(requireEs6());
    function default_1(fork) {
      // The es2016OpsDef plugin comes before es6Def so BinaryOperators and
      // AssignmentOperators will be appropriately augmented before they are first
      // used in the core definitions for this fork.
      fork.use(es2016_1.default);
      fork.use(es6_1.default);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2016, es2016.exports);
  return es2016.exports;
}

var hasRequiredEs2017;
function requireEs2017() {
  if (hasRequiredEs2017) return es2017.exports;
  hasRequiredEs2017 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2016_1 = (0, tslib_1.__importDefault)(requireEs2016());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(es2016_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var defaults = fork.use(shared_1.default).defaults;
      def("Function").field("async", Boolean, defaults["false"]);
      def("AwaitExpression").bases("Expression").build("argument").field("argument", def("Expression"));
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2017, es2017.exports);
  return es2017.exports;
}

var hasRequiredEs2018;
function requireEs2018() {
  if (hasRequiredEs2018) return es2018.exports;
  hasRequiredEs2018 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2017_1 = (0, tslib_1.__importDefault)(requireEs2017());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(es2017_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      def("ForOfStatement").field("await", Boolean, defaults["false"]);
      // Legacy
      def("SpreadProperty").bases("Node").build("argument").field("argument", def("Expression"));
      def("ObjectExpression").field("properties", [or(def("Property"), def("SpreadProperty"),
      // Legacy
      def("SpreadElement"))]);
      def("TemplateElement").field("value", {
        "cooked": or(String, null),
        "raw": String
      });
      // Legacy
      def("SpreadPropertyPattern").bases("Pattern").build("argument").field("argument", def("Pattern"));
      def("ObjectPattern").field("properties", [or(def("PropertyPattern"), def("Property"), def("RestElement"), def("SpreadPropertyPattern"))]);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2018, es2018.exports);
  return es2018.exports;
}

var hasRequiredEs2019;
function requireEs2019() {
  if (hasRequiredEs2019) return es2019.exports;
  hasRequiredEs2019 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2018_1 = (0, tslib_1.__importDefault)(requireEs2018());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(es2018_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      def("CatchClause").field("param", or(def("Pattern"), null), defaults["null"]);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2019, es2019.exports);
  return es2019.exports;
}

var hasRequiredEs2020;
function requireEs2020() {
  if (hasRequiredEs2020) return es2020.exports;
  hasRequiredEs2020 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2020_1 = (0, tslib_1.__importDefault)(requireEs2020$1());
    var es2019_1 = (0, tslib_1.__importDefault)(requireEs2019());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      // The es2020OpsDef plugin comes before es2019Def so LogicalOperators will be
      // appropriately augmented before first used.
      fork.use(es2020_1.default);
      fork.use(es2019_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var shared = fork.use(shared_1.default);
      var defaults = shared.defaults;
      def("ImportExpression").bases("Expression").build("source").field("source", def("Expression"));
      def("ExportAllDeclaration").build("source", "exported").field("source", def("Literal")).field("exported", or(def("Identifier"), null));
      // Optional chaining
      def("ChainElement").bases("Node").field("optional", Boolean, defaults["false"]);
      def("CallExpression").bases("Expression", "ChainElement");
      def("MemberExpression").bases("Expression", "ChainElement");
      def("ChainExpression").bases("Expression").build("expression").field("expression", def("ChainElement"));
      def("OptionalCallExpression").bases("CallExpression").build("callee", "arguments", "optional").field("optional", Boolean, defaults["true"]);
      // Deprecated optional chaining type, doesn't work with babelParser@7.11.0 or newer
      def("OptionalMemberExpression").bases("MemberExpression").build("object", "property", "computed", "optional").field("optional", Boolean, defaults["true"]);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2020, es2020.exports);
  return es2020.exports;
}

var hasRequiredEs2021;
function requireEs2021() {
  if (hasRequiredEs2021) return es2021$1.exports;
  hasRequiredEs2021 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2021_1 = (0, tslib_1.__importDefault)(requireEs2021$1());
    var es2020_1 = (0, tslib_1.__importDefault)(requireEs2020());
    function default_1(fork) {
      // The es2021OpsDef plugin comes before es2020Def so AssignmentOperators will
      // be appropriately augmented before first used.
      fork.use(es2021_1.default);
      fork.use(es2020_1.default);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2021$1, es2021$1.exports);
  return es2021$1.exports;
}

var hasRequiredEs2022;
function requireEs2022() {
  if (hasRequiredEs2022) return es2022.exports;
  hasRequiredEs2022 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es2021_1 = (0, tslib_1.__importDefault)(requireEs2021());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    function default_1(fork) {
      fork.use(es2021_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      def("StaticBlock").bases("Declaration").build("body").field("body", [def("Statement")]);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(es2022, es2022.exports);
  return es2022.exports;
}

var hasRequiredEsProposals;
function requireEsProposals() {
  if (hasRequiredEsProposals) return esProposals.exports;
  hasRequiredEsProposals = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    var es2022_1 = (0, tslib_1.__importDefault)(requireEs2022());
    function default_1(fork) {
      fork.use(es2022_1.default);
      var types = fork.use(types_1.default);
      var Type = types.Type;
      var def = types.Type.def;
      var or = Type.or;
      var shared = fork.use(shared_1.default);
      var defaults = shared.defaults;
      def("AwaitExpression").build("argument", "all").field("argument", or(def("Expression"), null)).field("all", Boolean, defaults["false"]);
      // Decorators
      def("Decorator").bases("Node").build("expression").field("expression", def("Expression"));
      def("Property").field("decorators", or([def("Decorator")], null), defaults["null"]);
      def("MethodDefinition").field("decorators", or([def("Decorator")], null), defaults["null"]);
      // Private names
      def("PrivateName").bases("Expression", "Pattern").build("id").field("id", def("Identifier"));
      def("ClassPrivateProperty").bases("ClassProperty").build("key", "value").field("key", def("PrivateName")).field("value", or(def("Expression"), null), defaults["null"]);
      // https://github.com/tc39/proposal-import-assertions
      def("ImportAttribute").bases("Node").build("key", "value").field("key", or(def("Identifier"), def("Literal"))).field("value", def("Expression"));
      ["ImportDeclaration", "ExportAllDeclaration", "ExportNamedDeclaration"].forEach(function (decl) {
        def(decl).field("assertions", [def("ImportAttribute")], defaults.emptyArray);
      });
      // https://github.com/tc39/proposal-record-tuple
      // https://github.com/babel/babel/pull/10865
      def("RecordExpression").bases("Expression").build("properties").field("properties", [or(def("ObjectProperty"), def("ObjectMethod"), def("SpreadElement"))]);
      def("TupleExpression").bases("Expression").build("elements").field("elements", [or(def("Expression"), def("SpreadElement"), null)]);
      // https://github.com/tc39/proposal-js-module-blocks
      // https://github.com/babel/babel/pull/12469
      def("ModuleExpression").bases("Node").build("body").field("body", def("Program"));
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(esProposals, esProposals.exports);
  return esProposals.exports;
}

var jsx = {exports: {}};

var hasRequiredJsx;
function requireJsx() {
  if (hasRequiredJsx) return jsx.exports;
  hasRequiredJsx = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es_proposals_1 = (0, tslib_1.__importDefault)(requireEsProposals());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(es_proposals_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      def("JSXAttribute").bases("Node").build("name", "value").field("name", or(def("JSXIdentifier"), def("JSXNamespacedName"))).field("value", or(def("Literal"),
      // attr="value"
      def("JSXExpressionContainer"),
      // attr={value}
      def("JSXElement"),
      // attr=<div />
      def("JSXFragment"),
      // attr=<></>
      null // attr= or just attr
      ), defaults["null"]);
      def("JSXIdentifier").bases("Identifier").build("name").field("name", String);
      def("JSXNamespacedName").bases("Node").build("namespace", "name").field("namespace", def("JSXIdentifier")).field("name", def("JSXIdentifier"));
      def("JSXMemberExpression").bases("MemberExpression").build("object", "property").field("object", or(def("JSXIdentifier"), def("JSXMemberExpression"))).field("property", def("JSXIdentifier")).field("computed", Boolean, defaults.false);
      var JSXElementName = or(def("JSXIdentifier"), def("JSXNamespacedName"), def("JSXMemberExpression"));
      def("JSXSpreadAttribute").bases("Node").build("argument").field("argument", def("Expression"));
      var JSXAttributes = [or(def("JSXAttribute"), def("JSXSpreadAttribute"))];
      def("JSXExpressionContainer").bases("Expression").build("expression").field("expression", or(def("Expression"), def("JSXEmptyExpression")));
      var JSXChildren = [or(def("JSXText"), def("JSXExpressionContainer"), def("JSXSpreadChild"), def("JSXElement"), def("JSXFragment"), def("Literal") // Legacy: Esprima should return JSXText instead.
      )];

      def("JSXElement").bases("Expression").build("openingElement", "closingElement", "children").field("openingElement", def("JSXOpeningElement")).field("closingElement", or(def("JSXClosingElement"), null), defaults["null"]).field("children", JSXChildren, defaults.emptyArray).field("name", JSXElementName, function () {
        // Little-known fact: the `this` object inside a default function
        // is none other than the partially-built object itself, and any
        // fields initialized directly from builder function arguments
        // (like openingElement, closingElement, and children) are
        // guaranteed to be available.
        return this.openingElement.name;
      }, true) // hidden from traversal
      .field("selfClosing", Boolean, function () {
        return this.openingElement.selfClosing;
      }, true) // hidden from traversal
      .field("attributes", JSXAttributes, function () {
        return this.openingElement.attributes;
      }, true); // hidden from traversal
      def("JSXOpeningElement").bases("Node").build("name", "attributes", "selfClosing").field("name", JSXElementName).field("attributes", JSXAttributes, defaults.emptyArray).field("selfClosing", Boolean, defaults["false"]);
      def("JSXClosingElement").bases("Node").build("name").field("name", JSXElementName);
      def("JSXFragment").bases("Expression").build("openingFragment", "closingFragment", "children").field("openingFragment", def("JSXOpeningFragment")).field("closingFragment", def("JSXClosingFragment")).field("children", JSXChildren, defaults.emptyArray);
      def("JSXOpeningFragment").bases("Node").build();
      def("JSXClosingFragment").bases("Node").build();
      def("JSXText").bases("Literal").build("value", "raw").field("value", String).field("raw", String, function () {
        return this.value;
      });
      def("JSXEmptyExpression").bases("Node").build();
      def("JSXSpreadChild").bases("Node").build("expression").field("expression", def("Expression"));
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(jsx, jsx.exports);
  return jsx.exports;
}

var flow = {exports: {}};

var typeAnnotations = {exports: {}};

var hasRequiredTypeAnnotations;
function requireTypeAnnotations() {
  if (hasRequiredTypeAnnotations) return typeAnnotations.exports;
  hasRequiredTypeAnnotations = 1;
  (function (module, exports) {
    /**
     * Type annotation defs shared between Flow and TypeScript.
     * These defs could not be defined in ./flow.ts or ./typescript.ts directly
     * because they use the same name.
     */
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      var TypeAnnotation = or(def("TypeAnnotation"), def("TSTypeAnnotation"), null);
      var TypeParamDecl = or(def("TypeParameterDeclaration"), def("TSTypeParameterDeclaration"), null);
      def("Identifier").field("typeAnnotation", TypeAnnotation, defaults["null"]);
      def("ObjectPattern").field("typeAnnotation", TypeAnnotation, defaults["null"]);
      def("Function").field("returnType", TypeAnnotation, defaults["null"]).field("typeParameters", TypeParamDecl, defaults["null"]);
      def("ClassProperty").build("key", "value", "typeAnnotation", "static").field("value", or(def("Expression"), null)).field("static", Boolean, defaults["false"]).field("typeAnnotation", TypeAnnotation, defaults["null"]);
      ["ClassDeclaration", "ClassExpression"].forEach(function (typeName) {
        def(typeName).field("typeParameters", TypeParamDecl, defaults["null"]).field("superTypeParameters", or(def("TypeParameterInstantiation"), def("TSTypeParameterInstantiation"), null), defaults["null"]).field("implements", or([def("ClassImplements")], [def("TSExpressionWithTypeArguments")]), defaults.emptyArray);
      });
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(typeAnnotations, typeAnnotations.exports);
  return typeAnnotations.exports;
}

var hasRequiredFlow;
function requireFlow() {
  if (hasRequiredFlow) return flow.exports;
  hasRequiredFlow = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es_proposals_1 = (0, tslib_1.__importDefault)(requireEsProposals());
    var type_annotations_1 = (0, tslib_1.__importDefault)(requireTypeAnnotations());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(es_proposals_1.default);
      fork.use(type_annotations_1.default);
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      // Base types
      def("Flow").bases("Node");
      def("FlowType").bases("Flow");
      // Type annotations
      def("AnyTypeAnnotation").bases("FlowType").build();
      def("EmptyTypeAnnotation").bases("FlowType").build();
      def("MixedTypeAnnotation").bases("FlowType").build();
      def("VoidTypeAnnotation").bases("FlowType").build();
      def("SymbolTypeAnnotation").bases("FlowType").build();
      def("NumberTypeAnnotation").bases("FlowType").build();
      def("BigIntTypeAnnotation").bases("FlowType").build();
      def("NumberLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", Number).field("raw", String);
      // Babylon 6 differs in AST from Flow
      // same as NumberLiteralTypeAnnotation
      def("NumericLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", Number).field("raw", String);
      def("BigIntLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", null).field("raw", String);
      def("StringTypeAnnotation").bases("FlowType").build();
      def("StringLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", String).field("raw", String);
      def("BooleanTypeAnnotation").bases("FlowType").build();
      def("BooleanLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", Boolean).field("raw", String);
      def("TypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation", def("FlowType"));
      def("NullableTypeAnnotation").bases("FlowType").build("typeAnnotation").field("typeAnnotation", def("FlowType"));
      def("NullLiteralTypeAnnotation").bases("FlowType").build();
      def("NullTypeAnnotation").bases("FlowType").build();
      def("ThisTypeAnnotation").bases("FlowType").build();
      def("ExistsTypeAnnotation").bases("FlowType").build();
      def("ExistentialTypeParam").bases("FlowType").build();
      def("FunctionTypeAnnotation").bases("FlowType").build("params", "returnType", "rest", "typeParameters").field("params", [def("FunctionTypeParam")]).field("returnType", def("FlowType")).field("rest", or(def("FunctionTypeParam"), null)).field("typeParameters", or(def("TypeParameterDeclaration"), null));
      def("FunctionTypeParam").bases("Node").build("name", "typeAnnotation", "optional").field("name", or(def("Identifier"), null)).field("typeAnnotation", def("FlowType")).field("optional", Boolean);
      def("ArrayTypeAnnotation").bases("FlowType").build("elementType").field("elementType", def("FlowType"));
      def("ObjectTypeAnnotation").bases("FlowType").build("properties", "indexers", "callProperties").field("properties", [or(def("ObjectTypeProperty"), def("ObjectTypeSpreadProperty"))]).field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray).field("callProperties", [def("ObjectTypeCallProperty")], defaults.emptyArray).field("inexact", or(Boolean, void 0), defaults["undefined"]).field("exact", Boolean, defaults["false"]).field("internalSlots", [def("ObjectTypeInternalSlot")], defaults.emptyArray);
      def("Variance").bases("Node").build("kind").field("kind", or("plus", "minus"));
      var LegacyVariance = or(def("Variance"), "plus", "minus", null);
      def("ObjectTypeProperty").bases("Node").build("key", "value", "optional").field("key", or(def("Literal"), def("Identifier"))).field("value", def("FlowType")).field("optional", Boolean).field("variance", LegacyVariance, defaults["null"]);
      def("ObjectTypeIndexer").bases("Node").build("id", "key", "value").field("id", def("Identifier")).field("key", def("FlowType")).field("value", def("FlowType")).field("variance", LegacyVariance, defaults["null"]).field("static", Boolean, defaults["false"]);
      def("ObjectTypeCallProperty").bases("Node").build("value").field("value", def("FunctionTypeAnnotation")).field("static", Boolean, defaults["false"]);
      def("QualifiedTypeIdentifier").bases("Node").build("qualification", "id").field("qualification", or(def("Identifier"), def("QualifiedTypeIdentifier"))).field("id", def("Identifier"));
      def("GenericTypeAnnotation").bases("FlowType").build("id", "typeParameters").field("id", or(def("Identifier"), def("QualifiedTypeIdentifier"))).field("typeParameters", or(def("TypeParameterInstantiation"), null));
      def("MemberTypeAnnotation").bases("FlowType").build("object", "property").field("object", def("Identifier")).field("property", or(def("MemberTypeAnnotation"), def("GenericTypeAnnotation")));
      def("IndexedAccessType").bases("FlowType").build("objectType", "indexType").field("objectType", def("FlowType")).field("indexType", def("FlowType"));
      def("OptionalIndexedAccessType").bases("FlowType").build("objectType", "indexType", "optional").field("objectType", def("FlowType")).field("indexType", def("FlowType")).field('optional', Boolean);
      def("UnionTypeAnnotation").bases("FlowType").build("types").field("types", [def("FlowType")]);
      def("IntersectionTypeAnnotation").bases("FlowType").build("types").field("types", [def("FlowType")]);
      def("TypeofTypeAnnotation").bases("FlowType").build("argument").field("argument", def("FlowType"));
      def("ObjectTypeSpreadProperty").bases("Node").build("argument").field("argument", def("FlowType"));
      def("ObjectTypeInternalSlot").bases("Node").build("id", "value", "optional", "static", "method").field("id", def("Identifier")).field("value", def("FlowType")).field("optional", Boolean).field("static", Boolean).field("method", Boolean);
      def("TypeParameterDeclaration").bases("Node").build("params").field("params", [def("TypeParameter")]);
      def("TypeParameterInstantiation").bases("Node").build("params").field("params", [def("FlowType")]);
      def("TypeParameter").bases("FlowType").build("name", "variance", "bound", "default").field("name", String).field("variance", LegacyVariance, defaults["null"]).field("bound", or(def("TypeAnnotation"), null), defaults["null"]).field("default", or(def("FlowType"), null), defaults["null"]);
      def("ClassProperty").field("variance", LegacyVariance, defaults["null"]);
      def("ClassImplements").bases("Node").build("id").field("id", def("Identifier")).field("superClass", or(def("Expression"), null), defaults["null"]).field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
      def("InterfaceTypeAnnotation").bases("FlowType").build("body", "extends").field("body", def("ObjectTypeAnnotation")).field("extends", or([def("InterfaceExtends")], null), defaults["null"]);
      def("InterfaceDeclaration").bases("Declaration").build("id", "body", "extends").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"]).field("body", def("ObjectTypeAnnotation")).field("extends", [def("InterfaceExtends")]);
      def("DeclareInterface").bases("InterfaceDeclaration").build("id", "body", "extends");
      def("InterfaceExtends").bases("Node").build("id").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
      def("TypeAlias").bases("Declaration").build("id", "typeParameters", "right").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterDeclaration"), null)).field("right", def("FlowType"));
      def("DeclareTypeAlias").bases("TypeAlias").build("id", "typeParameters", "right");
      def("OpaqueType").bases("Declaration").build("id", "typeParameters", "impltype", "supertype").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterDeclaration"), null)).field("impltype", def("FlowType")).field("supertype", or(def("FlowType"), null));
      def("DeclareOpaqueType").bases("OpaqueType").build("id", "typeParameters", "supertype").field("impltype", or(def("FlowType"), null));
      def("TypeCastExpression").bases("Expression").build("expression", "typeAnnotation").field("expression", def("Expression")).field("typeAnnotation", def("TypeAnnotation"));
      def("TupleTypeAnnotation").bases("FlowType").build("types").field("types", [def("FlowType")]);
      def("DeclareVariable").bases("Statement").build("id").field("id", def("Identifier"));
      def("DeclareFunction").bases("Statement").build("id").field("id", def("Identifier")).field("predicate", or(def("FlowPredicate"), null), defaults["null"]);
      def("DeclareClass").bases("InterfaceDeclaration").build("id");
      def("DeclareModule").bases("Statement").build("id", "body").field("id", or(def("Identifier"), def("Literal"))).field("body", def("BlockStatement"));
      def("DeclareModuleExports").bases("Statement").build("typeAnnotation").field("typeAnnotation", def("TypeAnnotation"));
      def("DeclareExportDeclaration").bases("Declaration").build("default", "declaration", "specifiers", "source").field("default", Boolean).field("declaration", or(def("DeclareVariable"), def("DeclareFunction"), def("DeclareClass"), def("FlowType"),
      // Implies default.
      def("TypeAlias"),
      // Implies named type
      def("DeclareOpaqueType"),
      // Implies named opaque type
      def("InterfaceDeclaration"), null)).field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray).field("source", or(def("Literal"), null), defaults["null"]);
      def("DeclareExportAllDeclaration").bases("Declaration").build("source").field("source", or(def("Literal"), null), defaults["null"]);
      def("ImportDeclaration").field("importKind", or("value", "type", "typeof"), function () {
        return "value";
      });
      def("FlowPredicate").bases("Flow");
      def("InferredPredicate").bases("FlowPredicate").build();
      def("DeclaredPredicate").bases("FlowPredicate").build("value").field("value", def("Expression"));
      def("Function").field("predicate", or(def("FlowPredicate"), null), defaults["null"]);
      def("CallExpression").field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
      def("NewExpression").field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
      // Enums
      def("EnumDeclaration").bases("Declaration").build("id", "body").field("id", def("Identifier")).field("body", or(def("EnumBooleanBody"), def("EnumNumberBody"), def("EnumStringBody"), def("EnumSymbolBody")));
      def("EnumBooleanBody").build("members", "explicitType").field("members", [def("EnumBooleanMember")]).field("explicitType", Boolean);
      def("EnumNumberBody").build("members", "explicitType").field("members", [def("EnumNumberMember")]).field("explicitType", Boolean);
      def("EnumStringBody").build("members", "explicitType").field("members", or([def("EnumStringMember")], [def("EnumDefaultedMember")])).field("explicitType", Boolean);
      def("EnumSymbolBody").build("members").field("members", [def("EnumDefaultedMember")]);
      def("EnumBooleanMember").build("id", "init").field("id", def("Identifier")).field("init", or(def("Literal"), Boolean));
      def("EnumNumberMember").build("id", "init").field("id", def("Identifier")).field("init", def("Literal"));
      def("EnumStringMember").build("id", "init").field("id", def("Identifier")).field("init", def("Literal"));
      def("EnumDefaultedMember").build("id").field("id", def("Identifier"));
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(flow, flow.exports);
  return flow.exports;
}

var esprima$1 = {exports: {}};

var hasRequiredEsprima$1;
function requireEsprima$1() {
  if (hasRequiredEsprima$1) return esprima$1.exports;
  hasRequiredEsprima$1 = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es_proposals_1 = (0, tslib_1.__importDefault)(requireEsProposals());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      fork.use(es_proposals_1.default);
      var types = fork.use(types_1.default);
      var defaults = fork.use(shared_1.default).defaults;
      var def = types.Type.def;
      var or = types.Type.or;
      def("VariableDeclaration").field("declarations", [or(def("VariableDeclarator"), def("Identifier") // Esprima deviation.
      )]);

      def("Property").field("value", or(def("Expression"), def("Pattern") // Esprima deviation.
      ));

      def("ArrayPattern").field("elements", [or(def("Pattern"), def("SpreadElement"), null)]);
      def("ObjectPattern").field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty") // Used by Esprima.
      )]);
      // Like ModuleSpecifier, except type:"ExportSpecifier" and buildable.
      // export {<id [as name]>} [from ...];
      def("ExportSpecifier").bases("ModuleSpecifier").build("id", "name");
      // export <*> from ...;
      def("ExportBatchSpecifier").bases("Specifier").build();
      def("ExportDeclaration").bases("Declaration").build("default", "declaration", "specifiers", "source").field("default", Boolean).field("declaration", or(def("Declaration"), def("Expression"),
      // Implies default.
      null)).field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray).field("source", or(def("Literal"), null), defaults["null"]);
      def("Block").bases("Comment").build("value", /*optional:*/"leading", "trailing");
      def("Line").bases("Comment").build("value", /*optional:*/"leading", "trailing");
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(esprima$1, esprima$1.exports);
  return esprima$1.exports;
}

var babel = {exports: {}};

var babelCore = {exports: {}};

var hasRequiredBabelCore;
function requireBabelCore() {
  if (hasRequiredBabelCore) return babelCore.exports;
  hasRequiredBabelCore = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var es_proposals_1 = (0, tslib_1.__importDefault)(requireEsProposals());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      var _a, _b, _c, _d, _e;
      fork.use(es_proposals_1.default);
      var types = fork.use(types_1.default);
      var defaults = fork.use(shared_1.default).defaults;
      var def = types.Type.def;
      var or = types.Type.or;
      var isUndefined = types.builtInTypes.undefined;
      def("Noop").bases("Statement").build();
      def("DoExpression").bases("Expression").build("body").field("body", [def("Statement")]);
      def("BindExpression").bases("Expression").build("object", "callee").field("object", or(def("Expression"), null)).field("callee", def("Expression"));
      def("ParenthesizedExpression").bases("Expression").build("expression").field("expression", def("Expression"));
      def("ExportNamespaceSpecifier").bases("Specifier").build("exported").field("exported", def("Identifier"));
      def("ExportDefaultSpecifier").bases("Specifier").build("exported").field("exported", def("Identifier"));
      def("CommentBlock").bases("Comment").build("value", /*optional:*/"leading", "trailing");
      def("CommentLine").bases("Comment").build("value", /*optional:*/"leading", "trailing");
      def("Directive").bases("Node").build("value").field("value", def("DirectiveLiteral"));
      def("DirectiveLiteral").bases("Node", "Expression").build("value").field("value", String, defaults["use strict"]);
      def("InterpreterDirective").bases("Node").build("value").field("value", String);
      def("BlockStatement").bases("Statement").build("body").field("body", [def("Statement")]).field("directives", [def("Directive")], defaults.emptyArray);
      def("Program").bases("Node").build("body").field("body", [def("Statement")]).field("directives", [def("Directive")], defaults.emptyArray).field("interpreter", or(def("InterpreterDirective"), null), defaults["null"]);
      function makeLiteralExtra(rawValueType, toRaw) {
        if (rawValueType === void 0) {
          rawValueType = String;
        }
        return ["extra", {
          rawValue: rawValueType,
          raw: String
        }, function getDefault() {
          var value = types.getFieldValue(this, "value");
          return {
            rawValue: value,
            raw: toRaw ? toRaw(value) : String(value)
          };
        }];
      }
      // Split Literal
      (_a = def("StringLiteral").bases("Literal").build("value").field("value", String)).field.apply(_a, makeLiteralExtra(String, function (val) {
        return JSON.stringify(val);
      }));
      (_b = def("NumericLiteral").bases("Literal").build("value").field("value", Number).field("raw", or(String, null), defaults["null"])).field.apply(_b, makeLiteralExtra(Number));
      (_c = def("BigIntLiteral").bases("Literal").build("value")
      // Only String really seems appropriate here, since BigInt values
      // often exceed the limits of JS numbers.
      .field("value", or(String, Number))).field.apply(_c, makeLiteralExtra(String, function (val) {
        return val + "n";
      }));
      // https://github.com/tc39/proposal-decimal
      // https://github.com/babel/babel/pull/11640
      (_d = def("DecimalLiteral").bases("Literal").build("value").field("value", String)).field.apply(_d, makeLiteralExtra(String, function (val) {
        return val + "m";
      }));
      def("NullLiteral").bases("Literal").build().field("value", null, defaults["null"]);
      def("BooleanLiteral").bases("Literal").build("value").field("value", Boolean);
      (_e = def("RegExpLiteral").bases("Literal").build("pattern", "flags").field("pattern", String).field("flags", String).field("value", RegExp, function () {
        return new RegExp(this.pattern, this.flags);
      })).field.apply(_e, makeLiteralExtra(or(RegExp, isUndefined), function (exp) {
        return "/".concat(exp.pattern, "/").concat(exp.flags || "");
      })).field("regex", {
        pattern: String,
        flags: String
      }, function () {
        return {
          pattern: this.pattern,
          flags: this.flags
        };
      });
      var ObjectExpressionProperty = or(def("Property"), def("ObjectMethod"), def("ObjectProperty"), def("SpreadProperty"), def("SpreadElement"));
      // Split Property -> ObjectProperty and ObjectMethod
      def("ObjectExpression").bases("Expression").build("properties").field("properties", [ObjectExpressionProperty]);
      // ObjectMethod hoist .value properties to own properties
      def("ObjectMethod").bases("Node", "Function").build("kind", "key", "params", "body", "computed").field("kind", or("method", "get", "set")).field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("params", [def("Pattern")]).field("body", def("BlockStatement")).field("computed", Boolean, defaults["false"]).field("generator", Boolean, defaults["false"]).field("async", Boolean, defaults["false"]).field("accessibility",
      // TypeScript
      or(def("Literal"), null), defaults["null"]).field("decorators", or([def("Decorator")], null), defaults["null"]);
      def("ObjectProperty").bases("Node").build("key", "value").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("value", or(def("Expression"), def("Pattern"))).field("accessibility",
      // TypeScript
      or(def("Literal"), null), defaults["null"]).field("computed", Boolean, defaults["false"]);
      var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"));
      // MethodDefinition -> ClassMethod
      def("ClassBody").bases("Declaration").build("body").field("body", [ClassBodyElement]);
      def("ClassMethod").bases("Declaration", "Function").build("kind", "key", "params", "body", "computed", "static").field("key", or(def("Literal"), def("Identifier"), def("Expression")));
      def("ClassPrivateMethod").bases("Declaration", "Function").build("key", "params", "body", "kind", "computed", "static").field("key", def("PrivateName"));
      ["ClassMethod", "ClassPrivateMethod"].forEach(function (typeName) {
        def(typeName).field("kind", or("get", "set", "method", "constructor"), function () {
          return "method";
        }).field("body", def("BlockStatement")).field("computed", Boolean, defaults["false"]).field("static", or(Boolean, null), defaults["null"]).field("abstract", or(Boolean, null), defaults["null"]).field("access", or("public", "private", "protected", null), defaults["null"]).field("accessibility", or("public", "private", "protected", null), defaults["null"]).field("decorators", or([def("Decorator")], null), defaults["null"]).field("optional", or(Boolean, null), defaults["null"]);
      });
      var ObjectPatternProperty = or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty"),
      // Used by Esprima
      def("ObjectProperty"),
      // Babel 6
      def("RestProperty") // Babel 6
      );
      // Split into RestProperty and SpreadProperty
      def("ObjectPattern").bases("Pattern").build("properties").field("properties", [ObjectPatternProperty]).field("decorators", or([def("Decorator")], null), defaults["null"]);
      def("SpreadProperty").bases("Node").build("argument").field("argument", def("Expression"));
      def("RestProperty").bases("Node").build("argument").field("argument", def("Expression"));
      def("ForAwaitStatement").bases("Statement").build("left", "right", "body").field("left", or(def("VariableDeclaration"), def("Expression"))).field("right", def("Expression")).field("body", def("Statement"));
      // The callee node of a dynamic import(...) expression.
      def("Import").bases("Expression").build();
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(babelCore, babelCore.exports);
  return babelCore.exports;
}

var hasRequiredBabel;
function requireBabel() {
  if (hasRequiredBabel) return babel.exports;
  hasRequiredBabel = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var babel_core_1 = (0, tslib_1.__importDefault)(requireBabelCore());
    var flow_1 = (0, tslib_1.__importDefault)(requireFlow());
    function default_1(fork) {
      var types = fork.use(types_1.default);
      var def = types.Type.def;
      fork.use(babel_core_1.default);
      fork.use(flow_1.default);
      // https://github.com/babel/babel/pull/10148
      def("V8IntrinsicIdentifier").bases("Expression").build("name").field("name", String);
      // https://github.com/babel/babel/pull/13191
      // https://github.com/babel/website/pull/2541
      def("TopicReference").bases("Expression").build();
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(babel, babel.exports);
  return babel.exports;
}

var typescript = {exports: {}};

var hasRequiredTypescript;
function requireTypescript() {
  if (hasRequiredTypescript) return typescript.exports;
  hasRequiredTypescript = 1;
  (function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tslib_1 = require$$0;
    var babel_core_1 = (0, tslib_1.__importDefault)(requireBabelCore());
    var type_annotations_1 = (0, tslib_1.__importDefault)(requireTypeAnnotations());
    var types_1 = (0, tslib_1.__importDefault)(requireTypes());
    var shared_1 = (0, tslib_1.__importDefault)(requireShared());
    function default_1(fork) {
      // Since TypeScript is parsed by Babylon, include the core Babylon types
      // but omit the Flow-related types.
      fork.use(babel_core_1.default);
      fork.use(type_annotations_1.default);
      var types = fork.use(types_1.default);
      var n = types.namedTypes;
      var def = types.Type.def;
      var or = types.Type.or;
      var defaults = fork.use(shared_1.default).defaults;
      var StringLiteral = types.Type.from(function (value, deep) {
        if (n.StringLiteral && n.StringLiteral.check(value, deep)) {
          return true;
        }
        if (n.Literal && n.Literal.check(value, deep) && typeof value.value === "string") {
          return true;
        }
        return false;
      }, "StringLiteral");
      def("TSType").bases("Node");
      var TSEntityName = or(def("Identifier"), def("TSQualifiedName"));
      def("TSTypeReference").bases("TSType", "TSHasOptionalTypeParameterInstantiation").build("typeName", "typeParameters").field("typeName", TSEntityName);
      // An abstract (non-buildable) base type that provide a commonly-needed
      // optional .typeParameters field.
      def("TSHasOptionalTypeParameterInstantiation").field("typeParameters", or(def("TSTypeParameterInstantiation"), null), defaults["null"]);
      // An abstract (non-buildable) base type that provide a commonly-needed
      // optional .typeParameters field.
      def("TSHasOptionalTypeParameters").field("typeParameters", or(def("TSTypeParameterDeclaration"), null, void 0), defaults["null"]);
      // An abstract (non-buildable) base type that provide a commonly-needed
      // optional .typeAnnotation field.
      def("TSHasOptionalTypeAnnotation").field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"]);
      def("TSQualifiedName").bases("Node").build("left", "right").field("left", TSEntityName).field("right", TSEntityName);
      def("TSAsExpression").bases("Expression", "Pattern").build("expression", "typeAnnotation").field("expression", def("Expression")).field("typeAnnotation", def("TSType")).field("extra", or({
        parenthesized: Boolean
      }, null), defaults["null"]);
      def("TSNonNullExpression").bases("Expression", "Pattern").build("expression").field("expression", def("Expression"));
      ["TSAnyKeyword", "TSBigIntKeyword", "TSBooleanKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword", "TSIntrinsicKeyword", "TSThisType"].forEach(function (keywordType) {
        def(keywordType).bases("TSType").build();
      });
      def("TSArrayType").bases("TSType").build("elementType").field("elementType", def("TSType"));
      def("TSLiteralType").bases("TSType").build("literal").field("literal", or(def("NumericLiteral"), def("StringLiteral"), def("BooleanLiteral"), def("TemplateLiteral"), def("UnaryExpression")));
      def("TemplateLiteral")
      // The TemplateLiteral type appears to be reused for TypeScript template
      // literal types (instead of introducing a new TSTemplateLiteralType type),
      // so we allow the templateLiteral.expressions array to be either all
      // expressions or all TypeScript types.
      .field("expressions", or([def("Expression")], [def("TSType")]));
      ["TSUnionType", "TSIntersectionType"].forEach(function (typeName) {
        def(typeName).bases("TSType").build("types").field("types", [def("TSType")]);
      });
      def("TSConditionalType").bases("TSType").build("checkType", "extendsType", "trueType", "falseType").field("checkType", def("TSType")).field("extendsType", def("TSType")).field("trueType", def("TSType")).field("falseType", def("TSType"));
      def("TSInferType").bases("TSType").build("typeParameter").field("typeParameter", def("TSTypeParameter"));
      def("TSParenthesizedType").bases("TSType").build("typeAnnotation").field("typeAnnotation", def("TSType"));
      var ParametersType = [or(def("Identifier"), def("RestElement"), def("ArrayPattern"), def("ObjectPattern"))];
      ["TSFunctionType", "TSConstructorType"].forEach(function (typeName) {
        def(typeName).bases("TSType", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation").build("parameters").field("parameters", ParametersType);
      });
      def("TSDeclareFunction").bases("Declaration", "TSHasOptionalTypeParameters").build("id", "params", "returnType").field("declare", Boolean, defaults["false"]).field("async", Boolean, defaults["false"]).field("generator", Boolean, defaults["false"]).field("id", or(def("Identifier"), null), defaults["null"]).field("params", [def("Pattern")])
      // tSFunctionTypeAnnotationCommon
      .field("returnType", or(def("TSTypeAnnotation"), def("Noop"),
      // Still used?
      null), defaults["null"]);
      def("TSDeclareMethod").bases("Declaration", "TSHasOptionalTypeParameters").build("key", "params", "returnType").field("async", Boolean, defaults["false"]).field("generator", Boolean, defaults["false"]).field("params", [def("Pattern")])
      // classMethodOrPropertyCommon
      .field("abstract", Boolean, defaults["false"]).field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"]).field("static", Boolean, defaults["false"]).field("computed", Boolean, defaults["false"]).field("optional", Boolean, defaults["false"]).field("key", or(def("Identifier"), def("StringLiteral"), def("NumericLiteral"),
      // Only allowed if .computed is true.
      def("Expression")))
      // classMethodOrDeclareMethodCommon
      .field("kind", or("get", "set", "method", "constructor"), function getDefault() {
        return "method";
      }).field("access",
      // Not "accessibility"?
      or("public", "private", "protected", void 0), defaults["undefined"]).field("decorators", or([def("Decorator")], null), defaults["null"])
      // tSFunctionTypeAnnotationCommon
      .field("returnType", or(def("TSTypeAnnotation"), def("Noop"),
      // Still used?
      null), defaults["null"]);
      def("TSMappedType").bases("TSType").build("typeParameter", "typeAnnotation").field("readonly", or(Boolean, "+", "-"), defaults["false"]).field("typeParameter", def("TSTypeParameter")).field("optional", or(Boolean, "+", "-"), defaults["false"]).field("typeAnnotation", or(def("TSType"), null), defaults["null"]);
      def("TSTupleType").bases("TSType").build("elementTypes").field("elementTypes", [or(def("TSType"), def("TSNamedTupleMember"))]);
      def("TSNamedTupleMember").bases("TSType").build("label", "elementType", "optional").field("label", def("Identifier")).field("optional", Boolean, defaults["false"]).field("elementType", def("TSType"));
      def("TSRestType").bases("TSType").build("typeAnnotation").field("typeAnnotation", def("TSType"));
      def("TSOptionalType").bases("TSType").build("typeAnnotation").field("typeAnnotation", def("TSType"));
      def("TSIndexedAccessType").bases("TSType").build("objectType", "indexType").field("objectType", def("TSType")).field("indexType", def("TSType"));
      def("TSTypeOperator").bases("TSType").build("operator").field("operator", String).field("typeAnnotation", def("TSType"));
      def("TSTypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation", or(def("TSType"), def("TSTypeAnnotation")));
      def("TSIndexSignature").bases("Declaration", "TSHasOptionalTypeAnnotation").build("parameters", "typeAnnotation").field("parameters", [def("Identifier")]) // Length === 1
      .field("readonly", Boolean, defaults["false"]);
      def("TSPropertySignature").bases("Declaration", "TSHasOptionalTypeAnnotation").build("key", "typeAnnotation", "optional").field("key", def("Expression")).field("computed", Boolean, defaults["false"]).field("readonly", Boolean, defaults["false"]).field("optional", Boolean, defaults["false"]).field("initializer", or(def("Expression"), null), defaults["null"]);
      def("TSMethodSignature").bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation").build("key", "parameters", "typeAnnotation").field("key", def("Expression")).field("computed", Boolean, defaults["false"]).field("optional", Boolean, defaults["false"]).field("parameters", ParametersType);
      def("TSTypePredicate").bases("TSTypeAnnotation", "TSType").build("parameterName", "typeAnnotation", "asserts").field("parameterName", or(def("Identifier"), def("TSThisType"))).field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"]).field("asserts", Boolean, defaults["false"]);
      ["TSCallSignatureDeclaration", "TSConstructSignatureDeclaration"].forEach(function (typeName) {
        def(typeName).bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation").build("parameters", "typeAnnotation").field("parameters", ParametersType);
      });
      def("TSEnumMember").bases("Node").build("id", "initializer").field("id", or(def("Identifier"), StringLiteral)).field("initializer", or(def("Expression"), null), defaults["null"]);
      def("TSTypeQuery").bases("TSType").build("exprName").field("exprName", or(TSEntityName, def("TSImportType")));
      // Inferred from Babylon's tsParseTypeMember method.
      var TSTypeMember = or(def("TSCallSignatureDeclaration"), def("TSConstructSignatureDeclaration"), def("TSIndexSignature"), def("TSMethodSignature"), def("TSPropertySignature"));
      def("TSTypeLiteral").bases("TSType").build("members").field("members", [TSTypeMember]);
      def("TSTypeParameter").bases("Identifier").build("name", "constraint", "default").field("name", String).field("constraint", or(def("TSType"), void 0), defaults["undefined"]).field("default", or(def("TSType"), void 0), defaults["undefined"]);
      def("TSTypeAssertion").bases("Expression", "Pattern").build("typeAnnotation", "expression").field("typeAnnotation", def("TSType")).field("expression", def("Expression")).field("extra", or({
        parenthesized: Boolean
      }, null), defaults["null"]);
      def("TSTypeParameterDeclaration").bases("Declaration").build("params").field("params", [def("TSTypeParameter")]);
      def("TSTypeParameterInstantiation").bases("Node").build("params").field("params", [def("TSType")]);
      def("TSEnumDeclaration").bases("Declaration").build("id", "members").field("id", def("Identifier")).field("const", Boolean, defaults["false"]).field("declare", Boolean, defaults["false"]).field("members", [def("TSEnumMember")]).field("initializer", or(def("Expression"), null), defaults["null"]);
      def("TSTypeAliasDeclaration").bases("Declaration", "TSHasOptionalTypeParameters").build("id", "typeAnnotation").field("id", def("Identifier")).field("declare", Boolean, defaults["false"]).field("typeAnnotation", def("TSType"));
      def("TSModuleBlock").bases("Node").build("body").field("body", [def("Statement")]);
      def("TSModuleDeclaration").bases("Declaration").build("id", "body").field("id", or(StringLiteral, TSEntityName)).field("declare", Boolean, defaults["false"]).field("global", Boolean, defaults["false"]).field("body", or(def("TSModuleBlock"), def("TSModuleDeclaration"), null), defaults["null"]);
      def("TSImportType").bases("TSType", "TSHasOptionalTypeParameterInstantiation").build("argument", "qualifier", "typeParameters").field("argument", StringLiteral).field("qualifier", or(TSEntityName, void 0), defaults["undefined"]);
      def("TSImportEqualsDeclaration").bases("Declaration").build("id", "moduleReference").field("id", def("Identifier")).field("isExport", Boolean, defaults["false"]).field("moduleReference", or(TSEntityName, def("TSExternalModuleReference")));
      def("TSExternalModuleReference").bases("Declaration").build("expression").field("expression", StringLiteral);
      def("TSExportAssignment").bases("Statement").build("expression").field("expression", def("Expression"));
      def("TSNamespaceExportDeclaration").bases("Declaration").build("id").field("id", def("Identifier"));
      def("TSInterfaceBody").bases("Node").build("body").field("body", [TSTypeMember]);
      def("TSExpressionWithTypeArguments").bases("TSType", "TSHasOptionalTypeParameterInstantiation").build("expression", "typeParameters").field("expression", TSEntityName);
      def("TSInterfaceDeclaration").bases("Declaration", "TSHasOptionalTypeParameters").build("id", "body").field("id", TSEntityName).field("declare", Boolean, defaults["false"]).field("extends", or([def("TSExpressionWithTypeArguments")], null), defaults["null"]).field("body", def("TSInterfaceBody"));
      def("TSParameterProperty").bases("Pattern").build("parameter").field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"]).field("readonly", Boolean, defaults["false"]).field("parameter", or(def("Identifier"), def("AssignmentPattern")));
      def("ClassProperty").field("access",
      // Not "accessibility"?
      or("public", "private", "protected", void 0), defaults["undefined"]);
      // Defined already in es6 and babel-core.
      def("ClassBody").field("body", [or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"),
      // Just need to add these types:
      def("TSDeclareMethod"), TSTypeMember)]);
    }
    exports.default = default_1;
    module.exports = exports["default"];
  })(typescript, typescript.exports);
  return typescript.exports;
}

var namedTypes = {};

var hasRequiredNamedTypes;
function requireNamedTypes() {
  if (hasRequiredNamedTypes) return namedTypes;
  hasRequiredNamedTypes = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.namedTypes = void 0;
    (function (namedTypes) {})(exports.namedTypes || (exports.namedTypes = {}));
  })(namedTypes);
  return namedTypes;
}

var hasRequiredMain;
function requireMain() {
  if (hasRequiredMain) return main;
  hasRequiredMain = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;
    var tslib_1 = require$$0;
    var fork_1 = (0, tslib_1.__importDefault)(requireFork());
    var es_proposals_1 = (0, tslib_1.__importDefault)(requireEsProposals());
    var jsx_1 = (0, tslib_1.__importDefault)(requireJsx());
    var flow_1 = (0, tslib_1.__importDefault)(requireFlow());
    var esprima_1 = (0, tslib_1.__importDefault)(requireEsprima$1());
    var babel_1 = (0, tslib_1.__importDefault)(requireBabel());
    var typescript_1 = (0, tslib_1.__importDefault)(requireTypescript());
    var namedTypes_1 = requireNamedTypes();
    Object.defineProperty(exports, "namedTypes", {
      enumerable: true,
      get: function () {
        return namedTypes_1.namedTypes;
      }
    });
    var _a = (0, fork_1.default)([
      // Feel free to add to or remove from this list of extension modules to
      // configure the precise type hierarchy that you need.
      es_proposals_1.default, jsx_1.default, flow_1.default, esprima_1.default, babel_1.default, typescript_1.default]),
      astNodesAreEquivalent = _a.astNodesAreEquivalent,
      builders = _a.builders,
      builtInTypes = _a.builtInTypes,
      defineMethod = _a.defineMethod,
      eachField = _a.eachField,
      finalize = _a.finalize,
      getBuilderName = _a.getBuilderName,
      getFieldNames = _a.getFieldNames,
      getFieldValue = _a.getFieldValue,
      getSupertypeNames = _a.getSupertypeNames,
      n = _a.namedTypes,
      NodePath = _a.NodePath,
      Path = _a.Path,
      PathVisitor = _a.PathVisitor,
      someField = _a.someField,
      Type = _a.Type,
      use = _a.use,
      visit = _a.visit;
    exports.astNodesAreEquivalent = astNodesAreEquivalent;
    exports.builders = builders;
    exports.builtInTypes = builtInTypes;
    exports.defineMethod = defineMethod;
    exports.eachField = eachField;
    exports.finalize = finalize;
    exports.getBuilderName = getBuilderName;
    exports.getFieldNames = getFieldNames;
    exports.getFieldValue = getFieldValue;
    exports.getSupertypeNames = getSupertypeNames;
    exports.NodePath = NodePath;
    exports.Path = Path;
    exports.PathVisitor = PathVisitor;
    exports.someField = someField;
    exports.Type = Type;
    exports.use = use;
    exports.visit = visit;
    // Populate the exported fields of the namedTypes namespace, while still
    // retaining its member types.
    Object.assign(namedTypes_1.namedTypes, n);
  })(main);
  return main;
}

var parser = {};

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}
function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}
function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }
  parts.push(output);
  return parts.join('');
}

function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;
var isArray$1 = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
kMaxLength();

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }
  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};
function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) ;
}
function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }
  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}
function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}
Buffer.isBuffer = isBuffer;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }
  if (a === b) return 0;
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};
Buffer.concat = function concat(list, length) {
  if (!isArray$1(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return Buffer.alloc(0);
  }
  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }
  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }
  if (end === undefined || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return '';
  }
  if (!encoding) encoding = 'utf8';
  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);
      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);
      case 'ascii':
        return asciiSlice(this, start, end);
      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);
      case 'base64':
        return base64Slice(this, start, end);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};
Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};
Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};
Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }
  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }
  return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }
  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }
  if (!encoding) encoding = 'utf8';
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);
      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);
      case 'ascii':
        return asciiWrite(this, string, offset, length);
      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }
  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }
  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }
  return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i;
  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }
  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}
function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}
function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;
        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }
    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}

// shim for using process in browser

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance$1 = global.performance || {};
performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function () {
  return new Date().getTime();
};

var inherits;
if (typeof Object.create === 'function') {
  inherits = function inherits(ctor, superCtor) {
    // implementation from standard node.js 'util' module
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits$1 = inherits;

// Copyright Joyent, Inc. and other Node contributors.

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect$1(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect$1.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect$1.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};
function stylizeWithColor(str, styleType) {
  var style = inspect$1.styles[styleType];
  if (style) {
    return '\u001b[' + inspect$1.colors[style][0] + 'm' + str + '\u001b[' + inspect$1.colors[style][1] + 'm';
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== inspect$1 &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = '',
    array = false,
    braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}
function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }
  return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === 'boolean';
}
function isNull(arg) {
  return arg === null;
}
function isNumber(arg) {
  return typeof arg === 'number';
}
function isString(arg) {
  return typeof arg === 'string';
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
function isFunction(arg) {
  return typeof arg === 'function';
}
function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' ||
  // ES6 symbol
  typeof arg === 'undefined';
}
function objectToString(o) {
  return Object.prototype.toString.call(o);
}
function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
var hasOwn = Object.prototype.hasOwnProperty;
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};
var pSlice = Array.prototype.slice;
var _functionsHaveNames;
function functionsHaveNames() {
  if (typeof _functionsHaveNames !== 'undefined') {
    return _functionsHaveNames;
  }
  return _functionsHaveNames = function () {
    return function foo() {}.name === 'foo';
  }();
}
function pToString(obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

function assert(value, message) {
  if (!value) fail(value, true, message, '==', ok);
}

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!isFunction(func)) {
    return;
  }
  if (functionsHaveNames()) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = AssertionError;
function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }
      this.stack = out;
    }
  }
}

// assert.AssertionError instanceof Error
inherits$1(AssertionError, Error);
function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames() || !isFunction(something)) {
    return inspect$1(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);
assert.equal = equal;
function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', equal);
}

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);
assert.notEqual = notEqual;
function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', notEqual);
  }
}

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);
assert.deepEqual = deepEqual;
function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', deepEqual);
  }
}
assert.deepStrictEqual = deepStrictEqual;
function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
  }
}
function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (isDate(actual) && isDate(expected)) {
    return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (isRegExp(actual) && isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {
      actual: [],
      expected: []
    };
    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }
    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}
function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}
function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false;
  // if one is a primitive, the other must be same
  if (isPrimitive(a) || isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length) return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);
assert.notDeepEqual = notDeepEqual;
function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
  }
}
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);
assert.strictEqual = strictEqual;
function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', strictEqual);
  }
}

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
assert.notStrictEqual = notStrictEqual;
function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', notStrictEqual);
  }
}
function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }
  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }
  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}
function _throws(shouldThrow, block, expected, message) {
  var actual;
  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }
  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }
  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }
  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;
  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }
  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);
assert.throws = throws;
function throws(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
}

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = doesNotThrow;
function doesNotThrow(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
}
assert.ifError = ifError;
function ifError(err) {
  if (err) throw err;
}

var assert$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: assert,
  AssertionError: AssertionError,
  fail: fail,
  ok: ok,
  assert: ok,
  equal: equal,
  notEqual: notEqual,
  deepEqual: deepEqual,
  deepStrictEqual: deepStrictEqual,
  notDeepEqual: notDeepEqual,
  notDeepStrictEqual: notDeepStrictEqual,
  strictEqual: strictEqual,
  notStrictEqual: notStrictEqual,
  throws: throws,
  doesNotThrow: doesNotThrow,
  ifError: ifError
});

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(assert$1);

var options = {};

var esprima = {};

var util = {};

var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util;
  hasRequiredUtil = 1;
  Object.defineProperty(util, "__esModule", {
    value: true
  });
  util.isTrailingCommaEnabled = util.getParentExportDeclaration = util.isExportDeclaration = util.fixFaultyLocations = util.getTrueLoc = util.composeSourceMaps = util.copyPos = util.comparePos = util.getUnionOfKeys = util.getOption = void 0;
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var types = tslib_1.__importStar(requireMain());
  var n = types.namedTypes;
  var source_map_1 = tslib_1.__importDefault(requireSourceMap());
  var SourceMapConsumer = source_map_1.default.SourceMapConsumer;
  var SourceMapGenerator = source_map_1.default.SourceMapGenerator;
  var hasOwn = Object.prototype.hasOwnProperty;
  function getOption(options, key, defaultValue) {
    if (options && hasOwn.call(options, key)) {
      return options[key];
    }
    return defaultValue;
  }
  util.getOption = getOption;
  function getUnionOfKeys() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var result = {};
    var argc = args.length;
    for (var i = 0; i < argc; ++i) {
      var keys = Object.keys(args[i]);
      var keyCount = keys.length;
      for (var j = 0; j < keyCount; ++j) {
        result[keys[j]] = true;
      }
    }
    return result;
  }
  util.getUnionOfKeys = getUnionOfKeys;
  function comparePos(pos1, pos2) {
    return pos1.line - pos2.line || pos1.column - pos2.column;
  }
  util.comparePos = comparePos;
  function copyPos(pos) {
    return {
      line: pos.line,
      column: pos.column
    };
  }
  util.copyPos = copyPos;
  function composeSourceMaps(formerMap, latterMap) {
    if (formerMap) {
      if (!latterMap) {
        return formerMap;
      }
    } else {
      return latterMap || null;
    }
    var smcFormer = new SourceMapConsumer(formerMap);
    var smcLatter = new SourceMapConsumer(latterMap);
    var smg = new SourceMapGenerator({
      file: latterMap.file,
      sourceRoot: latterMap.sourceRoot
    });
    var sourcesToContents = {};
    smcLatter.eachMapping(function (mapping) {
      var origPos = smcFormer.originalPositionFor({
        line: mapping.originalLine,
        column: mapping.originalColumn
      });
      var sourceName = origPos.source;
      if (sourceName === null) {
        return;
      }
      smg.addMapping({
        source: sourceName,
        original: copyPos(origPos),
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        },
        name: mapping.name
      });
      var sourceContent = smcFormer.sourceContentFor(sourceName);
      if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {
        sourcesToContents[sourceName] = sourceContent;
        smg.setSourceContent(sourceName, sourceContent);
      }
    });
    return smg.toJSON();
  }
  util.composeSourceMaps = composeSourceMaps;
  function getTrueLoc(node, lines) {
    // It's possible that node is newly-created (not parsed by Esprima),
    // in which case it probably won't have a .loc property (or an
    // .original property for that matter). That's fine; we'll just
    // pretty-print it as usual.
    if (!node.loc) {
      return null;
    }
    var result = {
      start: node.loc.start,
      end: node.loc.end
    };
    function include(node) {
      expandLoc(result, node.loc);
    }
    // If the node is an export declaration and its .declaration has any
    // decorators, their locations might contribute to the true start/end
    // positions of the export declaration node.
    if (node.declaration && node.declaration.decorators && isExportDeclaration(node)) {
      node.declaration.decorators.forEach(include);
    }
    if (comparePos(result.start, result.end) < 0) {
      // Trim leading whitespace.
      result.start = copyPos(result.start);
      lines.skipSpaces(result.start, false, true);
      if (comparePos(result.start, result.end) < 0) {
        // Trim trailing whitespace, if the end location is not already the
        // same as the start location.
        result.end = copyPos(result.end);
        lines.skipSpaces(result.end, true, true);
      }
    }
    // If the node has any comments, their locations might contribute to
    // the true start/end positions of the node.
    if (node.comments) {
      node.comments.forEach(include);
    }
    return result;
  }
  util.getTrueLoc = getTrueLoc;
  function expandLoc(parentLoc, childLoc) {
    if (parentLoc && childLoc) {
      if (comparePos(childLoc.start, parentLoc.start) < 0) {
        parentLoc.start = childLoc.start;
      }
      if (comparePos(parentLoc.end, childLoc.end) < 0) {
        parentLoc.end = childLoc.end;
      }
    }
  }
  function fixFaultyLocations(node, lines) {
    var loc = node.loc;
    if (loc) {
      if (loc.start.line < 1) {
        loc.start.line = 1;
      }
      if (loc.end.line < 1) {
        loc.end.line = 1;
      }
    }
    if (node.type === "File") {
      // Babylon returns File nodes whose .loc.{start,end} do not include
      // leading or trailing whitespace.
      loc.start = lines.firstPos();
      loc.end = lines.lastPos();
    }
    fixForLoopHead(node, lines);
    fixTemplateLiteral(node, lines);
    if (loc && node.decorators) {
      // Expand the .loc of the node responsible for printing the decorators
      // (here, the decorated node) so that it includes node.decorators.
      node.decorators.forEach(function (decorator) {
        expandLoc(loc, decorator.loc);
      });
    } else if (node.declaration && isExportDeclaration(node)) {
      // Nullify .loc information for the child declaration so that we never
      // try to reprint it without also reprinting the export declaration.
      node.declaration.loc = null;
      // Expand the .loc of the node responsible for printing the decorators
      // (here, the export declaration) so that it includes node.decorators.
      var decorators = node.declaration.decorators;
      if (decorators) {
        decorators.forEach(function (decorator) {
          expandLoc(loc, decorator.loc);
        });
      }
    } else if (n.MethodDefinition && n.MethodDefinition.check(node) || n.Property.check(node) && (node.method || node.shorthand)) {
      // If the node is a MethodDefinition or a .method or .shorthand
      // Property, then the location information stored in
      // node.value.loc is very likely untrustworthy (just the {body}
      // part of a method, or nothing in the case of shorthand
      // properties), so we null out that information to prevent
      // accidental reuse of bogus source code during reprinting.
      node.value.loc = null;
      if (n.FunctionExpression.check(node.value)) {
        // FunctionExpression method values should be anonymous,
        // because their .id fields are ignored anyway.
        node.value.id = null;
      }
    } else if (node.type === "ObjectTypeProperty") {
      var loc_1 = node.loc;
      var end = loc_1 && loc_1.end;
      if (end) {
        end = copyPos(end);
        if (lines.prevPos(end) && lines.charAt(end) === ",") {
          // Some parsers accidentally include trailing commas in the
          // .loc.end information for ObjectTypeProperty nodes.
          if (end = lines.skipSpaces(end, true, true)) {
            loc_1.end = end;
          }
        }
      }
    }
  }
  util.fixFaultyLocations = fixFaultyLocations;
  function fixForLoopHead(node, lines) {
    if (node.type !== "ForStatement") {
      return;
    }
    function fix(child) {
      var loc = child && child.loc;
      var start = loc && loc.start;
      var end = loc && copyPos(loc.end);
      while (start && end && comparePos(start, end) < 0) {
        lines.prevPos(end);
        if (lines.charAt(end) === ";") {
          // Update child.loc.end to *exclude* the ';' character.
          loc.end.line = end.line;
          loc.end.column = end.column;
        } else {
          break;
        }
      }
    }
    fix(node.init);
    fix(node.test);
    fix(node.update);
  }
  function fixTemplateLiteral(node, lines) {
    if (node.type !== "TemplateLiteral") {
      return;
    }
    if (node.quasis.length === 0) {
      // If there are no quasi elements, then there is nothing to fix.
      return;
    }
    // node.loc is not present when using export default with a template literal
    if (node.loc) {
      // First we need to exclude the opening ` from the .loc of the first
      // quasi element, in case the parser accidentally decided to include it.
      var afterLeftBackTickPos = copyPos(node.loc.start);
      assert_1.default.strictEqual(lines.charAt(afterLeftBackTickPos), "`");
      assert_1.default.ok(lines.nextPos(afterLeftBackTickPos));
      var firstQuasi = node.quasis[0];
      if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {
        firstQuasi.loc.start = afterLeftBackTickPos;
      }
      // Next we need to exclude the closing ` from the .loc of the last quasi
      // element, in case the parser accidentally decided to include it.
      var rightBackTickPos = copyPos(node.loc.end);
      assert_1.default.ok(lines.prevPos(rightBackTickPos));
      assert_1.default.strictEqual(lines.charAt(rightBackTickPos), "`");
      var lastQuasi = node.quasis[node.quasis.length - 1];
      if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {
        lastQuasi.loc.end = rightBackTickPos;
      }
    }
    // Now we need to exclude ${ and } characters from the .loc's of all
    // quasi elements, since some parsers accidentally include them.
    node.expressions.forEach(function (expr, i) {
      // Rewind from expr.loc.start over any whitespace and the ${ that
      // precedes the expression. The position of the $ should be the same
      // as the .loc.end of the preceding quasi element, but some parsers
      // accidentally include the ${ in the .loc of the quasi element.
      var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);
      if (lines.prevPos(dollarCurlyPos) && lines.charAt(dollarCurlyPos) === "{" && lines.prevPos(dollarCurlyPos) && lines.charAt(dollarCurlyPos) === "$") {
        var quasiBefore = node.quasis[i];
        if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {
          quasiBefore.loc.end = dollarCurlyPos;
        }
      }
      // Likewise, some parsers accidentally include the } that follows
      // the expression in the .loc of the following quasi element.
      var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);
      if (lines.charAt(rightCurlyPos) === "}") {
        assert_1.default.ok(lines.nextPos(rightCurlyPos));
        // Now rightCurlyPos is technically the position just after the }.
        var quasiAfter = node.quasis[i + 1];
        if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {
          quasiAfter.loc.start = rightCurlyPos;
        }
      }
    });
  }
  function isExportDeclaration(node) {
    if (node) switch (node.type) {
      case "ExportDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportDefaultSpecifier":
      case "DeclareExportDeclaration":
      case "ExportNamedDeclaration":
      case "ExportAllDeclaration":
        return true;
    }
    return false;
  }
  util.isExportDeclaration = isExportDeclaration;
  function getParentExportDeclaration(path) {
    var parentNode = path.getParentNode();
    if (path.getName() === "declaration" && isExportDeclaration(parentNode)) {
      return parentNode;
    }
    return null;
  }
  util.getParentExportDeclaration = getParentExportDeclaration;
  function isTrailingCommaEnabled(options, context) {
    var trailingComma = options.trailingComma;
    if (typeof trailingComma === "object") {
      return !!trailingComma[context];
    }
    return !!trailingComma;
  }
  util.isTrailingCommaEnabled = isTrailingCommaEnabled;
  return util;
}

var hasRequiredEsprima;
function requireEsprima() {
  if (hasRequiredEsprima) return esprima;
  hasRequiredEsprima = 1;
  Object.defineProperty(esprima, "__esModule", {
    value: true
  });
  esprima.parse = void 0;
  // This module is suitable for passing as options.parser when calling
  // recast.parse to process ECMAScript code with Esprima:
  //
  //   const ast = recast.parse(source, {
  //     parser: require("recast/parsers/esprima")
  //   });
  //
  var util_1 = requireUtil();
  function parse(source, options) {
    var comments = [];
    var ast = esprima$2.exports.parse(source, {
      loc: true,
      locations: true,
      comment: true,
      onComment: comments,
      range: util_1.getOption(options, "range", false),
      tolerant: util_1.getOption(options, "tolerant", true),
      tokens: true,
      jsx: util_1.getOption(options, "jsx", false),
      sourceType: util_1.getOption(options, "sourceType", "module")
    });
    if (!Array.isArray(ast.comments)) {
      ast.comments = comments;
    }
    return ast;
  }
  esprima.parse = parse;
  return esprima;
}

/*
The MIT License (MIT)

Copyright (c) 2016 CoderPuppy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
var _endianness;
function endianness() {
  if (typeof _endianness === 'undefined') {
    var a = new ArrayBuffer(2);
    var b = new Uint8Array(a);
    var c = new Uint16Array(a);
    b[0] = 1;
    b[1] = 2;
    if (c[0] === 258) {
      _endianness = 'BE';
    } else if (c[0] === 513) {
      _endianness = 'LE';
    } else {
      throw new Error('unable to figure out endianess');
    }
  }
  return _endianness;
}
function hostname() {
  if (typeof global.location !== 'undefined') {
    return global.location.hostname;
  } else return '';
}
function loadavg() {
  return [];
}
function uptime() {
  return 0;
}
function freemem() {
  return Number.MAX_VALUE;
}
function totalmem() {
  return Number.MAX_VALUE;
}
function cpus() {
  return [];
}
function type() {
  return 'Browser';
}
function release() {
  if (typeof global.navigator !== 'undefined') {
    return global.navigator.appVersion;
  }
  return '';
}
function networkInterfaces() {}
function getNetworkInterfaces() {}
function arch() {
  return 'javascript';
}
function platform() {
  return 'browser';
}
function tmpDir() {
  return '/tmp';
}
var tmpdir = tmpDir;
var EOL = '\n';
var os = {
  EOL: EOL,
  tmpdir: tmpdir,
  tmpDir: tmpDir,
  networkInterfaces: networkInterfaces,
  getNetworkInterfaces: getNetworkInterfaces,
  release: release,
  type: type,
  cpus: cpus,
  totalmem: totalmem,
  freemem: freemem,
  uptime: uptime,
  loadavg: loadavg,
  hostname: hostname,
  endianness: endianness
};

var os$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  endianness: endianness,
  hostname: hostname,
  loadavg: loadavg,
  uptime: uptime,
  freemem: freemem,
  totalmem: totalmem,
  cpus: cpus,
  type: type,
  release: release,
  networkInterfaces: networkInterfaces,
  getNetworkInterfaces: getNetworkInterfaces,
  arch: arch,
  platform: platform,
  tmpDir: tmpDir,
  tmpdir: tmpdir,
  EOL: EOL,
  default: os
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(os$1);

var hasRequiredOptions;
function requireOptions() {
  if (hasRequiredOptions) return options;
  hasRequiredOptions = 1;
  Object.defineProperty(options, "__esModule", {
    value: true
  });
  options.normalize = void 0;
  var defaults = {
    parser: requireEsprima(),
    tabWidth: 4,
    useTabs: false,
    reuseWhitespace: true,
    lineTerminator: require$$1.EOL || "\n",
    wrapColumn: 74,
    sourceFileName: null,
    sourceMapName: null,
    sourceRoot: null,
    inputSourceMap: null,
    range: false,
    tolerant: true,
    quote: null,
    trailingComma: false,
    arrayBracketSpacing: false,
    objectCurlySpacing: true,
    arrowParensAlways: false,
    flowObjectCommas: true,
    tokens: true
  };
  var hasOwn = defaults.hasOwnProperty;
  // Copy options and fill in default values.
  function normalize(opts) {
    var options = opts || defaults;
    function get(key) {
      return hasOwn.call(options, key) ? options[key] : defaults[key];
    }
    return {
      tabWidth: +get("tabWidth"),
      useTabs: !!get("useTabs"),
      reuseWhitespace: !!get("reuseWhitespace"),
      lineTerminator: get("lineTerminator"),
      wrapColumn: Math.max(get("wrapColumn"), 0),
      sourceFileName: get("sourceFileName"),
      sourceMapName: get("sourceMapName"),
      sourceRoot: get("sourceRoot"),
      inputSourceMap: get("inputSourceMap"),
      parser: get("esprima") || get("parser"),
      range: get("range"),
      tolerant: get("tolerant"),
      quote: get("quote"),
      trailingComma: get("trailingComma"),
      arrayBracketSpacing: get("arrayBracketSpacing"),
      objectCurlySpacing: get("objectCurlySpacing"),
      arrowParensAlways: get("arrowParensAlways"),
      flowObjectCommas: get("flowObjectCommas"),
      tokens: !!get("tokens")
    };
  }
  options.normalize = normalize;
  return options;
}

var lines = {};

var mapping = {};

var hasRequiredMapping;
function requireMapping() {
  if (hasRequiredMapping) return mapping;
  hasRequiredMapping = 1;
  Object.defineProperty(mapping, "__esModule", {
    value: true
  });
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var util_1 = requireUtil();
  var Mapping = /** @class */function () {
    function Mapping(sourceLines, sourceLoc, targetLoc) {
      if (targetLoc === void 0) {
        targetLoc = sourceLoc;
      }
      this.sourceLines = sourceLines;
      this.sourceLoc = sourceLoc;
      this.targetLoc = targetLoc;
    }
    Mapping.prototype.slice = function (lines, start, end) {
      if (end === void 0) {
        end = lines.lastPos();
      }
      var sourceLines = this.sourceLines;
      var sourceLoc = this.sourceLoc;
      var targetLoc = this.targetLoc;
      function skip(name) {
        var sourceFromPos = sourceLoc[name];
        var targetFromPos = targetLoc[name];
        var targetToPos = start;
        if (name === "end") {
          targetToPos = end;
        } else {
          assert_1.default.strictEqual(name, "start");
        }
        return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);
      }
      if (util_1.comparePos(start, targetLoc.start) <= 0) {
        if (util_1.comparePos(targetLoc.end, end) <= 0) {
          targetLoc = {
            start: subtractPos(targetLoc.start, start.line, start.column),
            end: subtractPos(targetLoc.end, start.line, start.column)
          };
          // The sourceLoc can stay the same because the contents of the
          // targetLoc have not changed.
        } else if (util_1.comparePos(end, targetLoc.start) <= 0) {
          return null;
        } else {
          sourceLoc = {
            start: sourceLoc.start,
            end: skip("end")
          };
          targetLoc = {
            start: subtractPos(targetLoc.start, start.line, start.column),
            end: subtractPos(end, start.line, start.column)
          };
        }
      } else {
        if (util_1.comparePos(targetLoc.end, start) <= 0) {
          return null;
        }
        if (util_1.comparePos(targetLoc.end, end) <= 0) {
          sourceLoc = {
            start: skip("start"),
            end: sourceLoc.end
          };
          targetLoc = {
            // Same as subtractPos(start, start.line, start.column):
            start: {
              line: 1,
              column: 0
            },
            end: subtractPos(targetLoc.end, start.line, start.column)
          };
        } else {
          sourceLoc = {
            start: skip("start"),
            end: skip("end")
          };
          targetLoc = {
            // Same as subtractPos(start, start.line, start.column):
            start: {
              line: 1,
              column: 0
            },
            end: subtractPos(end, start.line, start.column)
          };
        }
      }
      return new Mapping(this.sourceLines, sourceLoc, targetLoc);
    };
    Mapping.prototype.add = function (line, column) {
      return new Mapping(this.sourceLines, this.sourceLoc, {
        start: addPos(this.targetLoc.start, line, column),
        end: addPos(this.targetLoc.end, line, column)
      });
    };
    Mapping.prototype.subtract = function (line, column) {
      return new Mapping(this.sourceLines, this.sourceLoc, {
        start: subtractPos(this.targetLoc.start, line, column),
        end: subtractPos(this.targetLoc.end, line, column)
      });
    };
    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {
      if (skipFirstLine === void 0) {
        skipFirstLine = false;
      }
      if (noNegativeColumns === void 0) {
        noNegativeColumns = false;
      }
      if (by === 0) {
        return this;
      }
      var targetLoc = this.targetLoc;
      var startLine = targetLoc.start.line;
      var endLine = targetLoc.end.line;
      if (skipFirstLine && startLine === 1 && endLine === 1) {
        return this;
      }
      targetLoc = {
        start: targetLoc.start,
        end: targetLoc.end
      };
      if (!skipFirstLine || startLine > 1) {
        var startColumn = targetLoc.start.column + by;
        targetLoc.start = {
          line: startLine,
          column: noNegativeColumns ? Math.max(0, startColumn) : startColumn
        };
      }
      if (!skipFirstLine || endLine > 1) {
        var endColumn = targetLoc.end.column + by;
        targetLoc.end = {
          line: endLine,
          column: noNegativeColumns ? Math.max(0, endColumn) : endColumn
        };
      }
      return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
    };
    return Mapping;
  }();
  mapping.default = Mapping;
  function addPos(toPos, line, column) {
    return {
      line: toPos.line + line - 1,
      column: toPos.line === 1 ? toPos.column + column : toPos.column
    };
  }
  function subtractPos(fromPos, line, column) {
    return {
      line: fromPos.line - line + 1,
      column: fromPos.line === line ? fromPos.column - column : fromPos.column
    };
  }
  function skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {
    var targetComparison = util_1.comparePos(targetFromPos, targetToPos);
    if (targetComparison === 0) {
      // Trivial case: no characters to skip.
      return sourceFromPos;
    }
    var sourceCursor, targetCursor;
    if (targetComparison < 0) {
      // Skipping forward.
      sourceCursor = sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();
      targetCursor = targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();
      var lineDiff = targetToPos.line - targetCursor.line;
      sourceCursor.line += lineDiff;
      targetCursor.line += lineDiff;
      if (lineDiff > 0) {
        // If jumping to later lines, reset columns to the beginnings
        // of those lines.
        sourceCursor.column = 0;
        targetCursor.column = 0;
      } else {
        assert_1.default.strictEqual(lineDiff, 0);
      }
      while (util_1.comparePos(targetCursor, targetToPos) < 0 && targetLines.nextPos(targetCursor, true)) {
        assert_1.default.ok(sourceLines.nextPos(sourceCursor, true));
        assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
      }
    } else {
      // Skipping backward.
      sourceCursor = sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();
      targetCursor = targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();
      var lineDiff = targetToPos.line - targetCursor.line;
      sourceCursor.line += lineDiff;
      targetCursor.line += lineDiff;
      if (lineDiff < 0) {
        // If jumping to earlier lines, reset columns to the ends of
        // those lines.
        sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
        targetCursor.column = targetLines.getLineLength(targetCursor.line);
      } else {
        assert_1.default.strictEqual(lineDiff, 0);
      }
      while (util_1.comparePos(targetToPos, targetCursor) < 0 && targetLines.prevPos(targetCursor, true)) {
        assert_1.default.ok(sourceLines.prevPos(sourceCursor, true));
        assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
      }
    }
    return sourceCursor;
  }
  return mapping;
}

var hasRequiredLines;
function requireLines() {
  if (hasRequiredLines) return lines;
  hasRequiredLines = 1;
  Object.defineProperty(lines, "__esModule", {
    value: true
  });
  lines.concat = lines.fromString = lines.countSpaces = lines.Lines = void 0;
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var source_map_1 = tslib_1.__importDefault(requireSourceMap());
  var options_1 = requireOptions();
  var util_1 = requireUtil();
  var mapping_1 = tslib_1.__importDefault(requireMapping());
  var Lines = /** @class */function () {
    function Lines(infos, sourceFileName) {
      if (sourceFileName === void 0) {
        sourceFileName = null;
      }
      this.infos = infos;
      this.mappings = [];
      this.cachedSourceMap = null;
      this.cachedTabWidth = void 0;
      assert_1.default.ok(infos.length > 0);
      this.length = infos.length;
      this.name = sourceFileName || null;
      if (this.name) {
        this.mappings.push(new mapping_1.default(this, {
          start: this.firstPos(),
          end: this.lastPos()
        }));
      }
    }
    Lines.prototype.toString = function (options) {
      return this.sliceString(this.firstPos(), this.lastPos(), options);
    };
    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {
      if (!sourceMapName) {
        // Although we could make up a name or generate an anonymous
        // source map, instead we assume that any consumer who does not
        // provide a name does not actually want a source map.
        return null;
      }
      var targetLines = this;
      function updateJSON(json) {
        json = json || {};
        json.file = sourceMapName;
        if (sourceRoot) {
          json.sourceRoot = sourceRoot;
        }
        return json;
      }
      if (targetLines.cachedSourceMap) {
        // Since Lines objects are immutable, we can reuse any source map
        // that was previously generated. Nevertheless, we return a new
        // JSON object here to protect the cached source map from outside
        // modification.
        return updateJSON(targetLines.cachedSourceMap.toJSON());
      }
      var smg = new source_map_1.default.SourceMapGenerator(updateJSON());
      var sourcesToContents = {};
      targetLines.mappings.forEach(function (mapping) {
        var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) || mapping.sourceLines.lastPos();
        var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) || targetLines.lastPos();
        while (util_1.comparePos(sourceCursor, mapping.sourceLoc.end) < 0 && util_1.comparePos(targetCursor, mapping.targetLoc.end) < 0) {
          var sourceChar = mapping.sourceLines.charAt(sourceCursor);
          var targetChar = targetLines.charAt(targetCursor);
          assert_1.default.strictEqual(sourceChar, targetChar);
          var sourceName = mapping.sourceLines.name;
          // Add mappings one character at a time for maximum resolution.
          smg.addMapping({
            source: sourceName,
            original: {
              line: sourceCursor.line,
              column: sourceCursor.column
            },
            generated: {
              line: targetCursor.line,
              column: targetCursor.column
            }
          });
          if (!hasOwn.call(sourcesToContents, sourceName)) {
            var sourceContent = mapping.sourceLines.toString();
            smg.setSourceContent(sourceName, sourceContent);
            sourcesToContents[sourceName] = sourceContent;
          }
          targetLines.nextPos(targetCursor, true);
          mapping.sourceLines.nextPos(sourceCursor, true);
        }
      });
      targetLines.cachedSourceMap = smg;
      return smg.toJSON();
    };
    Lines.prototype.bootstrapCharAt = function (pos) {
      assert_1.default.strictEqual(typeof pos, "object");
      assert_1.default.strictEqual(typeof pos.line, "number");
      assert_1.default.strictEqual(typeof pos.column, "number");
      var line = pos.line,
        column = pos.column,
        strings = this.toString().split(lineTerminatorSeqExp),
        string = strings[line - 1];
      if (typeof string === "undefined") return "";
      if (column === string.length && line < strings.length) return "\n";
      if (column >= string.length) return "";
      return string.charAt(column);
    };
    Lines.prototype.charAt = function (pos) {
      assert_1.default.strictEqual(typeof pos, "object");
      assert_1.default.strictEqual(typeof pos.line, "number");
      assert_1.default.strictEqual(typeof pos.column, "number");
      var line = pos.line,
        column = pos.column,
        secret = this,
        infos = secret.infos,
        info = infos[line - 1],
        c = column;
      if (typeof info === "undefined" || c < 0) return "";
      var indent = this.getIndentAt(line);
      if (c < indent) return " ";
      c += info.sliceStart - indent;
      if (c === info.sliceEnd && line < this.length) return "\n";
      if (c >= info.sliceEnd) return "";
      return info.line.charAt(c);
    };
    Lines.prototype.stripMargin = function (width, skipFirstLine) {
      if (width === 0) return this;
      assert_1.default.ok(width > 0, "negative margin: " + width);
      if (skipFirstLine && this.length === 1) return this;
      var lines = new Lines(this.infos.map(function (info, i) {
        if (info.line && (i > 0 || !skipFirstLine)) {
          info = tslib_1.__assign(tslib_1.__assign({}, info), {
            indent: Math.max(0, info.indent - width)
          });
        }
        return info;
      }));
      if (this.mappings.length > 0) {
        var newMappings_1 = lines.mappings;
        assert_1.default.strictEqual(newMappings_1.length, 0);
        this.mappings.forEach(function (mapping) {
          newMappings_1.push(mapping.indent(width, skipFirstLine, true));
        });
      }
      return lines;
    };
    Lines.prototype.indent = function (by) {
      if (by === 0) {
        return this;
      }
      var lines = new Lines(this.infos.map(function (info) {
        if (info.line && !info.locked) {
          info = tslib_1.__assign(tslib_1.__assign({}, info), {
            indent: info.indent + by
          });
        }
        return info;
      }));
      if (this.mappings.length > 0) {
        var newMappings_2 = lines.mappings;
        assert_1.default.strictEqual(newMappings_2.length, 0);
        this.mappings.forEach(function (mapping) {
          newMappings_2.push(mapping.indent(by));
        });
      }
      return lines;
    };
    Lines.prototype.indentTail = function (by) {
      if (by === 0) {
        return this;
      }
      if (this.length < 2) {
        return this;
      }
      var lines = new Lines(this.infos.map(function (info, i) {
        if (i > 0 && info.line && !info.locked) {
          info = tslib_1.__assign(tslib_1.__assign({}, info), {
            indent: info.indent + by
          });
        }
        return info;
      }));
      if (this.mappings.length > 0) {
        var newMappings_3 = lines.mappings;
        assert_1.default.strictEqual(newMappings_3.length, 0);
        this.mappings.forEach(function (mapping) {
          newMappings_3.push(mapping.indent(by, true));
        });
      }
      return lines;
    };
    Lines.prototype.lockIndentTail = function () {
      if (this.length < 2) {
        return this;
      }
      return new Lines(this.infos.map(function (info, i) {
        return tslib_1.__assign(tslib_1.__assign({}, info), {
          locked: i > 0
        });
      }));
    };
    Lines.prototype.getIndentAt = function (line) {
      assert_1.default.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
      return Math.max(this.infos[line - 1].indent, 0);
    };
    Lines.prototype.guessTabWidth = function () {
      if (typeof this.cachedTabWidth === "number") {
        return this.cachedTabWidth;
      }
      var counts = []; // Sparse array.
      var lastIndent = 0;
      for (var line = 1, last = this.length; line <= last; ++line) {
        var info = this.infos[line - 1];
        var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
        // Whitespace-only lines don't tell us much about the likely tab
        // width of this code.
        if (isOnlyWhitespace(sliced)) {
          continue;
        }
        var diff = Math.abs(info.indent - lastIndent);
        counts[diff] = ~~counts[diff] + 1;
        lastIndent = info.indent;
      }
      var maxCount = -1;
      var result = 2;
      for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {
        if (hasOwn.call(counts, tabWidth) && counts[tabWidth] > maxCount) {
          maxCount = counts[tabWidth];
          result = tabWidth;
        }
      }
      return this.cachedTabWidth = result;
    };
    // Determine if the list of lines has a first line that starts with a //
    // or /* comment. If this is the case, the code may need to be wrapped in
    // parens to avoid ASI issues.
    Lines.prototype.startsWithComment = function () {
      if (this.infos.length === 0) {
        return false;
      }
      var firstLineInfo = this.infos[0],
        sliceStart = firstLineInfo.sliceStart,
        sliceEnd = firstLineInfo.sliceEnd,
        firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();
      return firstLine.length === 0 || firstLine.slice(0, 2) === "//" || firstLine.slice(0, 2) === "/*";
    };
    Lines.prototype.isOnlyWhitespace = function () {
      return isOnlyWhitespace(this.toString());
    };
    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {
      var info = this.infos[pos.line - 1];
      var indent = Math.max(info.indent, 0);
      var diff = pos.column - indent;
      if (diff <= 0) {
        // If pos.column does not exceed the indentation amount, then
        // there must be only whitespace before it.
        return true;
      }
      var start = info.sliceStart;
      var end = Math.min(start + diff, info.sliceEnd);
      var prefix = info.line.slice(start, end);
      return isOnlyWhitespace(prefix);
    };
    Lines.prototype.getLineLength = function (line) {
      var info = this.infos[line - 1];
      return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
    };
    Lines.prototype.nextPos = function (pos, skipSpaces) {
      if (skipSpaces === void 0) {
        skipSpaces = false;
      }
      var l = Math.max(pos.line, 0),
        c = Math.max(pos.column, 0);
      if (c < this.getLineLength(l)) {
        pos.column += 1;
        return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
      }
      if (l < this.length) {
        pos.line += 1;
        pos.column = 0;
        return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
      }
      return false;
    };
    Lines.prototype.prevPos = function (pos, skipSpaces) {
      if (skipSpaces === void 0) {
        skipSpaces = false;
      }
      var l = pos.line,
        c = pos.column;
      if (c < 1) {
        l -= 1;
        if (l < 1) return false;
        c = this.getLineLength(l);
      } else {
        c = Math.min(c - 1, this.getLineLength(l));
      }
      pos.line = l;
      pos.column = c;
      return skipSpaces ? !!this.skipSpaces(pos, true, true) : true;
    };
    Lines.prototype.firstPos = function () {
      // Trivial, but provided for completeness.
      return {
        line: 1,
        column: 0
      };
    };
    Lines.prototype.lastPos = function () {
      return {
        line: this.length,
        column: this.getLineLength(this.length)
      };
    };
    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {
      if (backward === void 0) {
        backward = false;
      }
      if (modifyInPlace === void 0) {
        modifyInPlace = false;
      }
      if (pos) {
        pos = modifyInPlace ? pos : {
          line: pos.line,
          column: pos.column
        };
      } else if (backward) {
        pos = this.lastPos();
      } else {
        pos = this.firstPos();
      }
      if (backward) {
        while (this.prevPos(pos)) {
          if (!isOnlyWhitespace(this.charAt(pos)) && this.nextPos(pos)) {
            return pos;
          }
        }
        return null;
      } else {
        while (isOnlyWhitespace(this.charAt(pos))) {
          if (!this.nextPos(pos)) {
            return null;
          }
        }
        return pos;
      }
    };
    Lines.prototype.trimLeft = function () {
      var pos = this.skipSpaces(this.firstPos(), false, true);
      return pos ? this.slice(pos) : emptyLines;
    };
    Lines.prototype.trimRight = function () {
      var pos = this.skipSpaces(this.lastPos(), true, true);
      return pos ? this.slice(this.firstPos(), pos) : emptyLines;
    };
    Lines.prototype.trim = function () {
      var start = this.skipSpaces(this.firstPos(), false, true);
      if (start === null) {
        return emptyLines;
      }
      var end = this.skipSpaces(this.lastPos(), true, true);
      if (end === null) {
        return emptyLines;
      }
      return this.slice(start, end);
    };
    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {
      if (startPos === void 0) {
        startPos = this.firstPos();
      }
      if (skipSpaces === void 0) {
        skipSpaces = false;
      }
      var pos = this.firstPos();
      if (startPos) {
        pos.line = startPos.line, pos.column = startPos.column;
      }
      if (skipSpaces && !this.skipSpaces(pos, false, true)) {
        return; // Encountered nothing but spaces.
      }

      do callback.call(this, pos); while (this.nextPos(pos, skipSpaces));
    };
    Lines.prototype.bootstrapSlice = function (start, end) {
      var strings = this.toString().split(lineTerminatorSeqExp).slice(start.line - 1, end.line);
      if (strings.length > 0) {
        strings.push(strings.pop().slice(0, end.column));
        strings[0] = strings[0].slice(start.column);
      }
      return fromString(strings.join("\n"));
    };
    Lines.prototype.slice = function (start, end) {
      if (!end) {
        if (!start) {
          // The client seems to want a copy of this Lines object, but
          // Lines objects are immutable, so it's perfectly adequate to
          // return the same object.
          return this;
        }
        // Slice to the end if no end position was provided.
        end = this.lastPos();
      }
      if (!start) {
        throw new Error("cannot slice with end but not start");
      }
      var sliced = this.infos.slice(start.line - 1, end.line);
      if (start.line === end.line) {
        sliced[0] = sliceInfo(sliced[0], start.column, end.column);
      } else {
        assert_1.default.ok(start.line < end.line);
        sliced[0] = sliceInfo(sliced[0], start.column);
        sliced.push(sliceInfo(sliced.pop(), 0, end.column));
      }
      var lines = new Lines(sliced);
      if (this.mappings.length > 0) {
        var newMappings_4 = lines.mappings;
        assert_1.default.strictEqual(newMappings_4.length, 0);
        this.mappings.forEach(function (mapping) {
          var sliced = mapping.slice(this, start, end);
          if (sliced) {
            newMappings_4.push(sliced);
          }
        }, this);
      }
      return lines;
    };
    Lines.prototype.bootstrapSliceString = function (start, end, options) {
      return this.slice(start, end).toString(options);
    };
    Lines.prototype.sliceString = function (start, end, options) {
      if (start === void 0) {
        start = this.firstPos();
      }
      if (end === void 0) {
        end = this.lastPos();
      }
      var _a = options_1.normalize(options),
        tabWidth = _a.tabWidth,
        useTabs = _a.useTabs,
        reuseWhitespace = _a.reuseWhitespace,
        lineTerminator = _a.lineTerminator;
      var parts = [];
      for (var line = start.line; line <= end.line; ++line) {
        var info = this.infos[line - 1];
        if (line === start.line) {
          if (line === end.line) {
            info = sliceInfo(info, start.column, end.column);
          } else {
            info = sliceInfo(info, start.column);
          }
        } else if (line === end.line) {
          info = sliceInfo(info, 0, end.column);
        }
        var indent = Math.max(info.indent, 0);
        var before_1 = info.line.slice(0, info.sliceStart);
        if (reuseWhitespace && isOnlyWhitespace(before_1) && countSpaces(before_1, tabWidth) === indent) {
          // Reuse original spaces if the indentation is correct.
          parts.push(info.line.slice(0, info.sliceEnd));
          continue;
        }
        var tabs = 0;
        var spaces = indent;
        if (useTabs) {
          tabs = Math.floor(indent / tabWidth);
          spaces -= tabs * tabWidth;
        }
        var result = "";
        if (tabs > 0) {
          result += new Array(tabs + 1).join("\t");
        }
        if (spaces > 0) {
          result += new Array(spaces + 1).join(" ");
        }
        result += info.line.slice(info.sliceStart, info.sliceEnd);
        parts.push(result);
      }
      return parts.join(lineTerminator);
    };
    Lines.prototype.isEmpty = function () {
      return this.length < 2 && this.getLineLength(1) < 1;
    };
    Lines.prototype.join = function (elements) {
      var separator = this;
      var infos = [];
      var mappings = [];
      var prevInfo;
      function appendLines(linesOrNull) {
        if (linesOrNull === null) {
          return;
        }
        if (prevInfo) {
          var info = linesOrNull.infos[0];
          var indent = new Array(info.indent + 1).join(" ");
          var prevLine_1 = infos.length;
          var prevColumn_1 = Math.max(prevInfo.indent, 0) + prevInfo.sliceEnd - prevInfo.sliceStart;
          prevInfo.line = prevInfo.line.slice(0, prevInfo.sliceEnd) + indent + info.line.slice(info.sliceStart, info.sliceEnd);
          // If any part of a line is indentation-locked, the whole line
          // will be indentation-locked.
          prevInfo.locked = prevInfo.locked || info.locked;
          prevInfo.sliceEnd = prevInfo.line.length;
          if (linesOrNull.mappings.length > 0) {
            linesOrNull.mappings.forEach(function (mapping) {
              mappings.push(mapping.add(prevLine_1, prevColumn_1));
            });
          }
        } else if (linesOrNull.mappings.length > 0) {
          mappings.push.apply(mappings, linesOrNull.mappings);
        }
        linesOrNull.infos.forEach(function (info, i) {
          if (!prevInfo || i > 0) {
            prevInfo = tslib_1.__assign({}, info);
            infos.push(prevInfo);
          }
        });
      }
      function appendWithSeparator(linesOrNull, i) {
        if (i > 0) appendLines(separator);
        appendLines(linesOrNull);
      }
      elements.map(function (elem) {
        var lines = fromString(elem);
        if (lines.isEmpty()) return null;
        return lines;
      }).forEach(function (linesOrNull, i) {
        if (separator.isEmpty()) {
          appendLines(linesOrNull);
        } else {
          appendWithSeparator(linesOrNull, i);
        }
      });
      if (infos.length < 1) return emptyLines;
      var lines = new Lines(infos);
      lines.mappings = mappings;
      return lines;
    };
    Lines.prototype.concat = function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var list = [this];
      list.push.apply(list, args);
      assert_1.default.strictEqual(list.length, args.length + 1);
      return emptyLines.join(list);
    };
    return Lines;
  }();
  lines.Lines = Lines;
  var fromStringCache = {};
  var hasOwn = fromStringCache.hasOwnProperty;
  var maxCacheKeyLen = 10;
  function countSpaces(spaces, tabWidth) {
    var count = 0;
    var len = spaces.length;
    for (var i = 0; i < len; ++i) {
      switch (spaces.charCodeAt(i)) {
        case 9:
          {
            // '\t'
            assert_1.default.strictEqual(typeof tabWidth, "number");
            assert_1.default.ok(tabWidth > 0);
            var next = Math.ceil(count / tabWidth) * tabWidth;
            if (next === count) {
              count += tabWidth;
            } else {
              count = next;
            }
            break;
          }
        case 11: // '\v'
        case 12: // '\f'
        case 13: // '\r'
        case 0xfeff:
          // zero-width non-breaking space
          // These characters contribute nothing to indentation.
          break;
        case 32: // ' '
        default:
          // Treat all other whitespace like ' '.
          count += 1;
          break;
      }
    }
    return count;
  }
  lines.countSpaces = countSpaces;
  var leadingSpaceExp = /^\s*/;
  // As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
  var lineTerminatorSeqExp = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
  /**
   * @param {Object} options - Options object that configures printing.
   */
  function fromString(string, options) {
    if (string instanceof Lines) return string;
    string += "";
    var tabWidth = options && options.tabWidth;
    var tabless = string.indexOf("\t") < 0;
    var cacheable = !options && tabless && string.length <= maxCacheKeyLen;
    assert_1.default.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
    if (cacheable && hasOwn.call(fromStringCache, string)) return fromStringCache[string];
    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {
      // TODO: handle null exec result
      var spaces = leadingSpaceExp.exec(line)[0];
      return {
        line: line,
        indent: countSpaces(spaces, tabWidth),
        // Boolean indicating whether this line can be reindented.
        locked: false,
        sliceStart: spaces.length,
        sliceEnd: line.length
      };
    }), options_1.normalize(options).sourceFileName);
    if (cacheable) fromStringCache[string] = lines;
    return lines;
  }
  lines.fromString = fromString;
  function isOnlyWhitespace(string) {
    return !/\S/.test(string);
  }
  function sliceInfo(info, startCol, endCol) {
    var sliceStart = info.sliceStart;
    var sliceEnd = info.sliceEnd;
    var indent = Math.max(info.indent, 0);
    var lineLength = indent + sliceEnd - sliceStart;
    if (typeof endCol === "undefined") {
      endCol = lineLength;
    }
    startCol = Math.max(startCol, 0);
    endCol = Math.min(endCol, lineLength);
    endCol = Math.max(endCol, startCol);
    if (endCol < indent) {
      indent = endCol;
      sliceEnd = sliceStart;
    } else {
      sliceEnd -= lineLength - endCol;
    }
    lineLength = endCol;
    lineLength -= startCol;
    if (startCol < indent) {
      indent -= startCol;
    } else {
      startCol -= indent;
      indent = 0;
      sliceStart += startCol;
    }
    assert_1.default.ok(indent >= 0);
    assert_1.default.ok(sliceStart <= sliceEnd);
    assert_1.default.strictEqual(lineLength, indent + sliceEnd - sliceStart);
    if (info.indent === indent && info.sliceStart === sliceStart && info.sliceEnd === sliceEnd) {
      return info;
    }
    return {
      line: info.line,
      indent: indent,
      // A destructive slice always unlocks indentation.
      locked: false,
      sliceStart: sliceStart,
      sliceEnd: sliceEnd
    };
  }
  function concat(elements) {
    return emptyLines.join(elements);
  }
  lines.concat = concat;
  // The emptyLines object needs to be created all the way down here so that
  // Lines.prototype will be fully populated.
  var emptyLines = fromString("");
  return lines;
}

var comments = {};

var hasRequiredComments;
function requireComments() {
  if (hasRequiredComments) return comments;
  hasRequiredComments = 1;
  Object.defineProperty(comments, "__esModule", {
    value: true
  });
  comments.printComments = comments.attach = void 0;
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var types = tslib_1.__importStar(requireMain());
  var n = types.namedTypes;
  var isArray = types.builtInTypes.array;
  var isObject = types.builtInTypes.object;
  var lines_1 = requireLines();
  var util_1 = requireUtil();
  var childNodesCache = new WeakMap();
  // TODO Move a non-caching implementation of this function into ast-types,
  // and implement a caching wrapper function here.
  function getSortedChildNodes(node, lines, resultArray) {
    if (!node) {
      return resultArray;
    }
    // The .loc checks below are sensitive to some of the problems that
    // are fixed by this utility function. Specifically, if it decides to
    // set node.loc to null, indicating that the node's .loc information
    // is unreliable, then we don't want to add node to the resultArray.
    util_1.fixFaultyLocations(node, lines);
    if (resultArray) {
      if (n.Node.check(node) && n.SourceLocation.check(node.loc)) {
        // This reverse insertion sort almost always takes constant
        // time because we almost always (maybe always?) append the
        // nodes in order anyway.
        var i = resultArray.length - 1;
        for (; i >= 0; --i) {
          var child = resultArray[i];
          if (child && child.loc && util_1.comparePos(child.loc.end, node.loc.start) <= 0) {
            break;
          }
        }
        resultArray.splice(i + 1, 0, node);
        return resultArray;
      }
    } else {
      var childNodes = childNodesCache.get(node);
      if (childNodes) {
        return childNodes;
      }
    }
    var names;
    if (isArray.check(node)) {
      names = Object.keys(node);
    } else if (isObject.check(node)) {
      names = types.getFieldNames(node);
    } else {
      return resultArray;
    }
    if (!resultArray) {
      childNodesCache.set(node, resultArray = []);
    }
    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
      getSortedChildNodes(node[names[i]], lines, resultArray);
    }
    return resultArray;
  }
  // As efficiently as possible, decorate the comment object with
  // .precedingNode, .enclosingNode, and/or .followingNode properties, at
  // least one of which is guaranteed to be defined.
  function decorateComment(node, comment, lines) {
    var childNodes = getSortedChildNodes(node, lines);
    // Time to dust off the old binary search robes and wizard hat.
    var left = 0;
    var right = childNodes && childNodes.length;
    var precedingNode;
    var followingNode;
    while (typeof right === "number" && left < right) {
      var middle = left + right >> 1;
      var child = childNodes[middle];
      if (util_1.comparePos(child.loc.start, comment.loc.start) <= 0 && util_1.comparePos(comment.loc.end, child.loc.end) <= 0) {
        // The comment is completely contained by this child node.
        decorateComment(comment.enclosingNode = child, comment, lines);
        return; // Abandon the binary search at this level.
      }

      if (util_1.comparePos(child.loc.end, comment.loc.start) <= 0) {
        // This child node falls completely before the comment.
        // Because we will never consider this node or any nodes
        // before it again, this node must be the closest preceding
        // node we have encountered so far.
        precedingNode = child;
        left = middle + 1;
        continue;
      }
      if (util_1.comparePos(comment.loc.end, child.loc.start) <= 0) {
        // This child node falls completely after the comment.
        // Because we will never consider this node or any nodes after
        // it again, this node must be the closest following node we
        // have encountered so far.
        followingNode = child;
        right = middle;
        continue;
      }
      throw new Error("Comment location overlaps with node location");
    }
    if (precedingNode) {
      comment.precedingNode = precedingNode;
    }
    if (followingNode) {
      comment.followingNode = followingNode;
    }
  }
  function attach(comments, ast, lines) {
    if (!isArray.check(comments)) {
      return;
    }
    var tiesToBreak = [];
    comments.forEach(function (comment) {
      comment.loc.lines = lines;
      decorateComment(ast, comment, lines);
      var pn = comment.precedingNode;
      var en = comment.enclosingNode;
      var fn = comment.followingNode;
      if (pn && fn) {
        var tieCount = tiesToBreak.length;
        if (tieCount > 0) {
          var lastTie = tiesToBreak[tieCount - 1];
          assert_1.default.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);
          if (lastTie.followingNode !== comment.followingNode) {
            breakTies(tiesToBreak, lines);
          }
        }
        tiesToBreak.push(comment);
      } else if (pn) {
        // No contest: we have a trailing comment.
        breakTies(tiesToBreak, lines);
        addTrailingComment(pn, comment);
      } else if (fn) {
        // No contest: we have a leading comment.
        breakTies(tiesToBreak, lines);
        addLeadingComment(fn, comment);
      } else if (en) {
        // The enclosing node has no child nodes at all, so what we
        // have here is a dangling comment, e.g. [/* crickets */].
        breakTies(tiesToBreak, lines);
        addDanglingComment(en, comment);
      } else {
        throw new Error("AST contains no nodes at all?");
      }
    });
    breakTies(tiesToBreak, lines);
    comments.forEach(function (comment) {
      // These node references were useful for breaking ties, but we
      // don't need them anymore, and they create cycles in the AST that
      // may lead to infinite recursion if we don't delete them here.
      delete comment.precedingNode;
      delete comment.enclosingNode;
      delete comment.followingNode;
    });
  }
  comments.attach = attach;
  function breakTies(tiesToBreak, lines) {
    var tieCount = tiesToBreak.length;
    if (tieCount === 0) {
      return;
    }
    var pn = tiesToBreak[0].precedingNode;
    var fn = tiesToBreak[0].followingNode;
    var gapEndPos = fn.loc.start;
    // Iterate backwards through tiesToBreak, examining the gaps
    // between the tied comments. In order to qualify as leading, a
    // comment must be separated from fn by an unbroken series of
    // whitespace-only gaps (or other comments).
    var indexOfFirstLeadingComment = tieCount;
    var comment;
    for (; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {
      comment = tiesToBreak[indexOfFirstLeadingComment - 1];
      assert_1.default.strictEqual(comment.precedingNode, pn);
      assert_1.default.strictEqual(comment.followingNode, fn);
      var gap = lines.sliceString(comment.loc.end, gapEndPos);
      if (/\S/.test(gap)) {
        // The gap string contained something other than whitespace.
        break;
      }
      gapEndPos = comment.loc.start;
    }
    while (indexOfFirstLeadingComment <= tieCount && (comment = tiesToBreak[indexOfFirstLeadingComment]) && (
    // If the comment is a //-style comment and indented more
    // deeply than the node itself, reconsider it as trailing.
    comment.type === "Line" || comment.type === "CommentLine") && comment.loc.start.column > fn.loc.start.column) {
      ++indexOfFirstLeadingComment;
    }
    tiesToBreak.forEach(function (comment, i) {
      if (i < indexOfFirstLeadingComment) {
        addTrailingComment(pn, comment);
      } else {
        addLeadingComment(fn, comment);
      }
    });
    tiesToBreak.length = 0;
  }
  function addCommentHelper(node, comment) {
    var comments = node.comments || (node.comments = []);
    comments.push(comment);
  }
  function addLeadingComment(node, comment) {
    comment.leading = true;
    comment.trailing = false;
    addCommentHelper(node, comment);
  }
  function addDanglingComment(node, comment) {
    comment.leading = false;
    comment.trailing = false;
    addCommentHelper(node, comment);
  }
  function addTrailingComment(node, comment) {
    comment.leading = false;
    comment.trailing = true;
    addCommentHelper(node, comment);
  }
  function printLeadingComment(commentPath, print) {
    var comment = commentPath.getValue();
    n.Comment.assert(comment);
    var loc = comment.loc;
    var lines = loc && loc.lines;
    var parts = [print(commentPath)];
    if (comment.trailing) {
      // When we print trailing comments as leading comments, we don't
      // want to bring any trailing spaces along.
      parts.push("\n");
    } else if (lines instanceof lines_1.Lines) {
      var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());
      if (trailingSpace.length === 1) {
        // If the trailing space contains no newlines, then we want to
        // preserve it exactly as we found it.
        parts.push(trailingSpace);
      } else {
        // If the trailing space contains newlines, then replace it
        // with just that many newlines, with all other spaces removed.
        parts.push(new Array(trailingSpace.length).join("\n"));
      }
    } else {
      parts.push("\n");
    }
    return lines_1.concat(parts);
  }
  function printTrailingComment(commentPath, print) {
    var comment = commentPath.getValue(commentPath);
    n.Comment.assert(comment);
    var loc = comment.loc;
    var lines = loc && loc.lines;
    var parts = [];
    if (lines instanceof lines_1.Lines) {
      var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
      var leadingSpace = lines.slice(fromPos, loc.start);
      if (leadingSpace.length === 1) {
        // If the leading space contains no newlines, then we want to
        // preserve it exactly as we found it.
        parts.push(leadingSpace);
      } else {
        // If the leading space contains newlines, then replace it
        // with just that many newlines, sans all other spaces.
        parts.push(new Array(leadingSpace.length).join("\n"));
      }
    }
    parts.push(print(commentPath));
    return lines_1.concat(parts);
  }
  function printComments(path, print) {
    var value = path.getValue();
    var innerLines = print(path);
    var comments = n.Node.check(value) && types.getFieldValue(value, "comments");
    if (!comments || comments.length === 0) {
      return innerLines;
    }
    var leadingParts = [];
    var trailingParts = [innerLines];
    path.each(function (commentPath) {
      var comment = commentPath.getValue();
      var leading = types.getFieldValue(comment, "leading");
      var trailing = types.getFieldValue(comment, "trailing");
      if (leading || trailing && !(n.Statement.check(value) || comment.type === "Block" || comment.type === "CommentBlock")) {
        leadingParts.push(printLeadingComment(commentPath, print));
      } else if (trailing) {
        trailingParts.push(printTrailingComment(commentPath, print));
      }
    }, "comments");
    leadingParts.push.apply(leadingParts, trailingParts);
    return lines_1.concat(leadingParts);
  }
  comments.printComments = printComments;
  return comments;
}

var hasRequiredParser;
function requireParser() {
  if (hasRequiredParser) return parser;
  hasRequiredParser = 1;
  Object.defineProperty(parser, "__esModule", {
    value: true
  });
  parser.parse = void 0;
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var types = tslib_1.__importStar(requireMain());
  var b = types.builders;
  var isObject = types.builtInTypes.object;
  var isArray = types.builtInTypes.array;
  var options_1 = requireOptions();
  var lines_1 = requireLines();
  var comments_1 = requireComments();
  var util = tslib_1.__importStar(requireUtil());
  function parse(source, options) {
    options = options_1.normalize(options);
    var lines = lines_1.fromString(source, options);
    var sourceWithoutTabs = lines.toString({
      tabWidth: options.tabWidth,
      reuseWhitespace: false,
      useTabs: false
    });
    var comments = [];
    var ast = options.parser.parse(sourceWithoutTabs, {
      jsx: true,
      loc: true,
      locations: true,
      range: options.range,
      comment: true,
      onComment: comments,
      tolerant: util.getOption(options, "tolerant", true),
      ecmaVersion: 6,
      sourceType: util.getOption(options, "sourceType", "module")
    });
    // Use ast.tokens if possible, and otherwise fall back to the Esprima
    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens
    // automatically, but custom parsers might need additional configuration
    // to avoid this fallback.
    var tokens = Array.isArray(ast.tokens) ? ast.tokens : esprima$2.exports.tokenize(sourceWithoutTabs, {
      loc: true
    });
    // We will reattach the tokens array to the file object below.
    delete ast.tokens;
    // Make sure every token has a token.value string.
    tokens.forEach(function (token) {
      if (typeof token.value !== "string") {
        token.value = lines.sliceString(token.loc.start, token.loc.end);
      }
    });
    if (Array.isArray(ast.comments)) {
      comments = ast.comments;
      delete ast.comments;
    }
    if (ast.loc) {
      // If the source was empty, some parsers give loc.{start,end}.line
      // values of 0, instead of the minimum of 1.
      util.fixFaultyLocations(ast, lines);
    } else {
      ast.loc = {
        start: lines.firstPos(),
        end: lines.lastPos()
      };
    }
    ast.loc.lines = lines;
    ast.loc.indent = 0;
    var file;
    var program;
    if (ast.type === "Program") {
      program = ast;
      // In order to ensure we reprint leading and trailing program
      // comments, wrap the original Program node with a File node. Only
      // ESTree parsers (Acorn and Esprima) return a Program as the root AST
      // node. Most other (Babylon-like) parsers return a File.
      file = b.file(ast, options.sourceFileName || null);
      file.loc = {
        start: lines.firstPos(),
        end: lines.lastPos(),
        lines: lines,
        indent: 0
      };
    } else if (ast.type === "File") {
      file = ast;
      program = file.program;
    }
    // Expose file.tokens unless the caller passed false for options.tokens.
    if (options.tokens) {
      file.tokens = tokens;
    }
    // Expand the Program's .loc to include all comments (not just those
    // attached to the Program node, as its children may have comments as
    // well), since sometimes program.loc.{start,end} will coincide with the
    // .loc.{start,end} of the first and last *statements*, mistakenly
    // excluding comments that fall outside that region.
    var trueProgramLoc = util.getTrueLoc({
      type: program.type,
      loc: program.loc,
      body: [],
      comments: comments
    }, lines);
    program.loc.start = trueProgramLoc.start;
    program.loc.end = trueProgramLoc.end;
    // Passing file.program here instead of just file means that initial
    // comments will be attached to program.body[0] instead of program.
    comments_1.attach(comments, program.body.length ? file.program : file, lines);
    // Return a copy of the original AST so that any changes made may be
    // compared to the original.
    return new TreeCopier(lines, tokens).copy(file);
  }
  parser.parse = parse;
  var TreeCopier = function TreeCopier(lines, tokens) {
    assert_1.default.ok(this instanceof TreeCopier);
    this.lines = lines;
    this.tokens = tokens;
    this.startTokenIndex = 0;
    this.endTokenIndex = tokens.length;
    this.indent = 0;
    this.seen = new Map();
  };
  var TCp = TreeCopier.prototype;
  TCp.copy = function (node) {
    if (this.seen.has(node)) {
      return this.seen.get(node);
    }
    if (isArray.check(node)) {
      var copy_1 = new Array(node.length);
      this.seen.set(node, copy_1);
      node.forEach(function (item, i) {
        copy_1[i] = this.copy(item);
      }, this);
      return copy_1;
    }
    if (!isObject.check(node)) {
      return node;
    }
    util.fixFaultyLocations(node, this.lines);
    var copy = Object.create(Object.getPrototypeOf(node), {
      original: {
        // Provide a link from the copy to the original.
        value: node,
        configurable: false,
        enumerable: false,
        writable: true
      }
    });
    this.seen.set(node, copy);
    var loc = node.loc;
    var oldIndent = this.indent;
    var newIndent = oldIndent;
    var oldStartTokenIndex = this.startTokenIndex;
    var oldEndTokenIndex = this.endTokenIndex;
    if (loc) {
      // When node is a comment, we set node.loc.indent to
      // node.loc.start.column so that, when/if we print the comment by
      // itself, we can strip that much whitespace from the left margin of
      // the comment. This only really matters for multiline Block comments,
      // but it doesn't hurt for Line comments.
      if (node.type === "Block" || node.type === "Line" || node.type === "CommentBlock" || node.type === "CommentLine" || this.lines.isPrecededOnlyByWhitespace(loc.start)) {
        newIndent = this.indent = loc.start.column;
      }
      // Every node.loc has a reference to the original source lines as well
      // as a complete list of source tokens.
      loc.lines = this.lines;
      loc.tokens = this.tokens;
      loc.indent = newIndent;
      // Set loc.start.token and loc.end.token such that
      // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of
      // all the tokens that make up this node.
      this.findTokenRange(loc);
    }
    var keys = Object.keys(node);
    var keyCount = keys.length;
    for (var i = 0; i < keyCount; ++i) {
      var key = keys[i];
      if (key === "loc") {
        copy[key] = node[key];
      } else if (key === "tokens" && node.type === "File") {
        // Preserve file.tokens (uncopied) in case client code cares about
        // it, even though Recast ignores it when reprinting.
        copy[key] = node[key];
      } else {
        copy[key] = this.copy(node[key]);
      }
    }
    this.indent = oldIndent;
    this.startTokenIndex = oldStartTokenIndex;
    this.endTokenIndex = oldEndTokenIndex;
    return copy;
  };
  // If we didn't have any idea where in loc.tokens to look for tokens
  // contained by this loc, a binary search would be appropriate, but
  // because we maintain this.startTokenIndex and this.endTokenIndex as we
  // traverse the AST, we only need to make small (linear) adjustments to
  // those indexes with each recursive iteration.
  TCp.findTokenRange = function (loc) {
    // In the unlikely event that loc.tokens[this.startTokenIndex] starts
    // *after* loc.start, we need to rewind this.startTokenIndex first.
    while (this.startTokenIndex > 0) {
      var token = loc.tokens[this.startTokenIndex];
      if (util.comparePos(loc.start, token.loc.start) < 0) {
        --this.startTokenIndex;
      } else break;
    }
    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends
    // *before* loc.end, we need to fast-forward this.endTokenIndex first.
    while (this.endTokenIndex < loc.tokens.length) {
      var token = loc.tokens[this.endTokenIndex];
      if (util.comparePos(token.loc.end, loc.end) < 0) {
        ++this.endTokenIndex;
      } else break;
    }
    // Increment this.startTokenIndex until we've found the first token
    // contained by this node.
    while (this.startTokenIndex < this.endTokenIndex) {
      var token = loc.tokens[this.startTokenIndex];
      if (util.comparePos(token.loc.start, loc.start) < 0) {
        ++this.startTokenIndex;
      } else break;
    }
    // Index into loc.tokens of the first token within this node.
    loc.start.token = this.startTokenIndex;
    // Decrement this.endTokenIndex until we've found the first token after
    // this node (not contained by the node).
    while (this.endTokenIndex > this.startTokenIndex) {
      var token = loc.tokens[this.endTokenIndex - 1];
      if (util.comparePos(loc.end, token.loc.end) < 0) {
        --this.endTokenIndex;
      } else break;
    }
    // Index into loc.tokens of the first token *after* this node.
    // If loc.start.token === loc.end.token, the node contains no tokens,
    // and the index is that of the next token following this node.
    loc.end.token = this.endTokenIndex;
  };
  return parser;
}

var printer = {};

var patcher = {};

var fastPath = {};

var hasRequiredFastPath;
function requireFastPath() {
  if (hasRequiredFastPath) return fastPath;
  hasRequiredFastPath = 1;
  Object.defineProperty(fastPath, "__esModule", {
    value: true
  });
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var types = tslib_1.__importStar(requireMain());
  var util = tslib_1.__importStar(requireUtil());
  var n = types.namedTypes;
  var isArray = types.builtInTypes.array;
  var isNumber = types.builtInTypes.number;
  var PRECEDENCE = {};
  [["??"], ["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]].forEach(function (tier, i) {
    tier.forEach(function (op) {
      PRECEDENCE[op] = i;
    });
  });
  var FastPath = function FastPath(value) {
    assert_1.default.ok(this instanceof FastPath);
    this.stack = [value];
  };
  var FPp = FastPath.prototype;
  // Static convenience function for coercing a value to a FastPath.
  FastPath.from = function (obj) {
    if (obj instanceof FastPath) {
      // Return a defensive copy of any existing FastPath instances.
      return obj.copy();
    }
    if (obj instanceof types.NodePath) {
      // For backwards compatibility, unroll NodePath instances into
      // lightweight FastPath [..., name, value] stacks.
      var copy = Object.create(FastPath.prototype);
      var stack = [obj.value];
      for (var pp = void 0; pp = obj.parentPath; obj = pp) stack.push(obj.name, pp.value);
      copy.stack = stack.reverse();
      return copy;
    }
    // Otherwise use obj as the value of the new FastPath instance.
    return new FastPath(obj);
  };
  FPp.copy = function copy() {
    var copy = Object.create(FastPath.prototype);
    copy.stack = this.stack.slice(0);
    return copy;
  };
  // The name of the current property is always the penultimate element of
  // this.stack, and always a String.
  FPp.getName = function getName() {
    var s = this.stack;
    var len = s.length;
    if (len > 1) {
      return s[len - 2];
    }
    // Since the name is always a string, null is a safe sentinel value to
    // return if we do not know the name of the (root) value.
    return null;
  };
  // The value of the current property is always the final element of
  // this.stack.
  FPp.getValue = function getValue() {
    var s = this.stack;
    return s[s.length - 1];
  };
  FPp.valueIsDuplicate = function () {
    var s = this.stack;
    var valueIndex = s.length - 1;
    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;
  };
  function getNodeHelper(path, count) {
    var s = path.stack;
    for (var i = s.length - 1; i >= 0; i -= 2) {
      var value = s[i];
      if (n.Node.check(value) && --count < 0) {
        return value;
      }
    }
    return null;
  }
  FPp.getNode = function getNode(count) {
    if (count === void 0) {
      count = 0;
    }
    return getNodeHelper(this, ~~count);
  };
  FPp.getParentNode = function getParentNode(count) {
    if (count === void 0) {
      count = 0;
    }
    return getNodeHelper(this, ~~count + 1);
  };
  // The length of the stack can be either even or odd, depending on whether
  // or not we have a name for the root value. The difference between the
  // index of the root value and the index of the final value is always
  // even, though, which allows us to return the root value in constant time
  // (i.e. without iterating backwards through the stack).
  FPp.getRootValue = function getRootValue() {
    var s = this.stack;
    if (s.length % 2 === 0) {
      return s[1];
    }
    return s[0];
  };
  // Temporarily push properties named by string arguments given after the
  // callback function onto this.stack, then call the callback with a
  // reference to this (modified) FastPath object. Note that the stack will
  // be restored to its original state after the callback is finished, so it
  // is probably a mistake to retain a reference to the path.
  FPp.call = function call(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
      var name = arguments[i];
      value = value[name];
      s.push(name, value);
    }
    var result = callback(this);
    s.length = origLen;
    return result;
  };
  // Similar to FastPath.prototype.call, except that the value obtained by
  // accessing this.getValue()[name1][name2]... should be array-like. The
  // callback will be called with a reference to this path object for each
  // element of the array.
  FPp.each = function each(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
      var name = arguments[i];
      value = value[name];
      s.push(name, value);
    }
    for (var i = 0; i < value.length; ++i) {
      if (i in value) {
        s.push(i, value[i]);
        // If the callback needs to know the value of i, call
        // path.getName(), assuming path is the parameter name.
        callback(this);
        s.length -= 2;
      }
    }
    s.length = origLen;
  };
  // Similar to FastPath.prototype.each, except that the results of the
  // callback function invocations are stored in an array and returned at
  // the end of the iteration.
  FPp.map = function map(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
      var name = arguments[i];
      value = value[name];
      s.push(name, value);
    }
    var result = new Array(value.length);
    for (var i = 0; i < value.length; ++i) {
      if (i in value) {
        s.push(i, value[i]);
        result[i] = callback(this, i);
        s.length -= 2;
      }
    }
    s.length = origLen;
    return result;
  };
  // Returns true if the node at the tip of the path is wrapped with
  // parentheses, OR if the only reason the node needed parentheses was that
  // it couldn't be the first expression in the enclosing statement (see
  // FastPath#canBeFirstInStatement), and it has an opening `(` character.
  // For example, the FunctionExpression in `(function(){}())` appears to
  // need parentheses only because it's the first expression in the AST, but
  // since it happens to be preceded by a `(` (which is not apparent from
  // the AST but can be determined using FastPath#getPrevToken), there is no
  // ambiguity about how to parse it, so it counts as having parentheses,
  // even though it is not immediately followed by a `)`.
  FPp.hasParens = function () {
    var node = this.getNode();
    var prevToken = this.getPrevToken(node);
    if (!prevToken) {
      return false;
    }
    var nextToken = this.getNextToken(node);
    if (!nextToken) {
      return false;
    }
    if (prevToken.value === "(") {
      if (nextToken.value === ")") {
        // If the node preceded by a `(` token and followed by a `)` token,
        // then of course it has parentheses.
        return true;
      }
      // If this is one of the few Expression types that can't come first in
      // the enclosing statement because of parsing ambiguities (namely,
      // FunctionExpression, ObjectExpression, and ClassExpression) and
      // this.firstInStatement() returns true, and the node would not need
      // parentheses in an expression context because this.needsParens(true)
      // returns false, then it just needs an opening parenthesis to resolve
      // the parsing ambiguity that made it appear to need parentheses.
      var justNeedsOpeningParen = !this.canBeFirstInStatement() && this.firstInStatement() && !this.needsParens(true);
      if (justNeedsOpeningParen) {
        return true;
      }
    }
    return false;
  };
  FPp.getPrevToken = function (node) {
    node = node || this.getNode();
    var loc = node && node.loc;
    var tokens = loc && loc.tokens;
    if (tokens && loc.start.token > 0) {
      var token = tokens[loc.start.token - 1];
      if (token) {
        // Do not return tokens that fall outside the root subtree.
        var rootLoc = this.getRootValue().loc;
        if (util.comparePos(rootLoc.start, token.loc.start) <= 0) {
          return token;
        }
      }
    }
    return null;
  };
  FPp.getNextToken = function (node) {
    node = node || this.getNode();
    var loc = node && node.loc;
    var tokens = loc && loc.tokens;
    if (tokens && loc.end.token < tokens.length) {
      var token = tokens[loc.end.token];
      if (token) {
        // Do not return tokens that fall outside the root subtree.
        var rootLoc = this.getRootValue().loc;
        if (util.comparePos(token.loc.end, rootLoc.end) <= 0) {
          return token;
        }
      }
    }
    return null;
  };
  // Inspired by require("ast-types").NodePath.prototype.needsParens, but
  // more efficient because we're iterating backwards through a stack.
  FPp.needsParens = function (assumeExpressionContext) {
    var node = this.getNode();
    // This needs to come before `if (!parent) { return false }` because
    // an object destructuring assignment requires parens for
    // correctness even when it's the topmost expression.
    if (node.type === "AssignmentExpression" && node.left.type === "ObjectPattern") {
      return true;
    }
    var parent = this.getParentNode();
    var name = this.getName();
    // If the value of this path is some child of a Node and not a Node
    // itself, then it doesn't need parentheses. Only Node objects (in fact,
    // only Expression nodes) need parentheses.
    if (this.getValue() !== node) {
      return false;
    }
    // Only statements don't need parentheses.
    if (n.Statement.check(node)) {
      return false;
    }
    // Identifiers never need parentheses.
    if (node.type === "Identifier") {
      return false;
    }
    if (parent && parent.type === "ParenthesizedExpression") {
      return false;
    }
    if (node.extra && node.extra.parenthesized) {
      return true;
    }
    if (!parent) return false;
    switch (node.type) {
      case "UnaryExpression":
      case "SpreadElement":
      case "SpreadProperty":
        return parent.type === "MemberExpression" && name === "object" && parent.object === node;
      case "BinaryExpression":
      case "LogicalExpression":
        switch (parent.type) {
          case "CallExpression":
            return name === "callee" && parent.callee === node;
          case "UnaryExpression":
          case "SpreadElement":
          case "SpreadProperty":
            return true;
          case "MemberExpression":
            return name === "object" && parent.object === node;
          case "BinaryExpression":
          case "LogicalExpression":
            {
              var po = parent.operator;
              var pp = PRECEDENCE[po];
              var no = node.operator;
              var np = PRECEDENCE[no];
              if (pp > np) {
                return true;
              }
              if (pp === np && name === "right") {
                assert_1.default.strictEqual(parent.right, node);
                return true;
              }
              break;
            }
          default:
            return false;
        }
        break;
      case "SequenceExpression":
        switch (parent.type) {
          case "ReturnStatement":
            return false;
          case "ForStatement":
            // Although parentheses wouldn't hurt around sequence expressions in
            // the head of for loops, traditional style dictates that e.g. i++,
            // j++ should not be wrapped with parentheses.
            return false;
          case "ExpressionStatement":
            return name !== "expression";
          default:
            // Otherwise err on the side of overparenthesization, adding
            // explicit exceptions above if this proves overzealous.
            return true;
        }
      case "OptionalIndexedAccessType":
        return node.optional && parent.type === "IndexedAccessType";
      case "IntersectionTypeAnnotation":
      case "UnionTypeAnnotation":
        return parent.type === "NullableTypeAnnotation";
      case "Literal":
        return parent.type === "MemberExpression" && isNumber.check(node.value) && name === "object" && parent.object === node;
      // Babel 6 Literal split
      case "NumericLiteral":
        return parent.type === "MemberExpression" && name === "object" && parent.object === node;
      case "YieldExpression":
      case "AwaitExpression":
      case "AssignmentExpression":
      case "ConditionalExpression":
        switch (parent.type) {
          case "UnaryExpression":
          case "SpreadElement":
          case "SpreadProperty":
          case "BinaryExpression":
          case "LogicalExpression":
            return true;
          case "CallExpression":
          case "NewExpression":
            return name === "callee" && parent.callee === node;
          case "ConditionalExpression":
            return name === "test" && parent.test === node;
          case "MemberExpression":
            return name === "object" && parent.object === node;
          default:
            return false;
        }
      case "ArrowFunctionExpression":
        if (n.CallExpression.check(parent) && name === "callee" && parent.callee === node) {
          return true;
        }
        if (n.MemberExpression.check(parent) && name === "object" && parent.object === node) {
          return true;
        }
        if (n.TSAsExpression && n.TSAsExpression.check(parent) && name === "expression" && parent.expression === node) {
          return true;
        }
        return isBinary(parent);
      case "ObjectExpression":
        if (parent.type === "ArrowFunctionExpression" && name === "body" && parent.body === node) {
          return true;
        }
        break;
      case "TSAsExpression":
        if (parent.type === "ArrowFunctionExpression" && name === "body" && parent.body === node && node.expression.type === "ObjectExpression") {
          return true;
        }
        break;
      case "CallExpression":
        if (name === "declaration" && n.ExportDefaultDeclaration.check(parent) && n.FunctionExpression.check(node.callee)) {
          return true;
        }
    }
    if (parent.type === "NewExpression" && name === "callee" && parent.callee === node) {
      return containsCallExpression(node);
    }
    if (assumeExpressionContext !== true && !this.canBeFirstInStatement() && this.firstInStatement()) {
      return true;
    }
    return false;
  };
  function isBinary(node) {
    return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);
  }
  function containsCallExpression(node) {
    if (n.CallExpression.check(node)) {
      return true;
    }
    if (isArray.check(node)) {
      return node.some(containsCallExpression);
    }
    if (n.Node.check(node)) {
      return types.someField(node, function (_name, child) {
        return containsCallExpression(child);
      });
    }
    return false;
  }
  FPp.canBeFirstInStatement = function () {
    var node = this.getNode();
    if (n.FunctionExpression.check(node)) {
      return false;
    }
    if (n.ObjectExpression.check(node)) {
      return false;
    }
    if (n.ClassExpression.check(node)) {
      return false;
    }
    return true;
  };
  FPp.firstInStatement = function () {
    var s = this.stack;
    var parentName, parent;
    var childName, child;
    for (var i = s.length - 1; i >= 0; i -= 2) {
      if (n.Node.check(s[i])) {
        childName = parentName;
        child = parent;
        parentName = s[i - 1];
        parent = s[i];
      }
      if (!parent || !child) {
        continue;
      }
      if (n.BlockStatement.check(parent) && parentName === "body" && childName === 0) {
        assert_1.default.strictEqual(parent.body[0], child);
        return true;
      }
      if (n.ExpressionStatement.check(parent) && childName === "expression") {
        assert_1.default.strictEqual(parent.expression, child);
        return true;
      }
      if (n.AssignmentExpression.check(parent) && childName === "left") {
        assert_1.default.strictEqual(parent.left, child);
        return true;
      }
      if (n.ArrowFunctionExpression.check(parent) && childName === "body") {
        assert_1.default.strictEqual(parent.body, child);
        return true;
      }
      // s[i + 1] and s[i + 2] represent the array between the parent
      // SequenceExpression node and its child nodes
      if (n.SequenceExpression.check(parent) && s[i + 1] === "expressions" && childName === 0) {
        assert_1.default.strictEqual(parent.expressions[0], child);
        continue;
      }
      if (n.CallExpression.check(parent) && childName === "callee") {
        assert_1.default.strictEqual(parent.callee, child);
        continue;
      }
      if (n.MemberExpression.check(parent) && childName === "object") {
        assert_1.default.strictEqual(parent.object, child);
        continue;
      }
      if (n.ConditionalExpression.check(parent) && childName === "test") {
        assert_1.default.strictEqual(parent.test, child);
        continue;
      }
      if (isBinary(parent) && childName === "left") {
        assert_1.default.strictEqual(parent.left, child);
        continue;
      }
      if (n.UnaryExpression.check(parent) && !parent.prefix && childName === "argument") {
        assert_1.default.strictEqual(parent.argument, child);
        continue;
      }
      return false;
    }
    return true;
  };
  fastPath.default = FastPath;
  return fastPath;
}

var hasRequiredPatcher;
function requirePatcher() {
  if (hasRequiredPatcher) return patcher;
  hasRequiredPatcher = 1;
  Object.defineProperty(patcher, "__esModule", {
    value: true
  });
  patcher.getReprinter = patcher.Patcher = void 0;
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var linesModule = tslib_1.__importStar(requireLines());
  var types = tslib_1.__importStar(requireMain());
  var Printable = types.namedTypes.Printable;
  var Expression = types.namedTypes.Expression;
  var ReturnStatement = types.namedTypes.ReturnStatement;
  var SourceLocation = types.namedTypes.SourceLocation;
  var util_1 = requireUtil();
  var fast_path_1 = tslib_1.__importDefault(requireFastPath());
  var isObject = types.builtInTypes.object;
  var isArray = types.builtInTypes.array;
  var isString = types.builtInTypes.string;
  var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
  var Patcher = function Patcher(lines) {
    assert_1.default.ok(this instanceof Patcher);
    assert_1.default.ok(lines instanceof linesModule.Lines);
    var self = this,
      replacements = [];
    self.replace = function (loc, lines) {
      if (isString.check(lines)) lines = linesModule.fromString(lines);
      replacements.push({
        lines: lines,
        start: loc.start,
        end: loc.end
      });
    };
    self.get = function (loc) {
      // If no location is provided, return the complete Lines object.
      loc = loc || {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: lines.length,
          column: lines.getLineLength(lines.length)
        }
      };
      var sliceFrom = loc.start,
        toConcat = [];
      function pushSlice(from, to) {
        assert_1.default.ok(util_1.comparePos(from, to) <= 0);
        toConcat.push(lines.slice(from, to));
      }
      replacements.sort(function (a, b) {
        return util_1.comparePos(a.start, b.start);
      }).forEach(function (rep) {
        if (util_1.comparePos(sliceFrom, rep.start) > 0) ; else {
          pushSlice(sliceFrom, rep.start);
          toConcat.push(rep.lines);
          sliceFrom = rep.end;
        }
      });
      pushSlice(sliceFrom, loc.end);
      return linesModule.concat(toConcat);
    };
  };
  patcher.Patcher = Patcher;
  var Pp = Patcher.prototype;
  Pp.tryToReprintComments = function (newNode, oldNode, print) {
    var patcher = this;
    if (!newNode.comments && !oldNode.comments) {
      // We were (vacuously) able to reprint all the comments!
      return true;
    }
    var newPath = fast_path_1.default.from(newNode);
    var oldPath = fast_path_1.default.from(oldNode);
    newPath.stack.push("comments", getSurroundingComments(newNode));
    oldPath.stack.push("comments", getSurroundingComments(oldNode));
    var reprints = [];
    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);
    // No need to pop anything from newPath.stack or oldPath.stack, since
    // newPath and oldPath are fresh local variables.
    if (ableToReprintComments && reprints.length > 0) {
      reprints.forEach(function (reprint) {
        var oldComment = reprint.oldPath.getValue();
        assert_1.default.ok(oldComment.leading || oldComment.trailing);
        patcher.replace(oldComment.loc,
        // Comments can't have .comments, so it doesn't matter whether we
        // print with comments or without.
        print(reprint.newPath).indentTail(oldComment.loc.indent));
      });
    }
    return ableToReprintComments;
  };
  // Get all comments that are either leading or trailing, ignoring any
  // comments that occur inside node.loc. Returns an empty array for nodes
  // with no leading or trailing comments.
  function getSurroundingComments(node) {
    var result = [];
    if (node.comments && node.comments.length > 0) {
      node.comments.forEach(function (comment) {
        if (comment.leading || comment.trailing) {
          result.push(comment);
        }
      });
    }
    return result;
  }
  Pp.deleteComments = function (node) {
    if (!node.comments) {
      return;
    }
    var patcher = this;
    node.comments.forEach(function (comment) {
      if (comment.leading) {
        // Delete leading comments along with any trailing whitespace they
        // might have.
        patcher.replace({
          start: comment.loc.start,
          end: node.loc.lines.skipSpaces(comment.loc.end, false, false)
        }, "");
      } else if (comment.trailing) {
        // Delete trailing comments along with any leading whitespace they
        // might have.
        patcher.replace({
          start: node.loc.lines.skipSpaces(comment.loc.start, true, false),
          end: comment.loc.end
        }, "");
      }
    });
  };
  function getReprinter(path) {
    assert_1.default.ok(path instanceof fast_path_1.default);
    // Make sure that this path refers specifically to a Node, rather than
    // some non-Node subproperty of a Node.
    var node = path.getValue();
    if (!Printable.check(node)) return;
    var orig = node.original;
    var origLoc = orig && orig.loc;
    var lines = origLoc && origLoc.lines;
    var reprints = [];
    if (!lines || !findReprints(path, reprints)) return;
    return function (print) {
      var patcher = new Patcher(lines);
      reprints.forEach(function (reprint) {
        var newNode = reprint.newPath.getValue();
        var oldNode = reprint.oldPath.getValue();
        SourceLocation.assert(oldNode.loc, true);
        var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);
        if (needToPrintNewPathWithComments) {
          // Since we were not able to preserve all leading/trailing
          // comments, we delete oldNode's comments, print newPath with
          // comments, and then patch the resulting lines where oldNode used
          // to be.
          patcher.deleteComments(oldNode);
        }
        var newLines = print(reprint.newPath, {
          includeComments: needToPrintNewPathWithComments,
          // If the oldNode we're replacing already had parentheses, we may
          // not need to print the new node with any extra parentheses,
          // because the existing parentheses will suffice. However, if the
          // newNode has a different type than the oldNode, let the printer
          // decide if reprint.newPath needs parentheses, as usual.
          avoidRootParens: oldNode.type === newNode.type && reprint.oldPath.hasParens()
        }).indentTail(oldNode.loc.indent);
        var nls = needsLeadingSpace(lines, oldNode.loc, newLines);
        var nts = needsTrailingSpace(lines, oldNode.loc, newLines);
        // If we try to replace the argument of a ReturnStatement like
        // return"asdf" with e.g. a literal null expression, we run the risk
        // of ending up with returnnull, so we need to add an extra leading
        // space in situations where that might happen. Likewise for
        // "asdf"in obj. See #170.
        if (nls || nts) {
          var newParts = [];
          nls && newParts.push(" ");
          newParts.push(newLines);
          nts && newParts.push(" ");
          newLines = linesModule.concat(newParts);
        }
        patcher.replace(oldNode.loc, newLines);
      });
      // Recall that origLoc is the .loc of an ancestor node that is
      // guaranteed to contain all the reprinted nodes and comments.
      var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);
      if (path.needsParens()) {
        return linesModule.concat(["(", patchedLines, ")"]);
      }
      return patchedLines;
    };
  }
  patcher.getReprinter = getReprinter;
  // If the last character before oldLoc and the first character of newLines
  // are both identifier characters, they must be separated by a space,
  // otherwise they will most likely get fused together into a single token.
  function needsLeadingSpace(oldLines, oldLoc, newLines) {
    var posBeforeOldLoc = util_1.copyPos(oldLoc.start);
    // The character just before the location occupied by oldNode.
    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) && oldLines.charAt(posBeforeOldLoc);
    // First character of the reprinted node.
    var newFirstChar = newLines.charAt(newLines.firstPos());
    return charBeforeOldLoc && riskyAdjoiningCharExp.test(charBeforeOldLoc) && newFirstChar && riskyAdjoiningCharExp.test(newFirstChar);
  }
  // If the last character of newLines and the first character after oldLoc
  // are both identifier characters, they must be separated by a space,
  // otherwise they will most likely get fused together into a single token.
  function needsTrailingSpace(oldLines, oldLoc, newLines) {
    // The character just after the location occupied by oldNode.
    var charAfterOldLoc = oldLines.charAt(oldLoc.end);
    var newLastPos = newLines.lastPos();
    // Last character of the reprinted node.
    var newLastChar = newLines.prevPos(newLastPos) && newLines.charAt(newLastPos);
    return newLastChar && riskyAdjoiningCharExp.test(newLastChar) && charAfterOldLoc && riskyAdjoiningCharExp.test(charAfterOldLoc);
  }
  function findReprints(newPath, reprints) {
    var newNode = newPath.getValue();
    Printable.assert(newNode);
    var oldNode = newNode.original;
    Printable.assert(oldNode);
    assert_1.default.deepEqual(reprints, []);
    if (newNode.type !== oldNode.type) {
      return false;
    }
    var oldPath = new fast_path_1.default(oldNode);
    var canReprint = findChildReprints(newPath, oldPath, reprints);
    if (!canReprint) {
      // Make absolutely sure the calling code does not attempt to reprint
      // any nodes.
      reprints.length = 0;
    }
    return canReprint;
  }
  function findAnyReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    if (newNode === oldNode) return true;
    if (isArray.check(newNode)) return findArrayReprints(newPath, oldPath, reprints);
    if (isObject.check(newNode)) return findObjectReprints(newPath, oldPath, reprints);
    return false;
  }
  function findArrayReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    if (newNode === oldNode || newPath.valueIsDuplicate() || oldPath.valueIsDuplicate()) {
      return true;
    }
    isArray.assert(newNode);
    var len = newNode.length;
    if (!(isArray.check(oldNode) && oldNode.length === len)) return false;
    for (var i = 0; i < len; ++i) {
      newPath.stack.push(i, newNode[i]);
      oldPath.stack.push(i, oldNode[i]);
      var canReprint = findAnyReprints(newPath, oldPath, reprints);
      newPath.stack.length -= 2;
      oldPath.stack.length -= 2;
      if (!canReprint) {
        return false;
      }
    }
    return true;
  }
  function findObjectReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    isObject.assert(newNode);
    if (newNode.original === null) {
      // If newNode.original node was set to null, reprint the node.
      return false;
    }
    var oldNode = oldPath.getValue();
    if (!isObject.check(oldNode)) return false;
    if (newNode === oldNode || newPath.valueIsDuplicate() || oldPath.valueIsDuplicate()) {
      return true;
    }
    if (Printable.check(newNode)) {
      if (!Printable.check(oldNode)) {
        return false;
      }
      var newParentNode = newPath.getParentNode();
      var oldParentNode = oldPath.getParentNode();
      if (oldParentNode !== null && oldParentNode.type === "FunctionTypeAnnotation" && newParentNode !== null && newParentNode.type === "FunctionTypeAnnotation") {
        var oldNeedsParens = oldParentNode.params.length !== 1 || !!oldParentNode.params[0].name;
        var newNeedParens = newParentNode.params.length !== 1 || !!newParentNode.params[0].name;
        if (!oldNeedsParens && newNeedParens) {
          return false;
        }
      }
      // Here we need to decide whether the reprinted code for newNode is
      // appropriate for patching into the location of oldNode.
      if (newNode.type === oldNode.type) {
        var childReprints = [];
        if (findChildReprints(newPath, oldPath, childReprints)) {
          reprints.push.apply(reprints, childReprints);
        } else if (oldNode.loc) {
          // If we have no .loc information for oldNode, then we won't be
          // able to reprint it.
          reprints.push({
            oldPath: oldPath.copy(),
            newPath: newPath.copy()
          });
        } else {
          return false;
        }
        return true;
      }
      if (Expression.check(newNode) && Expression.check(oldNode) &&
      // If we have no .loc information for oldNode, then we won't be
      // able to reprint it.
      oldNode.loc) {
        // If both nodes are subtypes of Expression, then we should be able
        // to fill the location occupied by the old node with code printed
        // for the new node with no ill consequences.
        reprints.push({
          oldPath: oldPath.copy(),
          newPath: newPath.copy()
        });
        return true;
      }
      // The nodes have different types, and at least one of the types is
      // not a subtype of the Expression type, so we cannot safely assume
      // the nodes are syntactically interchangeable.
      return false;
    }
    return findChildReprints(newPath, oldPath, reprints);
  }
  function findChildReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    isObject.assert(newNode);
    isObject.assert(oldNode);
    if (newNode.original === null) {
      // If newNode.original node was set to null, reprint the node.
      return false;
    }
    // If this node needs parentheses and will not be wrapped with
    // parentheses when reprinted, then return false to skip reprinting and
    // let it be printed generically.
    if (newPath.needsParens() && !oldPath.hasParens()) {
      return false;
    }
    var keys = util_1.getUnionOfKeys(oldNode, newNode);
    if (oldNode.type === "File" || newNode.type === "File") {
      // Don't bother traversing file.tokens, an often very large array
      // returned by Babylon, and useless for our purposes.
      delete keys.tokens;
    }
    // Don't bother traversing .loc objects looking for reprintable nodes.
    delete keys.loc;
    var originalReprintCount = reprints.length;
    for (var k in keys) {
      if (k.charAt(0) === "_") {
        // Ignore "private" AST properties added by e.g. Babel plugins and
        // parsers like Babylon.
        continue;
      }
      newPath.stack.push(k, types.getFieldValue(newNode, k));
      oldPath.stack.push(k, types.getFieldValue(oldNode, k));
      var canReprint = findAnyReprints(newPath, oldPath, reprints);
      newPath.stack.length -= 2;
      oldPath.stack.length -= 2;
      if (!canReprint) {
        return false;
      }
    }
    // Return statements might end up running into ASI issues due to
    // comments inserted deep within the tree, so reprint them if anything
    // changed within them.
    if (ReturnStatement.check(newPath.getNode()) && reprints.length > originalReprintCount) {
      return false;
    }
    return true;
  }
  return patcher;
}

var hasRequiredPrinter;
function requirePrinter() {
  if (hasRequiredPrinter) return printer;
  hasRequiredPrinter = 1;
  Object.defineProperty(printer, "__esModule", {
    value: true
  });
  printer.Printer = void 0;
  var tslib_1 = require$$0;
  var assert_1 = tslib_1.__importDefault(require$$1$1);
  var comments_1 = requireComments();
  var lines_1 = requireLines();
  var options_1 = requireOptions();
  var patcher_1 = requirePatcher();
  var types = tslib_1.__importStar(requireMain());
  var namedTypes = types.namedTypes;
  var isString = types.builtInTypes.string;
  var isObject = types.builtInTypes.object;
  var fast_path_1 = tslib_1.__importDefault(requireFastPath());
  var util = tslib_1.__importStar(requireUtil());
  var PrintResult = function PrintResult(code, sourceMap) {
    assert_1.default.ok(this instanceof PrintResult);
    isString.assert(code);
    this.code = code;
    if (sourceMap) {
      isObject.assert(sourceMap);
      this.map = sourceMap;
    }
  };
  var PRp = PrintResult.prototype;
  var warnedAboutToString = false;
  PRp.toString = function () {
    if (!warnedAboutToString) {
      console.warn("Deprecation warning: recast.print now returns an object with " + "a .code property. You appear to be treating the object as a " + "string, which might still work but is strongly discouraged.");
      warnedAboutToString = true;
    }
    return this.code;
  };
  var emptyPrintResult = new PrintResult("");
  var Printer = function Printer(config) {
    assert_1.default.ok(this instanceof Printer);
    var explicitTabWidth = config && config.tabWidth;
    config = options_1.normalize(config);
    // It's common for client code to pass the same options into both
    // recast.parse and recast.print, but the Printer doesn't need (and
    // can be confused by) config.sourceFileName, so we null it out.
    config.sourceFileName = null;
    // Non-destructively modifies options with overrides, and returns a
    // new print function that uses the modified options.
    function makePrintFunctionWith(options, overrides) {
      options = Object.assign({}, options, overrides);
      return function (path) {
        return print(path, options);
      };
    }
    function print(path, options) {
      assert_1.default.ok(path instanceof fast_path_1.default);
      options = options || {};
      if (options.includeComments) {
        return comments_1.printComments(path, makePrintFunctionWith(options, {
          includeComments: false
        }));
      }
      var oldTabWidth = config.tabWidth;
      if (!explicitTabWidth) {
        var loc = path.getNode().loc;
        if (loc && loc.lines && loc.lines.guessTabWidth) {
          config.tabWidth = loc.lines.guessTabWidth();
        }
      }
      var reprinter = patcher_1.getReprinter(path);
      var lines = reprinter ?
      // Since the print function that we pass to the reprinter will
      // be used to print "new" nodes, it's tempting to think we
      // should pass printRootGenerically instead of print, to avoid
      // calling maybeReprint again, but that would be a mistake
      // because the new nodes might not be entirely new, but merely
      // moved from elsewhere in the AST. The print function is the
      // right choice because it gives us the opportunity to reprint
      // such nodes using their original source.
      reprinter(print) : genericPrint(path, config, options, makePrintFunctionWith(options, {
        includeComments: true,
        avoidRootParens: false
      }));
      config.tabWidth = oldTabWidth;
      return lines;
    }
    this.print = function (ast) {
      if (!ast) {
        return emptyPrintResult;
      }
      var lines = print(fast_path_1.default.from(ast), {
        includeComments: true,
        avoidRootParens: false
      });
      return new PrintResult(lines.toString(config), util.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));
    };
    this.printGenerically = function (ast) {
      if (!ast) {
        return emptyPrintResult;
      }
      // Print the entire AST generically.
      function printGenerically(path) {
        return comments_1.printComments(path, function (path) {
          return genericPrint(path, config, {
            includeComments: true,
            avoidRootParens: false
          }, printGenerically);
        });
      }
      var path = fast_path_1.default.from(ast);
      var oldReuseWhitespace = config.reuseWhitespace;
      // Do not reuse whitespace (or anything else, for that matter)
      // when printing generically.
      config.reuseWhitespace = false;
      // TODO Allow printing of comments?
      var pr = new PrintResult(printGenerically(path).toString(config));
      config.reuseWhitespace = oldReuseWhitespace;
      return pr;
    };
  };
  printer.Printer = Printer;
  function genericPrint(path, config, options, printPath) {
    assert_1.default.ok(path instanceof fast_path_1.default);
    var node = path.getValue();
    var parts = [];
    var linesWithoutParens = genericPrintNoParens(path, config, printPath);
    if (!node || linesWithoutParens.isEmpty()) {
      return linesWithoutParens;
    }
    var shouldAddParens = false;
    var decoratorsLines = printDecorators(path, printPath);
    if (decoratorsLines.isEmpty()) {
      // Nodes with decorators can't have parentheses, so we can avoid
      // computing path.needsParens() except in this case.
      if (!options.avoidRootParens) {
        shouldAddParens = path.needsParens();
      }
    } else {
      parts.push(decoratorsLines);
    }
    if (shouldAddParens) {
      parts.unshift("(");
    }
    parts.push(linesWithoutParens);
    if (shouldAddParens) {
      parts.push(")");
    }
    return lines_1.concat(parts);
  }
  // Note that the `options` parameter of this function is what other
  // functions in this file call the `config` object (that is, the
  // configuration object originally passed into the Printer constructor).
  // Its properties are documented in lib/options.js.
  function genericPrintNoParens(path, options, print) {
    var n = path.getValue();
    if (!n) {
      return lines_1.fromString("");
    }
    if (typeof n === "string") {
      return lines_1.fromString(n, options);
    }
    namedTypes.Printable.assert(n);
    var parts = [];
    switch (n.type) {
      case "File":
        return path.call(print, "program");
      case "Program":
        // Babel 6
        if (n.directives) {
          path.each(function (childPath) {
            parts.push(print(childPath), ";\n");
          }, "directives");
        }
        if (n.interpreter) {
          parts.push(path.call(print, "interpreter"));
        }
        parts.push(path.call(function (bodyPath) {
          return printStatementSequence(bodyPath, options, print);
        }, "body"));
        return lines_1.concat(parts);
      case "Noop": // Babel extension.
      case "EmptyStatement":
        return lines_1.fromString("");
      case "ExpressionStatement":
        return lines_1.concat([path.call(print, "expression"), ";"]);
      case "ParenthesizedExpression":
        // Babel extension.
        return lines_1.concat(["(", path.call(print, "expression"), ")"]);
      case "BinaryExpression":
      case "LogicalExpression":
      case "AssignmentExpression":
        return lines_1.fromString(" ").join([path.call(print, "left"), n.operator, path.call(print, "right")]);
      case "AssignmentPattern":
        return lines_1.concat([path.call(print, "left"), " = ", path.call(print, "right")]);
      case "MemberExpression":
      case "OptionalMemberExpression":
        {
          parts.push(path.call(print, "object"));
          var property = path.call(print, "property");
          // Like n.optional, except with defaults applied, so optional
          // defaults to true for OptionalMemberExpression nodes.
          var optional = types.getFieldValue(n, "optional");
          if (n.computed) {
            parts.push(optional ? "?.[" : "[", property, "]");
          } else {
            parts.push(optional ? "?." : ".", property);
          }
          return lines_1.concat(parts);
        }
      case "ChainExpression":
        return path.call(print, "expression");
      case "MetaProperty":
        return lines_1.concat([path.call(print, "meta"), ".", path.call(print, "property")]);
      case "BindExpression":
        if (n.object) {
          parts.push(path.call(print, "object"));
        }
        parts.push("::", path.call(print, "callee"));
        return lines_1.concat(parts);
      case "Path":
        return lines_1.fromString(".").join(n.body);
      case "Identifier":
        return lines_1.concat([lines_1.fromString(n.name, options), n.optional ? "?" : "", path.call(print, "typeAnnotation")]);
      case "SpreadElement":
      case "SpreadElementPattern":
      case "RestProperty": // Babel 6 for ObjectPattern
      case "SpreadProperty":
      case "SpreadPropertyPattern":
      case "ObjectTypeSpreadProperty":
      case "RestElement":
        return lines_1.concat(["...", path.call(print, "argument"), path.call(print, "typeAnnotation")]);
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "TSDeclareFunction":
        if (n.declare) {
          parts.push("declare ");
        }
        if (n.async) {
          parts.push("async ");
        }
        parts.push("function");
        if (n.generator) parts.push("*");
        if (n.id) {
          parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
        } else {
          if (n.typeParameters) {
            parts.push(path.call(print, "typeParameters"));
          }
        }
        parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
        if (n.body) {
          parts.push(" ", path.call(print, "body"));
        }
        return lines_1.concat(parts);
      case "ArrowFunctionExpression":
        if (n.async) {
          parts.push("async ");
        }
        if (n.typeParameters) {
          parts.push(path.call(print, "typeParameters"));
        }
        if (!options.arrowParensAlways && n.params.length === 1 && !n.rest && n.params[0].type === "Identifier" && !n.params[0].typeAnnotation && !n.returnType) {
          parts.push(path.call(print, "params", 0));
        } else {
          parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
        }
        parts.push(" => ", path.call(print, "body"));
        return lines_1.concat(parts);
      case "MethodDefinition":
        return printMethod(path, options, print);
      case "YieldExpression":
        parts.push("yield");
        if (n.delegate) parts.push("*");
        if (n.argument) parts.push(" ", path.call(print, "argument"));
        return lines_1.concat(parts);
      case "AwaitExpression":
        parts.push("await");
        if (n.all) parts.push("*");
        if (n.argument) parts.push(" ", path.call(print, "argument"));
        return lines_1.concat(parts);
      case "ModuleExpression":
        return lines_1.concat(["module {\n", path.call(print, "body").indent(options.tabWidth), "\n}"]);
      case "ModuleDeclaration":
        parts.push("module", path.call(print, "id"));
        if (n.source) {
          assert_1.default.ok(!n.body);
          parts.push("from", path.call(print, "source"));
        } else {
          parts.push(path.call(print, "body"));
        }
        return lines_1.fromString(" ").join(parts);
      case "ImportSpecifier":
        if (n.importKind && n.importKind !== "value") {
          parts.push(n.importKind + " ");
        }
        if (n.imported) {
          parts.push(path.call(print, "imported"));
          if (n.local && n.local.name !== n.imported.name) {
            parts.push(" as ", path.call(print, "local"));
          }
        } else if (n.id) {
          parts.push(path.call(print, "id"));
          if (n.name) {
            parts.push(" as ", path.call(print, "name"));
          }
        }
        return lines_1.concat(parts);
      case "ExportSpecifier":
        if (n.local) {
          parts.push(path.call(print, "local"));
          if (n.exported && n.exported.name !== n.local.name) {
            parts.push(" as ", path.call(print, "exported"));
          }
        } else if (n.id) {
          parts.push(path.call(print, "id"));
          if (n.name) {
            parts.push(" as ", path.call(print, "name"));
          }
        }
        return lines_1.concat(parts);
      case "ExportBatchSpecifier":
        return lines_1.fromString("*");
      case "ImportNamespaceSpecifier":
        parts.push("* as ");
        if (n.local) {
          parts.push(path.call(print, "local"));
        } else if (n.id) {
          parts.push(path.call(print, "id"));
        }
        return lines_1.concat(parts);
      case "ImportDefaultSpecifier":
        if (n.local) {
          return path.call(print, "local");
        }
        return path.call(print, "id");
      case "TSExportAssignment":
        return lines_1.concat(["export = ", path.call(print, "expression")]);
      case "ExportDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
        return printExportDeclaration(path, options, print);
      case "ExportAllDeclaration":
        parts.push("export *");
        if (n.exported) {
          parts.push(" as ", path.call(print, "exported"));
        }
        parts.push(" from ", path.call(print, "source"), ";");
        return lines_1.concat(parts);
      case "TSNamespaceExportDeclaration":
        parts.push("export as namespace ", path.call(print, "id"));
        return maybeAddSemicolon(lines_1.concat(parts));
      case "ExportNamespaceSpecifier":
        return lines_1.concat(["* as ", path.call(print, "exported")]);
      case "ExportDefaultSpecifier":
        return path.call(print, "exported");
      case "Import":
        return lines_1.fromString("import", options);
      // Recast and ast-types currently support dynamic import(...) using
      // either this dedicated ImportExpression type or a CallExpression
      // whose callee has type Import.
      // https://github.com/benjamn/ast-types/pull/365#issuecomment-605214486
      case "ImportExpression":
        return lines_1.concat(["import(", path.call(print, "source"), ")"]);
      case "ImportDeclaration":
        {
          parts.push("import ");
          if (n.importKind && n.importKind !== "value") {
            parts.push(n.importKind + " ");
          }
          if (n.specifiers && n.specifiers.length > 0) {
            var unbracedSpecifiers_1 = [];
            var bracedSpecifiers_1 = [];
            path.each(function (specifierPath) {
              var spec = specifierPath.getValue();
              if (spec.type === "ImportSpecifier") {
                bracedSpecifiers_1.push(print(specifierPath));
              } else if (spec.type === "ImportDefaultSpecifier" || spec.type === "ImportNamespaceSpecifier") {
                unbracedSpecifiers_1.push(print(specifierPath));
              }
            }, "specifiers");
            unbracedSpecifiers_1.forEach(function (lines, i) {
              if (i > 0) {
                parts.push(", ");
              }
              parts.push(lines);
            });
            if (bracedSpecifiers_1.length > 0) {
              var lines = lines_1.fromString(", ").join(bracedSpecifiers_1);
              if (lines.getLineLength(1) > options.wrapColumn) {
                lines = lines_1.concat([lines_1.fromString(",\n").join(bracedSpecifiers_1).indent(options.tabWidth), ","]);
              }
              if (unbracedSpecifiers_1.length > 0) {
                parts.push(", ");
              }
              if (lines.length > 1) {
                parts.push("{\n", lines, "\n}");
              } else if (options.objectCurlySpacing) {
                parts.push("{ ", lines, " }");
              } else {
                parts.push("{", lines, "}");
              }
            }
            parts.push(" from ");
          }
          parts.push(path.call(print, "source"), maybePrintImportAssertions(path, options, print), ";");
          return lines_1.concat(parts);
        }
      case "ImportAttribute":
        return lines_1.concat([path.call(print, "key"), ": ", path.call(print, "value")]);
      case "StaticBlock":
        parts.push("static ");
      // Intentionally fall through to BlockStatement below.
      case "BlockStatement":
        {
          var naked_1 = path.call(function (bodyPath) {
            return printStatementSequence(bodyPath, options, print);
          }, "body");
          if (naked_1.isEmpty()) {
            if (!n.directives || n.directives.length === 0) {
              parts.push("{}");
              return lines_1.concat(parts);
            }
          }
          parts.push("{\n");
          // Babel 6
          if (n.directives) {
            path.each(function (childPath) {
              parts.push(maybeAddSemicolon(print(childPath).indent(options.tabWidth)), n.directives.length > 1 || !naked_1.isEmpty() ? "\n" : "");
            }, "directives");
          }
          parts.push(naked_1.indent(options.tabWidth));
          parts.push("\n}");
          return lines_1.concat(parts);
        }
      case "ReturnStatement":
        {
          parts.push("return");
          if (n.argument) {
            var argLines = path.call(print, "argument");
            if (argLines.startsWithComment() || argLines.length > 1 && namedTypes.JSXElement && namedTypes.JSXElement.check(n.argument)) {
              parts.push(" (\n", argLines.indent(options.tabWidth), "\n)");
            } else {
              parts.push(" ", argLines);
            }
          }
          parts.push(";");
          return lines_1.concat(parts);
        }
      case "CallExpression":
      case "OptionalCallExpression":
        parts.push(path.call(print, "callee"));
        if (n.typeParameters) {
          parts.push(path.call(print, "typeParameters"));
        }
        if (n.typeArguments) {
          parts.push(path.call(print, "typeArguments"));
        }
        // Like n.optional, but defaults to true for OptionalCallExpression
        // nodes that are missing an n.optional property (unusual),
        // according to the OptionalCallExpression definition in ast-types.
        if (types.getFieldValue(n, "optional")) {
          parts.push("?.");
        }
        parts.push(printArgumentsList(path, options, print));
        return lines_1.concat(parts);
      case "RecordExpression":
        parts.push("#");
      // Intentionally fall through to printing the object literal...
      case "ObjectExpression":
      case "ObjectPattern":
      case "ObjectTypeAnnotation":
        {
          var isTypeAnnotation_1 = n.type === "ObjectTypeAnnotation";
          var separator_1 = options.flowObjectCommas ? "," : isTypeAnnotation_1 ? ";" : ",";
          var fields = [];
          var allowBreak_1 = false;
          if (isTypeAnnotation_1) {
            fields.push("indexers", "callProperties");
            if (n.internalSlots != null) {
              fields.push("internalSlots");
            }
          }
          fields.push("properties");
          var len_1 = 0;
          fields.forEach(function (field) {
            len_1 += n[field].length;
          });
          var oneLine_1 = isTypeAnnotation_1 && len_1 === 1 || len_1 === 0;
          var leftBrace = n.exact ? "{|" : "{";
          var rightBrace = n.exact ? "|}" : "}";
          parts.push(oneLine_1 ? leftBrace : leftBrace + "\n");
          var leftBraceIndex = parts.length - 1;
          var i_1 = 0;
          fields.forEach(function (field) {
            path.each(function (childPath) {
              var lines = print(childPath);
              if (!oneLine_1) {
                lines = lines.indent(options.tabWidth);
              }
              var multiLine = !isTypeAnnotation_1 && lines.length > 1;
              if (multiLine && allowBreak_1) {
                // Similar to the logic for BlockStatement.
                parts.push("\n");
              }
              parts.push(lines);
              if (i_1 < len_1 - 1) {
                // Add an extra line break if the previous object property
                // had a multi-line value.
                parts.push(separator_1 + (multiLine ? "\n\n" : "\n"));
                allowBreak_1 = !multiLine;
              } else if (len_1 !== 1 && isTypeAnnotation_1) {
                parts.push(separator_1);
              } else if (!oneLine_1 && util.isTrailingCommaEnabled(options, "objects") && childPath.getValue().type !== "RestElement") {
                parts.push(separator_1);
              }
              i_1++;
            }, field);
          });
          if (n.inexact) {
            var line = lines_1.fromString("...", options);
            if (oneLine_1) {
              if (len_1 > 0) {
                parts.push(separator_1, " ");
              }
              parts.push(line);
            } else {
              // No trailing separator after ... to maintain parity with prettier.
              parts.push("\n", line.indent(options.tabWidth));
            }
          }
          parts.push(oneLine_1 ? rightBrace : "\n" + rightBrace);
          if (i_1 !== 0 && oneLine_1 && options.objectCurlySpacing) {
            parts[leftBraceIndex] = leftBrace + " ";
            parts[parts.length - 1] = " " + rightBrace;
          }
          if (n.typeAnnotation) {
            parts.push(path.call(print, "typeAnnotation"));
          }
          return lines_1.concat(parts);
        }
      case "PropertyPattern":
        return lines_1.concat([path.call(print, "key"), ": ", path.call(print, "pattern")]);
      case "ObjectProperty": // Babel 6
      case "Property":
        {
          // Non-standard AST node type.
          if (n.method || n.kind === "get" || n.kind === "set") {
            return printMethod(path, options, print);
          }
          if (n.shorthand && n.value.type === "AssignmentPattern") {
            return path.call(print, "value");
          }
          var key = path.call(print, "key");
          if (n.computed) {
            parts.push("[", key, "]");
          } else {
            parts.push(key);
          }
          if (!n.shorthand || n.key.name !== n.value.name) {
            parts.push(": ", path.call(print, "value"));
          }
          return lines_1.concat(parts);
        }
      case "ClassMethod": // Babel 6
      case "ObjectMethod": // Babel 6
      case "ClassPrivateMethod":
      case "TSDeclareMethod":
        return printMethod(path, options, print);
      case "PrivateName":
        return lines_1.concat(["#", path.call(print, "id")]);
      case "Decorator":
        return lines_1.concat(["@", path.call(print, "expression")]);
      case "TupleExpression":
        parts.push("#");
      // Intentionally fall through to printing the tuple elements...
      case "ArrayExpression":
      case "ArrayPattern":
        {
          var elems = n.elements;
          var len_2 = elems.length;
          var printed_1 = path.map(print, "elements");
          var joined = lines_1.fromString(", ").join(printed_1);
          var oneLine_2 = joined.getLineLength(1) <= options.wrapColumn;
          if (oneLine_2) {
            if (options.arrayBracketSpacing) {
              parts.push("[ ");
            } else {
              parts.push("[");
            }
          } else {
            parts.push("[\n");
          }
          path.each(function (elemPath) {
            var i = elemPath.getName();
            var elem = elemPath.getValue();
            if (!elem) {
              // If the array expression ends with a hole, that hole
              // will be ignored by the interpreter, but if it ends with
              // two (or more) holes, we need to write out two (or more)
              // commas so that the resulting code is interpreted with
              // both (all) of the holes.
              parts.push(",");
            } else {
              var lines = printed_1[i];
              if (oneLine_2) {
                if (i > 0) parts.push(" ");
              } else {
                lines = lines.indent(options.tabWidth);
              }
              parts.push(lines);
              if (i < len_2 - 1 || !oneLine_2 && util.isTrailingCommaEnabled(options, "arrays")) parts.push(",");
              if (!oneLine_2) parts.push("\n");
            }
          }, "elements");
          if (oneLine_2 && options.arrayBracketSpacing) {
            parts.push(" ]");
          } else {
            parts.push("]");
          }
          if (n.typeAnnotation) {
            parts.push(path.call(print, "typeAnnotation"));
          }
          return lines_1.concat(parts);
        }
      case "SequenceExpression":
        return lines_1.fromString(", ").join(path.map(print, "expressions"));
      case "ThisExpression":
        return lines_1.fromString("this");
      case "Super":
        return lines_1.fromString("super");
      case "NullLiteral":
        // Babel 6 Literal split
        return lines_1.fromString("null");
      case "RegExpLiteral":
        // Babel 6 Literal split
        return lines_1.fromString(getPossibleRaw(n) || "/" + n.pattern + "/" + (n.flags || ""), options);
      case "BigIntLiteral":
        // Babel 7 Literal split
        return lines_1.fromString(getPossibleRaw(n) || n.value + "n", options);
      case "NumericLiteral":
        // Babel 6 Literal Split
        return lines_1.fromString(getPossibleRaw(n) || n.value, options);
      case "DecimalLiteral":
        return lines_1.fromString(getPossibleRaw(n) || n.value + "m", options);
      case "StringLiteral":
        return lines_1.fromString(nodeStr(n.value, options));
      case "BooleanLiteral": // Babel 6 Literal split
      case "Literal":
        return lines_1.fromString(getPossibleRaw(n) || (typeof n.value === "string" ? nodeStr(n.value, options) : n.value), options);
      case "Directive":
        // Babel 6
        return path.call(print, "value");
      case "DirectiveLiteral":
        // Babel 6
        return lines_1.fromString(getPossibleRaw(n) || nodeStr(n.value, options), options);
      case "InterpreterDirective":
        return lines_1.fromString("#!" + n.value + "\n", options);
      case "ModuleSpecifier":
        if (n.local) {
          throw new Error("The ESTree ModuleSpecifier type should be abstract");
        }
        // The Esprima ModuleSpecifier type is just a string-valued
        // Literal identifying the imported-from module.
        return lines_1.fromString(nodeStr(n.value, options), options);
      case "UnaryExpression":
        parts.push(n.operator);
        if (/[a-z]$/.test(n.operator)) parts.push(" ");
        parts.push(path.call(print, "argument"));
        return lines_1.concat(parts);
      case "UpdateExpression":
        parts.push(path.call(print, "argument"), n.operator);
        if (n.prefix) parts.reverse();
        return lines_1.concat(parts);
      case "ConditionalExpression":
        return lines_1.concat([path.call(print, "test"), " ? ", path.call(print, "consequent"), " : ", path.call(print, "alternate")]);
      case "NewExpression":
        {
          parts.push("new ", path.call(print, "callee"));
          if (n.typeParameters) {
            parts.push(path.call(print, "typeParameters"));
          }
          if (n.typeArguments) {
            parts.push(path.call(print, "typeArguments"));
          }
          var args = n.arguments;
          if (args) {
            parts.push(printArgumentsList(path, options, print));
          }
          return lines_1.concat(parts);
        }
      case "VariableDeclaration":
        {
          if (n.declare) {
            parts.push("declare ");
          }
          parts.push(n.kind, " ");
          var maxLen_1 = 0;
          var printed = path.map(function (childPath) {
            var lines = print(childPath);
            maxLen_1 = Math.max(lines.length, maxLen_1);
            return lines;
          }, "declarations");
          if (maxLen_1 === 1) {
            parts.push(lines_1.fromString(", ").join(printed));
          } else if (printed.length > 1) {
            parts.push(lines_1.fromString(",\n").join(printed).indentTail(n.kind.length + 1));
          } else {
            parts.push(printed[0]);
          }
          // We generally want to terminate all variable declarations with a
          // semicolon, except when they are children of for loops.
          var parentNode = path.getParentNode();
          if (!namedTypes.ForStatement.check(parentNode) && !namedTypes.ForInStatement.check(parentNode) && !(namedTypes.ForOfStatement && namedTypes.ForOfStatement.check(parentNode)) && !(namedTypes.ForAwaitStatement && namedTypes.ForAwaitStatement.check(parentNode))) {
            parts.push(";");
          }
          return lines_1.concat(parts);
        }
      case "VariableDeclarator":
        return n.init ? lines_1.fromString(" = ").join([path.call(print, "id"), path.call(print, "init")]) : path.call(print, "id");
      case "WithStatement":
        return lines_1.concat(["with (", path.call(print, "object"), ") ", path.call(print, "body")]);
      case "IfStatement":
        {
          var con = adjustClause(path.call(print, "consequent"), options);
          parts.push("if (", path.call(print, "test"), ")", con);
          if (n.alternate) parts.push(endsWithBrace(con) ? " else" : "\nelse", adjustClause(path.call(print, "alternate"), options));
          return lines_1.concat(parts);
        }
      case "ForStatement":
        {
          // TODO Get the for (;;) case right.
          var init = path.call(print, "init");
          var sep = init.length > 1 ? ";\n" : "; ";
          var forParen = "for (";
          var indented = lines_1.fromString(sep).join([init, path.call(print, "test"), path.call(print, "update")]).indentTail(forParen.length);
          var head = lines_1.concat([forParen, indented, ")"]);
          var clause = adjustClause(path.call(print, "body"), options);
          parts.push(head);
          if (head.length > 1) {
            parts.push("\n");
            clause = clause.trimLeft();
          }
          parts.push(clause);
          return lines_1.concat(parts);
        }
      case "WhileStatement":
        return lines_1.concat(["while (", path.call(print, "test"), ")", adjustClause(path.call(print, "body"), options)]);
      case "ForInStatement":
        // Note: esprima can't actually parse "for each (".
        return lines_1.concat([n.each ? "for each (" : "for (", path.call(print, "left"), " in ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options)]);
      case "ForOfStatement":
      case "ForAwaitStatement":
        parts.push("for ");
        if (n.await || n.type === "ForAwaitStatement") {
          parts.push("await ");
        }
        parts.push("(", path.call(print, "left"), " of ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options));
        return lines_1.concat(parts);
      case "DoWhileStatement":
        {
          var doBody = lines_1.concat(["do", adjustClause(path.call(print, "body"), options)]);
          parts.push(doBody);
          if (endsWithBrace(doBody)) parts.push(" while");else parts.push("\nwhile");
          parts.push(" (", path.call(print, "test"), ");");
          return lines_1.concat(parts);
        }
      case "DoExpression":
        {
          var statements = path.call(function (bodyPath) {
            return printStatementSequence(bodyPath, options, print);
          }, "body");
          return lines_1.concat(["do {\n", statements.indent(options.tabWidth), "\n}"]);
        }
      case "BreakStatement":
        parts.push("break");
        if (n.label) parts.push(" ", path.call(print, "label"));
        parts.push(";");
        return lines_1.concat(parts);
      case "ContinueStatement":
        parts.push("continue");
        if (n.label) parts.push(" ", path.call(print, "label"));
        parts.push(";");
        return lines_1.concat(parts);
      case "LabeledStatement":
        return lines_1.concat([path.call(print, "label"), ":\n", path.call(print, "body")]);
      case "TryStatement":
        parts.push("try ", path.call(print, "block"));
        if (n.handler) {
          parts.push(" ", path.call(print, "handler"));
        } else if (n.handlers) {
          path.each(function (handlerPath) {
            parts.push(" ", print(handlerPath));
          }, "handlers");
        }
        if (n.finalizer) {
          parts.push(" finally ", path.call(print, "finalizer"));
        }
        return lines_1.concat(parts);
      case "CatchClause":
        parts.push("catch ");
        if (n.param) {
          parts.push("(", path.call(print, "param"));
        }
        if (n.guard) {
          // Note: esprima does not recognize conditional catch clauses.
          parts.push(" if ", path.call(print, "guard"));
        }
        if (n.param) {
          parts.push(") ");
        }
        parts.push(path.call(print, "body"));
        return lines_1.concat(parts);
      case "ThrowStatement":
        return lines_1.concat(["throw ", path.call(print, "argument"), ";"]);
      case "SwitchStatement":
        return lines_1.concat(["switch (", path.call(print, "discriminant"), ") {\n", lines_1.fromString("\n").join(path.map(print, "cases")), "\n}"]);
      // Note: ignoring n.lexical because it has no printing consequences.
      case "SwitchCase":
        if (n.test) parts.push("case ", path.call(print, "test"), ":");else parts.push("default:");
        if (n.consequent.length > 0) {
          parts.push("\n", path.call(function (consequentPath) {
            return printStatementSequence(consequentPath, options, print);
          }, "consequent").indent(options.tabWidth));
        }
        return lines_1.concat(parts);
      case "DebuggerStatement":
        return lines_1.fromString("debugger;");
      // JSX extensions below.
      case "JSXAttribute":
        parts.push(path.call(print, "name"));
        if (n.value) parts.push("=", path.call(print, "value"));
        return lines_1.concat(parts);
      case "JSXIdentifier":
        return lines_1.fromString(n.name, options);
      case "JSXNamespacedName":
        return lines_1.fromString(":").join([path.call(print, "namespace"), path.call(print, "name")]);
      case "JSXMemberExpression":
        return lines_1.fromString(".").join([path.call(print, "object"), path.call(print, "property")]);
      case "JSXSpreadAttribute":
        return lines_1.concat(["{...", path.call(print, "argument"), "}"]);
      case "JSXSpreadChild":
        return lines_1.concat(["{...", path.call(print, "expression"), "}"]);
      case "JSXExpressionContainer":
        return lines_1.concat(["{", path.call(print, "expression"), "}"]);
      case "JSXElement":
      case "JSXFragment":
        {
          var openingPropName = "opening" + (n.type === "JSXElement" ? "Element" : "Fragment");
          var closingPropName = "closing" + (n.type === "JSXElement" ? "Element" : "Fragment");
          var openingLines = path.call(print, openingPropName);
          if (n[openingPropName].selfClosing) {
            assert_1.default.ok(!n[closingPropName], "unexpected " + closingPropName + " element in self-closing " + n.type);
            return openingLines;
          }
          var childLines = lines_1.concat(path.map(function (childPath) {
            var child = childPath.getValue();
            if (namedTypes.Literal.check(child) && typeof child.value === "string") {
              if (/\S/.test(child.value)) {
                return child.value.replace(/^\s+|\s+$/g, "");
              } else if (/\n/.test(child.value)) {
                return "\n";
              }
            }
            return print(childPath);
          }, "children")).indentTail(options.tabWidth);
          var closingLines = path.call(print, closingPropName);
          return lines_1.concat([openingLines, childLines, closingLines]);
        }
      case "JSXOpeningElement":
        {
          parts.push("<", path.call(print, "name"));
          var attrParts_1 = [];
          path.each(function (attrPath) {
            attrParts_1.push(" ", print(attrPath));
          }, "attributes");
          var attrLines = lines_1.concat(attrParts_1);
          var needLineWrap = attrLines.length > 1 || attrLines.getLineLength(1) > options.wrapColumn;
          if (needLineWrap) {
            attrParts_1.forEach(function (part, i) {
              if (part === " ") {
                assert_1.default.strictEqual(i % 2, 0);
                attrParts_1[i] = "\n";
              }
            });
            attrLines = lines_1.concat(attrParts_1).indentTail(options.tabWidth);
          }
          parts.push(attrLines, n.selfClosing ? " />" : ">");
          return lines_1.concat(parts);
        }
      case "JSXClosingElement":
        return lines_1.concat(["</", path.call(print, "name"), ">"]);
      case "JSXOpeningFragment":
        return lines_1.fromString("<>");
      case "JSXClosingFragment":
        return lines_1.fromString("</>");
      case "JSXText":
        return lines_1.fromString(n.value, options);
      case "JSXEmptyExpression":
        return lines_1.fromString("");
      case "TypeAnnotatedIdentifier":
        return lines_1.concat([path.call(print, "annotation"), " ", path.call(print, "identifier")]);
      case "ClassBody":
        if (n.body.length === 0) {
          return lines_1.fromString("{}");
        }
        return lines_1.concat(["{\n", path.call(function (bodyPath) {
          return printStatementSequence(bodyPath, options, print);
        }, "body").indent(options.tabWidth), "\n}"]);
      case "ClassPropertyDefinition":
        parts.push("static ", path.call(print, "definition"));
        if (!namedTypes.MethodDefinition.check(n.definition)) parts.push(";");
        return lines_1.concat(parts);
      case "ClassProperty":
        {
          if (n.declare) {
            parts.push("declare ");
          }
          var access = n.accessibility || n.access;
          if (typeof access === "string") {
            parts.push(access, " ");
          }
          if (n.static) {
            parts.push("static ");
          }
          if (n.abstract) {
            parts.push("abstract ");
          }
          if (n.readonly) {
            parts.push("readonly ");
          }
          var key = path.call(print, "key");
          if (n.computed) {
            key = lines_1.concat(["[", key, "]"]);
          }
          if (n.variance) {
            key = lines_1.concat([printVariance(path, print), key]);
          }
          parts.push(key);
          if (n.optional) {
            parts.push("?");
          }
          if (n.definite) {
            parts.push("!");
          }
          if (n.typeAnnotation) {
            parts.push(path.call(print, "typeAnnotation"));
          }
          if (n.value) {
            parts.push(" = ", path.call(print, "value"));
          }
          parts.push(";");
          return lines_1.concat(parts);
        }
      case "ClassPrivateProperty":
        if (n.static) {
          parts.push("static ");
        }
        parts.push(path.call(print, "key"));
        if (n.typeAnnotation) {
          parts.push(path.call(print, "typeAnnotation"));
        }
        if (n.value) {
          parts.push(" = ", path.call(print, "value"));
        }
        parts.push(";");
        return lines_1.concat(parts);
      case "ClassDeclaration":
      case "ClassExpression":
      case "DeclareClass":
        if (n.declare) {
          parts.push("declare ");
        }
        if (n.abstract) {
          parts.push("abstract ");
        }
        parts.push("class");
        if (n.id) {
          parts.push(" ", path.call(print, "id"));
        }
        if (n.typeParameters) {
          parts.push(path.call(print, "typeParameters"));
        }
        if (n.superClass) {
          // ClassDeclaration and ClassExpression only
          parts.push(" extends ", path.call(print, "superClass"), path.call(print, "superTypeParameters"));
        }
        if (n.extends && n.extends.length > 0) {
          // DeclareClass only
          parts.push(" extends ", lines_1.fromString(", ").join(path.map(print, "extends")));
        }
        if (n["implements"] && n["implements"].length > 0) {
          parts.push(" implements ", lines_1.fromString(", ").join(path.map(print, "implements")));
        }
        parts.push(" ", path.call(print, "body"));
        if (n.type === "DeclareClass") {
          return printFlowDeclaration(path, parts);
        } else {
          return lines_1.concat(parts);
        }
      case "TemplateElement":
        return lines_1.fromString(n.value.raw, options).lockIndentTail();
      case "TemplateLiteral":
        {
          var expressions_1 = path.map(print, "expressions");
          parts.push("`");
          path.each(function (childPath) {
            var i = childPath.getName();
            parts.push(print(childPath));
            if (i < expressions_1.length) {
              parts.push("${", expressions_1[i], "}");
            }
          }, "quasis");
          parts.push("`");
          return lines_1.concat(parts).lockIndentTail();
        }
      case "TaggedTemplateExpression":
        return lines_1.concat([path.call(print, "tag"), path.call(print, "quasi")]);
      // These types are unprintable because they serve as abstract
      // supertypes for other (printable) types.
      case "Node":
      case "Printable":
      case "SourceLocation":
      case "Position":
      case "Statement":
      case "Function":
      case "Pattern":
      case "Expression":
      case "Declaration":
      case "Specifier":
      case "NamedSpecifier":
      case "Comment": // Supertype of Block and Line
      case "Flow": // Supertype of all Flow AST node types
      case "FlowType": // Supertype of all Flow types
      case "FlowPredicate": // Supertype of InferredPredicate and DeclaredPredicate
      case "MemberTypeAnnotation": // Flow
      case "Type": // Flow
      case "TSHasOptionalTypeParameterInstantiation":
      case "TSHasOptionalTypeParameters":
      case "TSHasOptionalTypeAnnotation":
      case "ChainElement":
        // Supertype of MemberExpression and CallExpression
        throw new Error("unprintable type: " + JSON.stringify(n.type));
      case "CommentBlock": // Babel block comment.
      case "Block":
        // Esprima block comment.
        return lines_1.concat(["/*", lines_1.fromString(n.value, options), "*/"]);
      case "CommentLine": // Babel line comment.
      case "Line":
        // Esprima line comment.
        return lines_1.concat(["//", lines_1.fromString(n.value, options)]);
      // Type Annotations for Facebook Flow, typically stripped out or
      // transformed away before printing.
      case "TypeAnnotation":
        if (n.typeAnnotation) {
          if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
            parts.push(": ");
          }
          parts.push(path.call(print, "typeAnnotation"));
          return lines_1.concat(parts);
        }
        return lines_1.fromString("");
      case "ExistentialTypeParam":
      case "ExistsTypeAnnotation":
        return lines_1.fromString("*", options);
      case "EmptyTypeAnnotation":
        return lines_1.fromString("empty", options);
      case "AnyTypeAnnotation":
        return lines_1.fromString("any", options);
      case "MixedTypeAnnotation":
        return lines_1.fromString("mixed", options);
      case "ArrayTypeAnnotation":
        return lines_1.concat([path.call(print, "elementType"), "[]"]);
      case "TupleTypeAnnotation":
        {
          var printed_2 = path.map(print, "types");
          var joined = lines_1.fromString(", ").join(printed_2);
          var oneLine_3 = joined.getLineLength(1) <= options.wrapColumn;
          if (oneLine_3) {
            if (options.arrayBracketSpacing) {
              parts.push("[ ");
            } else {
              parts.push("[");
            }
          } else {
            parts.push("[\n");
          }
          path.each(function (elemPath) {
            var i = elemPath.getName();
            var elem = elemPath.getValue();
            if (!elem) {
              // If the array expression ends with a hole, that hole
              // will be ignored by the interpreter, but if it ends with
              // two (or more) holes, we need to write out two (or more)
              // commas so that the resulting code is interpreted with
              // both (all) of the holes.
              parts.push(",");
            } else {
              var lines = printed_2[i];
              if (oneLine_3) {
                if (i > 0) parts.push(" ");
              } else {
                lines = lines.indent(options.tabWidth);
              }
              parts.push(lines);
              if (i < n.types.length - 1 || !oneLine_3 && util.isTrailingCommaEnabled(options, "arrays")) parts.push(",");
              if (!oneLine_3) parts.push("\n");
            }
          }, "types");
          if (oneLine_3 && options.arrayBracketSpacing) {
            parts.push(" ]");
          } else {
            parts.push("]");
          }
          return lines_1.concat(parts);
        }
      case "BooleanTypeAnnotation":
        return lines_1.fromString("boolean", options);
      case "BooleanLiteralTypeAnnotation":
        assert_1.default.strictEqual(typeof n.value, "boolean");
        return lines_1.fromString("" + n.value, options);
      case "InterfaceTypeAnnotation":
        parts.push("interface");
        if (n.extends && n.extends.length > 0) {
          parts.push(" extends ", lines_1.fromString(", ").join(path.map(print, "extends")));
        }
        parts.push(" ", path.call(print, "body"));
        return lines_1.concat(parts);
      case "DeclareFunction":
        return printFlowDeclaration(path, ["function ", path.call(print, "id"), ";"]);
      case "DeclareModule":
        return printFlowDeclaration(path, ["module ", path.call(print, "id"), " ", path.call(print, "body")]);
      case "DeclareModuleExports":
        return printFlowDeclaration(path, ["module.exports", path.call(print, "typeAnnotation")]);
      case "DeclareVariable":
        return printFlowDeclaration(path, ["var ", path.call(print, "id"), ";"]);
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
        return lines_1.concat(["declare ", printExportDeclaration(path, options, print)]);
      case "EnumDeclaration":
        return lines_1.concat(["enum ", path.call(print, "id"), path.call(print, "body")]);
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
        {
          if (n.type === "EnumSymbolBody" || n.explicitType) {
            parts.push(" of ",
            // EnumBooleanBody => boolean, etc.
            n.type.slice(4, -4).toLowerCase());
          }
          parts.push(" {\n", lines_1.fromString("\n").join(path.map(print, "members")).indent(options.tabWidth), "\n}");
          return lines_1.concat(parts);
        }
      case "EnumDefaultedMember":
        return lines_1.concat([path.call(print, "id"), ","]);
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
        return lines_1.concat([path.call(print, "id"), " = ", path.call(print, "init"), ","]);
      case "InferredPredicate":
        return lines_1.fromString("%checks", options);
      case "DeclaredPredicate":
        return lines_1.concat(["%checks(", path.call(print, "value"), ")"]);
      case "FunctionTypeAnnotation":
        {
          // FunctionTypeAnnotation is ambiguous:
          // declare function(a: B): void; OR
          // const A: (a: B) => void;
          var parent = path.getParentNode(0);
          var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) || namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method || namedTypes.DeclareFunction.check(path.getParentNode(2)));
          var needsColon = isArrowFunctionTypeAnnotation && !namedTypes.FunctionTypeParam.check(parent) && !namedTypes.TypeAlias.check(parent);
          if (needsColon) {
            parts.push(": ");
          }
          var hasTypeParameters = !!n.typeParameters;
          var needsParens = hasTypeParameters || n.params.length !== 1 || n.params[0].name;
          parts.push(hasTypeParameters ? path.call(print, "typeParameters") : "", needsParens ? "(" : "", printFunctionParams(path, options, print), needsParens ? ")" : "");
          // The returnType is not wrapped in a TypeAnnotation, so the colon
          // needs to be added separately.
          if (n.returnType) {
            parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path.call(print, "returnType"));
          }
          return lines_1.concat(parts);
        }
      case "FunctionTypeParam":
        {
          var name = path.call(print, "name");
          parts.push(name);
          if (n.optional) {
            parts.push("?");
          }
          if (name.infos[0].line) {
            parts.push(": ");
          }
          parts.push(path.call(print, "typeAnnotation"));
          return lines_1.concat(parts);
        }
      case "GenericTypeAnnotation":
        return lines_1.concat([path.call(print, "id"), path.call(print, "typeParameters")]);
      case "DeclareInterface":
        parts.push("declare ");
      // Fall through to InterfaceDeclaration...
      case "InterfaceDeclaration":
      case "TSInterfaceDeclaration":
        if (n.declare) {
          parts.push("declare ");
        }
        parts.push("interface ", path.call(print, "id"), path.call(print, "typeParameters"), " ");
        if (n["extends"] && n["extends"].length > 0) {
          parts.push("extends ", lines_1.fromString(", ").join(path.map(print, "extends")), " ");
        }
        if (n.body) {
          parts.push(path.call(print, "body"));
        }
        return lines_1.concat(parts);
      case "ClassImplements":
      case "InterfaceExtends":
        return lines_1.concat([path.call(print, "id"), path.call(print, "typeParameters")]);
      case "IntersectionTypeAnnotation":
        return lines_1.fromString(" & ").join(path.map(print, "types"));
      case "NullableTypeAnnotation":
        return lines_1.concat(["?", path.call(print, "typeAnnotation")]);
      case "NullLiteralTypeAnnotation":
        return lines_1.fromString("null", options);
      case "ThisTypeAnnotation":
        return lines_1.fromString("this", options);
      case "NumberTypeAnnotation":
        return lines_1.fromString("number", options);
      case "ObjectTypeCallProperty":
        return path.call(print, "value");
      case "ObjectTypeIndexer":
        if (n.static) {
          parts.push("static ");
        }
        parts.push(printVariance(path, print), "[");
        if (n.id) {
          parts.push(path.call(print, "id"), ": ");
        }
        parts.push(path.call(print, "key"), "]: ", path.call(print, "value"));
        return lines_1.concat(parts);
      case "ObjectTypeProperty":
        return lines_1.concat([printVariance(path, print), path.call(print, "key"), n.optional ? "?" : "", ": ", path.call(print, "value")]);
      case "ObjectTypeInternalSlot":
        return lines_1.concat([n.static ? "static " : "", "[[", path.call(print, "id"), "]]", n.optional ? "?" : "", n.value.type !== "FunctionTypeAnnotation" ? ": " : "", path.call(print, "value")]);
      case "QualifiedTypeIdentifier":
        return lines_1.concat([path.call(print, "qualification"), ".", path.call(print, "id")]);
      case "StringLiteralTypeAnnotation":
        return lines_1.fromString(nodeStr(n.value, options), options);
      case "NumberLiteralTypeAnnotation":
      case "NumericLiteralTypeAnnotation":
        assert_1.default.strictEqual(typeof n.value, "number");
        return lines_1.fromString(JSON.stringify(n.value), options);
      case "BigIntLiteralTypeAnnotation":
        return lines_1.fromString(n.raw, options);
      case "StringTypeAnnotation":
        return lines_1.fromString("string", options);
      case "DeclareTypeAlias":
        parts.push("declare ");
      // Fall through to TypeAlias...
      case "TypeAlias":
        return lines_1.concat(["type ", path.call(print, "id"), path.call(print, "typeParameters"), " = ", path.call(print, "right"), ";"]);
      case "DeclareOpaqueType":
        parts.push("declare ");
      // Fall through to OpaqueType...
      case "OpaqueType":
        parts.push("opaque type ", path.call(print, "id"), path.call(print, "typeParameters"));
        if (n["supertype"]) {
          parts.push(": ", path.call(print, "supertype"));
        }
        if (n["impltype"]) {
          parts.push(" = ", path.call(print, "impltype"));
        }
        parts.push(";");
        return lines_1.concat(parts);
      case "TypeCastExpression":
        return lines_1.concat(["(", path.call(print, "expression"), path.call(print, "typeAnnotation"), ")"]);
      case "TypeParameterDeclaration":
      case "TypeParameterInstantiation":
        return lines_1.concat(["<", lines_1.fromString(", ").join(path.map(print, "params")), ">"]);
      case "Variance":
        if (n.kind === "plus") {
          return lines_1.fromString("+");
        }
        if (n.kind === "minus") {
          return lines_1.fromString("-");
        }
        return lines_1.fromString("");
      case "TypeParameter":
        if (n.variance) {
          parts.push(printVariance(path, print));
        }
        parts.push(path.call(print, "name"));
        if (n.bound) {
          parts.push(path.call(print, "bound"));
        }
        if (n["default"]) {
          parts.push("=", path.call(print, "default"));
        }
        return lines_1.concat(parts);
      case "TypeofTypeAnnotation":
        return lines_1.concat([lines_1.fromString("typeof ", options), path.call(print, "argument")]);
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        return lines_1.concat([path.call(print, "objectType"), n.optional ? "?." : "", "[", path.call(print, "indexType"), "]"]);
      case "UnionTypeAnnotation":
        return lines_1.fromString(" | ").join(path.map(print, "types"));
      case "VoidTypeAnnotation":
        return lines_1.fromString("void", options);
      case "NullTypeAnnotation":
        return lines_1.fromString("null", options);
      case "SymbolTypeAnnotation":
        return lines_1.fromString("symbol", options);
      case "BigIntTypeAnnotation":
        return lines_1.fromString("bigint", options);
      // Type Annotations for TypeScript (when using Babylon as parser)
      case "TSType":
        throw new Error("unprintable type: " + JSON.stringify(n.type));
      case "TSNumberKeyword":
        return lines_1.fromString("number", options);
      case "TSBigIntKeyword":
        return lines_1.fromString("bigint", options);
      case "TSObjectKeyword":
        return lines_1.fromString("object", options);
      case "TSBooleanKeyword":
        return lines_1.fromString("boolean", options);
      case "TSStringKeyword":
        return lines_1.fromString("string", options);
      case "TSSymbolKeyword":
        return lines_1.fromString("symbol", options);
      case "TSAnyKeyword":
        return lines_1.fromString("any", options);
      case "TSVoidKeyword":
        return lines_1.fromString("void", options);
      case "TSIntrinsicKeyword":
        return lines_1.fromString("intrinsic", options);
      case "TSThisType":
        return lines_1.fromString("this", options);
      case "TSNullKeyword":
        return lines_1.fromString("null", options);
      case "TSUndefinedKeyword":
        return lines_1.fromString("undefined", options);
      case "TSUnknownKeyword":
        return lines_1.fromString("unknown", options);
      case "TSNeverKeyword":
        return lines_1.fromString("never", options);
      case "TSArrayType":
        return lines_1.concat([path.call(print, "elementType"), "[]"]);
      case "TSLiteralType":
        return path.call(print, "literal");
      case "TSUnionType":
        return lines_1.fromString(" | ").join(path.map(print, "types"));
      case "TSIntersectionType":
        return lines_1.fromString(" & ").join(path.map(print, "types"));
      case "TSConditionalType":
        parts.push(path.call(print, "checkType"), " extends ", path.call(print, "extendsType"), " ? ", path.call(print, "trueType"), " : ", path.call(print, "falseType"));
        return lines_1.concat(parts);
      case "TSInferType":
        parts.push("infer ", path.call(print, "typeParameter"));
        return lines_1.concat(parts);
      case "TSParenthesizedType":
        return lines_1.concat(["(", path.call(print, "typeAnnotation"), ")"]);
      case "TSFunctionType":
        return lines_1.concat([path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ") => ", path.call(print, "typeAnnotation", "typeAnnotation")]);
      case "TSConstructorType":
        return lines_1.concat(["new ", path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ") => ", path.call(print, "typeAnnotation", "typeAnnotation")]);
      case "TSMappedType":
        {
          parts.push(n.readonly ? "readonly " : "", "[", path.call(print, "typeParameter"), "]", n.optional ? "?" : "");
          if (n.typeAnnotation) {
            parts.push(": ", path.call(print, "typeAnnotation"), ";");
          }
          return lines_1.concat(["{\n", lines_1.concat(parts).indent(options.tabWidth), "\n}"]);
        }
      case "TSTupleType":
        return lines_1.concat(["[", lines_1.fromString(", ").join(path.map(print, "elementTypes")), "]"]);
      case "TSNamedTupleMember":
        parts.push(path.call(print, "label"));
        if (n.optional) {
          parts.push("?");
        }
        parts.push(": ", path.call(print, "elementType"));
        return lines_1.concat(parts);
      case "TSRestType":
        return lines_1.concat(["...", path.call(print, "typeAnnotation")]);
      case "TSOptionalType":
        return lines_1.concat([path.call(print, "typeAnnotation"), "?"]);
      case "TSIndexedAccessType":
        return lines_1.concat([path.call(print, "objectType"), "[", path.call(print, "indexType"), "]"]);
      case "TSTypeOperator":
        return lines_1.concat([path.call(print, "operator"), " ", path.call(print, "typeAnnotation")]);
      case "TSTypeLiteral":
        {
          var memberLines = lines_1.fromString("\n").join(path.map(print, "members"));
          if (memberLines.isEmpty()) {
            return lines_1.fromString("{}", options);
          }
          parts.push("{\n", memberLines.indent(options.tabWidth), "\n}");
          return lines_1.concat(parts);
        }
      case "TSEnumMember":
        parts.push(path.call(print, "id"));
        if (n.initializer) {
          parts.push(" = ", path.call(print, "initializer"));
        }
        return lines_1.concat(parts);
      case "TSTypeQuery":
        return lines_1.concat(["typeof ", path.call(print, "exprName")]);
      case "TSParameterProperty":
        if (n.accessibility) {
          parts.push(n.accessibility, " ");
        }
        if (n.export) {
          parts.push("export ");
        }
        if (n.static) {
          parts.push("static ");
        }
        if (n.readonly) {
          parts.push("readonly ");
        }
        parts.push(path.call(print, "parameter"));
        return lines_1.concat(parts);
      case "TSTypeReference":
        return lines_1.concat([path.call(print, "typeName"), path.call(print, "typeParameters")]);
      case "TSQualifiedName":
        return lines_1.concat([path.call(print, "left"), ".", path.call(print, "right")]);
      case "TSAsExpression":
        {
          var expression = path.call(print, "expression");
          parts.push(expression, lines_1.fromString(" as "), path.call(print, "typeAnnotation"));
          return lines_1.concat(parts);
        }
      case "TSNonNullExpression":
        return lines_1.concat([path.call(print, "expression"), "!"]);
      case "TSTypeAnnotation":
        return lines_1.concat([": ", path.call(print, "typeAnnotation")]);
      case "TSIndexSignature":
        return lines_1.concat([n.readonly ? "readonly " : "", "[", path.map(print, "parameters"), "]", path.call(print, "typeAnnotation")]);
      case "TSPropertySignature":
        parts.push(printVariance(path, print), n.readonly ? "readonly " : "");
        if (n.computed) {
          parts.push("[", path.call(print, "key"), "]");
        } else {
          parts.push(path.call(print, "key"));
        }
        parts.push(n.optional ? "?" : "", path.call(print, "typeAnnotation"));
        return lines_1.concat(parts);
      case "TSMethodSignature":
        if (n.computed) {
          parts.push("[", path.call(print, "key"), "]");
        } else {
          parts.push(path.call(print, "key"));
        }
        if (n.optional) {
          parts.push("?");
        }
        parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
        return lines_1.concat(parts);
      case "TSTypePredicate":
        if (n.asserts) {
          parts.push("asserts ");
        }
        parts.push(path.call(print, "parameterName"));
        if (n.typeAnnotation) {
          parts.push(" is ", path.call(print, "typeAnnotation", "typeAnnotation"));
        }
        return lines_1.concat(parts);
      case "TSCallSignatureDeclaration":
        return lines_1.concat([path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation")]);
      case "TSConstructSignatureDeclaration":
        if (n.typeParameters) {
          parts.push("new", path.call(print, "typeParameters"));
        } else {
          parts.push("new ");
        }
        parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
        return lines_1.concat(parts);
      case "TSTypeAliasDeclaration":
        return lines_1.concat([n.declare ? "declare " : "", "type ", path.call(print, "id"), path.call(print, "typeParameters"), " = ", path.call(print, "typeAnnotation"), ";"]);
      case "TSTypeParameter":
        {
          parts.push(path.call(print, "name"));
          // ambiguous because of TSMappedType
          var parent = path.getParentNode(0);
          var isInMappedType = namedTypes.TSMappedType.check(parent);
          if (n.constraint) {
            parts.push(isInMappedType ? " in " : " extends ", path.call(print, "constraint"));
          }
          if (n["default"]) {
            parts.push(" = ", path.call(print, "default"));
          }
          return lines_1.concat(parts);
        }
      case "TSTypeAssertion":
        {
          parts.push("<", path.call(print, "typeAnnotation"), "> ", path.call(print, "expression"));
          return lines_1.concat(parts);
        }
      case "TSTypeParameterDeclaration":
      case "TSTypeParameterInstantiation":
        return lines_1.concat(["<", lines_1.fromString(", ").join(path.map(print, "params")), ">"]);
      case "TSEnumDeclaration":
        {
          parts.push(n.declare ? "declare " : "", n.const ? "const " : "", "enum ", path.call(print, "id"));
          var memberLines = lines_1.fromString(",\n").join(path.map(print, "members"));
          if (memberLines.isEmpty()) {
            parts.push(" {}");
          } else {
            parts.push(" {\n", memberLines.indent(options.tabWidth), "\n}");
          }
          return lines_1.concat(parts);
        }
      case "TSExpressionWithTypeArguments":
        return lines_1.concat([path.call(print, "expression"), path.call(print, "typeParameters")]);
      case "TSInterfaceBody":
        {
          var lines = lines_1.fromString("\n").join(path.map(print, "body"));
          if (lines.isEmpty()) {
            return lines_1.fromString("{}", options);
          }
          return lines_1.concat(["{\n", lines.indent(options.tabWidth), "\n}"]);
        }
      case "TSImportType":
        parts.push("import(", path.call(print, "argument"), ")");
        if (n.qualifier) {
          parts.push(".", path.call(print, "qualifier"));
        }
        if (n.typeParameters) {
          parts.push(path.call(print, "typeParameters"));
        }
        return lines_1.concat(parts);
      case "TSImportEqualsDeclaration":
        if (n.isExport) {
          parts.push("export ");
        }
        parts.push("import ", path.call(print, "id"), " = ", path.call(print, "moduleReference"));
        return maybeAddSemicolon(lines_1.concat(parts));
      case "TSExternalModuleReference":
        return lines_1.concat(["require(", path.call(print, "expression"), ")"]);
      case "TSModuleDeclaration":
        {
          var parent = path.getParentNode();
          if (parent.type === "TSModuleDeclaration") {
            parts.push(".");
          } else {
            if (n.declare) {
              parts.push("declare ");
            }
            if (!n.global) {
              var isExternal = n.id.type === "StringLiteral" || n.id.type === "Literal" && typeof n.id.value === "string";
              if (isExternal) {
                parts.push("module ");
              } else if (n.loc && n.loc.lines && n.id.loc) {
                var prefix = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);
                // These keywords are fundamentally ambiguous in the
                // Babylon parser, and not reflected in the AST, so
                // the best we can do is to match the original code,
                // when possible.
                if (prefix.indexOf("module") >= 0) {
                  parts.push("module ");
                } else {
                  parts.push("namespace ");
                }
              } else {
                parts.push("namespace ");
              }
            }
          }
          parts.push(path.call(print, "id"));
          if (n.body) {
            parts.push(" ");
            parts.push(path.call(print, "body"));
          }
          return lines_1.concat(parts);
        }
      case "TSModuleBlock":
        {
          var naked = path.call(function (bodyPath) {
            return printStatementSequence(bodyPath, options, print);
          }, "body");
          if (naked.isEmpty()) {
            parts.push("{}");
          } else {
            parts.push("{\n", naked.indent(options.tabWidth), "\n}");
          }
          return lines_1.concat(parts);
        }
      // https://github.com/babel/babel/pull/10148
      case "V8IntrinsicIdentifier":
        return lines_1.concat(["%", path.call(print, "name")]);
      // https://github.com/babel/babel/pull/13191
      case "TopicReference":
        return lines_1.fromString("#");
      // Unhandled types below. If encountered, nodes of these types should
      // be either left alone or desugared into AST types that are fully
      // supported by the pretty-printer.
      case "ClassHeritage": // TODO
      case "ComprehensionBlock": // TODO
      case "ComprehensionExpression": // TODO
      case "Glob": // TODO
      case "GeneratorExpression": // TODO
      case "LetStatement": // TODO
      case "LetExpression": // TODO
      case "GraphExpression": // TODO
      case "GraphIndexExpression": // TODO
      case "XMLDefaultDeclaration":
      case "XMLAnyName":
      case "XMLQualifiedIdentifier":
      case "XMLFunctionQualifiedIdentifier":
      case "XMLAttributeSelector":
      case "XMLFilterExpression":
      case "XML":
      case "XMLElement":
      case "XMLList":
      case "XMLEscape":
      case "XMLText":
      case "XMLStartTag":
      case "XMLEndTag":
      case "XMLPointTag":
      case "XMLName":
      case "XMLAttribute":
      case "XMLCdata":
      case "XMLComment":
      case "XMLProcessingInstruction":
      default:
        debugger;
        throw new Error("unknown type: " + JSON.stringify(n.type));
    }
  }
  function printDecorators(path, printPath) {
    var parts = [];
    var node = path.getValue();
    if (node.decorators && node.decorators.length > 0 &&
    // If the parent node is an export declaration, it will be
    // responsible for printing node.decorators.
    !util.getParentExportDeclaration(path)) {
      path.each(function (decoratorPath) {
        parts.push(printPath(decoratorPath), "\n");
      }, "decorators");
    } else if (util.isExportDeclaration(node) && node.declaration && node.declaration.decorators) {
      // Export declarations are responsible for printing any decorators
      // that logically apply to node.declaration.
      path.each(function (decoratorPath) {
        parts.push(printPath(decoratorPath), "\n");
      }, "declaration", "decorators");
    }
    return lines_1.concat(parts);
  }
  function printStatementSequence(path, options, print) {
    var filtered = [];
    var sawComment = false;
    var sawStatement = false;
    path.each(function (stmtPath) {
      var stmt = stmtPath.getValue();
      // Just in case the AST has been modified to contain falsy
      // "statements," it's safer simply to skip them.
      if (!stmt) {
        return;
      }
      // Skip printing EmptyStatement nodes to avoid leaving stray
      // semicolons lying around.
      if (stmt.type === "EmptyStatement" && !(stmt.comments && stmt.comments.length > 0)) {
        return;
      }
      if (namedTypes.Comment.check(stmt)) {
        // The pretty printer allows a dangling Comment node to act as
        // a Statement when the Comment can't be attached to any other
        // non-Comment node in the tree.
        sawComment = true;
      } else if (namedTypes.Statement.check(stmt)) {
        sawStatement = true;
      } else {
        // When the pretty printer encounters a string instead of an
        // AST node, it just prints the string. This behavior can be
        // useful for fine-grained formatting decisions like inserting
        // blank lines.
        isString.assert(stmt);
      }
      // We can't hang onto stmtPath outside of this function, because
      // it's just a reference to a mutable FastPath object, so we have
      // to go ahead and print it here.
      filtered.push({
        node: stmt,
        printed: print(stmtPath)
      });
    });
    if (sawComment) {
      assert_1.default.strictEqual(sawStatement, false, "Comments may appear as statements in otherwise empty statement " + "lists, but may not coexist with non-Comment nodes.");
    }
    var prevTrailingSpace = null;
    var len = filtered.length;
    var parts = [];
    filtered.forEach(function (info, i) {
      var printed = info.printed;
      var stmt = info.node;
      var multiLine = printed.length > 1;
      var notFirst = i > 0;
      var notLast = i < len - 1;
      var leadingSpace;
      var trailingSpace;
      var lines = stmt && stmt.loc && stmt.loc.lines;
      var trueLoc = lines && options.reuseWhitespace && util.getTrueLoc(stmt, lines);
      if (notFirst) {
        if (trueLoc) {
          var beforeStart = lines.skipSpaces(trueLoc.start, true);
          var beforeStartLine = beforeStart ? beforeStart.line : 1;
          var leadingGap = trueLoc.start.line - beforeStartLine;
          leadingSpace = Array(leadingGap + 1).join("\n");
        } else {
          leadingSpace = multiLine ? "\n\n" : "\n";
        }
      } else {
        leadingSpace = "";
      }
      if (notLast) {
        if (trueLoc) {
          var afterEnd = lines.skipSpaces(trueLoc.end);
          var afterEndLine = afterEnd ? afterEnd.line : lines.length;
          var trailingGap = afterEndLine - trueLoc.end.line;
          trailingSpace = Array(trailingGap + 1).join("\n");
        } else {
          trailingSpace = multiLine ? "\n\n" : "\n";
        }
      } else {
        trailingSpace = "";
      }
      parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);
      if (notLast) {
        prevTrailingSpace = trailingSpace;
      } else if (trailingSpace) {
        parts.push(trailingSpace);
      }
    });
    return lines_1.concat(parts);
  }
  function maxSpace(s1, s2) {
    if (!s1 && !s2) {
      return lines_1.fromString("");
    }
    if (!s1) {
      return lines_1.fromString(s2);
    }
    if (!s2) {
      return lines_1.fromString(s1);
    }
    var spaceLines1 = lines_1.fromString(s1);
    var spaceLines2 = lines_1.fromString(s2);
    if (spaceLines2.length > spaceLines1.length) {
      return spaceLines2;
    }
    return spaceLines1;
  }
  function printMethod(path, options, print) {
    var node = path.getNode();
    var kind = node.kind;
    var parts = [];
    var nodeValue = node.value;
    if (!namedTypes.FunctionExpression.check(nodeValue)) {
      nodeValue = node;
    }
    var access = node.accessibility || node.access;
    if (typeof access === "string") {
      parts.push(access, " ");
    }
    if (node.static) {
      parts.push("static ");
    }
    if (node.abstract) {
      parts.push("abstract ");
    }
    if (node.override) {
      parts.push("override ");
    }
    if (node.readonly) {
      parts.push("readonly ");
    }
    if (nodeValue.async) {
      parts.push("async ");
    }
    if (nodeValue.generator) {
      parts.push("*");
    }
    if (kind === "get" || kind === "set") {
      parts.push(kind, " ");
    }
    var key = path.call(print, "key");
    if (node.computed) {
      key = lines_1.concat(["[", key, "]"]);
    }
    parts.push(key);
    if (node.optional) {
      parts.push("?");
    }
    if (node === nodeValue) {
      parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
      if (node.body) {
        parts.push(" ", path.call(print, "body"));
      } else {
        parts.push(";");
      }
    } else {
      parts.push(path.call(print, "value", "typeParameters"), "(", path.call(function (valuePath) {
        return printFunctionParams(valuePath, options, print);
      }, "value"), ")", path.call(print, "value", "returnType"));
      if (nodeValue.body) {
        parts.push(" ", path.call(print, "value", "body"));
      } else {
        parts.push(";");
      }
    }
    return lines_1.concat(parts);
  }
  function printArgumentsList(path, options, print) {
    var printed = path.map(print, "arguments");
    var trailingComma = util.isTrailingCommaEnabled(options, "parameters");
    var joined = lines_1.fromString(", ").join(printed);
    if (joined.getLineLength(1) > options.wrapColumn) {
      joined = lines_1.fromString(",\n").join(printed);
      return lines_1.concat(["(\n", joined.indent(options.tabWidth), trailingComma ? ",\n)" : "\n)"]);
    }
    return lines_1.concat(["(", joined, ")"]);
  }
  function printFunctionParams(path, options, print) {
    var fun = path.getValue();
    var params;
    var printed = [];
    if (fun.params) {
      params = fun.params;
      printed = path.map(print, "params");
    } else if (fun.parameters) {
      params = fun.parameters;
      printed = path.map(print, "parameters");
    }
    if (fun.defaults) {
      path.each(function (defExprPath) {
        var i = defExprPath.getName();
        var p = printed[i];
        if (p && defExprPath.getValue()) {
          printed[i] = lines_1.concat([p, " = ", print(defExprPath)]);
        }
      }, "defaults");
    }
    if (fun.rest) {
      printed.push(lines_1.concat(["...", path.call(print, "rest")]));
    }
    var joined = lines_1.fromString(", ").join(printed);
    if (joined.length > 1 || joined.getLineLength(1) > options.wrapColumn) {
      joined = lines_1.fromString(",\n").join(printed);
      if (util.isTrailingCommaEnabled(options, "parameters") && !fun.rest && params[params.length - 1].type !== "RestElement") {
        joined = lines_1.concat([joined, ",\n"]);
      } else {
        joined = lines_1.concat([joined, "\n"]);
      }
      return lines_1.concat(["\n", joined.indent(options.tabWidth)]);
    }
    return joined;
  }
  function maybePrintImportAssertions(path, options, print) {
    var n = path.getValue();
    if (n.assertions && n.assertions.length > 0) {
      var parts = [" assert {"];
      var printed = path.map(print, "assertions");
      var flat = lines_1.fromString(", ").join(printed);
      if (flat.length > 1 || flat.getLineLength(1) > options.wrapColumn) {
        parts.push("\n", lines_1.fromString(",\n").join(printed).indent(options.tabWidth), "\n}");
      } else {
        parts.push(" ", flat, " }");
      }
      return lines_1.concat(parts);
    }
    return lines_1.fromString("");
  }
  function printExportDeclaration(path, options, print) {
    var decl = path.getValue();
    var parts = ["export "];
    if (decl.exportKind && decl.exportKind === "type") {
      if (!decl.declaration) {
        parts.push("type ");
      }
    }
    var shouldPrintSpaces = options.objectCurlySpacing;
    namedTypes.Declaration.assert(decl);
    if (decl["default"] || decl.type === "ExportDefaultDeclaration") {
      parts.push("default ");
    }
    if (decl.declaration) {
      parts.push(path.call(print, "declaration"));
    } else if (decl.specifiers) {
      if (decl.specifiers.length === 1 && decl.specifiers[0].type === "ExportBatchSpecifier") {
        parts.push("*");
      } else if (decl.specifiers.length === 0) {
        parts.push("{}");
      } else if (decl.specifiers[0].type === "ExportDefaultSpecifier") {
        var unbracedSpecifiers_2 = [];
        var bracedSpecifiers_2 = [];
        path.each(function (specifierPath) {
          var spec = specifierPath.getValue();
          if (spec.type === "ExportDefaultSpecifier") {
            unbracedSpecifiers_2.push(print(specifierPath));
          } else {
            bracedSpecifiers_2.push(print(specifierPath));
          }
        }, "specifiers");
        unbracedSpecifiers_2.forEach(function (lines, i) {
          if (i > 0) {
            parts.push(", ");
          }
          parts.push(lines);
        });
        if (bracedSpecifiers_2.length > 0) {
          var lines_2 = lines_1.fromString(", ").join(bracedSpecifiers_2);
          if (lines_2.getLineLength(1) > options.wrapColumn) {
            lines_2 = lines_1.concat([lines_1.fromString(",\n").join(bracedSpecifiers_2).indent(options.tabWidth), ","]);
          }
          if (unbracedSpecifiers_2.length > 0) {
            parts.push(", ");
          }
          if (lines_2.length > 1) {
            parts.push("{\n", lines_2, "\n}");
          } else if (options.objectCurlySpacing) {
            parts.push("{ ", lines_2, " }");
          } else {
            parts.push("{", lines_2, "}");
          }
        }
      } else {
        parts.push(shouldPrintSpaces ? "{ " : "{", lines_1.fromString(", ").join(path.map(print, "specifiers")), shouldPrintSpaces ? " }" : "}");
      }
      if (decl.source) {
        parts.push(" from ", path.call(print, "source"), maybePrintImportAssertions(path, options, print));
      }
    }
    var lines = lines_1.concat(parts);
    if (lastNonSpaceCharacter(lines) !== ";" && !(decl.declaration && (decl.declaration.type === "FunctionDeclaration" || decl.declaration.type === "ClassDeclaration" || decl.declaration.type === "TSModuleDeclaration" || decl.declaration.type === "TSInterfaceDeclaration" || decl.declaration.type === "TSEnumDeclaration"))) {
      lines = lines_1.concat([lines, ";"]);
    }
    return lines;
  }
  function printFlowDeclaration(path, parts) {
    var parentExportDecl = util.getParentExportDeclaration(path);
    if (parentExportDecl) {
      assert_1.default.strictEqual(parentExportDecl.type, "DeclareExportDeclaration");
    } else {
      // If the parent node has type DeclareExportDeclaration, then it
      // will be responsible for printing the "declare" token. Otherwise
      // it needs to be printed with this non-exported declaration node.
      parts.unshift("declare ");
    }
    return lines_1.concat(parts);
  }
  function printVariance(path, print) {
    return path.call(function (variancePath) {
      var value = variancePath.getValue();
      if (value) {
        if (value === "plus") {
          return lines_1.fromString("+");
        }
        if (value === "minus") {
          return lines_1.fromString("-");
        }
        return print(variancePath);
      }
      return lines_1.fromString("");
    }, "variance");
  }
  function adjustClause(clause, options) {
    if (clause.length > 1) return lines_1.concat([" ", clause]);
    return lines_1.concat(["\n", maybeAddSemicolon(clause).indent(options.tabWidth)]);
  }
  function lastNonSpaceCharacter(lines) {
    var pos = lines.lastPos();
    do {
      var ch = lines.charAt(pos);
      if (/\S/.test(ch)) return ch;
    } while (lines.prevPos(pos));
  }
  function endsWithBrace(lines) {
    return lastNonSpaceCharacter(lines) === "}";
  }
  function swapQuotes(str) {
    return str.replace(/['"]/g, function (m) {
      return m === '"' ? "'" : '"';
    });
  }
  function getPossibleRaw(node) {
    var value = types.getFieldValue(node, "value");
    var extra = types.getFieldValue(node, "extra");
    if (extra && typeof extra.raw === "string" && value == extra.rawValue) {
      return extra.raw;
    }
    if (node.type === "Literal") {
      var raw = node.raw;
      if (typeof raw === "string" && value == raw) {
        return raw;
      }
    }
  }
  function jsSafeStringify(str) {
    return JSON.stringify(str).replace(/[\u2028\u2029]/g, function (m) {
      return "\\u" + m.charCodeAt(0).toString(16);
    });
  }
  function nodeStr(str, options) {
    isString.assert(str);
    switch (options.quote) {
      case "auto":
        {
          var double = jsSafeStringify(str);
          var single = swapQuotes(jsSafeStringify(swapQuotes(str)));
          return double.length > single.length ? single : double;
        }
      case "single":
        return swapQuotes(jsSafeStringify(swapQuotes(str)));
      case "double":
      default:
        return jsSafeStringify(str);
    }
  }
  function maybeAddSemicolon(lines) {
    var eoc = lastNonSpaceCharacter(lines);
    if (!eoc || "\n};".indexOf(eoc) < 0) return lines_1.concat([lines, ";"]);
    return lines;
  }
  return printer;
}

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.run = exports.prettyPrint = exports.print = exports.visit = exports.types = exports.parse = void 0;
  var tslib_1 = require$$0;
  var fs_1 = tslib_1.__importDefault(require$$1$2);
  var types = tslib_1.__importStar(requireMain());
  exports.types = types;
  var parser_1 = requireParser();
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function () {
      return parser_1.parse;
    }
  });
  var printer_1 = requirePrinter();
  /**
   * Traverse and potentially modify an abstract syntax tree using a
   * convenient visitor syntax:
   *
   *   recast.visit(ast, {
   *     names: [],
   *     visitIdentifier: function(path) {
   *       var node = path.value;
   *       this.visitor.names.push(node.name);
   *       this.traverse(path);
   *     }
   *   });
   */
  var ast_types_1 = requireMain();
  Object.defineProperty(exports, "visit", {
    enumerable: true,
    get: function () {
      return ast_types_1.visit;
    }
  });
  /**
   * Reprint a modified syntax tree using as much of the original source
   * code as possible.
   */
  function print(node, options) {
    return new printer_1.Printer(options).print(node);
  }
  exports.print = print;
  /**
   * Print without attempting to reuse any original source code.
   */
  function prettyPrint(node, options) {
    return new printer_1.Printer(options).printGenerically(node);
  }
  exports.prettyPrint = prettyPrint;
  /**
   * Convenient command-line interface (see e.g. example/add-braces).
   */
  function run(transformer, options) {
    return runFile(process.argv[2], transformer, options);
  }
  exports.run = run;
  function runFile(path, transformer, options) {
    fs_1.default.readFile(path, "utf-8", function (err, code) {
      if (err) {
        console.error(err);
        return;
      }
      runString(code, transformer, options);
    });
  }
  function defaultWriteback(output) {
    process.stdout.write(output);
  }
  function runString(code, transformer, options) {
    var writeback = options && options.writeback || defaultWriteback;
    transformer(parser_1.parse(code, options), function (node) {
      writeback(print(node, options).code);
    });
  }
})(main$1);

/**
 * @class AstParser
 * The ast parser.
 * @memberof BASE.THING
 */
class AstParser {
  /**
   * constructor.
   */
  constructor() {}
  static parse(code) {
    try {
      return main$1.parse(code);
    } catch (ex) {
      console.error(ex);
      return {};
    }
  }
  static visit(ast, options) {
    if (options === void 0) {
      options = {};
    }
    main$1.visit(ast, options);
  }
  static print(ast) {
    return main$1.print(ast).code;
  }
}

var __$1 = {
  private: Symbol('private')
};
var Flag = {
  Started: 1 << 0,
  Paused: 1 << 1
};

/**
 * @class Timer
 * The timer.
 * @memberof BASE.THING
 */
class Timer {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   * @param {Number} param.interval The interval in milliseconds.
   */
  constructor(param) {
    if (param === void 0) {
      param = {};
    }
    this[__$1.private] = {};
    var _private = this[__$1.private];
    _private.flags = new Flags();
    _private.elapsedTime = 0;
    _private.intervalElapsedTime = 0;
    _private.interval = param['interval'];
    _private.onInterval = param['onInterval'];

    // Auto start it
    this.start();
  }
  start() {
    var _private = this[__$1.private];
    _private.elapsedTime = 0;
    _private.flags.enable(Flag.Started, true);
    _private.flags.enable(Flag.Paused, false);
  }
  resume() {
    var _private = this[__$1.private];
    _private.flags.enable(Flag.Paused, false);
  }
  pause() {
    var _private = this[__$1.private];
    _private.flags.enable(Flag.Paused, true);
  }
  stop() {
    var _private = this[__$1.private];
    _private.flags.enable(Flag.Started, false);
    _private.flags.enable(Flag.Paused, false);
  }
  update(deltaTime) {
    var _private = this[__$1.private];
    var flags = _private.flags;
    if (!flags.has(Flag.Started) || flags.has(Flag.Paused)) {
      return;
    }
    _private.elapsedTime += deltaTime;
    if (!_private.interval) {
      return;
    }
    _private.intervalElapsedTime += deltaTime;
    if (_private.intervalElapsedTime < _private.interval) {
      return;
    }
    _private.intervalElapsedTime = 0;
    if (_private.onInterval) {
      _private.onInterval();
    }
  }
  get elapsedTime() {
    var _private = this[__$1.private];
    return _private.elapsedTime;
  }

  // #region Accessor

  /**
   * Get/Set interval time in seconds.
   * @type {Number}
   */
  get interval() {
    return this[__$1.private].interval;
  }
  set interval(value) {
    this[__$1.private].interval = value;
  }

  /**
   * Get/Set interval callback function
   * @type {Function}
   */
  get onInterval() {
    var _private = this[__$1.private];
    return _private.onInterval;
  }
  set onInterval(value) {
    var _private = this[__$1.private];
    _private.onInterval = value;
  }

  // #endregion
}

var __ = {
  private: Symbol('private')
};

/**
 * @class RandomGenerator
 * The random number generator.
 * @memberof BASE.THING
 */
class RandomGenerator {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(param) {
    if (param === void 0) {
      param = {};
    }
    this[__.private] = {};
    var _private = this[__.private];
    _private.randomSeed = Utils$1.parseValue(param['seed'], Math.floor(Math.random() * 0xffffffff));
  }

  /**
   * Set the random seed.
   * @param {Number} value The value.
   */
  setRandomSeed(value) {
    var _private = this[__.private];
    _private.seed = value;
  }

  /**
   * Get the random seed.
   * @returns {Number}
   */
  getRandomSeed() {
    var _private = this[__.private];
    return _private.seed;
  }

  /**
   * Generate next double number.
   * @returns {Number}
   */
  nextNumber() {
    var _private = this[__.private];
    _private.randomSeed = (_private.randomSeed * 9301 + 49297) % 233280;
    return _private.randomSeed / 233280.0;
  }

  /**
   * Generate next random boolean value.
   * @return {Boolean}
   */
  nextBoolean() {
    return !!(this.nextInt() % 2);
  }

  /**
   * Generate next random float value in [min, max] range.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @return {Number}
   */
  nextFloat(min, max) {
    if (min === void 0) {
      min = 0;
    }
    if (max === void 0) {
      max = 0xFFFFFFFF;
    }
    return this.nextNumber() * (max - min) + min;
  }

  /**
   * Generate next random integer value in [min, max] range.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @returns {Number}
   */
  nextInt(min, max) {
    if (min === void 0) {
      min = 0;
    }
    if (max === void 0) {
      max = 0xFFFFFFFF;
    }
    return Math.floor(this.nextNumber() * (max - min + 1)) + min;
  }

  // #endregion
}

function _checkObjectAttributes(object, attributes, onError) {
  if (!object) {
    return;
  }
  for (var i = 0; i < attributes.length; i++) {
    var attribute = attributes[i];
    if (object[attribute] === undefined) {
      if (onError) {
        onError(attribute);
      }
    }
  }
}
function _checkObjectFunctions(object, funcNames, onError) {
  if (!object) {
    return;
  }
  for (var i = 0; i < funcNames.length; i++) {
    var funcName = funcNames[i];
    if (!Utils$1.isFunction(object[funcName])) {
      if (onError) {
        onError(funcName);
      }
    }
  }
}
class TypeChecker {
  constructor(classTypes) {
    this._variables = {};
    this._classTypes = classTypes;

    // Here to record check operation, prevent check multiple times
    this._checkedTypes = {};
    this._init();
  }
  _init() {
    var _this = this;
    var that = this;

    // Register type checker for class type
    var _loop = function _loop(key) {
      var classType = _this._classTypes[key];

      // Create temporary variable
      _this._variables[key] = new classType();
      _this._checkedTypes[key] = function (object) {
        that._checkClassType(object, key);
      };
    };
    for (var key in this._classTypes) {
      _loop(key);
    }
  }
  _checkClassType(object, key) {
    var variable = this._variables[key];

    // Check attributes
    var attributeNames = Object.keys(variable);
    _checkObjectAttributes(object, attributeNames, function (attributeName) {
      Utils$1.error("Check class '" + key + "' attributes failed, due to '" + attributeName + "' is not existing");
    });

    // Check functions
    var funcNames = Utils$1.getFunctionsFromObject(variable);
    _checkObjectFunctions(object, funcNames, function (funcName) {
      // We define dummy function here to prevent printing many duplicated error logs.
      object.__proto__[funcName] = function () {};
      Utils$1.error("Check class '" + key + "' functions failed, due to '" + funcName + "' is not existing");
    });
  }

  // Check object properties and functions.
  checkObject(type, object) {
    var checkFunc = this._checkedTypes[type];
    if (checkFunc) {
      checkFunc(object);

      // Check only once
      this._checkedTypes[type] = null;
    }
  }
  getVariables() {
    return this._variables;
  }
}

// #region Private

function _getFromValue(value) {
  var strings = value.split('.');
  var major = parseInt(strings.length >= 1 ? strings[0] : 0);
  var minor = parseInt(strings.length >= 2 ? strings[1] : 0);
  var modified = parseInt(strings.length >= 3 ? strings[2] : 0);
  return {
    major,
    minor,
    modified
  };
}
function _compare(v1, v2) {
  if (v1.major != v2.major) {
    return v1.major > v2.major ? 1 : -1;
  }
  if (v1.minor != v2.minor) {
    return v1.minor > v2.minor ? 1 : -1;
  }
  if (v1.modified != v2.modified) {
    return v1.modified > v2.modified ? 1 : -1;
  }
  return 0;
}

// #endregion

/**
 * @class Version
 * The version.
 * @memberof BASE.THING
 */
class Version {
  /**
   * constructor.
   * @param {Object} param The initial parameters.
   */
  constructor(version) {
    if (version === void 0) {
      version = '';
    }
    this._major = 0;
    this._minor = 0;
    this._modified = 0;
    if (Utils$1.isString(version)) {
      this.fromString(version);
    } else if (version.isVersion) {
      this.copy(version);
    }
  }
  fromString(value) {
    var {
      major,
      minor,
      modified
    } = _getFromValue(value);
    this._major = major;
    this._minor = minor;
    this._modified = modified;
    return this;
  }
  toString() {
    return [this._major, this._minor, this._modified].join('.');
  }
  copy(version) {
    this._major = version.major;
    this._minor = version.minor;
    this._modified = version.modified;
    return this;
  }
  compare(version) {
    if (Utils$1.isString(version)) {
      var info = _getFromValue(version);
      return _compare(this, info);
    } else if (version.isVersion) {
      return _compare(this, version);
    }
    return 0;
  }
  isCompatibleWith(version) {
    if (this._major < version.major) {
      return false;
    }
    if (this._minor < version.minor) {
      return false;
    }
    if (this._modified < version.modified) {
      return false;
    }
    return true;
  }
  get major() {
    return this._major;
  }
  get minor() {
    return this._minor;
  }
  get modified() {
    return this._modified;
  }
  get isVersion() {
    return true;
  }
}

/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
    i = arguments.length;
  while (i--) {
    y += arguments[i] * arguments[i];
  }
  return Math.sqrt(y);
};

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create$4() {
  var out = new ARRAY_TYPE(9);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone$4(a) {
  var out = new ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function copy$4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues$4(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set$4(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity$2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function transpose$1(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
      a02 = a[2],
      a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }
  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function invert$2(out, a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2];
  var a10 = a[3],
    a11 = a[4],
    a12 = a[5];
  var a20 = a[6],
    a21 = a[7],
    a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;
  if (!det) {
    return null;
  }
  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint$1(out, a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2];
  var a10 = a[3],
    a11 = a[4],
    a12 = a[5];
  var a20 = a[6],
    a21 = a[7],
    a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant$1(a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2];
  var a10 = a[3],
    a11 = a[4],
    a12 = a[5];
  var a20 = a[6],
    a21 = a[7],
    a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply$3(out, a, b) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2];
  var a10 = a[3],
    a11 = a[4],
    a12 = a[5];
  var a20 = a[6],
    a21 = a[7],
    a22 = a[8];
  var b00 = b[0],
    b01 = b[1],
    b02 = b[2];
  var b10 = b[3],
    b11 = b[4],
    b12 = b[5];
  var b20 = b[6],
    b21 = b[7],
    b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function translate$1(out, a, v) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a10 = a[3],
    a11 = a[4],
    a12 = a[5],
    a20 = a[6],
    a21 = a[7],
    a22 = a[8],
    x = v[0],
    y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate$1(out, a, rad) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a10 = a[3],
    a11 = a[4],
    a12 = a[5],
    a20 = a[6],
    a21 = a[7],
    a22 = a[8],
    s = Math.sin(rad),
    c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale$4(out, a, v) {
  var x = v[0],
    y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation$1(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation$1(out, rad) {
  var s = Math.sin(rad),
    c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling$1(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function fromQuat$1(out, q) {
  var x = q[0],
    y = q[1],
    z = q[2],
    w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str$3(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob$1(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function add$4(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function subtract$2(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar$1(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd$1(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals$4(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$4(a, b) {
  var a0 = a[0],
    a1 = a[1],
    a2 = a[2],
    a3 = a[3],
    a4 = a[4],
    a5 = a[5],
    a6 = a[6],
    a7 = a[7],
    a8 = a[8];
  var b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul$3 = multiply$3;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub$2 = subtract$2;

var mat3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create$4,
  fromMat4: fromMat4,
  clone: clone$4,
  copy: copy$4,
  fromValues: fromValues$4,
  set: set$4,
  identity: identity$2,
  transpose: transpose$1,
  invert: invert$2,
  adjoint: adjoint$1,
  determinant: determinant$1,
  multiply: multiply$3,
  translate: translate$1,
  rotate: rotate$1,
  scale: scale$4,
  fromTranslation: fromTranslation$1,
  fromRotation: fromRotation$1,
  fromScaling: fromScaling$1,
  fromMat2d: fromMat2d,
  fromQuat: fromQuat$1,
  normalFromMat4: normalFromMat4,
  projection: projection,
  str: str$3,
  frob: frob$1,
  add: add$4,
  subtract: subtract$2,
  multiplyScalar: multiplyScalar$1,
  multiplyScalarAndAdd: multiplyScalarAndAdd$1,
  exactEquals: exactEquals$4,
  equals: equals$4,
  mul: mul$3,
  sub: sub$2
});

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create$3() {
  var out = new ARRAY_TYPE(16);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }
  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone$3(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy$3(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues$3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set$3(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity$1(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
      a02 = a[2],
      a03 = a[3];
    var a12 = a[6],
      a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }
  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert$1(out, a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply$2(out, a, b) {
  var a00 = a[0],
    a01 = a[1],
    a02 = a[2],
    a03 = a[3];
  var a10 = a[4],
    a11 = a[5],
    a12 = a[6],
    a13 = a[7];
  var a20 = a[8],
    a21 = a[9],
    a22 = a[10],
    a23 = a[11];
  var a30 = a[12],
    a31 = a[13],
    a32 = a[14],
    a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
    y = v[1],
    z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }
  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale$3(out, a, v) {
  var x = v[0],
    y = v[1],
    z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
    y = axis[1],
    z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;
  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX$2(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication

  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY$2(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication

  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ$2(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication

  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
    y = axis[1],
    z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
    y = q[1],
    z = q[2],
    w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0],
    by = -a[1],
    bz = -a[2],
    bw = a[3],
    ax = a[4],
    ay = a[5],
    az = a[6],
    aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }
  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;
  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
    y = q[1],
    z = q[2],
    w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
    y = q[1],
    z = q[2],
    w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
    y = q[1],
    z = q[2],
    w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
    nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }
  return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */

var perspective = perspectiveNO;
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
    nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }
  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Alias for {@link mat4.orthoNO}
 * @function
 */

var ortho = orthoNO;
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];
  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity$1(out);
  }
  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }
  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
    eyey = eye[1],
    eyez = eye[2],
    upx = up[0],
    upy = up[1],
    upz = up[2];
  var z0 = eyex - target[0],
    z1 = eyey - target[1],
    z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }
  var x0 = upy * z2 - upz * z1,
    x1 = upz * z0 - upx * z2,
    x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str$2(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add$3(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract$1(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals$3(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$3(a, b) {
  var a0 = a[0],
    a1 = a[1],
    a2 = a[2],
    a3 = a[3];
  var a4 = a[4],
    a5 = a[5],
    a6 = a[6],
    a7 = a[7];
  var a8 = a[8],
    a9 = a[9],
    a10 = a[10],
    a11 = a[11];
  var a12 = a[12],
    a13 = a[13],
    a14 = a[14],
    a15 = a[15];
  var b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3];
  var b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7];
  var b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11];
  var b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul$2 = multiply$2;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub$1 = subtract$1;

var mat4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create$3,
  clone: clone$3,
  copy: copy$3,
  fromValues: fromValues$3,
  set: set$3,
  identity: identity$1,
  transpose: transpose,
  invert: invert$1,
  adjoint: adjoint,
  determinant: determinant,
  multiply: multiply$2,
  translate: translate,
  scale: scale$3,
  rotate: rotate,
  rotateX: rotateX$2,
  rotateY: rotateY$2,
  rotateZ: rotateZ$2,
  fromTranslation: fromTranslation,
  fromScaling: fromScaling,
  fromRotation: fromRotation,
  fromXRotation: fromXRotation,
  fromYRotation: fromYRotation,
  fromZRotation: fromZRotation,
  fromRotationTranslation: fromRotationTranslation,
  fromQuat2: fromQuat2,
  getTranslation: getTranslation,
  getScaling: getScaling,
  getRotation: getRotation,
  fromRotationTranslationScale: fromRotationTranslationScale,
  fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
  fromQuat: fromQuat,
  frustum: frustum,
  perspectiveNO: perspectiveNO,
  perspective: perspective,
  perspectiveZO: perspectiveZO,
  perspectiveFromFieldOfView: perspectiveFromFieldOfView,
  orthoNO: orthoNO,
  ortho: ortho,
  orthoZO: orthoZO,
  lookAt: lookAt,
  targetTo: targetTo,
  str: str$2,
  frob: frob,
  add: add$3,
  subtract: subtract$1,
  multiplyScalar: multiplyScalar,
  multiplyScalarAndAdd: multiplyScalarAndAdd,
  exactEquals: exactEquals$3,
  equals: equals$3,
  mul: mul$2,
  sub: sub$1
});

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create$2() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone$2(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length$2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues$2(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function copy$2(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set$2(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function add$2(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function multiply$1(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale$2(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength$2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize$2(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }
  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot$2(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
    ay = a[1],
    az = a[2];
  var bx = b[0],
    by = b[1],
    bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp$2(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random$1(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  var z = RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
    y = a[1],
    z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
    y = a[1],
    z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
    qy = q[1],
    qz = q[2],
    qw = q[3];
  var x = a[0],
    y = a[1],
    z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
    uvy = qz * x - qx * z,
    uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
    uuvy = qz * uvx - qx * uvz,
    uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateX$1(out, a, b, rad) {
  var p = [],
    r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateY$1(out, a, b, rad) {
  var p = [],
    r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateZ$1(out, a, b, rad) {
  var p = [],
    r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var ax = a[0],
    ay = a[1],
    az = a[2],
    bx = b[0],
    by = b[1],
    bz = b[2],
    mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
    mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
    mag = mag1 * mag2,
    cosine = mag && dot$2(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str$1(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals$2(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals$2(a, b) {
  var a0 = a[0],
    a1 = a[1],
    a2 = a[2];
  var b0 = b[0],
    b1 = b[1],
    b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul$1 = multiply$1;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len$1 = length$2;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen$1 = squaredLength$2;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create$2();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
}();

var vec3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create$2,
  clone: clone$2,
  length: length$2,
  fromValues: fromValues$2,
  copy: copy$2,
  set: set$2,
  add: add$2,
  subtract: subtract,
  multiply: multiply$1,
  divide: divide,
  ceil: ceil,
  floor: floor,
  min: min,
  max: max,
  round: round,
  scale: scale$2,
  scaleAndAdd: scaleAndAdd,
  distance: distance,
  squaredDistance: squaredDistance,
  squaredLength: squaredLength$2,
  negate: negate,
  inverse: inverse,
  normalize: normalize$2,
  dot: dot$2,
  cross: cross,
  lerp: lerp$2,
  hermite: hermite,
  bezier: bezier,
  random: random$1,
  transformMat4: transformMat4,
  transformMat3: transformMat3,
  transformQuat: transformQuat,
  rotateX: rotateX$1,
  rotateY: rotateY$1,
  rotateZ: rotateZ$1,
  angle: angle,
  zero: zero,
  str: str$1,
  exactEquals: exactEquals$2,
  equals: equals$2,
  sub: sub,
  mul: mul$1,
  div: div,
  dist: dist,
  sqrDist: sqrDist,
  len: len$1,
  sqrLen: sqrLen$1,
  forEach: forEach
});

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create$1() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function clone$1(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues$1(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */

function copy$1(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function set$1(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function add$1(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale$1(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function length$1(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength$1(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize$1(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }
  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot$1(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function lerp$1(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals$1(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals$1(a, b) {
  var a0 = a[0],
    a1 = a[1],
    a2 = a[2],
    a3 = a[3];
  var b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$1();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
})();

/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);
  if (s > EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function multiply(out, a, b) {
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3];
  var bx = b[0],
    by = b[1],
    bz = b[2],
    bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3];
  var bx = Math.sin(rad),
    bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3];
  var by = Math.sin(rad),
    bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3];
  var bz = Math.sin(rad),
    bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
    y = a[1],
    z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3];
  var bx = b[0],
    by = b[1],
    bz = b[2],
    bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients

  if (1.0 - cosom > EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values

  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = RANDOM();
  var u2 = RANDOM();
  var u3 = RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */

function invert(out, a) {
  var a0 = a[0],
    a1 = a[1],
    a2 = a[2],
    a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;
  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }
  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var clone = clone$1;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues = fromValues$1;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var copy = copy$1;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var set = set$1;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */

var add = add$1;
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var scale = scale$1;
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = dot$1;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var lerp = lerp$1;
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */

var length = length$1;
/**
 * Alias for {@link quat.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = squaredLength$1;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize = normalize$1;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var exactEquals = exactEquals$1;
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat} a The first vector.
 * @param {ReadonlyQuat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var equals = equals$1;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = create$2();
  var xUnitVec3 = fromValues$2(1, 0, 0);
  var yUnitVec3 = fromValues$2(0, 1, 0);
  return function (out, a, b) {
    var dot = dot$2(a, b);
    if (dot < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (len$1(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
      normalize$2(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = create();
  var temp2 = create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = create$4();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize(out, fromMat3(out, matr));
  };
}();

var quat = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create,
  identity: identity,
  setAxisAngle: setAxisAngle,
  getAxisAngle: getAxisAngle,
  getAngle: getAngle,
  multiply: multiply,
  rotateX: rotateX,
  rotateY: rotateY,
  rotateZ: rotateZ,
  calculateW: calculateW,
  exp: exp,
  ln: ln,
  pow: pow,
  slerp: slerp,
  random: random,
  invert: invert,
  conjugate: conjugate,
  fromMat3: fromMat3,
  fromEuler: fromEuler,
  str: str,
  clone: clone,
  fromValues: fromValues,
  copy: copy,
  set: set,
  add: add,
  mul: mul,
  scale: scale,
  dot: dot,
  lerp: lerp,
  length: length,
  len: len,
  squaredLength: squaredLength,
  sqrLen: sqrLen,
  normalize: normalize,
  exactEquals: exactEquals,
  equals: equals,
  rotationTo: rotationTo,
  sqlerp: sqlerp,
  setAxes: setAxes
});

function QuadraticBezierP0(t, p) {
  var k = 1 - t;
  return k * k * p;
}
function QuadraticBezierP1(t, p) {
  return 2 * (1 - t) * t * p;
}
function QuadraticBezierP2(t, p) {
  return t * t * p;
}
function QuadraticBezier(t, p0, p1, p2) {
  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
}
function getQuadraticBezierPoint(p0, p1, p2, t) {
  var point = [QuadraticBezier(t, p0[0], p1[0], p2[0]), QuadraticBezier(t, p0[1], p1[1], p2[1]), QuadraticBezier(t, p0[2], p1[2], p2[2])];
  return point;
}
class BezierPathGenerator {
  constructor(divisions) {
    if (divisions === void 0) {
      divisions = 50;
    }
    this._divisions = divisions;
  }
  getPoints(a, b, c) {
    var points = [];
    for (var d = 0; d <= this._divisions; d++) {
      points.push(getQuadraticBezierPoint(a, b, c, d / this._divisions));
    }
    return points.map(item => [item[0], item[1], item[2]]);
  }
  splitPoints(points, near) {
    var length = points.length;
    var arr = [];
    for (var i = 0; i < length - 2; i += 1) {
      var v1 = this.getNearPoint(points[i], points[i + 1], near);
      var v2 = this.getNearPoint(points[i + 1], points[i + 2], near);
      arr.push([points[i], [v1[0], v1[1], v1[2]], points[i + 1], [v2[0], v2[1], v2[2]], points[i + 2]]);
    }
    return arr;
  }
  getNearPoint(p1, p2, near) {
    var point = [0, 0, 0];
    point[0] = p1[0] + near * (p2[0] - p1[0]);
    point[1] = p1[1] + near * (p2[1] - p1[1]);
    point[2] = p1[2] + near * (p2[2] - p1[2]);
    return point;
  }
}

// Rewrite all glm create interface, we must NOT use float32Array due to the precision is not enough
setMatrixArrayType(Array);
var _vec3_0 = create$2();
var _vec3_1 = create$2();
var _vec3_2 = create$2();
var _mat4 = create$3();
var _mat4_1 = create$3();
var _mat4_2 = create$3();
var _position = create$2();
var _quat = create();
var _scale = create$2();
var _original_scale = [1, 1, 1];
var _identity_mat4 = identity$1([]);

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
var lut = [];
for (var i = 0; i < 256; i++) {
  lut[i] = (i < 16 ? '0' : '') + i.toString(16).toUpperCase();
}
function _eulerToQuat(out, x, y, z) {
  var c1 = Math.cos(x);
  var c2 = Math.cos(y);
  var c3 = Math.cos(z);
  var s1 = Math.sin(x);
  var s2 = Math.sin(y);
  var s3 = Math.sin(z);
  out[0] = s1 * c2 * c3 + c1 * s2 * s3;
  out[1] = c1 * s2 * c3 - s1 * c2 * s3;
  out[2] = c1 * c2 * s3 + s1 * s2 * c3;
  out[3] = c1 * c2 * c3 - s1 * s2 * s3;
  return out;
}

/**
 * @class
 * The math utils.
 * @memberof BASE.THING
 */
class MathUtils {
  /**
   * Check whether it's the same number.
   * @param {Number} v1 The first number.
   * @param {Number} v2 The second number.
   * @param {Number} [epsilon=0.001] The epsilon range.
   */
  static equalsNumber(v1, v2, epsilon) {
    if (epsilon === void 0) {
      epsilon = 0.0001;
    }
    return MathUtils.abs(v1 - v2) < epsilon;
  }

  /**
   * Generate UUID.
   * @return {String}
   */
  static generateUUID() {
    var d0 = Math.random() * 0xffffffff | 0; // '|0' to make sure convert Float -> Int
    var d1 = Math.random() * 0xffffffff | 0;
    var d2 = Math.random() * 0xffffffff | 0;
    var d3 = Math.random() * 0xffffffff | 0;
    var uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];
    return uuid;
  }

  /**
   * Clamp number in range.
   * @param {Number} value The current value.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @return {Number}
   */
  static clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }

  /**
   * Generate random boolean value.
   * @return {Boolean}
   */
  static randomBoolean() {
    return !!(MathUtils.randomInt() % 2);
  }

  /**
   * Generate random float value in [min, max] range.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @return {Number}
   */
  static randomFloat(min, max) {
    if (min === void 0) {
      min = 0;
    }
    if (max === void 0) {
      max = 0xFFFFFFFF;
    }
    return Math.random() * (max - min) + min;
  }

  /**
   * Generate random integer value in [min, max] range.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @return {Number}
   */
  static randomInt(min, max) {
    if (min === void 0) {
      min = 0;
    }
    if (max === void 0) {
      max = 0xFFFFFFFF;
    }
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  /**
   * Get the index from array randomly.
   * @param {Array<*>} arr The array.
   * @return {*} The element of array.
   */
  static randomIndexFromArray(arr) {
    return MathUtils.randomInt(0, arr.length - 1);
  }

  /**
   * Get the element from array randomly.
   * @param {Array<*>} arr The array.
   * @return {*} The element of array.
   */
  static randomFromArray(arr) {
    var index = MathUtils.randomIndexFromArray(arr);
    return arr[index];
  }

  /**
   * Get the element key from object randomly.
   * @param {Object} object The object.
   * @param {String|Array<String>} excludeKey The exclude key(s) of object.
   * @return {String} The element key of object.
   */
  static randomKeyFromObject(object, excludeKey) {
    var keys = Object.keys(object);
    if (excludeKey) {
      if (Utils$1.isArray(excludeKey)) {
        excludeKey.forEach(key => {
          var keyIndex = keys.indexOf(key);
          if (keyIndex !== -1) {
            keys.splice(keyIndex, 1);
          }
        });
      } else {
        var keyIndex = keys.indexOf(excludeKey);
        if (keyIndex !== -1) {
          keys.splice(keyIndex, 1);
        }
      }
    }
    var index = MathUtils.randomIndexFromArray(keys);
    return keys[index];
  }

  /**
   * Get the element from object randomly.
   * @param {Object} object The object.
   * @param {String|Array<String>} excludeKey The exclude key(s) of object.
   * @return {*} The element of object.
   */
  static randomFromObject(object, excludeKey) {
    var key = MathUtils.randomKeyFromObject(object, excludeKey);
    return object[key];
  }

  /**
   * Convert degree to radian.
   * @param {Number} degree The degree number.
   * @return {Number}
   */
  static degToRad(degree) {
    return degree * MathUtils.DEG2RAD;
  }

  /**
   * Convert radian to degree .
   * @param {Number} radian The randian number.
   * @return {Number}
   */
  static radToDeg(radian) {
    return radian * MathUtils.RAD2DEG;
  }

  /**
   * Convert angles to randians.
   * @param {Array<Number>} angles The angles.
   * @return {Array<Number>}
   */
  static anglesToRadians(angles) {
    return angles.map(angle => {
      return MathUtils.degToRad(angle);
    });
  }

  /**
   * Convert randians to angles.
   * @param {Array<Number>} radians The radians.
   * @return {Array<Number>}
   */
  static radiansToAngles(radians) {
    return radians.map(radian => {
      return MathUtils.radToDeg(radian);
    });
  }

  /**
   * Check whether is prime number.
   * @param {Number} value The number.
   * @return {Boolean}
   */
  static isPrime(value) {
    for (var _i = 2, s = Math.sqrt(value); _i <= s; _i++) {
      if (value % _i === 0) {
        return false;
      }
    }
    return value > 1;
  }

  /**
   * Get the max aligned value.
   * @param {Number} value The value.
   * @param {Number} alignedValue The value what you want to align.
   * @return {Number}
   */
  static ceilAlign(value, alignedValue) {
    var temp = value % alignedValue;
    if (temp) {
      return value + alignedValue - temp;
    } else {
      return value;
    }
  }

  /**
   * Get the min aligned value.
   * @param {Number} value The value.
   * @param {Number} alignedValue The value what you want to arrange.
   * @return {Number}
   */
  static floorAlign(value, alignedValue) {
    return value - value % alignedValue;
  }

  /**
   * Check whether it's power of 2.
   * @param {Number} value
   * @return {Boolean}
   */
  static isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
  }

  /**
   * Get the max number for power of 2.
   * @param {Number} value
   * @return {Number}
   */
  static ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  }

  /**
   * Get the min number for power of 2.
   * @param {Number} value
   * @return {Number}
   */
  static floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  }

  /**
   * Convert number to integer.
   * @param {Number} value The number
   * @return {Number}
   */
  static toInteger(value) {
    value = +value;
    if (value !== value) {
      // isNaN
      value = 0;
    } else if (value !== 0 && value !== 1 / 0 && value !== -(1 / 0)) {
      value = (value > 0 || -1) * Math.floor(Math.abs(value));
    }
    return value;
  }

  /**
   * Get the fraction of number.
   * @param {Number} x The number.
   * @return {Number}
   */
  static fract(x) {
    return x - Math.floor(x);
  }

  /**
   * Exchange the element of array.
   * @param {Array} arr The array.
   * @param {Number} index1 The first element's index.
   * @param {Number} index2 The second element's index.
   * @return {Array}
   */
  static swapArray(arr, index1, index2) {
    arr[index1] = arr.splice(index2, 1, arr[index1])[0];
    return arr;
  }

  /**
   * Round up the number.
   * @param {Number} value The value number.
   * @param {Number} length The length of fraction.
   * @return {Number}
   */
  static roundUp(value, length) {
    if (typeof value == 'number') {
      var t = 1;
      for (; length > 0; t *= 10, length--) {
      }
      for (; length < 0; t /= 10, length++) {
      }
      return Math.round(value * t) / t;
    } else {
      return value;
    }
  }

  /**
   * Convert number to hex string format.
   * @param {Number} value The number.
   * @param {String} [pattern="00000000"] The pattern, default is 32 bits mode.
   * @returns {String}
   */
  static toHexNumberString(value, pattern) {
    if (pattern === void 0) {
      pattern = "00000000";
    }
    var sign = value < 0 ? true : false;
    value = value.toString(16);
    if (sign) {
      value = value.substring(1);
    }
    var hexString = pattern + value;
    hexString = hexString.substring(value.length, hexString.length);
    if (sign) {
      hexString = '-' + hexString;
    }
    return hexString;
  }

  /**
   * Get the distance between vectors (squared).
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @return {Number}
   */
  static getDistanceToSquared(v1, v2) {
    if (v1.length == 2 && v2.length == 2) {
      var dx = v1[0] - v2[0],
        dy = v1[1] - v2[1];
      return dx * dx + dy * dy;
    } else {
      var dx = v1[0] - v2[0],
        dy = v1[1] - v2[1],
        dz = v1[2] - v2[2];
      return dx * dx + dy * dy + dz * dz;
    }
  }

  /**
   * Get the distance between vectors.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @return {Number}
   */
  static getDistance(v1, v2) {
    return Math.sqrt(MathUtils.getDistanceToSquared(v1, v2));
  }

  /**
   * Generate random vector in [min, max] range.
   * @param {Array<Number>} min The min vector.
   * @param {Array<Number>} max The max vector.
   * @return {Array<Number>}
   */
  static randomVector(min, max) {
    if (min.length == 2) {
      return [MathUtils.randomFloat(min[0], max[0]), MathUtils.randomFloat(min[1], max[1])];
    } else if (min.length == 3) {
      return [MathUtils.randomFloat(min[0], max[0]), MathUtils.randomFloat(min[1], max[1]), MathUtils.randomFloat(min[2], max[2])];
    }
    return null;
  }

  /**
   * Generate random vector [x, y] in [min, max] range.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @return {Array<Number>}
   */
  static randomVector2Range(min, max) {
    return MathUtils.randomVector([min, min], [max, max]);
  }

  /**
   * Generate random vector [x, y, z] in [min, max] range.
   * @param {Number} min The min value.
   * @param {Number} max The max value.
   * @return {Array<Number>}
   */
  static randomVector3Range(min, max) {
    return MathUtils.randomVector([min, min, min], [max, max, max]);
  }

  /**
   * Generate random color.
   * @return {Number}
   */
  static randomColor() {
    return MathUtils.randomInt(0, 0xFFFFFF);
  }

  /**
   * Lerp number.
   * @param {Number} start The start number.
   * @param {Number} end The end number.
   * @param {Number} alpha The alpha between [0, 1]
   * @return {Number}
   */
  static lerp(start, end, alpha) {
    return start + (end - start) * alpha;
  }

  /**
   * Lerp vector.
   * @param {Array<Number>} start The start vector.
   * @param {Array<Number>} end The end vector.
   * @param {Number} alpha The alpha between [0, 1]
   * @return {Array<Number>}
   */
  static lerpVector(start, end, alpha) {
    return [start[0] + (end[0] - start[0]) * alpha, start[1] + (end[1] - start[1]) * alpha, start[2] + (end[2] - start[2]) * alpha];
  }

  /**
   * Check whether vectors is the same.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @param {Number} [epsilon=0.001] The epsilon range.
   * @returns {Boolean}
   */
  static equalsVector(v1, v2, epsilon) {
    if (epsilon === void 0) {
      epsilon = 0.0001;
    }
    if (v1.length === 2) {
      if (!MathUtils.equalsNumber(v1[0], v2[0], epsilon) || !MathUtils.equalsNumber(v1[1], v2[1], epsilon)) {
        return false;
      }
    } else if (v1.length === 3) {
      if (!MathUtils.equalsNumber(v1[0], v2[0], epsilon) || !MathUtils.equalsNumber(v1[1], v2[1], epsilon) || !MathUtils.equalsNumber(v1[2], v2[2], epsilon)) {
        return false;
      }
    }
    return true;
  }

  /**
   * Check whether [XYZ] vectors is the same.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @param {Number} [epsilon=0.001] The epsilon range.
   * @returns {Boolean}
   */
  static equalsVector3(v1, v2, epsilon) {
    if (epsilon === void 0) {
      epsilon = 0.0001;
    }
    if (!MathUtils.equalsNumber(v1[0], v2[0], epsilon) || !MathUtils.equalsNumber(v1[1], v2[1], epsilon) || !MathUtils.equalsNumber(v1[2], v2[2], epsilon)) {
      return false;
    }
    return true;
  }

  /**
   * Check whether [XYZ] vectors is the same in exact mode.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @returns {Boolean}
   */
  static exactEqualsVector3(v1, v2) {
    if (v1[0] != v2[0] || v1[1] != v2[1] || v1[2] != v2[2]) {
      return false;
    }
    return true;
  }

  /**
   * Check whether it's zero vector.
   * @param {Array<Number>} v The vector.
   * @return {Boolean}
   */
  static isZeroVector(v) {
    if (v) {
      for (var i = 0; i < v.length; i++) {
        if (v[0]) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * Add vector.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @param {Array<Number>} result? The result.
   * @return {Array<Number>}
   */
  static addVector(v1, v2, result) {
    result = result || [];
    if (Utils$1.isNumber(v2)) {
      result[0] = v1[0] + v2;
      result[1] = v1[1] + v2;
      result[2] = v1[2] + v2;
    } else {
      result[0] = v1[0] + v2[0];
      result[1] = v1[1] + v2[1];
      result[2] = v1[2] + v2[2];
    }
    return result;
  }

  /**
   * Sub vector.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @param {Array<Number>} result? The result.
   * @return {Array<Number>}
   */
  static subVector(v1, v2, result) {
    result = result || [];
    if (Utils$1.isNumber(v2)) {
      result[0] = v1[0] - v2;
      result[1] = v1[1] - v2;
      result[2] = v1[2] - v2;
    } else {
      result[0] = v1[0] - v2[0];
      result[1] = v1[1] - v2[1];
      result[2] = v1[2] - v2[2];
    }
    return result;
  }

  /**
   * Scale vector.
   * @param {Array<Number>} v The vector.
   * @param {Array<Number>} scale The factor or vector.
   * @param {Array<Number>} result? The result.
   * @return {Array<Number>}
   */
  static scaleVector(v, scale, result) {
    result = result || [];
    if (Utils$1.isNumber(scale)) {
      result[0] = v[0] * scale;
      result[1] = v[1] * scale;
      result[2] = v[2] * scale;
    } else {
      result[0] = v[0] * scale[0];
      result[1] = v[1] * scale[1];
      result[2] = v[2] * scale[2];
    }
    return result;
  }

  /**
   * Divide vector.
   * @param {Array<Number>} v The vector.
   * @param {Array<Number>} scale The factor or vector.
   * @param {Array<Number>} result? The result.
   * @return {Array<Number>}
   */
  static divideVector(v, scale, result) {
    result = result || [];
    if (Utils$1.isNumber(scale)) {
      result[0] = v[0] / scale;
      result[1] = v[1] / scale;
      result[2] = v[2] / scale;
    } else {
      result[0] = v[0] / scale[0];
      result[1] = v[1] / scale[1];
      result[2] = v[2] / scale[2];
    }
    return result;
  }

  /**
   * Clamp vector.
   * @param {Array<Number>} v The vector.
   * @param {Array<Number>} min The min vector.
   * @param {Array<Number>} max The max vector.
   * @return {Array<Number>}
   */
  static clampVector(v, min, max) {
    return [Math.max(min[0], Math.min(max[0], v[0])), Math.max(min[1], Math.min(max[1], v[1])), Math.max(min[2], Math.min(max[2], v[2]))];
  }

  /**
   * Get the dot of vectors.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @return {Number}
   */
  static dotVector(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
  }

  /**
   * Get the cross vector of vectors.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @return {Array<Number>}
   */
  static crossVector(v1, v2) {
    return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]];
  }

  /**
   * Get the negative vector.
   * @param {Array<Number>} v The vector.
   * @return {Array<Number>}
   */
  static negVector(v) {
    return [-v[0], -v[1], -v[2]];
  }

  /**
   * Get the normalize vector.
   * @param {Array<Number>} v The vector.
   * @return {Array<Number>}
   */
  static normalizeVector(v, target) {
    if (target === void 0) {
      target = [0, 0, 0];
    }
    return normalize$2(target, v);
  }

  /**
   * Get the min vector.
   * @param {Array<Array<Number>>} points The points.
   * @return {Array<Number>}
   */
  static minVector(points) {
    if (!points.length) {
      return null;
    }
    if (points.length === 1) {
      return points[0].slice(0);
    }
    var minPoint = points[0].slice(0);
    for (var i = 1; i < points.length; i++) {
      var point = points[i];
      minPoint[0] = Math.min(minPoint[0], point[0]);
      minPoint[1] = Math.min(minPoint[1], point[1]);
      minPoint[2] = Math.min(minPoint[2], point[2]);
    }
    return minPoint;
  }

  /**
   * Get the max vector.
   * @param {Array<Array<Number>>} points The points.
   * @return {Array<Number>}
   */
  static maxVector(points) {
    if (!points.length) {
      return null;
    }
    if (points.length === 1) {
      return points[0].slice(0);
    }
    var maxPoint = points[0].slice(0);
    for (var i = 1; i < points.length; i++) {
      var point = points[i];
      maxPoint[0] = Math.max(maxPoint[0], point[0]);
      maxPoint[1] = Math.max(maxPoint[1], point[1]);
      maxPoint[2] = Math.max(maxPoint[2], point[2]);
    }
    return maxPoint;
  }

  /**
   * Get vector3 from matrix column.
   * @param {Array<Number>} matrix The matrix.
   * @param {Number} index The index of column.
   * @return {Array<Number>}
   */
  static getVec3FromMatrixColumn(matrix, index) {
    var offset = index * 4;
    return [matrix[offset], matrix[offset + 1], matrix[offset + 2]];
  }

  /**
   * Transform direction
   * @param {Array<Number>} vector The vector.
   * @param {Array<Number>} matrix The matrix.
   */
  static transformDirection(vector, matrix) {
    var x = vector[0],
      y = vector[1],
      z = vector[2];
    var e = matrix;
    var target = [0, 0, 0];
    target[0] = e[0] * x + e[4] * y + e[8] * z;
    target[1] = e[1] * x + e[5] * y + e[9] * z;
    target[2] = e[2] * x + e[6] * y + e[10] * z;
    return MathUtils.normalizeVector(target);
  }

  /**
   * Get the length of vector.
   * @param {Array<Number>} v The vector.
   * @return {Number}
   */
  static getVectorLength(v) {
    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  }

  /**
   * Get the length of vector (do not use Math.sqrt()).
   * @param {Array<Number>} v The vector.
   * @return {Number}
   */
  static getVectorLengthSquared(v) {
    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
  }

  /**
   * Get the direction vector.
   * @param {Array<Number>} v1 The start vector.
   * @param {Array<Number>} v2 The end vector.
   * @return {Array<Number>}
   */
  static getDirection(v1, v2) {
    var dir = MathUtils.subVector(v2, v1);
    return MathUtils.normalizeVector(dir);
  }

  /**
   * Get the distance from points.
   * @param {Array<Array<Number>>} points The points.
   * @param {Boolean} closure True indicates it's closure lines.
   * @return {Number}
   */
  static getDistanceFromPoints(points, closure) {
    if (closure === void 0) {
      closure = false;
    }
    if (!points || points.length < 2) {
      return 0;
    }
    var distance = 0;
    for (var i = 0; i < points.length - 1; i++) {
      distance += MathUtils.getDistance(points[i], points[i + 1]);
    }
    if (closure) {
      distance += MathUtils.getDistance(points[points.length - 1], points[0]);
    }
    return distance;
  }

  /**
   * Get the center from points.
   * @param {Array<Array<Number>>} points The points.
   * @return {Array<Number>}
   */
  static getCenterFromPoints(points) {
    if (!points) {
      return [0, 0, 0];
    }
    var center = [0, 0, 0];
    points.forEach(point => {
      center[0] += point[0];
      center[1] += point[1];
      center[2] += point[2];
    });
    center[0] /= points.length;
    center[1] /= points.length;
    center[2] /= points.length;
    return center;
  }

  /**
   * Create new points with removing duplicate points.
   * @param {Array<Array<Number>>} points The points.
   * @param {Number} [epsilon=0.001] The epsilon range.
   * @return {Array<Array<Number>>}
   */
  static toUniquePoints(points, epsilon) {
    if (epsilon === void 0) {
      epsilon = 0.0001;
    }
    var results = [];
    points.forEach(point => {
      for (var i = 0; i < results.length; i++) {
        var result = results[i];
        if (MathUtils.equalsVector(result, point, epsilon)) {
          return;
        }
      }
      results.push(point);
    });
    return results;
  }

  /**
   * Get the angle between vectors.
   * @param {Array<Number>} v1 The first vector.
   * @param {Array<Number>} v2 The second vector.
   * @return {Number}
   */
  static getAngleBetweenVectors(v1, v2) {
    if (v1.length === 2) {
      var dot = v1[0] * v2[0] + v1[1] * v2[1];
      var det = v1[0] * v2[1] - v1[1] * v2[0];
      var radian = Math.atan2(det, dot);
      return MathUtils.radToDeg(radian);
    } else if (v1.length === 3) {
      v1 = MathUtils.normalizeVector(v1);
      v2 = MathUtils.normalizeVector(v2);
      var dot = MathUtils.dotVector(v1, v2);
      // force dot into acceptable range.
      if (dot > 1 && dot < 1 + MathUtils.TOLERANCE) {
        dot = 1;
      } else if (dot < -1 && dot > -1 - MathUtils.TOLERANCE) {
        dot = -1;
      }
      return MathUtils.radToDeg(MathUtils.acos(dot));
    }
    return 0;
  }

  /**
   * Get area by points in plane(2D).
   * @param {Array<Array<Number>>} points The points.
   * @return {Number}
   */
  static getArea(points) {
    var n = points.length;
    var a = 0.0;
    for (var p = n - 1, q = 0; q < n; p = q++) {
      a += points[p][0] * points[q][1] - points[q][0] * points[p][1];
    }
    return a * 0.5;
  }

  /**
   * Check whether it's clockwise.
   * @param {Array<Array<Number>>} points The points.
   * @return {Boolean}
   */
  static isClockWise(points) {
    return MathUtils.getArea(points) < 0;
  }

  /**
   * Make points as clockwise points.
   * @param {Array<Array<Number>>} points The points.
   * @return {Array<Array<Number>>}
   */
  static makeClockWisePoints(points) {
    // Thanks for sharing code: https://stackoverflow.com/questions/45660743/sort-points-in-counter-clockwise-in-javascript

    var _points = points.slice(0);

    // Find min max to get center
    // Sort from top to bottom
    _points.sort((a, b) => a[1] - b[1]);

    // Get center y
    var cy = (_points[0][1] + _points[_points.length - 1][1]) / 2;

    // Sort from right to left
    _points.sort((a, b) => b[0] - a[0]);

    // Get center x
    var cx = (_points[0][0] + _points[_points.length - 1][0]) / 2;

    // Center point
    var center = [cx, cy];

    // Pre calculate the angles as it will be slow in the sort
    // As the points are sorted from right to left the first point
    // is the rightmost

    // Starting angle used to reference other angles
    var startAng;
    _points.forEach(point => {
      var ang = Math.atan2(point[1] - center[1], point[0] - center[0]);
      if (!startAng) {
        startAng = ang;
      } else {
        if (ang < startAng) {
          // ensure that all points are clockwise of the start point
          ang += Math.PI * 2;
        }
      }
      point.angle = ang; // add the angle to the point
    });

    // first sort clockwise
    _points.sort((a, b) => a.angle - b.angle);

    // then reverse the order
    var ccwPoints = _points.reverse();

    // move the last point back to the start
    ccwPoints.unshift(ccwPoints.pop());
    return ccwPoints.map(point => {
      return [point[0], point[1]];
    });
  }
  static intersectPoint(point, region) {
    var x = point[0];
    var y = point[1];
    if (x < region[0]) {
      return false;
    }
    if (x > region[2]) {
      return false;
    }
    if (y < region[1]) {
      return false;
    }
    if (y > region[3]) {
      return false;
    }
    return true;
  }

  /**
   * Get the offset from phi(horzAngle) and theta(vertAngle).
   * @param {Number} horzAngle The horz(phi) angle, 0 indicates z+ axix.
   * @param {Number} vertAngle The vert(theta) angle, 90 indicates y+ axix.
   * @return {Array<Number>}
   */
  static getDirectionFromAngles(horzAngle, vertAngle) {
    var theta = vertAngle / 180 * Math.PI + Math.PI / 2;
    var phi = -horzAngle / 180 * Math.PI + Math.PI / 2;
    var r = Math.sin(theta);
    return [r * Math.cos(phi), -Math.cos(theta), r * Math.sin(phi)];
  }

  /**
   * Get the offset position by angles.
   * @param {Number} horzAngle The horz(phi) angle.
   * @param {Number} vertAngle The vert(theta) angle.
   * @param {Number} distance The distance.
   * @return {Array<Number>}
   */
  static getOffsetFromAngles(horzAngle, vertAngle, distance) {
    var direction = MathUtils.getDirectionFromAngles(horzAngle, vertAngle);
    return scale$2(direction, direction, distance);
  }

  /**
   * Get the horz(theta) and vert(phi) angles by offset position.
   * @param {Array<Number>} offset The offset position.
   * @return {Array<Number>} The [0] is horz angle and [1] is vert angle.
   */
  static getAnglesFromOffset(offset) {
    if (!offset) {
      return [0, 0];
    }
    normalize$2(_vec3_0, offset);
    var theta = -Math.acos(_vec3_0[1]);
    var phi = Math.acos(_vec3_0[0]);
    var horzAngle = MathUtils.radToDeg(phi);
    var vertAngle = MathUtils.radToDeg(theta);
    horzAngle = 90 - horzAngle;
    if (vertAngle > 0 && vertAngle < 0.001) {
      vertAngle = 90;
    } else {
      if (vertAngle < 90) {
        vertAngle = 90 - vertAngle;
      } else {
        vertAngle -= 90;
      }
    }
    return [horzAngle, vertAngle];
  }
  static projectOnVector(out, a, b) {
    var denominator = length$2(b);
    if (denominator === 0) {
      return set$2(out, 0, 0, 0);
    }
    var scalar = dot$2(a, b) / denominator;
    return scale$2(out, b, scalar);
  }
  static projectOnPlane(out, a, planeNormal) {
    MathUtils.projectOnVector(out, a, planeNormal);
    out[0] = a[0] - out[0];
    out[1] = a[1] - out[1];
    out[2] = a[2] - out[2];
    return out;
  }

  /**
   * Conver to points in plane.
   * @param {Array<Array<Number>>} points The points.
   * @return {Array<Array<Number>>}
   */
  static toPlanePoints(points) {
    if (!points || !points.length) {
      return [];
    }
    var vertexLength = points[0].length;
    if (!vertexLength) {
      return [];
    } else if (vertexLength == 3) {
      return points.map(point => {
        return [point[0], point[2]];
      });
    }
    return points.slice(0);
  }

  /**
   * Lerp quaternion.
   * @param {Array<Number>} start The start quaterion.
   * @param {Array<Number>} end The end quaterion.
   * @param {Number} alpha The alpha between [0, 1]
   * @return {Array<Number>}
   */
  static slerp(start, end, alpha) {
    var target = [];
    return slerp(target, start, end, alpha);
  }

  /**
   * Look at position.
   * @param {Array<Number>} eye The position of the viewer.
   * @param {Array<Number>} center The position where viewer is looking at.
   * @param {Array<Number>} up The up direction.
   * @return {Array<Number>} The 4x4 matrix.
   */
  static lookAt(eye, center, up) {
    var target = [];
    if (equals$2(eye, center)) {
      copy$3(target, _identity_mat4);
    } else {
      targetTo(target, eye, center, up);

      // If we get the invalid result then try to fix number by very small tolerance
      if (!target[0] || !target[5] || !target[10]) {
        var tolerance = MathUtils.TOLERANCE;
        targetTo(target, eye, [center[0] - tolerance, center[1] - tolerance, center[2] - tolerance], up);
      }
    }
    return target;
  }

  /**
   * Returns a quaternion representation of an angle in radian by axis.
   * @param {Array<Number>} axis The axis.
   * @param {Number} radian The radian.
   * @param {Array<Number>} target The referenced value of target.
   * @return {Array<Number>}
   */
  static getQuatFromAxisRadian(axis, radian, target) {
    var halfAngle = radian / 2,
      s = Math.sin(halfAngle);
    target = target || [];
    target[0] = axis[0] * s;
    target[1] = axis[1] * s;
    target[2] = axis[2] * s;
    target[3] = Math.cos(halfAngle);
    return target;
  }

  /**
   * Returns a quaternion representation of an angle in degrees by axis.
   * @param {Array<Number>} axis The axis.
   * @param {Number} angle The angle.
   * @param {Array<Number>} target The referenced value of target.
   * @return {Array<Number>}
   */
  static getQuatFromAxisAngle(axis, angle, target) {
    var radian = MathUtils.degToRad(angle);
    return MathUtils.getQuatFromAxisRadian(axis, radian, target);
  }
  static getQuatLength(quat) {
    return Math.sqrt(quat[0] * quat[0] + quat[1] * quat[1] + quat[2] * quat[2] + quat[3] * quat[3]);
  }

  /**
   * Returns a quaternion representation of an euler angle('XYZ') in degrees.
   * @param {Array<Number>} angles The angles in degrees.
   * @return {Array<Number>}
   */
  static getQuatFromAngles(angles, target) {
    if (target === void 0) {
      target = [0, 0, 0, 1];
    }
    var halfToRad = 0.5 * Math.PI / 180.0;
    var x = angles[0] * halfToRad;
    var y = angles[1] * halfToRad;
    var z = angles[2] * halfToRad;
    return _eulerToQuat(target, x, y, z);
  }

  /**
   * Returns a quaternion representation of an euler angle('XYZ') in radians.
   * @param {Array<Number>} euler The euler in radians.
   * @return {Array<Number>}
   */
  static getQuatFromEuler(euler, target) {
    if (target === void 0) {
      target = [0, 0, 0, 1];
    }
    var x = euler[0] * 0.5;
    var y = euler[1] * 0.5;
    var z = euler[2] * 0.5;
    return _eulerToQuat(target, x, y, z);
  }

  /**
   * Returns a quaternion representation of 4x4 matrix.
   * @param {Array<Number>} mat The 4x4 matrix.
   * @returns {Array<Number>}
   */
  static getQuatFromMat4(mat) {
    var target = [];
    return getRotation(target, mat);
  }

  /**
   * Get the quaternion from target and eye position.
   * @param {Array<Number>} eye The position of the viewer.
   * @param {Array<Number>} center The position where viewer is looking at.
   * @param {Array<Number>} up The up direction.
   * @return {Array<Number>}
   */
  static getQuatFromTarget(eye, center, up) {
    var mat = MathUtils.lookAt(center, eye, up);
    return MathUtils.getQuatFromMat4(mat);
  }

  /**
   * Returns an euler angle representation of a quaternion
   * @param {Array<Number>} quat Quaternion
   * @return {Array<Number>}
   */
  static getEulerFromQuat(quat) {
    fromQuat(_mat4, quat);
    var m11 = _mat4[0],
      m12 = _mat4[4],
      m13 = _mat4[8];
    var m22 = _mat4[5],
      m23 = _mat4[9];
    var m32 = _mat4[6],
      m33 = _mat4[10];
    var euler = [0, 0, 0];
    euler[1] = Math.asin(MathUtils.clamp(m13, -1, 1));
    if (Math.abs(m13) < 0.9999999) {
      euler[0] = Math.atan2(-m23, m33);
      euler[2] = Math.atan2(-m12, m11);
    } else {
      euler[0] = Math.atan2(m32, m22);
      euler[2] = 0;
    }
    return euler;
  }

  /**
   * Get angles from quat.
   * @param {Array<Number>} quat The quaternion.
   * @return {Array<Number>}
   */
  static getAnglesFromQuat(quat) {
    var euler = MathUtils.getEulerFromQuat(quat);
    return euler.map(radian => {
      return MathUtils.radToDeg(radian);
    });
  }

  /**
   * Convert pixel to screen coordinates in [-1, 1].
   * @param {Array<Number>} position The position.
   * @return {Array<Number>}
   */
  static pixelToScreenCoordinate(position, size) {
    return [position[0] / size[0] * 2 - 1, -(position[1] / size[1]) * 2 + 1];
  }

  /**
   * Convert screen coordinates [-1, 1] to pixel.
   * @param {Array<Number>} position The screen coordinates in [-1, 1].
   * @return {Array<Number>}
   */
  static screenCoordinateToPixel(position, size) {
    return [(position[0] + 1) / 2 * size[0], (position[1] - 1) / -2 * size[1]];
  }

  /**
   * Get position on direction by distance.
   * @param {Array<Number>} position The start position.
   * @param {Array<Number>} direction The direction.
   * @param {Number} scale The scale factor.
   * @return {Array<Number>}
   */
  static getPositionOnDirection(position, direction, scale) {
    return MathUtils.addVector(position, MathUtils.scaleVector(direction, scale));
  }

  /**
   * Get the position on the virtual plane by direction.
   * @param {Array<Number>} origin The start(eye) position.
   * @param {Array<Number>} target The target position on plane.
   * @param {Array<Number>} direction The plane direction.
   * @return {Array<Number>}
   */
  static getPositionOnPlane(origin, target, direction) {
    subtract(_vec3_1, origin, target);
    MathUtils.projectOnPlane(_vec3_2, _vec3_1, direction);
    add$2(_vec3_1, _vec3_2, target);
    return [_vec3_1[0], _vec3_1[1], _vec3_1[2]];
  }
  static createVec3() {
    return [0, 0, 0];
  }
  static createQuat() {
    return [0, 0, 0, 1];
  }
  static createEuler() {
    return [0, 0, 0];
  }
  static createMat3() {
    return [1, 0, 0, 0, 1, 0, 0, 0, 1];
  }

  /**
   * Create matrix4.
   * @param {Array<Number>} position The position.
   * @param {Array<Number>} angles The angles in degrees.
   * @param {Array<Number>} scale The scale.
   * @return {Array<Number>}
   */
  static createMat4(position, angles, scale) {
    if (arguments.length) {
      var _quat2 = MathUtils.getQuatFromAngles(angles, _quat);
      return fromRotationTranslationScale(MathUtils.createMat4(), _quat2, position, scale);
    } else {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }
  }
  static getPointOnLine(start, end, target) {
    var result;
    if (target === 1) {
      result = end.concat();
    } else if (target == 0) {
      result = start.concat();
    } else {
      result = MathUtils.subVector(end, start);
      result = MathUtils.scaleVector(result, target);
      result = MathUtils.addVector(start, result);
    }
    return result;
  }
  static getQuatFromUnitVectors(from, to) {
    // assumes direction vectors from and to are normalized
    var result = [];
    var r = MathUtils.dotVector(from, to) + 1;
    if (r < Number.EPSILON) {
      // from and to point in opposite directions

      r = 0;
      if (Math.abs(from[0]) > Math.abs(from[2])) {
        result[0] = -from[1];
        result[1] = from[0];
        result[2] = 0;
        result[3] = r;
      } else {
        result[0] = 0;
        result[1] = -from[2];
        result[2] = from[1];
        result[3] = r;
      }
    } else {
      // crossVectors( from, to ); // inlined to avoid cyclic dependency on Vector3

      result[0] = from[1] * to[2] - from[2] * to[1];
      result[1] = from[2] * to[0] - from[0] * to[2];
      result[2] = from[0] * to[1] - from[1] * to[0];
      result[3] = r;
    }
    return MathUtils.normalizeQuat(result);
  }
  static normalizeQuat(quat) {
    var result = [];
    var l = MathUtils.getQuatLength(quat);
    if (l === 0) {
      result[0] = 0;
      result[1] = 0;
      result[2] = 0;
      result[3] = 1;
    } else {
      l = 1 / l;
      result[0] = quat[0] * l;
      result[1] = quat[1] * l;
      result[2] = quat[2] * l;
      result[3] = quat[3] * l;
    }
    return result;
  }
  static getQuatLength(quat) {
    return Math.sqrt(quat[0] * quat[0] + quat[1] * quat[1] + quat[2] * quat[2] + quat[3] * quat[3]);
  }
  static multiplyQuat(a, b) {
    var qax = a[0],
      qay = a[1],
      qaz = a[2],
      qaw = a[3];
    var qbx = b[0],
      qby = b[1],
      qbz = b[2],
      qbw = b[3];
    var x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    var y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    var z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    var w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    return [x, y, z, w];
  }
  static vec3ApplyQuat(vector3, quaternion, out) {
    var x = vector3[0],
      y = vector3[1],
      z = vector3[2];
    var qx = quaternion[0],
      qy = quaternion[1],
      qz = quaternion[2],
      qw = quaternion[3];
    // calculate quat * vector
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z;
    // calculate result * inverse quat
    if (out === undefined) {
      out = [0, 0, 0];
    }
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
  }
  static decomposeFromMat4(matrix, position, quaternion, scale) {
    if (position) {
      getTranslation(position, matrix);
    }
    if (quaternion) {
      getRotation(quaternion, matrix);
      normalize(quaternion, quaternion);
    }
    if (scale) {
      getScaling(scale, matrix);
    }
  }
  static composeToMat4(position, quaternion, scale) {
    return fromRotationTranslationScale([], quaternion, position, scale);
  }
  static selfToWorld(matrixWorld, position, ignoreScale, target) {
    target = target || [];
    if (ignoreScale) {
      getTranslation(_position, matrixWorld);
      getScaling(_scale, matrixWorld);
      getRotation(_quat, matrixWorld);
      fromRotationTranslationScale(_mat4, _quat, _position, _original_scale);
      transformMat4(target, position, _mat4);
    } else {
      transformMat4(target, position, matrixWorld);
    }
    return target;
  }
  static worldToSelf(matrixWorld, position, ignoreScale, target) {
    target = target || [];
    if (ignoreScale) {
      getTranslation(_position, matrixWorld);
      getScaling(_scale, matrixWorld);
      getRotation(_quat, matrixWorld);
      fromRotationTranslationScale(_mat4_2, _quat, _position, _original_scale);
      invert$1(_mat4_1, _mat4_2);
    } else {
      invert$1(_mat4_1, matrixWorld);
    }
    transformMat4(target, position, _mat4_1);
    return target;
  }
  static intersectPlane(origin, direction, normal, constant) {
    var result = [];
    var denominator = MathUtils.dotVector(normal, direction);
    var t = -(MathUtils.dotVector(origin, normal) + constant) / denominator;
    if (t < 0) {
      return null;
    }
    result[0] = direction[0] * t + origin[0];
    result[1] = direction[1] * t + origin[1];
    result[2] = direction[2] * t + origin[2];
    return result;
  }
  static intersectsBox(min1, max1, min2, max2) {
    return max1[0] < min2[0] || min1[0] > max2[0] || max1[1] < min2[1] || min1[1] > max2[1] || max1[2] < min2[2] || min1[2] > max2[2] ? false : true;
  }
  static intersectsPoint(point, min, max) {
    return point[0] < min[0] || point[0] > max[0] || point[1] < min[1] || point[1] > max[1] || point[2] < min[2] || point[2] > max[2] ? false : true;
  }
  static snapPoint(point, workPlane) {
    var angles = MathUtils.getAnglesFromQuat(workPlane.quaternion);
    var workPlaneMatrix = MathUtils.createMat4(workPlane.position, angles, [1, 1, 1]);
    var workPlaneInverseMatrix = invert$1([], workPlaneMatrix);
    var workPlanePoint = transformMat4([], point, workPlaneInverseMatrix);
    var precision = Math.max(0, workPlane.precision);
    var snappedPoint = [];
    for (var _i2 = 0; _i2 < 3; _i2++) {
      var _data = workPlanePoint[_i2] * 0.1;
      var _integer = MathUtils.floor(_data);
      var temp = _data - _integer + precision * 0.1 * 0.5;
      var _decimal = precision > 0 ? temp - temp % (precision * 0.1) : temp;
      snappedPoint[_i2] = (_integer + _decimal) * 10;
    }
    var finalPoint = transformMat4([], snappedPoint, workPlaneMatrix);
    return finalPoint;
  }
  static getPointsSteps(points) {
    // Get the total distance of path
    var totalDistance = MathUtils.getDistanceFromPoints(points);
    if (!totalDistance) {
      return [];
    }
    var steps = [];
    for (var _i3 = 0; _i3 < points.length - 1; _i3++) {
      var distance = MathUtils.getDistance(points[_i3], points[_i3 + 1]);
      steps.push(distance / totalDistance);
    }
    return steps;
  }
  static getArrayIndexFromProgress(array, progress, steps) {
    if (!array.length) {
      return -1;
    }
    if (progress >= 1) {
      return array.length - 1;
    }
    if (steps) {
      var curProgress = 0;
      for (var _i4 = 0; _i4 < steps.length; _i4++) {
        var step = steps[_i4];
        var endProgress = curProgress + step;
        if (endProgress >= progress) {
          return _i4;
        }
        curProgress += step;
      }

      // Something wrong ...
      return curProgress;
    } else {
      var _step = 1 / array.length;
      var index = MathUtils.floor(progress / _step);
      return MathUtils.min(index, array.length - 1);
    }
  }
  static getArrayProgress(array, progress, steps) {
    if (!array.length) {
      return 0;
    }
    if (progress >= 1) {
      return 1;
    }
    if (steps) {
      var curProgress = 0;
      for (var _i5 = 0; _i5 < steps.length; _i5++) {
        var step = steps[_i5];
        if (!step) {
          continue;
        }
        var endProgress = curProgress + step;
        var deltaProgress = endProgress - progress;
        if (deltaProgress >= 0) {
          return 1 - deltaProgress / step;
        }
        curProgress += step;
      }
    } else {
      var _step2 = 1 / array.length;
      return MathUtils.fract(progress / _step2);
    }
  }
  static lerpPoints(points, steps, progress) {
    // Limit range progress for array index
    progress = MathUtils.clamp(progress, 0, 1);
    var from,
      to,
      index = -1;

    // Get the target position
    if (progress == 1) {
      index = points.length - 1;

      // The source(from) and target(to) position
      from = points[index - 1];
      to = points[index];
      MathUtils.vec3.copy(_vec3_0, points[index]);
    } else {
      index = MathUtils.getArrayIndexFromProgress(points, progress, steps);

      // Get the position by progress
      var rangeProgress = MathUtils.getArrayProgress(points, progress, steps);

      // The source(from) and target(to) position
      from = points[index];
      to = points[index + 1];
      MathUtils.vec3.lerp(_vec3_0, from, to, rangeProgress);
    }
    return {
      point: _vec3_0,
      index,
      from,
      to
    };
  }

  /**
   * @typedef {Object} Sphereical
   * @property {Number} [radius=1] The sphere radius.
   * @property {Number} [phi=0] Polar angle in radians from the y (up) axis
   * @property {Number} [theta=0] Equator angle in radians around the y (up) axis
   */

  /**
   * Make values of this spherical's radius, phi and theta properties from Cartesian coordinate.
   * @param {Array<Number>} vector The coordinate.
   * @returns {Sphereical}
   */
  static makeSphericalFromCartesianCoords(vector) {
    var spherical = {
      radius: 1,
      theta: 0,
      phi: 0
    };
    var x = vector[0];
    var y = vector[1];
    var z = vector[2];
    spherical.radius = Math.sqrt(x * x + y * y + z * z);
    if (spherical.radius === 0) {
      spherical.theta = 0;
      spherical.phi = 0;
    } else {
      spherical.theta = Math.atan2(x, z);
      spherical.phi = Math.acos(MathUtils.clamp(y / spherical.radius, -1, 1));
    }
    return spherical;
  }

  /**
   * Restricts the polar angle phi to be between 0.000001 and pi - 0.000001.
   * @param {Sphereical} spherical A point's spherical coordinates.
   * @returns {Sphereical}
   */
  static makeSphereicalSafe(spherical) {
    if (spherical === void 0) {
      spherical = {
        radius: 1,
        phi: 0,
        theta: 0
      };
    }
    var EPS = 0.000001;
    spherical.phi = Math.max(EPS, Math.min(Math.PI - EPS, spherical.phi));
    return spherical;
  }

  /**
   * Get vector from the spherical coordinates radius, phi and theta.
   * @param {Spherical} spherical A point's spherical coordinates.
   * @returns {Array<Number>}
   */
  static getFromSphericalCoords(spherical) {
    if (spherical === void 0) {
      spherical = {
        radius: 1,
        phi: 0,
        theta: 0
      };
    }
    var sinPhiRadius = Math.sin(spherical.phi) * spherical.radius;
    var x = sinPhiRadius * Math.sin(spherical.theta);
    var y = Math.cos(spherical.phi) * spherical.radius;
    var z = sinPhiRadius * Math.cos(spherical.theta);
    return [x, y, z];
  }

  /** 
   * If point in Line Segment. 
   * @param {Array<Number>} pointA - Line point A.
   * @param {Array<Number>} pointB - Line point B.
   * @param {Array<Number>} point - Test point.
   * @param {Number} [deviation=0.001] The deviation.
   * @param {Boolean} [containsEndpoint=true] - Default contains endpoint.
   * @return {Boolean}
   * @example
   * const inLineSegment = THING.MathUtils.pointInLineSegment([10,0],[10,10],[10,5]);
   * console.log(inLineSegment);
   */
  static pointInLineSegment(pointA, pointB, point, deviation, containsEndpoint) {
    deviation = deviation !== undefined ? deviation : 0.001;
    containsEndpoint = containsEndpoint !== undefined ? containsEndpoint : true;
    if (point[0] == pointA[0] && point[1] == pointA[1] || point[0] == pointB[0] && point[1] == pointB[1]) {
      return containsEndpoint;
    }
    return MathUtils.pointToLineDistance(pointA, pointB, point) < deviation && MathUtils.projectionInside(pointA, pointB, point, containsEndpoint);
  }

  /**
   * Distance between point and line.
   * @param {Array<Number>} pointA - Line point A.
   * @param {Array<Number>} pointB - Line point B.
   * @param {Array<Number>} point - Test point.
   * @return {Number}
   * @example
   * const distance = THING.MathUtils.pointToLineDistance([10,0],[10,10],[10,5]);
   * console.log(distance);
   */
  static pointToLineDistance(pointA, pointB, point) {
    var k, b, d;
    if (pointB[0] === pointA[0]) {
      k = Infinity;
      b = pointB[0];
    } else {
      k = (pointB[1] - pointA[1]) / (pointB[0] - pointA[0]);
      b = pointB[1] - k * pointB[0];
    }
    if (k !== Infinity) {
      d = Math.abs(k * point[0] - point[1] + b) / Math.sqrt(k * k + 1);
    } else {
      d = Math.abs(b - point[0]);
    }
    return d;
  }

  /**
   * If the projection of the point to the segment is inside.
   * @param {Array<Number>} pointA - Line point A.
   * @param {Array<Number>} pointB - Line point B.
   * @param {Array<Number>} point - Test point.
   * @param {Boolean} [containsEndpoint=true] - Default contains endpoint.
   * @return {Boolean}
   * @example
   * const inside = THING.MathUtils.projectionInside([10,0],[10,10],[10,5]);
   * console.log(inside);
   */
  static projectionInside(pointA, pointB, point, containsEndpoint) {
    containsEndpoint = containsEndpoint !== undefined ? containsEndpoint : true;
    if (pointA[0] === pointB[0] && pointA[1] === pointB[1]) {
      if (containsEndpoint) {
        return point[0] === pointA[0] && point[1] === pointA[1];
      } else {
        return false;
      }
    }
    point = MathUtils.projectPointToLineSegment(pointA, pointB, point);
    if (containsEndpoint) {
      return point[1] >= Math.min(pointB[1], pointA[1]) && Math.max(pointB[1], pointA[1]) >= point[1] && point[0] >= Math.min(pointB[0], pointA[0]) && Math.max(pointB[0], pointA[0]) >= point[0];
    } else {
      return point[1] > Math.min(pointB[1], pointA[1]) && Math.max(pointB[1], pointA[1]) > point[1] && point[0] > Math.min(pointB[0], pointA[0]) && Math.max(pointB[0], pointA[0]) > point[0] || point[0] === pointB[0] && pointB[0] === pointA[0] && point[1] > Math.min(pointB[1], pointA[1]) && Math.max(pointB[1], pointA[1]) > point[1] || point[1] === pointB[1] && pointB[1] === pointA[1] && point[0] > Math.min(pointB[0], pointA[0]) && Math.max(pointB[0], pointA[0]) > point[0];
    }
  }

  /**
   * Get projection point by Line Segment and origin point.
   * @param {Array<Number>} pointA - Line Segment point A.
   * @param {Array<Number>} pointB - Line Segment point B.
   * @param {Array<Number>} point - Test point.
   * @return {Array<Number>}
   * @example
   * const projectPoint = THING.MathUtils.projectPointToLineSegment([10,0],[10,10],[10,5]);
   * console.log(projectPoint);
   */
  static projectPointToLineSegment(pointA, pointB, point) {
    var k, b;
    if (Math.abs(pointB[0] - pointA[0]) <= 0.001) {
      k = "no";
      b = pointB[0];
    } else {
      k = (pointB[1] - pointA[1]) / (pointB[0] - pointA[0]);
      b = pointB[1] - k * pointB[0];
    }
    var calx, caly;
    if (k !== "no") {
      if (k !== 0) {
        calx = (point[1] + point[0] / k - b) * k / (k * k + 1);
        caly = k * calx + b;
      } else {
        calx = point[0];
        caly = pointB[1];
      }
    } else {
      calx = b;
      caly = point[1];
    }
    return [calx, caly];
  }

  /**
    * Returns a simplified array.
    * @param {Array<Array<Number>>} [array=[]] The array to simplify.
    * @param {Boolean} [filterEqualpoints=true] True indicates filter duplicate point sets.
    * @param {Number} [deviation=1.5] The angle deviation of the vector.
    * @returns {Array<Array<Number>>}
    */
  static simplifyPoints(array, filterEqualpoints, deviation) {
    if (array === void 0) {
      array = [];
    }
    if (filterEqualpoints === void 0) {
      filterEqualpoints = true;
    }
    if (deviation === void 0) {
      deviation = 1.5;
    }
    if (!array.length || array.length < 3) {
      return;
    }
    var points = array.slice();
    var pointsY = points[0][1];
    filterAdjacentRepeatPoints(points);
    if (filterEqualpoints) {
      points = filterSamePoints(points);
    }
    filterPointsInline(points);
    if (calculateSlope([points[points.length - 1], points[0], points[1]])) {
      points.splice(0, 1);
    }
    if (calculateSlope([points[points.length - 2], points[points.length - 1], points[0]])) {
      points.splice(points.length - 1, 1);
    }
    return points;
    function filterSamePoints(p) {
      // convert points to 2D and convert to lines
      var pLines = [];
      for (var _i6 = 0; _i6 < p.length - 1; _i6++) {
        pLines.push([[p[_i6][0], p[_i6][2]], [p[_i6 + 1][0], p[_i6 + 1][2]]]);
      }
      pLines.push([[p[p.length - 1][0], p[p.length - 1][2]], [p[0][0], p[0][2]]]);

      // the array index to be cut
      var spliceIndices = [];
      for (var _i7 = 0; _i7 < pLines.length - 1; _i7++) {
        for (var j = _i7 + 1; j < pLines.length; j++) {
          var curLine = pLines[_i7];
          var otherLine = pLines[j];
          if (MathUtils.equalsVector(curLine[0], otherLine[1]) && MathUtils.equalsVector(curLine[1], otherLine[0])) {
            spliceIndices.push([_i7, j]);
          }
        }
      }

      // the set of lines in the closed sum region
      var closedAreaLines = [];
      getclosedAreaLines(closedAreaLines, pLines, spliceIndices);

      // convert lines to 2D points 
      var closedAreaPoints = [];
      var _loop = function _loop(_i8) {
        var lPoints = [];
        closedAreaLines[_i8].forEach(closedAreaLine => {
          lPoints.push(closedAreaLine[0]);
        });
        closedAreaPoints.push(lPoints);
      };
      for (var _i8 = 0; _i8 < closedAreaLines.length; _i8++) {
        _loop(_i8);
      }

      // get the point set with the largest area
      var maxAreaPoints = [];
      var maxArea = 0;
      for (var _i9 = 0; _i9 < closedAreaPoints.length; _i9++) {
        var curArea = MathUtils.getArea(closedAreaPoints[_i9]);
        if (maxArea < curArea) {
          maxArea = curArea;
          maxAreaPoints = closedAreaPoints[_i9];
        }
      }

      // convert to 3D points 
      for (var _i10 = 0; _i10 < maxAreaPoints.length; _i10++) {
        var _points2 = maxAreaPoints[_i10].slice();
        maxAreaPoints[_i10] = [_points2[0], pointsY, _points2[1]];
      }
      return maxAreaPoints;
    }
    function getclosedAreaLines(cLines, lines, indices) {
      if (indices.length > 1) {
        for (var _i11 = indices.length - 1; _i11 >= 0; _i11--) {
          var curIndex = indices[_i11];
          for (var j = indices.length - 2; j >= 0; j--) {
            var otherIndex = indices[j];
            if (!isIntersect(curIndex, otherIndex)) {
              cLines.push(lines.splice(curIndex[0] + 1, curIndex[1] - curIndex[0] - 1));
              lines.splice(curIndex[0], 2);
              indices.splice(_i11, 2);
              for (var k = 0; k < indices.length; k++) {
                if (indices[k][0] > curIndex[0]) {
                  indices[k][0] -= curIndex[1] - curIndex[0] + 1;
                }
                if (indices[k][1] > curIndex[0]) {
                  indices[k][1] -= curIndex[1] - curIndex[0] + 1;
                }
              }
              getclosedAreaLines(cLines, lines, indices);
              return;
            }
          }
        }
      } else if (indices.length === 1) {
        cLines.push(lines.splice(indices[0][0] + 1, indices[0][1] - indices[0][0] - 1));
        lines.splice(indices[0][0], 2);
        cLines.push(lines);
      } else {
        cLines.push(lines);
      }
    }
    function isIntersect(a, b) {
      if ((b[0] > a[1] || b[0] < a[0]) && (b[1] > a[1] || b[1] < a[0])) {
        return false;
      }
      return true;
    }
    function filterPointsInline(p, idx) {
      if (idx === void 0) {
        idx = 1;
      }
      for (var _i12 = idx; _i12 < p.length - 1; _i12++) {
        if (calculateSlope([p[_i12 - 1], p[_i12], p[_i12 + 1]])) {
          p.splice(_i12, 1);
          filterPointsInline(p, _i12);
          return;
        }
      }
    }
    function filterAdjacentRepeatPoints(p, idx) {
      if (idx === void 0) {
        idx = 0;
      }
      for (var _i13 = idx; _i13 < p.length; _i13++) {
        if (_i13 !== p.length - 1) {
          if (MathUtils.equalsVector(p[_i13], p[_i13 + 1])) {
            p.splice(_i13, 1);
            filterAdjacentRepeatPoints(p, _i13);
            return;
          }
        } else {
          if (MathUtils.equalsVector(p[_i13], p[0])) {
            p.splice(_i13, 1);
          }
        }
      }
    }
    function calculateSlope(p) {
      var prePoint = p[0];
      var curPoint = p[1];
      var nexPoint = p[2];
      var vectorA = MathUtils.normalizeVector(MathUtils.subVector(prePoint, curPoint));
      var vectorB = MathUtils.normalizeVector(MathUtils.subVector(curPoint, nexPoint));
      var acosAB = MathUtils.acos(MathUtils.dotVector(vectorA, vectorB));
      var angle = MathUtils.radToDeg(acosAB);
      return angle < deviation;
    }
  }

  /** 
   * If two Line Segment intersect. 
   * Before calling this, make sure the two line segments not Collinear.
   * @param {Array<Number>} a - Line1 point start.
   * @param {Array<Number>} b - Line1 point end.
   * @param {Array<Number>} c - Line2 point start.
   * @param {Array<Number>} d - Line2 point end.
   * @param {Number} [deviation=0.001] The deviation for point in line segment.
   * @return {Array<Array<Number>>}
   * @example
   * const intersectPoint = THING.MathUtils.intersectLineSegments([0, 0], [2, 0], [1, 0], [1, 1])
   * console.log(intersectPoint);
   */
  static intersectLineSegments(a, b, c, d, deviation) {
    deviation = deviation !== undefined ? deviation : 0.001;

    // for point in line segment.
    if (deviation > 0) {
      if (MathUtils.pointInLineSegment(a, b, c, deviation)) {
        return c[0] == a[0] && c[1] == a[1] || c[0] == b[0] && c[1] == b[1] ? null : [c[0], c[1]];
      }
      if (MathUtils.pointInLineSegment(a, b, d, deviation)) {
        return d[0] == a[0] && d[1] == a[1] || d[0] == b[0] && d[1] == b[1] ? null : [d[0], d[1]];
      }
      if (MathUtils.pointInLineSegment(c, d, a, deviation)) {
        return a[0] == c[0] && a[1] == c[1] || a[0] == d[0] && a[1] == d[1] ? null : [a[0], a[1]];
      }
      if (MathUtils.pointInLineSegment(c, d, b, deviation)) {
        return b[0] == c[0] && b[1] == c[1] || b[0] == d[0] && b[1] == d[1] ? null : [b[0], b[1]];
      }
    }
    var area_abc = (a[0] - c[0]) * (b[1] - c[1]) - (a[1] - c[1]) * (b[0] - c[0]);
    var area_abd = (a[0] - d[0]) * (b[1] - d[1]) - (a[1] - d[1]) * (b[0] - d[0]);
    if (area_abc * area_abd > 0) {
      return null;
    }
    var area_cda = (c[0] - a[0]) * (d[1] - a[1]) - (c[1] - a[1]) * (d[0] - a[0]);
    var area_cdb = area_cda + area_abc - area_abd;
    if (area_cda * area_cdb > 0) {
      return null;
    }
    if (area_abd - area_abc === 0) {
      return null;
    }
    var t = area_cda / (area_abd - area_abc);
    var dx = t * (b[0] - a[0]),
      dy = t * (b[1] - a[1]);
    return [a[0] + dx, a[1] + dy];
  }

  /**
   * gen the smooth path form ori path by the bezier generator 
   * @param {Array} path origin path
   * @param {Number} curvature the curvature is a param for indicade where start and stop the smooth from the point
   * @param {Number} divisions the divisions is the number of divisions for the position at the point of inflexion
   * @returns {Array} new path
   */
  static genSmoothPathByBezier(path, curvature, divisions) {
    if (curvature === void 0) {
      curvature = 0.5;
    }
    if (divisions === void 0) {
      divisions = 50;
    }
    if (!path || !path.length) {
      return null;
    }
    if (curvature > 1.0 || curvature < 0.0) {
      console.error("curvature must between 0.0 and 1.0!");
      return path;
    }
    if (divisions <= 0) {
      console.error("divisions must above 0!");
      return path;
    }
    var generator = new BezierPathGenerator(divisions);
    var near = 1 - curvature;
    var splitArr = generator.splitPoints(path, near);
    splitArr.forEach((item, index) => {
      var points = generator.getPoints(item[1], item[2], item[3]);
      if (index == 0) {
        splitArr[index] = [item[0], ...points];
      } else if (index == splitArr.length - 1) {
        splitArr[index] = [...points, item[4]];
      } else {
        splitArr[index] = [...points];
      }
    });
    var arr = [];
    splitArr.forEach(item => {
      item.forEach(itm => {
        arr.push(itm);
      });
    });
    var anglePoint = generator.getNearPoint(arr[0], arr[1], 0.01);
    arr.splice(1, 0, [anglePoint[0], anglePoint[1], anglePoint[2]]);
    return arr;
  }
}
MathUtils.DEG2RAD = Math.PI / 180;
MathUtils.RAD2DEG = 180 / Math.PI;
MathUtils.TOLERANCE = 0.00001;
MathUtils.E = Math.E;
MathUtils.LN2 = Math.LN2;
MathUtils.LN10 = Math.LN10;
MathUtils.LOG2E = Math.LOG2E;
MathUtils.LOG10E = Math.LOG10E;
MathUtils.PI = Math.PI;
MathUtils.SQRT1_2 = Math.SQRT1_2;
MathUtils.SQRT2 = Math.SQRT2;
MathUtils.abs = Math.abs;
MathUtils.acos = Math.acos;
MathUtils.acosh = Math.acosh;
MathUtils.asin = Math.asin;
MathUtils.asinh = Math.asinh;
MathUtils.atan = Math.atan;
MathUtils.atan2 = Math.atan2;
MathUtils.atanh = Math.atanh;
MathUtils.cbrt = Math.cbrt;
MathUtils.ceil = Math.ceil;
MathUtils.clz32 = Math.clz32;
MathUtils.cos = Math.cos;
MathUtils.cosh = Math.cosh;
MathUtils.exp = Math.exp;
MathUtils.expm1 = Math.expm1;
MathUtils.floor = Math.floor;
MathUtils.fround = Math.fround;
MathUtils.hypot = Math.hypot;
MathUtils.imul = Math.imul;
MathUtils.log = Math.log;
MathUtils.log1p = Math.log1p;
MathUtils.log2 = Math.log2;
MathUtils.log10 = Math.log10;
MathUtils.max = Math.max;
MathUtils.min = Math.min;
MathUtils.pow = Math.pow;
MathUtils.random = Math.random;
MathUtils.round = Math.round;
MathUtils.sign = Math.sign;
MathUtils.sin = Math.sin;
MathUtils.sinh = Math.sinh;
MathUtils.sqrt = Math.sqrt;
MathUtils.tan = Math.tan;
MathUtils.tanh = Math.tanh;
MathUtils.trunc = Math.trunc;
MathUtils.vec3 = vec3;
MathUtils.quat = quat;
MathUtils.mat3 = mat3;
MathUtils.mat4 = mat4;

export { ArgumentParser, ArrayProxy, AstParser, BaseUtils, BufferAllocator, Callbacks, CancelablePromise, CircularQueue, 
  CommandExecutor, DynamicCachedObject, EventDispatcher, Expression, FilteredArray, Flags, IdAllocator, IndexAllocator, 
  Layers, LogLevelType, MathUtils, ObjectAttributes, ObjectPool, ObjectProxy, RandomGenerator, RefCountObject, 
  ResolvableCachedObject, ResolvablePromise, StateGroup, StringEncoder, Switcher, Timer, TypeChecker, TypedObject, 
  Utils$1 as Utils, Version, external };
